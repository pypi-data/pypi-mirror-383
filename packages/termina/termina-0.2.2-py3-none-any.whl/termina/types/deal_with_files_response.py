# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .company_response import CompanyResponse
from .deal_data_availability_response import DealDataAvailabilityResponse
from .deal_status import DealStatus
from .file_response import FileResponse
from .priority import Priority
from .simple_user_response import SimpleUserResponse


class DealWithFilesResponse(UniversalBaseModel):
    round_name: str = pydantic.Field()
    """
    The name of the round
    """

    notes: typing.Optional[str] = pydantic.Field(default=None)
    """
    Notes about the deal
    """

    priority: typing.Optional[Priority] = pydantic.Field(default=None)
    """
    The priority of the deal
    """

    round_amount: typing.Optional[int] = pydantic.Field(default=None)
    """
    The dollar amount to be raised of the round
    """

    round_target: typing.Optional[int] = pydantic.Field(default=None)
    """
    The target post-money dollar amount of the round
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The tags associated with the deal
    """

    company_summary: typing.Optional[str] = pydantic.Field(default=None)
    """
    The summary of the company
    """

    deal_lead_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The id of the user who is the deal lead
    """

    id: int
    created_at: typing.Optional[dt.datetime] = None
    updated_at: typing.Optional[dt.datetime] = None
    is_archived: typing.Optional[bool] = None
    company: CompanyResponse
    files: typing.Optional[typing.List[FileResponse]] = None
    data: typing.Optional[DealDataAvailabilityResponse] = None
    categories: typing.Optional[typing.List[str]] = None
    deal_lead: typing.Optional[SimpleUserResponse] = None
    status: typing.Optional[DealStatus] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
