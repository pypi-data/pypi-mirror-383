# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FinancialMetrics(UniversalBaseModel):
    date: str = pydantic.Field()
    """
    The date of the financial metrics.
    """

    lifetime_gross_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    The lifetime gross margin, integrated over all time.
    """

    lifetime_operating_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    The lifetime operating margin, integrated over all time.
    """

    rule_of_40: typing.Optional[float] = pydantic.Field(default=None)
    """
    The rule of 40, defined as the year over year growth plus the operating margin, with slight smoothing to handle variations.
    """

    magic_number: typing.Optional[float] = pydantic.Field(default=None)
    """
    The magic number, defined as the revenue growth divided by the offset sales and marketing cost, with slight smoothing to handle variations. Magic Number above 10 is treated as missing.
    """

    margin_magic_number: typing.Optional[float] = pydantic.Field(default=None)
    """
    The margin magic number, defined as the gross profit growth divided by the offset sales and marketing cost, with slight smoothing to handle variations. Margin Magic Number above 10 is treated as missing.
    """

    burn_multiple: typing.Optional[float] = pydantic.Field(default=None)
    """
    The burn multiple, defined as the cash burn divided by the revenue growth, with slight smoothing to handle variations. The operating margin is used in place of the cash burn if the cash burn is not available. Not defined if the revenue growth is negative.
    """

    margin_burn_multiple: typing.Optional[float] = pydantic.Field(default=None)
    """
    The margin burn multiple, defined as the cash burn divided by the gross profit growth, with slight smoothing to handle variations. The operating margin is used in place of the cash burn if the cash burn is not available. Not defined if the gross profit growth is negative.
    """

    roas: typing.Optional[float] = pydantic.Field(default=None)
    """
    Proxy for Return on Ad Spend (ROAS), calculated using the previous month's sales and marketing spend as a rolling approximation. Most applicable when sales and marketing expenses are well-labeled and when customer churn is high. May not be accurate for businesses with long sales cycles or low churn. ROAS above 20 is treated as missing.
    """

    margin_roas: typing.Optional[float] = pydantic.Field(default=None)
    """
    Gross Margin adjusted ROAS, applying gross margin to the standard ROAS calculation. Uses the same rolling approximation approach and has similar applicability constraints regarding well-labeled S+M expenses and high churn environments. Margin ROAS above 20 is treated as missing.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
