# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class BenchmarkQuantile(UniversalBaseModel):
    quantile: float = pydantic.Field()
    """
    Quantile
    """

    revenue: typing.Optional[float] = pydantic.Field(default=None)
    """
    Revenue
    """

    rolling_3_m_average_revenue: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="rolling_3m_average_revenue")
    ] = pydantic.Field(default=None)
    """
    Average Revenue (Rolling Q)
    """

    annualized_revenue: typing.Optional[float] = pydantic.Field(default=None)
    """
    Annualized Revenue
    """

    rolling_3_m_annualized_revenue: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="rolling_3m_annualized_revenue")
    ] = pydantic.Field(default=None)
    """
    Annualized Revenue (Rolling Q)
    """

    revenue_share_of_top_20_percent: typing.Optional[float] = pydantic.Field(default=None)
    """
    Revenue Share of Top 20%
    """

    revenue_share_of_top_10_count: typing.Optional[float] = pydantic.Field(default=None)
    """
    Revenue Share of Top 10 Users
    """

    average_to_median: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average to Median Revenue
    """

    gini_coefficient: typing.Optional[float] = pydantic.Field(default=None)
    """
    Gini Coefficient
    """

    lifetime_quick_ratio: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average Quick Ratio
    """

    lifetime_gross_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average Gross Retention
    """

    lifetime_net_churn: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average Net Churn
    """

    cmgr_3: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr3")] = pydantic.Field(
        default=None
    )
    """
    CMGR3
    """

    cmgr_6: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr6")] = pydantic.Field(
        default=None
    )
    """
    CMGR6
    """

    cmgr_12: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr12")] = pydantic.Field(
        default=None
    )
    """
    CMGR12
    """

    yoy: typing.Optional[float] = pydantic.Field(default=None)
    """
    YoY Growth
    """

    operating_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    Operating Margin
    """

    quarterly_operating_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    Operating Margin (Rolling Q)
    """

    gross_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    Gross Margin
    """

    quarterly_gross_margin: typing.Optional[float] = pydantic.Field(default=None)
    """
    Gross Margin (Rolling Q)
    """

    magic_number: typing.Optional[float] = pydantic.Field(default=None)
    """
    Magic Number
    """

    margin_magic_number: typing.Optional[float] = pydantic.Field(default=None)
    """
    Margin Magic Number
    """

    rule_of_40: typing.Optional[float] = pydantic.Field(default=None)
    """
    Rule of 40
    """

    burn_multiple: typing.Optional[float] = pydantic.Field(default=None)
    """
    Burn Multiple
    """

    margin_burn_multiple: typing.Optional[float] = pydantic.Field(default=None)
    """
    Margin Burn Multiple
    """

    roas: typing.Optional[float] = pydantic.Field(default=None)
    """
    Proxy for Return on Ad Spend (ROAS)
    """

    margin_roas: typing.Optional[float] = pydantic.Field(default=None)
    """
    Gross Margin adjusted ROAS
    """

    acquisition_spend: typing.Optional[float] = pydantic.Field(default=None)
    """
    Acquisition Spend
    """

    total_opex: typing.Optional[float] = pydantic.Field(default=None)
    """
    Total OPEX
    """

    logo_retention_6_m: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="logo_retention_6m")
    ] = pydantic.Field(default=None)
    """
    Logo Retention (6M)
    """

    logo_retention_12_m: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="logo_retention_12m")
    ] = pydantic.Field(default=None)
    """
    Logo Retention (12M)
    """

    revenue_retention_6_m: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="revenue_retention_6m")
    ] = pydantic.Field(default=None)
    """
    Revenue Retention (6M)
    """

    revenue_retention_12_m: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="revenue_retention_12m")
    ] = pydantic.Field(default=None)
    """
    Revenue Retention (12M)
    """

    ltv_6_m: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="ltv_6m")] = pydantic.Field(
        default=None
    )
    """
    LTV6
    """

    ltv_12_m: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="ltv_12m")] = pydantic.Field(
        default=None
    )
    """
    LTV12
    """

    ltv_6_cac: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="ltv6_cac")] = pydantic.Field(
        default=None
    )
    """
    LTV6/CAC
    """

    ltv_12_cac: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="ltv12_cac")] = pydantic.Field(
        default=None
    )
    """
    LTV12/CAC
    """

    gmltv_6_cac: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="gmltv6_cac")] = (
        pydantic.Field(default=None)
    )
    """
    gmLTV6/CAC
    """

    gmltv_12_cac: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="gmltv12_cac")] = (
        pydantic.Field(default=None)
    )
    """
    gmLTV12/CAC
    """

    lifetime_ltv_6_cac: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lifetime_ltv6_cac")
    ] = pydantic.Field(default=None)
    """
    Average LTV6/CAC
    """

    lifetime_ltv_12_cac: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lifetime_ltv12_cac")
    ] = pydantic.Field(default=None)
    """
    Average LTV12/CAC
    """

    lifetime_gmltv_6_cac: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lifetime_gmltv6_cac")
    ] = pydantic.Field(default=None)
    """
    Average gmLTV6/CAC
    """

    lifetime_gmltv_12_cac: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lifetime_gmltv12_cac")
    ] = pydantic.Field(default=None)
    """
    Average gmLTV12/CAC
    """

    cac: typing.Optional[float] = pydantic.Field(default=None)
    """
    CAC
    """

    irr: typing.Optional[float] = pydantic.Field(default=None)
    """
    IRR
    """

    periods_to_payback: typing.Optional[float] = pydantic.Field(default=None)
    """
    Months to Payback
    """

    employee_count: typing.Optional[float] = pydantic.Field(default=None)
    """
    Number of Employees
    """

    cumulative_person_years: typing.Optional[float] = pydantic.Field(default=None)
    """
    Cumulative Years of Effort
    """

    employee_retention_1_yr: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="employee_retention_1yr")
    ] = pydantic.Field(default=None)
    """
    Employee Retention (1Y)
    """

    employee_retention_2_yr: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="employee_retention_2yr")
    ] = pydantic.Field(default=None)
    """
    Employee Retention (2Y)
    """

    average_years_of_experience: typing.Optional[float] = pydantic.Field(default=None)
    """
    Average Employee Experience (Years)
    """

    lifetime_employee_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    Lifetime Employee Retention
    """

    percent_employees_sales_and_marketing: typing.Optional[float] = pydantic.Field(default=None)
    """
    Sales + Marketing (% Employees)
    """

    fully_loaded_employee_cost: typing.Optional[float] = pydantic.Field(default=None)
    """
    Fully-Loaded Employee Cost
    """

    annualized_revenue_per_employee: typing.Optional[float] = pydantic.Field(default=None)
    """
    Annualized Revenue per Employee
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
