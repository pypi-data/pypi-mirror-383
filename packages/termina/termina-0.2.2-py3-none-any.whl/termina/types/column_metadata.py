# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .scaling import Scaling
from .unit import Unit


class ColumnMetadata(UniversalBaseModel):
    name: str = pydantic.Field()
    """
    The name of the column.
    """

    friendly_name: str = pydantic.Field()
    """
    The friendly displayable name of the column.
    """

    unit: Unit = pydantic.Field()
    """
    The unit of the category.
    """

    scaling: Scaling = pydantic.Field()
    """
    The scaling type of the column. Geometric indicates exponential changes are expected, while arithmetic indicates linear changes.
    """

    reverse: bool = pydantic.Field()
    """
    Whether the column is expected to be higher or lower for better performance. False means higher is better, True means lower is better.
    """

    cutoff: typing.Optional[float] = pydantic.Field(default=None)
    """
    The **suggested** cutoff value for the column. This is a guideline for when the absolute value of the column is considered saturated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
