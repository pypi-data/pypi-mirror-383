# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class ConcentrationTimeseriesDetail(UniversalBaseModel):
    date: str = pydantic.Field()
    """
    The date of the entry.
    """

    top_5_count: typing.Optional[float] = pydantic.Field(default=None)
    """
    The share of amount in the top 5 users.
    """

    top_10_count: typing.Optional[float] = pydantic.Field(default=None)
    """
    The share of amount in the top 10 users.
    """

    top_20_count: typing.Optional[float] = pydantic.Field(default=None)
    """
    The share of amount in the top 20 users.
    """

    top_10_percent: typing.Optional[float] = pydantic.Field(default=None)
    """
    The share of amount in the top 10% of users.
    """

    top_20_percent: typing.Optional[float] = pydantic.Field(default=None)
    """
    The share of amount in the top 20% of users.
    """

    mean: typing.Optional[float] = pydantic.Field(default=None)
    """
    The mean amount in the period.
    """

    p_25: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="p25")] = pydantic.Field(default=None)
    """
    The 25th percentile of the amount in the period.
    """

    median: typing.Optional[float] = pydantic.Field(default=None)
    """
    The 50th percentile of the amount in the period.
    """

    p_75: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="p75")] = pydantic.Field(default=None)
    """
    The 75th percentile of the amount in the period.
    """

    p_90: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="p90")] = pydantic.Field(default=None)
    """
    The 90th percentile of the amount in the period.
    """

    average_to_median: typing.Optional[float] = pydantic.Field(default=None)
    """
    The ratio of the mean to the median amount in the period.
    """

    gini_coefficient: typing.Optional[float] = pydantic.Field(default=None)
    """
    The Gini coefficient of the amount in the period, ranging from 0 to 1.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
