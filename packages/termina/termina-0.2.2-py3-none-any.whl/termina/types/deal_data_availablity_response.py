# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .product_info_response import ProductInfoResponse
from .unit_economics_info_response import UnitEconomicsInfoResponse


class DealDataAvailablityResponse(UniversalBaseModel):
    financials_exist: bool = pydantic.Field()
    """
    Financials data has been processed for this deal
    """

    talent_exists: bool = pydantic.Field()
    """
    Talent data has been processed for this deal
    """

    product_metrics: typing.List[ProductInfoResponse] = pydantic.Field()
    """
    List of which product metrics are available for this deal
    """

    unit_economics_metrics: typing.List[UnitEconomicsInfoResponse] = pydantic.Field()
    """
    List of which user types with unit economics metrics are available for this deal
    """

    benchmarks_user_types: typing.List[str] = pydantic.Field()
    """
    List of user types with benchmarks available for this deal
    """

    benchmark_categories: typing.List[str] = pydantic.Field()
    """
    List of categories applied to the company associated with this deal
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
