# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.general_metadata_response import GeneralMetadataResponse
from ..types.json_value import JsonValue
from ..types.paginated_response_general_metadata_response import PaginatedResponseGeneralMetadataResponse
from .raw_client import AsyncRawViewClient, RawViewClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ViewClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawViewClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawViewClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawViewClient
        """
        return self._raw_client

    def search(
        self,
        group_id: int,
        *,
        tags: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseGeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        tags : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseGeneralMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.search(
            group_id=1,
        )
        """
        _response = self._raw_client.search(
            group_id,
            tags=tags,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def delete_all(self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.delete_all(
            group_id=1,
        )
        """
        _response = self._raw_client.delete_all(group_id, request_options=request_options)
        return _response.data

    def get(
        self, group_id: int, view_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.get(
            group_id=1,
            view_id=1,
        )
        """
        _response = self._raw_client.get(group_id, view_id, request_options=request_options)
        return _response.data

    def update(
        self,
        group_id: int,
        view_id: int,
        *,
        content: JsonValue,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        content : JsonValue

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.update(
            group_id=1,
            view_id=1,
            content={"key": "value"},
            tags=["tags", "tags"],
        )
        """
        _response = self._raw_client.update(
            group_id, view_id, content=content, tags=tags, request_options=request_options
        )
        return _response.data

    def delete(self, group_id: int, view_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.delete(
            group_id=1,
            view_id=1,
        )
        """
        _response = self._raw_client.delete(group_id, view_id, request_options=request_options)
        return _response.data

    def create(
        self,
        group_id: int,
        *,
        content: JsonValue,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        content : JsonValue

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.view.create(
            group_id=1,
            content={"key": "value"},
            tags=["tags", "tags"],
        )
        """
        _response = self._raw_client.create(group_id, content=content, tags=tags, request_options=request_options)
        return _response.data


class AsyncViewClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawViewClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawViewClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawViewClient
        """
        return self._raw_client

    async def search(
        self,
        group_id: int,
        *,
        tags: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseGeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        tags : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseGeneralMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.search(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            group_id,
            tags=tags,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def delete_all(self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.delete_all(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_all(group_id, request_options=request_options)
        return _response.data

    async def get(
        self, group_id: int, view_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.get(
                group_id=1,
                view_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, view_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        group_id: int,
        view_id: int,
        *,
        content: JsonValue,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        content : JsonValue

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.update(
                group_id=1,
                view_id=1,
                content={"key": "value"},
                tags=["tags", "tags"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id, view_id, content=content, tags=tags, request_options=request_options
        )
        return _response.data

    async def delete(
        self, group_id: int, view_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        group_id : int

        view_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.delete(
                group_id=1,
                view_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(group_id, view_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        group_id: int,
        *,
        content: JsonValue,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralMetadataResponse:
        """
        Parameters
        ----------
        group_id : int

        content : JsonValue

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.view.create(
                group_id=1,
                content={"key": "value"},
                tags=["tags", "tags"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(group_id, content=content, tags=tags, request_options=request_options)
        return _response.data
