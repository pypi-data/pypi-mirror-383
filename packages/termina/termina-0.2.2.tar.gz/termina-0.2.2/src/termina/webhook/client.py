# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.calendly_event_type import CalendlyEventType
from ..types.calendly_payload import CalendlyPayload
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WebhookClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def calendly_webhook(
        self,
        *,
        event: CalendlyEventType,
        created_at: str,
        created_by: str,
        payload: CalendlyPayload,
        calendly_webhook_signature: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Associate meeting events with deals when a Calendly webhook is received.

        Parameters
        ----------
        event : CalendlyEventType
            The event that caused the webhook to fire

        created_at : str
            The moment when the event was created

        created_by : str
            The user who created the webhook

        payload : CalendlyPayload

        calendly_webhook_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from termina import (
            CalendlyPayload,
            CalendlyScheduledEvent,
            CalendlyTracking,
            Termina,
        )

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.webhook.calendly_webhook(
            event="invitee.created",
            created_at="2020-11-23T17:51:18.327602Z",
            created_by="https://api.calendly.com/users/AAAAAAAAAAAAAAAA",
            payload=CalendlyPayload(
                email="test@example.com",
                scheduled_event=CalendlyScheduledEvent(
                    uri="https://api.calendly.com/scheduled_events/GBGBDCAADAEDCRZ2",
                    start_time="2019-08-24T14:15:22.123456Z",
                ),
                tracking=CalendlyTracking(),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/webhook/calendly",
            method="POST",
            json={
                "event": event,
                "created_at": created_at,
                "created_by": created_by,
                "payload": convert_and_respect_annotation_metadata(
                    object_=payload, annotation=CalendlyPayload, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
                "Calendly-Webhook-Signature": str(calendly_webhook_signature)
                if calendly_webhook_signature is not None
                else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWebhookClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def calendly_webhook(
        self,
        *,
        event: CalendlyEventType,
        created_at: str,
        created_by: str,
        payload: CalendlyPayload,
        calendly_webhook_signature: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Associate meeting events with deals when a Calendly webhook is received.

        Parameters
        ----------
        event : CalendlyEventType
            The event that caused the webhook to fire

        created_at : str
            The moment when the event was created

        created_by : str
            The user who created the webhook

        payload : CalendlyPayload

        calendly_webhook_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import (
            AsyncTermina,
            CalendlyPayload,
            CalendlyScheduledEvent,
            CalendlyTracking,
        )

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook.calendly_webhook(
                event="invitee.created",
                created_at="2020-11-23T17:51:18.327602Z",
                created_by="https://api.calendly.com/users/AAAAAAAAAAAAAAAA",
                payload=CalendlyPayload(
                    email="test@example.com",
                    scheduled_event=CalendlyScheduledEvent(
                        uri="https://api.calendly.com/scheduled_events/GBGBDCAADAEDCRZ2",
                        start_time="2019-08-24T14:15:22.123456Z",
                    ),
                    tracking=CalendlyTracking(),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/webhook/calendly",
            method="POST",
            json={
                "event": event,
                "created_at": created_at,
                "created_by": created_by,
                "payload": convert_and_respect_annotation_metadata(
                    object_=payload, annotation=CalendlyPayload, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
                "Calendly-Webhook-Signature": str(calendly_webhook_signature)
                if calendly_webhook_signature is not None
                else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
