# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.group_response import GroupResponse
from ..types.group_with_users_response import GroupWithUsersResponse
from ..types.list_users_response import ListUsersResponse
from ..types.user_role_response import UserRoleResponse
from .raw_client import AsyncRawGroupClient, RawGroupClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GroupClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGroupClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGroupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGroupClient
        """
        return self._raw_client

    def get_by_account(
        self,
        *,
        account: str,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupWithUsersResponse:
        """
        Lookup a group by its account.

        Parameters
        ----------
        account : str

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.get_by_account(
            account="account",
        )
        """
        _response = self._raw_client.get_by_account(
            account=account,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def publish_message(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.publish_message(
            group_id=1,
        )
        """
        _response = self._raw_client.publish_message(group_id, request_options=request_options)
        return _response.data

    def get(self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> GroupWithUsersResponse:
        """
        Get a group by its ID.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.get(
            group_id=1,
        )
        """
        _response = self._raw_client.get(group_id, request_options=request_options)
        return _response.data

    def update(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        account: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        analysis_email: typing.Optional[str] = OMIT,
        data_api_access: typing.Optional[bool] = OMIT,
        account_manager_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupWithUsersResponse:
        """
        Update a group.

        The account, API access, analysis email, and account manager fields can only be modified by administrators.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        account : typing.Optional[str]
            The account of the group. Must be a valid domain, URL, or email. The account will be normalized to a canonical form.

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the group

        analysis_email : typing.Optional[str]
            The email address for analysis to be sent to

        data_api_access : typing.Optional[bool]
            Whether the group has access to the data API

        account_manager_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.update(
            group_id=1,
        )
        """
        _response = self._raw_client.update(
            group_id,
            name=name,
            account=account,
            thumbnail_url=thumbnail_url,
            analysis_email=analysis_email,
            data_api_access=data_api_access,
            account_manager_id=account_manager_id,
            request_options=request_options,
        )
        return _response.data

    def list_users(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Get all users in a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.list_users(
            group_id=1,
        )
        """
        _response = self._raw_client.list_users(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def search_users(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Get all users in a group.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        email : typing.Optional[str]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.search_users(
            group_id=1,
        )
        """
        _response = self._raw_client.search_users(
            group_id,
            name=name,
            email=email,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def upload_group_avatar(
        self, group_id: int, *, image: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> GroupResponse:
        """
        Upload an avatar for a group.

        Parameters
        ----------
        group_id : int

        image : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.upload_group_avatar(
            group_id=1,
        )
        """
        _response = self._raw_client.upload_group_avatar(group_id, image=image, request_options=request_options)
        return _response.data

    def create_user_role(
        self,
        user_id: int,
        group_id: int,
        *,
        role_id: typing.Optional[int] = OMIT,
        role_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserRoleResponse:
        """
        Add a user role to a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        role_id : typing.Optional[int]

        role_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.create_user_role(
            user_id=1,
            group_id=1,
        )
        """
        _response = self._raw_client.create_user_role(
            user_id, group_id, role_id=role_id, role_name=role_name, request_options=request_options
        )
        return _response.data

    def update_user_roles(
        self,
        user_id: int,
        group_id: int,
        *,
        role_ids: typing.Sequence[int],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserRoleResponse:
        """
        Update the roles of a user in a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        role_ids : typing.Sequence[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.update_user_roles(
            user_id=1,
            group_id=1,
            role_ids=[1],
        )
        """
        _response = self._raw_client.update_user_roles(
            user_id, group_id, role_ids=role_ids, request_options=request_options
        )
        return _response.data

    def remove_user(
        self, user_id: int, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UserRoleResponse:
        """
        Remove a user from a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.group.remove_user(
            user_id=1,
            group_id=1,
        )
        """
        _response = self._raw_client.remove_user(user_id, group_id, request_options=request_options)
        return _response.data


class AsyncGroupClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGroupClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGroupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGroupClient
        """
        return self._raw_client

    async def get_by_account(
        self,
        *,
        account: str,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupWithUsersResponse:
        """
        Lookup a group by its account.

        Parameters
        ----------
        account : str

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.get_by_account(
                account="account",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_account(
            account=account,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def publish_message(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.publish_message(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.publish_message(group_id, request_options=request_options)
        return _response.data

    async def get(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GroupWithUsersResponse:
        """
        Get a group by its ID.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.get(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        account: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        analysis_email: typing.Optional[str] = OMIT,
        data_api_access: typing.Optional[bool] = OMIT,
        account_manager_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GroupWithUsersResponse:
        """
        Update a group.

        The account, API access, analysis email, and account manager fields can only be modified by administrators.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        account : typing.Optional[str]
            The account of the group. Must be a valid domain, URL, or email. The account will be normalized to a canonical form.

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the group

        analysis_email : typing.Optional[str]
            The email address for analysis to be sent to

        data_api_access : typing.Optional[bool]
            Whether the group has access to the data API

        account_manager_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupWithUsersResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.update(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id,
            name=name,
            account=account,
            thumbnail_url=thumbnail_url,
            analysis_email=analysis_email,
            data_api_access=data_api_access,
            account_manager_id=account_manager_id,
            request_options=request_options,
        )
        return _response.data

    async def list_users(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Get all users in a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.list_users(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_users(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def search_users(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersResponse:
        """
        Get all users in a group.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        email : typing.Optional[str]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.search_users(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_users(
            group_id,
            name=name,
            email=email,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def upload_group_avatar(
        self, group_id: int, *, image: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> GroupResponse:
        """
        Upload an avatar for a group.

        Parameters
        ----------
        group_id : int

        image : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GroupResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.upload_group_avatar(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_group_avatar(group_id, image=image, request_options=request_options)
        return _response.data

    async def create_user_role(
        self,
        user_id: int,
        group_id: int,
        *,
        role_id: typing.Optional[int] = OMIT,
        role_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserRoleResponse:
        """
        Add a user role to a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        role_id : typing.Optional[int]

        role_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.create_user_role(
                user_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user_role(
            user_id, group_id, role_id=role_id, role_name=role_name, request_options=request_options
        )
        return _response.data

    async def update_user_roles(
        self,
        user_id: int,
        group_id: int,
        *,
        role_ids: typing.Sequence[int],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserRoleResponse:
        """
        Update the roles of a user in a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        role_ids : typing.Sequence[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.update_user_roles(
                user_id=1,
                group_id=1,
                role_ids=[1],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user_roles(
            user_id, group_id, role_ids=role_ids, request_options=request_options
        )
        return _response.data

    async def remove_user(
        self, user_id: int, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UserRoleResponse:
        """
        Remove a user from a group.

        Parameters
        ----------
        user_id : int

        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserRoleResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.group.remove_user(
                user_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_user(user_id, group_id, request_options=request_options)
        return _response.data
