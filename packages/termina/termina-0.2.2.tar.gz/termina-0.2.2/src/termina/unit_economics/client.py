# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.contribution_response import ContributionResponse
from ..types.frequency import Frequency
from ..types.user_type import UserType
from .raw_client import AsyncRawUnitEconomicsClient, RawUnitEconomicsClient


class UnitEconomicsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUnitEconomicsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUnitEconomicsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUnitEconomicsClient
        """
        return self._raw_client

    def get_contribution(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ContributionResponse]:
        """
        Get the contribution for the user type.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ContributionResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.unit_economics.get_contribution(
            group_id=1,
            deal_id=1,
            user_type="business",
        )
        """
        _response = self._raw_client.get_contribution(
            group_id, deal_id, user_type=user_type, freq=freq, request_options=request_options
        )
        return _response.data


class AsyncUnitEconomicsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUnitEconomicsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUnitEconomicsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUnitEconomicsClient
        """
        return self._raw_client

    async def get_contribution(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ContributionResponse]:
        """
        Get the contribution for the user type.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ContributionResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.unit_economics.get_contribution(
                group_id=1,
                deal_id=1,
                user_type="business",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_contribution(
            group_id, deal_id, user_type=user_type, freq=freq, request_options=request_options
        )
        return _response.data
