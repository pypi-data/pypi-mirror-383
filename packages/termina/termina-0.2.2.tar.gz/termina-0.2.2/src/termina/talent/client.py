# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.endpoint_seniority_count import EndpointSeniorityCount
from ..types.executive_profile import ExecutiveProfile
from ..types.function_level_growth_accounting import FunctionLevelGrowthAccounting
from .raw_client import AsyncRawTalentClient, RawTalentClient


class TalentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTalentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTalentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTalentClient
        """
        return self._raw_client

    def get_executive_profiles(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ExecutiveProfile]:
        """
        Get the profiles of the executives for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ExecutiveProfile]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.talent.get_executive_profiles(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_executive_profiles(group_id, deal_id, request_options=request_options)
        return _response.data

    def get_seniority_count(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EndpointSeniorityCount]:
        """
        Returns the number of employees at various seniority levels as of the endpoint of the talent data for the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EndpointSeniorityCount]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.talent.get_seniority_count(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_seniority_count(group_id, deal_id, request_options=request_options)
        return _response.data

    def get_team_growth_accounting(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionLevelGrowthAccounting]:
        """
        The function-level growth accounting for employees within the company. Measure how many users join, churn, or
        resurrect, at the function level, for each period there is data.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionLevelGrowthAccounting]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.talent.get_team_growth_accounting(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_team_growth_accounting(group_id, deal_id, request_options=request_options)
        return _response.data


class AsyncTalentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTalentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTalentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTalentClient
        """
        return self._raw_client

    async def get_executive_profiles(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ExecutiveProfile]:
        """
        Get the profiles of the executives for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ExecutiveProfile]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.talent.get_executive_profiles(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_executive_profiles(group_id, deal_id, request_options=request_options)
        return _response.data

    async def get_seniority_count(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EndpointSeniorityCount]:
        """
        Returns the number of employees at various seniority levels as of the endpoint of the talent data for the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EndpointSeniorityCount]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.talent.get_seniority_count(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_seniority_count(group_id, deal_id, request_options=request_options)
        return _response.data

    async def get_team_growth_accounting(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FunctionLevelGrowthAccounting]:
        """
        The function-level growth accounting for employees within the company. Measure how many users join, churn, or
        resurrect, at the function level, for each period there is data.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FunctionLevelGrowthAccounting]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.talent.get_team_growth_accounting(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_team_growth_accounting(
            group_id, deal_id, request_options=request_options
        )
        return _response.data
