# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_file_for_signed_url_response import CreateFileForSignedUrlResponse
from ..types.create_file_response import CreateFileResponse
from ..types.file_response import FileResponse
from ..types.file_type import FileType
from ..types.gcs_signed_url_response import GcsSignedUrlResponse
from ..types.list_files_response import ListFilesResponse
from .raw_client import AsyncRawFileClient, RawFileClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FileClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFileClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFileClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFileClient
        """
        return self._raw_client

    def upload(
        self,
        group_id: int,
        deal_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Upload a file for a specific group and deal. Creates a file entry as well as uploads its contents.
        NOTE: Uploads are limited to {MAX_FILE_SIZE // 1024 // 1024 // 1024}GB. For larger file uploads use the
        signed-url upload endpoint.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.upload(
            group_id=1,
            deal_id=1,
            file="document.pdf",
            name="contract.pdf",
            type="deck",
        )
        """
        _response = self._raw_client.upload(
            group_id, deal_id, file=file, name=name, type=type, request_options=request_options
        )
        return _response.data

    def create_file_entry(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileForSignedUrlResponse:
        """
        Create a new file entry for a specific group and deal. Requires the contents to be uploaded separately via signed-url.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : str
            The human-readable name of the file

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileForSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.create_file_entry(
            group_id=1,
            deal_id=1,
            name="name",
        )
        """
        _response = self._raw_client.create_file_entry(
            group_id, deal_id, name=name, type=type, request_options=request_options
        )
        return _response.data

    def list(
        self,
        group_id: int,
        deal_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.list(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.list(
            group_id,
            deal_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, group_id: int, deal_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.get(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._raw_client.get(group_id, deal_id, file_id, request_options=request_options)
        return _response.data

    def update(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.update(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._raw_client.update(group_id, deal_id, file_id, type=type, request_options=request_options)
        return _response.data

    def delete(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.delete(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._raw_client.delete(
            group_id, deal_id, file_id, archive=archive, request_options=request_options
        )
        return _response.data

    def download(
        self, group_id: int, deal_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[bytes]:
        """
        Download a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful Response
        """
        with self._raw_client.download(group_id, deal_id, file_id, request_options=request_options) as r:
            yield from r.data

    def read_url(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.read_url(
            group_id=1,
            deal_id=1,
            file_id=1,
        )
        """
        _response = self._raw_client.read_url(
            group_id, deal_id, file_id, content_type=content_type, download=download, request_options=request_options
        )
        return _response.data


class AsyncFileClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFileClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFileClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFileClient
        """
        return self._raw_client

    async def upload(
        self,
        group_id: int,
        deal_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Upload a file for a specific group and deal. Creates a file entry as well as uploads its contents.
        NOTE: Uploads are limited to {MAX_FILE_SIZE // 1024 // 1024 // 1024}GB. For larger file uploads use the
        signed-url upload endpoint.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.upload(
                group_id=1,
                deal_id=1,
                file="document.pdf",
                name="contract.pdf",
                type="deck",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload(
            group_id, deal_id, file=file, name=name, type=type, request_options=request_options
        )
        return _response.data

    async def create_file_entry(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileForSignedUrlResponse:
        """
        Create a new file entry for a specific group and deal. Requires the contents to be uploaded separately via signed-url.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : str
            The human-readable name of the file

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileForSignedUrlResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.create_file_entry(
                group_id=1,
                deal_id=1,
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_file_entry(
            group_id, deal_id, name=name, type=type, request_options=request_options
        )
        return _response.data

    async def list(
        self,
        group_id: int,
        deal_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.list(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            group_id,
            deal_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, group_id: int, deal_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.get(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, deal_id, file_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.update(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id, deal_id, file_id, type=type, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.delete(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            group_id, deal_id, file_id, archive=archive, request_options=request_options
        )
        return _response.data

    async def download(
        self, group_id: int, deal_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Download a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful Response
        """
        async with self._raw_client.download(group_id, deal_id, file_id, request_options=request_options) as r:
            async for _chunk in r.data:
                yield _chunk

    async def read_url(
        self,
        group_id: int,
        deal_id: int,
        file_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        file_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.file.read_url(
                group_id=1,
                deal_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.read_url(
            group_id, deal_id, file_id, content_type=content_type, download=download, request_options=request_options
        )
        return _response.data
