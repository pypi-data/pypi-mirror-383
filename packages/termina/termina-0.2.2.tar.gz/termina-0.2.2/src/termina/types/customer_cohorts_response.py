# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CustomerCohortsResponse(UniversalBaseModel):
    """
    The basic cohort metrics for the user count and amount.

    The "amount" is a generic term for the metric being measured, such as revenue or gtv.
    """

    cohort: str = pydantic.Field()
    """
    The date of the cohort.
    """

    user_id: str = pydantic.Field()
    """
    The user identifier for the user-cohort.
    """

    period: int = pydantic.Field()
    """
    The period since the user joined. 0 is the first period.
    """

    cohort_size_amount: float = pydantic.Field()
    """
    The size denominated in the metric amount of the cohort.
    """

    logo_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    Whether or not the user is active in the period.
    """

    amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The active amount, such as revenue or gtv, in the period for the user in the period.
    """

    amount_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount retention rate, defined as amount / cohort size amount.
    """

    ltv: typing.Optional[float] = pydantic.Field(default=None)
    """
    The cumulative lifetime value in terms of the metric amount up until the period, on average per user in the cohort.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
