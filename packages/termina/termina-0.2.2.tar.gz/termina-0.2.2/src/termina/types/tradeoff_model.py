# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .area import Area
from .scale import Scale


class TradeoffModel(UniversalBaseModel):
    scale: Scale = pydantic.Field()
    """
    Describes the revenue range of the data whose points represent the trade off.
    """

    raw_data: typing.List[typing.Dict[str, float]] = pydantic.Field()
    """
    Raw data points used to generate the scaling model. Dictionary of the two metrics, x then y.
    """

    discarded_raw_data: typing.List[typing.Dict[str, float]] = pydantic.Field()
    """
    Additional raw data points which were not used in the model fit due to oulier status. Dictionary of the two metrics, x then y.
    """

    areas: typing.List[Area] = pydantic.Field()
    """
    Areas representing the range of the scaling model. The x-y coordinates describe a surface containing 1 - alpha share of the data points.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
