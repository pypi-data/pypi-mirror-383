# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class GrowthAccountingResponse(UniversalBaseModel):
    """
    Represents the basic growth-accounting metrics for the amount.

    The "amount" is a generic term for the metric being measured, such as revenue or gtv.
    """

    date: str = pydantic.Field()
    """
    The date of the entry.
    """

    amount: float = pydantic.Field()
    """
    The amount, such as revenue or gtv, in the period.
    """

    retained: typing.Optional[float] = pydantic.Field(default=None)
    """
    The retained amount from the last period in the current period.
    """

    new: typing.Optional[float] = pydantic.Field(default=None)
    """
    The number of new users in the period.
    """

    resurrected: typing.Optional[float] = pydantic.Field(default=None)
    """
    The number of resurrected users in the period.
    """

    expansion: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount of expansion in the period.
    """

    contraction: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount of contraction in the period.
    """

    churned: typing.Optional[float] = pydantic.Field(default=None)
    """
    The number of churned users in the period.
    """

    cmgr_3: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr3")] = pydantic.Field(
        default=None
    )
    """
    3-month amount growth rate, for monthly frequency.
    """

    cmgr_6: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr6")] = pydantic.Field(
        default=None
    )
    """
    6-month amount growth rate, for monthly frequency.
    """

    cmgr_12: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cmgr12")] = pydantic.Field(
        default=None
    )
    """
    12-month amount growth rate, for monthly frequency.
    """

    cqgr_1: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cqgr1")] = pydantic.Field(
        default=None
    )
    """
    1-quarter amount growth rate, for quarterly frequency.
    """

    cqgr_2: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cqgr2")] = pydantic.Field(
        default=None
    )
    """
    2-quarter amount growth rate, for quarterly frequency.
    """

    cqgr_4: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="cqgr4")] = pydantic.Field(
        default=None
    )
    """
    4-quarter amount growth rate, for quarterly frequency.
    """

    quick_ratio: typing.Optional[float] = pydantic.Field(default=None)
    """
    The quick ratio, defined as (new + resurrected + expansion) / (churned + contraction).
    """

    gross_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    The gross retention rate, defined as retained / last period amount.
    """

    net_churn: typing.Optional[float] = pydantic.Field(default=None)
    """
    The net churn rate, defined as -(resurrected + expansion - churned - contraction) / last period amount. This is also known as 1 - net dollar retention. Negative values indicate net-expansion.
    """

    lifetime_quick_ratio: typing.Optional[float] = pydantic.Field(default=None)
    """
    The lifetime quick ratio, integrated over all time.
    """

    lifetime_gross_retention: typing.Optional[float] = pydantic.Field(default=None)
    """
    The lifetime gross retention rate, integrated over all time.
    """

    lifetime_net_churn: typing.Optional[float] = pydantic.Field(default=None)
    """
    The lifetime net churn rate, integrated over all time. This is also known as 1 - lifetime net dollar retention. Negative values indicate net-expansion.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
