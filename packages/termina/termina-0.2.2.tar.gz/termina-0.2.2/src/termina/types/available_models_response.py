# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class AvailableModelsResponse(UniversalBaseModel):
    scaling: typing.List[str] = pydantic.Field()
    """
    Available scaling models that measure how one metric evolves against a geometric scaling parameter like revenue or number of years or effort.
    """

    tradeoff_at_scale: typing.List[str] = pydantic.Field()
    """
    Available tradeoff models that measure the tradeoff between two metrics at a given revenue scale.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
