# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.json_value import JsonValue
from ..types.paginated_response_thread_message_response import PaginatedResponseThreadMessageResponse
from ..types.pending_thread_message_response import PendingThreadMessageResponse
from ..types.thread_message_response import ThreadMessageResponse
from .raw_client import AsyncRawMessageClient, RawMessageClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MessageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMessageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMessageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMessageClient
        """
        return self._raw_client

    def send(
        self,
        group_id: int,
        thread_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Create a message in a thread with the following logic:
        1. Save the user message
        2. Queue Snowman call to get an assistant response as a background task
        3. Return the saved user message

        Parameters
        ----------
        group_id : int

        thread_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.send(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.send(
            group_id, thread_id, content=content, extra=extra, request_options=request_options
        )
        return _response.data

    def retry_assistant(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PendingThreadMessageResponse:
        """
        Retry getting an assistant response for a specific message:
        1. Get the original user message
        2. Queue a new Snowman call to get an assistant response as a background task
        3. Return the original message details

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.retry_assistant(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.retry_assistant(group_id, thread_id, request_options=request_options)
        return _response.data

    def latest(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadMessageResponse:
        """
        Get the most recent message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.latest(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.latest(group_id, thread_id, request_options=request_options)
        return _response.data

    def list(
        self,
        group_id: int,
        thread_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadMessageResponse:
        """
        Get all messages from a thread with pagination.

        Parameters
        ----------
        group_id : int

        thread_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.list(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.list(
            group_id,
            thread_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, group_id: int, thread_id: int, message_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadMessageResponse:
        """
        Get a specific message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.get(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._raw_client.get(group_id, thread_id, message_id, request_options=request_options)
        return _response.data

    def delete(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.delete(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._raw_client.delete(
            group_id, thread_id, message_id, archive=archive, request_options=request_options
        )
        return _response.data

    def update(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Update a message in a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.message.update(
            group_id=1,
            thread_id=1,
            message_id=1,
        )
        """
        _response = self._raw_client.update(
            group_id, thread_id, message_id, content=content, extra=extra, request_options=request_options
        )
        return _response.data


class AsyncMessageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMessageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMessageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMessageClient
        """
        return self._raw_client

    async def send(
        self,
        group_id: int,
        thread_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PendingThreadMessageResponse:
        """
        Create a message in a thread with the following logic:
        1. Save the user message
        2. Queue Snowman call to get an assistant response as a background task
        3. Return the saved user message

        Parameters
        ----------
        group_id : int

        thread_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.send(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.send(
            group_id, thread_id, content=content, extra=extra, request_options=request_options
        )
        return _response.data

    async def retry_assistant(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PendingThreadMessageResponse:
        """
        Retry getting an assistant response for a specific message:
        1. Get the original user message
        2. Queue a new Snowman call to get an assistant response as a background task
        3. Return the original message details

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PendingThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.retry_assistant(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.retry_assistant(group_id, thread_id, request_options=request_options)
        return _response.data

    async def latest(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadMessageResponse:
        """
        Get the most recent message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.latest(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.latest(group_id, thread_id, request_options=request_options)
        return _response.data

    async def list(
        self,
        group_id: int,
        thread_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadMessageResponse:
        """
        Get all messages from a thread with pagination.

        Parameters
        ----------
        group_id : int

        thread_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.list(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            group_id,
            thread_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, group_id: int, thread_id: int, message_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadMessageResponse:
        """
        Get a specific message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.get(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, thread_id, message_id, request_options=request_options)
        return _response.data

    async def delete(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a message from a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.delete(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            group_id, thread_id, message_id, archive=archive, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        group_id: int,
        thread_id: int,
        message_id: int,
        *,
        content: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadMessageResponse:
        """
        Update a message in a thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        message_id : int

        content : typing.Optional[str]
            The content of the thread message

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread message

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadMessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.message.update(
                group_id=1,
                thread_id=1,
                message_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id, thread_id, message_id, content=content, extra=extra, request_options=request_options
        )
        return _response.data
