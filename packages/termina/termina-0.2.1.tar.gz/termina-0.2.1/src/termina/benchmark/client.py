# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.available_categories_response import AvailableCategoriesResponse
from ..types.available_models_response import AvailableModelsResponse
from ..types.benchmark_quantile import BenchmarkQuantile
from ..types.categories_metadata_response import CategoriesMetadataResponse
from ..types.columns_metadata_response import ColumnsMetadataResponse
from ..types.deal_combined_metrics_response import DealCombinedMetricsResponse
from ..types.models_metadata_response import ModelsMetadataResponse
from ..types.scale_models_response import ScaleModelsResponse
from ..types.tradeoff_models_response import TradeoffModelsResponse
from ..types.user_type import UserType
from .raw_client import AsyncRawBenchmarkClient, RawBenchmarkClient


class BenchmarkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBenchmarkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBenchmarkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBenchmarkClient
        """
        return self._raw_client

    def get_quantiles(
        self,
        group_id: int,
        category: str,
        *,
        revenue: float,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category at a specified revenue scale. If columns are specified, only those columns will be returned.

        Parameters
        ----------
        group_id : int

        category : str

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_quantiles(
            group_id=1,
            category="category",
            revenue=1.1,
        )
        """
        _response = self._raw_client.get_quantiles(
            group_id, category, revenue=revenue, column=column, request_options=request_options
        )
        return _response.data

    def get_scaling(
        self,
        group_id: int,
        category: str,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScaleModelsResponse:
        """
        Get the scaling models for a given category. Multiple models can be specified.

        Parameters
        ----------
        group_id : int

        category : str

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScaleModelsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_scaling(
            group_id=1,
            category="category",
        )
        """
        _response = self._raw_client.get_scaling(group_id, category, model=model, request_options=request_options)
        return _response.data

    def get_available_models(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableModelsResponse:
        """
        Get the list of available scaling and tradeoff models for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableModelsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_available_models(
            group_id=1,
        )
        """
        _response = self._raw_client.get_available_models(group_id, request_options=request_options)
        return _response.data

    def get_tradeoff_at_scale(
        self,
        group_id: int,
        category: str,
        *,
        revenue: float,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff at scale model for a given category.

        Parameters
        ----------
        group_id : int

        category : str

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_tradeoff_at_scale(
            group_id=1,
            category="category",
            revenue=1.1,
        )
        """
        _response = self._raw_client.get_tradeoff_at_scale(
            group_id, category, revenue=revenue, model=model, request_options=request_options
        )
        return _response.data

    def get_available_company_categories(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the categories with benchmark models available for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_available_company_categories(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_available_company_categories(
            group_id, deal_id, request_options=request_options
        )
        return _response.data

    def get_combined_time_series(
        self,
        user_type: UserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealCombinedMetricsResponse]:
        """
        Get the combined time series data for the deal.

        Parameters
        ----------
        user_type : UserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealCombinedMetricsResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_combined_time_series(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_combined_time_series(
            user_type, group_id, deal_id, column=column, request_options=request_options
        )
        return _response.data

    def get_time_series_endpoint(
        self,
        user_type: UserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealCombinedMetricsResponse:
        """
        Get the time series data endpoint for the deal.

        Parameters
        ----------
        user_type : UserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealCombinedMetricsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_time_series_endpoint(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_time_series_endpoint(
            user_type, group_id, deal_id, column=column, request_options=request_options
        )
        return _response.data

    def get_deal_benchmark_quantiles(
        self,
        group_id: int,
        deal_id: int,
        category: str,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : str

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_deal_benchmark_quantiles(
            group_id=1,
            deal_id=1,
            category="category",
        )
        """
        _response = self._raw_client.get_deal_benchmark_quantiles(
            group_id, deal_id, category, column=column, request_options=request_options
        )
        return _response.data

    def get_deal_benchmark_tradeoff_at_scale(
        self,
        group_id: int,
        deal_id: int,
        category: str,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff models for a given category.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : str

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_deal_benchmark_tradeoff_at_scale(
            group_id=1,
            deal_id=1,
            category="category",
        )
        """
        _response = self._raw_client.get_deal_benchmark_tradeoff_at_scale(
            group_id, deal_id, category, model=model, request_options=request_options
        )
        return _response.data

    def get_columns_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ColumnsMetadataResponse:
        """
        Get the benchmark columns metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ColumnsMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_columns_metadata()
        """
        _response = self._raw_client.get_columns_metadata(request_options=request_options)
        return _response.data

    def get_models_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ModelsMetadataResponse]:
        """
        Get the benchmark models metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelsMetadataResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_models_metadata()
        """
        _response = self._raw_client.get_models_metadata(request_options=request_options)
        return _response.data

    def get_categories_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CategoriesMetadataResponse:
        """
        Get the benchmark categories metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CategoriesMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_categories_metadata()
        """
        _response = self._raw_client.get_categories_metadata(request_options=request_options)
        return _response.data


class AsyncBenchmarkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBenchmarkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBenchmarkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBenchmarkClient
        """
        return self._raw_client

    async def get_quantiles(
        self,
        group_id: int,
        category: str,
        *,
        revenue: float,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category at a specified revenue scale. If columns are specified, only those columns will be returned.

        Parameters
        ----------
        group_id : int

        category : str

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_quantiles(
                group_id=1,
                category="category",
                revenue=1.1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_quantiles(
            group_id, category, revenue=revenue, column=column, request_options=request_options
        )
        return _response.data

    async def get_scaling(
        self,
        group_id: int,
        category: str,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScaleModelsResponse:
        """
        Get the scaling models for a given category. Multiple models can be specified.

        Parameters
        ----------
        group_id : int

        category : str

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScaleModelsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_scaling(
                group_id=1,
                category="category",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_scaling(group_id, category, model=model, request_options=request_options)
        return _response.data

    async def get_available_models(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableModelsResponse:
        """
        Get the list of available scaling and tradeoff models for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableModelsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_available_models(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_available_models(group_id, request_options=request_options)
        return _response.data

    async def get_tradeoff_at_scale(
        self,
        group_id: int,
        category: str,
        *,
        revenue: float,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff at scale model for a given category.

        Parameters
        ----------
        group_id : int

        category : str

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_tradeoff_at_scale(
                group_id=1,
                category="category",
                revenue=1.1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tradeoff_at_scale(
            group_id, category, revenue=revenue, model=model, request_options=request_options
        )
        return _response.data

    async def get_available_company_categories(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the categories with benchmark models available for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_available_company_categories(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_available_company_categories(
            group_id, deal_id, request_options=request_options
        )
        return _response.data

    async def get_combined_time_series(
        self,
        user_type: UserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealCombinedMetricsResponse]:
        """
        Get the combined time series data for the deal.

        Parameters
        ----------
        user_type : UserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealCombinedMetricsResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_combined_time_series(
                user_type="business",
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_combined_time_series(
            user_type, group_id, deal_id, column=column, request_options=request_options
        )
        return _response.data

    async def get_time_series_endpoint(
        self,
        user_type: UserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealCombinedMetricsResponse:
        """
        Get the time series data endpoint for the deal.

        Parameters
        ----------
        user_type : UserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealCombinedMetricsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_time_series_endpoint(
                user_type="business",
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_time_series_endpoint(
            user_type, group_id, deal_id, column=column, request_options=request_options
        )
        return _response.data

    async def get_deal_benchmark_quantiles(
        self,
        group_id: int,
        deal_id: int,
        category: str,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : str

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_deal_benchmark_quantiles(
                group_id=1,
                deal_id=1,
                category="category",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_deal_benchmark_quantiles(
            group_id, deal_id, category, column=column, request_options=request_options
        )
        return _response.data

    async def get_deal_benchmark_tradeoff_at_scale(
        self,
        group_id: int,
        deal_id: int,
        category: str,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff models for a given category.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : str

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_deal_benchmark_tradeoff_at_scale(
                group_id=1,
                deal_id=1,
                category="category",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_deal_benchmark_tradeoff_at_scale(
            group_id, deal_id, category, model=model, request_options=request_options
        )
        return _response.data

    async def get_columns_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ColumnsMetadataResponse:
        """
        Get the benchmark columns metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ColumnsMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_columns_metadata()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_columns_metadata(request_options=request_options)
        return _response.data

    async def get_models_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ModelsMetadataResponse]:
        """
        Get the benchmark models metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelsMetadataResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_models_metadata()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_models_metadata(request_options=request_options)
        return _response.data

    async def get_categories_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CategoriesMetadataResponse:
        """
        Get the benchmark categories metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CategoriesMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.benchmark.get_categories_metadata()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_categories_metadata(request_options=request_options)
        return _response.data
