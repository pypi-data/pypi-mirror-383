# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.company_response import CompanyResponse
from ..types.list_companies_response import ListCompaniesResponse
from .raw_client import AsyncRawCompanyClient, RawCompanyClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CompanyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCompanyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCompanyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCompanyClient
        """
        return self._raw_client

    def get_by_domain(
        self, group_id: int, *, domain: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CompanyResponse:
        """
        Lookup a company by domain.

        Parameters
        ----------
        group_id : int

        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.get_by_domain(
            group_id=1,
            domain="domain",
        )
        """
        _response = self._raw_client.get_by_domain(group_id, domain=domain, request_options=request_options)
        return _response.data

    def create_company(
        self,
        group_id: int,
        *,
        domain: str,
        name: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompanyResponse:
        """
        Create a new company. If a non-canonical domain is provided, it will be normalized to a canonical form.

        Parameters
        ----------
        group_id : int

        domain : str
            The domain of the company. Must be a valid domain or URL. The domain will be normalized to a canonical form.

        name : typing.Optional[str]

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.create_company(
            group_id=1,
            domain="example.com",
        )
        """
        _response = self._raw_client.create_company(
            group_id, domain=domain, name=name, thumbnail_url=thumbnail_url, request_options=request_options
        )
        return _response.data

    def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCompaniesResponse:
        """
        Get all companies for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCompaniesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.list(
            group_id=1,
        )
        """
        _response = self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, group_id: int, company_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompanyResponse:
        """
        Get a company by ID.

        Parameters
        ----------
        group_id : int

        company_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.get(
            group_id=1,
            company_id=1,
        )
        """
        _response = self._raw_client.get(group_id, company_id, request_options=request_options)
        return _response.data

    def update(
        self,
        group_id: int,
        company_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        domain: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompanyResponse:
        """
        Update a company.

        Parameters
        ----------
        group_id : int

        company_id : int

        name : typing.Optional[str]

        domain : typing.Optional[str]

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.update(
            group_id=1,
            company_id=1,
        )
        """
        _response = self._raw_client.update(
            group_id, company_id, name=name, domain=domain, thumbnail_url=thumbnail_url, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        company_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a company.

        Parameters
        ----------
        company_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.company.delete(
            company_id=1,
            group_id=1,
        )
        """
        _response = self._raw_client.delete(company_id, group_id, archive=archive, request_options=request_options)
        return _response.data


class AsyncCompanyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCompanyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCompanyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCompanyClient
        """
        return self._raw_client

    async def get_by_domain(
        self, group_id: int, *, domain: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CompanyResponse:
        """
        Lookup a company by domain.

        Parameters
        ----------
        group_id : int

        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.get_by_domain(
                group_id=1,
                domain="domain",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_domain(group_id, domain=domain, request_options=request_options)
        return _response.data

    async def create_company(
        self,
        group_id: int,
        *,
        domain: str,
        name: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompanyResponse:
        """
        Create a new company. If a non-canonical domain is provided, it will be normalized to a canonical form.

        Parameters
        ----------
        group_id : int

        domain : str
            The domain of the company. Must be a valid domain or URL. The domain will be normalized to a canonical form.

        name : typing.Optional[str]

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.create_company(
                group_id=1,
                domain="example.com",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_company(
            group_id, domain=domain, name=name, thumbnail_url=thumbnail_url, request_options=request_options
        )
        return _response.data

    async def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCompaniesResponse:
        """
        Get all companies for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCompaniesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.list(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, group_id: int, company_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompanyResponse:
        """
        Get a company by ID.

        Parameters
        ----------
        group_id : int

        company_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.get(
                group_id=1,
                company_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, company_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        group_id: int,
        company_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        domain: typing.Optional[str] = OMIT,
        thumbnail_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompanyResponse:
        """
        Update a company.

        Parameters
        ----------
        group_id : int

        company_id : int

        name : typing.Optional[str]

        domain : typing.Optional[str]

        thumbnail_url : typing.Optional[str]
            The thumbnail URL of the company

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompanyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.update(
                group_id=1,
                company_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id, company_id, name=name, domain=domain, thumbnail_url=thumbnail_url, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        company_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a company.

        Parameters
        ----------
        company_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.company.delete(
                company_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            company_id, group_id, archive=archive, request_options=request_options
        )
        return _response.data
