# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_api_key_response import CreateApiKeyResponse
from ..types.json_value import JsonValue
from ..types.simple_response import SimpleResponse
from ..types.user_with_groups_response import UserWithGroupsResponse
from ..types.user_with_permissions_response import UserWithPermissionsResponse
from .raw_client import AsyncRawUserClient, RawUserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def me(self, *, request_options: typing.Optional[RequestOptions] = None) -> UserWithPermissionsResponse:
        """
        Get the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithPermissionsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.me()
        """
        _response = self._raw_client.me(request_options=request_options)
        return _response.data

    def upload_user_avatar(
        self, *, image: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> UserWithGroupsResponse:
        """
        Upload an avatar for a user.

        Parameters
        ----------
        image : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithGroupsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.upload_user_avatar()
        """
        _response = self._raw_client.upload_user_avatar(image=image, request_options=request_options)
        return _response.data

    def create_or_replace_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateApiKeyResponse:
        """
        Create or replace an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.create_or_replace_api_key()
        """
        _response = self._raw_client.create_or_replace_api_key(request_options=request_options)
        return _response.data

    def delete_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Delete an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.delete_api_key()
        """
        _response = self._raw_client.delete_api_key(request_options=request_options)
        return _response.data

    def submit_feedback(
        self,
        *,
        content: str,
        group_id: typing.Optional[int] = OMIT,
        deal_id: typing.Optional[int] = OMIT,
        thread_id: typing.Optional[int] = OMIT,
        extra: typing.Optional[JsonValue] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimpleResponse:
        """
        Submit user feedback and send notification to Slack.

        Parameters
        ----------
        content : str
            The feedback message

        group_id : typing.Optional[int]
            The group ID

        deal_id : typing.Optional[int]
            The deal ID

        thread_id : typing.Optional[int]
            The thread ID

        extra : typing.Optional[JsonValue]
            Extra data

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimpleResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.submit_feedback(
            content="I love this feature!",
        )
        """
        _response = self._raw_client.submit_feedback(
            content=content,
            group_id=group_id,
            deal_id=deal_id,
            thread_id=thread_id,
            extra=extra,
            request_options=request_options,
        )
        return _response.data

    def delete_user(
        self,
        user_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a user.

        Parameters
        ----------
        user_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.delete_user(
            user_id=1,
        )
        """
        _response = self._raw_client.delete_user(user_id, archive=archive, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def me(self, *, request_options: typing.Optional[RequestOptions] = None) -> UserWithPermissionsResponse:
        """
        Get the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithPermissionsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.me()


        asyncio.run(main())
        """
        _response = await self._raw_client.me(request_options=request_options)
        return _response.data

    async def upload_user_avatar(
        self, *, image: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> UserWithGroupsResponse:
        """
        Upload an avatar for a user.

        Parameters
        ----------
        image : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithGroupsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.upload_user_avatar()


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_user_avatar(image=image, request_options=request_options)
        return _response.data

    async def create_or_replace_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateApiKeyResponse:
        """
        Create or replace an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.create_or_replace_api_key()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_or_replace_api_key(request_options=request_options)
        return _response.data

    async def delete_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Delete an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.delete_api_key()


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_api_key(request_options=request_options)
        return _response.data

    async def submit_feedback(
        self,
        *,
        content: str,
        group_id: typing.Optional[int] = OMIT,
        deal_id: typing.Optional[int] = OMIT,
        thread_id: typing.Optional[int] = OMIT,
        extra: typing.Optional[JsonValue] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimpleResponse:
        """
        Submit user feedback and send notification to Slack.

        Parameters
        ----------
        content : str
            The feedback message

        group_id : typing.Optional[int]
            The group ID

        deal_id : typing.Optional[int]
            The deal ID

        thread_id : typing.Optional[int]
            The thread ID

        extra : typing.Optional[JsonValue]
            Extra data

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimpleResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.submit_feedback(
                content="I love this feature!",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.submit_feedback(
            content=content,
            group_id=group_id,
            deal_id=deal_id,
            thread_id=thread_id,
            extra=extra,
            request_options=request_options,
        )
        return _response.data

    async def delete_user(
        self,
        user_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a user.

        Parameters
        ----------
        user_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.user.delete_user(
                user_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user(user_id, archive=archive, request_options=request_options)
        return _response.data
