# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.file_type import FileType
from ..types.thread_file_response import ThreadFileResponse
from .raw_client import AsyncRawThreadFileClient, RawThreadFileClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ThreadFileClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawThreadFileClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawThreadFileClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawThreadFileClient
        """
        return self._raw_client

    def create(
        self,
        group_id: int,
        thread_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadFileResponse:
        """
        Upload a file for a specific chat thread.
        NOTE: Uploads are limited to 10 GB.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadFileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread_file.create(
            group_id=1,
            thread_id=1,
            file="document.pdf",
            name="contract.pdf",
            type="deck",
        )
        """
        _response = self._raw_client.create(
            group_id, thread_id, file=file, name=name, type=type, request_options=request_options
        )
        return _response.data

    def download(
        self, group_id: int, thread_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[bytes]:
        """
        Download a file associated with a specific thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            Successful Response
        """
        with self._raw_client.download(group_id, thread_id, file_id, request_options=request_options) as r:
            yield from r.data

    def delete(
        self,
        file_id: int,
        group_id: int,
        thread_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file from a thread.

        Parameters
        ----------
        file_id : int

        group_id : int

        thread_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread_file.delete(
            file_id=1,
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.delete(
            file_id, group_id, thread_id, archive=archive, request_options=request_options
        )
        return _response.data

    def update(
        self,
        group_id: int,
        thread_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadFileResponse:
        """
        Update a thread file by its ID.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadFileResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread_file.update(
            group_id=1,
            thread_id=1,
            file_id=1,
        )
        """
        _response = self._raw_client.update(group_id, thread_id, file_id, type=type, request_options=request_options)
        return _response.data


class AsyncThreadFileClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawThreadFileClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawThreadFileClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawThreadFileClient
        """
        return self._raw_client

    async def create(
        self,
        group_id: int,
        thread_id: int,
        *,
        file: str,
        name: str,
        type: FileType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadFileResponse:
        """
        Upload a file for a specific chat thread.
        NOTE: Uploads are limited to 10 GB.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file : str
            The file to upload

        name : str
            Name of the file including extension

        type : FileType
            Type/category of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread_file.create(
                group_id=1,
                thread_id=1,
                file="document.pdf",
                name="contract.pdf",
                type="deck",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            group_id, thread_id, file=file, name=name, type=type, request_options=request_options
        )
        return _response.data

    async def download(
        self, group_id: int, thread_id: int, file_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Download a file associated with a specific thread.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            Successful Response
        """
        async with self._raw_client.download(group_id, thread_id, file_id, request_options=request_options) as r:
            async for _chunk in r.data:
                yield _chunk

    async def delete(
        self,
        file_id: int,
        group_id: int,
        thread_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a file from a thread.

        Parameters
        ----------
        file_id : int

        group_id : int

        thread_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread_file.delete(
                file_id=1,
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            file_id, group_id, thread_id, archive=archive, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        group_id: int,
        thread_id: int,
        file_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadFileResponse:
        """
        Update a thread file by its ID.

        Parameters
        ----------
        group_id : int

        thread_id : int

        file_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread_file.update(
                group_id=1,
                thread_id=1,
                file_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id, thread_id, file_id, type=type, request_options=request_options
        )
        return _response.data
