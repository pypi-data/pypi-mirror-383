# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class WeatherMarketContext(UniversalBaseModel):
    stage: str = pydantic.Field()
    """
    The stage of the weather gauge
    """

    date: str = pydantic.Field()
    """
    The date of the data point
    """

    total_amount_raised_annualized: typing.Optional[float] = pydantic.Field(default=None)
    """
    A simple estimate of total amount of fundraising in the market at the stage in a rolling window
    """

    rounds_annualized: typing.Optional[float] = pydantic.Field(default=None)
    """
    A simple estimate of total count of rounds in the market at the stage in a rolling window
    """

    average_raise_years: typing.Optional[float] = pydantic.Field(default=None)
    """
    The average number of years between raises in the market at the stage in a rolling window
    """

    average_amount_raised: typing.Optional[float] = pydantic.Field(default=None)
    """
    The average amount raised in the market at the stage in a rolling window
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
