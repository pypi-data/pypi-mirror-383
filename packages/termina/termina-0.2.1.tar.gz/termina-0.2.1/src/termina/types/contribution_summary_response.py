# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ContributionSummaryResponse(pydantic_v1.BaseModel):
    """
    Represents summary Unit Economics statistics for each cohort.

    This approach assumes all acquisition spend was toward the specified user type.

    Important note: the date is the period of the cohort, not the date of the observation. A transformation is needed
    on the lifetime metrics to get the actual date of the observation.
    """

    cohort: str = pydantic_v1.Field()
    """
    The date of the cohort.
    """

    modeled_payback_periods: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The modeled payback periods for the cohort. For example, a value of 12.5 for monthly frequency means it takes 12.5 months to pay back. Important Note: this is MODELED, which is done by fitting curves to contribution curves and deriving the payback period by finding the zero-intercept. This may deviate from actual payback periods, including from cohorts who have already paid back. This metric aims to fit curves in order to reduce the effect of noise in the data.
    """

    lifetime_cac: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The lifetime-integrated customer acquisition costs (CAC) across cohorts.
    """

    lifetime_contribution_2: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_contribution2", default=None)
    """
    The lifetime-integrated contribution (gmLTV - CAC) across cohorts. Used for quarterly frequency.
    """

    lifetime_contribution_4: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_contribution4", default=None)
    """
    The lifetime-integrated contribution (gmLTV - CAC) across cohorts. Used for quarterly frequency.
    """

    lifetime_contribution_6: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_contribution6", default=None)
    """
    The lifetime-integrated contribution (gmLTV - CAC) across cohorts. Used for monthly frequency.
    """

    lifetime_contribution_12: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_contribution12", default=None)
    """
    The lifetime-integrated contribution (gmLTV - CAC) across cohorts. Used for monthly frequency.
    """

    lifetime_ltv_2_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_ltv2_cac", default=None)
    """
    The lifetime-integrated LTV to CAC ratio across cohorts. Used for quarterly frequency.
    """

    lifetime_ltv_4_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_ltv4_cac", default=None)
    """
    The lifetime-integrated LTV to CAC ratio across cohorts. Used for quarterly frequency.
    """

    lifetime_ltv_6_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_ltv6_cac", default=None)
    """
    The lifetime-integrated LTV to CAC ratio across cohorts. Used for monthly frequency.
    """

    lifetime_ltv_12_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_ltv12_cac", default=None)
    """
    The lifetime-integrated LTV to CAC ratio across cohorts. Used for monthly frequency.
    """

    lifetime_gmltv_2_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_gmltv2_cac", default=None)
    """
    The lifetime-integrated gmLTV to CAC ratio across cohorts. Used for quarterly frequency.
    """

    lifetime_gmltv_4_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_gmltv4_cac", default=None)
    """
    The lifetime-integrated gmLTV to CAC ratio across cohorts. Used for quarterly frequency.
    """

    lifetime_gmltv_6_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_gmltv6_cac", default=None)
    """
    The lifetime-integrated gmLTV to CAC ratio across cohorts. Used for monthly frequency.
    """

    lifetime_gmltv_12_cac: typing.Optional[float] = pydantic_v1.Field(alias="lifetime_gmltv12_cac", default=None)
    """
    The lifetime-integrated gmLTV to CAC ratio across cohorts. Used for monthly frequency.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
