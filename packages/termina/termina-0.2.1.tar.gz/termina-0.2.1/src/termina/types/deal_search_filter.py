# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ..core.serialization import FieldMetadata
from .benchmark_metric_filter import BenchmarkMetricFilter


class DealSearchFilter(UniversalBaseModel):
    """
    Base filter model for deal search.
    Supports individual field filters or logical operators ($and, $or).

    Example with benchmark metrics:
    {
        "filters": {
            "$and": [
                {"company_name": "Acme"},
                {
                    "benchmark_metrics": {
                        "field_name": "revenue",
                        "conditions": [
                            {"operator": "gte", "value": 1000000},
                            {"operator": "lte", "value": 5000000}
                        ]
                    }
                }
            ]
        }
    }
    """

    and_: typing_extensions.Annotated[typing.Optional[typing.List["DealSearchFilter"]], FieldMetadata(alias="$and")] = (
        None
    )
    or_: typing_extensions.Annotated[typing.Optional[typing.List["DealSearchFilter"]], FieldMetadata(alias="$or")] = (
        None
    )
    company_name: typing.Optional[str] = None
    company_domain: typing.Optional[str] = None
    categories: typing.Optional[typing.List[str]] = None
    round_name: typing.Optional[str] = None
    deal_lead: typing.Optional[str] = None
    notes: typing.Optional[str] = None
    tags: typing.Optional[str] = None
    priority: typing.Optional[str] = None
    benchmark_metrics: typing.Optional[BenchmarkMetricFilter] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(DealSearchFilter)
