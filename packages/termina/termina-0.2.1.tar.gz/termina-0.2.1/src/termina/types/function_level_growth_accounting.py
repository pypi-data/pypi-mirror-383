# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FunctionLevelGrowthAccounting(UniversalBaseModel):
    """
    Represents the growth accounting metrics at the function level for a company.

    This model captures the changes in employee count within specific functions over time.
    """

    function: str = pydantic.Field()
    """
    The function or department within the company.
    """

    date: str = pydantic.Field()
    """
    The date of the entry in YYYYQ format.
    """

    active: int = pydantic.Field()
    """
    The number of active employees in the function during the period.
    """

    new: int = pydantic.Field()
    """
    The number of new employees in the function during the period.
    """

    retained: int = pydantic.Field()
    """
    The number of employees retained in the function from the last period.
    """

    resurrected: int = pydantic.Field()
    """
    The number of employees who left and returned to the function.
    """

    churned: int = pydantic.Field()
    """
    The number of employees who left the function during the period.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
