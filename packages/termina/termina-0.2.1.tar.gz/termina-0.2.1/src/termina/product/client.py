# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.cohorts_response import CohortsResponse
from ..types.concentration_response import ConcentrationResponse
from ..types.customer_cohorts_response import CustomerCohortsResponse
from ..types.frequency import Frequency
from ..types.growth_accounting_response import GrowthAccountingResponse
from ..types.user_accounting_response import UserAccountingResponse
from ..types.user_type import UserType
from .raw_client import AsyncRawProductClient, RawProductClient


class ProductClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProductClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProductClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProductClient
        """
        return self._raw_client

    def get_user_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserAccountingResponse]:
        """
        Get the product user accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserAccountingResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.product.get_user_accounting(
            group_id=1,
            deal_id=1,
            user_type="business",
            metric="metric",
        )
        """
        _response = self._raw_client.get_user_accounting(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    def get_growth_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GrowthAccountingResponse]:
        """
        Get the product growth accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GrowthAccountingResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.product.get_growth_accounting(
            group_id=1,
            deal_id=1,
            user_type="business",
            metric="metric",
        )
        """
        _response = self._raw_client.get_growth_accounting(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    def get_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CohortsResponse]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CohortsResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.product.get_cohorts(
            group_id=1,
            deal_id=1,
            user_type="business",
            metric="metric",
        )
        """
        _response = self._raw_client.get_cohorts(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    def get_customer_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CustomerCohortsResponse]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CustomerCohortsResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.product.get_customer_cohorts(
            group_id=1,
            deal_id=1,
            user_type="business",
            metric="metric",
        )
        """
        _response = self._raw_client.get_customer_cohorts(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    def get_concentration(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConcentrationResponse:
        """
        Get the product concentration for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConcentrationResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.product.get_concentration(
            group_id=1,
            deal_id=1,
            user_type="business",
            metric="metric",
        )
        """
        _response = self._raw_client.get_concentration(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data


class AsyncProductClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProductClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProductClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProductClient
        """
        return self._raw_client

    async def get_user_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserAccountingResponse]:
        """
        Get the product user accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserAccountingResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.product.get_user_accounting(
                group_id=1,
                deal_id=1,
                user_type="business",
                metric="metric",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_accounting(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    async def get_growth_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GrowthAccountingResponse]:
        """
        Get the product growth accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GrowthAccountingResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.product.get_growth_accounting(
                group_id=1,
                deal_id=1,
                user_type="business",
                metric="metric",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_growth_accounting(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    async def get_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CohortsResponse]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CohortsResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.product.get_cohorts(
                group_id=1,
                deal_id=1,
                user_type="business",
                metric="metric",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_cohorts(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    async def get_customer_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CustomerCohortsResponse]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CustomerCohortsResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.product.get_customer_cohorts(
                group_id=1,
                deal_id=1,
                user_type="business",
                metric="metric",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_customer_cohorts(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data

    async def get_concentration(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConcentrationResponse:
        """
        Get the product concentration for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConcentrationResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.product.get_concentration(
                group_id=1,
                deal_id=1,
                user_type="business",
                metric="metric",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_concentration(
            group_id, deal_id, user_type=user_type, metric=metric, freq=freq, request_options=request_options
        )
        return _response.data
