# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.cohorts_response import CohortsResponse
from ..types.concentration_response import ConcentrationResponse
from ..types.customer_cohorts_response import CustomerCohortsResponse
from ..types.frequency import Frequency
from ..types.growth_accounting_response import GrowthAccountingResponse
from ..types.http_validation_error import HttpValidationError
from ..types.user_accounting_response import UserAccountingResponse
from ..types.user_type import UserType


class RawProductClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_user_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[UserAccountingResponse]]:
        """
        Get the product user accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[UserAccountingResponse]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/user-accounting",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserAccountingResponse],
                    parse_obj_as(
                        type_=typing.List[UserAccountingResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_growth_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[GrowthAccountingResponse]]:
        """
        Get the product growth accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[GrowthAccountingResponse]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/growth-accounting",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[GrowthAccountingResponse],
                    parse_obj_as(
                        type_=typing.List[GrowthAccountingResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[CohortsResponse]]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[CohortsResponse]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/cohorts",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[CohortsResponse],
                    parse_obj_as(
                        type_=typing.List[CohortsResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_customer_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[CustomerCohortsResponse]]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[CustomerCohortsResponse]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/customer-cohorts",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[CustomerCohortsResponse],
                    parse_obj_as(
                        type_=typing.List[CustomerCohortsResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_concentration(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ConcentrationResponse]:
        """
        Get the product concentration for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ConcentrationResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/concentration",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConcentrationResponse,
                    parse_obj_as(
                        type_=ConcentrationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawProductClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_user_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[UserAccountingResponse]]:
        """
        Get the product user accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[UserAccountingResponse]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/user-accounting",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserAccountingResponse],
                    parse_obj_as(
                        type_=typing.List[UserAccountingResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_growth_accounting(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[GrowthAccountingResponse]]:
        """
        Get the product growth accounting for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[GrowthAccountingResponse]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/growth-accounting",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[GrowthAccountingResponse],
                    parse_obj_as(
                        type_=typing.List[GrowthAccountingResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[CohortsResponse]]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[CohortsResponse]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/cohorts",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[CohortsResponse],
                    parse_obj_as(
                        type_=typing.List[CohortsResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_customer_cohorts(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[CustomerCohortsResponse]]:
        """
        Get the product cohorts for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[CustomerCohortsResponse]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/customer-cohorts",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[CustomerCohortsResponse],
                    parse_obj_as(
                        type_=typing.List[CustomerCohortsResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_concentration(
        self,
        group_id: int,
        deal_id: int,
        *,
        user_type: UserType,
        metric: str,
        freq: typing.Optional[Frequency] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ConcentrationResponse]:
        """
        Get the product concentration for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        user_type : UserType

        metric : str

        freq : typing.Optional[Frequency]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ConcentrationResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/concentration",
            method="GET",
            params={
                "user_type": user_type,
                "metric": metric,
                "freq": freq,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConcentrationResponse,
                    parse_obj_as(
                        type_=ConcentrationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
