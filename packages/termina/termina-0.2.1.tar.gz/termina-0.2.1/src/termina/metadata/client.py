# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.all_data_metadata_response import AllDataMetadataResponse
from .raw_client import AsyncRawMetadataClient, RawMetadataClient


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetadataClient
        """
        return self._raw_client

    def get_diligence_metadata(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AllDataMetadataResponse:
        """
        Retrieve select metadata about all diligence data for a group.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AllDataMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.metadata.get_diligence_metadata(
            group_id=1,
        )
        """
        _response = self._raw_client.get_diligence_metadata(group_id, request_options=request_options)
        return _response.data


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetadataClient
        """
        return self._raw_client

    async def get_diligence_metadata(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AllDataMetadataResponse:
        """
        Retrieve select metadata about all diligence data for a group.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AllDataMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.get_diligence_metadata(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_diligence_metadata(group_id, request_options=request_options)
        return _response.data
