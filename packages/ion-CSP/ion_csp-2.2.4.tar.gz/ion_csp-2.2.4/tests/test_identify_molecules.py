import os
import logging
import pytest
from ase import Atoms
from ion_CSP.identify_molecules import (
    identify_molecules,
    molecules_information,
)

# 配置日志
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


def create_gjf_file(path: str, filename: str, atoms: Atoms):
    """手动创建临时的GJF文件"""
    filepath = os.path.join(path, filename)
    with open(filepath, "w") as f:
        f.write("#N\n\n")  # Gaussian 文件头
        f.write("Generated by ASE test\n\n")
        f.write("0 1\n")
        for atom in atoms:
            f.write(f"{atom.symbol} {atom.x} {atom.y} {atom.z}\n")
        f.write("\n\n")  # 文件结束
    return filepath


@pytest.fixture
def setup_test_environment(tmp_path):
    """设置测试环境，创建临时目录并切换工作目录"""
    os.chdir(tmp_path)
    return tmp_path


def test_single_water_molecule(setup_test_environment):
    """测试单个水分子"""
    # 创建初始GJF文件
    water = Atoms("OH2", positions=[[0, 0, 0], [1, 0, 0], [0, 1, 0]])
    create_gjf_file(setup_test_environment, "water.gjf", water)

    # 运行识别函数
    merged_molecules, molecules_flag, initial_info = identify_molecules(water)

    # 验证结果
    expected_molecule = frozenset([("O", 1), ("H", 2)])
    assert len(merged_molecules) == 1
    assert expected_molecule in merged_molecules
    assert merged_molecules[expected_molecule] == 1
    assert molecules_flag is True
    assert initial_info == [{"O": 1, "H": 2}]


def test_two_isolated_water_molecules(setup_test_environment):
    """测试两个独立的水分子"""
    # 创建两个初始GJF文件
    water1 = Atoms("OH2", positions=[[0, 0, 0], [1, 0, 0], [0, 1, 0]])
    water2 = Atoms("OH2", positions=[[10, 0, 0], [11, 0, 0], [10, 1, 0]])
    create_gjf_file(setup_test_environment, "water1.gjf", water1)
    create_gjf_file(setup_test_environment, "water2.gjf", water2)

    # 合并两个分子
    combined = water1 + water2

    # 运行识别函数
    merged_molecules, molecules_flag, initial_info = identify_molecules(combined)

    # 验证结果
    expected_molecule = frozenset([("O", 1), ("H", 2)])
    assert len(merged_molecules) == 1
    assert expected_molecule in merged_molecules
    assert merged_molecules[expected_molecule] == 2
    assert molecules_flag is True


def test_water_and_methane_molecules(setup_test_environment):
    """测试水分子和甲烷分子"""
    # 创建初始GJF文件
    water = Atoms("OH2", positions=[[0, 0, 0], [1, 0, 0], [0, 1, 0]])
    methane = Atoms(
        "CH4", positions=[[10, 0, 0], [11, 0, 0], [10, 1, 0], [10, 0, 1], [9, 0, 0]]
    )
    create_gjf_file(setup_test_environment, "water.gjf", water)
    create_gjf_file(setup_test_environment, "methane.gjf", methane)

    # 合并两个分子
    combined = water + methane

    # 运行识别函数
    merged_molecules, molecules_flag, initial_info = identify_molecules(combined)

    # 验证结果
    water_mol = frozenset([("O", 1), ("H", 2)])
    methane_mol = frozenset([("C", 1), ("H", 4)])

    assert len(merged_molecules) == 2
    assert water_mol in merged_molecules
    assert methane_mol in merged_molecules
    assert merged_molecules[water_mol] == 1
    assert merged_molecules[methane_mol] == 1
    assert molecules_flag is True
    assert sorted(initial_info, key=lambda x: sorted(x.items())) == sorted(
        [{"O": 1, "H": 2}, {"C": 1, "H": 4}], key=lambda x: sorted(x.items())
    )


def test_mismatched_molecules(setup_test_environment):
    """测试分子不匹配的情况"""
    # 只创建一个初始GJF文件
    water = Atoms("OH2", positions=[[0, 0, 0], [1, 0, 0], [0, 1, 0]])
    create_gjf_file(setup_test_environment, "water.gjf", water)

    # 创建两个独立的水分子
    water1 = Atoms("OH", positions=[[0, 0, 0], [1, 0, 0]])
    water2 = Atoms("OH3", positions=[[10, 0, 0], [11, 0, 0], [10, 1, 0], [10, 1, 1]])
    combined = water1 + water2

    # 运行识别函数
    merged_molecules, molecules_flag, initial_info = identify_molecules(combined)

    # 验证结果
    expected_molecule = frozenset([("O", 1), ("H", 2)])
    assert len(merged_molecules) == 2
    assert expected_molecule not in merged_molecules
    assert merged_molecules[expected_molecule] == 0
    assert molecules_flag is False
    assert initial_info == [{"O": 1, "H": 2}]


def test_no_gjf_files(setup_test_environment):
    """测试没有GJF文件的情况"""
    water = Atoms("OH2", positions=[[0, 0, 0], [1, 0, 0], [0, 1, 0]])

    # 运行识别函数
    merged_molecules, molecules_flag, initial_info = identify_molecules(water)

    # 验证结果
    expected_molecule = frozenset([("O", 1), ("H", 2)])
    assert len(merged_molecules) == 1
    assert expected_molecule in merged_molecules
    assert merged_molecules[expected_molecule] == 1
    assert molecules_flag is False  # 没有初始GJF文件
    assert initial_info == []


def test_molecules_information_logging(caplog):
    """测试分子信息日志输出"""
    # 准备测试数据
    molecules = {frozenset([("C", 1), ("H", 4)]): 1, frozenset([("O", 1), ("H", 2)]): 2}
    molecules_flag = True
    initial_info = [{"C": 1, "H": 4}, {"O": 1, "H": 2}]

    # 运行信息输出函数
    with caplog.at_level(logging.INFO):
        molecules_information(molecules, molecules_flag, initial_info)

    # 验证日志输出
    assert "Initial molecules: [{'C': 1, 'H': 4}, {'O': 1, 'H': 2}]" in caplog.text
    assert "Molecule 1 (Total Atoms: 5, Count: 1): C1H4" in caplog.text
    assert "Molecule 2 (Total Atoms: 3, Count: 2): O1H2" in caplog.text
    assert "Molecular Comparison Successful" in caplog.text


def test_molecules_information_failed_logging(caplog):
    """测试分子比较失败的日志输出"""
    # 准备测试数据
    molecules = {frozenset([("C", 1), ("H", 4)]): 1, frozenset([("O", 1), ("H", 2)]): 2}
    molecules_flag = False
    initial_info = [{"C": 1, "H": 4}, {"O": 1, "H": 2}]

    # 运行信息输出函数
    with caplog.at_level(logging.INFO):
        molecules_information(molecules, molecules_flag, initial_info)

    # 验证日志输出
    assert "Molecular Comparison Failed" in caplog.text