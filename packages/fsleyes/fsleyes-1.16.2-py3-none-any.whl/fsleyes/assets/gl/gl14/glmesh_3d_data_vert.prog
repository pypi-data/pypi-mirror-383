!!ARBvp1.0
#
# Vertex program for rendering GLMesh instances in 3D, colouring them
# according to vertex data.
#
# Input parameters:
#
#    {{ param3_normalmat }} - Matrix to transform normal vectors into
#                             display coordinates.
#    {{ param4_MV }}        - Model view matrix.
#    {{ param4_MVP }}       - Model view projection matrix.
#
# Input attributes:
#    {{ attr_vertexData }} - Data associated with the current vertex
#    {{ attr_normal }}     - Vertex normal vector
#
# Outputs:
#    {{ varying_vertexData }}   - As above, passed through to fragment shader.
#    {{ varying_modulateData }} - As above, passed through to fragment shader.
#    {{ varying_vertex }}       - The vertex position in view coordinates.
#    {{ varying_normal }}       - As above, passed through to fragment shader.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

PARAM normalmat[3] = {{ param3_normalmat }};
PARAM MV[4]        = {{ param4_MV }};
PARAM MVP[4]       = {{ param4_MVP }};

TEMP normal;

DP4 result.position.x, MVP[0], {{ attr_vertex }};
DP4 result.position.y, MVP[1], {{ attr_vertex }};
DP4 result.position.z, MVP[2], {{ attr_vertex }};
DP4 result.position.w, MVP[3], {{ attr_vertex }};

# Transform the vertex position into display coordinates
DP4 {{ varying_vertex }}.x, MV[0], {{ attr_vertex }};
DP4 {{ varying_vertex }}.y, MV[1], {{ attr_vertex }};
DP4 {{ varying_vertex }}.z, MV[2], {{ attr_vertex }};
DP4 {{ varying_vertex }}.w, MV[3], {{ attr_vertex }};

# Transform the normal vector
DP3 normal.x, normalmat[0], {{ attr_normal }};
DP3 normal.y, normalmat[1], {{ attr_normal }};
DP3 normal.z, normalmat[2], {{ attr_normal }};

# Normalise to unit length
DP3 normal.w, normal, normal;
RSQ normal.w, normal.w;
MUL normal,   normal, normal.w;
MOV normal.w, 0;

MOV {{ varying_normal }}, normal;

# Copy the vertex/modulate data
MOV {{ varying_vertexData }},   {{ attr_vertexData }};
MOV {{ varying_modulateData }}, {{ attr_modulateData }};

END
