# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:25:44.992115.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Canonical,DateTime,Integer,Boolean
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,Period,CodeableConcept,BackboneElement,Quantity,Range,Duration

 
class MeasureReportGroupPopulation(BackboneElement):
    """
    The populations that make up the population group, one for each type of population appropriate for the measure.
    """
    linkId: Optional[String] = Field(
        description="Pointer to specific population from Measure",
        default=None,
    )
    linkId_ext: Optional[Element] = Field(
        description="Placeholder element for linkId extensions",
        default=None,
        alias="_linkId",
    )
    code: Optional[CodeableConcept] = Field(
        description="initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation",
        default=None,
    )
    count: Optional[Integer] = Field(
        description="Size of the population",
        default=None,
    )
    count_ext: Optional[Element] = Field(
        description="Placeholder element for count extensions",
        default=None,
        alias="_count",
    )
    subjectResults: Optional[Reference] = Field(
        description="For subject-list reports, the subject results in this population",
        default=None,
    )
    subjectReport: Optional[List[Reference]] = Field(
        description="For subject-list reports, a subject result in this population",
        default=None,
    )
    subjects: Optional[Reference] = Field(
        description="What individual(s) in the population",
        default=None,
    )
    @field_validator(*('subjects', 'subjectReport', 'subjectResults', 'count', 'code', 'linkId', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MeasureReportGroupStratifierStratumComponent(BackboneElement):
    """
    A stratifier component value.
    """
    linkId: Optional[String] = Field(
        description="Pointer to specific stratifier component from Measure",
        default=None,
    )
    linkId_ext: Optional[Element] = Field(
        description="Placeholder element for linkId extensions",
        default=None,
        alias="_linkId",
    )
    code: Optional[CodeableConcept] = Field(
        description="What stratifier component of the group",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="The stratum component value, e.g. male",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="The stratum component value, e.g. male",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="The stratum component value, e.g. male",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="The stratum component value, e.g. male",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="The stratum component value, e.g. male",
        default=None,
    )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @field_validator(*('code', 'linkId', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[CodeableConcept, Boolean, Quantity, Range, Reference],
            field_name_base="value",
            required=True,
        )

 
class MeasureReportGroupStratifierStratumPopulation(BackboneElement):
    """
    The populations that make up the stratum, one for each type of population appropriate to the measure.
    """
    linkId: Optional[String] = Field(
        description="Pointer to specific population from Measure",
        default=None,
    )
    linkId_ext: Optional[Element] = Field(
        description="Placeholder element for linkId extensions",
        default=None,
        alias="_linkId",
    )
    code: Optional[CodeableConcept] = Field(
        description="initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation",
        default=None,
    )
    count: Optional[Integer] = Field(
        description="Size of the population",
        default=None,
    )
    count_ext: Optional[Element] = Field(
        description="Placeholder element for count extensions",
        default=None,
        alias="_count",
    )
    subjectResults: Optional[Reference] = Field(
        description="For subject-list reports, the subject results in this population",
        default=None,
    )
    subjectReport: Optional[List[Reference]] = Field(
        description="For subject-list reports, a subject result in this population",
        default=None,
    )
    subjects: Optional[Reference] = Field(
        description="What individual(s) in the population",
        default=None,
    )
    @field_validator(*('subjects', 'subjectReport', 'subjectResults', 'count', 'code', 'linkId', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MeasureReportGroupStratifierStratum(BackboneElement):
    """
    This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
    """
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="The stratum value, e.g. male",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="The stratum value, e.g. male",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="The stratum value, e.g. male",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="The stratum value, e.g. male",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="The stratum value, e.g. male",
        default=None,
    )
    component: Optional[List[MeasureReportGroupStratifierStratumComponent]] = Field(
        description="Stratifier component values",
        default=None,
    )
    population: Optional[List[MeasureReportGroupStratifierStratumPopulation]] = Field(
        description="Population results in this stratum",
        default=None,
    )
    measureScoreQuantity: Optional[Quantity] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    measureScoreDateTime: Optional[DateTime] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    measureScoreCodeableConcept: Optional[CodeableConcept] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    measureScorePeriod: Optional[Period] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    measureScoreRange: Optional[Range] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    measureScoreDuration: Optional[Duration] = Field(
        description="What score this stratum achieved",
        default=None,
    )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @property 
    def measureScore(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="measureScore",
        )
    @field_validator(*('population', 'component', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[CodeableConcept, Boolean, Quantity, Range, Reference],
            field_name_base="value",
            required=False,
        )

    @model_validator(mode="after")
    def measureScore_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Quantity, DateTime, CodeableConcept, Period, Range, Duration],
            field_name_base="measureScore",
            required=False,
        )

 
class MeasureReportGroupStratifier(BackboneElement):
    """
    When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
    """
    linkId: Optional[String] = Field(
        description="Pointer to specific stratifier from Measure",
        default=None,
    )
    linkId_ext: Optional[Element] = Field(
        description="Placeholder element for linkId extensions",
        default=None,
        alias="_linkId",
    )
    code: Optional[CodeableConcept] = Field(
        description="What stratifier of the group",
        default=None,
    )
    stratum: Optional[List[MeasureReportGroupStratifierStratum]] = Field(
        description="Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components",
        default=None,
    )
    @field_validator(*('stratum', 'code', 'linkId', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MeasureReportGroup(BackboneElement):
    """
    The results of the calculation, one for each population group in the measure.
    """
    linkId: Optional[String] = Field(
        description="Pointer to specific group from Measure",
        default=None,
    )
    linkId_ext: Optional[Element] = Field(
        description="Placeholder element for linkId extensions",
        default=None,
        alias="_linkId",
    )
    code: Optional[CodeableConcept] = Field(
        description="Meaning of the group",
        default=None,
    )
    subject: Optional[Reference] = Field(
        description="What individual(s) the report is for",
        default=None,
    )
    population: Optional[List[MeasureReportGroupPopulation]] = Field(
        description="The populations in the group",
        default=None,
    )
    measureScoreQuantity: Optional[Quantity] = Field(
        description="What score this group achieved",
        default=None,
    )
    measureScoreDateTime: Optional[DateTime] = Field(
        description="What score this group achieved",
        default=None,
    )
    measureScoreCodeableConcept: Optional[CodeableConcept] = Field(
        description="What score this group achieved",
        default=None,
    )
    measureScorePeriod: Optional[Period] = Field(
        description="What score this group achieved",
        default=None,
    )
    measureScoreRange: Optional[Range] = Field(
        description="What score this group achieved",
        default=None,
    )
    measureScoreDuration: Optional[Duration] = Field(
        description="What score this group achieved",
        default=None,
    )
    stratifier: Optional[List[MeasureReportGroupStratifier]] = Field(
        description="Stratification results",
        default=None,
    )
    @property 
    def measureScore(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="measureScore",
        )
    @field_validator(*('stratifier', 'population', 'subject', 'code', 'linkId', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def measureScore_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Quantity, DateTime, CodeableConcept, Period, Range, Duration],
            field_name_base="measureScore",
            required=False,
        )

 
class MeasureReport(FHIRBaseModel):
    """
    The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/MeasureReport']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Additional identifier for the MeasureReport",
        default=None,
    )
    status: Optional[Code] = Field(
        description="complete | pending | error",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    type: Optional[Code] = Field(
        description="individual | subject-list | summary | data-exchange",
        default=None,
    )
    type_ext: Optional[Element] = Field(
        description="Placeholder element for type extensions",
        default=None,
        alias="_type",
    )
    dataUpdateType: Optional[Code] = Field(
        description="incremental | snapshot",
        default=None,
    )
    dataUpdateType_ext: Optional[Element] = Field(
        description="Placeholder element for dataUpdateType extensions",
        default=None,
        alias="_dataUpdateType",
    )
    measure: Optional[Canonical] = Field(
        description="What measure was calculated",
        default=None,
    )
    measure_ext: Optional[Element] = Field(
        description="Placeholder element for measure extensions",
        default=None,
        alias="_measure",
    )
    subject: Optional[Reference] = Field(
        description="What individual(s) the report is for",
        default=None,
    )
    date: Optional[DateTime] = Field(
        description="When the measure was calculated",
        default=None,
    )
    date_ext: Optional[Element] = Field(
        description="Placeholder element for date extensions",
        default=None,
        alias="_date",
    )
    reporter: Optional[Reference] = Field(
        description="Who is reporting the data",
        default=None,
    )
    reportingVendor: Optional[Reference] = Field(
        description="What vendor prepared the data",
        default=None,
    )
    location: Optional[Reference] = Field(
        description="Where the reported data is from",
        default=None,
    )
    period: Optional[Period] = Field(
        description="What period the report covers",
        default=None,
    )
    inputParameters: Optional[Reference] = Field(
        description="What parameters were provided to the report",
        default=None,
    )
    scoring: Optional[CodeableConcept] = Field(
        description="What scoring method (e.g. proportion, ratio, continuous-variable)",
        default=None,
    )
    improvementNotation: Optional[CodeableConcept] = Field(
        description="increase | decrease",
        default=None,
    )
    group: Optional[List[MeasureReportGroup]] = Field(
        description="Measure results for each group",
        default=None,
    )
    supplementalData: Optional[List[Reference]] = Field(
        description="Additional information collected for the report",
        default=None,
    )
    evaluatedResource: Optional[List[Reference]] = Field(
        description="What data was used to calculate the measure score",
        default=None,
    )
    resourceType: Literal['MeasureReport'] = Field(
        description=None,
        default="MeasureReport",
    )
    @field_validator(*('evaluatedResource', 'supplementalData', 'group', 'improvementNotation', 'scoring', 'inputParameters', 'period', 'location', 'reportingVendor', 'reporter', 'date', 'subject', 'measure', 'dataUpdateType', 'type', 'status', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )

    @model_validator(mode="after")
    def FHIR_mrp_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="(type != 'data-exchange') or group.exists().not()",
            human="Measure Reports used for data collection SHALL NOT communicate group and score information",
            key="mrp-1",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_mrp_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="group.stratifier.stratum.all(value.exists() xor component.exists())",
            human="Stratifiers SHALL be either a single criteria or a set of criteria components",
            key="mrp-2",
            severity="error",
        )


