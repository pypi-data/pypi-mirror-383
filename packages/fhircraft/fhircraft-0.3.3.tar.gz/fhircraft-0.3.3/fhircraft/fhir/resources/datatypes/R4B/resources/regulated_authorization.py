# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:22:41.586325.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Markdown,DateTime
 
from fhircraft.fhir.resources.datatypes.R4B.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,CodeableConcept,Period,CodeableReference,BackboneElement

 
class RegulatedAuthorizationCase(BackboneElement):
    """
    The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
    """
    identifier: Optional[Identifier] = Field(
        description="Identifier by which this case can be referenced",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="The defining type of case",
        default=None,
    )
    status: Optional[CodeableConcept] = Field(
        description="The status associated with the case",
        default=None,
    )
    datePeriod: Optional[Period] = Field(
        description="Relevant date for this case",
        default=None,
    )
    dateDateTime: Optional[DateTime] = Field(
        description="Relevant date for this case",
        default=None,
    )
    application: Optional[List["RegulatedAuthorizationCase"]] = Field(
        description="Applications submitted to obtain a regulated authorization. Steps within the longer running case or procedure",
        default=None,
    )
    @property 
    def date(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="date",
        )
    @field_validator(*('application', 'status', 'type', 'identifier', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def date_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Period, DateTime],
            field_name_base="date",
            required=False,
        )

 
class RegulatedAuthorization(FHIRBaseModel):
    """
    Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='4.3.0', profile=['http://hl7.org/fhir/StructureDefinition/RegulatedAuthorization']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Business identifier for the authorization, typically assigned by the authorizing body",
        default=None,
    )
    subject: Optional[List[Reference]] = Field(
        description="The product type, treatment, facility or activity that is being authorized",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="Overall type of this authorization, for example drug marketing approval, orphan drug designation",
        default=None,
    )
    description: Optional[Markdown] = Field(
        description="General textual supporting information",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    region: Optional[List[CodeableConcept]] = Field(
        description="The territory in which the authorization has been granted",
        default=None,
    )
    status: Optional[CodeableConcept] = Field(
        description="The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications",
        default=None,
    )
    statusDate: Optional[DateTime] = Field(
        description="The date at which the current status was assigned",
        default=None,
    )
    statusDate_ext: Optional[Element] = Field(
        description="Placeholder element for statusDate extensions",
        default=None,
        alias="_statusDate",
    )
    validityPeriod: Optional[Period] = Field(
        description="The time period in which the regulatory approval etc. is in effect, e.g. a Marketing Authorization includes the date of authorization and/or expiration date",
        default=None,
    )
    indication: Optional[CodeableReference] = Field(
        description="Condition for which the use of the regulated product applies",
        default=None,
    )
    intendedUse: Optional[CodeableConcept] = Field(
        description="The intended use of the product, e.g. prevention, treatment",
        default=None,
    )
    basis: Optional[List[CodeableConcept]] = Field(
        description="The legal/regulatory framework or reasons under which this authorization is granted",
        default=None,
    )
    holder: Optional[Reference] = Field(
        description="The organization that has been granted this authorization, by the regulator",
        default=None,
    )
    regulator: Optional[Reference] = Field(
        description="The regulatory authority or authorizing body granting the authorization",
        default=None,
    )
    case: Optional[RegulatedAuthorizationCase] = Field(
        description="The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)",
        default=None,
    )
    resourceType: Literal['RegulatedAuthorization'] = Field(
        description=None,
        default="RegulatedAuthorization",
    )
    @field_validator(*('case', 'regulator', 'holder', 'basis', 'intendedUse', 'indication', 'validityPeriod', 'statusDate', 'status', 'region', 'description', 'type', 'subject', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count()) or $this is Parameters",
            human="All FHIR elements must have a @value or children unless an empty Parameters resource",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="after", check_fields=None)
    @classmethod
    def FHIR_dom_r4b_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="($this is Citation or $this is Evidence or $this is EvidenceReport or $this is EvidenceVariable or $this is MedicinalProductDefinition or $this is PackagedProductDefinition or $this is AdministrableProductDefinition or $this is Ingredient or $this is ClinicalUseDefinition or $this is RegulatedAuthorization or $this is SubstanceDefinition or $this is SubscriptionStatus or $this is SubscriptionTopic) implies (%resource is Citation or %resource is Evidence or %resource is EvidenceReport or %resource is EvidenceVariable or %resource is MedicinalProductDefinition or %resource is PackagedProductDefinition or %resource is AdministrableProductDefinition or %resource is Ingredient or %resource is ClinicalUseDefinition or %resource is RegulatedAuthorization or %resource is SubstanceDefinition or %resource is SubscriptionStatus or %resource is SubscriptionTopic)",
            human="Containing new R4B resources within R4 resources may cause interoperability issues if instances are shared with R4 systems",
            key="dom-r4b",
            severity="warning",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R4B",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where(((id.exists() and ('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url)))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(uri) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


