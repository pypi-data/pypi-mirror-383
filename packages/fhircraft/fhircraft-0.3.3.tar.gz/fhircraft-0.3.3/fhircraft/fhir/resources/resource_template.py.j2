# Code autogenerated by Fhircraft {{ metadata.version }} on {{ metadata.timestamp }}.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
{% for module, objects in imports.items() %} 
from {{ module }} import {{ objects|join(',')}}
{% endfor %}

{% for model, model_data in data.items() %} 
class {{ model.__name__ }}({{ model.__base__.__name__ }}):
    {% if model.__doc__ %}
    """
    {{ model.__doc__ }}
    """
    {% endif %}
    {% if not model_data.fields %}
    pass
    {% endif %}
    {% for field, info in model_data.fields.items() %}
    {{ field }}: {{ info.annotation}} = Field(
        {% if info.title %}
        title="{{ info.title }}",
        {% endif %}
        description={% if info.description %}{{ info.description|tojson }}{% else %}None{% endif %},
        {% if info.default != '...' %}
        default={{ info.default }},
        {% endif %}
        {% if info.default_factory != '...' %}
        default_factory={{ info.default_factory }},
        {% endif %}
        {% if info.alias %}
        alias="{{ info.alias }}",
        {% endif %}
    )
    {% endfor %}
    
    {% for name, property in model_data.properties.items() %}
    @property 
    def {{ name }}(self):
        return {{ property.func.__name__ }}(self, 
            {% for arg in property.args %}
            {{ arg }},
            {% endfor %}
            {% for arg, value in property.keywords.items() %}
            {{ arg }}={{ value }},
            {% endfor %}
        )
        
    {% endfor %}
    {% for name, validator in model_data.validators.items() %}
    {% if validator.mode == "field" %}
    @field_validator(*{{ validator.info.fields }}, mode="{{ validator.info.mode }}", check_fields={{ validator.info.check_fields }})
    @classmethod
    def {{ name }}(cls, value):    
        return {{ validator.func.__name__ }}(cls, value, 
            {% for arg in validator.args %}
            {{ arg }},
            {% endfor %}
            {% for arg, value in validator.keywords.items() %}
            {{ arg }}={{ value }},
            {% endfor %}
        )
        
    {% endif %}
    {% if validator.mode == "model" %}
    @model_validator(mode="{{ validator.info.mode }}")
    def {{ name }}(self):
        return {{ validator.func.__name__ }}( 
            self,
            {% for arg in validator.args %}
            {{ arg }},
            {% endfor %}
            {% for arg, value in validator.keywords.items() %}
            {{ arg }}={{ value }},
            {% endfor %}
        )
        
    {% endif %}
    {% endfor %}
{% endfor %}

{% for model, model_data in data.items() %}
{% if not model.__pydantic_complete__ %}
{{ model.__name__ }}.model_rebuild()
{% endif %}
{% endfor %}
