# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:23:01.899004.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Canonical,DateTime,PositiveInt,Base64Binary,Boolean,Date,Decimal,Id,Instant,Integer,Markdown,Oid,Time,UnsignedInt,Url,Uuid
 
from fhircraft.fhir.resources.datatypes.R4B.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,CodeableConcept,Period,Annotation,BackboneElement,Address,Age,Attachment,Coding,ContactPoint,Count,Distance,Duration,HumanName,Money,Quantity,Range,Ratio,SampledData,Signature,Timing,ContactDetail,Contributor,DataRequirement,Expression,ParameterDefinition,RelatedArtifact,TriggerDefinition,UsageContext,Dosage

 
class TaskRestriction(BackboneElement):
    """
    If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
    """
    repetitions: Optional[PositiveInt] = Field(
        description="How many times to repeat",
        default=None,
    )
    repetitions_ext: Optional[Element] = Field(
        description="Placeholder element for repetitions extensions",
        default=None,
        alias="_repetitions",
    )
    period: Optional[Period] = Field(
        description="When fulfillment sought",
        default=None,
    )
    recipient: Optional[List[Reference]] = Field(
        description="For whom is fulfillment sought?",
        default=None,
    )
    @field_validator(*('recipient', 'period', 'repetitions', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class TaskInput(BackboneElement):
    """
    Additional information that may be needed in the execution of the task.
    """
    type: Optional[CodeableConcept] = Field(
        description="Label for the input",
        default=None,
    )
    valueBase64Binary: Optional[Base64Binary] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueCanonical: Optional[Canonical] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueCode: Optional[Code] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDate: Optional[Date] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDecimal: Optional[Decimal] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueId: Optional[Id] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueInstant: Optional[Instant] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueMarkdown: Optional[Markdown] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueOid: Optional[Oid] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueUnsignedInt: Optional[UnsignedInt] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueUri: Optional[Uri] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueUrl: Optional[Url] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueUuid: Optional[Uuid] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueAddress: Optional[Address] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueAge: Optional[Age] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueAnnotation: Optional[Annotation] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueCoding: Optional[Coding] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueCount: Optional[Count] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDistance: Optional[Distance] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDuration: Optional[Duration] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueHumanName: Optional[HumanName] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueIdentifier: Optional[Identifier] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueMoney: Optional[Money] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueSignature: Optional[Signature] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueTiming: Optional[Timing] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueContributor: Optional[Contributor] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueExpression: Optional[Expression] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueUsageContext: Optional[UsageContext] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueDosage: Optional[Dosage] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    valueMeta: Optional[Meta] = Field(
        description="Content to use in performing the task",
        default=None,
    )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @field_validator(*('type', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, String, Time, UnsignedInt, Uri, Url, Uuid, Address, Age, Annotation, Attachment, CodeableConcept, Coding, ContactPoint, Count, Distance, Duration, HumanName, Identifier, Money, Period, Quantity, Range, Ratio, Reference, SampledData, Signature, Timing, ContactDetail, Contributor, DataRequirement, Expression, ParameterDefinition, RelatedArtifact, TriggerDefinition, UsageContext, Dosage, Meta],
            field_name_base="value",
            required=True,
        )

 
class TaskOutput(BackboneElement):
    """
    Outputs produced by the Task.
    """
    type: Optional[CodeableConcept] = Field(
        description="Label for output",
        default=None,
    )
    valueBase64Binary: Optional[Base64Binary] = Field(
        description="Result of output",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Result of output",
        default=None,
    )
    valueCanonical: Optional[Canonical] = Field(
        description="Result of output",
        default=None,
    )
    valueCode: Optional[Code] = Field(
        description="Result of output",
        default=None,
    )
    valueDate: Optional[Date] = Field(
        description="Result of output",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Result of output",
        default=None,
    )
    valueDecimal: Optional[Decimal] = Field(
        description="Result of output",
        default=None,
    )
    valueId: Optional[Id] = Field(
        description="Result of output",
        default=None,
    )
    valueInstant: Optional[Instant] = Field(
        description="Result of output",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Result of output",
        default=None,
    )
    valueMarkdown: Optional[Markdown] = Field(
        description="Result of output",
        default=None,
    )
    valueOid: Optional[Oid] = Field(
        description="Result of output",
        default=None,
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Result of output",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Result of output",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Result of output",
        default=None,
    )
    valueUnsignedInt: Optional[UnsignedInt] = Field(
        description="Result of output",
        default=None,
    )
    valueUri: Optional[Uri] = Field(
        description="Result of output",
        default=None,
    )
    valueUrl: Optional[Url] = Field(
        description="Result of output",
        default=None,
    )
    valueUuid: Optional[Uuid] = Field(
        description="Result of output",
        default=None,
    )
    valueAddress: Optional[Address] = Field(
        description="Result of output",
        default=None,
    )
    valueAge: Optional[Age] = Field(
        description="Result of output",
        default=None,
    )
    valueAnnotation: Optional[Annotation] = Field(
        description="Result of output",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Result of output",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Result of output",
        default=None,
    )
    valueCoding: Optional[Coding] = Field(
        description="Result of output",
        default=None,
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        description="Result of output",
        default=None,
    )
    valueCount: Optional[Count] = Field(
        description="Result of output",
        default=None,
    )
    valueDistance: Optional[Distance] = Field(
        description="Result of output",
        default=None,
    )
    valueDuration: Optional[Duration] = Field(
        description="Result of output",
        default=None,
    )
    valueHumanName: Optional[HumanName] = Field(
        description="Result of output",
        default=None,
    )
    valueIdentifier: Optional[Identifier] = Field(
        description="Result of output",
        default=None,
    )
    valueMoney: Optional[Money] = Field(
        description="Result of output",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Result of output",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Result of output",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Result of output",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Result of output",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Result of output",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Result of output",
        default=None,
    )
    valueSignature: Optional[Signature] = Field(
        description="Result of output",
        default=None,
    )
    valueTiming: Optional[Timing] = Field(
        description="Result of output",
        default=None,
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        description="Result of output",
        default=None,
    )
    valueContributor: Optional[Contributor] = Field(
        description="Result of output",
        default=None,
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        description="Result of output",
        default=None,
    )
    valueExpression: Optional[Expression] = Field(
        description="Result of output",
        default=None,
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        description="Result of output",
        default=None,
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        description="Result of output",
        default=None,
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        description="Result of output",
        default=None,
    )
    valueUsageContext: Optional[UsageContext] = Field(
        description="Result of output",
        default=None,
    )
    valueDosage: Optional[Dosage] = Field(
        description="Result of output",
        default=None,
    )
    valueMeta: Optional[Meta] = Field(
        description="Result of output",
        default=None,
    )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @field_validator(*('type', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, String, Time, UnsignedInt, Uri, Url, Uuid, Address, Age, Annotation, Attachment, CodeableConcept, Coding, ContactPoint, Count, Distance, Duration, HumanName, Identifier, Money, Period, Quantity, Range, Ratio, Reference, SampledData, Signature, Timing, ContactDetail, Contributor, DataRequirement, Expression, ParameterDefinition, RelatedArtifact, TriggerDefinition, UsageContext, Dosage, Meta],
            field_name_base="value",
            required=True,
        )

 
class Task(FHIRBaseModel):
    """
    A task to be performed.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='4.3.0', profile=['http://hl7.org/fhir/StructureDefinition/Task']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Task Instance Identifier",
        default=None,
    )
    instantiatesCanonical: Optional[Canonical] = Field(
        description="Formal definition of task",
        default=None,
    )
    instantiatesCanonical_ext: Optional[Element] = Field(
        description="Placeholder element for instantiatesCanonical extensions",
        default=None,
        alias="_instantiatesCanonical",
    )
    instantiatesUri: Optional[Uri] = Field(
        description="Formal definition of task",
        default=None,
    )
    instantiatesUri_ext: Optional[Element] = Field(
        description="Placeholder element for instantiatesUri extensions",
        default=None,
        alias="_instantiatesUri",
    )
    basedOn: Optional[List[Reference]] = Field(
        description="Request fulfilled by this task",
        default=None,
    )
    groupIdentifier: Optional[Identifier] = Field(
        description="Requisition or grouper id",
        default=None,
    )
    partOf: Optional[List[Reference]] = Field(
        description="Composite task",
        default=None,
    )
    status: Optional[Code] = Field(
        description="draft | requested | received | accepted | +",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    statusReason: Optional[CodeableConcept] = Field(
        description="Reason for current status",
        default=None,
    )
    businessStatus: Optional[CodeableConcept] = Field(
        description="E.g. \"Specimen collected\", \"IV prepped\"",
        default=None,
    )
    intent: Optional[Code] = Field(
        description="unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option",
        default=None,
    )
    intent_ext: Optional[Element] = Field(
        description="Placeholder element for intent extensions",
        default=None,
        alias="_intent",
    )
    priority: Optional[Code] = Field(
        description="routine | urgent | asap | stat",
        default=None,
    )
    priority_ext: Optional[Element] = Field(
        description="Placeholder element for priority extensions",
        default=None,
        alias="_priority",
    )
    code: Optional[CodeableConcept] = Field(
        description="Task Type",
        default=None,
    )
    description: Optional[String] = Field(
        description="Human-readable explanation of task",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    focus: Optional[Reference] = Field(
        description="What task is acting on",
        default=None,
    )
    for_: Optional[Reference] = Field(
        description="Beneficiary of the Task",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Healthcare event during which this task originated",
        default=None,
    )
    executionPeriod: Optional[Period] = Field(
        description="Start and end time of execution",
        default=None,
    )
    authoredOn: Optional[DateTime] = Field(
        description="Task Creation Date",
        default=None,
    )
    authoredOn_ext: Optional[Element] = Field(
        description="Placeholder element for authoredOn extensions",
        default=None,
        alias="_authoredOn",
    )
    lastModified: Optional[DateTime] = Field(
        description="Task Last Modified Date",
        default=None,
    )
    lastModified_ext: Optional[Element] = Field(
        description="Placeholder element for lastModified extensions",
        default=None,
        alias="_lastModified",
    )
    requester: Optional[Reference] = Field(
        description="Who is asking for task to be done",
        default=None,
    )
    performerType: Optional[List[CodeableConcept]] = Field(
        description="Requested performer",
        default=None,
    )
    owner: Optional[Reference] = Field(
        description="Responsible individual",
        default=None,
    )
    location: Optional[Reference] = Field(
        description="Where task occurs",
        default=None,
    )
    reasonCode: Optional[CodeableConcept] = Field(
        description="Why task is needed",
        default=None,
    )
    reasonReference: Optional[Reference] = Field(
        description="Why task is needed",
        default=None,
    )
    insurance: Optional[List[Reference]] = Field(
        description="Associated insurance coverage",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Comments made about the task",
        default=None,
    )
    relevantHistory: Optional[List[Reference]] = Field(
        description="Key events in history of the Task",
        default=None,
    )
    restriction: Optional[TaskRestriction] = Field(
        description="Constraints on fulfillment tasks",
        default=None,
    )
    input: Optional[List[TaskInput]] = Field(
        description="Information used to perform task",
        default=None,
    )
    output: Optional[List[TaskOutput]] = Field(
        description="Information produced as part of task",
        default=None,
    )
    resourceType: Literal['Task'] = Field(
        description=None,
        default="Task",
    )
    @field_validator(*('output', 'input', 'restriction', 'relevantHistory', 'note', 'insurance', 'reasonReference', 'reasonCode', 'location', 'owner', 'performerType', 'requester', 'lastModified', 'authoredOn', 'executionPeriod', 'encounter', 'for_', 'focus', 'description', 'code', 'priority', 'intent', 'businessStatus', 'statusReason', 'status', 'partOf', 'groupIdentifier', 'basedOn', 'instantiatesUri', 'instantiatesCanonical', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count()) or $this is Parameters",
            human="All FHIR elements must have a @value or children unless an empty Parameters resource",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="after", check_fields=None)
    @classmethod
    def FHIR_dom_r4b_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="($this is Citation or $this is Evidence or $this is EvidenceReport or $this is EvidenceVariable or $this is MedicinalProductDefinition or $this is PackagedProductDefinition or $this is AdministrableProductDefinition or $this is Ingredient or $this is ClinicalUseDefinition or $this is RegulatedAuthorization or $this is SubstanceDefinition or $this is SubscriptionStatus or $this is SubscriptionTopic) implies (%resource is Citation or %resource is Evidence or %resource is EvidenceReport or %resource is EvidenceVariable or %resource is MedicinalProductDefinition or %resource is PackagedProductDefinition or %resource is AdministrableProductDefinition or %resource is Ingredient or %resource is ClinicalUseDefinition or %resource is RegulatedAuthorization or %resource is SubstanceDefinition or %resource is SubscriptionStatus or %resource is SubscriptionTopic)",
            human="Containing new R4B resources within R4 resources may cause interoperability issues if instances are shared with R4 systems",
            key="dom-r4b",
            severity="warning",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R4B",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where(((id.exists() and ('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url)))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(uri) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )

    @model_validator(mode="after")
    def FHIR_inv_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="lastModified.exists().not() or authoredOn.exists().not() or lastModified >= authoredOn",
            human="Last modified date must be greater than or equal to authored-on date.",
            key="inv-1",
            severity="error",
        )


