# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:16:30.642990.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Integer,DateTime,Decimal
 
from fhircraft.fhir.resources.datatypes.R4.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,CodeableConcept,Reference,BackboneElement,Period

 
class BiologicallyDerivedProductCollection(BackboneElement):
    """
    How this product was collected.
    """
    collector: Optional[Reference] = Field(
        description="Individual performing collection",
        default=None,
    )
    source: Optional[Reference] = Field(
        description="Who is product from",
        default=None,
    )
    collectedDateTime: Optional[DateTime] = Field(
        description="Time of product collection",
        default=None,
    )
    collectedPeriod: Optional[Period] = Field(
        description="Time of product collection",
        default=None,
    )
    @property 
    def collected(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="collected",
        )
    @field_validator(*('source', 'collector', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def collected_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period],
            field_name_base="collected",
            required=False,
        )

 
class BiologicallyDerivedProductProcessing(BackboneElement):
    """
    Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
    """
    description: Optional[String] = Field(
        description="Description of of processing",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    procedure: Optional[CodeableConcept] = Field(
        description="Procesing code",
        default=None,
    )
    additive: Optional[Reference] = Field(
        description="Substance added during processing",
        default=None,
    )
    timeDateTime: Optional[DateTime] = Field(
        description="Time of processing",
        default=None,
    )
    timePeriod: Optional[Period] = Field(
        description="Time of processing",
        default=None,
    )
    @property 
    def time(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="time",
        )
    @field_validator(*('additive', 'procedure', 'description', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def time_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period],
            field_name_base="time",
            required=False,
        )

 
class BiologicallyDerivedProductManipulation(BackboneElement):
    """
    Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
    """
    description: Optional[String] = Field(
        description="Description of manipulation",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    timeDateTime: Optional[DateTime] = Field(
        description="Time of manipulation",
        default=None,
    )
    timePeriod: Optional[Period] = Field(
        description="Time of manipulation",
        default=None,
    )
    @property 
    def time(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="time",
        )
    @field_validator(*('description', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def time_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period],
            field_name_base="time",
            required=False,
        )

 
class BiologicallyDerivedProductStorage(BackboneElement):
    """
    Product storage.
    """
    description: Optional[String] = Field(
        description="Description of storage",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    temperature: Optional[Decimal] = Field(
        description="Storage temperature",
        default=None,
    )
    temperature_ext: Optional[Element] = Field(
        description="Placeholder element for temperature extensions",
        default=None,
        alias="_temperature",
    )
    scale: Optional[Code] = Field(
        description="farenheit | celsius | kelvin",
        default=None,
    )
    scale_ext: Optional[Element] = Field(
        description="Placeholder element for scale extensions",
        default=None,
        alias="_scale",
    )
    duration: Optional[Period] = Field(
        description="Storage timeperiod",
        default=None,
    )
    @field_validator(*('duration', 'scale', 'temperature', 'description', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BiologicallyDerivedProduct(FHIRBaseModel):
    """
    A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='4.0.1', profile=['http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="External ids for this item",
        default=None,
    )
    productCategory: Optional[Code] = Field(
        description="organ | tissue | fluid | cells | biologicalAgent",
        default=None,
    )
    productCategory_ext: Optional[Element] = Field(
        description="Placeholder element for productCategory extensions",
        default=None,
        alias="_productCategory",
    )
    productCode: Optional[CodeableConcept] = Field(
        description="What this biologically derived product is",
        default=None,
    )
    status: Optional[Code] = Field(
        description="available | unavailable",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    request: Optional[List[Reference]] = Field(
        description="Procedure request",
        default=None,
    )
    quantity: Optional[Integer] = Field(
        description="The amount of this biologically derived product",
        default=None,
    )
    quantity_ext: Optional[Element] = Field(
        description="Placeholder element for quantity extensions",
        default=None,
        alias="_quantity",
    )
    parent: Optional[List[Reference]] = Field(
        description="BiologicallyDerivedProduct parent",
        default=None,
    )
    collection: Optional[BiologicallyDerivedProductCollection] = Field(
        description="How this product was collected",
        default=None,
    )
    processing: Optional[List[BiologicallyDerivedProductProcessing]] = Field(
        description="Any processing of the product during collection",
        default=None,
    )
    manipulation: Optional[BiologicallyDerivedProductManipulation] = Field(
        description="Any manipulation of product post-collection",
        default=None,
    )
    storage: Optional[List[BiologicallyDerivedProductStorage]] = Field(
        description="Product storage",
        default=None,
    )
    resourceType: Literal['BiologicallyDerivedProduct'] = Field(
        description=None,
        default="BiologicallyDerivedProduct",
    )
    @field_validator(*('storage', 'manipulation', 'processing', 'collection', 'parent', 'quantity', 'request', 'status', 'productCode', 'productCategory', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R4",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


