# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:24:08.050968.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,PositiveInt,Markdown,Boolean,DateTime,Instant
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,CodeableConcept,Reference,Period,BackboneElement,CodeableReference,Money

 
class AccountCoverage(BackboneElement):
    """
    The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
    """
    coverage: Optional[Reference] = Field(
        description="The party(s), such as insurances, that may contribute to the payment of this account",
        default=None,
    )
    priority: Optional[PositiveInt] = Field(
        description="The priority of the coverage in the context of this account",
        default=None,
    )
    priority_ext: Optional[Element] = Field(
        description="Placeholder element for priority extensions",
        default=None,
        alias="_priority",
    )
    @field_validator(*('priority', 'coverage', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class AccountGuarantor(BackboneElement):
    """
    The parties responsible for balancing the account if other payment options fall short.
    """
    party: Optional[Reference] = Field(
        description="Responsible entity",
        default=None,
    )
    onHold: Optional[Boolean] = Field(
        description="Credit or other hold applied",
        default=None,
    )
    onHold_ext: Optional[Element] = Field(
        description="Placeholder element for onHold extensions",
        default=None,
        alias="_onHold",
    )
    period: Optional[Period] = Field(
        description="Guarantee account during",
        default=None,
    )
    @field_validator(*('period', 'onHold', 'party', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class AccountDiagnosis(BackboneElement):
    """
    When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
    """
    sequence: Optional[PositiveInt] = Field(
        description="Ranking of the diagnosis (for each type)",
        default=None,
    )
    sequence_ext: Optional[Element] = Field(
        description="Placeholder element for sequence extensions",
        default=None,
        alias="_sequence",
    )
    condition: Optional[CodeableReference] = Field(
        description="The diagnosis relevant to the account",
        default=None,
    )
    dateOfDiagnosis: Optional[DateTime] = Field(
        description="Date of the diagnosis (when coded diagnosis)",
        default=None,
    )
    dateOfDiagnosis_ext: Optional[Element] = Field(
        description="Placeholder element for dateOfDiagnosis extensions",
        default=None,
        alias="_dateOfDiagnosis",
    )
    type: Optional[List[CodeableConcept]] = Field(
        description="Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge \u2026)",
        default=None,
    )
    onAdmission: Optional[Boolean] = Field(
        description="Diagnosis present on Admission",
        default=None,
    )
    onAdmission_ext: Optional[Element] = Field(
        description="Placeholder element for onAdmission extensions",
        default=None,
        alias="_onAdmission",
    )
    packageCode: Optional[List[CodeableConcept]] = Field(
        description="Package Code specific for billing",
        default=None,
    )
    @field_validator(*('packageCode', 'onAdmission', 'type', 'dateOfDiagnosis', 'condition', 'sequence', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class AccountProcedure(BackboneElement):
    """
    When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
    """
    sequence: Optional[PositiveInt] = Field(
        description="Ranking of the procedure (for each type)",
        default=None,
    )
    sequence_ext: Optional[Element] = Field(
        description="Placeholder element for sequence extensions",
        default=None,
        alias="_sequence",
    )
    code: Optional[CodeableReference] = Field(
        description="The procedure relevant to the account",
        default=None,
    )
    dateOfService: Optional[DateTime] = Field(
        description="Date of the procedure (when coded procedure)",
        default=None,
    )
    dateOfService_ext: Optional[Element] = Field(
        description="Placeholder element for dateOfService extensions",
        default=None,
        alias="_dateOfService",
    )
    type: Optional[List[CodeableConcept]] = Field(
        description="How this procedure value should be used in charging the account",
        default=None,
    )
    packageCode: Optional[List[CodeableConcept]] = Field(
        description="Package Code specific for billing",
        default=None,
    )
    device: Optional[List[Reference]] = Field(
        description="Any devices that were associated with the procedure",
        default=None,
    )
    @field_validator(*('device', 'packageCode', 'type', 'dateOfService', 'code', 'sequence', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class AccountRelatedAccount(BackboneElement):
    """
    Other associated accounts related to this account.
    """
    relationship: Optional[CodeableConcept] = Field(
        description="Relationship of the associated Account",
        default=None,
    )
    account: Optional[Reference] = Field(
        description="Reference to an associated Account",
        default=None,
    )
    @field_validator(*('account', 'relationship', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class AccountBalance(BackboneElement):
    """
    The calculated account balances - these are calculated and processed by the finance system.The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
    """
    aggregate: Optional[CodeableConcept] = Field(
        description="Who is expected to pay this part of the balance",
        default=None,
    )
    term: Optional[CodeableConcept] = Field(
        description="current | 30 | 60 | 90 | 120",
        default=None,
    )
    estimate: Optional[Boolean] = Field(
        description="Estimated balance",
        default=None,
    )
    estimate_ext: Optional[Element] = Field(
        description="Placeholder element for estimate extensions",
        default=None,
        alias="_estimate",
    )
    amount: Optional[Money] = Field(
        description="Calculated amount",
        default=None,
    )
    @field_validator(*('amount', 'estimate', 'term', 'aggregate', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class Account(FHIRBaseModel):
    """
    A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/Account']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Account number",
        default=None,
    )
    status: Optional[Code] = Field(
        description="active | inactive | entered-in-error | on-hold | unknown",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    billingStatus: Optional[CodeableConcept] = Field(
        description="Tracks the lifecycle of the account through the billing process",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="E.g. patient, expense, depreciation",
        default=None,
    )
    name: Optional[String] = Field(
        description="Human-readable label",
        default=None,
    )
    name_ext: Optional[Element] = Field(
        description="Placeholder element for name extensions",
        default=None,
        alias="_name",
    )
    subject: Optional[List[Reference]] = Field(
        description="The entity that caused the expenses",
        default=None,
    )
    servicePeriod: Optional[Period] = Field(
        description="Transaction window",
        default=None,
    )
    coverage: Optional[List[AccountCoverage]] = Field(
        description="The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account",
        default=None,
    )
    owner: Optional[Reference] = Field(
        description="Entity managing the Account",
        default=None,
    )
    description: Optional[Markdown] = Field(
        description="Explanation of purpose/use",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    guarantor: Optional[List[AccountGuarantor]] = Field(
        description="The parties ultimately responsible for balancing the Account",
        default=None,
    )
    diagnosis: Optional[List[AccountDiagnosis]] = Field(
        description="The list of diagnoses relevant to this account",
        default=None,
    )
    procedure: Optional[List[AccountProcedure]] = Field(
        description="The list of procedures relevant to this account",
        default=None,
    )
    relatedAccount: Optional[List[AccountRelatedAccount]] = Field(
        description="Other associated accounts related to this account",
        default=None,
    )
    currency: Optional[CodeableConcept] = Field(
        description="The base or default currency",
        default=None,
    )
    balance: Optional[List[AccountBalance]] = Field(
        description="Calculated account balance(s)",
        default=None,
    )
    calculatedAt: Optional[Instant] = Field(
        description="Time the balance amount was calculated",
        default=None,
    )
    calculatedAt_ext: Optional[Element] = Field(
        description="Placeholder element for calculatedAt extensions",
        default=None,
        alias="_calculatedAt",
    )
    resourceType: Literal['Account'] = Field(
        description=None,
        default="Account",
    )
    @field_validator(*('calculatedAt', 'balance', 'currency', 'relatedAccount', 'procedure', 'diagnosis', 'guarantor', 'description', 'owner', 'coverage', 'servicePeriod', 'subject', 'name', 'type', 'billingStatus', 'status', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('diagnosis',), mode="after", check_fields=None)
    @classmethod
    def FHIR_act_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="condition.reference.empty().not() implies dateOfDiagnosis.empty()",
            human="The dateOfDiagnosis is not valid when using a reference to a diagnosis",
            key="act-1",
            severity="error",
        )

    @field_validator(*('procedure',), mode="after", check_fields=None)
    @classmethod
    def FHIR_act_2_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="code.reference.empty().not() implies dateOfService.empty()",
            human="The dateOfService is not valid when using a reference to a procedure",
            key="act-2",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


