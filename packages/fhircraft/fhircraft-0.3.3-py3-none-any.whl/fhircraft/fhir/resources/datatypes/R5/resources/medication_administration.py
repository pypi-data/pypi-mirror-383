# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:25:46.468581.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,DateTime,Boolean
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,CodeableConcept,CodeableReference,Period,Timing,BackboneElement,Annotation,Quantity,Ratio

 
class MedicationAdministrationPerformer(BackboneElement):
    """
    The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
    """
    function: Optional[CodeableConcept] = Field(
        description="Type of performance",
        default=None,
    )
    actor: Optional[CodeableReference] = Field(
        description="Who or what performed the medication administration",
        default=None,
    )
    @field_validator(*('actor', 'function', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MedicationAdministrationDosage(BackboneElement):
    """
    Describes the medication dosage information details e.g. dose, rate, site, route, etc.
    """
    text: Optional[String] = Field(
        description="Free text dosage instructions e.g. SIG",
        default=None,
    )
    text_ext: Optional[Element] = Field(
        description="Placeholder element for text extensions",
        default=None,
        alias="_text",
    )
    site: Optional[CodeableConcept] = Field(
        description="Body site administered to",
        default=None,
    )
    route: Optional[CodeableConcept] = Field(
        description="Path of substance into body",
        default=None,
    )
    method: Optional[CodeableConcept] = Field(
        description="How drug was administered",
        default=None,
    )
    dose: Optional[Quantity] = Field(
        description="Amount of medication per dose",
        default=None,
    )
    rateRatio: Optional[Ratio] = Field(
        description="Dose quantity per unit of time",
        default=None,
    )
    rateQuantity: Optional[Quantity] = Field(
        description="Dose quantity per unit of time",
        default=None,
    )
    @property 
    def rate(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="rate",
        )
    @field_validator(*('dose', 'method', 'route', 'site', 'text', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def rate_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Ratio, Quantity],
            field_name_base="rate",
            required=False,
        )

 
class MedicationAdministration(FHIRBaseModel):
    """
    Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion. Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. This event can also be used to record waste using a status of not-done and the appropriate statusReason.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/MedicationAdministration']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="External identifier",
        default=None,
    )
    basedOn: Optional[List[Reference]] = Field(
        description="Plan this is fulfilled by this administration",
        default=None,
    )
    partOf: Optional[List[Reference]] = Field(
        description="Part of referenced event",
        default=None,
    )
    status: Optional[Code] = Field(
        description="in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    statusReason: Optional[List[CodeableConcept]] = Field(
        description="Reason administration not performed",
        default=None,
    )
    category: Optional[List[CodeableConcept]] = Field(
        description="Type of medication administration",
        default=None,
    )
    medication: Optional[CodeableReference] = Field(
        description="What was administered",
        default=None,
    )
    subject: Optional[Reference] = Field(
        description="Who received medication",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Encounter administered as part of",
        default=None,
    )
    supportingInformation: Optional[List[Reference]] = Field(
        description="Additional information to support administration",
        default=None,
    )
    occurenceDateTime: Optional[DateTime] = Field(
        description="Specific date/time or interval of time during which the administration took place (or did not take place)",
        default=None,
    )
    occurencePeriod: Optional[Period] = Field(
        description="Specific date/time or interval of time during which the administration took place (or did not take place)",
        default=None,
    )
    occurenceTiming: Optional[Timing] = Field(
        description="Specific date/time or interval of time during which the administration took place (or did not take place)",
        default=None,
    )
    recorded: Optional[DateTime] = Field(
        description="When the MedicationAdministration was first captured in the subject\u0027s record",
        default=None,
    )
    recorded_ext: Optional[Element] = Field(
        description="Placeholder element for recorded extensions",
        default=None,
        alias="_recorded",
    )
    isSubPotent: Optional[Boolean] = Field(
        description="Full dose was not administered",
        default=None,
    )
    isSubPotent_ext: Optional[Element] = Field(
        description="Placeholder element for isSubPotent extensions",
        default=None,
        alias="_isSubPotent",
    )
    subPotentReason: Optional[List[CodeableConcept]] = Field(
        description="Reason full dose was not administered",
        default=None,
    )
    performer: Optional[List[MedicationAdministrationPerformer]] = Field(
        description="Who or what performed the medication administration and what type of performance they did",
        default=None,
    )
    reason: Optional[List[CodeableReference]] = Field(
        description="Concept, condition or observation that supports why the medication was administered",
        default=None,
    )
    request: Optional[Reference] = Field(
        description="Request administration performed against",
        default=None,
    )
    device: Optional[List[CodeableReference]] = Field(
        description="Device used to administer",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Information about the administration",
        default=None,
    )
    dosage: Optional[MedicationAdministrationDosage] = Field(
        description="Details of how medication was taken",
        default=None,
    )
    eventHistory: Optional[List[Reference]] = Field(
        description="A list of events of interest in the lifecycle",
        default=None,
    )
    resourceType: Literal['MedicationAdministration'] = Field(
        description=None,
        default="MedicationAdministration",
    )
    @property 
    def occurence(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="occurence",
        )
    @field_validator(*('eventHistory', 'dosage', 'note', 'device', 'request', 'reason', 'performer', 'subPotentReason', 'isSubPotent', 'recorded', 'supportingInformation', 'encounter', 'subject', 'medication', 'category', 'statusReason', 'status', 'partOf', 'basedOn', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('dosage',), mode="after", check_fields=None)
    @classmethod
    def FHIR_mad_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="(dose.exists() or rate.exists() or text.exists())",
            human="If dosage attribute is present then SHALL have at least one of dosage.text or dosage.dose or dosage.rate[x]",
            key="mad-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def occurence_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period, Timing],
            field_name_base="occurence",
            required=True,
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


