# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:25:47.491286.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,DateTime,Markdown,Boolean
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,CodeableReference,CodeableConcept,BackboneElement,Quantity,Annotation,Dosage

 
class MedicationDispensePerformer(BackboneElement):
    """
    Indicates who or what performed the event.
    """
    function: Optional[CodeableConcept] = Field(
        description="Who performed the dispense and what they did",
        default=None,
    )
    actor: Optional[Reference] = Field(
        description="Individual who was performing",
        default=None,
    )
    @field_validator(*('actor', 'function', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MedicationDispenseSubstitution(BackboneElement):
    """
    Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
    """
    wasSubstituted: Optional[Boolean] = Field(
        description="Whether a substitution was or was not performed on the dispense",
        default=None,
    )
    wasSubstituted_ext: Optional[Element] = Field(
        description="Placeholder element for wasSubstituted extensions",
        default=None,
        alias="_wasSubstituted",
    )
    type: Optional[CodeableConcept] = Field(
        description="Code signifying whether a different drug was dispensed from what was prescribed",
        default=None,
    )
    reason: Optional[List[CodeableConcept]] = Field(
        description="Why was substitution made",
        default=None,
    )
    responsibleParty: Optional[Reference] = Field(
        description="Who is responsible for the substitution",
        default=None,
    )
    @field_validator(*('responsibleParty', 'reason', 'type', 'wasSubstituted', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class MedicationDispense(FHIRBaseModel):
    """
    Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/MedicationDispense']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="External identifier",
        default=None,
    )
    basedOn: Optional[List[Reference]] = Field(
        description="Plan that is fulfilled by this dispense",
        default=None,
    )
    partOf: Optional[List[Reference]] = Field(
        description="Event that dispense is part of",
        default=None,
    )
    status: Optional[Code] = Field(
        description="preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    notPerformedReason: Optional[CodeableReference] = Field(
        description="Why a dispense was not performed",
        default=None,
    )
    statusChanged: Optional[DateTime] = Field(
        description="When the status changed",
        default=None,
    )
    statusChanged_ext: Optional[Element] = Field(
        description="Placeholder element for statusChanged extensions",
        default=None,
        alias="_statusChanged",
    )
    category: Optional[List[CodeableConcept]] = Field(
        description="Type of medication dispense",
        default=None,
    )
    medication: Optional[CodeableReference] = Field(
        description="What medication was supplied",
        default=None,
    )
    subject: Optional[Reference] = Field(
        description="Who the dispense is for",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Encounter associated with event",
        default=None,
    )
    supportingInformation: Optional[List[Reference]] = Field(
        description="Information that supports the dispensing of the medication",
        default=None,
    )
    performer: Optional[List[MedicationDispensePerformer]] = Field(
        description="Who performed event",
        default=None,
    )
    location: Optional[Reference] = Field(
        description="Where the dispense occurred",
        default=None,
    )
    authorizingPrescription: Optional[List[Reference]] = Field(
        description="Medication order that authorizes the dispense",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="Trial fill, partial fill, emergency fill, etc",
        default=None,
    )
    quantity: Optional[Quantity] = Field(
        description="Amount dispensed",
        default=None,
    )
    daysSupply: Optional[Quantity] = Field(
        description="Amount of medication expressed as a timing amount",
        default=None,
    )
    recorded: Optional[DateTime] = Field(
        description="When the recording of the dispense started",
        default=None,
    )
    recorded_ext: Optional[Element] = Field(
        description="Placeholder element for recorded extensions",
        default=None,
        alias="_recorded",
    )
    whenPrepared: Optional[DateTime] = Field(
        description="When product was packaged and reviewed",
        default=None,
    )
    whenPrepared_ext: Optional[Element] = Field(
        description="Placeholder element for whenPrepared extensions",
        default=None,
        alias="_whenPrepared",
    )
    whenHandedOver: Optional[DateTime] = Field(
        description="When product was given out",
        default=None,
    )
    whenHandedOver_ext: Optional[Element] = Field(
        description="Placeholder element for whenHandedOver extensions",
        default=None,
        alias="_whenHandedOver",
    )
    destination: Optional[Reference] = Field(
        description="Where the medication was/will be sent",
        default=None,
    )
    receiver: Optional[List[Reference]] = Field(
        description="Who collected the medication or where the medication was delivered",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Information about the dispense",
        default=None,
    )
    renderedDosageInstruction: Optional[Markdown] = Field(
        description="Full representation of the dosage instructions",
        default=None,
    )
    renderedDosageInstruction_ext: Optional[Element] = Field(
        description="Placeholder element for renderedDosageInstruction extensions",
        default=None,
        alias="_renderedDosageInstruction",
    )
    dosageInstruction: Optional[List[Dosage]] = Field(
        description="How the medication is to be used by the patient or administered by the caregiver",
        default=None,
    )
    substitution: Optional[MedicationDispenseSubstitution] = Field(
        description="Whether a substitution was performed on the dispense",
        default=None,
    )
    eventHistory: Optional[List[Reference]] = Field(
        description="A list of relevant lifecycle events",
        default=None,
    )
    resourceType: Literal['MedicationDispense'] = Field(
        description=None,
        default="MedicationDispense",
    )
    @field_validator(*('eventHistory', 'substitution', 'dosageInstruction', 'renderedDosageInstruction', 'note', 'receiver', 'destination', 'whenHandedOver', 'whenPrepared', 'recorded', 'daysSupply', 'quantity', 'type', 'authorizingPrescription', 'location', 'performer', 'supportingInformation', 'encounter', 'subject', 'medication', 'category', 'statusChanged', 'notPerformedReason', 'status', 'partOf', 'basedOn', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )

    @model_validator(mode="after")
    def FHIR_mdd_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="whenHandedOver.empty() or whenPrepared.empty() or whenHandedOver >= whenPrepared",
            human="whenHandedOver cannot be before whenPrepared",
            key="mdd-1",
            severity="error",
        )


