# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:26:01.793806.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Canonical,DateTime,Instant,Boolean,Integer,Time,Markdown
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,BackboneElement,CodeableConcept,Period,Timing,Quantity,Range,Ratio,SampledData,Attachment,Annotation

 
class ObservationTriggeredBy(BackboneElement):
    """
    Identifies the observation(s) that triggered the performance of this observation.
    """
    observation: Optional[Reference] = Field(
        description="Triggering observation",
        default=None,
    )
    type: Optional[Code] = Field(
        description="reflex | repeat | re-run",
        default=None,
    )
    type_ext: Optional[Element] = Field(
        description="Placeholder element for type extensions",
        default=None,
        alias="_type",
    )
    reason: Optional[String] = Field(
        description="Reason that the observation was triggered",
        default=None,
    )
    reason_ext: Optional[Element] = Field(
        description="Placeholder element for reason extensions",
        default=None,
        alias="_reason",
    )
    @field_validator(*('reason', 'type', 'observation', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class ObservationReferenceRange(BackboneElement):
    """
    Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
    """
    low: Optional[Quantity] = Field(
        description="Low Range, if relevant",
        default=None,
    )
    high: Optional[Quantity] = Field(
        description="High Range, if relevant",
        default=None,
    )
    normalValue: Optional[CodeableConcept] = Field(
        description="Normal value, if relevant",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="Reference range qualifier",
        default=None,
    )
    appliesTo: Optional[List[CodeableConcept]] = Field(
        description="Reference range population",
        default=None,
    )
    age: Optional[Range] = Field(
        description="Applicable age range, if relevant",
        default=None,
    )
    text: Optional[Markdown] = Field(
        description="Text based reference range in an observation",
        default=None,
    )
    text_ext: Optional[Element] = Field(
        description="Placeholder element for text extensions",
        default=None,
        alias="_text",
    )
    @field_validator(*('text', 'age', 'appliesTo', 'type', 'normalValue', 'high', 'low', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class ObservationComponentReferenceRange(BackboneElement):
    """
    Guidance on how to interpret the value by comparison to a normal or recommended range.
    """
    low: Optional[Quantity] = Field(
        description="Low Range, if relevant",
        default=None,
    )
    high: Optional[Quantity] = Field(
        description="High Range, if relevant",
        default=None,
    )
    normalValue: Optional[CodeableConcept] = Field(
        description="Normal value, if relevant",
        default=None,
    )
    type: Optional[CodeableConcept] = Field(
        description="Reference range qualifier",
        default=None,
    )
    appliesTo: Optional[List[CodeableConcept]] = Field(
        description="Reference range population",
        default=None,
    )
    age: Optional[Range] = Field(
        description="Applicable age range, if relevant",
        default=None,
    )
    text: Optional[Markdown] = Field(
        description="Text based reference range in an observation",
        default=None,
    )
    text_ext: Optional[Element] = Field(
        description="Placeholder element for text extensions",
        default=None,
        alias="_text",
    )
    @field_validator(*('text', 'age', 'appliesTo', 'type', 'normalValue', 'high', 'low', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class ObservationComponent(BackboneElement):
    """
    Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
    """
    code: Optional[CodeableConcept] = Field(
        description="Type of component observation (code / type)",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Actual component result",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Actual component result",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Actual component result",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Actual component result",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Actual component result",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Actual component result",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Actual component result",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Actual component result",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Actual component result",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Actual component result",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Actual component result",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Actual component result",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Actual component result",
        default=None,
    )
    dataAbsentReason: Optional[CodeableConcept] = Field(
        description="Why the component result is missing",
        default=None,
    )
    interpretation: Optional[List[CodeableConcept]] = Field(
        description="High, low, normal, etc",
        default=None,
    )
    referenceRange: Optional[List[ObservationComponentReferenceRange]] = Field(
        description="Provides guide for interpretation of component result",
        default=None,
    )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @field_validator(*('referenceRange', 'interpretation', 'dataAbsentReason', 'code', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Quantity, CodeableConcept, String, Boolean, Integer, Range, Ratio, SampledData, Time, DateTime, Period, Attachment, Reference],
            field_name_base="value",
            required=False,
        )

 
class Observation(FHIRBaseModel):
    """
    Measurements and simple assertions made about a patient, device or other subject.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/Observation']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Business Identifier for observation",
        default=None,
    )
    instantiatesCanonical: Optional[Canonical] = Field(
        description="Instantiates FHIR ObservationDefinition",
        default=None,
    )
    instantiatesReference: Optional[Reference] = Field(
        description="Instantiates FHIR ObservationDefinition",
        default=None,
    )
    basedOn: Optional[List[Reference]] = Field(
        description="Fulfills plan, proposal or order",
        default=None,
    )
    triggeredBy: Optional[List[ObservationTriggeredBy]] = Field(
        description="Triggering observation(s)",
        default=None,
    )
    partOf: Optional[List[Reference]] = Field(
        description="Part of referenced event",
        default=None,
    )
    status: Optional[Code] = Field(
        description="registered | preliminary | final | amended +",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    category: Optional[List[CodeableConcept]] = Field(
        description="Classification of  type of observation",
        default=None,
    )
    code: Optional[CodeableConcept] = Field(
        description="Type of observation (code / type)",
        default=None,
    )
    subject: Optional[Reference] = Field(
        description="Who and/or what the observation is about",
        default=None,
    )
    focus: Optional[List[Reference]] = Field(
        description="What the observation is about, when it is not about the subject of record",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Healthcare event during which this observation is made",
        default=None,
    )
    effectiveDateTime: Optional[DateTime] = Field(
        description="Clinically relevant time/time-period for observation",
        default=None,
    )
    effectivePeriod: Optional[Period] = Field(
        description="Clinically relevant time/time-period for observation",
        default=None,
    )
    effectiveTiming: Optional[Timing] = Field(
        description="Clinically relevant time/time-period for observation",
        default=None,
    )
    effectiveInstant: Optional[Instant] = Field(
        description="Clinically relevant time/time-period for observation",
        default=None,
    )
    issued: Optional[Instant] = Field(
        description="Date/Time this version was made available",
        default=None,
    )
    issued_ext: Optional[Element] = Field(
        description="Placeholder element for issued extensions",
        default=None,
        alias="_issued",
    )
    performer: Optional[List[Reference]] = Field(
        description="Who is responsible for the observation",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Actual result",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Actual result",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Actual result",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Actual result",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Actual result",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Actual result",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Actual result",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Actual result",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Actual result",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Actual result",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Actual result",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Actual result",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Actual result",
        default=None,
    )
    dataAbsentReason: Optional[CodeableConcept] = Field(
        description="Why the result is missing",
        default=None,
    )
    interpretation: Optional[List[CodeableConcept]] = Field(
        description="High, low, normal, etc",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Comments about the observation",
        default=None,
    )
    bodySite: Optional[CodeableConcept] = Field(
        description="Observed body part",
        default=None,
    )
    bodyStructure: Optional[Reference] = Field(
        description="Observed body structure",
        default=None,
    )
    method: Optional[CodeableConcept] = Field(
        description="How it was done",
        default=None,
    )
    specimen: Optional[Reference] = Field(
        description="Specimen used for this observation",
        default=None,
    )
    device: Optional[Reference] = Field(
        description="A reference to the device that generates the measurements or the device settings for the device",
        default=None,
    )
    referenceRange: Optional[List[ObservationReferenceRange]] = Field(
        description="Provides guide for interpretation",
        default=None,
    )
    hasMember: Optional[List[Reference]] = Field(
        description="Related resource that belongs to the Observation group",
        default=None,
    )
    derivedFrom: Optional[List[Reference]] = Field(
        description="Related resource from which the observation is made",
        default=None,
    )
    component: Optional[List[ObservationComponent]] = Field(
        description="Component results",
        default=None,
    )
    resourceType: Literal['Observation'] = Field(
        description=None,
        default="Observation",
    )
    @property 
    def instantiates(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="instantiates",
        )
    @property 
    def effective(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="effective",
        )
    @property 
    def value(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="value",
        )
    @field_validator(*('component', 'derivedFrom', 'hasMember', 'referenceRange', 'device', 'specimen', 'method', 'bodyStructure', 'bodySite', 'note', 'interpretation', 'dataAbsentReason', 'performer', 'issued', 'encounter', 'focus', 'subject', 'code', 'category', 'status', 'partOf', 'triggeredBy', 'basedOn', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('specimen',), mode="after", check_fields=None)
    @classmethod
    def FHIR_obs_9_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="(reference.resolve().exists() and reference.resolve() is Group) implies reference.resolve().member.entity.resolve().all($this is Specimen)",
            human="If Observation.specimen is a reference to Group, the group can only have specimens",
            key="obs-9",
            severity="error",
        )

    @field_validator(*('referenceRange',), mode="after", check_fields=None)
    @classmethod
    def FHIR_obs_3_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="low.exists() or high.exists() or text.exists()",
            human="Must have at least a low or a high or text",
            key="obs-3",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def instantiates_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Canonical, Reference],
            field_name_base="instantiates",
            required=False,
        )

    @model_validator(mode="after")
    def effective_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period, Timing, Instant],
            field_name_base="effective",
            required=False,
        )

    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[Quantity, CodeableConcept, String, Boolean, Integer, Range, Ratio, SampledData, Time, DateTime, Period, Attachment, Reference],
            field_name_base="value",
            required=False,
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )

    @model_validator(mode="after")
    def FHIR_obs_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="dataAbsentReason.empty() or value.empty()",
            human="dataAbsentReason SHALL only be present if Observation.value[x] is not present",
            key="obs-6",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_obs_7_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="value.empty() or component.code.where(coding.intersect(%resource.code.coding).exists()).empty()",
            human="If Observation.component.code is the same as Observation.code, then Observation.value SHALL NOT be present (the Observation.component.value[x] holds the value).",
            key="obs-7",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_obs_8_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="bodySite.exists() implies bodyStructure.empty()",
            human="bodyStructure SHALL only be present if Observation.bodySite is not present",
            key="obs-8",
            severity="error",
        )


