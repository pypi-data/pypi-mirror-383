# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:26:33.654308.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Boolean,DateTime,Markdown,Id,Canonical
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Coding,ContactDetail,UsageContext,CodeableConcept,BackboneElement,ElementDefinition

 
class StructureDefinitionMapping(BackboneElement):
    """
    An external specification that the content is mapped to.
    """
    identity: Optional[Id] = Field(
        description="Internal id when this mapping is used",
        default=None,
    )
    identity_ext: Optional[Element] = Field(
        description="Placeholder element for identity extensions",
        default=None,
        alias="_identity",
    )
    uri: Optional[Uri] = Field(
        description="Identifies what this mapping refers to",
        default=None,
    )
    uri_ext: Optional[Element] = Field(
        description="Placeholder element for uri extensions",
        default=None,
        alias="_uri",
    )
    name: Optional[String] = Field(
        description="Names what this mapping refers to",
        default=None,
    )
    name_ext: Optional[Element] = Field(
        description="Placeholder element for name extensions",
        default=None,
        alias="_name",
    )
    comment: Optional[String] = Field(
        description="Versions, Issues, Scope limitations etc",
        default=None,
    )
    comment_ext: Optional[Element] = Field(
        description="Placeholder element for comment extensions",
        default=None,
        alias="_comment",
    )
    @field_validator(*('comment', 'name', 'uri', 'identity', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class StructureDefinitionContext(BackboneElement):
    """
    Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context).
    """
    type: Optional[Code] = Field(
        description="fhirpath | element | extension",
        default=None,
    )
    type_ext: Optional[Element] = Field(
        description="Placeholder element for type extensions",
        default=None,
        alias="_type",
    )
    expression: Optional[String] = Field(
        description="Where the extension can be used in instances",
        default=None,
    )
    expression_ext: Optional[Element] = Field(
        description="Placeholder element for expression extensions",
        default=None,
        alias="_expression",
    )
    @field_validator(*('expression', 'type', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class StructureDefinitionSnapshot(BackboneElement):
    """
    A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
    """
    element: Optional[List[ElementDefinition]] = Field(
        description="Definition of elements in the resource (if no StructureDefinition)",
        default=None,
    )
    @field_validator(*('element', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )


    @field_validator(*('element',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_10_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="binding.empty() or binding.valueSet.exists() or binding.description.exists()",
            human="provide either a binding reference or a description (or both)",
            key="sdf-10",
            severity="error",
        )

    @field_validator(*('element',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_28_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="slicing.exists().not() or (slicing.discriminator.exists() or slicing.description.exists())",
            human="If there are no discriminators, there must be a definition",
            key="sdf-28",
            severity="error",
        )


 
class StructureDefinitionDifferential(BackboneElement):
    """
    A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
    """
    element: Optional[List[ElementDefinition]] = Field(
        description="Definition of elements in the resource (if no StructureDefinition)",
        default=None,
    )
    @field_validator(*('element', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class StructureDefinition(FHIRBaseModel):
    """
    A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/StructureDefinition']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    url: Optional[Uri] = Field(
        description="Canonical identifier for this structure definition, represented as a URI (globally unique)",
        default=None,
    )
    url_ext: Optional[Element] = Field(
        description="Placeholder element for url extensions",
        default=None,
        alias="_url",
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Additional identifier for the structure definition",
        default=None,
    )
    version: Optional[String] = Field(
        description="Business version of the structure definition",
        default=None,
    )
    version_ext: Optional[Element] = Field(
        description="Placeholder element for version extensions",
        default=None,
        alias="_version",
    )
    versionAlgorithmString: Optional[String] = Field(
        description="How to compare versions",
        default=None,
    )
    versionAlgorithmCoding: Optional[Coding] = Field(
        description="How to compare versions",
        default=None,
    )
    name: Optional[String] = Field(
        description="Name for this structure definition (computer friendly)",
        default=None,
    )
    name_ext: Optional[Element] = Field(
        description="Placeholder element for name extensions",
        default=None,
        alias="_name",
    )
    title: Optional[String] = Field(
        description="Name for this structure definition (human friendly)",
        default=None,
    )
    title_ext: Optional[Element] = Field(
        description="Placeholder element for title extensions",
        default=None,
        alias="_title",
    )
    status: Optional[Code] = Field(
        description="draft | active | retired | unknown",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    experimental: Optional[Boolean] = Field(
        description="For testing purposes, not real usage",
        default=None,
    )
    experimental_ext: Optional[Element] = Field(
        description="Placeholder element for experimental extensions",
        default=None,
        alias="_experimental",
    )
    date: Optional[DateTime] = Field(
        description="Date last changed",
        default=None,
    )
    date_ext: Optional[Element] = Field(
        description="Placeholder element for date extensions",
        default=None,
        alias="_date",
    )
    publisher: Optional[String] = Field(
        description="Name of the publisher/steward (organization or individual)",
        default=None,
    )
    publisher_ext: Optional[Element] = Field(
        description="Placeholder element for publisher extensions",
        default=None,
        alias="_publisher",
    )
    contact: Optional[List[ContactDetail]] = Field(
        description="Contact details for the publisher",
        default=None,
    )
    description: Optional[Markdown] = Field(
        description="Natural language description of the structure definition",
        default=None,
    )
    description_ext: Optional[Element] = Field(
        description="Placeholder element for description extensions",
        default=None,
        alias="_description",
    )
    useContext: Optional[List[UsageContext]] = Field(
        description="The context that the content is intended to support",
        default=None,
    )
    jurisdiction: Optional[List[CodeableConcept]] = Field(
        description="Intended jurisdiction for structure definition (if applicable)",
        default=None,
    )
    purpose: Optional[Markdown] = Field(
        description="Why this structure definition is defined",
        default=None,
    )
    purpose_ext: Optional[Element] = Field(
        description="Placeholder element for purpose extensions",
        default=None,
        alias="_purpose",
    )
    copyright: Optional[Markdown] = Field(
        description="Use and/or publishing restrictions",
        default=None,
    )
    copyright_ext: Optional[Element] = Field(
        description="Placeholder element for copyright extensions",
        default=None,
        alias="_copyright",
    )
    copyrightLabel: Optional[String] = Field(
        description="Copyright holder and year(s)",
        default=None,
    )
    copyrightLabel_ext: Optional[Element] = Field(
        description="Placeholder element for copyrightLabel extensions",
        default=None,
        alias="_copyrightLabel",
    )
    keyword: Optional[List[Coding]] = Field(
        description="Assist with indexing and finding",
        default=None,
    )
    fhirVersion: Optional[Code] = Field(
        description="FHIR Version this StructureDefinition targets",
        default=None,
    )
    fhirVersion_ext: Optional[Element] = Field(
        description="Placeholder element for fhirVersion extensions",
        default=None,
        alias="_fhirVersion",
    )
    mapping: Optional[List[StructureDefinitionMapping]] = Field(
        description="External specification that the content is mapped to",
        default=None,
    )
    kind: Optional[Code] = Field(
        description="primitive-type | complex-type | resource | logical",
        default=None,
    )
    kind_ext: Optional[Element] = Field(
        description="Placeholder element for kind extensions",
        default=None,
        alias="_kind",
    )
    abstract: Optional[Boolean] = Field(
        description="Whether the structure is abstract",
        default=None,
    )
    abstract_ext: Optional[Element] = Field(
        description="Placeholder element for abstract extensions",
        default=None,
        alias="_abstract",
    )
    context: Optional[List[StructureDefinitionContext]] = Field(
        description="If an extension, where it can be used in instances",
        default=None,
    )
    contextInvariant: Optional[List[String]] = Field(
        description="FHIRPath invariants - when the extension can be used",
        default=None,
    )
    contextInvariant_ext: Optional[Element] = Field(
        description="Placeholder element for contextInvariant extensions",
        default=None,
        alias="_contextInvariant",
    )
    type: Optional[Uri] = Field(
        description="Type defined or constrained by this structure",
        default=None,
    )
    type_ext: Optional[Element] = Field(
        description="Placeholder element for type extensions",
        default=None,
        alias="_type",
    )
    baseDefinition: Optional[Canonical] = Field(
        description="Definition that this type is constrained/specialized from",
        default=None,
    )
    baseDefinition_ext: Optional[Element] = Field(
        description="Placeholder element for baseDefinition extensions",
        default=None,
        alias="_baseDefinition",
    )
    derivation: Optional[Code] = Field(
        description="specialization | constraint - How relates to base definition",
        default=None,
    )
    derivation_ext: Optional[Element] = Field(
        description="Placeholder element for derivation extensions",
        default=None,
        alias="_derivation",
    )
    snapshot: Optional[StructureDefinitionSnapshot] = Field(
        description="Snapshot view of the structure",
        default=None,
    )
    differential: Optional[StructureDefinitionDifferential] = Field(
        description="Differential view of the structure",
        default=None,
    )
    resourceType: Literal['StructureDefinition'] = Field(
        description=None,
        default="StructureDefinition",
    )
    @property 
    def versionAlgorithm(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="versionAlgorithm",
        )
    @field_validator(*('differential', 'snapshot', 'derivation', 'baseDefinition', 'type', 'contextInvariant', 'context', 'abstract', 'kind', 'mapping', 'fhirVersion', 'keyword', 'copyrightLabel', 'copyright', 'purpose', 'jurisdiction', 'useContext', 'description', 'contact', 'publisher', 'date', 'experimental', 'status', 'title', 'name', 'version', 'identifier', 'url', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('url',), mode="after", check_fields=None)
    @classmethod
    def FHIR_cnl_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="exists() implies matches('^[^|# ]+$')",
            human="URL should not contain | or # - these characters make processing canonical references problematic",
            key="cnl-1",
            severity="warning",
        )

    @field_validator(*('mapping',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_2_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="name.exists() or uri.exists()",
            human="Must have at least a name or a uri (or both)",
            key="sdf-2",
            severity="error",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_3_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="%resource.kind = 'logical' or element.all(definition.exists() and min.exists() and max.exists())",
            human="Each element definition in a snapshot must have a formal definition and cardinalities, unless model is a logical model",
            key="sdf-3",
            severity="error",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_8_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="(%resource.kind = 'logical' or element.first().path = %resource.type) and element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.'))",
            human="All snapshot elements must start with the StructureDefinition's specified type for non-logical models, or with the same type name for logical models",
            key="sdf-8",
            severity="error",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_24_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="element.where(type.where(code='Reference').exists() and path.endsWith('.reference') and type.targetProfile.exists() and (path.substring(0,$this.path.length()-10) in %context.element.where(type.where(code='CodeableReference').exists()).path)).exists().not()",
            human="For CodeableReference elements, target profiles must be listed on the CodeableReference, not the CodeableReference.reference",
            key="sdf-24",
            severity="error",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_25_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="element.where(type.where(code='CodeableConcept').exists() and path.endsWith('.concept') and binding.exists() and (path.substring(0,$this.path.length()-8) in %context.element.where(type.where(code='CodeableReference').exists()).path)).exists().not()",
            human="For CodeableReference elements, bindings must be listed on the CodeableReference, not the CodeableReference.concept",
            key="sdf-25",
            severity="error",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_26_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="$this.where(element[0].mustSupport='true').exists().not()",
            human="The root element of a profile should not have mustSupport = true",
            key="sdf-26",
            severity="warning",
        )

    @field_validator(*('snapshot',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_8b_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="element.all(base.exists())",
            human="All snapshot elements must have a base definition",
            key="sdf-8b",
            severity="error",
        )

    @field_validator(*('differential',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_20_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="element.where(path.contains('.').not()).slicing.empty()",
            human="No slicing on the root element",
            key="sdf-20",
            severity="error",
        )

    @field_validator(*('differential',), mode="after", check_fields=None)
    @classmethod
    def FHIR_sdf_8a_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="(%resource.kind = 'logical' or element.first().path.startsWith(%resource.type)) and (element.tail().empty() or  element.tail().all(path.startsWith(%resource.differential.element.first().path.replaceMatches('\\..*','')&'.')))",
            human="In any differential, all the elements must start with the StructureDefinition's specified type for non-logical models, or with the same type name for logical models",
            key="sdf-8a",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def versionAlgorithm_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[String, Coding],
            field_name_base="versionAlgorithm",
            required=False,
        )

    @model_validator(mode="after")
    def FHIR_cnl_0_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="name.exists() implies name.matches('^[A-Z]([A-Za-z0-9_]){1,254}$')",
            human="Name should be usable as an identifier for the module by machine processing applications such as code generation",
            key="cnl-0",
            severity="warning",
        )

    @model_validator(mode="after")
    def FHIR_sdf_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="derivation = 'constraint' or snapshot.element.select(path).isDistinct()",
            human="Element paths must be unique unless the structure is a constraint",
            key="sdf-1",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="abstract = true or baseDefinition.exists()",
            human="If the structure is not abstract, then there SHALL be a baseDefinition",
            key="sdf-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type != 'Extension' or derivation = 'specialization' or (context.exists())",
            human="If the structure defines an extension then the structure must have context information",
            key="sdf-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="snapshot.exists() or differential.exists()",
            human="A structure must have either a differential, or a snapshot (or both)",
            key="sdf-6",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_11_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="kind != 'logical' implies snapshot.empty() or snapshot.element.first().path = type",
            human="If there's a type, its content must match the path name in the first element of a snapshot",
            key="sdf-11",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_14_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="snapshot.element.all(id.exists()) and differential.element.all(id.exists())",
            human="All element definitions must have an id",
            key="sdf-14",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_15_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="kind!='logical'  implies snapshot.element.first().type.empty()",
            human="The first element in a snapshot has no type unless model is a logical model.",
            key="sdf-15",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_15a_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="(kind!='logical'  and differential.element.first().path.contains('.').not()) implies differential.element.first().type.empty()",
            human="If the first element in a differential has no \".\" in the path and it's not a logical model, it has no type",
            key="sdf-15a",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_9_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="children().element.where(path.contains('.').not()).label.empty() and children().element.where(path.contains('.').not()).code.empty() and children().element.where(path.contains('.').not()).requirements.empty()",
            human="In any snapshot or differential, no label, code or requirements on an element without a \".\" in the path (e.g. the first element)",
            key="sdf-9",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_16_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="snapshot.element.all(id.exists()) and snapshot.element.id.trace('ids').isDistinct()",
            human="All element definitions must have unique ids (snapshot)",
            key="sdf-16",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_17_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="differential.element.all(id.exists()) and differential.element.id.trace('ids').isDistinct()",
            human="All element definitions must have unique ids (diff)",
            key="sdf-17",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_18_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contextInvariant.exists() implies type = 'Extension'",
            human="Context Invariants can only be used for extensions",
            key="sdf-18",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_19_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (differential | snapshot).element.type.code.all(matches('^[a-zA-Z0-9]+$') or matches('^http:\\/\\/hl7\\.org\\/fhirpath\\/System\\.[A-Z][A-Za-z]+$'))",
            human="FHIR Specification models only use FHIR defined types",
            key="sdf-19",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_21_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="differential.element.defaultValue.exists() implies (derivation = 'specialization')",
            human="Default values can only be specified on specializations",
            key="sdf-21",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_22_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (snapshot.element.defaultValue.empty() and differential.element.defaultValue.empty())",
            human="FHIR Specification models never have default values",
            key="sdf-22",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_23_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="(snapshot | differential).element.all(path.contains('.').not() implies sliceName.empty())",
            human="No slice name on root",
            key="sdf-23",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_27_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="baseDefinition.exists() implies derivation.exists()",
            human="If there's a base definition, there must be a derivation ",
            key="sdf-27",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_sdf_29_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="((kind in 'resource' | 'complex-type') and (derivation = 'specialization')) implies differential.element.where((min != 0 and min != 1) or (max != '1' and max != '*')).empty()",
            human="Elements in Resources must have a min cardinality or 0 or 1 and a max cardinality of 1 or *",
            key="sdf-29",
            severity="warning",
        )


