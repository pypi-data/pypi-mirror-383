# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:24:21.200562.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Instant,UnsignedInt,Decimal
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Identifier,BackboneElement,Resource,Signature

 
class BundleLink(BackboneElement):
    """
    A series of links that provide context to this bundle.
    """
    relation: Optional[Code] = Field(
        description="See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1",
        default=None,
    )
    relation_ext: Optional[Element] = Field(
        description="Placeholder element for relation extensions",
        default=None,
        alias="_relation",
    )
    url: Optional[Uri] = Field(
        description="Reference details for the link",
        default=None,
    )
    url_ext: Optional[Element] = Field(
        description="Placeholder element for url extensions",
        default=None,
        alias="_url",
    )
    @field_validator(*('url', 'relation', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BundleEntryLink(BackboneElement):
    """
    A series of links that provide context to this entry.
    """
    relation: Optional[Code] = Field(
        description="See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1",
        default=None,
    )
    relation_ext: Optional[Element] = Field(
        description="Placeholder element for relation extensions",
        default=None,
        alias="_relation",
    )
    url: Optional[Uri] = Field(
        description="Reference details for the link",
        default=None,
    )
    url_ext: Optional[Element] = Field(
        description="Placeholder element for url extensions",
        default=None,
        alias="_url",
    )
    @field_validator(*('url', 'relation', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BundleEntrySearch(BackboneElement):
    """
    Information about the search process that lead to the creation of this entry.
    """
    mode: Optional[Code] = Field(
        description="match | include - why this is in the result set",
        default=None,
    )
    mode_ext: Optional[Element] = Field(
        description="Placeholder element for mode extensions",
        default=None,
        alias="_mode",
    )
    score: Optional[Decimal] = Field(
        description="Search ranking (between 0 and 1)",
        default=None,
    )
    score_ext: Optional[Element] = Field(
        description="Placeholder element for score extensions",
        default=None,
        alias="_score",
    )
    @field_validator(*('score', 'mode', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BundleEntryRequest(BackboneElement):
    """
    Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
    """
    method: Optional[Code] = Field(
        description="GET | HEAD | POST | PUT | DELETE | PATCH",
        default=None,
    )
    method_ext: Optional[Element] = Field(
        description="Placeholder element for method extensions",
        default=None,
        alias="_method",
    )
    url: Optional[Uri] = Field(
        description="URL for HTTP equivalent of this entry",
        default=None,
    )
    url_ext: Optional[Element] = Field(
        description="Placeholder element for url extensions",
        default=None,
        alias="_url",
    )
    ifNoneMatch: Optional[String] = Field(
        description="For managing cache validation",
        default=None,
    )
    ifNoneMatch_ext: Optional[Element] = Field(
        description="Placeholder element for ifNoneMatch extensions",
        default=None,
        alias="_ifNoneMatch",
    )
    ifModifiedSince: Optional[Instant] = Field(
        description="For managing cache currency",
        default=None,
    )
    ifModifiedSince_ext: Optional[Element] = Field(
        description="Placeholder element for ifModifiedSince extensions",
        default=None,
        alias="_ifModifiedSince",
    )
    ifMatch: Optional[String] = Field(
        description="For managing update contention",
        default=None,
    )
    ifMatch_ext: Optional[Element] = Field(
        description="Placeholder element for ifMatch extensions",
        default=None,
        alias="_ifMatch",
    )
    ifNoneExist: Optional[String] = Field(
        description="For conditional creates",
        default=None,
    )
    ifNoneExist_ext: Optional[Element] = Field(
        description="Placeholder element for ifNoneExist extensions",
        default=None,
        alias="_ifNoneExist",
    )
    @field_validator(*('ifNoneExist', 'ifMatch', 'ifModifiedSince', 'ifNoneMatch', 'url', 'method', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BundleEntryResponse(BackboneElement):
    """
    Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
    """
    status: Optional[String] = Field(
        description="Status response code (text optional)",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    location: Optional[Uri] = Field(
        description="The location (if the operation returns a location)",
        default=None,
    )
    location_ext: Optional[Element] = Field(
        description="Placeholder element for location extensions",
        default=None,
        alias="_location",
    )
    etag: Optional[String] = Field(
        description="The Etag for the resource (if relevant)",
        default=None,
    )
    etag_ext: Optional[Element] = Field(
        description="Placeholder element for etag extensions",
        default=None,
        alias="_etag",
    )
    lastModified: Optional[Instant] = Field(
        description="Server\u0027s date time modified",
        default=None,
    )
    lastModified_ext: Optional[Element] = Field(
        description="Placeholder element for lastModified extensions",
        default=None,
        alias="_lastModified",
    )
    outcome: Optional[Resource] = Field(
        description="OperationOutcome with hints and warnings (for batch/transaction)",
        default=None,
    )
    @field_validator(*('lastModified', 'etag', 'location', 'status', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class BundleEntry(BackboneElement):
    """
    An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
    """
    link: Optional[List[BundleEntryLink]] = Field(
        description="Links related to this entry",
        default=None,
    )
    fullUrl: Optional[Uri] = Field(
        description="URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)",
        default=None,
    )
    fullUrl_ext: Optional[Element] = Field(
        description="Placeholder element for fullUrl extensions",
        default=None,
        alias="_fullUrl",
    )
    resource: Optional[Resource] = Field(
        description="A resource in the bundle",
        default=None,
    )
    search: Optional[BundleEntrySearch] = Field(
        description="Search related information",
        default=None,
    )
    request: Optional[BundleEntryRequest] = Field(
        description="Additional execution information (transaction/batch/history)",
        default=None,
    )
    response: Optional[BundleEntryResponse] = Field(
        description="Results of execution (transaction/batch/history)",
        default=None,
    )
    @field_validator(*('response', 'request', 'search', 'fullUrl', 'link', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class Bundle(FHIRBaseModel):
    """
    A container for a collection of resources.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/Bundle']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    identifier: Optional[Identifier] = Field(
        description="Persistent identifier for the bundle",
        default=None,
    )
    type: Optional[Code] = Field(
        description="document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification",
        default=None,
    )
    type_ext: Optional[Element] = Field(
        description="Placeholder element for type extensions",
        default=None,
        alias="_type",
    )
    timestamp: Optional[Instant] = Field(
        description="When the bundle was assembled",
        default=None,
    )
    timestamp_ext: Optional[Element] = Field(
        description="Placeholder element for timestamp extensions",
        default=None,
        alias="_timestamp",
    )
    total: Optional[UnsignedInt] = Field(
        description="If search, the total number of matches",
        default=None,
    )
    total_ext: Optional[Element] = Field(
        description="Placeholder element for total extensions",
        default=None,
        alias="_total",
    )
    link: Optional[List[BundleLink]] = Field(
        description="Links related to this Bundle",
        default=None,
    )
    entry: Optional[List[BundleEntry]] = Field(
        description="Entry in the bundle - will have a resource or information",
        default=None,
    )
    signature: Optional[Signature] = Field(
        description="Digital Signature",
        default=None,
    )
    issues: Optional[Resource] = Field(
        description="Issues with the Bundle",
        default=None,
    )
    resourceType: Literal['Bundle'] = Field(
        description=None,
        default="Bundle",
    )
    @field_validator(*('signature', 'entry', 'link', 'total', 'timestamp', 'type', 'identifier', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('entry',), mode="after", check_fields=None)
    @classmethod
    def FHIR_bdl_5_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="resource.exists() or request.exists() or response.exists()",
            human="must be a resource unless there's a request or response",
            key="bdl-5",
            severity="error",
        )

    @field_validator(*('entry',), mode="after", check_fields=None)
    @classmethod
    def FHIR_bdl_8_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="fullUrl.exists() implies fullUrl.contains('/_history/').not()",
            human="fullUrl cannot be a version specific reference",
            key="bdl-8",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="total.empty() or (type = 'searchset') or (type = 'history')",
            human="total only when a search or history",
            key="bdl-1",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="(type = 'searchset') or entry.search.empty()",
            human="entry.search only when a search",
            key="bdl-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_7_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&iif(resource.meta.versionId.exists(), resource.meta.versionId, '')).isDistinct()",
            human="FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)",
            key="bdl-7",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_9_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'document' implies (identifier.system.exists() and identifier.value.exists())",
            human="A document must have an identifier with a system and a value",
            key="bdl-9",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_10_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'document' implies (timestamp.hasValue())",
            human="A document must have a date",
            key="bdl-10",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_11_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'document' implies entry.first().resource.is(Composition)",
            human="A document must have a Composition as the first resource",
            key="bdl-11",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_12_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'message' implies entry.first().resource.is(MessageHeader)",
            human="A message must have a MessageHeader as the first resource",
            key="bdl-12",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_13_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)",
            human="A subscription-notification must have a SubscriptionStatus as the first resource",
            key="bdl-13",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_14_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'history' implies entry.request.method != 'PATCH'",
            human="entry.request.method PATCH not allowed for history",
            key="bdl-14",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_15_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type='transaction' or type='transaction-response' or type='batch' or type='batch-response' or entry.all(fullUrl.exists() or request.method='POST')",
            human="Bundle resources where type is not transaction, transaction-response, batch, or batch-response or when the request is a POST SHALL have Bundle.entry.fullUrl populated",
            key="bdl-15",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_16_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="issues.exists() implies (issues.issue.severity = 'information' or issues.issue.severity = 'warning')",
            human="Issue.severity for all issues within the OperationOutcome must be either 'information' or 'warning'.",
            key="bdl-16",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_17_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'document' implies issues.empty()",
            human="Use and meaning of issues for documents has not been validated because the content will not be rendered in the document.",
            key="bdl-17",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_18_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'searchset' implies link.where(relation = 'self' and url.exists()).exists()",
            human="Self link is required for searchsets.",
            key="bdl-18",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_3a_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type in ('document' | 'message' | 'searchset' | 'collection') implies entry.all(resource.exists() and request.empty() and response.empty())",
            human="For collections of type document, message, searchset or collection, all entries must contain resources, and not have request or response elements",
            key="bdl-3a",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_3b_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type = 'history' implies entry.all(request.exists() and response.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))",
            human="For collections of type history, all entries must contain request or response elements, and resources if the method is POST, PUT or PATCH",
            key="bdl-3b",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_3c_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type in ('transaction' | 'batch') implies entry.all(request.method.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))",
            human="For collections of type transaction or batch, all entries must contain request elements, and resources if the method is POST, PUT or PATCH",
            key="bdl-3c",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_bdl_3d_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="type in ('transaction-response' | 'batch-response') implies entry.all(response.exists())",
            human="For collections of type transaction-response or batch-response, all entries must contain response elements",
            key="bdl-3d",
            severity="error",
        )


