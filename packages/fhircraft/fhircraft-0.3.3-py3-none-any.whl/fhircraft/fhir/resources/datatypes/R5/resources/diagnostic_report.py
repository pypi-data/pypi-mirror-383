# Code autogenerated by Fhircraft 0.2.0 on 2025-10-03 08:25:03.949046.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel
 
from typing import Optional,List,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,DateTime,Instant,Markdown
 
from fhircraft.fhir.resources.datatypes.R5.complex_types import Element,Meta,Narrative,Resource,Extension,Identifier,Reference,CodeableConcept,Period,Annotation,BackboneElement,Attachment

 
class DiagnosticReportSupportingInfo(BackboneElement):
    """
    This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report.
    """
    type: Optional[CodeableConcept] = Field(
        description="Supporting information role code",
        default=None,
    )
    reference: Optional[Reference] = Field(
        description="Supporting information reference",
        default=None,
    )
    @field_validator(*('reference', 'type', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class DiagnosticReportMedia(BackboneElement):
    """
    A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
    """
    comment: Optional[String] = Field(
        description="Comment about the image or data (e.g. explanation)",
        default=None,
    )
    comment_ext: Optional[Element] = Field(
        description="Placeholder element for comment extensions",
        default=None,
        alias="_comment",
    )
    link: Optional[Reference] = Field(
        description="Reference to the image or data source",
        default=None,
    )
    @field_validator(*('link', 'comment', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



 
class DiagnosticReport(FHIRBaseModel):
    """
    The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='5.0.0', profile=['http://hl7.org/fhir/StructureDefinition/DiagnosticReport']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Extension]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Business identifier for report",
        default=None,
    )
    basedOn: Optional[List[Reference]] = Field(
        description="What was requested",
        default=None,
    )
    status: Optional[Code] = Field(
        description="registered | partial | preliminary | modified | final | amended | corrected | appended | cancelled | entered-in-error | unknown",
        default=None,
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    category: Optional[List[CodeableConcept]] = Field(
        description="Service category",
        default=None,
    )
    code: Optional[CodeableConcept] = Field(
        description="Name/Code for this diagnostic report",
        default=None,
    )
    subject: Optional[Reference] = Field(
        description="The subject of the report - usually, but not always, the patient",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Health care event when test ordered",
        default=None,
    )
    effectiveDateTime: Optional[DateTime] = Field(
        description="Clinically relevant time/time-period for report",
        default=None,
    )
    effectivePeriod: Optional[Period] = Field(
        description="Clinically relevant time/time-period for report",
        default=None,
    )
    issued: Optional[Instant] = Field(
        description="DateTime this version was made",
        default=None,
    )
    issued_ext: Optional[Element] = Field(
        description="Placeholder element for issued extensions",
        default=None,
        alias="_issued",
    )
    performer: Optional[List[Reference]] = Field(
        description="Responsible Diagnostic Service",
        default=None,
    )
    resultsInterpreter: Optional[List[Reference]] = Field(
        description="Primary result interpreter",
        default=None,
    )
    specimen: Optional[List[Reference]] = Field(
        description="Specimens this report is based on",
        default=None,
    )
    result: Optional[List[Reference]] = Field(
        description="Observations",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Comments about the diagnostic report",
        default=None,
    )
    study: Optional[List[Reference]] = Field(
        description="Reference to full details of an analysis associated with the diagnostic report",
        default=None,
    )
    supportingInfo: Optional[List[DiagnosticReportSupportingInfo]] = Field(
        description="Additional information supporting the diagnostic report",
        default=None,
    )
    media: Optional[List[DiagnosticReportMedia]] = Field(
        description="Key images or data associated with this report",
        default=None,
    )
    composition: Optional[Reference] = Field(
        description="Reference to a Composition resource for the DiagnosticReport structure",
        default=None,
    )
    conclusion: Optional[Markdown] = Field(
        description="Clinical conclusion (interpretation) of test results",
        default=None,
    )
    conclusion_ext: Optional[Element] = Field(
        description="Placeholder element for conclusion extensions",
        default=None,
        alias="_conclusion",
    )
    conclusionCode: Optional[List[CodeableConcept]] = Field(
        description="Codes for the clinical conclusion of test results",
        default=None,
    )
    presentedForm: Optional[List[Attachment]] = Field(
        description="Entire report as issued",
        default=None,
    )
    resourceType: Literal['DiagnosticReport'] = Field(
        description=None,
        default="DiagnosticReport",
    )
    @property 
    def effective(self):
        return fhir_validators.get_type_choice_value_by_base(self, 
            base="effective",
        )
    @field_validator(*('presentedForm', 'conclusionCode', 'conclusion', 'composition', 'media', 'supportingInfo', 'study', 'note', 'result', 'specimen', 'resultsInterpreter', 'performer', 'issued', 'encounter', 'subject', 'code', 'category', 'status', 'basedOn', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )

    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return fhir_validators.validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return fhir_validators.validate_contained_resource(cls, value, 
            release="R5",
        )

    @model_validator(mode="after")
    def effective_type_choice_validator(self):
        return fhir_validators.validate_type_choice_element( 
            self,
            field_types=[DateTime, Period],
            field_name_base="effective",
            required=False,
        )

    @model_validator(mode="after")
    def FHIR_dgr_1_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="composition.exists() implies (composition.resolve().section.entry.reference.where(resolve() is Observation) in (result.reference|result.reference.resolve().hasMember.reference))",
            human="When a Composition is referenced in `Diagnostic.composition`, all Observation resources referenced in `Composition.entry` must also be referenced in `Diagnostic.entry` or in the references Observations in `Observation.hasMember`",
            key="dgr-1",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().ofType(canonical) | %resource.descendants().ofType(uri) | %resource.descendants().ofType(url))) or descendants().where(reference = '#').exists() or descendants().where(ofType(canonical) = '#').exists() or descendants().where(ofType(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )

    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return fhir_validators.validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


