[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tunacode-cli"

version = "0.0.77.3"
description = "Your agentic CLI developer."
keywords = ["cli", "agent", "development", "automation"]
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = {text = "MIT"}
authors = [
    { name = "larock22", email = "noreply@github.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
dependencies = [
    "typer>=0.9.0,<0.10.0",
    "click>=8.0.0,<8.2.0",
    "prompt_toolkit==3.0.51",
    "pydantic-ai==0.2.6",
    "pygments==2.19.1",
    "rich==14.0.0",
    "tiktoken>=0.5.2",
    "defusedxml",
]

[project.scripts]
tunacode = "tunacode.cli.main:app"

[project.optional-dependencies]
dev = [
    "build",
    "twine",
    "ruff",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "textual-dev",
    "pre-commit",
    "vulture>=2.7",
    "unimport>=1.0.0",
    "autoflake>=2.0.0",
    "dead>=1.5.0",
    "hatch>=1.6.0",
    "mypy",
    "bandit",
]

[project.urls]
Homepage = "https://tunacode.xyz/"
Repository = "https://github.com/alchemiststudiosDOTai/tunacode"
Issues = "https://github.com/alchemiststudiosDOTai/tunacode/issues"
Documentation = "https://github.com/alchemiststudiosDOTai/tunacode#readme"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = ["I"]
ignore = ["E203", "E501"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
    "venv",
    "vulture_whitelist.py",
]

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
exclude = ["venv/", "build/", "dist/", ".git/", "__pycache__/", "*.egg-info/"]
# Whitelist of false positives
ignore_names = [
    # TYPE_CHECKING imports
    "ReadStream",
    "WriteStream",
    "StateManager",
    "ModelRequest",
    "CommandRegistry",
    # Pytest fixtures
    "caplog",
    "temp_workspace",
    "setup_test_environment",
    "excinfo",
    # Common patterns
    "_complete_event",  # prompt_toolkit API requirement
    "kw",  # **kw pattern
    "kwargs",  # **kwargs pattern
    "message",  # exception handling
    "response_obj",  # API responses
    # Test parameters and mock arguments
    "should_restart",  # test parameter
    "exc",  # exception handling in __aexit__
    "exc_type",  # exception handling in __aexit__
    "tb",  # traceback in __aexit__
    "style_dict",  # Style.from_dict parameter
    "style_str",  # get_attrs_for_style_str parameter
]

[tool.bandit]
# Skip low-severity warnings for subprocess and assert statements
skips = ["B404", "B603", "B101", "B607", "B110", "B324", "B103", "B604", "B602", "B108"]
# B404: import subprocess
# B603: subprocess without shell=True
# B101: assert statements
# B607: start process with partial path
# B110: try/except/pass
# B324: hashlib (SHA1 for non-security fingerprinting)
# B103: chmod permissions (needed for template dirs)
# B604: shell=True (validated usage in REPL)
# B602: subprocess with shell=True (security utils)
# B108: hardcoded tmp paths (test fixtures)

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
follow_imports = "silent"
# Allow CLAUDE_ANCHOR comments in docstrings
disable_error_code = ["annotation-unchecked"]

[tool.hatch.envs.default]
installer = "uv"
features = ["dev"]

[tool.hatch.envs.default.scripts]
# Development
install = "pip install -e '.[dev]'"
run = "python -m tunacode"
dev = "python -m tunacode"
test = "pytest -q tests/characterization tests/test_security.py tests/test_agent_output_formatting.py tests/test_prompt_changes_validation.py"
test-script = "echo 'Test script works'"

# Type checking and security
typecheck = "mypy src/"
security = "bandit -r src/ -ll"

# Version management
version = "0.0.77.3"

# Release workflow
release = [
    "hatch run test",
    "hatch run lint-check",
    "hatch build",
    "echo 'Ready to publish with: hatch publish'"
]

# Cleaning
clean = "python -c \"import shutil, pathlib; dirs=['build', 'dist']; [shutil.rmtree(d, ignore_errors=True) for d in dirs]; [shutil.rmtree(p, ignore_errors=True) for p in pathlib.Path('.').rglob('*.egg-info') if p.is_dir()]; [shutil.rmtree(p, ignore_errors=True) for p in pathlib.Path('.').rglob('__pycache__') if p.is_dir()]; [p.unlink(missing_ok=True) for p in pathlib.Path('.').rglob('*.pyc')]; print('Cleaned build artifacts, egg-info, __pycache__, and *.pyc files')\""

# Linting & Formatting
lint = "ruff check . && ruff format ."
lint-check = "ruff check . && ruff format --check ."

# Dead code analysis
vulture = "python -m vulture --config pyproject.toml"
vulture-check = "python -m vulture --config pyproject.toml --min-confidence 100"

dead-code-check = [
    "python -c \"print('Running comprehensive dead code analysis...')\"",
    "python -c \"print('\\n=== Vulture (unused code) ===')\"",
    "python -m vulture . --min-confidence 80 --exclude '*/test/*,*/tests/*,venv/*,build/*,dist/*' || true",
    "python -c \"print('\\n=== Unimport (unused imports) ===')\"",
    "python -m unimport --check . || true",
    "python -c \"print('\\n=== Dead (dead code detector) ===')\"",
    "python -m dead . || true",
    "python -c \"print('\\n=== Checking test coverage for dead code ===')\"",
]

dead-code-clean = [
    "python -c \"print('Removing dead code...')\"",
    "python -m unimport --remove-all .",
    "python -m autoflake --remove-all-unused-imports --remove-unused-variables -i -r src/",
    "python -c \"print('Dead code cleanup complete!')\"",
]

dead-code-report = [
    "python -c \"print('Generating dead code reports...'); import pathlib; pathlib.Path('reports').mkdir(exist_ok=True)\"",
    "python -m vulture . --min-confidence 60 > reports/dead_code_vulture.txt || true",
    "python -m unimport --check . --diff > reports/unused_imports.txt || true",
    "python -c \"print('Reports generated in reports/ directory')\"",
]

# Testing
coverage = "pytest --cov=src/tunacode --cov-report=term"

# Building
build = "python -m build"

# Playwright utilities
remove-playwright = "python scripts/playwright_cache.py remove"
restore-playwright = "python scripts/playwright_cache.py restore"

# Hatch Environment Configurations

[tool.hatch.envs.test]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.test.scripts]
run = "pytest -q tests/characterization tests/test_security.py tests/test_agent_output_formatting.py tests/test_prompt_changes_validation.py"
all = "pytest tests/"
coverage = "pytest --cov=src/tunacode --cov-report=term"

[tool.hatch.envs.lint]
dependencies = [
    "ruff",
    "mypy",
    "bandit",
    "vulture",
]

[tool.hatch.envs.lint.scripts]
check = [
    "ruff check .",
    "ruff format --check .",
    "mypy src/",
    "bandit -r src/ -ll",
]

[tool.hatch.envs.py310]
python = "3.10"

[tool.hatch.envs.py311]
python = "3.11"

[tool.hatch.envs.py312]
python = "3.12"

[tool.hatch.envs.py313]
python = "3.13"

[tool.hatch.build.targets.wheel]
packages = ["src/tunacode"]
