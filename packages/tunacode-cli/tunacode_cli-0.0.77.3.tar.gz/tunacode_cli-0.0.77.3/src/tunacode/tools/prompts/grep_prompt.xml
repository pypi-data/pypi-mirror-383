<?xml version="1.0" encoding="UTF-8"?>
<tool_prompt>
    <description>
A powerful search tool built on ripgrep

  Usage:
  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.
  - Supports full regex syntax (e.g., "log.*Error", "function\s+\w+")
  - Filter files with glob parameter (e.g., "*.js", "**/*.tsx") or type parameter (e.g., "js", "py", "rust")
  - Output modes: "content" shows matching lines, "files_with_matches" shows only file paths (default), "count" shows match counts
  - Use Task tool for open-ended searches requiring multiple rounds
  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\{\}` to find `interface{}` in Go code)
  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \{[\s\S]*?field`, use `multiline: true`
    </description>

    <parameters>
        <parameter name="pattern" required="true">
            <description>The regular expression pattern to search for in file contents</description>
            <type>string</type>
        </parameter>

        <parameter name="path" required="false">
            <description>File or directory to search in (rg PATH). Defaults to current working directory.</description>
            <type>string</type>
        </parameter>

        <parameter name="glob" required="false">
            <description>Glob pattern to filter files (e.g. "*.js", "*.{ts,tsx}") - maps to rg --glob</description>
            <type>string</type>
        </parameter>

        <parameter name="type" required="false">
            <description>File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types.</description>
            <type>string</type>
        </parameter>

        <parameter name="output_mode" required="false">
            <description>Output mode: "content" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), "files_with_matches" shows file paths (supports head_limit), "count" shows match counts (supports head_limit). Defaults to "files_with_matches".</description>
            <type>string</type>
            <enum>content</enum>
            <enum>files_with_matches</enum>
            <enum>count</enum>
        </parameter>

        <parameter name="-i" required="false">
            <description>Case insensitive search (rg -i)</description>
            <type>boolean</type>
        </parameter>

        <parameter name="-n" required="false">
            <description>Show line numbers in output (rg -n). Requires output_mode: "content", ignored otherwise.</description>
            <type>boolean</type>
        </parameter>

        <parameter name="-A" required="false">
            <description>Number of lines to show after each match (rg -A). Requires output_mode: "content", ignored otherwise.</description>
            <type>number</type>
        </parameter>

        <parameter name="-B" required="false">
            <description>Number of lines to show before each match (rg -B). Requires output_mode: "content", ignored otherwise.</description>
            <type>number</type>
        </parameter>

        <parameter name="-C" required="false">
            <description>Number of lines to show before and after each match (rg -C). Requires output_mode: "content", ignored otherwise.</description>
            <type>number</type>
        </parameter>

        <parameter name="multiline" required="false">
            <description>Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false.</description>
            <type>boolean</type>
        </parameter>

        <parameter name="head_limit" required="false">
            <description>Limit output to first N lines/entries, equivalent to "| head -N". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep.</description>
            <type>number</type>
        </parameter>
    </parameters>

    <examples>
        <example>
            <title>Search for a pattern in all files</title>
            <command>{"pattern": "TODO"}</command>
        </example>

        <example>
            <title>Case-insensitive search in Python files</title>
            <command>{"pattern": "error", "-i": true, "type": "py"}</command>
        </example>

        <example>
            <title>Search with context lines</title>
            <command>{"pattern": "def.*process", "output_mode": "content", "-B": 2, "-A": 2}</command>
        </example>
    </examples>
</tool_prompt>
