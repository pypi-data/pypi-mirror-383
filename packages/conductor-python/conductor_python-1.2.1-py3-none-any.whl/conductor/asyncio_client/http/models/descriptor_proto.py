# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from conductor.asyncio_client.http.models.byte_string import ByteString
from conductor.asyncio_client.http.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class DescriptorProto(BaseModel):
    """
    DescriptorProto
    """ # noqa: E501
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    default_instance_for_type: Optional[DescriptorProto] = Field(default=None, alias="defaultInstanceForType")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    enum_type_count: Optional[StrictInt] = Field(default=None, alias="enumTypeCount")
    enum_type_list: Optional[List[EnumDescriptorProto]] = Field(default=None, alias="enumTypeList")
    enum_type_or_builder_list: Optional[List[EnumDescriptorProtoOrBuilder]] = Field(default=None, alias="enumTypeOrBuilderList")
    extension_count: Optional[StrictInt] = Field(default=None, alias="extensionCount")
    extension_list: Optional[List[FieldDescriptorProto]] = Field(default=None, alias="extensionList")
    extension_or_builder_list: Optional[List[FieldDescriptorProtoOrBuilder]] = Field(default=None, alias="extensionOrBuilderList")
    extension_range_count: Optional[StrictInt] = Field(default=None, alias="extensionRangeCount")
    extension_range_list: Optional[List[ExtensionRange]] = Field(default=None, alias="extensionRangeList")
    extension_range_or_builder_list: Optional[List[ExtensionRangeOrBuilder]] = Field(default=None, alias="extensionRangeOrBuilderList")
    field_count: Optional[StrictInt] = Field(default=None, alias="fieldCount")
    field_list: Optional[List[FieldDescriptorProto]] = Field(default=None, alias="fieldList")
    field_or_builder_list: Optional[List[FieldDescriptorProtoOrBuilder]] = Field(default=None, alias="fieldOrBuilderList")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    initialized: Optional[StrictBool] = None
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    name: Optional[StrictStr] = None
    name_bytes: Optional[ByteString] = Field(default=None, alias="nameBytes")
    nested_type_count: Optional[StrictInt] = Field(default=None, alias="nestedTypeCount")
    nested_type_list: Optional[List[DescriptorProto]] = Field(default=None, alias="nestedTypeList")
    nested_type_or_builder_list: Optional[List[DescriptorProtoOrBuilder]] = Field(default=None, alias="nestedTypeOrBuilderList")
    oneof_decl_count: Optional[StrictInt] = Field(default=None, alias="oneofDeclCount")
    oneof_decl_list: Optional[List[OneofDescriptorProto]] = Field(default=None, alias="oneofDeclList")
    oneof_decl_or_builder_list: Optional[List[OneofDescriptorProtoOrBuilder]] = Field(default=None, alias="oneofDeclOrBuilderList")
    options: Optional[MessageOptions] = None
    options_or_builder: Optional[MessageOptionsOrBuilder] = Field(default=None, alias="optionsOrBuilder")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    reserved_name_count: Optional[StrictInt] = Field(default=None, alias="reservedNameCount")
    reserved_name_list: Optional[List[str]] = Field(default=None, alias="reservedNameList")
    reserved_range_count: Optional[StrictInt] = Field(default=None, alias="reservedRangeCount")
    reserved_range_list: Optional[List[ReservedRange]] = Field(default=None, alias="reservedRangeList")
    reserved_range_or_builder_list: Optional[List[ReservedRangeOrBuilder]] = Field(default=None, alias="reservedRangeOrBuilderList")
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    __properties: ClassVar[List[str]] = ["allFields", "defaultInstanceForType", "descriptorForType", "enumTypeCount", "enumTypeList", "enumTypeOrBuilderList", "extensionCount", "extensionList", "extensionOrBuilderList", "extensionRangeCount", "extensionRangeList", "extensionRangeOrBuilderList", "fieldCount", "fieldList", "fieldOrBuilderList", "initializationErrorString", "initialized", "memoizedSerializedSize", "name", "nameBytes", "nestedTypeCount", "nestedTypeList", "nestedTypeOrBuilderList", "oneofDeclCount", "oneofDeclList", "oneofDeclOrBuilderList", "options", "optionsOrBuilder", "parserForType", "reservedNameCount", "reservedNameList", "reservedRangeCount", "reservedRangeList", "reservedRangeOrBuilderList", "serializedSize", "unknownFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type_list (list)
        _items = []
        if self.enum_type_list:
            for _item_enum_type_list in self.enum_type_list:
                if _item_enum_type_list:
                    _items.append(_item_enum_type_list.to_dict())
            _dict['enumTypeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type_or_builder_list (list)
        _items = []
        if self.enum_type_or_builder_list:
            for _item_enum_type_or_builder_list in self.enum_type_or_builder_list:
                if _item_enum_type_or_builder_list:
                    _items.append(_item_enum_type_or_builder_list.to_dict())
            _dict['enumTypeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extension_list (list)
        _items = []
        if self.extension_list:
            for _item_extension_list in self.extension_list:
                if _item_extension_list:
                    _items.append(_item_extension_list.to_dict())
            _dict['extensionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extension_or_builder_list (list)
        _items = []
        if self.extension_or_builder_list:
            for _item_extension_or_builder_list in self.extension_or_builder_list:
                if _item_extension_or_builder_list:
                    _items.append(_item_extension_or_builder_list.to_dict())
            _dict['extensionOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extension_range_list (list)
        _items = []
        if self.extension_range_list:
            for _item_extension_range_list in self.extension_range_list:
                if _item_extension_range_list:
                    _items.append(_item_extension_range_list.to_dict())
            _dict['extensionRangeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extension_range_or_builder_list (list)
        _items = []
        if self.extension_range_or_builder_list:
            for _item_extension_range_or_builder_list in self.extension_range_or_builder_list:
                if _item_extension_range_or_builder_list:
                    _items.append(_item_extension_range_or_builder_list.to_dict())
            _dict['extensionRangeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_list (list)
        _items = []
        if self.field_list:
            for _item_field_list in self.field_list:
                if _item_field_list:
                    _items.append(_item_field_list.to_dict())
            _dict['fieldList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in field_or_builder_list (list)
        _items = []
        if self.field_or_builder_list:
            for _item_field_or_builder_list in self.field_or_builder_list:
                if _item_field_or_builder_list:
                    _items.append(_item_field_or_builder_list.to_dict())
            _dict['fieldOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of name_bytes
        if self.name_bytes:
            _dict['nameBytes'] = self.name_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nested_type_list (list)
        _items = []
        if self.nested_type_list:
            for _item_nested_type_list in self.nested_type_list:
                if _item_nested_type_list:
                    _items.append(_item_nested_type_list.to_dict())
            _dict['nestedTypeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nested_type_or_builder_list (list)
        _items = []
        if self.nested_type_or_builder_list:
            for _item_nested_type_or_builder_list in self.nested_type_or_builder_list:
                if _item_nested_type_or_builder_list:
                    _items.append(_item_nested_type_or_builder_list.to_dict())
            _dict['nestedTypeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in oneof_decl_list (list)
        _items = []
        if self.oneof_decl_list:
            for _item_oneof_decl_list in self.oneof_decl_list:
                if _item_oneof_decl_list:
                    _items.append(_item_oneof_decl_list.to_dict())
            _dict['oneofDeclList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in oneof_decl_or_builder_list (list)
        _items = []
        if self.oneof_decl_or_builder_list:
            for _item_oneof_decl_or_builder_list in self.oneof_decl_or_builder_list:
                if _item_oneof_decl_or_builder_list:
                    _items.append(_item_oneof_decl_or_builder_list.to_dict())
            _dict['oneofDeclOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options_or_builder
        if self.options_or_builder:
            _dict['optionsOrBuilder'] = self.options_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_range_list (list)
        _items = []
        if self.reserved_range_list:
            for _item_reserved_range_list in self.reserved_range_list:
                if _item_reserved_range_list:
                    _items.append(_item_reserved_range_list.to_dict())
            _dict['reservedRangeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_range_or_builder_list (list)
        _items = []
        if self.reserved_range_or_builder_list:
            for _item_reserved_range_or_builder_list in self.reserved_range_or_builder_list:
                if _item_reserved_range_or_builder_list:
                    _items.append(_item_reserved_range_or_builder_list.to_dict())
            _dict['reservedRangeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allFields": obj.get("allFields"),
            "defaultInstanceForType": DescriptorProto.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "enumTypeCount": obj.get("enumTypeCount"),
            "enumTypeList": [EnumDescriptorProto.from_dict(_item) for _item in obj["enumTypeList"]] if obj.get("enumTypeList") is not None else None,
            "enumTypeOrBuilderList": [EnumDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["enumTypeOrBuilderList"]] if obj.get("enumTypeOrBuilderList") is not None else None,
            "extensionCount": obj.get("extensionCount"),
            "extensionList": [FieldDescriptorProto.from_dict(_item) for _item in obj["extensionList"]] if obj.get("extensionList") is not None else None,
            "extensionOrBuilderList": [FieldDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["extensionOrBuilderList"]] if obj.get("extensionOrBuilderList") is not None else None,
            "extensionRangeCount": obj.get("extensionRangeCount"),
            "extensionRangeList": [ExtensionRange.from_dict(_item) for _item in obj["extensionRangeList"]] if obj.get("extensionRangeList") is not None else None,
            "extensionRangeOrBuilderList": [ExtensionRangeOrBuilder.from_dict(_item) for _item in obj["extensionRangeOrBuilderList"]] if obj.get("extensionRangeOrBuilderList") is not None else None,
            "fieldCount": obj.get("fieldCount"),
            "fieldList": [FieldDescriptorProto.from_dict(_item) for _item in obj["fieldList"]] if obj.get("fieldList") is not None else None,
            "fieldOrBuilderList": [FieldDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["fieldOrBuilderList"]] if obj.get("fieldOrBuilderList") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "initialized": obj.get("initialized"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize"),
            "name": obj.get("name"),
            "nameBytes": ByteString.from_dict(obj["nameBytes"]) if obj.get("nameBytes") is not None else None,
            "nestedTypeCount": obj.get("nestedTypeCount"),
            "nestedTypeList": [DescriptorProto.from_dict(_item) for _item in obj["nestedTypeList"]] if obj.get("nestedTypeList") is not None else None,
            "nestedTypeOrBuilderList": [DescriptorProtoOrBuilder.from_dict(_item) for _item in obj["nestedTypeOrBuilderList"]] if obj.get("nestedTypeOrBuilderList") is not None else None,
            "oneofDeclCount": obj.get("oneofDeclCount"),
            "oneofDeclList": [OneofDescriptorProto.from_dict(_item) for _item in obj["oneofDeclList"]] if obj.get("oneofDeclList") is not None else None,
            "oneofDeclOrBuilderList": [OneofDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["oneofDeclOrBuilderList"]] if obj.get("oneofDeclOrBuilderList") is not None else None,
            "options": MessageOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "optionsOrBuilder": MessageOptionsOrBuilder.from_dict(obj["optionsOrBuilder"]) if obj.get("optionsOrBuilder") is not None else None,
            "parserForType": obj.get("parserForType"),
            "reservedNameCount": obj.get("reservedNameCount"),
            "reservedRangeCount": obj.get("reservedRangeCount"),
            "reservedRangeList": [ReservedRange.from_dict(_item) for _item in obj["reservedRangeList"]] if obj.get("reservedRangeList") is not None else None,
            "reservedRangeOrBuilderList": [ReservedRangeOrBuilder.from_dict(_item) for _item in obj["reservedRangeOrBuilderList"]] if obj.get("reservedRangeOrBuilderList") is not None else None,
            "serializedSize": obj.get("serializedSize"),
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None
        })
        return _obj

from conductor.asyncio_client.http.models.descriptor import Descriptor
from conductor.asyncio_client.http.models.descriptor_proto_or_builder import DescriptorProtoOrBuilder
from conductor.asyncio_client.http.models.enum_descriptor_proto import EnumDescriptorProto
from conductor.asyncio_client.http.models.enum_descriptor_proto_or_builder import EnumDescriptorProtoOrBuilder
from conductor.asyncio_client.http.models.extension_range import ExtensionRange
from conductor.asyncio_client.http.models.extension_range_or_builder import ExtensionRangeOrBuilder
from conductor.asyncio_client.http.models.field_descriptor_proto import FieldDescriptorProto
from conductor.asyncio_client.http.models.field_descriptor_proto_or_builder import FieldDescriptorProtoOrBuilder
from conductor.asyncio_client.http.models.message_options import MessageOptions
from conductor.asyncio_client.http.models.message_options_or_builder import MessageOptionsOrBuilder
from conductor.asyncio_client.http.models.oneof_descriptor_proto import OneofDescriptorProto
from conductor.asyncio_client.http.models.oneof_descriptor_proto_or_builder import OneofDescriptorProtoOrBuilder
from conductor.asyncio_client.http.models.reserved_range import ReservedRange
from conductor.asyncio_client.http.models.reserved_range_or_builder import ReservedRangeOrBuilder
# TODO: Rewrite to not use raise_errors
DescriptorProto.model_rebuild(raise_errors=False)

