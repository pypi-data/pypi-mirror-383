# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from conductor.asyncio_client.http.models.byte_string import ByteString
from conductor.asyncio_client.http.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    Location
    """ # noqa: E501
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    default_instance_for_type: Optional[Location] = Field(default=None, alias="defaultInstanceForType")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    initialized: Optional[StrictBool] = None
    leading_comments: Optional[StrictStr] = Field(default=None, alias="leadingComments")
    leading_comments_bytes: Optional[ByteString] = Field(default=None, alias="leadingCommentsBytes")
    leading_detached_comments_count: Optional[StrictInt] = Field(default=None, alias="leadingDetachedCommentsCount")
    leading_detached_comments_list: Optional[List[str]] = Field(default=None, alias="leadingDetachedCommentsList")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    path_count: Optional[StrictInt] = Field(default=None, alias="pathCount")
    path_list: Optional[List[StrictInt]] = Field(default=None, alias="pathList")
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    span_count: Optional[StrictInt] = Field(default=None, alias="spanCount")
    span_list: Optional[List[StrictInt]] = Field(default=None, alias="spanList")
    trailing_comments: Optional[StrictStr] = Field(default=None, alias="trailingComments")
    trailing_comments_bytes: Optional[ByteString] = Field(default=None, alias="trailingCommentsBytes")
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    __properties: ClassVar[List[str]] = ["allFields", "defaultInstanceForType", "descriptorForType", "initializationErrorString", "initialized", "leadingComments", "leadingCommentsBytes", "leadingDetachedCommentsCount", "leadingDetachedCommentsList", "memoizedSerializedSize", "parserForType", "pathCount", "pathList", "serializedSize", "spanCount", "spanList", "trailingComments", "trailingCommentsBytes", "unknownFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leading_comments_bytes
        if self.leading_comments_bytes:
            _dict['leadingCommentsBytes'] = self.leading_comments_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trailing_comments_bytes
        if self.trailing_comments_bytes:
            _dict['trailingCommentsBytes'] = self.trailing_comments_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allFields": obj.get("allFields"),
            "defaultInstanceForType": Location.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "initialized": obj.get("initialized"),
            "leadingComments": obj.get("leadingComments"),
            "leadingCommentsBytes": ByteString.from_dict(obj["leadingCommentsBytes"]) if obj.get("leadingCommentsBytes") is not None else None,
            "leadingDetachedCommentsCount": obj.get("leadingDetachedCommentsCount"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize"),
            "parserForType": obj.get("parserForType"),
            "pathCount": obj.get("pathCount"),
            "pathList": obj.get("pathList"),
            "serializedSize": obj.get("serializedSize"),
            "spanCount": obj.get("spanCount"),
            "spanList": obj.get("spanList"),
            "trailingComments": obj.get("trailingComments"),
            "trailingCommentsBytes": ByteString.from_dict(obj["trailingCommentsBytes"]) if obj.get("trailingCommentsBytes") is not None else None,
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None
        })
        return _obj

from conductor.asyncio_client.http.models.descriptor import Descriptor
# TODO: Rewrite to not use raise_errors
Location.model_rebuild(raise_errors=False)

