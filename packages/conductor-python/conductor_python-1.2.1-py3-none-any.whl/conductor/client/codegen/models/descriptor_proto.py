# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DescriptorProto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_fields': 'dict(str, object)',
        'default_instance_for_type': 'DescriptorProto',
        'descriptor_for_type': 'Descriptor',
        'enum_type_count': 'int',
        'enum_type_list': 'list[EnumDescriptorProto]',
        'enum_type_or_builder_list': 'list[EnumDescriptorProtoOrBuilder]',
        'extension_count': 'int',
        'extension_list': 'list[FieldDescriptorProto]',
        'extension_or_builder_list': 'list[FieldDescriptorProtoOrBuilder]',
        'extension_range_count': 'int',
        'extension_range_list': 'list[ExtensionRange]',
        'extension_range_or_builder_list': 'list[ExtensionRangeOrBuilder]',
        'field_count': 'int',
        'field_list': 'list[FieldDescriptorProto]',
        'field_or_builder_list': 'list[FieldDescriptorProtoOrBuilder]',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'memoized_serialized_size': 'int',
        'name': 'str',
        'name_bytes': 'ByteString',
        'nested_type_count': 'int',
        'nested_type_list': 'list[DescriptorProto]',
        'nested_type_or_builder_list': 'list[DescriptorProtoOrBuilder]',
        'oneof_decl_count': 'int',
        'oneof_decl_list': 'list[OneofDescriptorProto]',
        'oneof_decl_or_builder_list': 'list[OneofDescriptorProtoOrBuilder]',
        'options': 'MessageOptions',
        'options_or_builder': 'MessageOptionsOrBuilder',
        'parser_for_type': 'ParserDescriptorProto',
        'reserved_name_count': 'int',
        'reserved_name_list': 'list[str]',
        'reserved_range_count': 'int',
        'reserved_range_list': 'list[ReservedRange]',
        'reserved_range_or_builder_list': 'list[ReservedRangeOrBuilder]',
        'serialized_size': 'int',
        'unknown_fields': 'UnknownFieldSet'
    }

    attribute_map = {
        'all_fields': 'allFields',
        'default_instance_for_type': 'defaultInstanceForType',
        'descriptor_for_type': 'descriptorForType',
        'enum_type_count': 'enumTypeCount',
        'enum_type_list': 'enumTypeList',
        'enum_type_or_builder_list': 'enumTypeOrBuilderList',
        'extension_count': 'extensionCount',
        'extension_list': 'extensionList',
        'extension_or_builder_list': 'extensionOrBuilderList',
        'extension_range_count': 'extensionRangeCount',
        'extension_range_list': 'extensionRangeList',
        'extension_range_or_builder_list': 'extensionRangeOrBuilderList',
        'field_count': 'fieldCount',
        'field_list': 'fieldList',
        'field_or_builder_list': 'fieldOrBuilderList',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'memoized_serialized_size': 'memoizedSerializedSize',
        'name': 'name',
        'name_bytes': 'nameBytes',
        'nested_type_count': 'nestedTypeCount',
        'nested_type_list': 'nestedTypeList',
        'nested_type_or_builder_list': 'nestedTypeOrBuilderList',
        'oneof_decl_count': 'oneofDeclCount',
        'oneof_decl_list': 'oneofDeclList',
        'oneof_decl_or_builder_list': 'oneofDeclOrBuilderList',
        'options': 'options',
        'options_or_builder': 'optionsOrBuilder',
        'parser_for_type': 'parserForType',
        'reserved_name_count': 'reservedNameCount',
        'reserved_name_list': 'reservedNameList',
        'reserved_range_count': 'reservedRangeCount',
        'reserved_range_list': 'reservedRangeList',
        'reserved_range_or_builder_list': 'reservedRangeOrBuilderList',
        'serialized_size': 'serializedSize',
        'unknown_fields': 'unknownFields'
    }

    def __init__(self, all_fields=None, default_instance_for_type=None, descriptor_for_type=None, enum_type_count=None, enum_type_list=None, enum_type_or_builder_list=None, extension_count=None, extension_list=None, extension_or_builder_list=None, extension_range_count=None, extension_range_list=None, extension_range_or_builder_list=None, field_count=None, field_list=None, field_or_builder_list=None, initialization_error_string=None, initialized=None, memoized_serialized_size=None, name=None, name_bytes=None, nested_type_count=None, nested_type_list=None, nested_type_or_builder_list=None, oneof_decl_count=None, oneof_decl_list=None, oneof_decl_or_builder_list=None, options=None, options_or_builder=None, parser_for_type=None, reserved_name_count=None, reserved_name_list=None, reserved_range_count=None, reserved_range_list=None, reserved_range_or_builder_list=None, serialized_size=None, unknown_fields=None):  # noqa: E501
        """DescriptorProto - a model defined in Swagger"""  # noqa: E501
        self._all_fields = None
        self._default_instance_for_type = None
        self._descriptor_for_type = None
        self._enum_type_count = None
        self._enum_type_list = None
        self._enum_type_or_builder_list = None
        self._extension_count = None
        self._extension_list = None
        self._extension_or_builder_list = None
        self._extension_range_count = None
        self._extension_range_list = None
        self._extension_range_or_builder_list = None
        self._field_count = None
        self._field_list = None
        self._field_or_builder_list = None
        self._initialization_error_string = None
        self._initialized = None
        self._memoized_serialized_size = None
        self._name = None
        self._name_bytes = None
        self._nested_type_count = None
        self._nested_type_list = None
        self._nested_type_or_builder_list = None
        self._oneof_decl_count = None
        self._oneof_decl_list = None
        self._oneof_decl_or_builder_list = None
        self._options = None
        self._options_or_builder = None
        self._parser_for_type = None
        self._reserved_name_count = None
        self._reserved_name_list = None
        self._reserved_range_count = None
        self._reserved_range_list = None
        self._reserved_range_or_builder_list = None
        self._serialized_size = None
        self._unknown_fields = None
        self.discriminator = None
        if all_fields is not None:
            self.all_fields = all_fields
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if enum_type_count is not None:
            self.enum_type_count = enum_type_count
        if enum_type_list is not None:
            self.enum_type_list = enum_type_list
        if enum_type_or_builder_list is not None:
            self.enum_type_or_builder_list = enum_type_or_builder_list
        if extension_count is not None:
            self.extension_count = extension_count
        if extension_list is not None:
            self.extension_list = extension_list
        if extension_or_builder_list is not None:
            self.extension_or_builder_list = extension_or_builder_list
        if extension_range_count is not None:
            self.extension_range_count = extension_range_count
        if extension_range_list is not None:
            self.extension_range_list = extension_range_list
        if extension_range_or_builder_list is not None:
            self.extension_range_or_builder_list = extension_range_or_builder_list
        if field_count is not None:
            self.field_count = field_count
        if field_list is not None:
            self.field_list = field_list
        if field_or_builder_list is not None:
            self.field_or_builder_list = field_or_builder_list
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size
        if name is not None:
            self.name = name
        if name_bytes is not None:
            self.name_bytes = name_bytes
        if nested_type_count is not None:
            self.nested_type_count = nested_type_count
        if nested_type_list is not None:
            self.nested_type_list = nested_type_list
        if nested_type_or_builder_list is not None:
            self.nested_type_or_builder_list = nested_type_or_builder_list
        if oneof_decl_count is not None:
            self.oneof_decl_count = oneof_decl_count
        if oneof_decl_list is not None:
            self.oneof_decl_list = oneof_decl_list
        if oneof_decl_or_builder_list is not None:
            self.oneof_decl_or_builder_list = oneof_decl_or_builder_list
        if options is not None:
            self.options = options
        if options_or_builder is not None:
            self.options_or_builder = options_or_builder
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if reserved_name_count is not None:
            self.reserved_name_count = reserved_name_count
        if reserved_name_list is not None:
            self.reserved_name_list = reserved_name_list
        if reserved_range_count is not None:
            self.reserved_range_count = reserved_range_count
        if reserved_range_list is not None:
            self.reserved_range_list = reserved_range_list
        if reserved_range_or_builder_list is not None:
            self.reserved_range_or_builder_list = reserved_range_or_builder_list
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields

    @property
    def all_fields(self):
        """Gets the all_fields of this DescriptorProto.  # noqa: E501


        :return: The all_fields of this DescriptorProto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this DescriptorProto.


        :param all_fields: The all_fields of this DescriptorProto.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this DescriptorProto.  # noqa: E501


        :return: The default_instance_for_type of this DescriptorProto.  # noqa: E501
        :rtype: DescriptorProto
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this DescriptorProto.


        :param default_instance_for_type: The default_instance_for_type of this DescriptorProto.  # noqa: E501
        :type: DescriptorProto
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this DescriptorProto.  # noqa: E501


        :return: The descriptor_for_type of this DescriptorProto.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this DescriptorProto.


        :param descriptor_for_type: The descriptor_for_type of this DescriptorProto.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def enum_type_count(self):
        """Gets the enum_type_count of this DescriptorProto.  # noqa: E501


        :return: The enum_type_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._enum_type_count

    @enum_type_count.setter
    def enum_type_count(self, enum_type_count):
        """Sets the enum_type_count of this DescriptorProto.


        :param enum_type_count: The enum_type_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._enum_type_count = enum_type_count

    @property
    def enum_type_list(self):
        """Gets the enum_type_list of this DescriptorProto.  # noqa: E501


        :return: The enum_type_list of this DescriptorProto.  # noqa: E501
        :rtype: list[EnumDescriptorProto]
        """
        return self._enum_type_list

    @enum_type_list.setter
    def enum_type_list(self, enum_type_list):
        """Sets the enum_type_list of this DescriptorProto.


        :param enum_type_list: The enum_type_list of this DescriptorProto.  # noqa: E501
        :type: list[EnumDescriptorProto]
        """

        self._enum_type_list = enum_type_list

    @property
    def enum_type_or_builder_list(self):
        """Gets the enum_type_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The enum_type_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[EnumDescriptorProtoOrBuilder]
        """
        return self._enum_type_or_builder_list

    @enum_type_or_builder_list.setter
    def enum_type_or_builder_list(self, enum_type_or_builder_list):
        """Sets the enum_type_or_builder_list of this DescriptorProto.


        :param enum_type_or_builder_list: The enum_type_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[EnumDescriptorProtoOrBuilder]
        """

        self._enum_type_or_builder_list = enum_type_or_builder_list

    @property
    def extension_count(self):
        """Gets the extension_count of this DescriptorProto.  # noqa: E501


        :return: The extension_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._extension_count

    @extension_count.setter
    def extension_count(self, extension_count):
        """Sets the extension_count of this DescriptorProto.


        :param extension_count: The extension_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._extension_count = extension_count

    @property
    def extension_list(self):
        """Gets the extension_list of this DescriptorProto.  # noqa: E501


        :return: The extension_list of this DescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProto]
        """
        return self._extension_list

    @extension_list.setter
    def extension_list(self, extension_list):
        """Sets the extension_list of this DescriptorProto.


        :param extension_list: The extension_list of this DescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProto]
        """

        self._extension_list = extension_list

    @property
    def extension_or_builder_list(self):
        """Gets the extension_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The extension_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProtoOrBuilder]
        """
        return self._extension_or_builder_list

    @extension_or_builder_list.setter
    def extension_or_builder_list(self, extension_or_builder_list):
        """Sets the extension_or_builder_list of this DescriptorProto.


        :param extension_or_builder_list: The extension_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProtoOrBuilder]
        """

        self._extension_or_builder_list = extension_or_builder_list

    @property
    def extension_range_count(self):
        """Gets the extension_range_count of this DescriptorProto.  # noqa: E501


        :return: The extension_range_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._extension_range_count

    @extension_range_count.setter
    def extension_range_count(self, extension_range_count):
        """Sets the extension_range_count of this DescriptorProto.


        :param extension_range_count: The extension_range_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._extension_range_count = extension_range_count

    @property
    def extension_range_list(self):
        """Gets the extension_range_list of this DescriptorProto.  # noqa: E501


        :return: The extension_range_list of this DescriptorProto.  # noqa: E501
        :rtype: list[ExtensionRange]
        """
        return self._extension_range_list

    @extension_range_list.setter
    def extension_range_list(self, extension_range_list):
        """Sets the extension_range_list of this DescriptorProto.


        :param extension_range_list: The extension_range_list of this DescriptorProto.  # noqa: E501
        :type: list[ExtensionRange]
        """

        self._extension_range_list = extension_range_list

    @property
    def extension_range_or_builder_list(self):
        """Gets the extension_range_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The extension_range_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[ExtensionRangeOrBuilder]
        """
        return self._extension_range_or_builder_list

    @extension_range_or_builder_list.setter
    def extension_range_or_builder_list(self, extension_range_or_builder_list):
        """Sets the extension_range_or_builder_list of this DescriptorProto.


        :param extension_range_or_builder_list: The extension_range_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[ExtensionRangeOrBuilder]
        """

        self._extension_range_or_builder_list = extension_range_or_builder_list

    @property
    def field_count(self):
        """Gets the field_count of this DescriptorProto.  # noqa: E501


        :return: The field_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._field_count

    @field_count.setter
    def field_count(self, field_count):
        """Sets the field_count of this DescriptorProto.


        :param field_count: The field_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._field_count = field_count

    @property
    def field_list(self):
        """Gets the field_list of this DescriptorProto.  # noqa: E501


        :return: The field_list of this DescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProto]
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """Sets the field_list of this DescriptorProto.


        :param field_list: The field_list of this DescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProto]
        """

        self._field_list = field_list

    @property
    def field_or_builder_list(self):
        """Gets the field_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The field_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProtoOrBuilder]
        """
        return self._field_or_builder_list

    @field_or_builder_list.setter
    def field_or_builder_list(self, field_or_builder_list):
        """Sets the field_or_builder_list of this DescriptorProto.


        :param field_or_builder_list: The field_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProtoOrBuilder]
        """

        self._field_or_builder_list = field_or_builder_list

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this DescriptorProto.  # noqa: E501


        :return: The initialization_error_string of this DescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this DescriptorProto.


        :param initialization_error_string: The initialization_error_string of this DescriptorProto.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this DescriptorProto.  # noqa: E501


        :return: The initialized of this DescriptorProto.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this DescriptorProto.


        :param initialized: The initialized of this DescriptorProto.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this DescriptorProto.  # noqa: E501


        :return: The memoized_serialized_size of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this DescriptorProto.


        :param memoized_serialized_size: The memoized_serialized_size of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    @property
    def name(self):
        """Gets the name of this DescriptorProto.  # noqa: E501


        :return: The name of this DescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescriptorProto.


        :param name: The name of this DescriptorProto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_bytes(self):
        """Gets the name_bytes of this DescriptorProto.  # noqa: E501


        :return: The name_bytes of this DescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._name_bytes

    @name_bytes.setter
    def name_bytes(self, name_bytes):
        """Sets the name_bytes of this DescriptorProto.


        :param name_bytes: The name_bytes of this DescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._name_bytes = name_bytes

    @property
    def nested_type_count(self):
        """Gets the nested_type_count of this DescriptorProto.  # noqa: E501


        :return: The nested_type_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._nested_type_count

    @nested_type_count.setter
    def nested_type_count(self, nested_type_count):
        """Sets the nested_type_count of this DescriptorProto.


        :param nested_type_count: The nested_type_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._nested_type_count = nested_type_count

    @property
    def nested_type_list(self):
        """Gets the nested_type_list of this DescriptorProto.  # noqa: E501


        :return: The nested_type_list of this DescriptorProto.  # noqa: E501
        :rtype: list[DescriptorProto]
        """
        return self._nested_type_list

    @nested_type_list.setter
    def nested_type_list(self, nested_type_list):
        """Sets the nested_type_list of this DescriptorProto.


        :param nested_type_list: The nested_type_list of this DescriptorProto.  # noqa: E501
        :type: list[DescriptorProto]
        """

        self._nested_type_list = nested_type_list

    @property
    def nested_type_or_builder_list(self):
        """Gets the nested_type_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The nested_type_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[DescriptorProtoOrBuilder]
        """
        return self._nested_type_or_builder_list

    @nested_type_or_builder_list.setter
    def nested_type_or_builder_list(self, nested_type_or_builder_list):
        """Sets the nested_type_or_builder_list of this DescriptorProto.


        :param nested_type_or_builder_list: The nested_type_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[DescriptorProtoOrBuilder]
        """

        self._nested_type_or_builder_list = nested_type_or_builder_list

    @property
    def oneof_decl_count(self):
        """Gets the oneof_decl_count of this DescriptorProto.  # noqa: E501


        :return: The oneof_decl_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._oneof_decl_count

    @oneof_decl_count.setter
    def oneof_decl_count(self, oneof_decl_count):
        """Sets the oneof_decl_count of this DescriptorProto.


        :param oneof_decl_count: The oneof_decl_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._oneof_decl_count = oneof_decl_count

    @property
    def oneof_decl_list(self):
        """Gets the oneof_decl_list of this DescriptorProto.  # noqa: E501


        :return: The oneof_decl_list of this DescriptorProto.  # noqa: E501
        :rtype: list[OneofDescriptorProto]
        """
        return self._oneof_decl_list

    @oneof_decl_list.setter
    def oneof_decl_list(self, oneof_decl_list):
        """Sets the oneof_decl_list of this DescriptorProto.


        :param oneof_decl_list: The oneof_decl_list of this DescriptorProto.  # noqa: E501
        :type: list[OneofDescriptorProto]
        """

        self._oneof_decl_list = oneof_decl_list

    @property
    def oneof_decl_or_builder_list(self):
        """Gets the oneof_decl_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The oneof_decl_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[OneofDescriptorProtoOrBuilder]
        """
        return self._oneof_decl_or_builder_list

    @oneof_decl_or_builder_list.setter
    def oneof_decl_or_builder_list(self, oneof_decl_or_builder_list):
        """Sets the oneof_decl_or_builder_list of this DescriptorProto.


        :param oneof_decl_or_builder_list: The oneof_decl_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[OneofDescriptorProtoOrBuilder]
        """

        self._oneof_decl_or_builder_list = oneof_decl_or_builder_list

    @property
    def options(self):
        """Gets the options of this DescriptorProto.  # noqa: E501


        :return: The options of this DescriptorProto.  # noqa: E501
        :rtype: MessageOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DescriptorProto.


        :param options: The options of this DescriptorProto.  # noqa: E501
        :type: MessageOptions
        """

        self._options = options

    @property
    def options_or_builder(self):
        """Gets the options_or_builder of this DescriptorProto.  # noqa: E501


        :return: The options_or_builder of this DescriptorProto.  # noqa: E501
        :rtype: MessageOptionsOrBuilder
        """
        return self._options_or_builder

    @options_or_builder.setter
    def options_or_builder(self, options_or_builder):
        """Sets the options_or_builder of this DescriptorProto.


        :param options_or_builder: The options_or_builder of this DescriptorProto.  # noqa: E501
        :type: MessageOptionsOrBuilder
        """

        self._options_or_builder = options_or_builder

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this DescriptorProto.  # noqa: E501


        :return: The parser_for_type of this DescriptorProto.  # noqa: E501
        :rtype: ParserDescriptorProto
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this DescriptorProto.


        :param parser_for_type: The parser_for_type of this DescriptorProto.  # noqa: E501
        :type: ParserDescriptorProto
        """

        self._parser_for_type = parser_for_type

    @property
    def reserved_name_count(self):
        """Gets the reserved_name_count of this DescriptorProto.  # noqa: E501


        :return: The reserved_name_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._reserved_name_count

    @reserved_name_count.setter
    def reserved_name_count(self, reserved_name_count):
        """Sets the reserved_name_count of this DescriptorProto.


        :param reserved_name_count: The reserved_name_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._reserved_name_count = reserved_name_count

    @property
    def reserved_name_list(self):
        """Gets the reserved_name_list of this DescriptorProto.  # noqa: E501


        :return: The reserved_name_list of this DescriptorProto.  # noqa: E501
        :rtype: list[str]
        """
        return self._reserved_name_list

    @reserved_name_list.setter
    def reserved_name_list(self, reserved_name_list):
        """Sets the reserved_name_list of this DescriptorProto.


        :param reserved_name_list: The reserved_name_list of this DescriptorProto.  # noqa: E501
        :type: list[str]
        """

        self._reserved_name_list = reserved_name_list

    @property
    def reserved_range_count(self):
        """Gets the reserved_range_count of this DescriptorProto.  # noqa: E501


        :return: The reserved_range_count of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._reserved_range_count

    @reserved_range_count.setter
    def reserved_range_count(self, reserved_range_count):
        """Sets the reserved_range_count of this DescriptorProto.


        :param reserved_range_count: The reserved_range_count of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._reserved_range_count = reserved_range_count

    @property
    def reserved_range_list(self):
        """Gets the reserved_range_list of this DescriptorProto.  # noqa: E501


        :return: The reserved_range_list of this DescriptorProto.  # noqa: E501
        :rtype: list[ReservedRange]
        """
        return self._reserved_range_list

    @reserved_range_list.setter
    def reserved_range_list(self, reserved_range_list):
        """Sets the reserved_range_list of this DescriptorProto.


        :param reserved_range_list: The reserved_range_list of this DescriptorProto.  # noqa: E501
        :type: list[ReservedRange]
        """

        self._reserved_range_list = reserved_range_list

    @property
    def reserved_range_or_builder_list(self):
        """Gets the reserved_range_or_builder_list of this DescriptorProto.  # noqa: E501


        :return: The reserved_range_or_builder_list of this DescriptorProto.  # noqa: E501
        :rtype: list[ReservedRangeOrBuilder]
        """
        return self._reserved_range_or_builder_list

    @reserved_range_or_builder_list.setter
    def reserved_range_or_builder_list(self, reserved_range_or_builder_list):
        """Sets the reserved_range_or_builder_list of this DescriptorProto.


        :param reserved_range_or_builder_list: The reserved_range_or_builder_list of this DescriptorProto.  # noqa: E501
        :type: list[ReservedRangeOrBuilder]
        """

        self._reserved_range_or_builder_list = reserved_range_or_builder_list

    @property
    def serialized_size(self):
        """Gets the serialized_size of this DescriptorProto.  # noqa: E501


        :return: The serialized_size of this DescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this DescriptorProto.


        :param serialized_size: The serialized_size of this DescriptorProto.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this DescriptorProto.  # noqa: E501


        :return: The unknown_fields of this DescriptorProto.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this DescriptorProto.


        :param unknown_fields: The unknown_fields of this DescriptorProto.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescriptorProto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescriptorProto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
