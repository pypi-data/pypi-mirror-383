# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_access': 'dict(str, list[str])',
        'description': 'str',
        'id': 'str',
        'roles': 'list[Role]'
    }

    attribute_map = {
        'default_access': 'defaultAccess',
        'description': 'description',
        'id': 'id',
        'roles': 'roles'
    }

    def __init__(self, default_access=None, description=None, id=None, roles=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._default_access = None
        self._description = None
        self._id = None
        self._roles = None
        self.discriminator = None
        if default_access is not None:
            self.default_access = default_access
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if roles is not None:
            self.roles = roles

    @property
    def default_access(self):
        """Gets the default_access of this Group.  # noqa: E501


        :return: The default_access of this Group.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._default_access

    @default_access.setter
    def default_access(self, default_access):
        """Sets the default_access of this Group.


        :param default_access: The default_access of this Group.  # noqa: E501
        :type: dict(str, list[str])
        """
        allowed_values = [CREATE, READ, EXECUTE, UPDATE, DELETE]  # noqa: E501
        if not set(default_access.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `default_access` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(default_access.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._default_access = default_access

    @property
    def description(self):
        """Gets the description of this Group.  # noqa: E501


        :return: The description of this Group.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.


        :param description: The description of this Group.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501


        :return: The id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def roles(self):
        """Gets the roles of this Group.  # noqa: E501


        :return: The roles of this Group.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Group.


        :param roles: The roles of this Group.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
