# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependencies': 'list[FileDescriptor]',
        'edition': 'str',
        'edition_name': 'str',
        'enum_types': 'list[EnumDescriptor]',
        'extensions': 'list[FieldDescriptor]',
        'file': 'FileDescriptor',
        'full_name': 'str',
        'message_types': 'list[Descriptor]',
        'name': 'str',
        'options': 'FileOptions',
        'package': 'str',
        'proto': 'FileDescriptorProto',
        'public_dependencies': 'list[FileDescriptor]',
        'services': 'list[ServiceDescriptor]',
        'syntax': 'str'
    }

    attribute_map = {
        'dependencies': 'dependencies',
        'edition': 'edition',
        'edition_name': 'editionName',
        'enum_types': 'enumTypes',
        'extensions': 'extensions',
        'file': 'file',
        'full_name': 'fullName',
        'message_types': 'messageTypes',
        'name': 'name',
        'options': 'options',
        'package': 'package',
        'proto': 'proto',
        'public_dependencies': 'publicDependencies',
        'services': 'services',
        'syntax': 'syntax'
    }

    def __init__(self, dependencies=None, edition=None, edition_name=None, enum_types=None, extensions=None, file=None, full_name=None, message_types=None, name=None, options=None, package=None, proto=None, public_dependencies=None, services=None, syntax=None):  # noqa: E501
        """FileDescriptor - a model defined in Swagger"""  # noqa: E501
        self._dependencies = None
        self._edition = None
        self._edition_name = None
        self._enum_types = None
        self._extensions = None
        self._file = None
        self._full_name = None
        self._message_types = None
        self._name = None
        self._options = None
        self._package = None
        self._proto = None
        self._public_dependencies = None
        self._services = None
        self._syntax = None
        self.discriminator = None
        if dependencies is not None:
            self.dependencies = dependencies
        if edition is not None:
            self.edition = edition
        if edition_name is not None:
            self.edition_name = edition_name
        if enum_types is not None:
            self.enum_types = enum_types
        if extensions is not None:
            self.extensions = extensions
        if file is not None:
            self.file = file
        if full_name is not None:
            self.full_name = full_name
        if message_types is not None:
            self.message_types = message_types
        if name is not None:
            self.name = name
        if options is not None:
            self.options = options
        if package is not None:
            self.package = package
        if proto is not None:
            self.proto = proto
        if public_dependencies is not None:
            self.public_dependencies = public_dependencies
        if services is not None:
            self.services = services
        if syntax is not None:
            self.syntax = syntax

    @property
    def dependencies(self):
        """Gets the dependencies of this FileDescriptor.  # noqa: E501


        :return: The dependencies of this FileDescriptor.  # noqa: E501
        :rtype: list[FileDescriptor]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this FileDescriptor.


        :param dependencies: The dependencies of this FileDescriptor.  # noqa: E501
        :type: list[FileDescriptor]
        """

        self._dependencies = dependencies

    @property
    def edition(self):
        """Gets the edition of this FileDescriptor.  # noqa: E501


        :return: The edition of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this FileDescriptor.


        :param edition: The edition of this FileDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDITION_UNKNOWN", "EDITION_PROTO2", "EDITION_PROTO3", "EDITION_2023", "EDITION_1_TEST_ONLY", "EDITION_2_TEST_ONLY", "EDITION_99997_TEST_ONLY", "EDITION_99998_TEST_ONLY", "EDITION_99999_TEST_ONLY"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"  # noqa: E501
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def edition_name(self):
        """Gets the edition_name of this FileDescriptor.  # noqa: E501


        :return: The edition_name of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._edition_name

    @edition_name.setter
    def edition_name(self, edition_name):
        """Sets the edition_name of this FileDescriptor.


        :param edition_name: The edition_name of this FileDescriptor.  # noqa: E501
        :type: str
        """

        self._edition_name = edition_name

    @property
    def enum_types(self):
        """Gets the enum_types of this FileDescriptor.  # noqa: E501


        :return: The enum_types of this FileDescriptor.  # noqa: E501
        :rtype: list[EnumDescriptor]
        """
        return self._enum_types

    @enum_types.setter
    def enum_types(self, enum_types):
        """Sets the enum_types of this FileDescriptor.


        :param enum_types: The enum_types of this FileDescriptor.  # noqa: E501
        :type: list[EnumDescriptor]
        """

        self._enum_types = enum_types

    @property
    def extensions(self):
        """Gets the extensions of this FileDescriptor.  # noqa: E501


        :return: The extensions of this FileDescriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this FileDescriptor.


        :param extensions: The extensions of this FileDescriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._extensions = extensions

    @property
    def file(self):
        """Gets the file of this FileDescriptor.  # noqa: E501


        :return: The file of this FileDescriptor.  # noqa: E501
        :rtype: FileDescriptor
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileDescriptor.


        :param file: The file of this FileDescriptor.  # noqa: E501
        :type: FileDescriptor
        """

        self._file = file

    @property
    def full_name(self):
        """Gets the full_name of this FileDescriptor.  # noqa: E501


        :return: The full_name of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this FileDescriptor.


        :param full_name: The full_name of this FileDescriptor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def message_types(self):
        """Gets the message_types of this FileDescriptor.  # noqa: E501


        :return: The message_types of this FileDescriptor.  # noqa: E501
        :rtype: list[Descriptor]
        """
        return self._message_types

    @message_types.setter
    def message_types(self, message_types):
        """Sets the message_types of this FileDescriptor.


        :param message_types: The message_types of this FileDescriptor.  # noqa: E501
        :type: list[Descriptor]
        """

        self._message_types = message_types

    @property
    def name(self):
        """Gets the name of this FileDescriptor.  # noqa: E501


        :return: The name of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileDescriptor.


        :param name: The name of this FileDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this FileDescriptor.  # noqa: E501


        :return: The options of this FileDescriptor.  # noqa: E501
        :rtype: FileOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FileDescriptor.


        :param options: The options of this FileDescriptor.  # noqa: E501
        :type: FileOptions
        """

        self._options = options

    @property
    def package(self):
        """Gets the package of this FileDescriptor.  # noqa: E501


        :return: The package of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this FileDescriptor.


        :param package: The package of this FileDescriptor.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def proto(self):
        """Gets the proto of this FileDescriptor.  # noqa: E501


        :return: The proto of this FileDescriptor.  # noqa: E501
        :rtype: FileDescriptorProto
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this FileDescriptor.


        :param proto: The proto of this FileDescriptor.  # noqa: E501
        :type: FileDescriptorProto
        """

        self._proto = proto

    @property
    def public_dependencies(self):
        """Gets the public_dependencies of this FileDescriptor.  # noqa: E501


        :return: The public_dependencies of this FileDescriptor.  # noqa: E501
        :rtype: list[FileDescriptor]
        """
        return self._public_dependencies

    @public_dependencies.setter
    def public_dependencies(self, public_dependencies):
        """Sets the public_dependencies of this FileDescriptor.


        :param public_dependencies: The public_dependencies of this FileDescriptor.  # noqa: E501
        :type: list[FileDescriptor]
        """

        self._public_dependencies = public_dependencies

    @property
    def services(self):
        """Gets the services of this FileDescriptor.  # noqa: E501


        :return: The services of this FileDescriptor.  # noqa: E501
        :rtype: list[ServiceDescriptor]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this FileDescriptor.


        :param services: The services of this FileDescriptor.  # noqa: E501
        :type: list[ServiceDescriptor]
        """

        self._services = services

    @property
    def syntax(self):
        """Gets the syntax of this FileDescriptor.  # noqa: E501


        :return: The syntax of this FileDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this FileDescriptor.


        :param syntax: The syntax of this FileDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "PROTO2", "PROTO3", "EDITIONS"]  # noqa: E501
        if syntax not in allowed_values:
            raise ValueError(
                "Invalid value for `syntax` ({0}), must be one of {1}"  # noqa: E501
                .format(syntax, allowed_values)
            )

        self._syntax = syntax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
