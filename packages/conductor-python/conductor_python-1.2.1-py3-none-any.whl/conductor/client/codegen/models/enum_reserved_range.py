# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumReservedRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_fields': 'dict(str, object)',
        'default_instance_for_type': 'EnumReservedRange',
        'descriptor_for_type': 'Descriptor',
        'end': 'int',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'memoized_serialized_size': 'int',
        'parser_for_type': 'ParserEnumReservedRange',
        'serialized_size': 'int',
        'start': 'int',
        'unknown_fields': 'UnknownFieldSet'
    }

    attribute_map = {
        'all_fields': 'allFields',
        'default_instance_for_type': 'defaultInstanceForType',
        'descriptor_for_type': 'descriptorForType',
        'end': 'end',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'memoized_serialized_size': 'memoizedSerializedSize',
        'parser_for_type': 'parserForType',
        'serialized_size': 'serializedSize',
        'start': 'start',
        'unknown_fields': 'unknownFields'
    }

    def __init__(self, all_fields=None, default_instance_for_type=None, descriptor_for_type=None, end=None, initialization_error_string=None, initialized=None, memoized_serialized_size=None, parser_for_type=None, serialized_size=None, start=None, unknown_fields=None):  # noqa: E501
        """EnumReservedRange - a model defined in Swagger"""  # noqa: E501
        self._all_fields = None
        self._default_instance_for_type = None
        self._descriptor_for_type = None
        self._end = None
        self._initialization_error_string = None
        self._initialized = None
        self._memoized_serialized_size = None
        self._parser_for_type = None
        self._serialized_size = None
        self._start = None
        self._unknown_fields = None
        self.discriminator = None
        if all_fields is not None:
            self.all_fields = all_fields
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if end is not None:
            self.end = end
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if start is not None:
            self.start = start
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields

    @property
    def all_fields(self):
        """Gets the all_fields of this EnumReservedRange.  # noqa: E501


        :return: The all_fields of this EnumReservedRange.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this EnumReservedRange.


        :param all_fields: The all_fields of this EnumReservedRange.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this EnumReservedRange.  # noqa: E501


        :return: The default_instance_for_type of this EnumReservedRange.  # noqa: E501
        :rtype: EnumReservedRange
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this EnumReservedRange.


        :param default_instance_for_type: The default_instance_for_type of this EnumReservedRange.  # noqa: E501
        :type: EnumReservedRange
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this EnumReservedRange.  # noqa: E501


        :return: The descriptor_for_type of this EnumReservedRange.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this EnumReservedRange.


        :param descriptor_for_type: The descriptor_for_type of this EnumReservedRange.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def end(self):
        """Gets the end of this EnumReservedRange.  # noqa: E501


        :return: The end of this EnumReservedRange.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this EnumReservedRange.


        :param end: The end of this EnumReservedRange.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this EnumReservedRange.  # noqa: E501


        :return: The initialization_error_string of this EnumReservedRange.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this EnumReservedRange.


        :param initialization_error_string: The initialization_error_string of this EnumReservedRange.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this EnumReservedRange.  # noqa: E501


        :return: The initialized of this EnumReservedRange.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this EnumReservedRange.


        :param initialized: The initialized of this EnumReservedRange.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this EnumReservedRange.  # noqa: E501


        :return: The memoized_serialized_size of this EnumReservedRange.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this EnumReservedRange.


        :param memoized_serialized_size: The memoized_serialized_size of this EnumReservedRange.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this EnumReservedRange.  # noqa: E501


        :return: The parser_for_type of this EnumReservedRange.  # noqa: E501
        :rtype: ParserEnumReservedRange
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this EnumReservedRange.


        :param parser_for_type: The parser_for_type of this EnumReservedRange.  # noqa: E501
        :type: ParserEnumReservedRange
        """

        self._parser_for_type = parser_for_type

    @property
    def serialized_size(self):
        """Gets the serialized_size of this EnumReservedRange.  # noqa: E501


        :return: The serialized_size of this EnumReservedRange.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this EnumReservedRange.


        :param serialized_size: The serialized_size of this EnumReservedRange.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def start(self):
        """Gets the start of this EnumReservedRange.  # noqa: E501


        :return: The start of this EnumReservedRange.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this EnumReservedRange.


        :param start: The start of this EnumReservedRange.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this EnumReservedRange.  # noqa: E501


        :return: The unknown_fields of this EnumReservedRange.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this EnumReservedRange.


        :param unknown_fields: The unknown_fields of this EnumReservedRange.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumReservedRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumReservedRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
