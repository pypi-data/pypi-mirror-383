# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'int',
        'event': 'str',
        'event_type': 'str',
        'handler_name': 'str',
        'id': 'str',
        'task_id': 'str',
        'worker_id': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'event': 'event',
        'event_type': 'eventType',
        'handler_name': 'handlerName',
        'id': 'id',
        'task_id': 'taskId',
        'worker_id': 'workerId'
    }

    def __init__(self, created_at=None, event=None, event_type=None, handler_name=None, id=None, task_id=None, worker_id=None):  # noqa: E501
        """EventLog - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._event = None
        self._event_type = None
        self._handler_name = None
        self._id = None
        self._task_id = None
        self._worker_id = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if event is not None:
            self.event = event
        if event_type is not None:
            self.event_type = event_type
        if handler_name is not None:
            self.handler_name = handler_name
        if id is not None:
            self.id = id
        if task_id is not None:
            self.task_id = task_id
        if worker_id is not None:
            self.worker_id = worker_id

    @property
    def created_at(self):
        """Gets the created_at of this EventLog.  # noqa: E501


        :return: The created_at of this EventLog.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventLog.


        :param created_at: The created_at of this EventLog.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this EventLog.  # noqa: E501


        :return: The event of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventLog.


        :param event: The event of this EventLog.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def event_type(self):
        """Gets the event_type of this EventLog.  # noqa: E501


        :return: The event_type of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventLog.


        :param event_type: The event_type of this EventLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["SEND", "RECEIVE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def handler_name(self):
        """Gets the handler_name of this EventLog.  # noqa: E501


        :return: The handler_name of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._handler_name

    @handler_name.setter
    def handler_name(self, handler_name):
        """Sets the handler_name of this EventLog.


        :param handler_name: The handler_name of this EventLog.  # noqa: E501
        :type: str
        """

        self._handler_name = handler_name

    @property
    def id(self):
        """Gets the id of this EventLog.  # noqa: E501


        :return: The id of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventLog.


        :param id: The id of this EventLog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_id(self):
        """Gets the task_id of this EventLog.  # noqa: E501


        :return: The task_id of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this EventLog.


        :param task_id: The task_id of this EventLog.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def worker_id(self):
        """Gets the worker_id of this EventLog.  # noqa: E501


        :return: The worker_id of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this EventLog.


        :param worker_id: The worker_id of this EventLog.  # noqa: E501
        :type: str
        """

        self._worker_id = worker_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
