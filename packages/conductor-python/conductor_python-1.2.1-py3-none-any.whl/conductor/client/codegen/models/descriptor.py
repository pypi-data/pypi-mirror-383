# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Descriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containing_type': 'Descriptor',
        'enum_types': 'list[EnumDescriptor]',
        'extendable': 'bool',
        'extensions': 'list[FieldDescriptor]',
        'fields': 'list[FieldDescriptor]',
        'file': 'FileDescriptor',
        'full_name': 'str',
        'index': 'int',
        'name': 'str',
        'nested_types': 'list[Descriptor]',
        'oneofs': 'list[OneofDescriptor]',
        'options': 'MessageOptions',
        'proto': 'DescriptorProto',
        'real_oneofs': 'list[OneofDescriptor]'
    }

    attribute_map = {
        'containing_type': 'containingType',
        'enum_types': 'enumTypes',
        'extendable': 'extendable',
        'extensions': 'extensions',
        'fields': 'fields',
        'file': 'file',
        'full_name': 'fullName',
        'index': 'index',
        'name': 'name',
        'nested_types': 'nestedTypes',
        'oneofs': 'oneofs',
        'options': 'options',
        'proto': 'proto',
        'real_oneofs': 'realOneofs'
    }

    def __init__(self, containing_type=None, enum_types=None, extendable=None, extensions=None, fields=None, file=None, full_name=None, index=None, name=None, nested_types=None, oneofs=None, options=None, proto=None, real_oneofs=None):  # noqa: E501
        """Descriptor - a model defined in Swagger"""  # noqa: E501
        self._containing_type = None
        self._enum_types = None
        self._extendable = None
        self._extensions = None
        self._fields = None
        self._file = None
        self._full_name = None
        self._index = None
        self._name = None
        self._nested_types = None
        self._oneofs = None
        self._options = None
        self._proto = None
        self._real_oneofs = None
        self.discriminator = None
        if containing_type is not None:
            self.containing_type = containing_type
        if enum_types is not None:
            self.enum_types = enum_types
        if extendable is not None:
            self.extendable = extendable
        if extensions is not None:
            self.extensions = extensions
        if fields is not None:
            self.fields = fields
        if file is not None:
            self.file = file
        if full_name is not None:
            self.full_name = full_name
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if nested_types is not None:
            self.nested_types = nested_types
        if oneofs is not None:
            self.oneofs = oneofs
        if options is not None:
            self.options = options
        if proto is not None:
            self.proto = proto
        if real_oneofs is not None:
            self.real_oneofs = real_oneofs

    @property
    def containing_type(self):
        """Gets the containing_type of this Descriptor.  # noqa: E501


        :return: The containing_type of this Descriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._containing_type

    @containing_type.setter
    def containing_type(self, containing_type):
        """Sets the containing_type of this Descriptor.


        :param containing_type: The containing_type of this Descriptor.  # noqa: E501
        :type: Descriptor
        """

        self._containing_type = containing_type

    @property
    def enum_types(self):
        """Gets the enum_types of this Descriptor.  # noqa: E501


        :return: The enum_types of this Descriptor.  # noqa: E501
        :rtype: list[EnumDescriptor]
        """
        return self._enum_types

    @enum_types.setter
    def enum_types(self, enum_types):
        """Sets the enum_types of this Descriptor.


        :param enum_types: The enum_types of this Descriptor.  # noqa: E501
        :type: list[EnumDescriptor]
        """

        self._enum_types = enum_types

    @property
    def extendable(self):
        """Gets the extendable of this Descriptor.  # noqa: E501


        :return: The extendable of this Descriptor.  # noqa: E501
        :rtype: bool
        """
        return self._extendable

    @extendable.setter
    def extendable(self, extendable):
        """Sets the extendable of this Descriptor.


        :param extendable: The extendable of this Descriptor.  # noqa: E501
        :type: bool
        """

        self._extendable = extendable

    @property
    def extensions(self):
        """Gets the extensions of this Descriptor.  # noqa: E501


        :return: The extensions of this Descriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Descriptor.


        :param extensions: The extensions of this Descriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._extensions = extensions

    @property
    def fields(self):
        """Gets the fields of this Descriptor.  # noqa: E501


        :return: The fields of this Descriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Descriptor.


        :param fields: The fields of this Descriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._fields = fields

    @property
    def file(self):
        """Gets the file of this Descriptor.  # noqa: E501


        :return: The file of this Descriptor.  # noqa: E501
        :rtype: FileDescriptor
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Descriptor.


        :param file: The file of this Descriptor.  # noqa: E501
        :type: FileDescriptor
        """

        self._file = file

    @property
    def full_name(self):
        """Gets the full_name of this Descriptor.  # noqa: E501


        :return: The full_name of this Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Descriptor.


        :param full_name: The full_name of this Descriptor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def index(self):
        """Gets the index of this Descriptor.  # noqa: E501


        :return: The index of this Descriptor.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Descriptor.


        :param index: The index of this Descriptor.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this Descriptor.  # noqa: E501


        :return: The name of this Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Descriptor.


        :param name: The name of this Descriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nested_types(self):
        """Gets the nested_types of this Descriptor.  # noqa: E501


        :return: The nested_types of this Descriptor.  # noqa: E501
        :rtype: list[Descriptor]
        """
        return self._nested_types

    @nested_types.setter
    def nested_types(self, nested_types):
        """Sets the nested_types of this Descriptor.


        :param nested_types: The nested_types of this Descriptor.  # noqa: E501
        :type: list[Descriptor]
        """

        self._nested_types = nested_types

    @property
    def oneofs(self):
        """Gets the oneofs of this Descriptor.  # noqa: E501


        :return: The oneofs of this Descriptor.  # noqa: E501
        :rtype: list[OneofDescriptor]
        """
        return self._oneofs

    @oneofs.setter
    def oneofs(self, oneofs):
        """Sets the oneofs of this Descriptor.


        :param oneofs: The oneofs of this Descriptor.  # noqa: E501
        :type: list[OneofDescriptor]
        """

        self._oneofs = oneofs

    @property
    def options(self):
        """Gets the options of this Descriptor.  # noqa: E501


        :return: The options of this Descriptor.  # noqa: E501
        :rtype: MessageOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Descriptor.


        :param options: The options of this Descriptor.  # noqa: E501
        :type: MessageOptions
        """

        self._options = options

    @property
    def proto(self):
        """Gets the proto of this Descriptor.  # noqa: E501


        :return: The proto of this Descriptor.  # noqa: E501
        :rtype: DescriptorProto
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this Descriptor.


        :param proto: The proto of this Descriptor.  # noqa: E501
        :type: DescriptorProto
        """

        self._proto = proto

    @property
    def real_oneofs(self):
        """Gets the real_oneofs of this Descriptor.  # noqa: E501


        :return: The real_oneofs of this Descriptor.  # noqa: E501
        :rtype: list[OneofDescriptor]
        """
        return self._real_oneofs

    @real_oneofs.setter
    def real_oneofs(self, real_oneofs):
        """Sets the real_oneofs of this Descriptor.


        :param real_oneofs: The real_oneofs of this Descriptor.  # noqa: E501
        :type: list[OneofDescriptor]
        """

        self._real_oneofs = real_oneofs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Descriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Descriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
