# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'correlation_id': 'str',
        'end_time': 'str',
        'execution_time': 'int',
        'external_input_payload_storage_path': 'str',
        'external_output_payload_storage_path': 'str',
        'input': 'str',
        'output': 'str',
        'queue_wait_time': 'int',
        'reason_for_incompletion': 'str',
        'scheduled_time': 'str',
        'start_time': 'str',
        'status': 'str',
        'task_def_name': 'str',
        'task_id': 'str',
        'task_reference_name': 'str',
        'task_type': 'str',
        'update_time': 'str',
        'workflow_id': 'str',
        'workflow_priority': 'int',
        'workflow_type': 'str'
    }

    attribute_map = {
        'correlation_id': 'correlationId',
        'end_time': 'endTime',
        'execution_time': 'executionTime',
        'external_input_payload_storage_path': 'externalInputPayloadStoragePath',
        'external_output_payload_storage_path': 'externalOutputPayloadStoragePath',
        'input': 'input',
        'output': 'output',
        'queue_wait_time': 'queueWaitTime',
        'reason_for_incompletion': 'reasonForIncompletion',
        'scheduled_time': 'scheduledTime',
        'start_time': 'startTime',
        'status': 'status',
        'task_def_name': 'taskDefName',
        'task_id': 'taskId',
        'task_reference_name': 'taskReferenceName',
        'task_type': 'taskType',
        'update_time': 'updateTime',
        'workflow_id': 'workflowId',
        'workflow_priority': 'workflowPriority',
        'workflow_type': 'workflowType'
    }

    def __init__(self, correlation_id=None, end_time=None, execution_time=None, external_input_payload_storage_path=None, external_output_payload_storage_path=None, input=None, output=None, queue_wait_time=None, reason_for_incompletion=None, scheduled_time=None, start_time=None, status=None, task_def_name=None, task_id=None, task_reference_name=None, task_type=None, update_time=None, workflow_id=None, workflow_priority=None, workflow_type=None):  # noqa: E501
        """TaskSummary - a model defined in Swagger"""  # noqa: E501
        self._correlation_id = None
        self._end_time = None
        self._execution_time = None
        self._external_input_payload_storage_path = None
        self._external_output_payload_storage_path = None
        self._input = None
        self._output = None
        self._queue_wait_time = None
        self._reason_for_incompletion = None
        self._scheduled_time = None
        self._start_time = None
        self._status = None
        self._task_def_name = None
        self._task_id = None
        self._task_reference_name = None
        self._task_type = None
        self._update_time = None
        self._workflow_id = None
        self._workflow_priority = None
        self._workflow_type = None
        self.discriminator = None
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if end_time is not None:
            self.end_time = end_time
        if execution_time is not None:
            self.execution_time = execution_time
        if external_input_payload_storage_path is not None:
            self.external_input_payload_storage_path = external_input_payload_storage_path
        if external_output_payload_storage_path is not None:
            self.external_output_payload_storage_path = external_output_payload_storage_path
        if input is not None:
            self.input = input
        if output is not None:
            self.output = output
        if queue_wait_time is not None:
            self.queue_wait_time = queue_wait_time
        if reason_for_incompletion is not None:
            self.reason_for_incompletion = reason_for_incompletion
        if scheduled_time is not None:
            self.scheduled_time = scheduled_time
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if task_def_name is not None:
            self.task_def_name = task_def_name
        if task_id is not None:
            self.task_id = task_id
        if task_reference_name is not None:
            self.task_reference_name = task_reference_name
        if task_type is not None:
            self.task_type = task_type
        if update_time is not None:
            self.update_time = update_time
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_priority is not None:
            self.workflow_priority = workflow_priority
        if workflow_type is not None:
            self.workflow_type = workflow_type

    @property
    def correlation_id(self):
        """Gets the correlation_id of this TaskSummary.  # noqa: E501


        :return: The correlation_id of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this TaskSummary.


        :param correlation_id: The correlation_id of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def end_time(self):
        """Gets the end_time of this TaskSummary.  # noqa: E501


        :return: The end_time of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskSummary.


        :param end_time: The end_time of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def execution_time(self):
        """Gets the execution_time of this TaskSummary.  # noqa: E501


        :return: The execution_time of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this TaskSummary.


        :param execution_time: The execution_time of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._execution_time = execution_time

    @property
    def external_input_payload_storage_path(self):
        """Gets the external_input_payload_storage_path of this TaskSummary.  # noqa: E501


        :return: The external_input_payload_storage_path of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._external_input_payload_storage_path

    @external_input_payload_storage_path.setter
    def external_input_payload_storage_path(self, external_input_payload_storage_path):
        """Sets the external_input_payload_storage_path of this TaskSummary.


        :param external_input_payload_storage_path: The external_input_payload_storage_path of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._external_input_payload_storage_path = external_input_payload_storage_path

    @property
    def external_output_payload_storage_path(self):
        """Gets the external_output_payload_storage_path of this TaskSummary.  # noqa: E501


        :return: The external_output_payload_storage_path of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._external_output_payload_storage_path

    @external_output_payload_storage_path.setter
    def external_output_payload_storage_path(self, external_output_payload_storage_path):
        """Sets the external_output_payload_storage_path of this TaskSummary.


        :param external_output_payload_storage_path: The external_output_payload_storage_path of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._external_output_payload_storage_path = external_output_payload_storage_path

    @property
    def input(self):
        """Gets the input of this TaskSummary.  # noqa: E501


        :return: The input of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this TaskSummary.


        :param input: The input of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._input = input

    @property
    def output(self):
        """Gets the output of this TaskSummary.  # noqa: E501


        :return: The output of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this TaskSummary.


        :param output: The output of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._output = output

    @property
    def queue_wait_time(self):
        """Gets the queue_wait_time of this TaskSummary.  # noqa: E501


        :return: The queue_wait_time of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._queue_wait_time

    @queue_wait_time.setter
    def queue_wait_time(self, queue_wait_time):
        """Sets the queue_wait_time of this TaskSummary.


        :param queue_wait_time: The queue_wait_time of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._queue_wait_time = queue_wait_time

    @property
    def reason_for_incompletion(self):
        """Gets the reason_for_incompletion of this TaskSummary.  # noqa: E501


        :return: The reason_for_incompletion of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_incompletion

    @reason_for_incompletion.setter
    def reason_for_incompletion(self, reason_for_incompletion):
        """Sets the reason_for_incompletion of this TaskSummary.


        :param reason_for_incompletion: The reason_for_incompletion of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._reason_for_incompletion = reason_for_incompletion

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this TaskSummary.  # noqa: E501


        :return: The scheduled_time of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this TaskSummary.


        :param scheduled_time: The scheduled_time of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._scheduled_time = scheduled_time

    @property
    def start_time(self):
        """Gets the start_time of this TaskSummary.  # noqa: E501


        :return: The start_time of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskSummary.


        :param start_time: The start_time of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TaskSummary.  # noqa: E501


        :return: The status of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskSummary.


        :param status: The status of this TaskSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "CANCELED", "FAILED", "FAILED_WITH_TERMINAL_ERROR", "COMPLETED", "COMPLETED_WITH_ERRORS", "SCHEDULED", "TIMED_OUT", "SKIPPED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_def_name(self):
        """Gets the task_def_name of this TaskSummary.  # noqa: E501


        :return: The task_def_name of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._task_def_name

    @task_def_name.setter
    def task_def_name(self, task_def_name):
        """Sets the task_def_name of this TaskSummary.


        :param task_def_name: The task_def_name of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._task_def_name = task_def_name

    @property
    def task_id(self):
        """Gets the task_id of this TaskSummary.  # noqa: E501


        :return: The task_id of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskSummary.


        :param task_id: The task_id of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def task_reference_name(self):
        """Gets the task_reference_name of this TaskSummary.  # noqa: E501


        :return: The task_reference_name of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._task_reference_name

    @task_reference_name.setter
    def task_reference_name(self, task_reference_name):
        """Sets the task_reference_name of this TaskSummary.


        :param task_reference_name: The task_reference_name of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._task_reference_name = task_reference_name

    @property
    def task_type(self):
        """Gets the task_type of this TaskSummary.  # noqa: E501


        :return: The task_type of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskSummary.


        :param task_type: The task_type of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    @property
    def update_time(self):
        """Gets the update_time of this TaskSummary.  # noqa: E501


        :return: The update_time of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TaskSummary.


        :param update_time: The update_time of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def workflow_id(self):
        """Gets the workflow_id of this TaskSummary.  # noqa: E501


        :return: The workflow_id of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this TaskSummary.


        :param workflow_id: The workflow_id of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_priority(self):
        """Gets the workflow_priority of this TaskSummary.  # noqa: E501


        :return: The workflow_priority of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._workflow_priority

    @workflow_priority.setter
    def workflow_priority(self, workflow_priority):
        """Sets the workflow_priority of this TaskSummary.


        :param workflow_priority: The workflow_priority of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._workflow_priority = workflow_priority

    @property
    def workflow_type(self):
        """Gets the workflow_type of this TaskSummary.  # noqa: E501


        :return: The workflow_type of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this TaskSummary.


        :param workflow_type: The workflow_type of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._workflow_type = workflow_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
