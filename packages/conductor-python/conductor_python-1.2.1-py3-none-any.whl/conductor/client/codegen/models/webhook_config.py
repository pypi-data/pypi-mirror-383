# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'evaluator_type': 'str',
        'expression': 'str',
        'header_key': 'str',
        'headers': 'dict(str, str)',
        'id': 'str',
        'name': 'str',
        'receiver_workflow_names_to_versions': 'dict(str, int)',
        'secret_key': 'str',
        'secret_value': 'str',
        'source_platform': 'str',
        'tags': 'list[Tag]',
        'url_verified': 'bool',
        'verifier': 'str',
        'webhook_execution_history': 'list[WebhookExecutionHistory]',
        'workflows_to_start': 'dict(str, object)'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'evaluator_type': 'evaluatorType',
        'expression': 'expression',
        'header_key': 'headerKey',
        'headers': 'headers',
        'id': 'id',
        'name': 'name',
        'receiver_workflow_names_to_versions': 'receiverWorkflowNamesToVersions',
        'secret_key': 'secretKey',
        'secret_value': 'secretValue',
        'source_platform': 'sourcePlatform',
        'tags': 'tags',
        'url_verified': 'urlVerified',
        'verifier': 'verifier',
        'webhook_execution_history': 'webhookExecutionHistory',
        'workflows_to_start': 'workflowsToStart'
    }

    def __init__(self, created_by=None, evaluator_type=None, expression=None, header_key=None, headers=None, id=None, name=None, receiver_workflow_names_to_versions=None, secret_key=None, secret_value=None, source_platform=None, tags=None, url_verified=None, verifier=None, webhook_execution_history=None, workflows_to_start=None):  # noqa: E501
        """WebhookConfig - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._evaluator_type = None
        self._expression = None
        self._header_key = None
        self._headers = None
        self._id = None
        self._name = None
        self._receiver_workflow_names_to_versions = None
        self._secret_key = None
        self._secret_value = None
        self._source_platform = None
        self._tags = None
        self._url_verified = None
        self._verifier = None
        self._webhook_execution_history = None
        self._workflows_to_start = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if evaluator_type is not None:
            self.evaluator_type = evaluator_type
        if expression is not None:
            self.expression = expression
        if header_key is not None:
            self.header_key = header_key
        if headers is not None:
            self.headers = headers
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if receiver_workflow_names_to_versions is not None:
            self.receiver_workflow_names_to_versions = receiver_workflow_names_to_versions
        if secret_key is not None:
            self.secret_key = secret_key
        if secret_value is not None:
            self.secret_value = secret_value
        if source_platform is not None:
            self.source_platform = source_platform
        if tags is not None:
            self.tags = tags
        if url_verified is not None:
            self.url_verified = url_verified
        if verifier is not None:
            self.verifier = verifier
        if webhook_execution_history is not None:
            self.webhook_execution_history = webhook_execution_history
        if workflows_to_start is not None:
            self.workflows_to_start = workflows_to_start

    @property
    def created_by(self):
        """Gets the created_by of this WebhookConfig.  # noqa: E501


        :return: The created_by of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WebhookConfig.


        :param created_by: The created_by of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def evaluator_type(self):
        """Gets the evaluator_type of this WebhookConfig.  # noqa: E501


        :return: The evaluator_type of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._evaluator_type

    @evaluator_type.setter
    def evaluator_type(self, evaluator_type):
        """Sets the evaluator_type of this WebhookConfig.


        :param evaluator_type: The evaluator_type of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._evaluator_type = evaluator_type

    @property
    def expression(self):
        """Gets the expression of this WebhookConfig.  # noqa: E501


        :return: The expression of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this WebhookConfig.


        :param expression: The expression of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def header_key(self):
        """Gets the header_key of this WebhookConfig.  # noqa: E501


        :return: The header_key of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._header_key

    @header_key.setter
    def header_key(self, header_key):
        """Sets the header_key of this WebhookConfig.


        :param header_key: The header_key of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._header_key = header_key

    @property
    def headers(self):
        """Gets the headers of this WebhookConfig.  # noqa: E501


        :return: The headers of this WebhookConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this WebhookConfig.


        :param headers: The headers of this WebhookConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def id(self):
        """Gets the id of this WebhookConfig.  # noqa: E501


        :return: The id of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookConfig.


        :param id: The id of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WebhookConfig.  # noqa: E501


        :return: The name of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookConfig.


        :param name: The name of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def receiver_workflow_names_to_versions(self):
        """Gets the receiver_workflow_names_to_versions of this WebhookConfig.  # noqa: E501


        :return: The receiver_workflow_names_to_versions of this WebhookConfig.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._receiver_workflow_names_to_versions

    @receiver_workflow_names_to_versions.setter
    def receiver_workflow_names_to_versions(self, receiver_workflow_names_to_versions):
        """Sets the receiver_workflow_names_to_versions of this WebhookConfig.


        :param receiver_workflow_names_to_versions: The receiver_workflow_names_to_versions of this WebhookConfig.  # noqa: E501
        :type: dict(str, int)
        """

        self._receiver_workflow_names_to_versions = receiver_workflow_names_to_versions

    @property
    def secret_key(self):
        """Gets the secret_key of this WebhookConfig.  # noqa: E501


        :return: The secret_key of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this WebhookConfig.


        :param secret_key: The secret_key of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def secret_value(self):
        """Gets the secret_value of this WebhookConfig.  # noqa: E501


        :return: The secret_value of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._secret_value

    @secret_value.setter
    def secret_value(self, secret_value):
        """Sets the secret_value of this WebhookConfig.


        :param secret_value: The secret_value of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._secret_value = secret_value

    @property
    def source_platform(self):
        """Gets the source_platform of this WebhookConfig.  # noqa: E501


        :return: The source_platform of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._source_platform

    @source_platform.setter
    def source_platform(self, source_platform):
        """Sets the source_platform of this WebhookConfig.


        :param source_platform: The source_platform of this WebhookConfig.  # noqa: E501
        :type: str
        """

        self._source_platform = source_platform

    @property
    def tags(self):
        """Gets the tags of this WebhookConfig.  # noqa: E501


        :return: The tags of this WebhookConfig.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WebhookConfig.


        :param tags: The tags of this WebhookConfig.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def url_verified(self):
        """Gets the url_verified of this WebhookConfig.  # noqa: E501


        :return: The url_verified of this WebhookConfig.  # noqa: E501
        :rtype: bool
        """
        return self._url_verified

    @url_verified.setter
    def url_verified(self, url_verified):
        """Sets the url_verified of this WebhookConfig.


        :param url_verified: The url_verified of this WebhookConfig.  # noqa: E501
        :type: bool
        """

        self._url_verified = url_verified

    @property
    def verifier(self):
        """Gets the verifier of this WebhookConfig.  # noqa: E501


        :return: The verifier of this WebhookConfig.  # noqa: E501
        :rtype: str
        """
        return self._verifier

    @verifier.setter
    def verifier(self, verifier):
        """Sets the verifier of this WebhookConfig.


        :param verifier: The verifier of this WebhookConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["SLACK_BASED", "SIGNATURE_BASED", "HEADER_BASED", "STRIPE", "TWITTER", "HMAC_BASED", "SENDGRID"]  # noqa: E501
        if verifier not in allowed_values:
            raise ValueError(
                "Invalid value for `verifier` ({0}), must be one of {1}"  # noqa: E501
                .format(verifier, allowed_values)
            )

        self._verifier = verifier

    @property
    def webhook_execution_history(self):
        """Gets the webhook_execution_history of this WebhookConfig.  # noqa: E501


        :return: The webhook_execution_history of this WebhookConfig.  # noqa: E501
        :rtype: list[WebhookExecutionHistory]
        """
        return self._webhook_execution_history

    @webhook_execution_history.setter
    def webhook_execution_history(self, webhook_execution_history):
        """Sets the webhook_execution_history of this WebhookConfig.


        :param webhook_execution_history: The webhook_execution_history of this WebhookConfig.  # noqa: E501
        :type: list[WebhookExecutionHistory]
        """

        self._webhook_execution_history = webhook_execution_history

    @property
    def workflows_to_start(self):
        """Gets the workflows_to_start of this WebhookConfig.  # noqa: E501


        :return: The workflows_to_start of this WebhookConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._workflows_to_start

    @workflows_to_start.setter
    def workflows_to_start(self, workflows_to_start):
        """Sets the workflows_to_start of this WebhookConfig.


        :param workflows_to_start: The workflows_to_start of this WebhookConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._workflows_to_start = workflows_to_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
