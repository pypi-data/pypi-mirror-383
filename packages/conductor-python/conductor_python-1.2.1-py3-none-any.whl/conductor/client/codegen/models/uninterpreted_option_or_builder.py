# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UninterpretedOptionOrBuilder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregate_value': 'str',
        'aggregate_value_bytes': 'ByteString',
        'all_fields': 'dict(str, object)',
        'default_instance_for_type': 'Message',
        'descriptor_for_type': 'Descriptor',
        'double_value': 'float',
        'identifier_value': 'str',
        'identifier_value_bytes': 'ByteString',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'name_count': 'int',
        'name_list': 'list[NamePart]',
        'name_or_builder_list': 'list[NamePartOrBuilder]',
        'negative_int_value': 'int',
        'positive_int_value': 'int',
        'string_value': 'ByteString',
        'unknown_fields': 'UnknownFieldSet'
    }

    attribute_map = {
        'aggregate_value': 'aggregateValue',
        'aggregate_value_bytes': 'aggregateValueBytes',
        'all_fields': 'allFields',
        'default_instance_for_type': 'defaultInstanceForType',
        'descriptor_for_type': 'descriptorForType',
        'double_value': 'doubleValue',
        'identifier_value': 'identifierValue',
        'identifier_value_bytes': 'identifierValueBytes',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'name_count': 'nameCount',
        'name_list': 'nameList',
        'name_or_builder_list': 'nameOrBuilderList',
        'negative_int_value': 'negativeIntValue',
        'positive_int_value': 'positiveIntValue',
        'string_value': 'stringValue',
        'unknown_fields': 'unknownFields'
    }

    def __init__(self, aggregate_value=None, aggregate_value_bytes=None, all_fields=None, default_instance_for_type=None, descriptor_for_type=None, double_value=None, identifier_value=None, identifier_value_bytes=None, initialization_error_string=None, initialized=None, name_count=None, name_list=None, name_or_builder_list=None, negative_int_value=None, positive_int_value=None, string_value=None, unknown_fields=None):  # noqa: E501
        """UninterpretedOptionOrBuilder - a model defined in Swagger"""  # noqa: E501
        self._aggregate_value = None
        self._aggregate_value_bytes = None
        self._all_fields = None
        self._default_instance_for_type = None
        self._descriptor_for_type = None
        self._double_value = None
        self._identifier_value = None
        self._identifier_value_bytes = None
        self._initialization_error_string = None
        self._initialized = None
        self._name_count = None
        self._name_list = None
        self._name_or_builder_list = None
        self._negative_int_value = None
        self._positive_int_value = None
        self._string_value = None
        self._unknown_fields = None
        self.discriminator = None
        if aggregate_value is not None:
            self.aggregate_value = aggregate_value
        if aggregate_value_bytes is not None:
            self.aggregate_value_bytes = aggregate_value_bytes
        if all_fields is not None:
            self.all_fields = all_fields
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if double_value is not None:
            self.double_value = double_value
        if identifier_value is not None:
            self.identifier_value = identifier_value
        if identifier_value_bytes is not None:
            self.identifier_value_bytes = identifier_value_bytes
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if name_count is not None:
            self.name_count = name_count
        if name_list is not None:
            self.name_list = name_list
        if name_or_builder_list is not None:
            self.name_or_builder_list = name_or_builder_list
        if negative_int_value is not None:
            self.negative_int_value = negative_int_value
        if positive_int_value is not None:
            self.positive_int_value = positive_int_value
        if string_value is not None:
            self.string_value = string_value
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields

    @property
    def aggregate_value(self):
        """Gets the aggregate_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The aggregate_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_value

    @aggregate_value.setter
    def aggregate_value(self, aggregate_value):
        """Sets the aggregate_value of this UninterpretedOptionOrBuilder.


        :param aggregate_value: The aggregate_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: str
        """

        self._aggregate_value = aggregate_value

    @property
    def aggregate_value_bytes(self):
        """Gets the aggregate_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The aggregate_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: ByteString
        """
        return self._aggregate_value_bytes

    @aggregate_value_bytes.setter
    def aggregate_value_bytes(self, aggregate_value_bytes):
        """Sets the aggregate_value_bytes of this UninterpretedOptionOrBuilder.


        :param aggregate_value_bytes: The aggregate_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: ByteString
        """

        self._aggregate_value_bytes = aggregate_value_bytes

    @property
    def all_fields(self):
        """Gets the all_fields of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The all_fields of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this UninterpretedOptionOrBuilder.


        :param all_fields: The all_fields of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The default_instance_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: Message
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this UninterpretedOptionOrBuilder.


        :param default_instance_for_type: The default_instance_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: Message
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The descriptor_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this UninterpretedOptionOrBuilder.


        :param descriptor_for_type: The descriptor_for_type of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def double_value(self):
        """Gets the double_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The double_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this UninterpretedOptionOrBuilder.


        :param double_value: The double_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: float
        """

        self._double_value = double_value

    @property
    def identifier_value(self):
        """Gets the identifier_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The identifier_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._identifier_value

    @identifier_value.setter
    def identifier_value(self, identifier_value):
        """Sets the identifier_value of this UninterpretedOptionOrBuilder.


        :param identifier_value: The identifier_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: str
        """

        self._identifier_value = identifier_value

    @property
    def identifier_value_bytes(self):
        """Gets the identifier_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The identifier_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: ByteString
        """
        return self._identifier_value_bytes

    @identifier_value_bytes.setter
    def identifier_value_bytes(self, identifier_value_bytes):
        """Sets the identifier_value_bytes of this UninterpretedOptionOrBuilder.


        :param identifier_value_bytes: The identifier_value_bytes of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: ByteString
        """

        self._identifier_value_bytes = identifier_value_bytes

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The initialization_error_string of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this UninterpretedOptionOrBuilder.


        :param initialization_error_string: The initialization_error_string of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The initialized of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this UninterpretedOptionOrBuilder.


        :param initialized: The initialized of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def name_count(self):
        """Gets the name_count of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The name_count of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: int
        """
        return self._name_count

    @name_count.setter
    def name_count(self, name_count):
        """Sets the name_count of this UninterpretedOptionOrBuilder.


        :param name_count: The name_count of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: int
        """

        self._name_count = name_count

    @property
    def name_list(self):
        """Gets the name_list of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The name_list of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: list[NamePart]
        """
        return self._name_list

    @name_list.setter
    def name_list(self, name_list):
        """Sets the name_list of this UninterpretedOptionOrBuilder.


        :param name_list: The name_list of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: list[NamePart]
        """

        self._name_list = name_list

    @property
    def name_or_builder_list(self):
        """Gets the name_or_builder_list of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The name_or_builder_list of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: list[NamePartOrBuilder]
        """
        return self._name_or_builder_list

    @name_or_builder_list.setter
    def name_or_builder_list(self, name_or_builder_list):
        """Sets the name_or_builder_list of this UninterpretedOptionOrBuilder.


        :param name_or_builder_list: The name_or_builder_list of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: list[NamePartOrBuilder]
        """

        self._name_or_builder_list = name_or_builder_list

    @property
    def negative_int_value(self):
        """Gets the negative_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The negative_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: int
        """
        return self._negative_int_value

    @negative_int_value.setter
    def negative_int_value(self, negative_int_value):
        """Sets the negative_int_value of this UninterpretedOptionOrBuilder.


        :param negative_int_value: The negative_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: int
        """

        self._negative_int_value = negative_int_value

    @property
    def positive_int_value(self):
        """Gets the positive_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The positive_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: int
        """
        return self._positive_int_value

    @positive_int_value.setter
    def positive_int_value(self, positive_int_value):
        """Sets the positive_int_value of this UninterpretedOptionOrBuilder.


        :param positive_int_value: The positive_int_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: int
        """

        self._positive_int_value = positive_int_value

    @property
    def string_value(self):
        """Gets the string_value of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The string_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: ByteString
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this UninterpretedOptionOrBuilder.


        :param string_value: The string_value of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: ByteString
        """

        self._string_value = string_value

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this UninterpretedOptionOrBuilder.  # noqa: E501


        :return: The unknown_fields of this UninterpretedOptionOrBuilder.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this UninterpretedOptionOrBuilder.


        :param unknown_fields: The unknown_fields of this UninterpretedOptionOrBuilder.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UninterpretedOptionOrBuilder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UninterpretedOptionOrBuilder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
