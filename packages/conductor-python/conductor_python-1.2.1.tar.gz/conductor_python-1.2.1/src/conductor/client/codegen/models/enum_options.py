# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_fields': 'dict(str, object)',
        'all_fields_raw': 'dict(str, object)',
        'allow_alias': 'bool',
        'default_instance_for_type': 'EnumOptions',
        'deprecated': 'bool',
        'deprecated_legacy_json_field_conflicts': 'bool',
        'descriptor_for_type': 'Descriptor',
        'features': 'FeatureSet',
        'features_or_builder': 'FeatureSetOrBuilder',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'memoized_serialized_size': 'int',
        'parser_for_type': 'ParserEnumOptions',
        'serialized_size': 'int',
        'uninterpreted_option_count': 'int',
        'uninterpreted_option_list': 'list[UninterpretedOption]',
        'uninterpreted_option_or_builder_list': 'list[UninterpretedOptionOrBuilder]',
        'unknown_fields': 'UnknownFieldSet'
    }

    attribute_map = {
        'all_fields': 'allFields',
        'all_fields_raw': 'allFieldsRaw',
        'allow_alias': 'allowAlias',
        'default_instance_for_type': 'defaultInstanceForType',
        'deprecated': 'deprecated',
        'deprecated_legacy_json_field_conflicts': 'deprecatedLegacyJsonFieldConflicts',
        'descriptor_for_type': 'descriptorForType',
        'features': 'features',
        'features_or_builder': 'featuresOrBuilder',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'memoized_serialized_size': 'memoizedSerializedSize',
        'parser_for_type': 'parserForType',
        'serialized_size': 'serializedSize',
        'uninterpreted_option_count': 'uninterpretedOptionCount',
        'uninterpreted_option_list': 'uninterpretedOptionList',
        'uninterpreted_option_or_builder_list': 'uninterpretedOptionOrBuilderList',
        'unknown_fields': 'unknownFields'
    }

    def __init__(self, all_fields=None, all_fields_raw=None, allow_alias=None, default_instance_for_type=None, deprecated=None, deprecated_legacy_json_field_conflicts=None, descriptor_for_type=None, features=None, features_or_builder=None, initialization_error_string=None, initialized=None, memoized_serialized_size=None, parser_for_type=None, serialized_size=None, uninterpreted_option_count=None, uninterpreted_option_list=None, uninterpreted_option_or_builder_list=None, unknown_fields=None):  # noqa: E501
        """EnumOptions - a model defined in Swagger"""  # noqa: E501
        self._all_fields = None
        self._all_fields_raw = None
        self._allow_alias = None
        self._default_instance_for_type = None
        self._deprecated = None
        self._deprecated_legacy_json_field_conflicts = None
        self._descriptor_for_type = None
        self._features = None
        self._features_or_builder = None
        self._initialization_error_string = None
        self._initialized = None
        self._memoized_serialized_size = None
        self._parser_for_type = None
        self._serialized_size = None
        self._uninterpreted_option_count = None
        self._uninterpreted_option_list = None
        self._uninterpreted_option_or_builder_list = None
        self._unknown_fields = None
        self.discriminator = None
        if all_fields is not None:
            self.all_fields = all_fields
        if all_fields_raw is not None:
            self.all_fields_raw = all_fields_raw
        if allow_alias is not None:
            self.allow_alias = allow_alias
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if deprecated is not None:
            self.deprecated = deprecated
        if deprecated_legacy_json_field_conflicts is not None:
            self.deprecated_legacy_json_field_conflicts = deprecated_legacy_json_field_conflicts
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if features is not None:
            self.features = features
        if features_or_builder is not None:
            self.features_or_builder = features_or_builder
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if uninterpreted_option_count is not None:
            self.uninterpreted_option_count = uninterpreted_option_count
        if uninterpreted_option_list is not None:
            self.uninterpreted_option_list = uninterpreted_option_list
        if uninterpreted_option_or_builder_list is not None:
            self.uninterpreted_option_or_builder_list = uninterpreted_option_or_builder_list
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields

    @property
    def all_fields(self):
        """Gets the all_fields of this EnumOptions.  # noqa: E501


        :return: The all_fields of this EnumOptions.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this EnumOptions.


        :param all_fields: The all_fields of this EnumOptions.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def all_fields_raw(self):
        """Gets the all_fields_raw of this EnumOptions.  # noqa: E501


        :return: The all_fields_raw of this EnumOptions.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields_raw

    @all_fields_raw.setter
    def all_fields_raw(self, all_fields_raw):
        """Sets the all_fields_raw of this EnumOptions.


        :param all_fields_raw: The all_fields_raw of this EnumOptions.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields_raw = all_fields_raw

    @property
    def allow_alias(self):
        """Gets the allow_alias of this EnumOptions.  # noqa: E501


        :return: The allow_alias of this EnumOptions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_alias

    @allow_alias.setter
    def allow_alias(self, allow_alias):
        """Sets the allow_alias of this EnumOptions.


        :param allow_alias: The allow_alias of this EnumOptions.  # noqa: E501
        :type: bool
        """

        self._allow_alias = allow_alias

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this EnumOptions.  # noqa: E501


        :return: The default_instance_for_type of this EnumOptions.  # noqa: E501
        :rtype: EnumOptions
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this EnumOptions.


        :param default_instance_for_type: The default_instance_for_type of this EnumOptions.  # noqa: E501
        :type: EnumOptions
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def deprecated(self):
        """Gets the deprecated of this EnumOptions.  # noqa: E501


        :return: The deprecated of this EnumOptions.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this EnumOptions.


        :param deprecated: The deprecated of this EnumOptions.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def deprecated_legacy_json_field_conflicts(self):
        """Gets the deprecated_legacy_json_field_conflicts of this EnumOptions.  # noqa: E501


        :return: The deprecated_legacy_json_field_conflicts of this EnumOptions.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated_legacy_json_field_conflicts

    @deprecated_legacy_json_field_conflicts.setter
    def deprecated_legacy_json_field_conflicts(self, deprecated_legacy_json_field_conflicts):
        """Sets the deprecated_legacy_json_field_conflicts of this EnumOptions.


        :param deprecated_legacy_json_field_conflicts: The deprecated_legacy_json_field_conflicts of this EnumOptions.  # noqa: E501
        :type: bool
        """

        self._deprecated_legacy_json_field_conflicts = deprecated_legacy_json_field_conflicts

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this EnumOptions.  # noqa: E501


        :return: The descriptor_for_type of this EnumOptions.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this EnumOptions.


        :param descriptor_for_type: The descriptor_for_type of this EnumOptions.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def features(self):
        """Gets the features of this EnumOptions.  # noqa: E501


        :return: The features of this EnumOptions.  # noqa: E501
        :rtype: FeatureSet
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this EnumOptions.


        :param features: The features of this EnumOptions.  # noqa: E501
        :type: FeatureSet
        """

        self._features = features

    @property
    def features_or_builder(self):
        """Gets the features_or_builder of this EnumOptions.  # noqa: E501


        :return: The features_or_builder of this EnumOptions.  # noqa: E501
        :rtype: FeatureSetOrBuilder
        """
        return self._features_or_builder

    @features_or_builder.setter
    def features_or_builder(self, features_or_builder):
        """Sets the features_or_builder of this EnumOptions.


        :param features_or_builder: The features_or_builder of this EnumOptions.  # noqa: E501
        :type: FeatureSetOrBuilder
        """

        self._features_or_builder = features_or_builder

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this EnumOptions.  # noqa: E501


        :return: The initialization_error_string of this EnumOptions.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this EnumOptions.


        :param initialization_error_string: The initialization_error_string of this EnumOptions.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this EnumOptions.  # noqa: E501


        :return: The initialized of this EnumOptions.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this EnumOptions.


        :param initialized: The initialized of this EnumOptions.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this EnumOptions.  # noqa: E501


        :return: The memoized_serialized_size of this EnumOptions.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this EnumOptions.


        :param memoized_serialized_size: The memoized_serialized_size of this EnumOptions.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this EnumOptions.  # noqa: E501


        :return: The parser_for_type of this EnumOptions.  # noqa: E501
        :rtype: ParserEnumOptions
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this EnumOptions.


        :param parser_for_type: The parser_for_type of this EnumOptions.  # noqa: E501
        :type: ParserEnumOptions
        """

        self._parser_for_type = parser_for_type

    @property
    def serialized_size(self):
        """Gets the serialized_size of this EnumOptions.  # noqa: E501


        :return: The serialized_size of this EnumOptions.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this EnumOptions.


        :param serialized_size: The serialized_size of this EnumOptions.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def uninterpreted_option_count(self):
        """Gets the uninterpreted_option_count of this EnumOptions.  # noqa: E501


        :return: The uninterpreted_option_count of this EnumOptions.  # noqa: E501
        :rtype: int
        """
        return self._uninterpreted_option_count

    @uninterpreted_option_count.setter
    def uninterpreted_option_count(self, uninterpreted_option_count):
        """Sets the uninterpreted_option_count of this EnumOptions.


        :param uninterpreted_option_count: The uninterpreted_option_count of this EnumOptions.  # noqa: E501
        :type: int
        """

        self._uninterpreted_option_count = uninterpreted_option_count

    @property
    def uninterpreted_option_list(self):
        """Gets the uninterpreted_option_list of this EnumOptions.  # noqa: E501


        :return: The uninterpreted_option_list of this EnumOptions.  # noqa: E501
        :rtype: list[UninterpretedOption]
        """
        return self._uninterpreted_option_list

    @uninterpreted_option_list.setter
    def uninterpreted_option_list(self, uninterpreted_option_list):
        """Sets the uninterpreted_option_list of this EnumOptions.


        :param uninterpreted_option_list: The uninterpreted_option_list of this EnumOptions.  # noqa: E501
        :type: list[UninterpretedOption]
        """

        self._uninterpreted_option_list = uninterpreted_option_list

    @property
    def uninterpreted_option_or_builder_list(self):
        """Gets the uninterpreted_option_or_builder_list of this EnumOptions.  # noqa: E501


        :return: The uninterpreted_option_or_builder_list of this EnumOptions.  # noqa: E501
        :rtype: list[UninterpretedOptionOrBuilder]
        """
        return self._uninterpreted_option_or_builder_list

    @uninterpreted_option_or_builder_list.setter
    def uninterpreted_option_or_builder_list(self, uninterpreted_option_or_builder_list):
        """Sets the uninterpreted_option_or_builder_list of this EnumOptions.


        :param uninterpreted_option_or_builder_list: The uninterpreted_option_or_builder_list of this EnumOptions.  # noqa: E501
        :type: list[UninterpretedOptionOrBuilder]
        """

        self._uninterpreted_option_or_builder_list = uninterpreted_option_or_builder_list

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this EnumOptions.  # noqa: E501


        :return: The unknown_fields of this EnumOptions.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this EnumOptions.


        :param unknown_fields: The unknown_fields of this EnumOptions.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
