# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationDefFormField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_value': 'str',
        'description': 'str',
        'field_name': 'str',
        'field_type': 'str',
        'label': 'str',
        'optional': 'bool',
        'value': 'str',
        'value_options': 'list[Option]'
    }

    attribute_map = {
        'default_value': 'defaultValue',
        'description': 'description',
        'field_name': 'fieldName',
        'field_type': 'fieldType',
        'label': 'label',
        'optional': 'optional',
        'value': 'value',
        'value_options': 'valueOptions'
    }

    def __init__(self, default_value=None, description=None, field_name=None, field_type=None, label=None, optional=None, value=None, value_options=None):  # noqa: E501
        """IntegrationDefFormField - a model defined in Swagger"""  # noqa: E501
        self._default_value = None
        self._description = None
        self._field_name = None
        self._field_type = None
        self._label = None
        self._optional = None
        self._value = None
        self._value_options = None
        self.discriminator = None
        if default_value is not None:
            self.default_value = default_value
        if description is not None:
            self.description = description
        if field_name is not None:
            self.field_name = field_name
        if field_type is not None:
            self.field_type = field_type
        if label is not None:
            self.label = label
        if optional is not None:
            self.optional = optional
        if value is not None:
            self.value = value
        if value_options is not None:
            self.value_options = value_options

    @property
    def default_value(self):
        """Gets the default_value of this IntegrationDefFormField.  # noqa: E501


        :return: The default_value of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this IntegrationDefFormField.


        :param default_value: The default_value of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this IntegrationDefFormField.  # noqa: E501


        :return: The description of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IntegrationDefFormField.


        :param description: The description of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field_name(self):
        """Gets the field_name of this IntegrationDefFormField.  # noqa: E501


        :return: The field_name of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this IntegrationDefFormField.


        :param field_name: The field_name of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """
        allowed_values = ["api_key", "user", "endpoint", "authUrl", "environment", "projectName", "indexName", "publisher", "password", "namespace", "batchSize", "batchWaitTime", "visibilityTimeout", "connectionType", "consumer", "stream", "batchPollConsumersCount", "consumer_type", "region", "awsAccountId", "externalId", "roleArn", "protocol", "mechanism", "port", "schemaRegistryUrl", "schemaRegistryApiKey", "schemaRegistryApiSecret", "authenticationType", "truststoreAuthenticationType", "tls", "cipherSuite", "pubSubMethod", "keyStorePassword", "keyStoreLocation", "schemaRegistryAuthType", "valueSubjectNameStrategy", "datasourceURL", "jdbcDriver", "subscription", "serviceAccountCredentials", "file", "tlsFile", "queueManager", "groupId", "channel", "dimensions", "distance_metric", "indexing_method", "inverted_list_count"]  # noqa: E501
        if field_name not in allowed_values:
            raise ValueError(
                "Invalid value for `field_name` ({0}), must be one of {1}"  # noqa: E501
                .format(field_name, allowed_values)
            )

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this IntegrationDefFormField.  # noqa: E501


        :return: The field_type of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this IntegrationDefFormField.


        :param field_type: The field_type of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """
        allowed_values = ["DROPDOWN", "TEXT", "PASSWORD", "FILE"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"  # noqa: E501
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def label(self):
        """Gets the label of this IntegrationDefFormField.  # noqa: E501


        :return: The label of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IntegrationDefFormField.


        :param label: The label of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def optional(self):
        """Gets the optional of this IntegrationDefFormField.  # noqa: E501


        :return: The optional of this IntegrationDefFormField.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this IntegrationDefFormField.


        :param optional: The optional of this IntegrationDefFormField.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def value(self):
        """Gets the value of this IntegrationDefFormField.  # noqa: E501


        :return: The value of this IntegrationDefFormField.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IntegrationDefFormField.


        :param value: The value of this IntegrationDefFormField.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_options(self):
        """Gets the value_options of this IntegrationDefFormField.  # noqa: E501


        :return: The value_options of this IntegrationDefFormField.  # noqa: E501
        :rtype: list[Option]
        """
        return self._value_options

    @value_options.setter
    def value_options(self, value_options):
        """Sets the value_options of this IntegrationDefFormField.


        :param value_options: The value_options of this IntegrationDefFormField.  # noqa: E501
        :type: list[Option]
        """

        self._value_options = value_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationDefFormField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationDefFormField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
