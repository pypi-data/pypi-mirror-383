# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookExecutionHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'str',
        'matched': 'bool',
        'payload': 'str',
        'time_stamp': 'int',
        'workflow_ids': 'list[str]'
    }

    attribute_map = {
        'event_id': 'eventId',
        'matched': 'matched',
        'payload': 'payload',
        'time_stamp': 'timeStamp',
        'workflow_ids': 'workflowIds'
    }

    def __init__(self, event_id=None, matched=None, payload=None, time_stamp=None, workflow_ids=None):  # noqa: E501
        """WebhookExecutionHistory - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._matched = None
        self._payload = None
        self._time_stamp = None
        self._workflow_ids = None
        self.discriminator = None
        if event_id is not None:
            self.event_id = event_id
        if matched is not None:
            self.matched = matched
        if payload is not None:
            self.payload = payload
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if workflow_ids is not None:
            self.workflow_ids = workflow_ids

    @property
    def event_id(self):
        """Gets the event_id of this WebhookExecutionHistory.  # noqa: E501


        :return: The event_id of this WebhookExecutionHistory.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this WebhookExecutionHistory.


        :param event_id: The event_id of this WebhookExecutionHistory.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def matched(self):
        """Gets the matched of this WebhookExecutionHistory.  # noqa: E501


        :return: The matched of this WebhookExecutionHistory.  # noqa: E501
        :rtype: bool
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this WebhookExecutionHistory.


        :param matched: The matched of this WebhookExecutionHistory.  # noqa: E501
        :type: bool
        """

        self._matched = matched

    @property
    def payload(self):
        """Gets the payload of this WebhookExecutionHistory.  # noqa: E501


        :return: The payload of this WebhookExecutionHistory.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this WebhookExecutionHistory.


        :param payload: The payload of this WebhookExecutionHistory.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def time_stamp(self):
        """Gets the time_stamp of this WebhookExecutionHistory.  # noqa: E501


        :return: The time_stamp of this WebhookExecutionHistory.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this WebhookExecutionHistory.


        :param time_stamp: The time_stamp of this WebhookExecutionHistory.  # noqa: E501
        :type: int
        """

        self._time_stamp = time_stamp

    @property
    def workflow_ids(self):
        """Gets the workflow_ids of this WebhookExecutionHistory.  # noqa: E501


        :return: The workflow_ids of this WebhookExecutionHistory.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_ids

    @workflow_ids.setter
    def workflow_ids(self, workflow_ids):
        """Sets the workflow_ids of this WebhookExecutionHistory.


        :param workflow_ids: The workflow_ids of this WebhookExecutionHistory.  # noqa: E501
        :type: list[str]
        """

        self._workflow_ids = workflow_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookExecutionHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookExecutionHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
