# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtendedEventExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'created': 'int',
        'event': 'str',
        'event_handler': 'EventHandler',
        'full_message_payload': 'dict(str, object)',
        'id': 'str',
        'message_id': 'str',
        'name': 'str',
        'org_id': 'str',
        'output': 'dict(str, object)',
        'payload': 'dict(str, object)',
        'status': 'str',
        'status_description': 'str'
    }

    attribute_map = {
        'action': 'action',
        'created': 'created',
        'event': 'event',
        'event_handler': 'eventHandler',
        'full_message_payload': 'fullMessagePayload',
        'id': 'id',
        'message_id': 'messageId',
        'name': 'name',
        'org_id': 'orgId',
        'output': 'output',
        'payload': 'payload',
        'status': 'status',
        'status_description': 'statusDescription'
    }

    def __init__(self, action=None, created=None, event=None, event_handler=None, full_message_payload=None, id=None, message_id=None, name=None, org_id=None, output=None, payload=None, status=None, status_description=None):  # noqa: E501
        """ExtendedEventExecution - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._created = None
        self._event = None
        self._event_handler = None
        self._full_message_payload = None
        self._id = None
        self._message_id = None
        self._name = None
        self._org_id = None
        self._output = None
        self._payload = None
        self._status = None
        self._status_description = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if created is not None:
            self.created = created
        if event is not None:
            self.event = event
        if event_handler is not None:
            self.event_handler = event_handler
        if full_message_payload is not None:
            self.full_message_payload = full_message_payload
        if id is not None:
            self.id = id
        if message_id is not None:
            self.message_id = message_id
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if output is not None:
            self.output = output
        if payload is not None:
            self.payload = payload
        if status is not None:
            self.status = status
        if status_description is not None:
            self.status_description = status_description

    @property
    def action(self):
        """Gets the action of this ExtendedEventExecution.  # noqa: E501


        :return: The action of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ExtendedEventExecution.


        :param action: The action of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["start_workflow", "complete_task", "fail_task", "terminate_workflow", "update_workflow_variables"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def created(self):
        """Gets the created of this ExtendedEventExecution.  # noqa: E501


        :return: The created of this ExtendedEventExecution.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ExtendedEventExecution.


        :param created: The created of this ExtendedEventExecution.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def event(self):
        """Gets the event of this ExtendedEventExecution.  # noqa: E501


        :return: The event of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ExtendedEventExecution.


        :param event: The event of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def event_handler(self):
        """Gets the event_handler of this ExtendedEventExecution.  # noqa: E501


        :return: The event_handler of this ExtendedEventExecution.  # noqa: E501
        :rtype: EventHandler
        """
        return self._event_handler

    @event_handler.setter
    def event_handler(self, event_handler):
        """Sets the event_handler of this ExtendedEventExecution.


        :param event_handler: The event_handler of this ExtendedEventExecution.  # noqa: E501
        :type: EventHandler
        """

        self._event_handler = event_handler

    @property
    def full_message_payload(self):
        """Gets the full_message_payload of this ExtendedEventExecution.  # noqa: E501


        :return: The full_message_payload of this ExtendedEventExecution.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._full_message_payload

    @full_message_payload.setter
    def full_message_payload(self, full_message_payload):
        """Sets the full_message_payload of this ExtendedEventExecution.


        :param full_message_payload: The full_message_payload of this ExtendedEventExecution.  # noqa: E501
        :type: dict(str, object)
        """

        self._full_message_payload = full_message_payload

    @property
    def id(self):
        """Gets the id of this ExtendedEventExecution.  # noqa: E501


        :return: The id of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedEventExecution.


        :param id: The id of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_id(self):
        """Gets the message_id of this ExtendedEventExecution.  # noqa: E501


        :return: The message_id of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ExtendedEventExecution.


        :param message_id: The message_id of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def name(self):
        """Gets the name of this ExtendedEventExecution.  # noqa: E501


        :return: The name of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtendedEventExecution.


        :param name: The name of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this ExtendedEventExecution.  # noqa: E501


        :return: The org_id of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ExtendedEventExecution.


        :param org_id: The org_id of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def output(self):
        """Gets the output of this ExtendedEventExecution.  # noqa: E501


        :return: The output of this ExtendedEventExecution.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ExtendedEventExecution.


        :param output: The output of this ExtendedEventExecution.  # noqa: E501
        :type: dict(str, object)
        """

        self._output = output

    @property
    def payload(self):
        """Gets the payload of this ExtendedEventExecution.  # noqa: E501


        :return: The payload of this ExtendedEventExecution.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ExtendedEventExecution.


        :param payload: The payload of this ExtendedEventExecution.  # noqa: E501
        :type: dict(str, object)
        """

        self._payload = payload

    @property
    def status(self):
        """Gets the status of this ExtendedEventExecution.  # noqa: E501


        :return: The status of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtendedEventExecution.


        :param status: The status of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "COMPLETED", "FAILED", "SKIPPED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this ExtendedEventExecution.  # noqa: E501


        :return: The status_description of this ExtendedEventExecution.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this ExtendedEventExecution.


        :param status_description: The status_description of this ExtendedEventExecution.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedEventExecution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedEventExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
