# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RateLimitConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concurrent_exec_limit': 'int',
        'rate_limit_key': 'str'
    }

    attribute_map = {
        'concurrent_exec_limit': 'concurrentExecLimit',
        'rate_limit_key': 'rateLimitKey'
    }

    def __init__(self, concurrent_exec_limit=None, rate_limit_key=None):  # noqa: E501
        """RateLimitConfig - a model defined in Swagger"""  # noqa: E501
        self._concurrent_exec_limit = None
        self._rate_limit_key = None
        self.discriminator = None
        if concurrent_exec_limit is not None:
            self.concurrent_exec_limit = concurrent_exec_limit
        if rate_limit_key is not None:
            self.rate_limit_key = rate_limit_key

    @property
    def concurrent_exec_limit(self):
        """Gets the concurrent_exec_limit of this RateLimitConfig.  # noqa: E501


        :return: The concurrent_exec_limit of this RateLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_exec_limit

    @concurrent_exec_limit.setter
    def concurrent_exec_limit(self, concurrent_exec_limit):
        """Sets the concurrent_exec_limit of this RateLimitConfig.


        :param concurrent_exec_limit: The concurrent_exec_limit of this RateLimitConfig.  # noqa: E501
        :type: int
        """

        self._concurrent_exec_limit = concurrent_exec_limit

    @property
    def rate_limit_key(self):
        """Gets the rate_limit_key of this RateLimitConfig.  # noqa: E501


        :return: The rate_limit_key of this RateLimitConfig.  # noqa: E501
        :rtype: str
        """
        return self._rate_limit_key

    @rate_limit_key.setter
    def rate_limit_key(self, rate_limit_key):
        """Sets the rate_limit_key of this RateLimitConfig.


        :param rate_limit_key: The rate_limit_key of this RateLimitConfig.  # noqa: E501
        :type: str
        """

        self._rate_limit_key = rate_limit_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RateLimitConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateLimitConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
