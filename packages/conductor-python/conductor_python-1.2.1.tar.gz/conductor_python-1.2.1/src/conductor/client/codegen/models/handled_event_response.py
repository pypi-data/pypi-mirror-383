# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HandledEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'event': 'str',
        'name': 'str',
        'number_of_actions': 'int',
        'number_of_messages': 'int'
    }

    attribute_map = {
        'active': 'active',
        'event': 'event',
        'name': 'name',
        'number_of_actions': 'numberOfActions',
        'number_of_messages': 'numberOfMessages'
    }

    def __init__(self, active=None, event=None, name=None, number_of_actions=None, number_of_messages=None):  # noqa: E501
        """HandledEventResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._event = None
        self._name = None
        self._number_of_actions = None
        self._number_of_messages = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if event is not None:
            self.event = event
        if name is not None:
            self.name = name
        if number_of_actions is not None:
            self.number_of_actions = number_of_actions
        if number_of_messages is not None:
            self.number_of_messages = number_of_messages

    @property
    def active(self):
        """Gets the active of this HandledEventResponse.  # noqa: E501


        :return: The active of this HandledEventResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this HandledEventResponse.


        :param active: The active of this HandledEventResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def event(self):
        """Gets the event of this HandledEventResponse.  # noqa: E501


        :return: The event of this HandledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HandledEventResponse.


        :param event: The event of this HandledEventResponse.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def name(self):
        """Gets the name of this HandledEventResponse.  # noqa: E501


        :return: The name of this HandledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HandledEventResponse.


        :param name: The name of this HandledEventResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_actions(self):
        """Gets the number_of_actions of this HandledEventResponse.  # noqa: E501


        :return: The number_of_actions of this HandledEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_actions

    @number_of_actions.setter
    def number_of_actions(self, number_of_actions):
        """Sets the number_of_actions of this HandledEventResponse.


        :param number_of_actions: The number_of_actions of this HandledEventResponse.  # noqa: E501
        :type: int
        """

        self._number_of_actions = number_of_actions

    @property
    def number_of_messages(self):
        """Gets the number_of_messages of this HandledEventResponse.  # noqa: E501


        :return: The number_of_messages of this HandledEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_messages

    @number_of_messages.setter
    def number_of_messages(self, number_of_messages):
        """Sets the number_of_messages of this HandledEventResponse.


        :param number_of_messages: The number_of_messages of this HandledEventResponse.  # noqa: E501
        :type: int
        """

        self._number_of_messages = number_of_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HandledEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HandledEventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
