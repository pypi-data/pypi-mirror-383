# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'int',
        'created_by': 'str',
        'data': 'dict(str, object)',
        'external_ref': 'str',
        'name': 'str',
        'owner_app': 'str',
        'type': 'str',
        'update_time': 'int',
        'updated_by': 'str',
        'version': 'int'
    }

    attribute_map = {
        'create_time': 'createTime',
        'created_by': 'createdBy',
        'data': 'data',
        'external_ref': 'externalRef',
        'name': 'name',
        'owner_app': 'ownerApp',
        'type': 'type',
        'update_time': 'updateTime',
        'updated_by': 'updatedBy',
        'version': 'version'
    }

    def __init__(self, create_time=None, created_by=None, data=None, external_ref=None, name=None, owner_app=None, type=None, update_time=None, updated_by=None, version=None):  # noqa: E501
        """SchemaDef - a model defined in Swagger"""  # noqa: E501
        self._create_time = None
        self._created_by = None
        self._data = None
        self._external_ref = None
        self._name = None
        self._owner_app = None
        self._type = None
        self._update_time = None
        self._updated_by = None
        self._version = None
        self.discriminator = None
        if create_time is not None:
            self.create_time = create_time
        if created_by is not None:
            self.created_by = created_by
        if data is not None:
            self.data = data
        if external_ref is not None:
            self.external_ref = external_ref
        self.name = name
        if owner_app is not None:
            self.owner_app = owner_app
        self.type = type
        if update_time is not None:
            self.update_time = update_time
        if updated_by is not None:
            self.updated_by = updated_by
        self.version = version

    @property
    def create_time(self):
        """Gets the create_time of this SchemaDef.  # noqa: E501


        :return: The create_time of this SchemaDef.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SchemaDef.


        :param create_time: The create_time of this SchemaDef.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def created_by(self):
        """Gets the created_by of this SchemaDef.  # noqa: E501


        :return: The created_by of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SchemaDef.


        :param created_by: The created_by of this SchemaDef.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def data(self):
        """Gets the data of this SchemaDef.  # noqa: E501


        :return: The data of this SchemaDef.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SchemaDef.


        :param data: The data of this SchemaDef.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def external_ref(self):
        """Gets the external_ref of this SchemaDef.  # noqa: E501


        :return: The external_ref of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this SchemaDef.


        :param external_ref: The external_ref of this SchemaDef.  # noqa: E501
        :type: str
        """

        self._external_ref = external_ref

    @property
    def name(self):
        """Gets the name of this SchemaDef.  # noqa: E501


        :return: The name of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaDef.


        :param name: The name of this SchemaDef.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_app(self):
        """Gets the owner_app of this SchemaDef.  # noqa: E501


        :return: The owner_app of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._owner_app

    @owner_app.setter
    def owner_app(self, owner_app):
        """Sets the owner_app of this SchemaDef.


        :param owner_app: The owner_app of this SchemaDef.  # noqa: E501
        :type: str
        """

        self._owner_app = owner_app

    @property
    def type(self):
        """Gets the type of this SchemaDef.  # noqa: E501


        :return: The type of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaDef.


        :param type: The type of this SchemaDef.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["JSON", "AVRO", "PROTOBUF"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this SchemaDef.  # noqa: E501


        :return: The update_time of this SchemaDef.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SchemaDef.


        :param update_time: The update_time of this SchemaDef.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def updated_by(self):
        """Gets the updated_by of this SchemaDef.  # noqa: E501


        :return: The updated_by of this SchemaDef.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SchemaDef.


        :param updated_by: The updated_by of this SchemaDef.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def version(self):
        """Gets the version of this SchemaDef.  # noqa: E501


        :return: The version of this SchemaDef.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SchemaDef.


        :param version: The version of this SchemaDef.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
