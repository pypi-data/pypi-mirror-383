# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnknownFieldSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_instance_for_type': 'UnknownFieldSet',
        'initialized': 'bool',
        'parser_for_type': 'Parser',
        'serialized_size': 'int',
        'serialized_size_as_message_set': 'int'
    }

    attribute_map = {
        'default_instance_for_type': 'defaultInstanceForType',
        'initialized': 'initialized',
        'parser_for_type': 'parserForType',
        'serialized_size': 'serializedSize',
        'serialized_size_as_message_set': 'serializedSizeAsMessageSet'
    }

    def __init__(self, default_instance_for_type=None, initialized=None, parser_for_type=None, serialized_size=None, serialized_size_as_message_set=None):  # noqa: E501
        """UnknownFieldSet - a model defined in Swagger"""  # noqa: E501
        self._default_instance_for_type = None
        self._initialized = None
        self._parser_for_type = None
        self._serialized_size = None
        self._serialized_size_as_message_set = None
        self.discriminator = None
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if initialized is not None:
            self.initialized = initialized
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if serialized_size_as_message_set is not None:
            self.serialized_size_as_message_set = serialized_size_as_message_set

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this UnknownFieldSet.  # noqa: E501


        :return: The default_instance_for_type of this UnknownFieldSet.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this UnknownFieldSet.


        :param default_instance_for_type: The default_instance_for_type of this UnknownFieldSet.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def initialized(self):
        """Gets the initialized of this UnknownFieldSet.  # noqa: E501


        :return: The initialized of this UnknownFieldSet.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this UnknownFieldSet.


        :param initialized: The initialized of this UnknownFieldSet.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this UnknownFieldSet.  # noqa: E501


        :return: The parser_for_type of this UnknownFieldSet.  # noqa: E501
        :rtype: Parser
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this UnknownFieldSet.


        :param parser_for_type: The parser_for_type of this UnknownFieldSet.  # noqa: E501
        :type: Parser
        """

        self._parser_for_type = parser_for_type

    @property
    def serialized_size(self):
        """Gets the serialized_size of this UnknownFieldSet.  # noqa: E501


        :return: The serialized_size of this UnknownFieldSet.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this UnknownFieldSet.


        :param serialized_size: The serialized_size of this UnknownFieldSet.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def serialized_size_as_message_set(self):
        """Gets the serialized_size_as_message_set of this UnknownFieldSet.  # noqa: E501


        :return: The serialized_size_as_message_set of this UnknownFieldSet.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size_as_message_set

    @serialized_size_as_message_set.setter
    def serialized_size_as_message_set(self, serialized_size_as_message_set):
        """Sets the serialized_size_as_message_set of this UnknownFieldSet.


        :param serialized_size_as_message_set: The serialized_size_as_message_set of this UnknownFieldSet.  # noqa: E501
        :type: int
        """

        self._serialized_size_as_message_set = serialized_size_as_message_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnknownFieldSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnknownFieldSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
