# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubWorkflowParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idempotency_key': 'str',
        'idempotency_strategy': 'str',
        'name': 'str',
        'priority': 'int',
        'task_to_domain': 'dict(str, str)',
        'version': 'int',
        'workflow_definition': 'WorkflowDef'
    }

    attribute_map = {
        'idempotency_key': 'idempotencyKey',
        'idempotency_strategy': 'idempotencyStrategy',
        'name': 'name',
        'priority': 'priority',
        'task_to_domain': 'taskToDomain',
        'version': 'version',
        'workflow_definition': 'workflowDefinition'
    }

    def __init__(self, idempotency_key=None, idempotency_strategy=None, name=None, priority=None, task_to_domain=None, version=None, workflow_definition=None):  # noqa: E501
        """SubWorkflowParams - a model defined in Swagger"""  # noqa: E501
        self._idempotency_key = None
        self._idempotency_strategy = None
        self._name = None
        self._priority = None
        self._task_to_domain = None
        self._version = None
        self._workflow_definition = None
        self.discriminator = None
        if idempotency_key is not None:
            self.idempotency_key = idempotency_key
        if idempotency_strategy is not None:
            self.idempotency_strategy = idempotency_strategy
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if task_to_domain is not None:
            self.task_to_domain = task_to_domain
        if version is not None:
            self.version = version
        if workflow_definition is not None:
            self.workflow_definition = workflow_definition

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this SubWorkflowParams.  # noqa: E501


        :return: The idempotency_key of this SubWorkflowParams.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this SubWorkflowParams.


        :param idempotency_key: The idempotency_key of this SubWorkflowParams.  # noqa: E501
        :type: str
        """

        self._idempotency_key = idempotency_key

    @property
    def idempotency_strategy(self):
        """Gets the idempotency_strategy of this SubWorkflowParams.  # noqa: E501


        :return: The idempotency_strategy of this SubWorkflowParams.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_strategy

    @idempotency_strategy.setter
    def idempotency_strategy(self, idempotency_strategy):
        """Sets the idempotency_strategy of this SubWorkflowParams.


        :param idempotency_strategy: The idempotency_strategy of this SubWorkflowParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAIL", "RETURN_EXISTING", "FAIL_ON_RUNNING"]  # noqa: E501
        if idempotency_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `idempotency_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(idempotency_strategy, allowed_values)
            )

        self._idempotency_strategy = idempotency_strategy

    @property
    def name(self):
        """Gets the name of this SubWorkflowParams.  # noqa: E501


        :return: The name of this SubWorkflowParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubWorkflowParams.


        :param name: The name of this SubWorkflowParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this SubWorkflowParams.  # noqa: E501


        :return: The priority of this SubWorkflowParams.  # noqa: E501
        :rtype: object
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SubWorkflowParams.


        :param priority: The priority of this SubWorkflowParams.  # noqa: E501
        :type: object
        """

        self._priority = priority

    @property
    def task_to_domain(self):
        """Gets the task_to_domain of this SubWorkflowParams.  # noqa: E501


        :return: The task_to_domain of this SubWorkflowParams.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._task_to_domain

    @task_to_domain.setter
    def task_to_domain(self, task_to_domain):
        """Sets the task_to_domain of this SubWorkflowParams.


        :param task_to_domain: The task_to_domain of this SubWorkflowParams.  # noqa: E501
        :type: dict(str, str)
        """

        self._task_to_domain = task_to_domain

    @property
    def version(self):
        """Gets the version of this SubWorkflowParams.  # noqa: E501


        :return: The version of this SubWorkflowParams.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SubWorkflowParams.


        :param version: The version of this SubWorkflowParams.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def workflow_definition(self):
        """Gets the workflow_definition of this SubWorkflowParams.  # noqa: E501


        :return: The workflow_definition of this SubWorkflowParams.  # noqa: E501
        :rtype: object
        """
        return self._workflow_definition

    @workflow_definition.setter
    def workflow_definition(self, workflow_definition):
        """Sets the workflow_definition of this SubWorkflowParams.


        :param workflow_definition: The workflow_definition of this SubWorkflowParams.  # noqa: E501
        :type: object
        """

        self._workflow_definition = workflow_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubWorkflowParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubWorkflowParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
