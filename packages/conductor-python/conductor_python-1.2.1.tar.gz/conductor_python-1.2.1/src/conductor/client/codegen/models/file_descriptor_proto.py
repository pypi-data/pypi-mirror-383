# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDescriptorProto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_fields': 'dict(str, object)',
        'default_instance_for_type': 'FileDescriptorProto',
        'dependency_count': 'int',
        'dependency_list': 'list[str]',
        'descriptor_for_type': 'Descriptor',
        'edition': 'str',
        'enum_type_count': 'int',
        'enum_type_list': 'list[EnumDescriptorProto]',
        'enum_type_or_builder_list': 'list[EnumDescriptorProtoOrBuilder]',
        'extension_count': 'int',
        'extension_list': 'list[FieldDescriptorProto]',
        'extension_or_builder_list': 'list[FieldDescriptorProtoOrBuilder]',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'memoized_serialized_size': 'int',
        'message_type_count': 'int',
        'message_type_list': 'list[DescriptorProto]',
        'message_type_or_builder_list': 'list[DescriptorProtoOrBuilder]',
        'name': 'str',
        'name_bytes': 'ByteString',
        'options': 'FileOptions',
        'options_or_builder': 'FileOptionsOrBuilder',
        'package': 'str',
        'package_bytes': 'ByteString',
        'parser_for_type': 'ParserFileDescriptorProto',
        'public_dependency_count': 'int',
        'public_dependency_list': 'list[int]',
        'serialized_size': 'int',
        'service_count': 'int',
        'service_list': 'list[ServiceDescriptorProto]',
        'service_or_builder_list': 'list[ServiceDescriptorProtoOrBuilder]',
        'source_code_info': 'SourceCodeInfo',
        'source_code_info_or_builder': 'SourceCodeInfoOrBuilder',
        'syntax': 'str',
        'syntax_bytes': 'ByteString',
        'unknown_fields': 'UnknownFieldSet',
        'weak_dependency_count': 'int',
        'weak_dependency_list': 'list[int]'
    }

    attribute_map = {
        'all_fields': 'allFields',
        'default_instance_for_type': 'defaultInstanceForType',
        'dependency_count': 'dependencyCount',
        'dependency_list': 'dependencyList',
        'descriptor_for_type': 'descriptorForType',
        'edition': 'edition',
        'enum_type_count': 'enumTypeCount',
        'enum_type_list': 'enumTypeList',
        'enum_type_or_builder_list': 'enumTypeOrBuilderList',
        'extension_count': 'extensionCount',
        'extension_list': 'extensionList',
        'extension_or_builder_list': 'extensionOrBuilderList',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'memoized_serialized_size': 'memoizedSerializedSize',
        'message_type_count': 'messageTypeCount',
        'message_type_list': 'messageTypeList',
        'message_type_or_builder_list': 'messageTypeOrBuilderList',
        'name': 'name',
        'name_bytes': 'nameBytes',
        'options': 'options',
        'options_or_builder': 'optionsOrBuilder',
        'package': 'package',
        'package_bytes': 'packageBytes',
        'parser_for_type': 'parserForType',
        'public_dependency_count': 'publicDependencyCount',
        'public_dependency_list': 'publicDependencyList',
        'serialized_size': 'serializedSize',
        'service_count': 'serviceCount',
        'service_list': 'serviceList',
        'service_or_builder_list': 'serviceOrBuilderList',
        'source_code_info': 'sourceCodeInfo',
        'source_code_info_or_builder': 'sourceCodeInfoOrBuilder',
        'syntax': 'syntax',
        'syntax_bytes': 'syntaxBytes',
        'unknown_fields': 'unknownFields',
        'weak_dependency_count': 'weakDependencyCount',
        'weak_dependency_list': 'weakDependencyList'
    }

    def __init__(self, all_fields=None, default_instance_for_type=None, dependency_count=None, dependency_list=None, descriptor_for_type=None, edition=None, enum_type_count=None, enum_type_list=None, enum_type_or_builder_list=None, extension_count=None, extension_list=None, extension_or_builder_list=None, initialization_error_string=None, initialized=None, memoized_serialized_size=None, message_type_count=None, message_type_list=None, message_type_or_builder_list=None, name=None, name_bytes=None, options=None, options_or_builder=None, package=None, package_bytes=None, parser_for_type=None, public_dependency_count=None, public_dependency_list=None, serialized_size=None, service_count=None, service_list=None, service_or_builder_list=None, source_code_info=None, source_code_info_or_builder=None, syntax=None, syntax_bytes=None, unknown_fields=None, weak_dependency_count=None, weak_dependency_list=None):  # noqa: E501
        """FileDescriptorProto - a model defined in Swagger"""  # noqa: E501
        self._all_fields = None
        self._default_instance_for_type = None
        self._dependency_count = None
        self._dependency_list = None
        self._descriptor_for_type = None
        self._edition = None
        self._enum_type_count = None
        self._enum_type_list = None
        self._enum_type_or_builder_list = None
        self._extension_count = None
        self._extension_list = None
        self._extension_or_builder_list = None
        self._initialization_error_string = None
        self._initialized = None
        self._memoized_serialized_size = None
        self._message_type_count = None
        self._message_type_list = None
        self._message_type_or_builder_list = None
        self._name = None
        self._name_bytes = None
        self._options = None
        self._options_or_builder = None
        self._package = None
        self._package_bytes = None
        self._parser_for_type = None
        self._public_dependency_count = None
        self._public_dependency_list = None
        self._serialized_size = None
        self._service_count = None
        self._service_list = None
        self._service_or_builder_list = None
        self._source_code_info = None
        self._source_code_info_or_builder = None
        self._syntax = None
        self._syntax_bytes = None
        self._unknown_fields = None
        self._weak_dependency_count = None
        self._weak_dependency_list = None
        self.discriminator = None
        if all_fields is not None:
            self.all_fields = all_fields
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if dependency_count is not None:
            self.dependency_count = dependency_count
        if dependency_list is not None:
            self.dependency_list = dependency_list
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if edition is not None:
            self.edition = edition
        if enum_type_count is not None:
            self.enum_type_count = enum_type_count
        if enum_type_list is not None:
            self.enum_type_list = enum_type_list
        if enum_type_or_builder_list is not None:
            self.enum_type_or_builder_list = enum_type_or_builder_list
        if extension_count is not None:
            self.extension_count = extension_count
        if extension_list is not None:
            self.extension_list = extension_list
        if extension_or_builder_list is not None:
            self.extension_or_builder_list = extension_or_builder_list
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size
        if message_type_count is not None:
            self.message_type_count = message_type_count
        if message_type_list is not None:
            self.message_type_list = message_type_list
        if message_type_or_builder_list is not None:
            self.message_type_or_builder_list = message_type_or_builder_list
        if name is not None:
            self.name = name
        if name_bytes is not None:
            self.name_bytes = name_bytes
        if options is not None:
            self.options = options
        if options_or_builder is not None:
            self.options_or_builder = options_or_builder
        if package is not None:
            self.package = package
        if package_bytes is not None:
            self.package_bytes = package_bytes
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if public_dependency_count is not None:
            self.public_dependency_count = public_dependency_count
        if public_dependency_list is not None:
            self.public_dependency_list = public_dependency_list
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if service_count is not None:
            self.service_count = service_count
        if service_list is not None:
            self.service_list = service_list
        if service_or_builder_list is not None:
            self.service_or_builder_list = service_or_builder_list
        if source_code_info is not None:
            self.source_code_info = source_code_info
        if source_code_info_or_builder is not None:
            self.source_code_info_or_builder = source_code_info_or_builder
        if syntax is not None:
            self.syntax = syntax
        if syntax_bytes is not None:
            self.syntax_bytes = syntax_bytes
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields
        if weak_dependency_count is not None:
            self.weak_dependency_count = weak_dependency_count
        if weak_dependency_list is not None:
            self.weak_dependency_list = weak_dependency_list

    @property
    def all_fields(self):
        """Gets the all_fields of this FileDescriptorProto.  # noqa: E501


        :return: The all_fields of this FileDescriptorProto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this FileDescriptorProto.


        :param all_fields: The all_fields of this FileDescriptorProto.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this FileDescriptorProto.  # noqa: E501


        :return: The default_instance_for_type of this FileDescriptorProto.  # noqa: E501
        :rtype: FileDescriptorProto
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this FileDescriptorProto.


        :param default_instance_for_type: The default_instance_for_type of this FileDescriptorProto.  # noqa: E501
        :type: FileDescriptorProto
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def dependency_count(self):
        """Gets the dependency_count of this FileDescriptorProto.  # noqa: E501


        :return: The dependency_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._dependency_count

    @dependency_count.setter
    def dependency_count(self, dependency_count):
        """Sets the dependency_count of this FileDescriptorProto.


        :param dependency_count: The dependency_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._dependency_count = dependency_count

    @property
    def dependency_list(self):
        """Gets the dependency_list of this FileDescriptorProto.  # noqa: E501


        :return: The dependency_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependency_list

    @dependency_list.setter
    def dependency_list(self, dependency_list):
        """Sets the dependency_list of this FileDescriptorProto.


        :param dependency_list: The dependency_list of this FileDescriptorProto.  # noqa: E501
        :type: list[str]
        """

        self._dependency_list = dependency_list

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this FileDescriptorProto.  # noqa: E501


        :return: The descriptor_for_type of this FileDescriptorProto.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this FileDescriptorProto.


        :param descriptor_for_type: The descriptor_for_type of this FileDescriptorProto.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def edition(self):
        """Gets the edition of this FileDescriptorProto.  # noqa: E501


        :return: The edition of this FileDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this FileDescriptorProto.


        :param edition: The edition of this FileDescriptorProto.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDITION_UNKNOWN", "EDITION_PROTO2", "EDITION_PROTO3", "EDITION_2023", "EDITION_1_TEST_ONLY", "EDITION_2_TEST_ONLY", "EDITION_99997_TEST_ONLY", "EDITION_99998_TEST_ONLY", "EDITION_99999_TEST_ONLY"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"  # noqa: E501
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def enum_type_count(self):
        """Gets the enum_type_count of this FileDescriptorProto.  # noqa: E501


        :return: The enum_type_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._enum_type_count

    @enum_type_count.setter
    def enum_type_count(self, enum_type_count):
        """Sets the enum_type_count of this FileDescriptorProto.


        :param enum_type_count: The enum_type_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._enum_type_count = enum_type_count

    @property
    def enum_type_list(self):
        """Gets the enum_type_list of this FileDescriptorProto.  # noqa: E501


        :return: The enum_type_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[EnumDescriptorProto]
        """
        return self._enum_type_list

    @enum_type_list.setter
    def enum_type_list(self, enum_type_list):
        """Sets the enum_type_list of this FileDescriptorProto.


        :param enum_type_list: The enum_type_list of this FileDescriptorProto.  # noqa: E501
        :type: list[EnumDescriptorProto]
        """

        self._enum_type_list = enum_type_list

    @property
    def enum_type_or_builder_list(self):
        """Gets the enum_type_or_builder_list of this FileDescriptorProto.  # noqa: E501


        :return: The enum_type_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[EnumDescriptorProtoOrBuilder]
        """
        return self._enum_type_or_builder_list

    @enum_type_or_builder_list.setter
    def enum_type_or_builder_list(self, enum_type_or_builder_list):
        """Sets the enum_type_or_builder_list of this FileDescriptorProto.


        :param enum_type_or_builder_list: The enum_type_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :type: list[EnumDescriptorProtoOrBuilder]
        """

        self._enum_type_or_builder_list = enum_type_or_builder_list

    @property
    def extension_count(self):
        """Gets the extension_count of this FileDescriptorProto.  # noqa: E501


        :return: The extension_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._extension_count

    @extension_count.setter
    def extension_count(self, extension_count):
        """Sets the extension_count of this FileDescriptorProto.


        :param extension_count: The extension_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._extension_count = extension_count

    @property
    def extension_list(self):
        """Gets the extension_list of this FileDescriptorProto.  # noqa: E501


        :return: The extension_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProto]
        """
        return self._extension_list

    @extension_list.setter
    def extension_list(self, extension_list):
        """Sets the extension_list of this FileDescriptorProto.


        :param extension_list: The extension_list of this FileDescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProto]
        """

        self._extension_list = extension_list

    @property
    def extension_or_builder_list(self):
        """Gets the extension_or_builder_list of this FileDescriptorProto.  # noqa: E501


        :return: The extension_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[FieldDescriptorProtoOrBuilder]
        """
        return self._extension_or_builder_list

    @extension_or_builder_list.setter
    def extension_or_builder_list(self, extension_or_builder_list):
        """Sets the extension_or_builder_list of this FileDescriptorProto.


        :param extension_or_builder_list: The extension_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :type: list[FieldDescriptorProtoOrBuilder]
        """

        self._extension_or_builder_list = extension_or_builder_list

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this FileDescriptorProto.  # noqa: E501


        :return: The initialization_error_string of this FileDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this FileDescriptorProto.


        :param initialization_error_string: The initialization_error_string of this FileDescriptorProto.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this FileDescriptorProto.  # noqa: E501


        :return: The initialized of this FileDescriptorProto.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this FileDescriptorProto.


        :param initialized: The initialized of this FileDescriptorProto.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this FileDescriptorProto.  # noqa: E501


        :return: The memoized_serialized_size of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this FileDescriptorProto.


        :param memoized_serialized_size: The memoized_serialized_size of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    @property
    def message_type_count(self):
        """Gets the message_type_count of this FileDescriptorProto.  # noqa: E501


        :return: The message_type_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._message_type_count

    @message_type_count.setter
    def message_type_count(self, message_type_count):
        """Sets the message_type_count of this FileDescriptorProto.


        :param message_type_count: The message_type_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._message_type_count = message_type_count

    @property
    def message_type_list(self):
        """Gets the message_type_list of this FileDescriptorProto.  # noqa: E501


        :return: The message_type_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[DescriptorProto]
        """
        return self._message_type_list

    @message_type_list.setter
    def message_type_list(self, message_type_list):
        """Sets the message_type_list of this FileDescriptorProto.


        :param message_type_list: The message_type_list of this FileDescriptorProto.  # noqa: E501
        :type: list[DescriptorProto]
        """

        self._message_type_list = message_type_list

    @property
    def message_type_or_builder_list(self):
        """Gets the message_type_or_builder_list of this FileDescriptorProto.  # noqa: E501


        :return: The message_type_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[DescriptorProtoOrBuilder]
        """
        return self._message_type_or_builder_list

    @message_type_or_builder_list.setter
    def message_type_or_builder_list(self, message_type_or_builder_list):
        """Sets the message_type_or_builder_list of this FileDescriptorProto.


        :param message_type_or_builder_list: The message_type_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :type: list[DescriptorProtoOrBuilder]
        """

        self._message_type_or_builder_list = message_type_or_builder_list

    @property
    def name(self):
        """Gets the name of this FileDescriptorProto.  # noqa: E501


        :return: The name of this FileDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileDescriptorProto.


        :param name: The name of this FileDescriptorProto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_bytes(self):
        """Gets the name_bytes of this FileDescriptorProto.  # noqa: E501


        :return: The name_bytes of this FileDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._name_bytes

    @name_bytes.setter
    def name_bytes(self, name_bytes):
        """Sets the name_bytes of this FileDescriptorProto.


        :param name_bytes: The name_bytes of this FileDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._name_bytes = name_bytes

    @property
    def options(self):
        """Gets the options of this FileDescriptorProto.  # noqa: E501


        :return: The options of this FileDescriptorProto.  # noqa: E501
        :rtype: FileOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FileDescriptorProto.


        :param options: The options of this FileDescriptorProto.  # noqa: E501
        :type: FileOptions
        """

        self._options = options

    @property
    def options_or_builder(self):
        """Gets the options_or_builder of this FileDescriptorProto.  # noqa: E501


        :return: The options_or_builder of this FileDescriptorProto.  # noqa: E501
        :rtype: FileOptionsOrBuilder
        """
        return self._options_or_builder

    @options_or_builder.setter
    def options_or_builder(self, options_or_builder):
        """Sets the options_or_builder of this FileDescriptorProto.


        :param options_or_builder: The options_or_builder of this FileDescriptorProto.  # noqa: E501
        :type: FileOptionsOrBuilder
        """

        self._options_or_builder = options_or_builder

    @property
    def package(self):
        """Gets the package of this FileDescriptorProto.  # noqa: E501


        :return: The package of this FileDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this FileDescriptorProto.


        :param package: The package of this FileDescriptorProto.  # noqa: E501
        :type: str
        """

        self._package = package

    @property
    def package_bytes(self):
        """Gets the package_bytes of this FileDescriptorProto.  # noqa: E501


        :return: The package_bytes of this FileDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._package_bytes

    @package_bytes.setter
    def package_bytes(self, package_bytes):
        """Sets the package_bytes of this FileDescriptorProto.


        :param package_bytes: The package_bytes of this FileDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._package_bytes = package_bytes

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this FileDescriptorProto.  # noqa: E501


        :return: The parser_for_type of this FileDescriptorProto.  # noqa: E501
        :rtype: ParserFileDescriptorProto
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this FileDescriptorProto.


        :param parser_for_type: The parser_for_type of this FileDescriptorProto.  # noqa: E501
        :type: ParserFileDescriptorProto
        """

        self._parser_for_type = parser_for_type

    @property
    def public_dependency_count(self):
        """Gets the public_dependency_count of this FileDescriptorProto.  # noqa: E501


        :return: The public_dependency_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._public_dependency_count

    @public_dependency_count.setter
    def public_dependency_count(self, public_dependency_count):
        """Sets the public_dependency_count of this FileDescriptorProto.


        :param public_dependency_count: The public_dependency_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._public_dependency_count = public_dependency_count

    @property
    def public_dependency_list(self):
        """Gets the public_dependency_list of this FileDescriptorProto.  # noqa: E501


        :return: The public_dependency_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[int]
        """
        return self._public_dependency_list

    @public_dependency_list.setter
    def public_dependency_list(self, public_dependency_list):
        """Sets the public_dependency_list of this FileDescriptorProto.


        :param public_dependency_list: The public_dependency_list of this FileDescriptorProto.  # noqa: E501
        :type: list[int]
        """

        self._public_dependency_list = public_dependency_list

    @property
    def serialized_size(self):
        """Gets the serialized_size of this FileDescriptorProto.  # noqa: E501


        :return: The serialized_size of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this FileDescriptorProto.


        :param serialized_size: The serialized_size of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def service_count(self):
        """Gets the service_count of this FileDescriptorProto.  # noqa: E501


        :return: The service_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._service_count

    @service_count.setter
    def service_count(self, service_count):
        """Sets the service_count of this FileDescriptorProto.


        :param service_count: The service_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._service_count = service_count

    @property
    def service_list(self):
        """Gets the service_list of this FileDescriptorProto.  # noqa: E501


        :return: The service_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[ServiceDescriptorProto]
        """
        return self._service_list

    @service_list.setter
    def service_list(self, service_list):
        """Sets the service_list of this FileDescriptorProto.


        :param service_list: The service_list of this FileDescriptorProto.  # noqa: E501
        :type: list[ServiceDescriptorProto]
        """

        self._service_list = service_list

    @property
    def service_or_builder_list(self):
        """Gets the service_or_builder_list of this FileDescriptorProto.  # noqa: E501


        :return: The service_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[ServiceDescriptorProtoOrBuilder]
        """
        return self._service_or_builder_list

    @service_or_builder_list.setter
    def service_or_builder_list(self, service_or_builder_list):
        """Sets the service_or_builder_list of this FileDescriptorProto.


        :param service_or_builder_list: The service_or_builder_list of this FileDescriptorProto.  # noqa: E501
        :type: list[ServiceDescriptorProtoOrBuilder]
        """

        self._service_or_builder_list = service_or_builder_list

    @property
    def source_code_info(self):
        """Gets the source_code_info of this FileDescriptorProto.  # noqa: E501


        :return: The source_code_info of this FileDescriptorProto.  # noqa: E501
        :rtype: SourceCodeInfo
        """
        return self._source_code_info

    @source_code_info.setter
    def source_code_info(self, source_code_info):
        """Sets the source_code_info of this FileDescriptorProto.


        :param source_code_info: The source_code_info of this FileDescriptorProto.  # noqa: E501
        :type: SourceCodeInfo
        """

        self._source_code_info = source_code_info

    @property
    def source_code_info_or_builder(self):
        """Gets the source_code_info_or_builder of this FileDescriptorProto.  # noqa: E501


        :return: The source_code_info_or_builder of this FileDescriptorProto.  # noqa: E501
        :rtype: SourceCodeInfoOrBuilder
        """
        return self._source_code_info_or_builder

    @source_code_info_or_builder.setter
    def source_code_info_or_builder(self, source_code_info_or_builder):
        """Sets the source_code_info_or_builder of this FileDescriptorProto.


        :param source_code_info_or_builder: The source_code_info_or_builder of this FileDescriptorProto.  # noqa: E501
        :type: SourceCodeInfoOrBuilder
        """

        self._source_code_info_or_builder = source_code_info_or_builder

    @property
    def syntax(self):
        """Gets the syntax of this FileDescriptorProto.  # noqa: E501


        :return: The syntax of this FileDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this FileDescriptorProto.


        :param syntax: The syntax of this FileDescriptorProto.  # noqa: E501
        :type: str
        """

        self._syntax = syntax

    @property
    def syntax_bytes(self):
        """Gets the syntax_bytes of this FileDescriptorProto.  # noqa: E501


        :return: The syntax_bytes of this FileDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._syntax_bytes

    @syntax_bytes.setter
    def syntax_bytes(self, syntax_bytes):
        """Sets the syntax_bytes of this FileDescriptorProto.


        :param syntax_bytes: The syntax_bytes of this FileDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._syntax_bytes = syntax_bytes

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this FileDescriptorProto.  # noqa: E501


        :return: The unknown_fields of this FileDescriptorProto.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this FileDescriptorProto.


        :param unknown_fields: The unknown_fields of this FileDescriptorProto.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    @property
    def weak_dependency_count(self):
        """Gets the weak_dependency_count of this FileDescriptorProto.  # noqa: E501


        :return: The weak_dependency_count of this FileDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._weak_dependency_count

    @weak_dependency_count.setter
    def weak_dependency_count(self, weak_dependency_count):
        """Sets the weak_dependency_count of this FileDescriptorProto.


        :param weak_dependency_count: The weak_dependency_count of this FileDescriptorProto.  # noqa: E501
        :type: int
        """

        self._weak_dependency_count = weak_dependency_count

    @property
    def weak_dependency_list(self):
        """Gets the weak_dependency_list of this FileDescriptorProto.  # noqa: E501


        :return: The weak_dependency_list of this FileDescriptorProto.  # noqa: E501
        :rtype: list[int]
        """
        return self._weak_dependency_list

    @weak_dependency_list.setter
    def weak_dependency_list(self, weak_dependency_list):
        """Sets the weak_dependency_list of this FileDescriptorProto.


        :param weak_dependency_list: The weak_dependency_list of this FileDescriptorProto.  # noqa: E501
        :type: list[int]
        """

        self._weak_dependency_list = weak_dependency_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDescriptorProto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDescriptorProto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
