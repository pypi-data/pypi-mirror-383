# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'int',
        'event_executions': 'list[ExtendedEventExecution]',
        'event_target': 'str',
        'event_type': 'str',
        'full_payload': 'object',
        'id': 'str',
        'org_id': 'str',
        'payload': 'str',
        'status': 'str',
        'status_description': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'event_executions': 'eventExecutions',
        'event_target': 'eventTarget',
        'event_type': 'eventType',
        'full_payload': 'fullPayload',
        'id': 'id',
        'org_id': 'orgId',
        'payload': 'payload',
        'status': 'status',
        'status_description': 'statusDescription'
    }

    def __init__(self, created_at=None, event_executions=None, event_target=None, event_type=None, full_payload=None, id=None, org_id=None, payload=None, status=None, status_description=None):  # noqa: E501
        """EventMessage - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._event_executions = None
        self._event_target = None
        self._event_type = None
        self._full_payload = None
        self._id = None
        self._org_id = None
        self._payload = None
        self._status = None
        self._status_description = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if event_executions is not None:
            self.event_executions = event_executions
        if event_target is not None:
            self.event_target = event_target
        if event_type is not None:
            self.event_type = event_type
        if full_payload is not None:
            self.full_payload = full_payload
        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if payload is not None:
            self.payload = payload
        if status is not None:
            self.status = status
        if status_description is not None:
            self.status_description = status_description

    @property
    def created_at(self):
        """Gets the created_at of this EventMessage.  # noqa: E501


        :return: The created_at of this EventMessage.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventMessage.


        :param created_at: The created_at of this EventMessage.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def event_executions(self):
        """Gets the event_executions of this EventMessage.  # noqa: E501


        :return: The event_executions of this EventMessage.  # noqa: E501
        :rtype: list[ExtendedEventExecution]
        """
        return self._event_executions

    @event_executions.setter
    def event_executions(self, event_executions):
        """Sets the event_executions of this EventMessage.


        :param event_executions: The event_executions of this EventMessage.  # noqa: E501
        :type: list[ExtendedEventExecution]
        """

        self._event_executions = event_executions

    @property
    def event_target(self):
        """Gets the event_target of this EventMessage.  # noqa: E501


        :return: The event_target of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._event_target

    @event_target.setter
    def event_target(self, event_target):
        """Sets the event_target of this EventMessage.


        :param event_target: The event_target of this EventMessage.  # noqa: E501
        :type: str
        """

        self._event_target = event_target

    @property
    def event_type(self):
        """Gets the event_type of this EventMessage.  # noqa: E501


        :return: The event_type of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventMessage.


        :param event_type: The event_type of this EventMessage.  # noqa: E501
        :type: str
        """
        allowed_values = ["WEBHOOK", "MESSAGE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def full_payload(self):
        """Gets the full_payload of this EventMessage.  # noqa: E501


        :return: The full_payload of this EventMessage.  # noqa: E501
        :rtype: object
        """
        return self._full_payload

    @full_payload.setter
    def full_payload(self, full_payload):
        """Sets the full_payload of this EventMessage.


        :param full_payload: The full_payload of this EventMessage.  # noqa: E501
        :type: object
        """

        self._full_payload = full_payload

    @property
    def id(self):
        """Gets the id of this EventMessage.  # noqa: E501


        :return: The id of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventMessage.


        :param id: The id of this EventMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this EventMessage.  # noqa: E501


        :return: The org_id of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this EventMessage.


        :param org_id: The org_id of this EventMessage.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def payload(self):
        """Gets the payload of this EventMessage.  # noqa: E501


        :return: The payload of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this EventMessage.


        :param payload: The payload of this EventMessage.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def status(self):
        """Gets the status of this EventMessage.  # noqa: E501


        :return: The status of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventMessage.


        :param status: The status of this EventMessage.  # noqa: E501
        :type: str
        """
        allowed_values = ["RECEIVED", "HANDLED", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this EventMessage.  # noqa: E501


        :return: The status_description of this EventMessage.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this EventMessage.


        :param status_description: The status_description of this EventMessage.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
