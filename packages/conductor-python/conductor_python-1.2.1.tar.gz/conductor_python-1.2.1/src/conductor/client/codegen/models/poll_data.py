# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PollData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'last_poll_time': 'int',
        'queue_name': 'str',
        'worker_id': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'last_poll_time': 'lastPollTime',
        'queue_name': 'queueName',
        'worker_id': 'workerId'
    }

    def __init__(self, domain=None, last_poll_time=None, queue_name=None, worker_id=None):  # noqa: E501
        """PollData - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._last_poll_time = None
        self._queue_name = None
        self._worker_id = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if last_poll_time is not None:
            self.last_poll_time = last_poll_time
        if queue_name is not None:
            self.queue_name = queue_name
        if worker_id is not None:
            self.worker_id = worker_id

    @property
    def domain(self):
        """Gets the domain of this PollData.  # noqa: E501


        :return: The domain of this PollData.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PollData.


        :param domain: The domain of this PollData.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def last_poll_time(self):
        """Gets the last_poll_time of this PollData.  # noqa: E501


        :return: The last_poll_time of this PollData.  # noqa: E501
        :rtype: int
        """
        return self._last_poll_time

    @last_poll_time.setter
    def last_poll_time(self, last_poll_time):
        """Sets the last_poll_time of this PollData.


        :param last_poll_time: The last_poll_time of this PollData.  # noqa: E501
        :type: int
        """

        self._last_poll_time = last_poll_time

    @property
    def queue_name(self):
        """Gets the queue_name of this PollData.  # noqa: E501


        :return: The queue_name of this PollData.  # noqa: E501
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this PollData.


        :param queue_name: The queue_name of this PollData.  # noqa: E501
        :type: str
        """

        self._queue_name = queue_name

    @property
    def worker_id(self):
        """Gets the worker_id of this PollData.  # noqa: E501


        :return: The worker_id of this PollData.  # noqa: E501
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this PollData.


        :param worker_id: The worker_id of this PollData.  # noqa: E501
        :type: str
        """

        self._worker_id = worker_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
