# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_fields': 'dict(str, object)',
        'default_instance_for_type': 'Location',
        'descriptor_for_type': 'Descriptor',
        'initialization_error_string': 'str',
        'initialized': 'bool',
        'leading_comments': 'str',
        'leading_comments_bytes': 'ByteString',
        'leading_detached_comments_count': 'int',
        'leading_detached_comments_list': 'list[str]',
        'memoized_serialized_size': 'int',
        'parser_for_type': 'ParserLocation',
        'path_count': 'int',
        'path_list': 'list[int]',
        'serialized_size': 'int',
        'span_count': 'int',
        'span_list': 'list[int]',
        'trailing_comments': 'str',
        'trailing_comments_bytes': 'ByteString',
        'unknown_fields': 'UnknownFieldSet'
    }

    attribute_map = {
        'all_fields': 'allFields',
        'default_instance_for_type': 'defaultInstanceForType',
        'descriptor_for_type': 'descriptorForType',
        'initialization_error_string': 'initializationErrorString',
        'initialized': 'initialized',
        'leading_comments': 'leadingComments',
        'leading_comments_bytes': 'leadingCommentsBytes',
        'leading_detached_comments_count': 'leadingDetachedCommentsCount',
        'leading_detached_comments_list': 'leadingDetachedCommentsList',
        'memoized_serialized_size': 'memoizedSerializedSize',
        'parser_for_type': 'parserForType',
        'path_count': 'pathCount',
        'path_list': 'pathList',
        'serialized_size': 'serializedSize',
        'span_count': 'spanCount',
        'span_list': 'spanList',
        'trailing_comments': 'trailingComments',
        'trailing_comments_bytes': 'trailingCommentsBytes',
        'unknown_fields': 'unknownFields'
    }

    def __init__(self, all_fields=None, default_instance_for_type=None, descriptor_for_type=None, initialization_error_string=None, initialized=None, leading_comments=None, leading_comments_bytes=None, leading_detached_comments_count=None, leading_detached_comments_list=None, memoized_serialized_size=None, parser_for_type=None, path_count=None, path_list=None, serialized_size=None, span_count=None, span_list=None, trailing_comments=None, trailing_comments_bytes=None, unknown_fields=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._all_fields = None
        self._default_instance_for_type = None
        self._descriptor_for_type = None
        self._initialization_error_string = None
        self._initialized = None
        self._leading_comments = None
        self._leading_comments_bytes = None
        self._leading_detached_comments_count = None
        self._leading_detached_comments_list = None
        self._memoized_serialized_size = None
        self._parser_for_type = None
        self._path_count = None
        self._path_list = None
        self._serialized_size = None
        self._span_count = None
        self._span_list = None
        self._trailing_comments = None
        self._trailing_comments_bytes = None
        self._unknown_fields = None
        self.discriminator = None
        if all_fields is not None:
            self.all_fields = all_fields
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if initialized is not None:
            self.initialized = initialized
        if leading_comments is not None:
            self.leading_comments = leading_comments
        if leading_comments_bytes is not None:
            self.leading_comments_bytes = leading_comments_bytes
        if leading_detached_comments_count is not None:
            self.leading_detached_comments_count = leading_detached_comments_count
        if leading_detached_comments_list is not None:
            self.leading_detached_comments_list = leading_detached_comments_list
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if path_count is not None:
            self.path_count = path_count
        if path_list is not None:
            self.path_list = path_list
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if span_count is not None:
            self.span_count = span_count
        if span_list is not None:
            self.span_list = span_list
        if trailing_comments is not None:
            self.trailing_comments = trailing_comments
        if trailing_comments_bytes is not None:
            self.trailing_comments_bytes = trailing_comments_bytes
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields

    @property
    def all_fields(self):
        """Gets the all_fields of this Location.  # noqa: E501


        :return: The all_fields of this Location.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this Location.


        :param all_fields: The all_fields of this Location.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this Location.  # noqa: E501


        :return: The default_instance_for_type of this Location.  # noqa: E501
        :rtype: Location
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this Location.


        :param default_instance_for_type: The default_instance_for_type of this Location.  # noqa: E501
        :type: Location
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this Location.  # noqa: E501


        :return: The descriptor_for_type of this Location.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this Location.


        :param descriptor_for_type: The descriptor_for_type of this Location.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this Location.  # noqa: E501


        :return: The initialization_error_string of this Location.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this Location.


        :param initialization_error_string: The initialization_error_string of this Location.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def initialized(self):
        """Gets the initialized of this Location.  # noqa: E501


        :return: The initialized of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this Location.


        :param initialized: The initialized of this Location.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def leading_comments(self):
        """Gets the leading_comments of this Location.  # noqa: E501


        :return: The leading_comments of this Location.  # noqa: E501
        :rtype: str
        """
        return self._leading_comments

    @leading_comments.setter
    def leading_comments(self, leading_comments):
        """Sets the leading_comments of this Location.


        :param leading_comments: The leading_comments of this Location.  # noqa: E501
        :type: str
        """

        self._leading_comments = leading_comments

    @property
    def leading_comments_bytes(self):
        """Gets the leading_comments_bytes of this Location.  # noqa: E501


        :return: The leading_comments_bytes of this Location.  # noqa: E501
        :rtype: ByteString
        """
        return self._leading_comments_bytes

    @leading_comments_bytes.setter
    def leading_comments_bytes(self, leading_comments_bytes):
        """Sets the leading_comments_bytes of this Location.


        :param leading_comments_bytes: The leading_comments_bytes of this Location.  # noqa: E501
        :type: ByteString
        """

        self._leading_comments_bytes = leading_comments_bytes

    @property
    def leading_detached_comments_count(self):
        """Gets the leading_detached_comments_count of this Location.  # noqa: E501


        :return: The leading_detached_comments_count of this Location.  # noqa: E501
        :rtype: int
        """
        return self._leading_detached_comments_count

    @leading_detached_comments_count.setter
    def leading_detached_comments_count(self, leading_detached_comments_count):
        """Sets the leading_detached_comments_count of this Location.


        :param leading_detached_comments_count: The leading_detached_comments_count of this Location.  # noqa: E501
        :type: int
        """

        self._leading_detached_comments_count = leading_detached_comments_count

    @property
    def leading_detached_comments_list(self):
        """Gets the leading_detached_comments_list of this Location.  # noqa: E501


        :return: The leading_detached_comments_list of this Location.  # noqa: E501
        :rtype: list[str]
        """
        return self._leading_detached_comments_list

    @leading_detached_comments_list.setter
    def leading_detached_comments_list(self, leading_detached_comments_list):
        """Sets the leading_detached_comments_list of this Location.


        :param leading_detached_comments_list: The leading_detached_comments_list of this Location.  # noqa: E501
        :type: list[str]
        """

        self._leading_detached_comments_list = leading_detached_comments_list

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this Location.  # noqa: E501


        :return: The memoized_serialized_size of this Location.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this Location.


        :param memoized_serialized_size: The memoized_serialized_size of this Location.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this Location.  # noqa: E501


        :return: The parser_for_type of this Location.  # noqa: E501
        :rtype: ParserLocation
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this Location.


        :param parser_for_type: The parser_for_type of this Location.  # noqa: E501
        :type: ParserLocation
        """

        self._parser_for_type = parser_for_type

    @property
    def path_count(self):
        """Gets the path_count of this Location.  # noqa: E501


        :return: The path_count of this Location.  # noqa: E501
        :rtype: int
        """
        return self._path_count

    @path_count.setter
    def path_count(self, path_count):
        """Sets the path_count of this Location.


        :param path_count: The path_count of this Location.  # noqa: E501
        :type: int
        """

        self._path_count = path_count

    @property
    def path_list(self):
        """Gets the path_list of this Location.  # noqa: E501


        :return: The path_list of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._path_list

    @path_list.setter
    def path_list(self, path_list):
        """Sets the path_list of this Location.


        :param path_list: The path_list of this Location.  # noqa: E501
        :type: list[int]
        """

        self._path_list = path_list

    @property
    def serialized_size(self):
        """Gets the serialized_size of this Location.  # noqa: E501


        :return: The serialized_size of this Location.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this Location.


        :param serialized_size: The serialized_size of this Location.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def span_count(self):
        """Gets the span_count of this Location.  # noqa: E501


        :return: The span_count of this Location.  # noqa: E501
        :rtype: int
        """
        return self._span_count

    @span_count.setter
    def span_count(self, span_count):
        """Sets the span_count of this Location.


        :param span_count: The span_count of this Location.  # noqa: E501
        :type: int
        """

        self._span_count = span_count

    @property
    def span_list(self):
        """Gets the span_list of this Location.  # noqa: E501


        :return: The span_list of this Location.  # noqa: E501
        :rtype: list[int]
        """
        return self._span_list

    @span_list.setter
    def span_list(self, span_list):
        """Sets the span_list of this Location.


        :param span_list: The span_list of this Location.  # noqa: E501
        :type: list[int]
        """

        self._span_list = span_list

    @property
    def trailing_comments(self):
        """Gets the trailing_comments of this Location.  # noqa: E501


        :return: The trailing_comments of this Location.  # noqa: E501
        :rtype: str
        """
        return self._trailing_comments

    @trailing_comments.setter
    def trailing_comments(self, trailing_comments):
        """Sets the trailing_comments of this Location.


        :param trailing_comments: The trailing_comments of this Location.  # noqa: E501
        :type: str
        """

        self._trailing_comments = trailing_comments

    @property
    def trailing_comments_bytes(self):
        """Gets the trailing_comments_bytes of this Location.  # noqa: E501


        :return: The trailing_comments_bytes of this Location.  # noqa: E501
        :rtype: ByteString
        """
        return self._trailing_comments_bytes

    @trailing_comments_bytes.setter
    def trailing_comments_bytes(self, trailing_comments_bytes):
        """Sets the trailing_comments_bytes of this Location.


        :param trailing_comments_bytes: The trailing_comments_bytes of this Location.  # noqa: E501
        :type: ByteString
        """

        self._trailing_comments_bytes = trailing_comments_bytes

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this Location.  # noqa: E501


        :return: The unknown_fields of this Location.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this Location.


        :param unknown_fields: The unknown_fields of this Location.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
