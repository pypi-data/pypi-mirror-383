# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnumValueDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'FileDescriptor',
        'full_name': 'str',
        'index': 'int',
        'name': 'str',
        'number': 'int',
        'options': 'EnumValueOptions',
        'proto': 'EnumValueDescriptorProto',
        'type': 'EnumDescriptor'
    }

    attribute_map = {
        'file': 'file',
        'full_name': 'fullName',
        'index': 'index',
        'name': 'name',
        'number': 'number',
        'options': 'options',
        'proto': 'proto',
        'type': 'type'
    }

    def __init__(self, file=None, full_name=None, index=None, name=None, number=None, options=None, proto=None, type=None):  # noqa: E501
        """EnumValueDescriptor - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._full_name = None
        self._index = None
        self._name = None
        self._number = None
        self._options = None
        self._proto = None
        self._type = None
        self.discriminator = None
        if file is not None:
            self.file = file
        if full_name is not None:
            self.full_name = full_name
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if options is not None:
            self.options = options
        if proto is not None:
            self.proto = proto
        if type is not None:
            self.type = type

    @property
    def file(self):
        """Gets the file of this EnumValueDescriptor.  # noqa: E501


        :return: The file of this EnumValueDescriptor.  # noqa: E501
        :rtype: FileDescriptor
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this EnumValueDescriptor.


        :param file: The file of this EnumValueDescriptor.  # noqa: E501
        :type: FileDescriptor
        """

        self._file = file

    @property
    def full_name(self):
        """Gets the full_name of this EnumValueDescriptor.  # noqa: E501


        :return: The full_name of this EnumValueDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EnumValueDescriptor.


        :param full_name: The full_name of this EnumValueDescriptor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def index(self):
        """Gets the index of this EnumValueDescriptor.  # noqa: E501


        :return: The index of this EnumValueDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this EnumValueDescriptor.


        :param index: The index of this EnumValueDescriptor.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this EnumValueDescriptor.  # noqa: E501


        :return: The name of this EnumValueDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnumValueDescriptor.


        :param name: The name of this EnumValueDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this EnumValueDescriptor.  # noqa: E501


        :return: The number of this EnumValueDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this EnumValueDescriptor.


        :param number: The number of this EnumValueDescriptor.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def options(self):
        """Gets the options of this EnumValueDescriptor.  # noqa: E501


        :return: The options of this EnumValueDescriptor.  # noqa: E501
        :rtype: EnumValueOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EnumValueDescriptor.


        :param options: The options of this EnumValueDescriptor.  # noqa: E501
        :type: EnumValueOptions
        """

        self._options = options

    @property
    def proto(self):
        """Gets the proto of this EnumValueDescriptor.  # noqa: E501


        :return: The proto of this EnumValueDescriptor.  # noqa: E501
        :rtype: EnumValueDescriptorProto
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this EnumValueDescriptor.


        :param proto: The proto of this EnumValueDescriptor.  # noqa: E501
        :type: EnumValueDescriptorProto
        """

        self._proto = proto

    @property
    def type(self):
        """Gets the type of this EnumValueDescriptor.  # noqa: E501


        :return: The type of this EnumValueDescriptor.  # noqa: E501
        :rtype: EnumDescriptor
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnumValueDescriptor.


        :param type: The type of this EnumValueDescriptor.  # noqa: E501
        :type: EnumDescriptor
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnumValueDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnumValueDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
