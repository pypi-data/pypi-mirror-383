# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.log_entry import LogEntry
from ..types.request_body import RequestBody
from ..types.result_response import ResultResponse
from ..types.service_execution import ServiceExecution
from .raw_client import AsyncRawServiceApiClient, RawServiceApiClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceApiClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceApiClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceApiClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceApiClient
        """
        return self._raw_client

    def get_service_executions(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ServiceExecution]:
        """
        Retrieves a list of all service executions.
        The response includes links to each service execution, allowing for further queries on their status and results.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ServiceExecution]
            List of service executions

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.get_service_executions()
        """
        _response = self._raw_client.get_service_executions(request_options=request_options)
        return _response.data

    def start_execution(
        self, *, request: RequestBody, request_options: typing.Optional[RequestOptions] = None
    ) -> ServiceExecution:
        """
        Starts a service execution, which in turn is processed asynchronously.
        The location header of the response contains the URL which can be used to query the status and the result of the service execution.

        Parameters
        ----------
        request : RequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            Service execution is submitted

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.start_execution(
            request={"key": "value"},
        )
        """
        _response = self._raw_client.start_execution(request=request, request_options=request_options)
        return _response.data

    def get_status(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ServiceExecution:
        """
        Retrieves the status of a service execution.
        The status can be one of the following: UNKNOWN, PENDING, RUNNING, SUCCEEDED, CANCELLED, FAILED.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            A service execution

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.get_status(
            id="id",
        )
        """
        _response = self._raw_client.get_status(id, request_options=request_options)
        return _response.data

    def get_result(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ResultResponse:
        """
        Retrieves the result of a service execution.
        The result is returned as a JSON object containing the status and any additional data.
        The result may include links to download specific result files.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ResultResponse
            The service execution result

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.get_result(
            id="id",
        )
        """
        _response = self._raw_client.get_result(id, request_options=request_options)
        return _response.data

    def get_result_file(
        self, id: str, file: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[bytes]:
        """
        Retrieves a specific result file of a service execution.
        The file name is provided in the path parameter.
        The result file is returned as a binary stream.

        Parameters
        ----------
        id : str
            The id of a service execution

        file : str
            The name of the result file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            The content of a result file
        """
        with self._raw_client.get_result_file(id, file, request_options=request_options) as r:
            yield from r.data

    def get_logs(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[LogEntry]:
        """
        Returns a list of log entries for a service execution in chronological order, where the first entry is the oldest.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LogEntry]
            List of log entries

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.get_logs(
            id="id",
        )
        """
        _response = self._raw_client.get_logs(id, request_options=request_options)
        return _response.data

    def cancel_execution(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ServiceExecution:
        """
        Cancel a pending or running service execution.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            Service execution is cancelled

        Examples
        --------
        from planqk_service import PlanqkServiceApi

        client = PlanqkServiceApi(
            token="YOUR_TOKEN",
        )
        client.service_api.cancel_execution(
            id="id",
        )
        """
        _response = self._raw_client.cancel_execution(id, request_options=request_options)
        return _response.data


class AsyncServiceApiClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceApiClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceApiClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceApiClient
        """
        return self._raw_client

    async def get_service_executions(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ServiceExecution]:
        """
        Retrieves a list of all service executions.
        The response includes links to each service execution, allowing for further queries on their status and results.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ServiceExecution]
            List of service executions

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.get_service_executions()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_service_executions(request_options=request_options)
        return _response.data

    async def start_execution(
        self, *, request: RequestBody, request_options: typing.Optional[RequestOptions] = None
    ) -> ServiceExecution:
        """
        Starts a service execution, which in turn is processed asynchronously.
        The location header of the response contains the URL which can be used to query the status and the result of the service execution.

        Parameters
        ----------
        request : RequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            Service execution is submitted

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.start_execution(
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.start_execution(request=request, request_options=request_options)
        return _response.data

    async def get_status(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ServiceExecution:
        """
        Retrieves the status of a service execution.
        The status can be one of the following: UNKNOWN, PENDING, RUNNING, SUCCEEDED, CANCELLED, FAILED.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            A service execution

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.get_status(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_status(id, request_options=request_options)
        return _response.data

    async def get_result(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ResultResponse:
        """
        Retrieves the result of a service execution.
        The result is returned as a JSON object containing the status and any additional data.
        The result may include links to download specific result files.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ResultResponse
            The service execution result

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.get_result(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_result(id, request_options=request_options)
        return _response.data

    async def get_result_file(
        self, id: str, file: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Retrieves a specific result file of a service execution.
        The file name is provided in the path parameter.
        The result file is returned as a binary stream.

        Parameters
        ----------
        id : str
            The id of a service execution

        file : str
            The name of the result file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            The content of a result file
        """
        async with self._raw_client.get_result_file(id, file, request_options=request_options) as r:
            async for _chunk in r.data:
                yield _chunk

    async def get_logs(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LogEntry]:
        """
        Returns a list of log entries for a service execution in chronological order, where the first entry is the oldest.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LogEntry]
            List of log entries

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.get_logs(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_logs(id, request_options=request_options)
        return _response.data

    async def cancel_execution(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ServiceExecution:
        """
        Cancel a pending or running service execution.

        Parameters
        ----------
        id : str
            The id of a service execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServiceExecution
            Service execution is cancelled

        Examples
        --------
        import asyncio

        from planqk_service import AsyncPlanqkServiceApi

        client = AsyncPlanqkServiceApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.service_api.cancel_execution(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel_execution(id, request_options=request_options)
        return _response.data
