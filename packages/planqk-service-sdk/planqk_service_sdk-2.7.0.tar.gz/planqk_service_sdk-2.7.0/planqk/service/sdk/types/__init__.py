# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .hal_link import HalLink
    from .log_entry import LogEntry
    from .request_body import RequestBody
    from .result_response import ResultResponse
    from .result_response_embedded import ResultResponseEmbedded
    from .result_response_links import ResultResponseLinks
    from .service_execution import ServiceExecution
    from .service_execution_status import ServiceExecutionStatus
_dynamic_imports: typing.Dict[str, str] = {
    "HalLink": ".hal_link",
    "LogEntry": ".log_entry",
    "RequestBody": ".request_body",
    "ResultResponse": ".result_response",
    "ResultResponseEmbedded": ".result_response_embedded",
    "ResultResponseLinks": ".result_response_links",
    "ServiceExecution": ".service_execution",
    "ServiceExecutionStatus": ".service_execution_status",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "HalLink",
    "LogEntry",
    "RequestBody",
    "ResultResponse",
    "ResultResponseEmbedded",
    "ResultResponseLinks",
    "ServiceExecution",
    "ServiceExecutionStatus",
]
