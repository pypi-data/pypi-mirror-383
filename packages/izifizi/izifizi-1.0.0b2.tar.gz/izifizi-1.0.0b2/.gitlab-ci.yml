image: python:3.12

stages:
  - lint
  - test
  - tag
  - build
  - deploy

before_script:
  - pip install --upgrade pip
  - pip install uv
  - export PATH="$HOME/.local/bin:$PATH"

workflow:
  rules:
    - if: "$CI_MERGE_REQUEST_IID" # Run merge request pipeline if a merge request is open
      when: always
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS" # Avoid running branch pipeline if a merge request is open
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH" # Run branch pipeline for main branch
      when: always
    - if: "$CI_COMMIT_TAG" # Run tag pipeline.
      when: always
    - when: never # Don't run pipelines for other cases (e.g., tags, unless explicitly defined)

MyPy:
  stage: lint
  script:
    - uv run --all-groups mypy .
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always

Ruff Format:
  stage: lint
  script:
    - uv run --all-groups ruff format --check
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always

Ruff Check:
  stage: lint
  script:
    - uv run --all-groups ruff check .
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: always

Test:
  stage: test
  script:
    - uv run --group test pytest --cov=izifizi --junitxml=test.xml --cov-report=xml:coverage.xml tests/
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: test.xml

  rules:
    # Run automatically on MR pipelines targeting main
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: "$CI_COMMIT_TAG"
      when: never
    # Run manually on push pipelines
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual

Verify Version Bump:
  stage: tag
  image: python:3.12
  script:
    - latest_tag=$(git tag --sort=-v:refname | head -n1)
    - echo "Latest Git tag, $latest_tag"
    - uv run --group compare-tags python scripts/compare_tags.py "$latest_tag"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
    - if: "$CI_COMMIT_TAG"
      when: never

Create Tag:
  stage: tag
  script:
    - version=$(uv run --group compare-tags python scripts/get_version.py)
    - tag="v$version"
    - echo "Creating Git tag, $tag"

    # Configure Git
    - git config user.name "$GITLAB_USER_NAME"
    - git config user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin "https://oauth2:$PAT@gitlab.com/$CI_PROJECT_PATH.git"
    # Create and push tag
    - git tag "$tag" -m "$TAG_DESCRIPTION" # Should be given by the user triggering the job
    - git push origin "$tag"
  needs:
    - Verify Version Bump
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: manual
    - if: "$CI_COMMIT_TAG"
      when: never

Build Package:
  stage: build
  script:
    - uv run uv build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: "$CI_COMMIT_TAG"
      when: always

Create Release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cli:latest
  before_script: []
  script:
    - echo "Running release creation for tag $CI_COMMIT_TAG"
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: "Release $CI_COMMIT_TAG"
    description: "Automatic release of version $CI_COMMIT_TAG"
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success

pages:
  stage: deploy
  script:
    - uv run --group docs mkdocs build --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_COMMIT_TAG"
      when: manual

Deploy Package to PyPI:
  stage: deploy
  script:
    - uv publish --username __token__ --password $PYPI_TOKEN
  needs:
    - job: Build Package
      artifacts: true
  rules:
    - if: "$CI_COMMIT_TAG"
      when: manual
