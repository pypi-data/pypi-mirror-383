Metadata-Version: 2.4
Name: PyCgame
Version: 1.8.0
Summary: Moteur Python pour jeux 2D avec gestion des images, sons et entr√©es
Author: Baptiste GUERIN
Author-email: baptiste.guerin34@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Games/Entertainment
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-python
Dynamic: summary

# üéÆ PyCgame

**PyCgame** est un module Python pour cr√©er facilement des jeux 2D avec :

* üñºÔ∏è Gestion des **images**
* üîä Gestion des **sons**
* ‚å®Ô∏è Gestion du **clavier/souris**
* üéÆ Support des **manettes/joysticks**
* üßÆ Fonctions **math√©matiques int√©gr√©es**

üëâ Compatible avec **Windows** et **Linux**.

---

<img src="https://raw.githubusercontent.com/Baptistegrn/PyCgame/refs/heads/main/demo.gif" width="500">

## ‚ö° Installation

### üì¶ Depuis PyPI

```bash
pip install PyCgame
```

---

### üêç Importation dans votre projet

```python
from PyCgame import PyCgame
```

> ‚ö†Ô∏è **Important :**  
> L‚Äôimport **doit √™tre exactement** :
> ```python
> from PyCgame import PyCgame
> ```
> Toute autre forme d‚Äôimport peut emp√™cher la biblioth√®que de localiser correctement ses d√©pendances internes.

---

### ‚öôÔ∏è Compilation automatique

Si votre syst√®me d‚Äôexploitation **n‚Äôest pas directement compatible**,  
la compilation de la biblioth√®que native sera **automatiquement effectu√©e via [`xmake`](https://xmake.io)**.

Assurez-vous que :
- la librairie compil√©e se trouve bien dans **`dist/`** (ex : `PyCgame/dist/`),  
- et que `xmake` est correctement install√© et accessible dans votre terminal.

---

### üß± G√©n√©ration d‚Äôun ex√©cutable

Pour compiler votre projet en ex√©cutable autonome :

```bash
pycgame_app nom_du_fichier
```

**D√©tails :**
- Le fichier `.exe` (ou √©quivalent selon l‚ÄôOS) sera g√©n√©r√© dans le dossier **`/dist`**.  
- **[PyInstaller](https://pyinstaller.org/)** est requis pour cette √©tape.  
- L‚Äôex√©cutable g√©n√©r√© est **sp√©cifique √† l‚ÄôOS** sur lequel la compilation a √©t√© faite.  

> üí° **Astuce :**  
> Si vous avez recompil√© la librairie via `xmake`, l‚Äôex√©cutable obtenu **ne sera pas forc√©ment portable** entre distributions Linux diff√©rentes.  
> Il est donc recommand√© de compiler sur une **distribution largement utilis√©e** (ex. *Ubuntu*, *Debian*, *Fedora*).



## üöÄ Initialisation d'un jeu

```python
PyCgame.init(
    largeur=160,           # largeur virtuelle
    hauteur=90,            # hauteur virtuelle
    fps=60,                # nombre d'images par seconde
    coeff=3,               # facteur de mise √† l'√©chelle
    chemin_image="./assets", # dossier images
    chemin_son="./assets",   # dossier sons
    dessiner=True,         # dessiner le fond ?
    bande_noir=True,       # bandes noires si ratio diff√©rent ?
    r=0, g=0, b=0,         # couleur de fond
    update_func=Update,    # fonction d'update
    nom_fenetre="MonJeu",  # nom de la fen√™tre
    debug=False            # on √©crit les logs dans erreurs.log ?
)

PyCgame.stopper_jeu()
```

---

## üîÑ Boucle de mise √† jour

```python
def Update():
    if PyCgame.touche_presser("Espace"):
        print("Espace press√©e !")
```

---

## üìä Propri√©t√©s globales

| Propri√©t√©            | Description                         |
| -------------------- | ----------------------------------- |
| `PyCgame.largeur`    | largeur virtuelle                   |
| `PyCgame.hauteur`    | hauteur virtuelle                   |
| `PyCgame.dt`         | delta time entre frames             |
| `PyCgame.fps`        | FPS actuel                          |
| `PyCgame.time`       | temps √©coul√©                        |
| `PyCgame.run`        | bool : le jeu tourne ?              |
| `PyCgame.decalage_x` | d√©calage en x du jeu en plein √©cran |
| `PyCgame.decalage_y` | d√©calage en y du jeu en plein √©cran |

---

## üñ±Ô∏è Gestion de la souris

```python
PyCgame.mouse_x
PyCgame.mouse_y
PyCgame.mouse_presse
PyCgame.mouse_juste_presse
PyCgame.mouse_droit_presse
PyCgame.mouse_droit_juste_presse
```

---

## ‚å®Ô∏è Gestion du clavier

### V√©rification des touches

```python
PyCgame.touche_presser("A")
PyCgame.touche_enfoncee("A")
```

### Liste compl√®te des touches support√©es

#### Lettres :

`A` ‚Ä¶ `Z` (majuscules ou minuscules accept√©es)

#### Chiffres :

`0` ‚Ä¶ `9`

#### Touches sp√©ciales :

* `espace`
* `entrer` / `return`
* `echap` / `escape`
* `tab`
* `maj` / `shift`
* `ctrl` / `control`
* `alt`
* `altgr`
* `capslock` / `verrmaj`
* `verrnum` / `numlock`

#### Navigation :

* `haut` / `up`
* `bas` / `down`
* `gauche` / `left`
* `droite` / `right`
* `insert`
* `suppr` / `delete`
* `home`
* `end`
* `pageup` / `precedent`
* `pagedown` / `suivant`

#### Syst√®me :

* `menu` / `context`
* `printscreen` / `impr`
* `scrolllock`
* `pause` / `break`

#### Pav√© num√©rique :

* `kp0` ‚Ä¶ `kp9`
* `kp+`
* `kp-`
* `kp*`
* `kp/`
* `kp.`
* `kpentrer` / `kpreturn`

#### Fonctions :

* `F1` ‚Ä¶ `F12`

---

## üéÆ Gestion des manettes

```python
PyCgame.init_mannette(0)

if PyCgame.touche_mannette_juste_presse("X"):
    PyCgame.pause_son("./assets/test.wav")

if PyCgame.touche_mannette_juste_presse("Y"):
    PyCgame.reprendre_son("./assets/test.wav")

if PyCgame.touche_mannette_enfoncee("A"):
    print("A maintenu")

# Lecture des joysticks
axes = PyCgame.renvoie_joysticks()
if axes:
    x_gauche, y_gauche, x_droit, y_droit, lt, rt = axes
    print("Stick gauche :", x_gauche, y_gauche)
    print("Stick droit  :", x_droit, y_droit)
    print("Triggers     :", lt, rt)

PyCgame.fermer_controller()
```

### Boutons support√©s

#### Boutons principaux :

* `a`, `b`, `x`, `y`

#### Syst√®me :

* `start`, `back`, `select`, `guide`, `home`, `share`, `capture`

#### Sticks cliquables :

* `leftstick`, `l3`
* `rightstick`, `r3`

#### Bumpers :

* `lb`, `l1`, `leftshoulder`
* `rb`, `r1`, `rightshoulder`

#### Triggers :

* `lt`, `l2`
* `rt`, `r2`

#### Croix directionnelle (D-Pad) :

* `haut` / `up`
* `bas` / `down`
* `gauche` / `left`
* `droite` / `right`

#### Additionnels :

* `paddle1`, `paddle2`, `paddle3`, `paddle4`
* `touchpad`

### üéÆ Joysticks analogiques

`PyCgame.renvoie_joysticks(dead_zone=0.1)`  
Retourne un tableau de 6 valeurs flottantes entre -1 et 1 :

1. axe horizontal du stick gauche  
2. axe vertical du stick gauche  
3. axe horizontal du stick droit  
4. axe vertical du stick droit  
5. g√¢chette gauche (trigger L2 / LT)  
6. g√¢chette droite (trigger R2 / RT)  

‚ö†Ô∏è Dead zone : ignore les petites variations au repos (par d√©faut 0.1)

---

## üñºÔ∏è Images et texte

Le syst√®me de rendu utilise **l'ordre de dessin** : les √©l√©ments sont affich√©s dans l'ordre o√π ils sont ajout√©s. Pour placer une image au premier plan, il faut retirer les √©l√©ments qui la pr√©c√®dent puis les rajouter apr√®s (co√ªt n√©gligeable).

```python
# Dessiner une image
PyCgame.dessiner_image("./assets/perso.png", x=10, y=20, w=32, h=32, sens=0, rotation=0)

# Dessiner plusieurs images en batch (plus performant)
PyCgame.dessiner_image_batch(
    ids=["./assets/tile.png", "./assets/tile.png", "./assets/enemy.png"],
    xs=[0, 32, 64],
    ys=[0, 0, 16],
    ws=[32, 32, 48],
    hs=[32, 32, 48],
    sens=[0, 0, 1],      # optionnel (par d√©faut : 0)
    rotations=[0, 0, 90] # optionnel (par d√©faut : 0)
)

# Dessiner du texte
PyCgame.dessiner_mot(
    lien="./assets/police",  # chemin vers la police de caract√®res
    mot="Hello World",
    x=50, y=50,
    coeff=1,    # facteur de taille
    ecart=1,    # espacement entre les caract√®res
    sens=0,     # orientation (0=normal, 1=miroir horizontal)
    rotation=0  # rotation en degr√©s
)

# √âcrire dans la console de debug
PyCgame.ecrire_console("Message de debug")
```

### Param√®tres de dessin

* **lien/ids** : chemin vers l'image ou la police de caract√®res
* **x, y** : position en pixels (coordonn√©es virtuelles)
* **w, h** : largeur et hauteur en pixels
* **sens** : orientation (0 = normal, 1 = miroir horizontal)
* **rotation** : rotation en degr√©s (0-360)
* **coeff** : facteur d'√©chelle pour le texte
* **ecart** : espacement entre les caract√®res du texte

---

## üîä Sons

```python
# Jouer un son
PyCgame.jouer_son("./assets/son.wav", boucle=1, canal=3)

# Arr√™ter un son sp√©cifique
PyCgame.arreter_son("./assets/son.wav")

# Arr√™ter un canal
PyCgame.arreter_canal(3)

# Pause/Reprendre par canal
PyCgame.pause_canal(3)
PyCgame.reprendre_canal(3)

# Pause/Reprendre par son
PyCgame.pause_son("./assets/son.wav")
PyCgame.reprendre_son("./assets/son.wav")
```

### Param√®tres audio

* **boucle** : nombre de r√©p√©titions (-1 = infini, 0 = une fois, 1+ = r√©p√©titions)
* **canal** : canal audio √† utiliser (-1 = automatique, 0-31 = canal sp√©cifique)

---

## üßÆ Fonctions math√©matiques

```python
PyCgame.abs_val(-5)
PyCgame.clamp(10, 0, 5)
PyCgame.pow(2, 3)
PyCgame.sqrt(16)
PyCgame.sin(3.14)
PyCgame.atan2(1, 1)
```

Inclus aussi : `cos`, `tan`, `log`, `exp`, `floor`, `ceil`, `round`, `trunc`, `fmod`, `hypot`, etc.

---

## üñ•Ô∏è Redimensionnement

```python
PyCgame.redimensionner_fenetre()
```

---

## üé® Colorier fond

```python
PyCgame.colorier(r, g, b)
```

---

## üé≤ Fonction random

```python
PyCgame.random(min, max)
```

---

## üìÇ Exemple minimal

```python
from PyCgame import PyCgame

def update():
    # Dessiner une image chaque frame
    PyCgame.dessiner_image("./assets/player.png", 10, 10, 32, 32)
    
    if PyCgame.touche_presser("Espace"):
        print("Espace press√©e !")

PyCgame.init(largeur=160, hauteur=90, fps=60, update_func=update)
```

---

## ‚úÖ Notes importantes

* Les chemins des fichiers sont relatifs au projet.
* Les images sont dessin√©es **dans l'ordre d'ajout** - l'ordre d√©finit la profondeur de rendu.
* `update_func` doit √™tre une **fonction callable**.
* Utilisez `dessiner_image_batch()` pour optimiser le rendu de multiples images similaires.
* Pour les manettes : toujours appeler `PyCgame.init_mannette()` apr√®s `PyCgame.init()` et fermer avec `PyCgame.fermer_controller()` avant de quitter.

---

## üì¨ Support

Pour signaler un bug ou proposer une am√©lioration :  
üìß **[Baptiste.guerin34@gmail.com](mailto:Baptiste.guerin34@gmail.com)**
