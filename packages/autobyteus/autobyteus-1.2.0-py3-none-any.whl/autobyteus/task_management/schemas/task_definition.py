"""
Defines the Pydantic models for task "definitions".

These models represent the exact structure that an LLM is expected to generate.
They serve as a blueprint or definition for a plan, which the system then uses
to construct the final, internal TaskPlan object. They are used for input
validation and for programmatically generating a JSON schema for tool descriptions.
"""
from typing import List
from pydantic import BaseModel, Field, field_validator

class TaskDefinitionSchema(BaseModel):
    """A Pydantic model representing a single task as defined by an LLM."""
    task_name: str = Field(..., description="A short, unique, descriptive name for this task within the plan (e.g., 'setup_project', 'implement_scraper'). Used for defining dependencies.")
    assignee_name: str = Field(..., description="The name of the agent or sub-team assigned to this task.")
    description: str = Field(..., description="A clear, detailed, and unambiguous description of what this task entails. Provide all necessary context for the assignee to complete the work. For example, if the task involves a file, specify its full, absolute path. If it requires creating a file, specify where it should be saved. Mention any specific requirements or expected outputs.")
    dependencies: List[str] = Field(
        default_factory=list,
        description="A list of 'task_name' values for tasks that must be completed first."
    )

class TasksDefinitionSchema(BaseModel):
    """A Pydantic model representing a list of tasks as generated by an LLM."""
    tasks: List[TaskDefinitionSchema] = Field(..., description="The list of tasks to be published.")

    @field_validator('tasks')
    def task_names_must_be_unique(cls, tasks: List[TaskDefinitionSchema]) -> List[TaskDefinitionSchema]:
        """Ensures that the LLM-provided task_names are unique within this list."""
        seen_names = set()
        for task in tasks:
            if task.task_name in seen_names:
                raise ValueError(f"Duplicate task_name '{task.task_name}' found in task list. Each task_name must be unique.")
            seen_names.add(task.task_name)
        return tasks
