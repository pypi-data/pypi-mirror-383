# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Optional
from typing_extensions import Self

class OpenApiException(Exception):
    """The base exception class for all OpenAPIExceptions"""


class ApiTypeError(OpenApiException, TypeError):
    def __init__(self, msg, path_to_item=None, valid_classes=None,
                 key_type=None) -> None:
        """ Raises an exception for TypeErrors

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list): a list of keys an indices to get to the
                                 current_item
                                 None if unset
            valid_classes (tuple): the primitive classes that current item
                                   should be an instance of
                                   None if unset
            key_type (bool): False if our value is a value in a dict
                             True if it is a key in a dict
                             False if our item is an item in a list
                             None if unset
        """
        self.path_to_item = path_to_item
        self.valid_classes = valid_classes
        self.key_type = key_type
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiTypeError, self).__init__(full_msg)


class ApiValueError(OpenApiException, ValueError):
    def __init__(self, msg, path_to_item=None) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list) the path to the exception in the
                received_data dict. None if unset
        """

        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiValueError, self).__init__(full_msg)


class ApiAttributeError(OpenApiException, AttributeError):
    def __init__(self, msg, path_to_item=None) -> None:
        """
        Raised when an attribute reference or assignment fails.

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiAttributeError, self).__init__(full_msg)


class ApiKeyError(OpenApiException, KeyError):
    def __init__(self, msg, path_to_item=None) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiKeyError, self).__init__(full_msg)


class ApiException(OpenApiException):

    def __init__(
        self, 
        status=None, 
        reason=None, 
        http_resp=None,
        *,
        body: Optional[str] = None,
        data: Optional[Any] = None,
    ) -> None:
        self.status = status
        self.reason = reason
        self.body = body
        self.data = data
        self.headers = None

        self.content_encoding = ""
        self.rate_limit_limit = ""
        self.rate_limit_remaining = 0
        self.rate_limit_reset = 0
        self.zuora_track_id = ""
        self.zuora_request_id = ""
        self.concurrency_limit_type = ""
        self.concurrency_limit_limit = 0
        self.concurrency_limit_remaining = 0

        if http_resp:
            if self.status is None:
                self.status = http_resp.status
            if self.reason is None:
                self.reason = http_resp.reason
            if self.body is None:
                try:
                    self.body = http_resp.data.decode('utf-8')
                except Exception:
                    pass
            self.headers = http_resp.getheaders()
            self.parse_and_set_response_headers()

    def parse_and_set_response_headers(self):
        """
        Set response header related variables by parsing response headers.
        """
        try:
            if self.headers is not None:
                for key, values in self.headers.items():
                    key = key.lower()
                    if values is None:
                        continue
                    value = values[0] if type(values) == list and len(values) > 0 else str(values)

                    if key == "content-encoding":
                        self.content_encoding = value
                    elif key == "ratelimit-limit":
                        self.rate_limit_limit = value
                    elif key == "ratelimit-remaining":
                        self.rate_limit_remaining = int(value)
                    elif key == "ratelimit-reset":
                        self.rate_limit_reset = int(value)
                    elif key == "zuora-request-id":
                        self.zuora_request_id = value
                    elif key == "zuora-track-id":
                        self.zuora_track_id = value
                    elif key == "concurrency-limit-type":
                        self.concurrency_limit_type = value
                    elif key == "concurrency-limit-limit":
                        self.concurrency_limit_limit = int(value)
                    elif key == "concurrency-limit-remaining":
                        self.concurrency_limit_remaining = int(value)
        except Exception as e:
            print(e)

    def get_status(self):
        """
        Get the status.

        :return: the status
        """
        return self.status

    def get_headers(self):
        """
        Get the headers.

        :return: a dictionary of headers
        """
        return self.headers

    def get_zuora_request_id(self) -> str:
        """
        Get Zuora internal identifier of the API call. You cannot control the value of this header.

        :return: the Zuora request ID
        """
        return self.zuora_request_id

    def get_content_encoding(self) -> str:
        """
        Gets the content encoding.

        :return: the content encoding
        """
        return self.content_encoding

    def get_rate_limit_limit(self) -> str:
        """
        Gets the request limit quota for the time window closest to exhaustion.

        :return: the rate limit limit
        """
        return self.rate_limit_limit

    def get_rate_limit_remaining(self) -> int:
        """
        Gets the number of requests remaining in the time window closest to quota exhaustion.

        :return: the remaining rate limit
        """
        return self.rate_limit_remaining

    def get_rate_limit_reset(self) -> int:
        """
        Gets the number of seconds until the quota resets for the time window closest to quota exhaustion.

        :return: the rate limit reset time
        """
        return self.rate_limit_reset

    def get_zuora_track_id(self) -> str:
        """
        Gets the custom identifier for tracing the API call. If you specified a tracing identifier in the request headers,
        Zuora returns the same tracing identifier. Otherwise, Zuora does not set this header.

        :return: the Zuora track ID
        """
        return self.zuora_track_id

    def get_concurrency_limit_type(self) -> str:
        """
        Gets the type of the concurrency limit, which can be either Default or High-volume transactions.

        :return: the concurrency limit type
        """
        return self.concurrency_limit_type

    def get_concurrency_limit_limit(self) -> int:
        """
        Gets the total number of the permitted concurrent requests.

        :return: the concurrency limit
        """
        return self.concurrency_limit_limit

    def get_concurrency_limit_remaining(self) -> int:
        """
        Gets the remaining number of the permitted concurrent requests.

        :return: the remaining concurrency limit
        """
        return self.concurrency_limit_remaining

    @classmethod
    def from_response(
        cls, 
        *, 
        http_resp, 
        body: Optional[str], 
        data: Optional[Any],
    ) -> Self:
        if http_resp.status == 400:
            raise BadRequestException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 401:
            raise UnauthorizedException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 403:
            raise ForbiddenException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 404:
            raise NotFoundException(http_resp=http_resp, body=body, data=data)

        if 500 <= http_resp.status <= 599:
            raise ServiceException(http_resp=http_resp, body=body, data=data)
        raise ApiException(http_resp=http_resp, body=body, data=data)

    def __str__(self):
        """Custom error messages for exception"""
        error_message = "({0})\n"\
                        "Reason: {1}\n".format(self.status, self.reason)
        if self.headers:
            error_message += "HTTP response headers: {0}\n".format(
                self.headers)

        if self.data or self.body:
            error_message += "HTTP response body: {0}\n".format(self.data or self.body)

        return error_message


class BadRequestException(ApiException):
    pass


class NotFoundException(ApiException):
    pass


class UnauthorizedException(ApiException):
    pass


class ForbiddenException(ApiException):
    pass


class ServiceException(ApiException):
    pass


def render_path(path_to_item):
    """Returns a string representation of a path"""
    result = ""
    for pth in path_to_item:
        if isinstance(pth, int):
            result += "[{0}]".format(pth)
        else:
            result += "['{0}']".format(pth)
    return result
