# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.charge_override import ChargeOverride
from zuora_sdk.models.create_order_rate_plan_feature_override import CreateOrderRatePlanFeatureOverride
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderProductRatePlanOverride(BaseModel):
    """
    Information about an order action of type `addProduct`.  
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    charge_overrides: Optional[List[ChargeOverride]] = Field(default=None, description="List of charges associated with the rate plan. ", alias="chargeOverrides")
    clearing_existing_features: Optional[StrictBool] = Field(default=None, description="Specifies whether all features in the rate plan will be cleared. ", alias="clearingExistingFeatures")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of the Rate Plan object. The custom fields of the Rate Plan object are used when rate plans are subscribed.", alias="customFields")
    external_catalog_plan_id: Optional[StrictStr] = Field(default=None, description="An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.   **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.", alias="externalCatalogPlanId")
    externally_managed_plan_id: Optional[StrictStr] = Field(default=None, description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.", alias="externallyManagedPlanId")
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, description="Internal identifier of the product rate plan that the rate plan is based on.", alias="productRatePlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate plan for this subscription. ", alias="productRatePlanNumber")
    subscription_product_features: Optional[List[CreateOrderRatePlanFeatureOverride]] = Field(default=None, description="List of features associated with the rate plan.  The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:  * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.  * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.", alias="subscriptionProductFeatures")
    unique_token: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.   For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.", alias="uniqueToken")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["chargeOverrides", "clearingExistingFeatures", "customFields", "externalCatalogPlanId", "externallyManagedPlanId", "productRatePlanId", "productRatePlanNumber", "subscriptionProductFeatures", "uniqueToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderProductRatePlanOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_overrides (list)
        _items = []
        if self.charge_overrides:
            for _item_charge_overrides in self.charge_overrides:
                if _item_charge_overrides:
                    _items.append(_item_charge_overrides.to_dict())
            _dict['chargeOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_product_features (list)
        _items = []
        if self.subscription_product_features:
            for _item_subscription_product_features in self.subscription_product_features:
                if _item_subscription_product_features:
                    _items.append(_item_subscription_product_features.to_dict())
            _dict['subscriptionProductFeatures'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderProductRatePlanOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "chargeOverrides": [ChargeOverride.from_dict(_item) for _item in obj["chargeOverrides"]] if obj.get("chargeOverrides") is not None else None,
            "clearingExistingFeatures": obj.get("clearingExistingFeatures"),
            "customFields": obj.get("customFields"),
            "externalCatalogPlanId": obj.get("externalCatalogPlanId"),
            "externallyManagedPlanId": obj.get("externallyManagedPlanId"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "subscriptionProductFeatures": [CreateOrderRatePlanFeatureOverride.from_dict(_item) for _item in obj["subscriptionProductFeatures"]] if obj.get("subscriptionProductFeatures") is not None else None,
            "uniqueToken": obj.get("uniqueToken")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
