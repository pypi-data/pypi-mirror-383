# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateBillingPreviewCreditMemoItem(BaseModel):
    """
    CreateBillingPreviewCreditMemoItem
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The credit memo item amount excluding tax. ", alias="amountWithoutTax")
    applied_to_item_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the credit memo item that the discount charge is applied to.", alias="appliedToItemId")
    charge_date: Optional[StrictStr] = Field(default=None, description="The date when the credit memo item is created. ", alias="chargeDate")
    charge_number: Optional[StrictStr] = Field(default=None, description="Number of the charge. ", alias="chargeNumber")
    charge_type: Optional[StrictStr] = Field(default=None, description="The type of charge.   Possible values are `OneTime`, `Recurring`, and `Usage`. ", alias="chargeType")
    comment: Optional[StrictStr] = Field(default=None, description="Comment of the credit memo item. ")
    id: Optional[StrictStr] = Field(default=None, description="Credit memo item id. ")
    number_of_deliveries: Optional[StrictStr] = Field(default=None, description="The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled. ", alias="numberOfDeliveries")
    processing_type: Optional[StrictStr] = Field(default=None, description="Identifies the kind of charge.   Possible values: * charge * discount * prepayment * tax ", alias="processingType")
    quantity: Optional[StrictStr] = Field(default=None, description="Quantity of this item, in the configured unit of measure for the charge. ")
    rate_plan_charge_id: Optional[StrictStr] = Field(default=None, description="Id of the rate plan charge associated with this item. ", alias="ratePlanChargeId")
    service_end_date: Optional[date] = Field(default=None, description="End date of the service period for this item, i.e., the last day of the service period, in yyyy-mm-dd format.", alias="serviceEndDate")
    service_start_date: Optional[date] = Field(default=None, description="Start date of the service period for this item, in yyyy-mm-dd format. If the charge is a one-time fee, this is the date of that charge.", alias="serviceStartDate")
    sku: Optional[StrictStr] = Field(default=None, description="Unique SKU for the product associated with this item. ")
    sku_name: Optional[StrictStr] = Field(default=None, description="Name of the unique SKU for the product associated with this item. ", alias="skuName")
    subscription_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription associated with this item. ", alias="subscriptionId")
    subscription_number: Optional[StrictStr] = Field(default=None, description="Name of the subscription associated with this item. ", alias="subscriptionNumber")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit used to measure consumption. ", alias="unitOfMeasure")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["amount", "amountWithoutTax", "appliedToItemId", "chargeDate", "chargeNumber", "chargeType", "comment", "id", "numberOfDeliveries", "processingType", "quantity", "ratePlanChargeId", "serviceEndDate", "serviceStartDate", "sku", "skuName", "subscriptionId", "subscriptionNumber", "unitOfMeasure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBillingPreviewCreditMemoItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBillingPreviewCreditMemoItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "appliedToItemId": obj.get("appliedToItemId"),
            "chargeDate": obj.get("chargeDate"),
            "chargeNumber": obj.get("chargeNumber"),
            "chargeType": obj.get("chargeType"),
            "comment": obj.get("comment"),
            "id": obj.get("id"),
            "numberOfDeliveries": obj.get("numberOfDeliveries"),
            "processingType": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "ratePlanChargeId": obj.get("ratePlanChargeId"),
            "serviceEndDate": obj.get("serviceEndDate"),
            "serviceStartDate": obj.get("serviceStartDate"),
            "sku": obj.get("sku"),
            "skuName": obj.get("skuName"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionNumber": obj.get("subscriptionNumber"),
            "unitOfMeasure": obj.get("unitOfMeasure")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
