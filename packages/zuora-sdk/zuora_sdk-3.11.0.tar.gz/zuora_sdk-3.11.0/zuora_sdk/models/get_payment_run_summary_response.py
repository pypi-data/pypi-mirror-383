# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.get_payment_run_summary_total_values_response import GetPaymentRunSummaryTotalValuesResponse
from typing import Optional, Set
from typing_extensions import Self

class GetPaymentRunSummaryResponse(BaseModel):
    """
    GetPaymentRunSummaryResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    number_of_credit_balance_adjustments: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Credit Balance feature enabled.   The number of credit balance adjustments that are successfully processed in the payment run.", alias="numberOfCreditBalanceAdjustments")
    number_of_credit_memos: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The total number of credit memos that are successfully processed in the payment run.", alias="numberOfCreditMemos")
    number_of_debit_memos: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The total number of debit memos that are picked up for processing in the payment run.", alias="numberOfDebitMemos")
    number_of_error_input_data: Optional[StrictInt] = Field(default=None, description="The number of input data that are processed with errors. ", alias="numberOfErrorInputData")
    number_of_errors: Optional[StrictInt] = Field(default=None, description="The number of payments with the status of `Error` and `Processing`. ", alias="numberOfErrors")
    number_of_input_data: Optional[StrictInt] = Field(default=None, description="The total number of input data. ", alias="numberOfInputData")
    number_of_invoices: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The total number of invoices that are picked up for processing in the payment run.", alias="numberOfInvoices")
    number_of_payments: Optional[StrictInt] = Field(default=None, description="The number of payments that are successfully processed in the payment run. ", alias="numberOfPayments")
    number_of_processed_input_data: Optional[StrictInt] = Field(default=None, description="The number of input data that are successfully processed. ", alias="numberOfProcessedInputData")
    number_of_receivables: Optional[StrictInt] = Field(default=None, description="The total number of receivables that are picked up for processing in the payment run.   The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field.", alias="numberOfReceivables")
    number_of_unapplied_payments: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The number of unapplied payments that are successfully processed in the payment run.", alias="numberOfUnappliedPayments")
    number_of_unprocessed_debit_memos: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The number of debit memos with remaining positive balances after the payment run is completed.", alias="numberOfUnprocessedDebitMemos")
    number_of_unprocessed_invoices: Optional[StrictInt] = Field(default=None, description="**Note:** This field is only available if you have the Invoice Settlement feature enabled.   The number of invoices with remaining positive balances after the payment run is completed.", alias="numberOfUnprocessedInvoices")
    number_of_unprocessed_receivables: Optional[StrictInt] = Field(default=None, description="The number of receivables with remaining positive balances after the payment run is completed.", alias="numberOfUnprocessedReceivables")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully. ")
    total_values: Optional[List[GetPaymentRunSummaryTotalValuesResponse]] = Field(default=None, description="Container for total values. ", alias="totalValues")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["numberOfCreditBalanceAdjustments", "numberOfCreditMemos", "numberOfDebitMemos", "numberOfErrorInputData", "numberOfErrors", "numberOfInputData", "numberOfInvoices", "numberOfPayments", "numberOfProcessedInputData", "numberOfReceivables", "numberOfUnappliedPayments", "numberOfUnprocessedDebitMemos", "numberOfUnprocessedInvoices", "numberOfUnprocessedReceivables", "success", "totalValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPaymentRunSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in total_values (list)
        _items = []
        if self.total_values:
            for _item_total_values in self.total_values:
                if _item_total_values:
                    _items.append(_item_total_values.to_dict())
            _dict['totalValues'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPaymentRunSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "numberOfCreditBalanceAdjustments": obj.get("numberOfCreditBalanceAdjustments"),
            "numberOfCreditMemos": obj.get("numberOfCreditMemos"),
            "numberOfDebitMemos": obj.get("numberOfDebitMemos"),
            "numberOfErrorInputData": obj.get("numberOfErrorInputData"),
            "numberOfErrors": obj.get("numberOfErrors"),
            "numberOfInputData": obj.get("numberOfInputData"),
            "numberOfInvoices": obj.get("numberOfInvoices"),
            "numberOfPayments": obj.get("numberOfPayments"),
            "numberOfProcessedInputData": obj.get("numberOfProcessedInputData"),
            "numberOfReceivables": obj.get("numberOfReceivables"),
            "numberOfUnappliedPayments": obj.get("numberOfUnappliedPayments"),
            "numberOfUnprocessedDebitMemos": obj.get("numberOfUnprocessedDebitMemos"),
            "numberOfUnprocessedInvoices": obj.get("numberOfUnprocessedInvoices"),
            "numberOfUnprocessedReceivables": obj.get("numberOfUnprocessedReceivables"),
            "success": obj.get("success"),
            "totalValues": [GetPaymentRunSummaryTotalValuesResponse.from_dict(_item) for _item in obj["totalValues"]] if obj.get("totalValues") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
