# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.debit_memo_item_from_invoice_item_request import DebitMemoItemFromInvoiceItemRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateDebitMemosFromInvoiceRequest(BaseModel):
    """
    CreateDebitMemosFromInvoiceRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether debit memos are automatically picked up for processing in the corresponding payment run.  By default, debit memos are automatically picked up for processing in the corresponding payment run. ", alias="autoPay")
    auto_post: Optional[StrictBool] = Field(default=False, description="Whether to automatically post the debit memo after it is created.  Setting this field to `true`, you do not need to separately call the [Post debit memo](https://www.zuora.com/developer/api-references/api/operation/Put_PostDebitMemo) operation to post the debit memo. ", alias="autoPost")
    bill_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact associated with the debit memo. ", alias="billToContactId")
    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Comments about the debit memo.  ")
    effective_date: Optional[date] = Field(default=None, description="The date when the debit memo takes effect. ", alias="effectiveDate")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice that the debit memo is created from. ", alias="invoiceId")
    items: List[DebitMemoItemFromInvoiceItemRequest] = Field(description="Container for items. The maximum number of items is 1,000. ")
    sold_to_same_as_bill_to: Optional[StrictBool] = Field(default=None, description="Whether the sold-to contact and bill-to contact are the same entity.   The created debit memo has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.", alias="soldToSameAsBillTo")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the debit memo. ", alias="soldToContactId")
    reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ", alias="reasonCode")
    tax_auto_calculation: Optional[StrictBool] = Field(default=True, description="Whether to automatically calculate taxes in the debit memo. ", alias="taxAutoCalculation")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationStatus__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SyncDate__NS")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["autoPay", "autoPost", "billToContactId", "comment", "effectiveDate", "invoiceId", "items", "soldToSameAsBillTo", "soldToContactId", "reasonCode", "taxAutoCalculation", "IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDebitMemosFromInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDebitMemosFromInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "autoPay": obj.get("autoPay"),
            "autoPost": obj.get("autoPost") if obj.get("autoPost") is not None else False,
            "billToContactId": obj.get("billToContactId"),
            "comment": obj.get("comment"),
            "effectiveDate": obj.get("effectiveDate"),
            "invoiceId": obj.get("invoiceId"),
            "items": [DebitMemoItemFromInvoiceItemRequest.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "soldToSameAsBillTo": obj.get("soldToSameAsBillTo"),
            "soldToContactId": obj.get("soldToContactId"),
            "reasonCode": obj.get("reasonCode"),
            "taxAutoCalculation": obj.get("taxAutoCalculation") if obj.get("taxAutoCalculation") is not None else True,
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
