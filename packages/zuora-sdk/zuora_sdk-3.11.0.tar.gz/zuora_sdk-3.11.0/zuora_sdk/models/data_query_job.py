# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.submit_data_query_request_source_data import SubmitDataQueryRequestSourceData
from typing import Optional, Set
from typing_extensions import Self

class DataQueryJob(BaseModel):
    """
    A data query job. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    created_by: Optional[Annotated[str, Field(min_length=64, strict=True, max_length=64)]] = Field(default=None, description="The query job creator's Id. ", alias="createdBy")
    id: Optional[Annotated[str, Field(min_length=64, strict=True, max_length=64)]] = Field(default=None, description="Internal identifier of the query job. ")
    query: Optional[StrictStr] = Field(default=None, description="The query that was submitted. ")
    source_data: Optional[SubmitDataQueryRequestSourceData] = Field(default=None, alias="sourceData")
    remaining_retries: Optional[StrictInt] = Field(default=None, description="The number of times that Zuora will retry the query if Zuora is unable to perform the query.", alias="remainingRetries")
    updated_on: Optional[datetime] = Field(default=None, description="Date and time when the query job was last updated, in ISO 8601 format. ", alias="updatedOn")
    use_index_join: Optional[StrictBool] = Field(default=None, description="Indicates whether to use Index Join. ", alias="useIndexJoin")
    data_file: Optional[StrictStr] = Field(default=None, description="The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.", alias="dataFile")
    output_rows: Optional[StrictInt] = Field(default=None, description="The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.", alias="outputRows")
    processing_time: Optional[StrictInt] = Field(default=None, description="Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.", alias="processingTime")
    query_status: Optional[StrictStr] = Field(default=None, description="Status of the query job.   * `submitted` - query submitted to query service for processing  * `accepted` - query accepted by the query service  * `in_progress` - query executed by the query service  * `completed` - query execution completed by the query service  * `failed` - query unable to be processed by the query service  * `cancelled` - query cancelled by the user   If the value of this field is `completed`, the `dataFile` field contains the location of the query results.   If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/Delete_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.", alias="queryStatus")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["createdBy", "id", "query", "sourceData", "remainingRetries", "updatedOn", "useIndexJoin", "dataFile", "outputRows", "processingTime", "queryStatus"]

    @field_validator('query_status')
    def query_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['submitted', 'accepted', 'in_progress', 'completed', 'failed', 'cancelled']):
            raise ValueError("must be one of enum values ('submitted', 'accepted', 'in_progress', 'completed', 'failed', 'cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataQueryJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataQueryJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "createdBy": obj.get("createdBy"),
            "id": obj.get("id"),
            "query": obj.get("query"),
            "sourceData": obj.get("sourceData"),
            "remainingRetries": obj.get("remainingRetries"),
            "updatedOn": obj.get("updatedOn"),
            "useIndexJoin": obj.get("useIndexJoin"),
            "dataFile": obj.get("dataFile"),
            "outputRows": obj.get("outputRows"),
            "processingTime": obj.get("processingTime"),
            "queryStatus": obj.get("queryStatus")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
