# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.initial_term import InitialTerm
from zuora_sdk.models.payment_profile import PaymentProfile
from zuora_sdk.models.renewal_term import RenewalTerm
from typing import Optional, Set
from typing_extensions import Self

class OrderActionTermsAndConditions(BaseModel):
    """
    Information about an order action of type `TermsAndConditions`. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    auto_renew: Optional[StrictBool] = Field(default=None, alias="autoRenew")
    bill_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="billToContactId")
    clearing_existing_bill_to_contact: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.  **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. ", alias="clearingExistingBillToContact")
    clearing_existing_invoice_group_number: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing invoice group number at the subscription level. This field is mutually exclusive with the `invoiceGroupNumber` field.   **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.", alias="clearingExistingInvoiceGroupNumber")
    clearing_existing_invoice_template: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.  **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. ", alias="clearingExistingInvoiceTemplate")
    clearing_existing_payment_term: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.  **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. ", alias="clearingExistingPaymentTerm")
    clearing_existing_sequence_set: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.  **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. ", alias="clearingExistingSequenceSet")
    clearing_existing_sold_to_contact: Optional[StrictBool] = Field(default=False, description="Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.  **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. ", alias="clearingExistingSoldToContact")
    initial_term: Optional[InitialTerm] = Field(default=None, alias="initialTerm")
    invoice_separately: Optional[StrictBool] = Field(default=None, description="Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.", alias="invoiceSeparately")
    invoice_group_number: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The number of invoice group associated with the subscription.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ", alias="invoiceGroupNumber")
    invoice_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice template associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="invoiceTemplateId")
    payment_term: Optional[StrictStr] = Field(default=None, description="The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="paymentTerm")
    renewal_setting: Optional[StrictStr] = Field(default=None, alias="renewalSetting")
    renewal_terms: Optional[List[RenewalTerm]] = Field(default=None, alias="renewalTerms")
    scheduled_cancel_date: Optional[date] = Field(default=None, description="The date when the subscription is scheduled to be canceled. The subscription is not canceled until the date specified in this field. ", alias="scheduledCancelDate")
    scheduled_suspend_date: Optional[date] = Field(default=None, description="The date when the subscription is scheduled to be suspended. The subscription is not suspended until the date specified in this field.  ", alias="scheduledSuspendDate")
    scheduled_resume_date: Optional[date] = Field(default=None, description="The date when the subscription is scheduled to be resumed. The subscription is not resumed until the date specified in this field.  ", alias="scheduledResumeDate")
    clearing_scheduled_cancel_date: Optional[StrictBool] = Field(default=None, description="Whether to clear the scheduled cancel date at the subscription level. This field is mutually exclusive with the scheduledCancelDate field.  ", alias="clearingScheduledCancelDate")
    clearing_scheduled_suspend_date: Optional[StrictBool] = Field(default=None, description="Whether to clear the scheduled suspend date at the subscription level. This field is mutually exclusive with the scheduledSuspendDate field.  ", alias="clearingScheduledSuspendDate")
    clearing_scheduled_resume_date: Optional[StrictBool] = Field(default=None, description="Whether to clear the scheduled resume date at the subscription level. This field is mutually exclusive with the scheduledResumeDate field.  ", alias="clearingScheduledResumeDate")
    sequence_set_id: Optional[StrictStr] = Field(default=None, description="The ID of the sequence set associated with the subscription.   **Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="sequenceSetId")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="soldToContactId")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact associated with the subscription.", alias="shipToContactId")
    clearing_existing_ship_to_contact: Optional[StrictBool] = Field(default=None, description="Whether to clear the existing ship-to contact ID at the subscription level. This field is mutually exclusive with the `shipToContactId` field.", alias="clearingExistingShipToContact")
    payment_profile: Optional[PaymentProfile] = Field(default=None, alias="paymentProfile")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of the communication profile associated with the subscription.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ", alias="communicationProfileId")
    clearing_existing_communication_profile: Optional[StrictBool] = Field(default=None, description="Whether to clear the existing communication profile at the subscription level. This field is mutually exclusive with the `communicationProfileId` field.", alias="clearingExistingCommunicationProfile")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["autoRenew", "billToContactId", "clearingExistingBillToContact", "clearingExistingInvoiceGroupNumber", "clearingExistingInvoiceTemplate", "clearingExistingPaymentTerm", "clearingExistingSequenceSet", "clearingExistingSoldToContact", "initialTerm", "invoiceSeparately", "invoiceGroupNumber", "invoiceTemplateId", "paymentTerm", "renewalSetting", "renewalTerms", "scheduledCancelDate", "scheduledSuspendDate", "scheduledResumeDate", "clearingScheduledCancelDate", "clearingScheduledSuspendDate", "clearingScheduledResumeDate", "sequenceSetId", "soldToContactId", "shipToContactId", "clearingExistingShipToContact", "paymentProfile", "communicationProfileId", "clearingExistingCommunicationProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionTermsAndConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_term
        if self.initial_term:
            _dict['initialTerm'] = self.initial_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in renewal_terms (list)
        _items = []
        if self.renewal_terms:
            for _item_renewal_terms in self.renewal_terms:
                if _item_renewal_terms:
                    _items.append(_item_renewal_terms.to_dict())
            _dict['renewalTerms'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_profile
        if self.payment_profile:
            _dict['paymentProfile'] = self.payment_profile.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionTermsAndConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "autoRenew": obj.get("autoRenew"),
            "billToContactId": obj.get("billToContactId"),
            "clearingExistingBillToContact": obj.get("clearingExistingBillToContact") if obj.get("clearingExistingBillToContact") is not None else False,
            "clearingExistingInvoiceGroupNumber": obj.get("clearingExistingInvoiceGroupNumber") if obj.get("clearingExistingInvoiceGroupNumber") is not None else False,
            "clearingExistingInvoiceTemplate": obj.get("clearingExistingInvoiceTemplate") if obj.get("clearingExistingInvoiceTemplate") is not None else False,
            "clearingExistingPaymentTerm": obj.get("clearingExistingPaymentTerm") if obj.get("clearingExistingPaymentTerm") is not None else False,
            "clearingExistingSequenceSet": obj.get("clearingExistingSequenceSet") if obj.get("clearingExistingSequenceSet") is not None else False,
            "clearingExistingSoldToContact": obj.get("clearingExistingSoldToContact") if obj.get("clearingExistingSoldToContact") is not None else False,
            "initialTerm": InitialTerm.from_dict(obj["initialTerm"]) if obj.get("initialTerm") is not None else None,
            "invoiceSeparately": obj.get("invoiceSeparately"),
            "invoiceGroupNumber": obj.get("invoiceGroupNumber"),
            "invoiceTemplateId": obj.get("invoiceTemplateId"),
            "paymentTerm": obj.get("paymentTerm"),
            "renewalSetting": obj.get("renewalSetting"),
            "renewalTerms": [RenewalTerm.from_dict(_item) for _item in obj["renewalTerms"]] if obj.get("renewalTerms") is not None else None,
            "scheduledCancelDate": obj.get("scheduledCancelDate"),
            "scheduledSuspendDate": obj.get("scheduledSuspendDate"),
            "scheduledResumeDate": obj.get("scheduledResumeDate"),
            "clearingScheduledCancelDate": obj.get("clearingScheduledCancelDate"),
            "clearingScheduledSuspendDate": obj.get("clearingScheduledSuspendDate"),
            "clearingScheduledResumeDate": obj.get("clearingScheduledResumeDate"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "soldToContactId": obj.get("soldToContactId"),
            "shipToContactId": obj.get("shipToContactId"),
            "clearingExistingShipToContact": obj.get("clearingExistingShipToContact"),
            "paymentProfile": PaymentProfile.from_dict(obj["paymentProfile"]) if obj.get("paymentProfile") is not None else None,
            "communicationProfileId": obj.get("communicationProfileId"),
            "clearingExistingCommunicationProfile": obj.get("clearingExistingCommunicationProfile")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
