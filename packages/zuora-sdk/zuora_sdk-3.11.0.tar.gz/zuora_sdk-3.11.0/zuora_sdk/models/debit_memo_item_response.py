# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.billing_document_item_processing_type import BillingDocumentItemProcessingType
from zuora_sdk.models.billing_document_item_source_type import BillingDocumentItemSourceType
from zuora_sdk.models.debit_memo_item_taxation_items import DebitMemoItemTaxationItems
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.get_debit_memo_item_finance_information import GetDebitMemoItemFinanceInformation
from zuora_sdk.models.get_debit_memo_tax_item import GetDebitMemoTaxItem
from zuora_sdk.models.tax_mode import TaxMode
from typing import Optional, Set
from typing_extensions import Self

class DebitMemoItemResponse(BaseModel):
    """
    DebitMemoItemResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=True, description="Indicates whether the call succeeded. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The debit memo item amount excluding tax.", alias="amountWithoutTax")
    applied_to_item_id: Optional[StrictStr] = Field(default=None, description="The parent debit memo item that this debit memo items is applied to if this item is discount.", alias="appliedToItemId")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The balance of the debit memo item.")
    be_applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The applied amount of the debit memo item.", alias="beAppliedAmount")
    comment: Optional[StrictStr] = Field(default=None, description="Comments about the debit memo item.  **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.")
    created_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who created the debit memo item.", alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, description="The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The description of the debit memo item.  **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude the debit memo item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ", alias="excludeItemBillingFromRevenueAccounting")
    finance_information: Optional[GetDebitMemoItemFinanceInformation] = Field(default=None, alias="financeInformation")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the debit memo item.")
    processing_type: Optional[StrictStr] = Field(default=None, alias="processingType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units for the debit memo item.")
    reflect_discount_in_net_amount: Optional[StrictBool] = Field(default=None, description="The flag to reflect Discount in Apply To Charge Net Amount. ", alias="reflectDiscountInNetAmount")
    service_end_date: Optional[date] = Field(default=None, description="The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.", alias="serviceEndDate")
    service_start_date: Optional[date] = Field(default=None, description="The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.", alias="serviceStartDate")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact associated with the debit memo item.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.", alias="shipToContactId")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU for the product associated with the debit memo item.")
    sku_name: Optional[StrictStr] = Field(default=None, description="The name of the SKU.", alias="skuName")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the debit memo item.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.", alias="soldToContactId")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact snapshot associated with the invoice item.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.                ", alias="soldToContactSnapshotId")
    source_item_id: Optional[StrictStr] = Field(default=None, description="The ID of the source item.", alias="sourceItemId")
    source_item_type: Optional[StrictStr] = Field(default=None, alias="sourceItemType")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The ID of the subscription associated with the debit memo item.", alias="subscriptionId")
    tax_items: Optional[List[GetDebitMemoTaxItem]] = Field(default=None, description="Container for the taxation items of the debit memo item.   **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later. ", alias="taxItems")
    tax_mode: Optional[StrictStr] = Field(default=None, alias="taxMode")
    taxation_items: Optional[DebitMemoItemTaxationItems] = Field(default=None, alias="taxationItems")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The units to measure usage.", alias="unitOfMeasure")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The per-unit price of the debit memo item.", alias="unitPrice")
    updated_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who last updated the debit memo item.", alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, description="The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.", alias="updatedDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "amount", "amountWithoutTax", "appliedToItemId", "balance", "beAppliedAmount", "comment", "createdById", "createdDate", "description", "excludeItemBillingFromRevenueAccounting", "financeInformation", "id", "processingType", "quantity", "reflectDiscountInNetAmount", "serviceEndDate", "serviceStartDate", "shipToContactId", "sku", "skuName", "soldToContactId", "soldToContactSnapshotId", "sourceItemId", "sourceItemType", "subscriptionId", "taxItems", "taxMode", "taxationItems", "unitOfMeasure", "unitPrice", "updatedById", "updatedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DebitMemoItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_items (list)
        _items = []
        if self.tax_items:
            for _item_tax_items in self.tax_items:
                if _item_tax_items:
                    _items.append(_item_tax_items.to_dict())
            _dict['taxItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of taxation_items
        if self.taxation_items:
            _dict['taxationItems'] = self.taxation_items.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DebitMemoItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success") if obj.get("success") is not None else True,
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "appliedToItemId": obj.get("appliedToItemId"),
            "balance": obj.get("balance"),
            "beAppliedAmount": obj.get("beAppliedAmount"),
            "comment": obj.get("comment"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "financeInformation": GetDebitMemoItemFinanceInformation.from_dict(obj["financeInformation"]) if obj.get("financeInformation") is not None else None,
            "id": obj.get("id"),
            "processingType": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "reflectDiscountInNetAmount": obj.get("reflectDiscountInNetAmount"),
            "serviceEndDate": obj.get("serviceEndDate"),
            "serviceStartDate": obj.get("serviceStartDate"),
            "shipToContactId": obj.get("shipToContactId"),
            "sku": obj.get("sku"),
            "skuName": obj.get("skuName"),
            "soldToContactId": obj.get("soldToContactId"),
            "soldToContactSnapshotId": obj.get("soldToContactSnapshotId"),
            "sourceItemId": obj.get("sourceItemId"),
            "sourceItemType": obj.get("sourceItemType"),
            "subscriptionId": obj.get("subscriptionId"),
            "taxItems": [GetDebitMemoTaxItem.from_dict(_item) for _item in obj["taxItems"]] if obj.get("taxItems") is not None else None,
            "taxMode": obj.get("taxMode"),
            "taxationItems": DebitMemoItemTaxationItems.from_dict(obj["taxationItems"]) if obj.get("taxationItems") is not None else None,
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "unitPrice": obj.get("unitPrice"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
