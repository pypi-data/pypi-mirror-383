# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.apply_payment_debit_memo_application import ApplyPaymentDebitMemoApplication
from zuora_sdk.models.apply_payment_invoice_application import ApplyPaymentInvoiceApplication
from zuora_sdk.models.gateway_options import GatewayOptions
from zuora_sdk.models.refund_request_finance_information import RefundRequestFinanceInformation
from zuora_sdk.models.write_off_options import WriteOffOptions
from typing import Optional, Set
from typing_extensions import Self

class CreateRefundwithAutoUnapply(BaseModel):
    """
    CreateRefundwithAutoUnapply
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Comments about the refund. ")
    debit_memos: Optional[List[ApplyPaymentDebitMemoApplication]] = Field(default=None, description="Container for debit memos. The maximum number of debit memos is 1,000. ", alias="debitMemos")
    finance_information: Optional[RefundRequestFinanceInformation] = Field(default=None, alias="financeInformation")
    gateway_options: Optional[GatewayOptions] = Field(default=None, alias="gatewayOptions")
    invoices: Optional[List[ApplyPaymentInvoiceApplication]] = Field(default=None, description="Container for invoices. The maximum number of invoices is 1,000. ")
    method_type: Optional[StrictStr] = Field(default=None, alias="methodType")
    reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code. ", alias="reasonCode")
    reference_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments. ", alias="referenceId")
    refund_date: Optional[date] = Field(default=None, description="The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds. ", alias="refundDate")
    second_refund_reference_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments. ", alias="secondRefundReferenceId")
    soft_descriptor: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.", alias="softDescriptor")
    soft_descriptor_phone: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.", alias="softDescriptorPhone")
    total_amount: Union[StrictFloat, StrictInt] = Field(description="The total amount of the refund.     - `Full Refund`: If the refund amount and debit memo/ invoice are not specified, then the payment will be unapplied completely, followed by processing a full refund.   - `Partial Refund`:        - If the total amount is specified, and the debit memo/invoice is not specified, you can unapply the refund amount from the available debit memo/invoice and refund the unapplied payment to the customer.  - If the total amount is specified, along with the debit memo and the invoice, you can unapply the applied payments from the mentioned invoices and debit memos, and refund the unapplied payments to customers.   ", alias="totalAmount")
    type: StrictStr
    refund_transaction_type: Optional[StrictStr] = Field(default=None, alias="refundTransactionType")
    write_off: Optional[StrictBool] = Field(default=False, description="Indicates whether to write off a document.", alias="writeOff")
    write_off_options: Optional[WriteOffOptions] = Field(default=None, alias="writeOffOptions")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["comment", "debitMemos", "financeInformation", "gatewayOptions", "invoices", "methodType", "reasonCode", "referenceId", "refundDate", "secondRefundReferenceId", "softDescriptor", "softDescriptorPhone", "totalAmount", "type", "refundTransactionType", "writeOff", "writeOffOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateRefundwithAutoUnapply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in debit_memos (list)
        _items = []
        if self.debit_memos:
            for _item_debit_memos in self.debit_memos:
                if _item_debit_memos:
                    _items.append(_item_debit_memos.to_dict())
            _dict['debitMemos'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of write_off_options
        if self.write_off_options:
            _dict['writeOffOptions'] = self.write_off_options.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateRefundwithAutoUnapply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "comment": obj.get("comment"),
            "debitMemos": [ApplyPaymentDebitMemoApplication.from_dict(_item) for _item in obj["debitMemos"]] if obj.get("debitMemos") is not None else None,
            "financeInformation": RefundRequestFinanceInformation.from_dict(obj["financeInformation"]) if obj.get("financeInformation") is not None else None,
            "gatewayOptions": GatewayOptions.from_dict(obj["gatewayOptions"]) if obj.get("gatewayOptions") is not None else None,
            "invoices": [ApplyPaymentInvoiceApplication.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "methodType": obj.get("methodType"),
            "reasonCode": obj.get("reasonCode"),
            "referenceId": obj.get("referenceId"),
            "refundDate": obj.get("refundDate"),
            "secondRefundReferenceId": obj.get("secondRefundReferenceId"),
            "softDescriptor": obj.get("softDescriptor"),
            "softDescriptorPhone": obj.get("softDescriptorPhone"),
            "totalAmount": obj.get("totalAmount"),
            "type": obj.get("type"),
            "refundTransactionType": obj.get("refundTransactionType"),
            "writeOff": obj.get("writeOff") if obj.get("writeOff") is not None else False,
            "writeOffOptions": WriteOffOptions.from_dict(obj["writeOffOptions"]) if obj.get("writeOffOptions") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
