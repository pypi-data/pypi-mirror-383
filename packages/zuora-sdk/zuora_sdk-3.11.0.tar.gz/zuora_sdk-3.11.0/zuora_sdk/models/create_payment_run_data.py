# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.create_payment_run_data_item import CreatePaymentRunDataItem
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentRunData(BaseModel):
    """
    CreatePaymentRunData
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, description="A valid account ID associated with the payment run.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ", alias="accountId")
    account_number: Optional[StrictStr] = Field(default=None, description="The number of the customer account associated with the payment run, such as `A00000001`.  You can specify either `accountNumber` or `accountId` for a customer account, but not both of them.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices, debit memos, and standalone payments due on an account. ", alias="accountNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount to be collected for the specified invoice/debit memo. `amount` must be a positive numeric value no more than the balance of the specified invoice/debit memo.  This field is only available when `documentId` is specified. If `amount` is not specified, whole balance of the invoice/debit memo is collected. ")
    comment: Optional[StrictStr] = Field(default=None, description="Additional comments. ")
    currency: Optional[StrictStr] = Field(default=None, description="Note: This field is only available if support for standalone payments is enabled.  The currency of the standalone payment. Specify this field only if the `standalone` field is `true`. The currency of the standalone payment can be different from the payment currency defined in the customer account settings. ")
    document_id: Optional[StrictStr] = Field(default=None, description="The ID of a billing document associated with the payment run. `documentId` must be valid and match with `documentType`.  You must either specify both `documentId` and `documentType`, or specify neither of them.  If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected. ", alias="documentId")
    document_number: Optional[StrictStr] = Field(default=None, description="The number of a billing document associated with the payment run. `documentNumber` must be valid and match with `documentType`.  You must either specify both `documentNumber` and `documentType`, or specify neither of them.  If neither of `documentType` and `documentNumber` is specified, all invoices/debit memos with open balance of the account are collected. ", alias="documentNumber")
    document_type: Optional[StrictStr] = Field(default=None, description="The type of a billing document associated with the payment run. The value can be `Invoice` or `DebitMemo`, but `DebitMemo` is only supported if the Invoice Settlement feature is enabled.  You must either specify both `documentType` and `documentId`, or specify neither of them.  If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected. ", alias="documentType")
    payment_gateway_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment gateway for collecting invoices/debit memos. The specified payment gateway must be valid and active. If it is not specified, the default payment gateway of the account is used. If no payment gateway is configured for the account, the default payment gateway of the tenant is used.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ", alias="paymentGatewayId")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment method for collecting invoices/debit memos. The specified payment method must be a valid non-system payment method. If it is not specified, the default payment method of the account is used regardless of the `autoPay` value of the account.  If `processPaymentWithClosedPM` is set to `false`, the payment method cannot be closed.  If the payment retry rules are enabled, the payment method must meet the rules.  If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account. ", alias="paymentMethodId")
    standalone: Optional[StrictBool] = Field(default=None, description="Note: This field is only available if support for standalone payments is enabled.  Specify `true` to indicate that this is a standalone payment that will be created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. When `standalone` is set to `true`:  - `accountId` or `accountNumber` is required.   - `amount` is required.    - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.   - No settlement data will be created.   - Either the applied amount or the unapplied amount of the payment is zero.   - The standalone payment cannot be applied, unapplied, or transferred. ")
    data_items: Optional[List[CreatePaymentRunDataItem]] = Field(default=None, alias="dataItems")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "accountNumber", "amount", "comment", "currency", "documentId", "documentNumber", "documentType", "paymentGatewayId", "paymentMethodId", "standalone", "dataItems"]

    @field_validator('document_type')
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invoice', 'DebitMemo']):
            raise ValueError("must be one of enum values ('Invoice', 'DebitMemo')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentRunData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_items (list)
        _items = []
        if self.data_items:
            for _item_data_items in self.data_items:
                if _item_data_items:
                    _items.append(_item_data_items.to_dict())
            _dict['dataItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentRunData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "accountNumber": obj.get("accountNumber"),
            "amount": obj.get("amount"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "documentId": obj.get("documentId"),
            "documentNumber": obj.get("documentNumber"),
            "documentType": obj.get("documentType"),
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "standalone": obj.get("standalone"),
            "dataItems": [CreatePaymentRunDataItem.from_dict(_item) for _item in obj["dataItems"]] if obj.get("dataItems") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
