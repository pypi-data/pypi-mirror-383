# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.account_e_invoice_profile import AccountEInvoiceProfile
from zuora_sdk.models.account_object_ns_fields_customer_type_ns import AccountObjectNSFieldsCustomerTypeNS
from zuora_sdk.models.account_object_ns_fields_syncto_net_suite_ns import AccountObjectNSFieldsSynctoNetSuiteNS
from zuora_sdk.models.tax_info import TaxInfo
from zuora_sdk.models.update_account_contact import UpdateAccountContact
from typing import Optional, Set
from typing_extensions import Self

class UpdateAccountRequest(BaseModel):
    """
    UpdateAccountRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    class__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Class__NS")
    customer_type__ns: Optional[StrictStr] = Field(default=None, alias="CustomerType__NS")
    department__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Department__NS")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationStatus__NS")
    location__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Location__NS")
    subsidiary__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Subsidiary__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="SyncDate__NS")
    syncto_net_suite__ns: Optional[StrictStr] = Field(default=None, alias="SynctoNetSuite__NS")
    additional_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="A list of additional email addresses to receive email notifications. Use commas to separate email addresses.", alias="additionalEmailAddresses")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether future payments are to be automatically billed when they are due. ", alias="autoPay")
    batch: Optional[StrictStr] = Field(default=None, description="The alias name given to a batch. A string of 50 characters or less. ")
    bill_cycle_day: Optional[StrictInt] = Field(default=None, description="Sets the bill cycle day (BCD) for the charge. The BCD determines  which day of the month the customer is billed. Values: Any activated system-defined bill cycle day （`1`-`31`）", alias="billCycleDay")
    bill_to_contact_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The ID of the contact that receives the bill. The contact must be   associated with the account.", alias="billToContactId")
    bill_to_contact: Optional[UpdateAccountContact] = Field(default=None, alias="billToContact")
    ship_to_contact_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The ID of the contact that receives the goods or services. The   contact must be associated with the account.", alias="shipToContactId")
    ship_to_contact: Optional[UpdateAccountContact] = Field(default=None, alias="shipToContact")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of the communication profile that this account is linked to.   You can provide either or both of the `communicationProfileId` and `profileNumber` fields.   If both are provided, the request will fail if they do not refer to the same communication profile.", alias="communicationProfileId")
    credit_memo_template_id: Optional[StrictStr] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.", alias="creditMemoTemplateId")
    crm_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="CRM account ID for the account, up to 100 characters. ", alias="crmId")
    customer_service_rep_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Name of the account’s customer service representative, if applicable. ", alias="customerServiceRepName")
    debit_memo_template_id: Optional[StrictStr] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.", alias="debitMemoTemplateId")
    default_payment_method_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="ID of the default payment method for the account.  Values: a valid ID for an existing payment method. ", alias="defaultPaymentMethodId")
    invoice_delivery_prefs_email: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive invoices through email.   The default value is `false`. ", alias="invoiceDeliveryPrefsEmail")
    invoice_delivery_prefs_print: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive printed invoices, such as through postal mail.   The default value is `false`.", alias="invoiceDeliveryPrefsPrint")
    invoice_template_id: Optional[StrictStr] = Field(default=None, description="Invoice template ID, configured in Billing Settings in the Zuora UI. ", alias="invoiceTemplateId")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="Account name, up to 255 characters. ")
    notes: Optional[Annotated[str, Field(strict=True, max_length=65535)]] = Field(default=None, description="A string of up to 65,535 characters. ")
    parent_id: Optional[StrictStr] = Field(default=None, description="Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.", alias="parentId")
    partner_account: Optional[StrictBool] = Field(default=None, description="Whether the customer account is a partner, distributor, or reseller.   You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.", alias="partnerAccount")
    payment_gateway: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.", alias="paymentGateway")
    payment_term: Optional[StrictStr] = Field(default=None, description="Payment terms for this account. Possible values are `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.", alias="paymentTerm")
    profile_number: Optional[StrictStr] = Field(default=None, description="The number of the communication profile that this account is linked to.   You can provide either or both of the `communicationProfileId` and `profileNumber` fields.   If both are provided, the request will fail if they do not refer to the same communication profile.", alias="profileNumber")
    purchase_order_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The purchase order number provided by your customer for services, products, or both purchased.", alias="purchaseOrderNumber")
    roll_up_usage: Optional[StrictBool] = Field(default=None, description="Whether the usage of the account roll up to its parent account", alias="rollUpUsage")
    sales_rep: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.", alias="salesRep")
    sequence_set_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The ID of the billing document sequence set to assign to the customer account.    The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.   If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.", alias="sequenceSetId")
    sold_to_contact_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The ID of the contact that receives the goods or services. The contact   must be associated with the account.", alias="soldToContactId")
    sold_to_contact: Optional[UpdateAccountContact] = Field(default=None, alias="soldToContact")
    tagging: Optional[StrictStr] = None
    tax_info: Optional[TaxInfo] = Field(default=None, alias="taxInfo")
    payment_gateway_number: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="paymentGatewayNumber ", alias="paymentGatewayNumber")
    summary_statement_template_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="summaryStatementTemplateId ", alias="summaryStatementTemplateId")
    einvoice_profile: Optional[AccountEInvoiceProfile] = Field(default=None, alias="einvoiceProfile")
    gateway_routing_eligible: Optional[StrictBool] = Field(default=None, description="Whether gateway routing is eligible for the account ", alias="gatewayRoutingEligible")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["Class__NS", "CustomerType__NS", "Department__NS", "IntegrationId__NS", "IntegrationStatus__NS", "Location__NS", "Subsidiary__NS", "SyncDate__NS", "SynctoNetSuite__NS", "additionalEmailAddresses", "autoPay", "batch", "billCycleDay", "billToContactId", "billToContact", "shipToContactId", "shipToContact", "communicationProfileId", "creditMemoTemplateId", "crmId", "customerServiceRepName", "debitMemoTemplateId", "defaultPaymentMethodId", "invoiceDeliveryPrefsEmail", "invoiceDeliveryPrefsPrint", "invoiceTemplateId", "name", "notes", "parentId", "partnerAccount", "paymentGateway", "paymentTerm", "profileNumber", "purchaseOrderNumber", "rollUpUsage", "salesRep", "sequenceSetId", "soldToContactId", "soldToContact", "tagging", "taxInfo", "paymentGatewayNumber", "summaryStatementTemplateId", "einvoiceProfile", "gatewayRoutingEligible"]

    @field_validator('bill_to_contact_id')
    def bill_to_contact_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{32}$/")
        return value

    @field_validator('ship_to_contact_id')
    def ship_to_contact_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{32}$/")
        return value

    @field_validator('default_payment_method_id')
    def default_payment_method_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sold_to_contact_id')
    def sold_to_contact_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of einvoice_profile
        if self.einvoice_profile:
            _dict['einvoiceProfile'] = self.einvoice_profile.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAccountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "Class__NS": obj.get("Class__NS"),
            "CustomerType__NS": obj.get("CustomerType__NS"),
            "Department__NS": obj.get("Department__NS"),
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "Location__NS": obj.get("Location__NS"),
            "Subsidiary__NS": obj.get("Subsidiary__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "SynctoNetSuite__NS": obj.get("SynctoNetSuite__NS"),
            "additionalEmailAddresses": obj.get("additionalEmailAddresses"),
            "autoPay": obj.get("autoPay"),
            "batch": obj.get("batch"),
            "billCycleDay": obj.get("billCycleDay"),
            "billToContactId": obj.get("billToContactId"),
            "billToContact": UpdateAccountContact.from_dict(obj["billToContact"]) if obj.get("billToContact") is not None else None,
            "shipToContactId": obj.get("shipToContactId"),
            "shipToContact": UpdateAccountContact.from_dict(obj["shipToContact"]) if obj.get("shipToContact") is not None else None,
            "communicationProfileId": obj.get("communicationProfileId"),
            "creditMemoTemplateId": obj.get("creditMemoTemplateId"),
            "crmId": obj.get("crmId"),
            "customerServiceRepName": obj.get("customerServiceRepName"),
            "debitMemoTemplateId": obj.get("debitMemoTemplateId"),
            "defaultPaymentMethodId": obj.get("defaultPaymentMethodId"),
            "invoiceDeliveryPrefsEmail": obj.get("invoiceDeliveryPrefsEmail"),
            "invoiceDeliveryPrefsPrint": obj.get("invoiceDeliveryPrefsPrint"),
            "invoiceTemplateId": obj.get("invoiceTemplateId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "parentId": obj.get("parentId"),
            "partnerAccount": obj.get("partnerAccount"),
            "paymentGateway": obj.get("paymentGateway"),
            "paymentTerm": obj.get("paymentTerm"),
            "profileNumber": obj.get("profileNumber"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "rollUpUsage": obj.get("rollUpUsage"),
            "salesRep": obj.get("salesRep"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "soldToContactId": obj.get("soldToContactId"),
            "soldToContact": UpdateAccountContact.from_dict(obj["soldToContact"]) if obj.get("soldToContact") is not None else None,
            "tagging": obj.get("tagging"),
            "taxInfo": TaxInfo.from_dict(obj["taxInfo"]) if obj.get("taxInfo") is not None else None,
            "paymentGatewayNumber": obj.get("paymentGatewayNumber"),
            "summaryStatementTemplateId": obj.get("summaryStatementTemplateId"),
            "einvoiceProfile": AccountEInvoiceProfile.from_dict(obj["einvoiceProfile"]) if obj.get("einvoiceProfile") is not None else None,
            "gatewayRoutingEligible": obj.get("gatewayRoutingEligible")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
