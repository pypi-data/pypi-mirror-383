# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.get_accounting_period_all_of_fie_ids_response import GetAccountingPeriodAllOfFieIdsResponse
from zuora_sdk.models.organization_label import OrganizationLabel
from typing import Optional, Set
from typing_extensions import Self

class GetAccountingPeriodWithoutSuccessResponse(BaseModel):
    """
    GetAccountingPeriodWithoutSuccessResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    created_by: Optional[StrictStr] = Field(default=None, description="ID of the user who created the accounting period. ", alias="createdBy")
    created_on: Optional[StrictStr] = Field(default=None, description="Date and time when the accounting period was created. ", alias="createdOn")
    end_date: Optional[date] = Field(default=None, description="The end date of the accounting period. ", alias="endDate")
    file_ids: Optional[GetAccountingPeriodAllOfFieIdsResponse] = Field(default=None, alias="fileIds")
    fiscal_year: Optional[StrictStr] = Field(default=None, description="Fiscal year of the accounting period. ", alias="fiscalYear")
    fiscal_quarter: Optional[StrictInt] = None
    id: Optional[StrictStr] = Field(default=None, description="ID of the accounting period. ")
    name: Optional[StrictStr] = Field(default=None, description="Name of the accounting period. ")
    notes: Optional[StrictStr] = Field(default=None, description="Any optional notes about the accounting period. ")
    run_trial_balance_end: Optional[StrictStr] = Field(default=None, description="Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.", alias="runTrialBalanceEnd")
    run_trial_balance_error_message: Optional[StrictStr] = Field(default=None, description="If trial balance status is Error, an error message is returned in this field.", alias="runTrialBalanceErrorMessage")
    run_trial_balance_start: Optional[StrictStr] = Field(default=None, description="Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`.", alias="runTrialBalanceStart")
    run_trial_balance_status: Optional[StrictStr] = Field(default=None, description="Status of the trial balance for the accounting period. Possible values:   * `Pending`  * `Processing`  * `Completed`  * `Error`", alias="runTrialBalanceStatus")
    start_date: Optional[date] = Field(default=None, description="The start date of the accounting period. ", alias="startDate")
    status: Optional[StrictStr] = Field(default=None, description="Status of the accounting period. Possible values:  * `Open` * `PendingClose` * `Closed` ")
    updated_by: Optional[StrictStr] = Field(default=None, description="D of the user who last updated the accounting period. ", alias="updatedBy")
    updated_on: Optional[StrictStr] = Field(default=None, description="Date and time when the accounting period was last updated. ", alias="updatedOn")
    organization_labels: Optional[List[OrganizationLabel]] = Field(default=None, description="Organization labels. ", alias="organizationLabels")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["createdBy", "createdOn", "endDate", "fileIds", "fiscalYear", "fiscal_quarter", "id", "name", "notes", "runTrialBalanceEnd", "runTrialBalanceErrorMessage", "runTrialBalanceStart", "runTrialBalanceStatus", "startDate", "status", "updatedBy", "updatedOn", "organizationLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountingPeriodWithoutSuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_ids
        if self.file_ids:
            _dict['fileIds'] = self.file_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organization_labels (list)
        _items = []
        if self.organization_labels:
            for _item_organization_labels in self.organization_labels:
                if _item_organization_labels:
                    _items.append(_item_organization_labels.to_dict())
            _dict['organizationLabels'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountingPeriodWithoutSuccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "createdBy": obj.get("createdBy"),
            "createdOn": obj.get("createdOn"),
            "endDate": obj.get("endDate"),
            "fileIds": GetAccountingPeriodAllOfFieIdsResponse.from_dict(obj["fileIds"]) if obj.get("fileIds") is not None else None,
            "fiscalYear": obj.get("fiscalYear"),
            "fiscal_quarter": obj.get("fiscal_quarter"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "runTrialBalanceEnd": obj.get("runTrialBalanceEnd"),
            "runTrialBalanceErrorMessage": obj.get("runTrialBalanceErrorMessage"),
            "runTrialBalanceStart": obj.get("runTrialBalanceStart"),
            "runTrialBalanceStatus": obj.get("runTrialBalanceStatus"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "updatedBy": obj.get("updatedBy"),
            "updatedOn": obj.get("updatedOn"),
            "organizationLabels": [OrganizationLabel.from_dict(_item) for _item in obj["organizationLabels"]] if obj.get("organizationLabels") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
