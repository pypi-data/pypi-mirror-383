# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.get_subscription_rate_plan_charges_with_all_segments import GetSubscriptionRatePlanChargesWithAllSegments
from zuora_sdk.models.subscription_product_feature import SubscriptionProductFeature
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionRatePlan(BaseModel):
    """
    SubscriptionRatePlan
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = Field(default=None, description="Rate plan ID. ")
    subscription_rate_plan_number: Optional[StrictStr] = Field(default=None, alias="subscriptionRatePlanNumber")
    is_from_external_catalog: Optional[StrictBool] = Field(default=None, alias="isFromExternalCatalog")
    last_change_type: Optional[StrictStr] = Field(default=None, description="The last amendment on the rate plan.     **Note:** If a subscription is created through an order, this field is only available if multiple orders are created on the subscription.    Possible Values:   * `Add`   * `Update`   * `Remove`", alias="lastChangeType")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    product_sku: Optional[StrictStr] = Field(default=None, description="The unique SKU for the product.", alias="productSku")
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="productRatePlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, alias="productRatePlanNumber")
    rate_plan_name: Optional[StrictStr] = Field(default=None, description="Name of the rate plan.", alias="ratePlanName")
    subscription_product_features: Optional[List[SubscriptionProductFeature]] = Field(default=None, description="Container for one or more features.    Only available when the following settings are enabled:   * The Entitlements feature in your tenant.   * The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings", alias="subscriptionProductFeatures")
    externally_managed_plan_id: Optional[StrictStr] = Field(default=None, description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.", alias="externallyManagedPlanId")
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription rate plan exclusive of all the discounts applicable. ", alias="contractedMrr")
    contracted_net_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts. ", alias="contractedNetMrr")
    as_of_day_gross_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription rate plan exclusive of any discounts applicable as of specified day. ", alias="asOfDayGrossMrr")
    as_of_day_net_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts as of specified day. ", alias="asOfDayNetMrr")
    rate_plan_charges: Optional[List[GetSubscriptionRatePlanChargesWithAllSegments]] = Field(default=None, description="Container for one or more charges.", alias="ratePlanCharges")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "subscriptionRatePlanNumber", "isFromExternalCatalog", "lastChangeType", "productId", "productName", "productSku", "productRatePlanId", "productRatePlanNumber", "ratePlanName", "subscriptionProductFeatures", "externallyManagedPlanId", "contractedMrr", "contractedNetMrr", "asOfDayGrossMrr", "asOfDayNetMrr", "ratePlanCharges"]

    @field_validator('last_change_type')
    def last_change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Add', 'Update', 'Remove']):
            raise ValueError("must be one of enum values ('Add', 'Update', 'Remove')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_product_features (list)
        _items = []
        if self.subscription_product_features:
            for _item_subscription_product_features in self.subscription_product_features:
                if _item_subscription_product_features:
                    _items.append(_item_subscription_product_features.to_dict())
            _dict['subscriptionProductFeatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rate_plan_charges (list)
        _items = []
        if self.rate_plan_charges:
            for _item_rate_plan_charges in self.rate_plan_charges:
                if _item_rate_plan_charges:
                    _items.append(_item_rate_plan_charges.to_dict())
            _dict['ratePlanCharges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "subscriptionRatePlanNumber": obj.get("subscriptionRatePlanNumber"),
            "isFromExternalCatalog": obj.get("isFromExternalCatalog"),
            "lastChangeType": obj.get("lastChangeType"),
            "productId": obj.get("productId"),
            "productName": obj.get("productName"),
            "productSku": obj.get("productSku"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "ratePlanName": obj.get("ratePlanName"),
            "subscriptionProductFeatures": [SubscriptionProductFeature.from_dict(_item) for _item in obj["subscriptionProductFeatures"]] if obj.get("subscriptionProductFeatures") is not None else None,
            "externallyManagedPlanId": obj.get("externallyManagedPlanId"),
            "contractedMrr": obj.get("contractedMrr"),
            "contractedNetMrr": obj.get("contractedNetMrr"),
            "asOfDayGrossMrr": obj.get("asOfDayGrossMrr"),
            "asOfDayNetMrr": obj.get("asOfDayNetMrr"),
            "ratePlanCharges": [GetSubscriptionRatePlanChargesWithAllSegments.from_dict(_item) for _item in obj["ratePlanCharges"]] if obj.get("ratePlanCharges") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
