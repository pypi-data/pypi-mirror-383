# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.open_payment_method_type_request_fields import OpenPaymentMethodTypeRequestFields
from typing import Optional, Set
from typing_extensions import Self

class CreateOpenPaymentMethodTypeRequest(BaseModel):
    """
    CreateOpenPaymentMethodTypeRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    entity_id: Optional[StrictStr] = Field(default=None, description="If this custom payment method type is specific to one entity only, provide the entity ID in this field in UUID format, such as `123e4567-e89b-12d3-a456-426614174000`. If no entity UUID is provided, the custom payment method type is available to the global entity and all the sub entities in the tenant.   You can get the entity ID through the [Multi-entity: List entities](https://www.zuora.com/developer/api-references/older-api/operation/Get_Entities/) API operation or the **Manage Entity Profile** administration setting in the UI. To convert the format of the entity ID to UUID, separate the entity ID string in five groups with hyphens, in the form `<8-characters>-<4-characters>-<4-characters>-<4-characters>-<12-characters>` for a total of 36 characters.   Note: After the custom payment method type is created, you can only update this field to be empty.", alias="entityId")
    fields: List[OpenPaymentMethodTypeRequestFields] = Field(description="An array containing field metadata of the custom payment method type.  Notes:   - All the following nested metadata must be provided in the request to define a field.    - At least one field must be defined in the fields array for a custom payment method type.    - Up to 20 fields can be defined in the fields array for a custom payment method type. ")
    internal_name: Annotated[str, Field(strict=True, max_length=19)] = Field(description="A string to identify the custom payment method type in the API name of the payment method type.   This field must be alphanumeric, starting with a capital letter, excluding JSON preserved characters such as  * \\ ’ ”. Additionally, '_' or '-' is not allowed.   This field must be unique in a tenant.   This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:   `<internalName>__c_<tenantId>`   For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`.   This field cannot be updated after the creation of the custom payment method type.", alias="internalName")
    label: Annotated[str, Field(strict=True, max_length=40)] = Field(description="The label that is used to refer to this type in the Zuora UI.   This value must be alphanumeric, excluding JSON preserved characters such as  * \\ ’ ” ")
    method_reference_id_field: StrictStr = Field(description="The identification reference of the custom payment method.   This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.   This field cannot be updated after the creation of the custom payment method type.", alias="methodReferenceIdField")
    sub_type_field: Optional[StrictStr] = Field(default=None, description="The identification reference indicating the subtype of the custom payment method.   This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.   This field cannot be updated after the creation of the custom payment method type.", alias="subTypeField")
    tenant_id: StrictStr = Field(description="Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities.   This field cannot be updated after the creation of the custom payment method type.", alias="tenantId")
    user_reference_id_field: Optional[StrictStr] = Field(default=None, description="The identification reference of the user or customer account.   This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.   This field cannot be updated after the creation of the custom payment method type.", alias="userReferenceIdField")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["entityId", "fields", "internalName", "label", "methodReferenceIdField", "subTypeField", "tenantId", "userReferenceIdField"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOpenPaymentMethodTypeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOpenPaymentMethodTypeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "entityId": obj.get("entityId"),
            "fields": [OpenPaymentMethodTypeRequestFields.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "internalName": obj.get("internalName"),
            "label": obj.get("label"),
            "methodReferenceIdField": obj.get("methodReferenceIdField"),
            "subTypeField": obj.get("subTypeField"),
            "tenantId": obj.get("tenantId"),
            "userReferenceIdField": obj.get("userReferenceIdField")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
