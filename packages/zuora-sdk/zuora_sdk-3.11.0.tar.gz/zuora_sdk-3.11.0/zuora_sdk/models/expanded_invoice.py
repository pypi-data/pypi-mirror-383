# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.expanded_contact import ExpandedContact
from zuora_sdk.models.expanded_contact_snapshot import ExpandedContactSnapshot
from typing import Optional, Set
from typing_extensions import Self

class ExpandedInvoice(BaseModel):
    """
    ExpandedInvoice
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    adjustment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="adjustmentAmount")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountWithoutTax")
    auto_pay: Optional[StrictBool] = Field(default=None, alias="autoPay")
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    bill_to_contact_id: Optional[StrictStr] = Field(default=None, alias="billToContactId")
    bill_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, alias="billToContactSnapshotId")
    comments: Optional[StrictStr] = None
    credit_balance_adjustment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creditBalanceAdjustmentAmount")
    credit_memo_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creditMemoAmount")
    currency: Optional[StrictStr] = None
    due_date: Optional[date] = Field(default=None, alias="dueDate")
    includes_one_time: Optional[StrictBool] = Field(default=None, alias="includesOneTime")
    includes_recurring: Optional[StrictBool] = Field(default=None, alias="includesRecurring")
    includes_usage: Optional[StrictBool] = Field(default=None, alias="includesUsage")
    invoice_date: Optional[date] = Field(default=None, alias="invoiceDate")
    invoice_group_number: Optional[StrictStr] = Field(default=None, alias="invoiceGroupNumber")
    invoice_number: Optional[StrictStr] = Field(default=None, alias="invoiceNumber")
    last_email_sent_date: Optional[StrictStr] = Field(default=None, alias="lastEmailSentDate")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="paymentAmount")
    posted_by: Optional[StrictStr] = Field(default=None, alias="postedBy")
    posted_date: Optional[StrictStr] = Field(default=None, alias="postedDate")
    refund_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="refundAmount")
    reversed: Optional[StrictBool] = None
    sequence_set_id: Optional[StrictStr] = Field(default=None, alias="sequenceSetId")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, alias="soldToContactId")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, alias="soldToContactSnapshotId")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, alias="shipToContactId")
    ship_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, alias="shipToContactSnapshotId")
    source: Optional[StrictStr] = None
    source_id: Optional[StrictStr] = Field(default=None, alias="sourceId")
    source_type: Optional[StrictStr] = Field(default=None, alias="sourceType")
    status: Optional[StrictStr] = None
    target_date: Optional[date] = Field(default=None, alias="targetDate")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxAmount")
    tax_exempt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxExemptAmount")
    tax_status: Optional[StrictStr] = Field(default=None, alias="taxStatus")
    tax_message: Optional[StrictStr] = Field(default=None, alias="taxMessage")
    template_id: Optional[StrictStr] = Field(default=None, alias="templateId")
    communication_profile_id: Optional[StrictStr] = Field(default=None, alias="communicationProfileId")
    transferred_to_accounting: Optional[StrictStr] = Field(default=None, alias="transferredToAccounting")
    e_invoice_status: Optional[StrictStr] = Field(default=None, alias="eInvoiceStatus")
    e_invoice_file_id: Optional[StrictStr] = Field(default=None, alias="eInvoiceFileId")
    e_invoice_error_code: Optional[StrictStr] = Field(default=None, alias="eInvoiceErrorCode")
    e_invoice_error_message: Optional[StrictStr] = Field(default=None, alias="eInvoiceErrorMessage")
    payment_link: Optional[StrictStr] = Field(default=None, alias="paymentLink")
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    payment_term: Optional[StrictStr] = Field(default=None, alias="paymentTerm")
    account: Optional[ExpandedAccount] = None
    bill_to_contact: Optional[ExpandedContact] = Field(default=None, alias="billToContact")
    bill_to_contact_snapshot: Optional[ExpandedContactSnapshot] = Field(default=None, alias="billToContactSnapshot")
    sold_to_contact_snapshot: Optional[ExpandedContactSnapshot] = Field(default=None, alias="soldToContactSnapshot")
    ship_to_contact_snapshot: Optional[ExpandedContactSnapshot] = Field(default=None, alias="shipToContactSnapshot")
    invoice_items: Optional[List[ExpandedInvoiceItem]] = Field(default=None, alias="invoiceItems")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "adjustmentAmount", "amount", "amountWithoutTax", "autoPay", "balance", "billToContactId", "billToContactSnapshotId", "comments", "creditBalanceAdjustmentAmount", "creditMemoAmount", "currency", "dueDate", "includesOneTime", "includesRecurring", "includesUsage", "invoiceDate", "invoiceGroupNumber", "invoiceNumber", "lastEmailSentDate", "organizationId", "paymentAmount", "postedBy", "postedDate", "refundAmount", "reversed", "sequenceSetId", "soldToContactId", "soldToContactSnapshotId", "shipToContactId", "shipToContactSnapshotId", "source", "sourceId", "sourceType", "status", "targetDate", "taxAmount", "taxExemptAmount", "taxStatus", "taxMessage", "templateId", "communicationProfileId", "transferredToAccounting", "eInvoiceStatus", "eInvoiceFileId", "eInvoiceErrorCode", "eInvoiceErrorMessage", "paymentLink", "id", "createdById", "createdDate", "updatedById", "updatedDate", "paymentTerm", "account", "billToContact", "billToContactSnapshot", "soldToContactSnapshot", "shipToContactSnapshot", "invoiceItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact_snapshot
        if self.bill_to_contact_snapshot:
            _dict['billToContactSnapshot'] = self.bill_to_contact_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact_snapshot
        if self.sold_to_contact_snapshot:
            _dict['soldToContactSnapshot'] = self.sold_to_contact_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact_snapshot
        if self.ship_to_contact_snapshot:
            _dict['shipToContactSnapshot'] = self.ship_to_contact_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item_invoice_items in self.invoice_items:
                if _item_invoice_items:
                    _items.append(_item_invoice_items.to_dict())
            _dict['invoiceItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "adjustmentAmount": obj.get("adjustmentAmount"),
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "autoPay": obj.get("autoPay"),
            "balance": obj.get("balance"),
            "billToContactId": obj.get("billToContactId"),
            "billToContactSnapshotId": obj.get("billToContactSnapshotId"),
            "comments": obj.get("comments"),
            "creditBalanceAdjustmentAmount": obj.get("creditBalanceAdjustmentAmount"),
            "creditMemoAmount": obj.get("creditMemoAmount"),
            "currency": obj.get("currency"),
            "dueDate": obj.get("dueDate"),
            "includesOneTime": obj.get("includesOneTime"),
            "includesRecurring": obj.get("includesRecurring"),
            "includesUsage": obj.get("includesUsage"),
            "invoiceDate": obj.get("invoiceDate"),
            "invoiceGroupNumber": obj.get("invoiceGroupNumber"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "lastEmailSentDate": obj.get("lastEmailSentDate"),
            "organizationId": obj.get("organizationId"),
            "paymentAmount": obj.get("paymentAmount"),
            "postedBy": obj.get("postedBy"),
            "postedDate": obj.get("postedDate"),
            "refundAmount": obj.get("refundAmount"),
            "reversed": obj.get("reversed"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "soldToContactId": obj.get("soldToContactId"),
            "soldToContactSnapshotId": obj.get("soldToContactSnapshotId"),
            "shipToContactId": obj.get("shipToContactId"),
            "shipToContactSnapshotId": obj.get("shipToContactSnapshotId"),
            "source": obj.get("source"),
            "sourceId": obj.get("sourceId"),
            "sourceType": obj.get("sourceType"),
            "status": obj.get("status"),
            "targetDate": obj.get("targetDate"),
            "taxAmount": obj.get("taxAmount"),
            "taxExemptAmount": obj.get("taxExemptAmount"),
            "taxStatus": obj.get("taxStatus"),
            "taxMessage": obj.get("taxMessage"),
            "templateId": obj.get("templateId"),
            "communicationProfileId": obj.get("communicationProfileId"),
            "transferredToAccounting": obj.get("transferredToAccounting"),
            "eInvoiceStatus": obj.get("eInvoiceStatus"),
            "eInvoiceFileId": obj.get("eInvoiceFileId"),
            "eInvoiceErrorCode": obj.get("eInvoiceErrorCode"),
            "eInvoiceErrorMessage": obj.get("eInvoiceErrorMessage"),
            "paymentLink": obj.get("paymentLink"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "paymentTerm": obj.get("paymentTerm"),
            "account": ExpandedAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "billToContact": ExpandedContact.from_dict(obj["billToContact"]) if obj.get("billToContact") is not None else None,
            "billToContactSnapshot": ExpandedContactSnapshot.from_dict(obj["billToContactSnapshot"]) if obj.get("billToContactSnapshot") is not None else None,
            "soldToContactSnapshot": ExpandedContactSnapshot.from_dict(obj["soldToContactSnapshot"]) if obj.get("soldToContactSnapshot") is not None else None,
            "shipToContactSnapshot": ExpandedContactSnapshot.from_dict(obj["shipToContactSnapshot"]) if obj.get("shipToContactSnapshot") is not None else None,
            "invoiceItems": [ExpandedInvoiceItem.from_dict(_item) for _item in obj["invoiceItems"]] if obj.get("invoiceItems") is not None else None
        }
        return _obj
from zuora_sdk.models.expanded_account import ExpandedAccount
from zuora_sdk.models.expanded_invoice_item import ExpandedInvoiceItem
# TODO: Rewrite to not use raise_errors
ExpandedInvoice.model_rebuild(raise_errors=False)


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
