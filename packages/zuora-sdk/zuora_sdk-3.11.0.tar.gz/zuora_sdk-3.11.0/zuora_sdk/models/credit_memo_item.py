# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.credit_memo_item_finance_information import CreditMemoItemFinanceInformation
from zuora_sdk.models.get_credit_memo_item_taxation_items import GetCreditMemoItemTaxationItems
from zuora_sdk.models.get_credit_memo_tax_item_response import GetCreditMemoTaxItemResponse
from typing import Optional, Set
from typing_extensions import Self

class CreditMemoItem(BaseModel):
    """
    CreditMemoItem
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax.")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The credit memo item amount excluding tax.", alias="amountWithoutTax")
    applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The applied amount of the credit memo item.", alias="appliedAmount")
    applied_to_item_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the credit memo item that the discount charge is applied to.", alias="appliedToItemId")
    comment: Optional[StrictStr] = Field(default=None, description="Comments about the credit memo item. **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.")
    created_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who created the credit memo item.", alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, description="The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.", alias="createdDate")
    credit_from_item_id: Optional[StrictStr] = Field(default=None, description="The ID of the credit from item.", alias="creditFromItemId")
    credit_from_item_source: Optional[StrictStr] = Field(default=None, description="The type of the credit from item.", alias="creditFromItemSource")
    credit_tax_items: Optional[List[GetCreditMemoTaxItemResponse]] = Field(default=None, description="Container for the taxation items of the credit memo item.   **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later. ", alias="creditTaxItems")
    description: Optional[StrictStr] = Field(default=None, description="The description of the credit memo item. **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude the credit memo item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ", alias="excludeItemBillingFromRevenueAccounting")
    finance_information: Optional[CreditMemoItemFinanceInformation] = Field(default=None, alias="financeInformation")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the credit memo item.")
    invoice_schedule_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice schedule associated with the credit memo item.   **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature enabled. ", alias="invoiceScheduleId")
    invoice_schedule_item_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature enabled.", alias="invoiceScheduleItemId")
    processing_type: Optional[StrictStr] = Field(default=None, alias="processingType")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units for the credit memo item.")
    refund_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the refund on the credit memo item.", alias="refundAmount")
    service_end_date: Optional[date] = Field(default=None, description="The service end date of the credit memo item.  ", alias="serviceEndDate")
    service_start_date: Optional[date] = Field(default=None, description="The service start date of the credit memo item.", alias="serviceStartDate")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact associated with the credit memo item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.", alias="shipToContactId")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU for the product associated with the credit memo item.")
    sku_name: Optional[StrictStr] = Field(default=None, description="The name of the SKU.", alias="skuName")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the credit memo item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.", alias="soldToContactId")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact snapshot associated with the credit memo item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.", alias="soldToContactSnapshotId")
    source_item_id: Optional[StrictStr] = Field(default=None, description="The ID of the source item. - If the value of the `sourceItemType` field is `SubscriptionComponent` , the value of this field is the ID of the corresponding rate plan charge. - If the value of the `sourceItemType` field is `InvoiceDetail`, the value of this field is the ID of the corresponding invoice item. - If the value of the `sourceItemType` field is `ProductRatePlanCharge` , the value of this field is the ID of the corresponding product rate plan charge. - If the value of the `sourceItemType` field is `OrderLineItem` , the value of this field is the ID of the corresponding return order line item. ", alias="sourceItemId")
    source_item_type: Optional[StrictStr] = Field(default=None, alias="sourceItemType")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The ID of the subscription associated with the credit memo item.", alias="subscriptionId")
    tax_mode: Optional[StrictStr] = Field(default=None, alias="taxMode")
    taxation_items: Optional[GetCreditMemoItemTaxationItems] = Field(default=None, alias="taxationItems")
    unapplied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unapplied amount of the credit memo item.", alias="unappliedAmount")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The units to measure usage.", alias="unitOfMeasure")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The per-unit price of the credit memo item.", alias="unitPrice")
    updated_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who last updated the credit memo item.", alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, description="The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.", alias="updatedDate")
    order_line_item_id: Optional[StrictStr] = Field(default=None, description="orderLineItemId ", alias="orderLineItemId")
    item_type: Optional[StrictStr] = Field(default=None, description="itemType ", alias="itemType")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="purchaseOrderNumber ", alias="purchaseOrderNumber")
    fulfillment_id: Optional[StrictStr] = Field(default=None, description="fulfillmentId ", alias="fulfillmentId")
    number_of_deliveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled. ", alias="numberOfDeliveries")
    reflect_discount_in_net_amount: Optional[StrictBool] = Field(default=None, description="The flag to reflect Discount in Apply To Charge Net Amount. ", alias="reflectDiscountInNetAmount")
    revenue_impacting: Optional[StrictStr] = Field(default=None, alias="revenueImpacting")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["amount", "amountWithoutTax", "appliedAmount", "appliedToItemId", "comment", "createdById", "createdDate", "creditFromItemId", "creditFromItemSource", "creditTaxItems", "description", "excludeItemBillingFromRevenueAccounting", "financeInformation", "id", "invoiceScheduleId", "invoiceScheduleItemId", "processingType", "quantity", "refundAmount", "serviceEndDate", "serviceStartDate", "shipToContactId", "sku", "skuName", "soldToContactId", "soldToContactSnapshotId", "sourceItemId", "sourceItemType", "subscriptionId", "taxMode", "taxationItems", "unappliedAmount", "unitOfMeasure", "unitPrice", "updatedById", "updatedDate", "orderLineItemId", "itemType", "purchaseOrderNumber", "fulfillmentId", "numberOfDeliveries", "reflectDiscountInNetAmount", "revenueImpacting"]

    @field_validator('credit_from_item_source')
    def credit_from_item_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['InvoiceItem', 'CreditMemoItem', 'DebitMemoItem']):
            raise ValueError("must be one of enum values ('InvoiceItem', 'CreditMemoItem', 'DebitMemoItem')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditMemoItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_tax_items (list)
        _items = []
        if self.credit_tax_items:
            for _item_credit_tax_items in self.credit_tax_items:
                if _item_credit_tax_items:
                    _items.append(_item_credit_tax_items.to_dict())
            _dict['creditTaxItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taxation_items
        if self.taxation_items:
            _dict['taxationItems'] = self.taxation_items.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditMemoItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "appliedAmount": obj.get("appliedAmount"),
            "appliedToItemId": obj.get("appliedToItemId"),
            "comment": obj.get("comment"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "creditFromItemId": obj.get("creditFromItemId"),
            "creditFromItemSource": obj.get("creditFromItemSource"),
            "creditTaxItems": [GetCreditMemoTaxItemResponse.from_dict(_item) for _item in obj["creditTaxItems"]] if obj.get("creditTaxItems") is not None else None,
            "description": obj.get("description"),
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "financeInformation": CreditMemoItemFinanceInformation.from_dict(obj["financeInformation"]) if obj.get("financeInformation") is not None else None,
            "id": obj.get("id"),
            "invoiceScheduleId": obj.get("invoiceScheduleId"),
            "invoiceScheduleItemId": obj.get("invoiceScheduleItemId"),
            "processingType": obj.get("processingType"),
            "quantity": obj.get("quantity"),
            "refundAmount": obj.get("refundAmount"),
            "serviceEndDate": obj.get("serviceEndDate"),
            "serviceStartDate": obj.get("serviceStartDate"),
            "shipToContactId": obj.get("shipToContactId"),
            "sku": obj.get("sku"),
            "skuName": obj.get("skuName"),
            "soldToContactId": obj.get("soldToContactId"),
            "soldToContactSnapshotId": obj.get("soldToContactSnapshotId"),
            "sourceItemId": obj.get("sourceItemId"),
            "sourceItemType": obj.get("sourceItemType"),
            "subscriptionId": obj.get("subscriptionId"),
            "taxMode": obj.get("taxMode"),
            "taxationItems": GetCreditMemoItemTaxationItems.from_dict(obj["taxationItems"]) if obj.get("taxationItems") is not None else None,
            "unappliedAmount": obj.get("unappliedAmount"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "unitPrice": obj.get("unitPrice"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "orderLineItemId": obj.get("orderLineItemId"),
            "itemType": obj.get("itemType"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "fulfillmentId": obj.get("fulfillmentId"),
            "numberOfDeliveries": obj.get("numberOfDeliveries"),
            "reflectDiscountInNetAmount": obj.get("reflectDiscountInNetAmount"),
            "revenueImpacting": obj.get("revenueImpacting")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
