# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_order_subscription_owner_account import CreateOrderSubscriptionOwnerAccount
from zuora_sdk.models.order_action_create_subscription_terms import OrderActionCreateSubscriptionTerms
from zuora_sdk.models.payment_profile import PaymentProfile
from zuora_sdk.models.rate_plan_override import RatePlanOverride
from zuora_sdk.models.subscribe_to_product import SubscribeToProduct
from typing import Optional, Set
from typing_extensions import Self

class OrderActionCreateSubscription(BaseModel):
    """
    Information about an order action of type `CreateSubscription`. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    bill_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="billToContactId")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of the communication profile associated with the subscription.               **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ", alias="communicationProfileId")
    invoice_group_number: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The number of invoice group associated with the subscription.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ", alias="invoiceGroupNumber")
    invoice_separately: Optional[StrictBool] = Field(default=None, description="Specifies whether the subscription appears on a separate invoice when Zuora generates invoices. ", alias="invoiceSeparately")
    invoice_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice template associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="invoiceTemplateId")
    new_subscription_owner_account: Optional[CreateOrderSubscriptionOwnerAccount] = Field(default=None, alias="newSubscriptionOwnerAccount")
    notes: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Notes about the subscription. These notes are only visible to Zuora users. ")
    payment_term: Optional[StrictStr] = Field(default=None, description="The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="paymentTerm")
    sequence_set_id: Optional[StrictStr] = Field(default=None, description="The ID of the sequence set associated with the subscription.  **Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="sequenceSetId")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the subscription.  n**Note**:    - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.    - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body. ", alias="soldToContactId")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact associated with the subscription.", alias="shipToContactId")
    subscribe_to_products: Optional[List[SubscribeToProduct]] = Field(default=None, description="For a rate plan, the following fields are available:   - `chargeOverrides`  - `clearingExistingFeatures`   - `customFields`   - `externallyManagedPlanId`  - `newRatePlanId`   - `productRatePlanId`   - `subscriptionProductFeatures`  - `uniqueToken`    ", alias="subscribeToProducts")
    subscribe_to_rate_plans: Optional[List[RatePlanOverride]] = Field(default=None, description="List of rate plans associated with the subscription.  **Note**: The `subscribeToRatePlans` field has been deprecated, this field is replaced by the `subscribeToProducts` field that supports Rate Plans. In a new order request, you can use either `subscribeToRatePlans` or `subscribeToProducts`, not both. ", alias="subscribeToRatePlans")
    subscription_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Subscription number of the subscription. For example, A-S00000001.  If you do not set this field, Zuora will generate the subscription number. ", alias="subscriptionNumber")
    subscription_owner_account_number: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="Account number of an existing account that will own the subscription. For example, A00000001.  If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field. ", alias="subscriptionOwnerAccountNumber")
    invoice_owner_account_number: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="Account number of an existing account that will own the invoice. For example, A00000001.  If you do not set this field, the account that owns the order will also own this invoice. ", alias="invoiceOwnerAccountNumber")
    terms: Optional[OrderActionCreateSubscriptionTerms] = None
    payment_profile: Optional[PaymentProfile] = Field(default=None, alias="paymentProfile")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the subscription. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["billToContactId", "communicationProfileId", "invoiceGroupNumber", "invoiceSeparately", "invoiceTemplateId", "newSubscriptionOwnerAccount", "notes", "paymentTerm", "sequenceSetId", "soldToContactId", "shipToContactId", "subscribeToProducts", "subscribeToRatePlans", "subscriptionNumber", "subscriptionOwnerAccountNumber", "invoiceOwnerAccountNumber", "terms", "paymentProfile", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionCreateSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new_subscription_owner_account
        if self.new_subscription_owner_account:
            _dict['newSubscriptionOwnerAccount'] = self.new_subscription_owner_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscribe_to_products (list)
        _items = []
        if self.subscribe_to_products:
            for _item_subscribe_to_products in self.subscribe_to_products:
                if _item_subscribe_to_products:
                    _items.append(_item_subscribe_to_products.to_dict())
            _dict['subscribeToProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscribe_to_rate_plans (list)
        _items = []
        if self.subscribe_to_rate_plans:
            for _item_subscribe_to_rate_plans in self.subscribe_to_rate_plans:
                if _item_subscribe_to_rate_plans:
                    _items.append(_item_subscribe_to_rate_plans.to_dict())
            _dict['subscribeToRatePlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_profile
        if self.payment_profile:
            _dict['paymentProfile'] = self.payment_profile.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionCreateSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "billToContactId": obj.get("billToContactId"),
            "communicationProfileId": obj.get("communicationProfileId"),
            "invoiceGroupNumber": obj.get("invoiceGroupNumber"),
            "invoiceSeparately": obj.get("invoiceSeparately"),
            "invoiceTemplateId": obj.get("invoiceTemplateId"),
            "newSubscriptionOwnerAccount": CreateOrderSubscriptionOwnerAccount.from_dict(obj["newSubscriptionOwnerAccount"]) if obj.get("newSubscriptionOwnerAccount") is not None else None,
            "notes": obj.get("notes"),
            "paymentTerm": obj.get("paymentTerm"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "soldToContactId": obj.get("soldToContactId"),
            "shipToContactId": obj.get("shipToContactId"),
            "subscribeToProducts": [SubscribeToProduct.from_dict(_item) for _item in obj["subscribeToProducts"]] if obj.get("subscribeToProducts") is not None else None,
            "subscribeToRatePlans": [RatePlanOverride.from_dict(_item) for _item in obj["subscribeToRatePlans"]] if obj.get("subscribeToRatePlans") is not None else None,
            "subscriptionNumber": obj.get("subscriptionNumber"),
            "subscriptionOwnerAccountNumber": obj.get("subscriptionOwnerAccountNumber"),
            "invoiceOwnerAccountNumber": obj.get("invoiceOwnerAccountNumber"),
            "terms": OrderActionCreateSubscriptionTerms.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "paymentProfile": PaymentProfile.from_dict(obj["paymentProfile"]) if obj.get("paymentProfile") is not None else None,
            "currency": obj.get("currency")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
