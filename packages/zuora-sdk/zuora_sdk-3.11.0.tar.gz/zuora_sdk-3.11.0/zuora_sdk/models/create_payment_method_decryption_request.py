# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_payment_method_cardholder_info import CreatePaymentMethodCardholderInfo
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentMethodDecryptionRequest(BaseModel):
    """
    CreatePaymentMethodDecryptionRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer account associated with this payment method. To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.", alias="accountID")
    card_holder_info: Optional[CreatePaymentMethodCardholderInfo] = Field(default=None, alias="cardHolderInfo")
    integration_type: StrictStr = Field(description="Field to identify the token decryption type.  **Note:** The only value at this time is `ApplePay`.  ", alias="integrationType")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The id of invoice this payment will apply to.  **Note:** When `processPayment` is `true`, this field is required. Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set `processPayment` to `false` and call payment API separately. ", alias="invoiceId")
    merchant_id: StrictStr = Field(description="The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center. ", alias="merchantID")
    mit_consent_agreement_src: Optional[StrictStr] = Field(default=None, alias="mitConsentAgreementSrc")
    mit_profile_action: Optional[StrictStr] = Field(default=None, alias="mitProfileAction")
    mit_profile_type: Optional[StrictStr] = Field(default=None, alias="mitProfileType")
    payment_gateway: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The label name of the gateway instance configured in Zuora that should process the payment. When creating a Payment, this must be a valid gateway instance ID and this gateway must support the specific payment method. If not specified, the default gateway of your Zuora customer account will be used.  **Note:** When `processPayment` is `true`, this field is required. When `processPayment` is `false`, the default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field. ", alias="paymentGateway")
    payment_token: Dict[str, Any] = Field(description="The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.  ", alias="paymentToken")
    process_payment: Optional[StrictBool] = Field(default=None, description="A boolean flag to control whether a payment should be processed after creating payment method. The payment amount will be equivalent to the amount the merchant supplied in the ApplePay session. Default is false.  If this field is set to `true`, you must specify the `paymentGateway` field with the payment gateway instance name.  If this field is set to `false`:  - The default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.    - You must select the **Verify new credit card** check box on the gateway instance settings page. Otherwise, the cryptogram will not be sent to the gateway.   - A separate subscribe or payment API call is required after this payment method creation call. ", alias="processPayment")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountID", "cardHolderInfo", "integrationType", "invoiceId", "merchantID", "mitConsentAgreementSrc", "mitProfileAction", "mitProfileType", "paymentGateway", "paymentToken", "processPayment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodDecryptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_holder_info
        if self.card_holder_info:
            _dict['cardHolderInfo'] = self.card_holder_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentMethodDecryptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountID": obj.get("accountID"),
            "cardHolderInfo": CreatePaymentMethodCardholderInfo.from_dict(obj["cardHolderInfo"]) if obj.get("cardHolderInfo") is not None else None,
            "integrationType": obj.get("integrationType"),
            "invoiceId": obj.get("invoiceId"),
            "merchantID": obj.get("merchantID"),
            "mitConsentAgreementSrc": obj.get("mitConsentAgreementSrc"),
            "mitProfileAction": obj.get("mitProfileAction"),
            "mitProfileType": obj.get("mitProfileType"),
            "paymentGateway": obj.get("paymentGateway"),
            "paymentToken": obj.get("paymentToken"),
            "processPayment": obj.get("processPayment")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
