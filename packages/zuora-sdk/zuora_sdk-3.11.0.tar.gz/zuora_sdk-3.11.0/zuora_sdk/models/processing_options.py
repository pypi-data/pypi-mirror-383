# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.billing_options import BillingOptions
from zuora_sdk.models.electronic_payment_options import ElectronicPaymentOptions
from zuora_sdk.models.write_off_behavior import WriteOffBehavior
from typing import Optional, Set
from typing_extensions import Self

class ProcessingOptions(BaseModel):
    """
    The container for billing processing options and payment processing options.   **Note:**  - This field is not supported in draft orders.  - When you use the \"Create an order\" operation to create an account, create a subscription, run billing, and collect payment in a single call, if any error occurs during the call, such as a payment processing failure and a tax engine failure, then all the other steps will be rolled back. In this case, neither the invoice will be generated, nor the subscription nor the account will be created.  - When you use the \"Create an order\" operation to cancel a subscription with `refund` and `writeOff`, if the `refund` or `writeOff` fails, `cancelSubscription`, `runBilling`, and `collectPayment` still can succeed.  - When you use the \"Create an order\" operation, the `collectPayment` and `refund` fields cannot be set to `true` simultaneously.  Otherwise, the order will not be proceeded.
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    application_order: Optional[List[StrictStr]] = Field(default=None, description="The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.   **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.", alias="applicationOrder")
    apply_credit: Optional[StrictBool] = Field(default=None, description="Whether to automatically apply credit memos or unapplied payments, or both to an invoice.   If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.              **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.", alias="applyCredit")
    apply_credit_balance: Optional[StrictBool] = Field(default=None, description="Indicates if any credit balance on a customer's account is automatically applied to invoices. If no value is specified then this field defaults to false. This feature is not available if you have enabled the Invoice Settlement feature.", alias="applyCreditBalance")
    billing_options: Optional[BillingOptions] = Field(default=None, alias="billingOptions")
    collect_payment: Optional[StrictBool] = Field(default=None, description="Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.", alias="collectPayment")
    electronic_payment_options: Optional[ElectronicPaymentOptions] = Field(default=None, alias="electronicPaymentOptions")
    refund: Optional[StrictBool] = Field(default=None, description="Indicates whether to refund after subscription cancelation. Default is `false`.    **Note**: When refunding a subscription that is not invoiced separately, if you do not enable the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement\" target=\"_blank\">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”")
    refund_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicates the amount to be refunded. Required if the `refund` field is `true`.", alias="refundAmount")
    refund_reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the refund transaction. The value must be an existing payment refund reason code listed in **Payments Settings** > **Configure Reason Codes**. If you do not specify the field or leave the field with an empty value, Zuora uses the default payment refund reason code.", alias="refundReasonCode")
    run_billing: Optional[StrictBool] = Field(default=None, description="Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.", alias="runBilling")
    write_off: Optional[StrictBool] = Field(default=None, description="Indicates whether to write off the outstanding balance on the invoice after refund. Default is `false`.   **Note**:   - When refunding a subscription that is not invoiced separately, if you do not enable the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement\" target=\"_blank\">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”  - The <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement\" target=\"_blank\">Invoice Settlement</a> feature must have been enabled for write-off.", alias="writeOff")
    write_off_behavior: Optional[WriteOffBehavior] = Field(default=None, alias="writeOffBehavior")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["applicationOrder", "applyCredit", "applyCreditBalance", "billingOptions", "collectPayment", "electronicPaymentOptions", "refund", "refundAmount", "refundReasonCode", "runBilling", "writeOff", "writeOffBehavior"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessingOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_options
        if self.billing_options:
            _dict['billingOptions'] = self.billing_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of electronic_payment_options
        if self.electronic_payment_options:
            _dict['electronicPaymentOptions'] = self.electronic_payment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write_off_behavior
        if self.write_off_behavior:
            _dict['writeOffBehavior'] = self.write_off_behavior.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessingOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "applicationOrder": obj.get("applicationOrder"),
            "applyCredit": obj.get("applyCredit"),
            "applyCreditBalance": obj.get("applyCreditBalance"),
            "billingOptions": BillingOptions.from_dict(obj["billingOptions"]) if obj.get("billingOptions") is not None else None,
            "collectPayment": obj.get("collectPayment"),
            "electronicPaymentOptions": ElectronicPaymentOptions.from_dict(obj["electronicPaymentOptions"]) if obj.get("electronicPaymentOptions") is not None else None,
            "refund": obj.get("refund"),
            "refundAmount": obj.get("refundAmount"),
            "refundReasonCode": obj.get("refundReasonCode"),
            "runBilling": obj.get("runBilling"),
            "writeOff": obj.get("writeOff"),
            "writeOffBehavior": WriteOffBehavior.from_dict(obj["writeOffBehavior"]) if obj.get("writeOffBehavior") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
