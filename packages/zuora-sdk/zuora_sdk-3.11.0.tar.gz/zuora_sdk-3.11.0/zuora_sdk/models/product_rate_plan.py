# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.product_rate_plan_charge import ProductRatePlanCharge
from zuora_sdk.models.product_rate_plan_object_ns_fields_billing_period_ns import ProductRatePlanObjectNSFieldsBillingPeriodNS
from zuora_sdk.models.product_rate_plan_object_ns_fields_include_children_ns import ProductRatePlanObjectNSFieldsIncludeChildrenNS
from zuora_sdk.models.product_rate_plan_object_ns_fields_item_type_ns import ProductRatePlanObjectNSFieldsItemTypeNS
from zuora_sdk.models.product_rate_plan_status import ProductRatePlanStatus
from typing import Optional, Set
from typing_extensions import Self

class ProductRatePlan(BaseModel):
    """
    ProductRatePlan
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    billing_period__ns: Optional[StrictStr] = Field(default=None, alias="BillingPeriod__NS")
    class__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Class__NS")
    department__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Department__NS")
    include_children__ns: Optional[StrictStr] = Field(default=None, alias="IncludeChildren__NS")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the product rate plan's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationStatus__NS")
    item_type__ns: Optional[StrictStr] = Field(default=None, alias="ItemType__NS")
    location__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Location__NS")
    multi_currency_price__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Multi-currency price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="MultiCurrencyPrice__NS")
    price__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Price__NS")
    subsidiary__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Subsidiary__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the product rate plan was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="SyncDate__NS")
    id: Optional[StrictStr] = Field(default=None, description="Unique product rate-plan ID. ")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="The natural key of the product rate plan. ", alias="productRatePlanNumber")
    name: Optional[StrictStr] = Field(default=None, description="Name of the product rate-plan charge. (Not required to be unique.) ")
    description: Optional[StrictStr] = Field(default=None, description="Rate plan description. ")
    effective_start_date: Optional[date] = Field(default=None, description="First date the rate plan is active (i.e., available to be subscribed to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.", alias="effectiveStartDate")
    effective_end_date: Optional[date] = Field(default=None, description="Final date the rate plan is active, as `yyyy-mm-dd`. After this date, the rate plan status is `Expired`.", alias="effectiveEndDate")
    grade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The grade of the product rate plan.   **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).")
    product_rate_plan_charges: Optional[List[ProductRatePlanCharge]] = Field(default=None, description="Field attributes describing the product rate plan charges: ", alias="productRatePlanCharges")
    status: Optional[ProductRatePlanStatus] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["BillingPeriod__NS", "Class__NS", "Department__NS", "IncludeChildren__NS", "IntegrationId__NS", "IntegrationStatus__NS", "ItemType__NS", "Location__NS", "MultiCurrencyPrice__NS", "Price__NS", "Subsidiary__NS", "SyncDate__NS", "id", "productRatePlanNumber", "name", "description", "effectiveStartDate", "effectiveEndDate", "grade", "productRatePlanCharges", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_rate_plan_charges (list)
        _items = []
        if self.product_rate_plan_charges:
            for _item_product_rate_plan_charges in self.product_rate_plan_charges:
                if _item_product_rate_plan_charges:
                    _items.append(_item_product_rate_plan_charges.to_dict())
            _dict['productRatePlanCharges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "BillingPeriod__NS": obj.get("BillingPeriod__NS"),
            "Class__NS": obj.get("Class__NS"),
            "Department__NS": obj.get("Department__NS"),
            "IncludeChildren__NS": obj.get("IncludeChildren__NS"),
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "ItemType__NS": obj.get("ItemType__NS"),
            "Location__NS": obj.get("Location__NS"),
            "MultiCurrencyPrice__NS": obj.get("MultiCurrencyPrice__NS"),
            "Price__NS": obj.get("Price__NS"),
            "Subsidiary__NS": obj.get("Subsidiary__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "id": obj.get("id"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "effectiveStartDate": obj.get("effectiveStartDate"),
            "effectiveEndDate": obj.get("effectiveEndDate"),
            "grade": obj.get("grade"),
            "productRatePlanCharges": [ProductRatePlanCharge.from_dict(_item) for _item in obj["productRatePlanCharges"]] if obj.get("productRatePlanCharges") is not None else None,
            "status": obj.get("status")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
