# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.post_public_notification_definition_request_callout import PostPublicNotificationDefinitionRequestCallout
from zuora_sdk.models.post_public_notification_definition_request_filter_rule import PostPublicNotificationDefinitionRequestFilterRule
from typing import Optional, Set
from typing_extensions import Self

class PostPublicNotificationDefinitionRequest(BaseModel):
    """
    PostPublicNotificationDefinitionRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    active: Optional[StrictBool] = Field(default=True, description="The status of the notification definition. The default value is `true`.")
    associated_account: Optional[StrictStr] = Field(default=None, description="Indicates with which type of account this notification is associated. Depending on your environment, you can use one of the following values:  * `Account.Id`: ID of the primary customer account related to the notification. It is also the default value.  * `ParentAccount.Id`: this option is available only if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled for your tenant.  * `SubscriptionOwnerAccount.Id`: this option is available if the base object of the notification is Order Action.   **Note:** before specifying this field, we recommend that you use [Data Source](https://knowledgecenter.zuora.com/Billing/Reporting/D_Data_Sources_and_Exports/C_Data_Source_Reference) to check the available types of accounts for the current notification.  ", alias="associatedAccount")
    callout: Optional[PostPublicNotificationDefinitionRequestCallout] = None
    callout_active: Optional[StrictBool] = Field(default=False, description="The status of the callout action. The default value is `false`.", alias="calloutActive")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="The profile that notification definition belongs to.    You can use the [Query Action](https://www.zuora.com/developer/api-references/api/operation/Action_Postquery) to get the communication profile Id. See the following request sample:   `{     \"queryString\": \"select Id, ProfileName from CommunicationProfile\"  }`  If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.", alias="communicationProfileId")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The description of the notification definition.")
    email_active: Optional[StrictBool] = Field(default=False, description="The status of the email action. The default value is `false`.", alias="emailActive")
    email_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the email template. If `emailActive` is `true`, an email template is required. And EventType of the email template MUST be the same as the eventType.", alias="emailTemplateId")
    event_type_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of the event type.  ", alias="eventTypeName")
    event_type_namespace: Optional[StrictStr] = Field(default=None, description="The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.             For example, if you want to create a notification definition on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.", alias="eventTypeNamespace")
    filter_rule: Optional[PostPublicNotificationDefinitionRequestFilterRule] = Field(default=None, alias="filterRule")
    filter_rule_params: Optional[Dict[str, StrictStr]] = Field(default=None, description="The parameter values used to configure the filter rule. ", alias="filterRuleParams")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The name of the notification definition, unique per communication profile.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active", "associatedAccount", "callout", "calloutActive", "communicationProfileId", "description", "emailActive", "emailTemplateId", "eventTypeName", "eventTypeNamespace", "filterRule", "filterRuleParams", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostPublicNotificationDefinitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callout
        if self.callout:
            _dict['callout'] = self.callout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_rule
        if self.filter_rule:
            _dict['filterRule'] = self.filter_rule.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostPublicNotificationDefinitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "active": obj.get("active") if obj.get("active") is not None else True,
            "associatedAccount": obj.get("associatedAccount"),
            "callout": PostPublicNotificationDefinitionRequestCallout.from_dict(obj["callout"]) if obj.get("callout") is not None else None,
            "calloutActive": obj.get("calloutActive") if obj.get("calloutActive") is not None else False,
            "communicationProfileId": obj.get("communicationProfileId"),
            "description": obj.get("description"),
            "emailActive": obj.get("emailActive") if obj.get("emailActive") is not None else False,
            "emailTemplateId": obj.get("emailTemplateId"),
            "eventTypeName": obj.get("eventTypeName"),
            "eventTypeNamespace": obj.get("eventTypeNamespace"),
            "filterRule": PostPublicNotificationDefinitionRequestFilterRule.from_dict(obj["filterRule"]) if obj.get("filterRule") is not None else None,
            "filterRuleParams": obj.get("filterRuleParams"),
            "name": obj.get("name")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
