# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_payment_run_data import CreatePaymentRunData
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentRunRequest(BaseModel):
    """
    CreatePaymentRunRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The ID of the customer account associated with the payment run.   This field conflicts with each of the `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields. If there are such conflicts, an error occurs and an error message is returned.", alias="accountId")
    apply_credit_balance: Optional[StrictBool] = Field(default=None, description="If `applyCreditBalance` is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.", alias="applyCreditBalance")
    auto_apply_credit_memo: Optional[StrictBool] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   Whether to automatically apply a posted credit memo to one or more receivables in the payment run.", alias="autoApplyCreditMemo")
    auto_apply_unapplied_payment: Optional[StrictBool] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   Whether to automatically apply unapplied payments to  one or more receivables in the payment run.", alias="autoApplyUnappliedPayment")
    batch: Optional[StrictStr] = Field(default=None, description="The alias name given to a batch. The batch name is a string of 50 characters or less.   This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned. ")
    bill_cycle_day: Optional[StrictStr] = Field(default=None, description="The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. The value must be equal to or less then 31, and 31 is mean the EOM.   This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.", alias="billCycleDay")
    billing_run_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The ID of a bill run.   This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.", alias="billingRunId")
    collect_payment: Optional[StrictBool] = Field(default=None, description="Whether to process electronic payments during the execution of payment runs.    If the Payment user permission \"Process Electronic Payment\" is disabled, this field will be ignored.", alias="collectPayment")
    consolidated_payment: Optional[StrictBool] = Field(default=None, description="**Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.    Whether to process a single payment for all receivables that are due on an account.", alias="consolidatedPayment")
    currency: Optional[StrictStr] = Field(default=None, description="A currency defined in the web-based UI administrative settings.   This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.")
    data: Optional[List[CreatePaymentRunData]] = Field(default=None, description=" The array of data for specifying records of accounts and invoices/debit memos that will be collected and processed by a payment run.   When you specify the data array, ensure that at least one record is passed in. If an empty array is specified, `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields will be used to define the billing documents to be collected.   A maximum of 50K records are allowed to be passed into the `data` array.   Here is an example:  ```   {     \"accountId\": \"60c81b5bc51649e8a7d1b48303194790\",     \"documentId\": \"2c9081a03c63c94c013c6894af5602dd\",     \"documentType\": \"Invoice\",     \"amount\": 80,     \"paymentMethodId\": \"2c9081a03c6d7b51013c6d7e4ada0a1c\",     \"paymentGatewayId\": \"d2abe8342e1811ea80e774b9452e17ea\",     \"comment\": \"Payment Comments\",     \"customField1__c\": \"cf_value1\",     \"customField2__c\": \"cf_value2\"   } ```   Here is another example for a standalone payment:  ```   {     \"accountId\": \"account2\",     \"amount\": 100,     \"currency\": \"GBP\",     \"standalone\": true   } ```")
    payment_gateway_id: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The ID of the gateway instance that processes the payment.   This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.", alias="paymentGatewayId")
    process_payment_with_closed_pm: Optional[StrictBool] = Field(default=None, description="**Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.    Whether to process payments even if the default payment method is closed.", alias="processPaymentWithClosedPM")
    run_date: Optional[StrictStr] = Field(default=None, description="The date and time when the scheduled payment run is to be executed, in `yyyy-mm-dd hh:mm:ss` format. The backend will ignore mintues and seconds in the field value. For example, if you specify `2017-03-01 11:30:37` for this value, this payment run will be run at 2017-03-01 11:00:00.   You must specify either the `runDate` field or the `targetDate` field in the request body. If you specify the `runDate` field, the scheduced payment run is to be executed on the run date. If you specify the `targetDate` field, the payment run is executed immediately after it is created. ", alias="runDate")
    target_date: Optional[StrictStr] = Field(default=None, description="The target date used to determine which receivables to be paid in the payment run. The payments are collected for all receivables with the due date no later than the target date.   You must specify either the `runDate` field or the `targetDate` field in the request body. If you specify the `runDate` field, the scheduced payment run is to be executed on the run date. If you specify the `targetDate` field, the payment run is executed immediately after it is created. ", alias="targetDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "applyCreditBalance", "autoApplyCreditMemo", "autoApplyUnappliedPayment", "batch", "billCycleDay", "billingRunId", "collectPayment", "consolidatedPayment", "currency", "data", "paymentGatewayId", "processPaymentWithClosedPM", "runDate", "targetDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "applyCreditBalance": obj.get("applyCreditBalance"),
            "autoApplyCreditMemo": obj.get("autoApplyCreditMemo"),
            "autoApplyUnappliedPayment": obj.get("autoApplyUnappliedPayment"),
            "batch": obj.get("batch"),
            "billCycleDay": obj.get("billCycleDay"),
            "billingRunId": obj.get("billingRunId"),
            "collectPayment": obj.get("collectPayment"),
            "consolidatedPayment": obj.get("consolidatedPayment"),
            "currency": obj.get("currency"),
            "data": [CreatePaymentRunData.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "processPaymentWithClosedPM": obj.get("processPaymentWithClosedPM"),
            "runDate": obj.get("runDate"),
            "targetDate": obj.get("targetDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
