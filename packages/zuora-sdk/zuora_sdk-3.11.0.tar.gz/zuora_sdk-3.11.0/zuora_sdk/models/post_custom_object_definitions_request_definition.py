# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.custom_object_definition_relationship import CustomObjectDefinitionRelationship
from zuora_sdk.models.post_custom_object_definition_field_definition_request import PostCustomObjectDefinitionFieldDefinitionRequest
from typing import Optional, Set
from typing_extensions import Self

class PostCustomObjectDefinitionsRequestDefinition(BaseModel):
    """
    PostCustomObjectDefinitionsRequestDefinition
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    auditable: Optional[List[StrictStr]] = Field(default=None, description="The set of fields which Audit Trail tracks and records changes of. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.")
    enable_create_record_auditing: Optional[StrictBool] = Field(default=False, description="Indicates whether to audit the creation of custom object records of this custom object definition.   Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.", alias="enableCreateRecordAuditing")
    enable_delete_record_auditing: Optional[StrictBool] = Field(default=False, description="Indicates whether to audit the deletion of custom object records of this custom object definition.   Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.", alias="enableDeleteRecordAuditing")
    filterable: Optional[List[StrictStr]] = Field(default=None, description="The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.")
    label: StrictStr = Field(description="A UI label for the custom object")
    object: StrictStr = Field(description="The API name of the custom object")
    properties: Optional[Dict[str, PostCustomObjectDefinitionFieldDefinitionRequest]] = None
    relationships: Optional[List[CustomObjectDefinitionRelationship]] = Field(default=None, description="An array of relationships with Zuora objects or other custom objects. You can add at most 2 `manyToOne` relationships when creating a custom field definition.")
    required: Optional[List[StrictStr]] = Field(default=None, description="The required fields of the custom object. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.")
    unique: Optional[List[StrictStr]] = Field(default=None, description="The fields with unique constraints. You can remove the unique constraint on a field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auditable", "enableCreateRecordAuditing", "enableDeleteRecordAuditing", "filterable", "label", "object", "properties", "relationships", "required", "unique"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostCustomObjectDefinitionsRequestDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item_relationships in self.relationships:
                if _item_relationships:
                    _items.append(_item_relationships.to_dict())
            _dict['relationships'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostCustomObjectDefinitionsRequestDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "auditable": obj.get("auditable"),
            "enableCreateRecordAuditing": obj.get("enableCreateRecordAuditing") if obj.get("enableCreateRecordAuditing") is not None else False,
            "enableDeleteRecordAuditing": obj.get("enableDeleteRecordAuditing") if obj.get("enableDeleteRecordAuditing") is not None else False,
            "filterable": obj.get("filterable"),
            "label": obj.get("label"),
            "object": obj.get("object"),
            "properties": dict(
                (_k, PostCustomObjectDefinitionFieldDefinitionRequest.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "relationships": [CustomObjectDefinitionRelationship.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "required": obj.get("required"),
            "unique": obj.get("unique")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
