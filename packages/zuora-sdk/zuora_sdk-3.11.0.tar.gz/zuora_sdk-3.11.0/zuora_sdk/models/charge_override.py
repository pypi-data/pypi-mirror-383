# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.charge_function import ChargeFunction
from zuora_sdk.models.charge_model import ChargeModel
from zuora_sdk.models.charge_override_billing import ChargeOverrideBilling
from zuora_sdk.models.charge_override_pricing import ChargeOverridePricing
from zuora_sdk.models.charge_type import ChargeType
from zuora_sdk.models.commitment_level import CommitmentLevel
from zuora_sdk.models.commitment_type import CommitmentType
from zuora_sdk.models.end_conditions import EndConditions
from zuora_sdk.models.prepaid_drawdown_credit_option import PrepaidDrawdownCreditOption
from zuora_sdk.models.prepaid_operation_type import PrepaidOperationType
from zuora_sdk.models.tax_mode import TaxMode
from zuora_sdk.models.trigger_params import TriggerParams
from typing import Optional, Set
from typing_extensions import Self

class ChargeOverride(BaseModel):
    """
    Charge associated with a rate plan. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    name: Optional[StrictStr] = Field(default=None, description="The name of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ")
    account_receivable_accounting_code: Optional[StrictStr] = Field(default=None, description="The accountReceivableAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a>, <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a>, and <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement\" target=\"_blank\">Invoice Settlement</a> features are enabled. ", alias="accountReceivableAccountingCode")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The adjustmentLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="adjustmentLiabilityAccountingCode")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The adjustmentRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="adjustmentRevenueAccountingCode")
    contract_asset_accounting_code: Optional[StrictStr] = Field(default=None, description="The contractAssetAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="contractAssetAccountingCode")
    contract_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The contractLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="contractLiabilityAccountingCode")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The contractRecognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="contractRecognizedRevenueAccountingCode")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The deferredRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled. ", alias="deferredRevenueAccountingCode")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The recognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled. ", alias="recognizedRevenueAccountingCode")
    un_billed_receivables_accounting_code: Optional[StrictStr] = Field(default=None, description="The unBilledReceivablesAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled. ", alias="unBilledReceivablesAccountingCode")
    product_category: Optional[StrictStr] = Field(default=None, description="The productCategory of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ", alias="productCategory")
    product_class: Optional[StrictStr] = Field(default=None, description="The productClass of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ", alias="productClass")
    product_family: Optional[StrictStr] = Field(default=None, description="The productFamily of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ", alias="productFamily")
    product_line: Optional[StrictStr] = Field(default=None, description="The productLine of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ", alias="productLine")
    charge_model: Optional[ChargeModel] = Field(default=None, alias="chargeModel")
    charge_type: Optional[ChargeType] = Field(default=None, alias="chargeType")
    tax_code: Optional[StrictStr] = Field(default=None, description="The taxCode of a charge. This field is available when the field 'taxable' is set to true. ", alias="taxCode")
    tax_mode: Optional[TaxMode] = Field(default=None, alias="taxMode")
    taxable: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the charge is taxable. If this field is set to true, both the fields `taxCode` and `taxMode` are required. ")
    revenue_recognition_timing: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="This field is used to dictate the type of revenue recognition timing.", alias="revenueRecognitionTiming")
    revenue_amortization_method: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="This field is used to dictate the type of revenue amortization method.", alias="revenueAmortizationMethod")
    is_charge_level_min_commit: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the charge is charge level min commit.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled. ", alias="isChargeLevelMinCommit")
    commitment_type: Optional[CommitmentType] = Field(default=None, alias="commitmentType")
    prepaid_operation_type: Optional[PrepaidOperationType] = Field(default=None, alias="prepaidOperationType")
    is_committed: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the charge is committed.  ", alias="isCommitted")
    charge_function: Optional[ChargeFunction] = Field(default=None, alias="chargeFunction")
    prepaid_uom: Optional[StrictStr] = Field(default=None, description="The prepaid unit of measure of the charge.  ", alias="prepaidUom")
    drawdown_uom: Optional[StrictStr] = Field(default=None, description="The drawdown unit of measure of the charge.  ", alias="drawdownUom")
    prepaid_total_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The prepaid total quantity of the charge.  ", alias="prepaidTotalQuantity")
    is_prepaid: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the charge is prepaid.  ", alias="isPrepaid")
    credit_option: Optional[PrepaidDrawdownCreditOption] = Field(default=None, alias="creditOption")
    billing: Optional[ChargeOverrideBilling] = None
    charge_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number. ", alias="chargeNumber")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of a Rate Plan Charge object. ", alias="customFields")
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description of the charge. ")
    drawdown_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0). ", alias="drawdownRate")
    end_date: Optional[EndConditions] = Field(default=None, alias="endDate")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.   **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.  ", alias="excludeItemBillingFromRevenueAccounting")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude rate plan charges from revenue accounting.   **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.  ", alias="excludeItemBookingFromRevenueAccounting")
    is_allocation_eligible: Optional[StrictBool] = Field(default=None, description="This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ", alias="isAllocationEligible")
    is_rollover: Optional[StrictBool] = Field(default=None, description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The value is either \"True\" or \"False\". It determines whether the rollover fields are needed. ", alias="isRollover")
    is_unbilled: Optional[StrictBool] = Field(default=None, description="This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ", alias="isUnbilled")
    prepaid_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0). ", alias="prepaidQuantity")
    pricing: Optional[ChargeOverridePricing] = None
    product_rate_plan_charge_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate-plan charge for this subscription. ", alias="productRatePlanChargeNumber")
    product_rate_plan_charge_id: StrictStr = Field(description="Internal identifier of the product rate plan charge that the charge is based on. ", alias="productRatePlanChargeId")
    proration_option: Optional[StrictStr] = Field(default=None, alias="prorationOption")
    rating_properties_override: Optional[StrictStr] = Field(default=None, alias="ratingPropertiesOverride")
    rev_rec_code: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="Revenue Recognition Code ", alias="revRecCode")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(default=None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(default=None, description="Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`. ", alias="revenueRecognitionRuleName")
    rollover_apply: Optional[StrictStr] = Field(default=None, alias="rolloverApply")
    rollover_periods: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  This field defines the number of rollover periods, it is restricted to 3. ", alias="rolloverPeriods")
    estimated_start_date: Optional[date] = Field(default=None, description="Estimated start date of the charge. This field is only available when the charge is changed through the related order actions. **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/\" target=\"_blank\">Pending Charge Flexibility</a> feature is enabled. ", alias="estimatedStartDate")
    start_date: Optional[TriggerParams] = Field(default=None, alias="startDate")
    unique_token: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify. ", alias="uniqueToken")
    upsell_origin_charge_number: Optional[StrictStr] = Field(default=None, description="**Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge. ", alias="upsellOriginChargeNumber")
    validity_period_type: Optional[StrictStr] = Field(default=None, alias="validityPeriodType")
    commitment_level: Optional[CommitmentLevel] = Field(default=None, alias="commitmentLevel")
    pricing_attributes: Optional[Dict[str, Any]] = Field(default=None, description="Container for pricing attributes that provide additional context for dynamic pricing.  **Note:** This field requires the DynamicPricing permission to be enabled. ", alias="pricingAttributes")
    negotiated_price_table: Optional[List[Dict[str, Any]]] = Field(default=None, description="Array of negotiated price table information.  **Note:** This field requires the NegotiatedPriceTable permission to be enabled. ", alias="negotiatedPriceTable")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["name", "accountReceivableAccountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "recognizedRevenueAccountingCode", "unBilledReceivablesAccountingCode", "productCategory", "productClass", "productFamily", "productLine", "chargeModel", "chargeType", "taxCode", "taxMode", "taxable", "revenueRecognitionTiming", "revenueAmortizationMethod", "isChargeLevelMinCommit", "commitmentType", "prepaidOperationType", "isCommitted", "chargeFunction", "prepaidUom", "drawdownUom", "prepaidTotalQuantity", "isPrepaid", "creditOption", "billing", "chargeNumber", "customFields", "description", "drawdownRate", "endDate", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "isAllocationEligible", "isRollover", "isUnbilled", "prepaidQuantity", "pricing", "productRatePlanChargeNumber", "productRatePlanChargeId", "prorationOption", "ratingPropertiesOverride", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "rolloverApply", "rolloverPeriods", "estimatedStartDate", "startDate", "uniqueToken", "upsellOriginChargeNumber", "validityPeriodType", "commitmentLevel", "pricingAttributes", "negotiatedPriceTable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChargeOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating_properties_override
        if self.rating_properties_override:
            _dict['ratingPropertiesOverride'] = self.rating_properties_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChargeOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "name": obj.get("name"),
            "accountReceivableAccountingCode": obj.get("accountReceivableAccountingCode"),
            "adjustmentLiabilityAccountingCode": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustmentRevenueAccountingCode": obj.get("adjustmentRevenueAccountingCode"),
            "contractAssetAccountingCode": obj.get("contractAssetAccountingCode"),
            "contractLiabilityAccountingCode": obj.get("contractLiabilityAccountingCode"),
            "contractRecognizedRevenueAccountingCode": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferredRevenueAccountingCode": obj.get("deferredRevenueAccountingCode"),
            "recognizedRevenueAccountingCode": obj.get("recognizedRevenueAccountingCode"),
            "unBilledReceivablesAccountingCode": obj.get("unBilledReceivablesAccountingCode"),
            "productCategory": obj.get("productCategory"),
            "productClass": obj.get("productClass"),
            "productFamily": obj.get("productFamily"),
            "productLine": obj.get("productLine"),
            "chargeModel": obj.get("chargeModel"),
            "chargeType": obj.get("chargeType"),
            "taxCode": obj.get("taxCode"),
            "taxMode": obj.get("taxMode"),
            "taxable": obj.get("taxable"),
            "revenueRecognitionTiming": obj.get("revenueRecognitionTiming"),
            "revenueAmortizationMethod": obj.get("revenueAmortizationMethod"),
            "isChargeLevelMinCommit": obj.get("isChargeLevelMinCommit"),
            "commitmentType": obj.get("commitmentType"),
            "prepaidOperationType": obj.get("prepaidOperationType"),
            "isCommitted": obj.get("isCommitted"),
            "chargeFunction": obj.get("chargeFunction"),
            "prepaidUom": obj.get("prepaidUom"),
            "drawdownUom": obj.get("drawdownUom"),
            "prepaidTotalQuantity": obj.get("prepaidTotalQuantity"),
            "isPrepaid": obj.get("isPrepaid"),
            "creditOption": obj.get("creditOption"),
            "billing": ChargeOverrideBilling.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "chargeNumber": obj.get("chargeNumber"),
            "customFields": obj.get("customFields"),
            "description": obj.get("description"),
            "drawdownRate": obj.get("drawdownRate"),
            "endDate": EndConditions.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "excludeItemBookingFromRevenueAccounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "isAllocationEligible": obj.get("isAllocationEligible"),
            "isRollover": obj.get("isRollover"),
            "isUnbilled": obj.get("isUnbilled"),
            "prepaidQuantity": obj.get("prepaidQuantity"),
            "pricing": ChargeOverridePricing.from_dict(obj["pricing"]) if obj.get("pricing") is not None else None,
            "productRatePlanChargeNumber": obj.get("productRatePlanChargeNumber"),
            "productRatePlanChargeId": obj.get("productRatePlanChargeId"),
            "prorationOption": obj.get("prorationOption"),
            "ratingPropertiesOverride": RatingPropertiesOverride.from_dict(obj["ratingPropertiesOverride"]) if obj.get("ratingPropertiesOverride") is not None else None,
            "revRecCode": obj.get("revRecCode"),
            "revRecTriggerCondition": obj.get("revRecTriggerCondition"),
            "revenueRecognitionRuleName": obj.get("revenueRecognitionRuleName"),
            "rolloverApply": obj.get("rolloverApply"),
            "rolloverPeriods": obj.get("rolloverPeriods"),
            "estimatedStartDate": obj.get("estimatedStartDate"),
            "startDate": TriggerParams.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "uniqueToken": obj.get("uniqueToken"),
            "upsellOriginChargeNumber": obj.get("upsellOriginChargeNumber"),
            "validityPeriodType": obj.get("validityPeriodType"),
            "commitmentLevel": obj.get("commitmentLevel"),
            "pricingAttributes": obj.get("pricingAttributes"),
            "negotiatedPriceTable": obj.get("negotiatedPriceTable")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
