# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.order_action_add_product import OrderActionAddProduct
from zuora_sdk.models.order_action_cancel_subscription import OrderActionCancelSubscription
from zuora_sdk.models.order_action_change_plan import OrderActionChangePlan
from zuora_sdk.models.order_action_create_subscription import OrderActionCreateSubscription
from zuora_sdk.models.order_action_owner_transfer import OrderActionOwnerTransfer
from zuora_sdk.models.order_action_remove_product import OrderActionRemoveProduct
from zuora_sdk.models.order_action_renew_subscription import OrderActionRenewSubscription
from zuora_sdk.models.order_action_resume import OrderActionResume
from zuora_sdk.models.order_action_suspend import OrderActionSuspend
from zuora_sdk.models.order_action_terms_and_conditions import OrderActionTermsAndConditions
from zuora_sdk.models.order_action_update_product import OrderActionUpdateProduct
from zuora_sdk.models.order_item import OrderItem
from zuora_sdk.models.order_metric import OrderMetric
from zuora_sdk.models.trigger_date import TriggerDate
from typing import Optional, Set
from typing_extensions import Self

class OrderAction(BaseModel):
    """
    Represents the processed order action.
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = Field(default=None, description="The Id of the order action processed in the order.")
    create_subscription: Optional[OrderActionCreateSubscription] = Field(default=None, alias="createSubscription")
    add_product: Optional[OrderActionAddProduct] = Field(default=None, alias="addProduct")
    update_product: Optional[OrderActionUpdateProduct] = Field(default=None, alias="updateProduct")
    cancel_subscription: Optional[OrderActionCancelSubscription] = Field(default=None, alias="cancelSubscription")
    change_plan: Optional[OrderActionChangePlan] = Field(default=None, alias="changePlan")
    owner_transfer: Optional[OrderActionOwnerTransfer] = Field(default=None, alias="ownerTransfer")
    remove_product: Optional[OrderActionRemoveProduct] = Field(default=None, alias="removeProduct")
    renew_subscription: Optional[OrderActionRenewSubscription] = Field(default=None, alias="renewSubscription")
    suspend: Optional[OrderActionSuspend] = None
    resume: Optional[OrderActionResume] = None
    terms_and_conditions: Optional[OrderActionTermsAndConditions] = Field(default=None, alias="termsAndConditions")
    change_reason: Optional[StrictStr] = Field(default=None, description="The change reason set for an order action when an order is created. ", alias="changeReason")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of an Order Action object. ", alias="customFields")
    sequence: Optional[StrictInt] = Field(default=None, description="The sequence of the order actions processed in the order.")
    order_items: Optional[List[OrderItem]] = Field(default=None, description="The `orderItems` nested field is only available to existing Orders customers who already have access to the field.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported. ", alias="orderItems")
    order_metrics: Optional[List[OrderMetric]] = Field(default=None, description="The container for order metrics.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.  **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr)  * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv)  * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)   It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).  Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. ", alias="orderMetrics")
    trigger_dates: Optional[List[TriggerDate]] = Field(default=None, description="Container for the contract effective, service activation, and customer acceptance dates of the order action.   If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.   If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.  If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions   If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions ", alias="triggerDates")
    type: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createSubscription", "addProduct", "updateProduct", "cancelSubscription", "changePlan", "ownerTransfer", "removeProduct", "renewSubscription", "suspend", "resume", "termsAndConditions", "changeReason", "customFields", "sequence", "orderItems", "orderMetrics", "triggerDates", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_subscription
        if self.create_subscription:
            _dict['createSubscription'] = self.create_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_product
        if self.add_product:
            _dict['addProduct'] = self.add_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_product
        if self.update_product:
            _dict['updateProduct'] = self.update_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_subscription
        if self.cancel_subscription:
            _dict['cancelSubscription'] = self.cancel_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_plan
        if self.change_plan:
            _dict['changePlan'] = self.change_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_transfer
        if self.owner_transfer:
            _dict['ownerTransfer'] = self.owner_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_product
        if self.remove_product:
            _dict['removeProduct'] = self.remove_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of renew_subscription
        if self.renew_subscription:
            _dict['renewSubscription'] = self.renew_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspend
        if self.suspend:
            _dict['suspend'] = self.suspend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resume
        if self.resume:
            _dict['resume'] = self.resume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms_and_conditions
        if self.terms_and_conditions:
            _dict['termsAndConditions'] = self.terms_and_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item_order_items in self.order_items:
                if _item_order_items:
                    _items.append(_item_order_items.to_dict())
            _dict['orderItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_metrics (list)
        _items = []
        if self.order_metrics:
            for _item_order_metrics in self.order_metrics:
                if _item_order_metrics:
                    _items.append(_item_order_metrics.to_dict())
            _dict['orderMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_dates (list)
        _items = []
        if self.trigger_dates:
            for _item_trigger_dates in self.trigger_dates:
                if _item_trigger_dates:
                    _items.append(_item_trigger_dates.to_dict())
            _dict['triggerDates'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "createSubscription": OrderActionCreateSubscription.from_dict(obj["createSubscription"]) if obj.get("createSubscription") is not None else None,
            "addProduct": OrderActionAddProduct.from_dict(obj["addProduct"]) if obj.get("addProduct") is not None else None,
            "updateProduct": OrderActionUpdateProduct.from_dict(obj["updateProduct"]) if obj.get("updateProduct") is not None else None,
            "cancelSubscription": OrderActionCancelSubscription.from_dict(obj["cancelSubscription"]) if obj.get("cancelSubscription") is not None else None,
            "changePlan": OrderActionChangePlan.from_dict(obj["changePlan"]) if obj.get("changePlan") is not None else None,
            "ownerTransfer": OrderActionOwnerTransfer.from_dict(obj["ownerTransfer"]) if obj.get("ownerTransfer") is not None else None,
            "removeProduct": OrderActionRemoveProduct.from_dict(obj["removeProduct"]) if obj.get("removeProduct") is not None else None,
            "renewSubscription": OrderActionRenewSubscription.from_dict(obj["renewSubscription"]) if obj.get("renewSubscription") is not None else None,
            "suspend": OrderActionSuspend.from_dict(obj["suspend"]) if obj.get("suspend") is not None else None,
            "resume": OrderActionResume.from_dict(obj["resume"]) if obj.get("resume") is not None else None,
            "termsAndConditions": OrderActionTermsAndConditions.from_dict(obj["termsAndConditions"]) if obj.get("termsAndConditions") is not None else None,
            "changeReason": obj.get("changeReason"),
            "customFields": obj.get("customFields"),
            "sequence": obj.get("sequence"),
            "orderItems": [OrderItem.from_dict(_item) for _item in obj["orderItems"]] if obj.get("orderItems") is not None else None,
            "orderMetrics": [OrderMetric.from_dict(_item) for _item in obj["orderMetrics"]] if obj.get("orderMetrics") is not None else None,
            "triggerDates": [TriggerDate.from_dict(_item) for _item in obj["triggerDates"]] if obj.get("triggerDates") is not None else None,
            "type": obj.get("type")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
