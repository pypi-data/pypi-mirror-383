# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ExpandedRefund(BaseModel):
    """
    ExpandedRefund
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    payment_method_snapshot_id: Optional[StrictStr] = Field(default=None, alias="paymentMethodSnapshotId")
    accounting_code: Optional[StrictStr] = Field(default=None, alias="accountingCode")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    cancelled_on: Optional[StrictStr] = Field(default=None, alias="cancelledOn")
    comment: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    gateway_reconciliation_reason: Optional[StrictStr] = Field(default=None, alias="gatewayReconciliationReason")
    gateway_reconciliation_status: Optional[StrictStr] = Field(default=None, alias="gatewayReconciliationStatus")
    gateway_response: Optional[StrictStr] = Field(default=None, alias="gatewayResponse")
    gateway_response_code: Optional[StrictStr] = Field(default=None, alias="gatewayResponseCode")
    gateway_state: Optional[StrictStr] = Field(default=None, alias="gatewayState")
    marked_for_submission_on: Optional[StrictStr] = Field(default=None, alias="markedForSubmissionOn")
    method_type: Optional[StrictStr] = Field(default=None, alias="methodType")
    payment_method_id: Optional[StrictStr] = Field(default=None, alias="paymentMethodId")
    payout_id: Optional[StrictStr] = Field(default=None, alias="payoutId")
    reason_code: Optional[StrictStr] = Field(default=None, alias="reasonCode")
    reference_id: Optional[StrictStr] = Field(default=None, alias="referenceID")
    refund_date: Optional[date] = Field(default=None, alias="refundDate")
    refund_number: Optional[StrictStr] = Field(default=None, alias="refundNumber")
    refund_transaction_time: Optional[StrictStr] = Field(default=None, alias="refundTransactionTime")
    second_refund_reference_id: Optional[StrictStr] = Field(default=None, alias="secondRefundReferenceId")
    settled_on: Optional[StrictStr] = Field(default=None, alias="settledOn")
    soft_descriptor: Optional[StrictStr] = Field(default=None, alias="softDescriptor")
    soft_descriptor_phone: Optional[StrictStr] = Field(default=None, alias="softDescriptorPhone")
    source_type: Optional[StrictStr] = Field(default=None, alias="sourceType")
    status: Optional[StrictStr] = None
    submitted_on: Optional[StrictStr] = Field(default=None, alias="submittedOn")
    transferred_to_accounting: Optional[StrictStr] = Field(default=None, alias="transferredToAccounting")
    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    associated_transaction_number: Optional[StrictStr] = Field(default=None, alias="associatedTransactionNumber")
    gateway: Optional[StrictStr] = None
    account: Optional[ExpandedAccount] = None
    payment_method: Optional[ExpandedPaymentMethod] = Field(default=None, alias="paymentMethod")
    refund_applications: Optional[List[ExpandedRefundApplication]] = Field(default=None, alias="refundApplications")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "paymentMethodSnapshotId", "accountingCode", "amount", "cancelledOn", "comment", "currency", "gatewayReconciliationReason", "gatewayReconciliationStatus", "gatewayResponse", "gatewayResponseCode", "gatewayState", "markedForSubmissionOn", "methodType", "paymentMethodId", "payoutId", "reasonCode", "referenceID", "refundDate", "refundNumber", "refundTransactionTime", "secondRefundReferenceId", "settledOn", "softDescriptor", "softDescriptorPhone", "sourceType", "status", "submittedOn", "transferredToAccounting", "type", "id", "createdById", "createdDate", "updatedById", "updatedDate", "associatedTransactionNumber", "gateway", "account", "paymentMethod", "refundApplications"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedRefund from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in refund_applications (list)
        _items = []
        if self.refund_applications:
            for _item_refund_applications in self.refund_applications:
                if _item_refund_applications:
                    _items.append(_item_refund_applications.to_dict())
            _dict['refundApplications'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedRefund from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "paymentMethodSnapshotId": obj.get("paymentMethodSnapshotId"),
            "accountingCode": obj.get("accountingCode"),
            "amount": obj.get("amount"),
            "cancelledOn": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "gatewayReconciliationReason": obj.get("gatewayReconciliationReason"),
            "gatewayReconciliationStatus": obj.get("gatewayReconciliationStatus"),
            "gatewayResponse": obj.get("gatewayResponse"),
            "gatewayResponseCode": obj.get("gatewayResponseCode"),
            "gatewayState": obj.get("gatewayState"),
            "markedForSubmissionOn": obj.get("markedForSubmissionOn"),
            "methodType": obj.get("methodType"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "payoutId": obj.get("payoutId"),
            "reasonCode": obj.get("reasonCode"),
            "referenceID": obj.get("referenceID"),
            "refundDate": obj.get("refundDate"),
            "refundNumber": obj.get("refundNumber"),
            "refundTransactionTime": obj.get("refundTransactionTime"),
            "secondRefundReferenceId": obj.get("secondRefundReferenceId"),
            "settledOn": obj.get("settledOn"),
            "softDescriptor": obj.get("softDescriptor"),
            "softDescriptorPhone": obj.get("softDescriptorPhone"),
            "sourceType": obj.get("sourceType"),
            "status": obj.get("status"),
            "submittedOn": obj.get("submittedOn"),
            "transferredToAccounting": obj.get("transferredToAccounting"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "associatedTransactionNumber": obj.get("associatedTransactionNumber"),
            "gateway": obj.get("gateway"),
            "account": ExpandedAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "paymentMethod": ExpandedPaymentMethod.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "refundApplications": [ExpandedRefundApplication.from_dict(_item) for _item in obj["refundApplications"]] if obj.get("refundApplications") is not None else None
        }
        return _obj
from zuora_sdk.models.expanded_account import ExpandedAccount
from zuora_sdk.models.expanded_payment_method import ExpandedPaymentMethod
from zuora_sdk.models.expanded_refund_application import ExpandedRefundApplication
# TODO: Rewrite to not use raise_errors
ExpandedRefund.model_rebuild(raise_errors=False)


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
