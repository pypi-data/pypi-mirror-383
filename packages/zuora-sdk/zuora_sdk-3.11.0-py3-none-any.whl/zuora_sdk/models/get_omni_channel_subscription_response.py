# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.failed_reason import FailedReason
from typing import Optional, Set
from typing_extensions import Self

class GetOmniChannelSubscriptionResponse(BaseModel):
    """
    GetOmniChannelSubscriptionResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=True, description="Indicates whether the call succeeded. ")
    id: Optional[StrictStr] = Field(default=None, description="The system generated Id in Billing, the subscriptionId. ")
    subscription_number: Optional[StrictStr] = Field(default=None, description="The system generated subscription number. ", alias="subscriptionNumber")
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account associated with this subscription. ", alias="accountId")
    external_subscription_id: Optional[StrictStr] = Field(default=None, description="The original transaction id of the notification. ", alias="externalSubscriptionId")
    external_transaction_reason: Optional[StrictStr] = Field(default=None, description="The latest transaction reason. ", alias="externalTransactionReason")
    external_source_system: Optional[StrictStr] = Field(default=None, description="For example, Apple, Google, Roku, Amazon. ", alias="externalSourceSystem")
    external_state: Optional[StrictStr] = Field(default=None, description="The original status from client, such as active, canceled, expired, pastDue. ", alias="externalState")
    state: Optional[StrictStr] = Field(default=None, description="The common external subscription state. ")
    external_product_id: Optional[StrictStr] = Field(default=None, description="The product id in the external system. ", alias="externalProductId")
    external_replace_by_product_id: Optional[StrictStr] = Field(default=None, description="The productId is going to replace the existing productId. ", alias="externalReplaceByProductId")
    external_in_app_ownership_type: Optional[StrictStr] = Field(default=None, description="Such as purchased, family_shared. ", alias="externalInAppOwnershipType")
    external_quantity: Optional[StrictInt] = Field(default=None, description="The quantity of the product, must be >= 0. Default 1 if not set. ", alias="externalQuantity")
    currency: Optional[StrictStr] = Field(default=None, description="The currency code of the transaction. If not specified, get value from the Account. ")
    auto_renew: Optional[StrictBool] = Field(default=None, description="If `true`, the subscription automatically renews at the end of the term. Default is `false`. ", alias="autoRenew")
    original_purchase_date: Optional[StrictStr] = Field(default=None, description="The value of externalPurchaseDate when this external subscription firstly created.  UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="originalPurchaseDate")
    external_purchase_date: Optional[StrictStr] = Field(default=None, description="The App Store charged the userâ€™s account for a purchase, restored product, subscription,  or subscription renewal after a lapse. UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="externalPurchaseDate")
    external_activation_date: Optional[StrictStr] = Field(default=None, description="When the external subscription was activated on the external platform.  UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="externalActivationDate")
    external_expiration_date: Optional[StrictStr] = Field(default=None, description="The expiresDate is a static value that applies for each transaction. UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="externalExpirationDate")
    external_application_id: Optional[StrictStr] = Field(default=None, description="The external application id. ", alias="externalApplicationId")
    external_bundle_id: Optional[StrictStr] = Field(default=None, description="The external bundler id. ", alias="externalBundleId")
    external_subscriber_id: Optional[StrictStr] = Field(default=None, description="The external subscriber id. ", alias="externalSubscriberId")
    external_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price in external system. ", alias="externalPrice")
    external_purchase_type: Optional[StrictStr] = Field(default=None, description="The external purchase type.", alias="externalPurchaseType")
    external_last_renewal_date: Optional[StrictStr] = Field(default=None, description="The lastRenewalDate is a static value that applies for each transaction. UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="externalLastRenewalDate")
    external_next_renewal_date: Optional[StrictStr] = Field(default=None, description="The nextRenewalDate is a static value that applies for each transaction.  UTC time, `yyyy-mm-dd hh:mm:ss`. ", alias="externalNextRenewalDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "id", "subscriptionNumber", "accountId", "externalSubscriptionId", "externalTransactionReason", "externalSourceSystem", "externalState", "state", "externalProductId", "externalReplaceByProductId", "externalInAppOwnershipType", "externalQuantity", "currency", "autoRenew", "originalPurchaseDate", "externalPurchaseDate", "externalActivationDate", "externalExpirationDate", "externalApplicationId", "externalBundleId", "externalSubscriberId", "externalPrice", "externalPurchaseType", "externalLastRenewalDate", "externalNextRenewalDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOmniChannelSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOmniChannelSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success") if obj.get("success") is not None else True,
            "id": obj.get("id"),
            "subscriptionNumber": obj.get("subscriptionNumber"),
            "accountId": obj.get("accountId"),
            "externalSubscriptionId": obj.get("externalSubscriptionId"),
            "externalTransactionReason": obj.get("externalTransactionReason"),
            "externalSourceSystem": obj.get("externalSourceSystem"),
            "externalState": obj.get("externalState"),
            "state": obj.get("state"),
            "externalProductId": obj.get("externalProductId"),
            "externalReplaceByProductId": obj.get("externalReplaceByProductId"),
            "externalInAppOwnershipType": obj.get("externalInAppOwnershipType"),
            "externalQuantity": obj.get("externalQuantity"),
            "currency": obj.get("currency"),
            "autoRenew": obj.get("autoRenew"),
            "originalPurchaseDate": obj.get("originalPurchaseDate"),
            "externalPurchaseDate": obj.get("externalPurchaseDate"),
            "externalActivationDate": obj.get("externalActivationDate"),
            "externalExpirationDate": obj.get("externalExpirationDate"),
            "externalApplicationId": obj.get("externalApplicationId"),
            "externalBundleId": obj.get("externalBundleId"),
            "externalSubscriberId": obj.get("externalSubscriberId"),
            "externalPrice": obj.get("externalPrice"),
            "externalPurchaseType": obj.get("externalPurchaseType"),
            "externalLastRenewalDate": obj.get("externalLastRenewalDate"),
            "externalNextRenewalDate": obj.get("externalNextRenewalDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
