# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.account_object_ns_fields_customer_type_ns import AccountObjectNSFieldsCustomerTypeNS
from zuora_sdk.models.account_object_ns_fields_syncto_net_suite_ns import AccountObjectNSFieldsSynctoNetSuiteNS
from zuora_sdk.models.account_status import AccountStatus
from zuora_sdk.models.account_summary_default_payment_method import AccountSummaryDefaultPaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class AccountSummaryBasicInfo(BaseModel):
    """
    Container for basic information about the account. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    class__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Class__NS")
    customer_type__ns: Optional[StrictStr] = Field(default=None, alias="CustomerType__NS")
    department__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Department__NS")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationStatus__NS")
    location__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Location__NS")
    subsidiary__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="Subsidiary__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="SyncDate__NS")
    syncto_net_suite__ns: Optional[StrictStr] = Field(default=None, alias="SynctoNetSuite__NS")
    account_number: Optional[StrictStr] = Field(default=None, description="Account number. ", alias="accountNumber")
    additional_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="A list of additional email addresses to receive email notifications. ", alias="additionalEmailAddresses")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether future payments are automatically collected when they are due during a payment run.", alias="autoPay")
    balance: Optional[StrictStr] = Field(default=None, description="Current outstanding balance. ")
    batch: Optional[StrictStr] = Field(default=None, description="The alias name given to a batch. A string of 50 characters or less. ")
    bill_cycle_day: Optional[StrictInt] = Field(default=None, description="Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.", alias="billCycleDay")
    currency: Optional[StrictStr] = Field(default=None, description="A currency as defined in Billing Settings in the Zuora UI. ")
    default_payment_method: Optional[AccountSummaryDefaultPaymentMethod] = Field(default=None, alias="defaultPaymentMethod")
    id: Optional[StrictStr] = Field(default=None, description="Account ID. ")
    invoice_delivery_prefs_email: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive invoices through email.  ", alias="invoiceDeliveryPrefsEmail")
    invoice_delivery_prefs_print: Optional[StrictBool] = Field(default=None, description="Whether the customer wants to receive printed invoices, such as through postal mail.", alias="invoiceDeliveryPrefsPrint")
    last_invoice_date: Optional[date] = Field(default=None, description="Date of the most recent invoice for the account; null if no invoice has ever been generated.", alias="lastInvoiceDate")
    last_metrics_update: Optional[StrictStr] = Field(default=None, description="The date and time when account metrics are last updated, if the account is a partner account.   **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   - If you have the Reseller Account feature enabled, and set the `partnerAccount` field to `false` for an account, the value of the `lastMetricsUpdate` field is automatically set to `null` in the response.    - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.   ", alias="lastMetricsUpdate")
    last_payment_amount: Optional[StrictStr] = Field(default=None, description="Amount of the most recent payment collected for the account; null if no payment has ever been collected.", alias="lastPaymentAmount")
    last_payment_date: Optional[date] = Field(default=None, description="Date of the most recent payment collected for the account. Null if no payment has ever been collected.", alias="lastPaymentDate")
    name: Optional[StrictStr] = Field(default=None, description="Account name. ")
    partner_account: Optional[StrictBool] = Field(default=None, description="Whether the customer account is a partner, distributor, or reseller.     **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.", alias="partnerAccount")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="The purchase order number provided by your customer for services, products, or both purchased.", alias="purchaseOrderNumber")
    status: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    organization_label: Optional[StrictStr] = Field(default=None, description="organization label. ", alias="organizationLabel")
    payment_method_cascading_consent: Optional[StrictBool] = Field(default=None, description="payment method cascading consent ", alias="paymentMethodCascadingConsent")
    customer_service_rep_name: Optional[StrictStr] = Field(default=None, description="customer ServiceRep Name. ", alias="customerServiceRepName")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["Class__NS", "CustomerType__NS", "Department__NS", "IntegrationId__NS", "IntegrationStatus__NS", "Location__NS", "Subsidiary__NS", "SyncDate__NS", "SynctoNetSuite__NS", "accountNumber", "additionalEmailAddresses", "autoPay", "balance", "batch", "billCycleDay", "currency", "defaultPaymentMethod", "id", "invoiceDeliveryPrefsEmail", "invoiceDeliveryPrefsPrint", "lastInvoiceDate", "lastMetricsUpdate", "lastPaymentAmount", "lastPaymentDate", "name", "partnerAccount", "purchaseOrderNumber", "status", "tags", "organizationLabel", "paymentMethodCascadingConsent", "customerServiceRepName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSummaryBasicInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_payment_method
        if self.default_payment_method:
            _dict['defaultPaymentMethod'] = self.default_payment_method.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSummaryBasicInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "Class__NS": obj.get("Class__NS"),
            "CustomerType__NS": obj.get("CustomerType__NS"),
            "Department__NS": obj.get("Department__NS"),
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "Location__NS": obj.get("Location__NS"),
            "Subsidiary__NS": obj.get("Subsidiary__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "SynctoNetSuite__NS": obj.get("SynctoNetSuite__NS"),
            "accountNumber": obj.get("accountNumber"),
            "additionalEmailAddresses": obj.get("additionalEmailAddresses"),
            "autoPay": obj.get("autoPay"),
            "balance": obj.get("balance"),
            "batch": obj.get("batch"),
            "billCycleDay": obj.get("billCycleDay"),
            "currency": obj.get("currency"),
            "defaultPaymentMethod": AccountSummaryDefaultPaymentMethod.from_dict(obj["defaultPaymentMethod"]) if obj.get("defaultPaymentMethod") is not None else None,
            "id": obj.get("id"),
            "invoiceDeliveryPrefsEmail": obj.get("invoiceDeliveryPrefsEmail"),
            "invoiceDeliveryPrefsPrint": obj.get("invoiceDeliveryPrefsPrint"),
            "lastInvoiceDate": obj.get("lastInvoiceDate"),
            "lastMetricsUpdate": obj.get("lastMetricsUpdate"),
            "lastPaymentAmount": obj.get("lastPaymentAmount"),
            "lastPaymentDate": obj.get("lastPaymentDate"),
            "name": obj.get("name"),
            "partnerAccount": obj.get("partnerAccount"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "organizationLabel": obj.get("organizationLabel"),
            "paymentMethodCascadingConsent": obj.get("paymentMethodCascadingConsent"),
            "customerServiceRepName": obj.get("customerServiceRepName")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
