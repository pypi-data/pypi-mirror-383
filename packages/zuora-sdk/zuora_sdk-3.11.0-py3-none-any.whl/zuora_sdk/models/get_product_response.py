# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.product_category import ProductCategory
from zuora_sdk.models.product_feature import ProductFeature
from zuora_sdk.models.product_object_ns_fields_item_type_ns import ProductObjectNSFieldsItemTypeNS
from typing import Optional, Set
from typing_extensions import Self

class GetProductResponse(BaseModel):
    """
    GetProductResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = Field(default=None, description="Product ID. ")
    sku: Optional[StrictStr] = Field(default=None, description="Unique product SKU, up to 50 characters. ")
    product_number: Optional[StrictStr] = Field(default=None, description="The natural key of the product. ", alias="productNumber")
    name: Optional[StrictStr] = Field(default=None, description="Product name, up to 100 characters. ")
    category: Optional[ProductCategory] = None
    description: Optional[StrictStr] = Field(default=None, description="Optional product description. ")
    effective_start_date: Optional[date] = Field(default=None, description="The date when the product becomes available and can be subscribed to, as `yyyy-mm-dd`.", alias="effectiveStartDate")
    effective_end_date: Optional[date] = Field(default=None, description="The date when the product expires and cannot be subscribed to anymore, as `yyyy-mm-dd`.", alias="effectiveEndDate")
    product_rate_plans: Optional[StrictStr] = Field(default=None, description="URL to retrieve information about all product rate plans of a specific product. For example, `/v1/rateplan/40289f466463d683016463ef8b7301a0/productRatePlan`. If you want to view the product rate plan details, call [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans) #FIXME with the returned URL.   This field is in Zuora REST API version control. If you set the `zuora-version` request header to `230.0` or later, the value of this field is a URL. Zuora recommends that you use the latest behavior to retrieve product information.   If you do not set the `zuora-version` request header or you set this header to `229.0` or earlier, the value of this field is an array of product rate plan details. For more information about the array, see the response body of [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans). **Note**: The array contains a maximum of 300 product rate plans. Additionally, across all product rate plans, at most 300 product rate plan charges are returned.", alias="productRatePlans")
    product_features: Optional[List[ProductFeature]] = Field(default=None, description="Container for one or more product features. Only available when the following settings are enabled:  - The Entitlements feature in your tenant  - The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing", alias="productFeatures")
    tags: Optional[StrictStr] = None
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="IntegrationStatus__NS")
    item_type__ns: Optional[StrictStr] = Field(default=None, alias="ItemType__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265). ", alias="SyncDate__NS")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "sku", "productNumber", "name", "category", "description", "effectiveStartDate", "effectiveEndDate", "productRatePlans", "productFeatures", "tags", "IntegrationId__NS", "IntegrationStatus__NS", "ItemType__NS", "SyncDate__NS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProductResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_features (list)
        _items = []
        if self.product_features:
            for _item_product_features in self.product_features:
                if _item_product_features:
                    _items.append(_item_product_features.to_dict())
            _dict['productFeatures'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProductResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "sku": obj.get("sku"),
            "productNumber": obj.get("productNumber"),
            "name": obj.get("name"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "effectiveStartDate": obj.get("effectiveStartDate"),
            "effectiveEndDate": obj.get("effectiveEndDate"),
            "productRatePlans": obj.get("productRatePlans"),
            "productFeatures": [ProductFeature.from_dict(_item) for _item in obj["productFeatures"]] if obj.get("productFeatures") is not None else None,
            "tags": obj.get("tags"),
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "ItemType__NS": obj.get("ItemType__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
