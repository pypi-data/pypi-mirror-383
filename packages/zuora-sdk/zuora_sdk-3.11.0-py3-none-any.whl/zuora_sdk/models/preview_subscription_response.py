# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from zuora_sdk.models.charge_metrics import ChargeMetrics
from zuora_sdk.models.preview_subscription_invoice import PreviewSubscriptionInvoice
from zuora_sdk.models.preview_subscription_invoice_item import PreviewSubscriptionInvoiceItem
from zuora_sdk.models.subscription_credit_memo import SubscriptionCreditMemo
from typing import Optional, Set
from typing_extensions import Self

class PreviewSubscriptionResponse(BaseModel):
    """
    PreviewSubscriptionResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Invoice amount. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ")
    amount_without_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Invoice amount minus tax. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ", alias="amountWithoutTax")
    charge_metrics: Optional[List[ChargeMetrics]] = Field(default=None, alias="chargeMetrics")
    contracted_mrr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monthly recurring revenue of the subscription. ", alias="contractedMrr")
    credit_memo: Optional[SubscriptionCreditMemo] = Field(default=None, alias="creditMemo")
    document_date: Optional[date] = Field(default=None, description="The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.   - If this field is specified, the specified date is used as the billing document date.   - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.", alias="documentDate")
    invoice: Optional[PreviewSubscriptionInvoice] = None
    invoice_items: Optional[List[PreviewSubscriptionInvoiceItem]] = Field(default=None, description="Container for invoice items. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ", alias="invoiceItems")
    invoice_target_date: Optional[date] = Field(default=None, description="Date through which charges are calculated on the invoice, as yyyy-mm-dd.   **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="invoiceTargetDate")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully. ")
    target_date: Optional[date] = Field(default=None, description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="targetDate")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tax amount on the invoice. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0 ", alias="taxAmount")
    total_contracted_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total contracted value of the subscription. ", alias="totalContractedValue")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["amount", "amountWithoutTax", "chargeMetrics", "contractedMrr", "creditMemo", "documentDate", "invoice", "invoiceItems", "invoiceTargetDate", "success", "targetDate", "taxAmount", "totalContractedValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreviewSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_metrics (list)
        _items = []
        if self.charge_metrics:
            for _item_charge_metrics in self.charge_metrics:
                if _item_charge_metrics:
                    _items.append(_item_charge_metrics.to_dict())
            _dict['chargeMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of credit_memo
        if self.credit_memo:
            _dict['creditMemo'] = self.credit_memo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_items (list)
        _items = []
        if self.invoice_items:
            for _item_invoice_items in self.invoice_items:
                if _item_invoice_items:
                    _items.append(_item_invoice_items.to_dict())
            _dict['invoiceItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreviewSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "chargeMetrics": [ChargeMetrics.from_dict(_item) for _item in obj["chargeMetrics"]] if obj.get("chargeMetrics") is not None else None,
            "contractedMrr": obj.get("contractedMrr"),
            "creditMemo": SubscriptionCreditMemo.from_dict(obj["creditMemo"]) if obj.get("creditMemo") is not None else None,
            "documentDate": obj.get("documentDate"),
            "invoice": PreviewSubscriptionInvoice.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "invoiceItems": [PreviewSubscriptionInvoiceItem.from_dict(_item) for _item in obj["invoiceItems"]] if obj.get("invoiceItems") is not None else None,
            "invoiceTargetDate": obj.get("invoiceTargetDate"),
            "success": obj.get("success"),
            "targetDate": obj.get("targetDate"),
            "taxAmount": obj.get("taxAmount"),
            "totalContractedValue": obj.get("totalContractedValue")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
