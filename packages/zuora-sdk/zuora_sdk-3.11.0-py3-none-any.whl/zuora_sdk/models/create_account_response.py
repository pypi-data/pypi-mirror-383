# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.failed_reason import FailedReason
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountResponse(BaseModel):
    """
    CreateAccountResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully. ")
    account_id: Optional[StrictStr] = Field(default=None, description="Auto-generated account ID. ", alias="accountId")
    account_number: Optional[StrictStr] = Field(default=None, description="Account number. ", alias="accountNumber")
    bill_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact. ", alias="billToContactId")
    contracted_mrr: Optional[StrictStr] = Field(default=None, description="Contracted monthly recurring revenue of the subscription. ", alias="contractedMrr")
    credit_memo_id: Optional[StrictStr] = Field(default=None, description="The credit memo ID, if a credit memo is generated during the subscription process.   **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.", alias="creditMemoId")
    invoice_id: Optional[StrictStr] = Field(default=None, description="ID of the invoice generated at account creation, if applicable. ", alias="invoiceId")
    paid_amount: Optional[StrictStr] = Field(default=None, description="Amount collected on the invoice generated at account creation, if applicable.", alias="paidAmount")
    payment_id: Optional[StrictStr] = Field(default=None, description="ID of the payment collected on the invoice generated at account creation, if applicable.", alias="paymentId")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="ID of the payment method that was set up at account creation, which automatically becomes the default payment method for this account.", alias="paymentMethodId")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact. ", alias="shipToContactId")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact. ", alias="soldToContactId")
    subscription_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription that was set up at account creation, if applicable. ", alias="subscriptionId")
    subscription_number: Optional[StrictStr] = Field(default=None, description="Number of the subscription that was set up at account creation, if applicable.", alias="subscriptionNumber")
    total_contracted_value: Optional[StrictStr] = Field(default=None, description="Total contracted value of the subscription. ", alias="totalContractedValue")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "accountId", "accountNumber", "billToContactId", "contractedMrr", "creditMemoId", "invoiceId", "paidAmount", "paymentId", "paymentMethodId", "shipToContactId", "soldToContactId", "subscriptionId", "subscriptionNumber", "totalContractedValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "accountId": obj.get("accountId"),
            "accountNumber": obj.get("accountNumber"),
            "billToContactId": obj.get("billToContactId"),
            "contractedMrr": obj.get("contractedMrr"),
            "creditMemoId": obj.get("creditMemoId"),
            "invoiceId": obj.get("invoiceId"),
            "paidAmount": obj.get("paidAmount"),
            "paymentId": obj.get("paymentId"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "shipToContactId": obj.get("shipToContactId"),
            "soldToContactId": obj.get("soldToContactId"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionNumber": obj.get("subscriptionNumber"),
            "totalContractedValue": obj.get("totalContractedValue")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
