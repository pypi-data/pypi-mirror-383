# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProxyGetImport(BaseModel):
    """
    ProxyGetImport
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    created_by_id: Optional[StrictStr] = Field(default=None, description=" The user ID of the person who created the import.  **Character limit**: 32  **Values**: automatically generated ", alias="CreatedById")
    created_date: Optional[datetime] = Field(default=None, description=" The date when the import was created.  **Character limit**: 29  **Values**: automatically generated ", alias="CreatedDate")
    id: Optional[StrictStr] = Field(default=None, description="Object identifier.", alias="Id")
    import_type: Optional[StrictStr] = Field(default=None, description=" The type of item imported.  **Character limit**: 7  **Values**: Usage ", alias="ImportType")
    imported_count: Optional[StrictInt] = Field(default=None, description="The number of records successfully imported.  **Values**: automatically generated ", alias="ImportedCount")
    md5: Optional[StrictStr] = Field(default=None, description=" A check to validate the import file's integrity.  **Character limit:** 32  **System-generated:** no  **Values**: a string of 32 characters or fewer ", alias="Md5")
    name: Optional[StrictStr] = Field(default=None, description=" A descriptive name for the import.  **Character limit:** 100  **Values:** one of the following:  - a string of 100 characters or fewer - if NULL default is: `import <ImportType_value>` ", alias="Name")
    original_resource_url: Optional[StrictStr] = Field(default=None, description=" The URL for your import file, which contains your records for upload. When you upload the file, Zuora assigns it to this address.  **Values:** automatic dynamically-generated URL ", alias="OriginalResourceUrl")
    result_resource_url: Optional[StrictStr] = Field(default=None, description=" The URL for the import result file, which is a zipped CSV file.  **Values**: automatic dynamically-generated URL ", alias="ResultResourceUrl")
    status: Optional[StrictStr] = Field(default=None, description="The status of the import process.  **Values**: automatically generated using one of the following values:  - Pending - Processing - Completed - Failed ", alias="Status")
    status_reason: Optional[StrictStr] = Field(default=None, description=" The reason for the system-generated status. Use this information if the import fails.  **Character limit**: 2000  **Values**: automatically generated error message ", alias="StatusReason")
    total_count: Optional[StrictInt] = Field(default=None, description=" The number of records in the import file.  **Character limit**:  **Values**: automatically generated ", alias="TotalCount")
    updated_by_id: Optional[StrictStr] = Field(default=None, description=" The ID of the user who last updated the import.  **Character limit**: 32  **Values**: automatically generated ", alias="UpdatedById")
    updated_date: Optional[datetime] = Field(default=None, description=" The date when the import was last updated. **Character limit**: 29 **Values**: automatically generated ", alias="UpdatedDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["CreatedById", "CreatedDate", "Id", "ImportType", "ImportedCount", "Md5", "Name", "OriginalResourceUrl", "ResultResourceUrl", "Status", "StatusReason", "TotalCount", "UpdatedById", "UpdatedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProxyGetImport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProxyGetImport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "CreatedById": obj.get("CreatedById"),
            "CreatedDate": obj.get("CreatedDate"),
            "Id": obj.get("Id"),
            "ImportType": obj.get("ImportType"),
            "ImportedCount": obj.get("ImportedCount"),
            "Md5": obj.get("Md5"),
            "Name": obj.get("Name"),
            "OriginalResourceUrl": obj.get("OriginalResourceUrl"),
            "ResultResourceUrl": obj.get("ResultResourceUrl"),
            "Status": obj.get("Status"),
            "StatusReason": obj.get("StatusReason"),
            "TotalCount": obj.get("TotalCount"),
            "UpdatedById": obj.get("UpdatedById"),
            "UpdatedDate": obj.get("UpdatedDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
