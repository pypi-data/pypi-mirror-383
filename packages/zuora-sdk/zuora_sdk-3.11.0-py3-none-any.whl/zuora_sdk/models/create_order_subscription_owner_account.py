# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_account_contact import CreateAccountContact
from zuora_sdk.models.create_account_payment_method import CreateAccountPaymentMethod
from zuora_sdk.models.credit_card import CreditCard
from zuora_sdk.models.tax_info import TaxInfo
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderSubscriptionOwnerAccount(BaseModel):
    """
    Information about a new account that will own the subscription. Only available if you have enabled the Owner Transfer feature.   **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   If you do not set this field or the `subscriptionOwnerAccountNumber` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `subscriptionOwnerAccountNumber` field.
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_number: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="Account number. For example, A00000001. ", alias="accountNumber")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Specifies whether future payments are automatically billed when they are due.", alias="autoPay")
    batch: Optional[StrictStr] = Field(default=None, description="Name of the billing batch that the account belongs to. For example, Batch1.")
    bill_cycle_day: Annotated[int, Field(le=31, strict=True, ge=0)] = Field(description="Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".", alias="billCycleDay")
    bill_to_contact: CreateAccountContact = Field(alias="billToContact")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.", alias="communicationProfileId")
    credit_card: Optional[CreditCard] = Field(default=None, alias="creditCard")
    crm_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="External identifier of the account in a CRM system. ", alias="crmId")
    currency: StrictStr = Field(description="ISO 3-letter currency code (uppercase). For example, USD. ")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of an Account object. ", alias="customFields")
    hpm_credit_card_payment_method_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.   If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field,  but not both.   For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.", alias="hpmCreditCardPaymentMethodId")
    invoice_delivery_prefs_email: Optional[StrictBool] = Field(default=None, description="Specifies whether to turn on the invoice delivery method 'Email' for the new account.   Values are:    * `true` (default). Turn on the invoice delivery method 'Email' for the new account.  * `false`. Turn off the invoice delivery method 'Email' for the new account.         ", alias="invoiceDeliveryPrefsEmail")
    invoice_delivery_prefs_print: Optional[StrictBool] = Field(default=None, description="Specifies whether to turn on the invoice delivery method 'Print' for the new account.  Values are:    * `true`. Turn on the invoice delivery method 'Print' for the new account.  * `false` (default). Turn off the invoice delivery method 'Print' for the new account.", alias="invoiceDeliveryPrefsPrint")
    invoice_template_id: Optional[StrictStr] = Field(default=None, description="Internal identifier of the invoice template that Zuora uses when generating invoices for the account.", alias="invoiceTemplateId")
    name: Annotated[str, Field(strict=True, max_length=70)] = Field(description="Account name. ")
    notes: Optional[Annotated[str, Field(strict=True, max_length=65535)]] = Field(default=None, description="Notes about the account. These notes are only visible to Zuora users. ")
    parent_id: Optional[StrictStr] = Field(default=None, description="Identifier of the parent customer account for this Account object. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.", alias="parentId")
    payment_gateway: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.", alias="paymentGateway")
    payment_method: Optional[CreateAccountPaymentMethod] = Field(default=None, alias="paymentMethod")
    payment_term: Optional[StrictStr] = Field(default=None, description="Name of the payment term associated with the account. For example, \"Net 30\". The payment term determines the due dates of invoices.", alias="paymentTerm")
    sold_to_contact: Optional[CreateAccountContact] = Field(default=None, alias="soldToContact")
    tax_info: Optional[TaxInfo] = Field(default=None, alias="taxInfo")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountNumber", "autoPay", "batch", "billCycleDay", "billToContact", "communicationProfileId", "creditCard", "crmId", "currency", "customFields", "hpmCreditCardPaymentMethodId", "invoiceDeliveryPrefsEmail", "invoiceDeliveryPrefsPrint", "invoiceTemplateId", "name", "notes", "parentId", "paymentGateway", "paymentMethod", "paymentTerm", "soldToContact", "taxInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderSubscriptionOwnerAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_card
        if self.credit_card:
            _dict['creditCard'] = self.credit_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderSubscriptionOwnerAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountNumber": obj.get("accountNumber"),
            "autoPay": obj.get("autoPay"),
            "batch": obj.get("batch"),
            "billCycleDay": obj.get("billCycleDay"),
            "billToContact": CreateAccountContact.from_dict(obj["billToContact"]) if obj.get("billToContact") is not None else None,
            "communicationProfileId": obj.get("communicationProfileId"),
            "creditCard": CreditCard.from_dict(obj["creditCard"]) if obj.get("creditCard") is not None else None,
            "crmId": obj.get("crmId"),
            "currency": obj.get("currency"),
            "customFields": obj.get("customFields"),
            "hpmCreditCardPaymentMethodId": obj.get("hpmCreditCardPaymentMethodId"),
            "invoiceDeliveryPrefsEmail": obj.get("invoiceDeliveryPrefsEmail"),
            "invoiceDeliveryPrefsPrint": obj.get("invoiceDeliveryPrefsPrint"),
            "invoiceTemplateId": obj.get("invoiceTemplateId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "parentId": obj.get("parentId"),
            "paymentGateway": obj.get("paymentGateway"),
            "paymentMethod": CreateAccountPaymentMethod.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "paymentTerm": obj.get("paymentTerm"),
            "soldToContact": CreateAccountContact.from_dict(obj["soldToContact"]) if obj.get("soldToContact") is not None else None,
            "taxInfo": TaxInfo.from_dict(obj["taxInfo"]) if obj.get("taxInfo") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
