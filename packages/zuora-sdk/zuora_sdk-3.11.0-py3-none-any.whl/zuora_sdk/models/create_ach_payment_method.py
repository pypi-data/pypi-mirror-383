# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.gateway_options import GatewayOptions
from zuora_sdk.models.payment_method_ach_bank_account_type import PaymentMethodACHBankAccountType
from zuora_sdk.models.payment_method_mandate_info_mandate_status import PaymentMethodMandateInfoMandateStatus
from zuora_sdk.models.payment_method_request_mandate_info import PaymentMethodRequestMandateInfo
from zuora_sdk.models.payment_method_request_processing_options import PaymentMethodRequestProcessingOptions
from zuora_sdk.models.payment_method_request_tokens import PaymentMethodRequestTokens
from typing import Optional, Set
from typing_extensions import Self

class CreateACHPaymentMethod(BaseModel):
    """
    CreateACHPaymentMethod
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_key: Optional[StrictStr] = Field(default=None, description="Internal ID of the customer account that will own the payment method. To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted. ", alias="accountKey")
    payment_method_number: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="To avoid the repetitive creation of identical payment methods, you can associate a unique identifier with the payment method.  You can specify a string within the allowed limits, or if none is provided, the system will automatically generate one for the payment method. ", alias="paymentMethodNumber")
    payment_gateway_number: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The natural key for the payment gateway.", alias="paymentGatewayNumber")
    screening_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For [Chase Paymentech Orbital Gateway](https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Chase_Orbital_Payment_Gateway) integrations,  if the Safetech Fraud service is enabled, use this field to pass in the amount used for fraud screening for Credit Card validation transactions.  Two-decimal amount is supported.  If the `screeningAmount` field is not specified, the authorization amount is used for fraud screening. ", alias="screeningAmount")
    auth_gateway: Optional[StrictStr] = Field(default=None, description="Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set. ", alias="authGateway")
    gateway_options: Optional[GatewayOptions] = Field(default=None, alias="gatewayOptions")
    ip_address: Optional[Annotated[str, Field(strict=True, max_length=45)]] = Field(default=None, description="The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways. If the IP address length is beyond 45 characters, a validation error occurs. For validating SEPA payment methods on Stripe v2, this field is required. ", alias="ipAddress")
    make_default: Optional[StrictBool] = Field(default=False, description="Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.  When you set this field to `true`, make sure the payment method is supported by the default payment gateway. ", alias="makeDefault")
    processing_options: Optional[PaymentMethodRequestProcessingOptions] = Field(default=None, alias="processingOptions")
    skip_validation: Optional[StrictBool] = Field(default=False, description="Specify whether to skip the validation of the information through the payment gateway. For example, when migrating your payment methods, you can set this field to `true` to skip the validation. ", alias="skipValidation")
    type: Annotated[str, Field(strict=True)] = Field(description="Type of the payment method. Possible values include:    * `CreditCard` - Credit card payment method.   * `CreditCardReferenceTransaction` - Credit Card Reference Transaction. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Supported_Payment_Methods) for payment gateways that support this type of payment method.   * `ACH` - ACH payment method.   * `SEPA` - Single Euro Payments Area.   * `Betalingsservice` - Direct Debit DK.   * `Autogiro` - Direct Debit SE.   * `Bacs` - Direct Debit UK.   * `Becs` - Direct Entry AU.   * `Becsnz` - Direct Debit NZ.   * `PAD` - Pre-Authorized Debit.   * `PayPalCP` - PayPal Commerce Platform payment method. Use this type if you are using a [PayPal Commerce Platform Gateway](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Commerce_Platform_Gateway) instance.   * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance.   * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance.   * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance.   * `AdyenApplePay` - Apple Pay on Adyen Integration v2.0. See [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay) for details.   * `AdyenGooglePay` - Google Pay on Adyen Integration v2.0. See [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay) for details.   * `GooglePay` - Google Pay on Chase Paymentech Orbital gateway integration. See [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase) for details.   * You can also specify a custom payment method type. See [Set up custom payment gateways and payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) for details.    Note that Zuora is continuously adding new payment method types. ")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code of the payment method.", alias="currencyCode")
    tokenize: Optional[StrictBool] = Field(default=False, description="Specifies whether to tokenize the payment method.")
    tokens: Optional[PaymentMethodRequestTokens] = None
    mandate_info: Optional[PaymentMethodRequestMandateInfo] = Field(default=None, alias="mandateInfo")
    mandate_id: Optional[Annotated[str, Field(strict=True, max_length=36)]] = Field(default=None, description="The mandate ID.   When creating an ACH payment method, if you need to pass in tokenized information, use the `mandateId` instead of `tokenId` field.", alias="mandateId")
    mandate_received_status: Optional[PaymentMethodMandateInfoMandateStatus] = Field(default=None, alias="mandateReceivedStatus")
    existing_mandate_status: Optional[PaymentMethodMandateInfoMandateStatus] = Field(default=None, alias="existingMandateStatus")
    mandate_creation_date: Optional[date] = Field(default=None, description="The date on which the mandate was created. ", alias="mandateCreationDate")
    mandate_update_date: Optional[date] = Field(default=None, description="The date on which the mandate was updated. ", alias="mandateUpdateDate")
    address_line1: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="First address line, 255 characters or less. ", alias="addressLine1")
    address_line2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Second address line, 255 characters or less. ", alias="addressLine2")
    email: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="Card holder's email address, 80 characters or less. ")
    bank_aba_code: StrictStr = Field(description="The nine-digit routing number or ABA number used by banks. ", alias="bankABACode")
    bank_account_name: StrictStr = Field(description="The name of the account holder, which can be either a person or a company.   For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields. ", alias="bankAccountName")
    bank_account_number: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified. ", alias="bankAccountNumber")
    bank_account_mask_number: Optional[StrictStr] = Field(default=None, description="The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens. ", alias="bankAccountMaskNumber")
    bank_account_type: StrictStr = Field(alias="bankAccountType")
    bank_name: StrictStr = Field(description="The name of the bank where the ACH payment account is held.   When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value. ", alias="bankName")
    city: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="City, 40 characters or less. It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    country: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Country, must be a valid country name or abbreviation.  See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names and abbreviations.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing. ")
    phone: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="Phone number, 40 characters or less. ")
    state: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="State, must be a valid state name or 2-character abbreviation.  See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations. ")
    zip_code: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="Zip code, 20 characters or less. ", alias="zipCode")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountKey", "paymentMethodNumber", "paymentGatewayNumber", "screeningAmount", "authGateway", "gatewayOptions", "ipAddress", "makeDefault", "processingOptions", "skipValidation", "type", "currencyCode", "tokenize", "tokens", "mandateInfo", "mandateId", "mandateReceivedStatus", "existingMandateStatus", "mandateCreationDate", "mandateUpdateDate", "addressLine1", "addressLine2", "email", "bankABACode", "bankAccountName", "bankAccountNumber", "bankAccountMaskNumber", "bankAccountType", "bankName", "city", "country", "phone", "state", "zipCode"]

    @field_validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateACHPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_options
        if self.processing_options:
            _dict['processingOptions'] = self.processing_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokens
        if self.tokens:
            _dict['tokens'] = self.tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandate_info
        if self.mandate_info:
            _dict['mandateInfo'] = self.mandate_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateACHPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountKey": obj.get("accountKey"),
            "paymentMethodNumber": obj.get("paymentMethodNumber"),
            "paymentGatewayNumber": obj.get("paymentGatewayNumber"),
            "screeningAmount": obj.get("screeningAmount"),
            "authGateway": obj.get("authGateway"),
            "gatewayOptions": GatewayOptions.from_dict(obj["gatewayOptions"]) if obj.get("gatewayOptions") is not None else None,
            "ipAddress": obj.get("ipAddress"),
            "makeDefault": obj.get("makeDefault") if obj.get("makeDefault") is not None else False,
            "processingOptions": PaymentMethodRequestProcessingOptions.from_dict(obj["processingOptions"]) if obj.get("processingOptions") is not None else None,
            "skipValidation": obj.get("skipValidation") if obj.get("skipValidation") is not None else False,
            "type": obj.get("type"),
            "currencyCode": obj.get("currencyCode"),
            "tokenize": obj.get("tokenize") if obj.get("tokenize") is not None else False,
            "tokens": PaymentMethodRequestTokens.from_dict(obj["tokens"]) if obj.get("tokens") is not None else None,
            "mandateInfo": PaymentMethodRequestMandateInfo.from_dict(obj["mandateInfo"]) if obj.get("mandateInfo") is not None else None,
            "mandateId": obj.get("mandateId"),
            "mandateReceivedStatus": obj.get("mandateReceivedStatus"),
            "existingMandateStatus": obj.get("existingMandateStatus"),
            "mandateCreationDate": obj.get("mandateCreationDate"),
            "mandateUpdateDate": obj.get("mandateUpdateDate"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "email": obj.get("email"),
            "bankABACode": obj.get("bankABACode"),
            "bankAccountName": obj.get("bankAccountName"),
            "bankAccountNumber": obj.get("bankAccountNumber"),
            "bankAccountMaskNumber": obj.get("bankAccountMaskNumber"),
            "bankAccountType": obj.get("bankAccountType"),
            "bankName": obj.get("bankName"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "zipCode": obj.get("zipCode")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
