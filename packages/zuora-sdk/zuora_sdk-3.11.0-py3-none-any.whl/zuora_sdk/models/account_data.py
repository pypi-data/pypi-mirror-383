# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.contact_info import ContactInfo
from zuora_sdk.models.sign_up_payment_method import SignUpPaymentMethod
from zuora_sdk.models.sign_up_tax_info import SignUpTaxInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountData(BaseModel):
    """
    The information of the account that you are to create through the \"Sign up\" operation.
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_number: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, alias="accountNumber")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.", alias="autoPay")
    batch: Optional[StrictStr] = None
    bill_cycle_day: Annotated[int, Field(le=31, strict=True, ge=0)] = Field(description="Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".", alias="billCycleDay")
    bill_to_contact: ContactInfo = Field(alias="billToContact")
    communication_profile_id: Optional[StrictStr] = Field(default=None, alias="communicationProfileId")
    credit_memo_template_id: Optional[StrictStr] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.", alias="creditMemoTemplateId")
    crm_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, alias="crmId")
    currency: StrictStr = Field(description="3 uppercase character currency code.   For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields. ", alias="customFields")
    debit_memo_template_id: Optional[StrictStr] = Field(default=None, description="**Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.", alias="debitMemoTemplateId")
    invoice_template_id: Optional[StrictStr] = Field(default=None, alias="invoiceTemplateId")
    name: Annotated[str, Field(strict=True, max_length=255)]
    notes: Optional[Annotated[str, Field(strict=True, max_length=65535)]] = None
    payment_method: Optional[SignUpPaymentMethod] = Field(default=None, alias="paymentMethod")
    payment_term: Optional[StrictStr] = Field(default=None, alias="paymentTerm")
    purchase_order_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The number of the purchase order associated with this account. Purchase order information generally comes from customers.", alias="purchaseOrderNumber")
    sequence_set_id: Optional[StrictStr] = Field(default=None, description="The ID of the billing document sequence set to assign to the customer account.    The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.", alias="sequenceSetId")
    sold_to_contact: Optional[ContactInfo] = Field(default=None, alias="soldToContact")
    ship_to_contact: Optional[ContactInfo] = Field(default=None, alias="shipToContact")
    tax_info: Optional[SignUpTaxInfo] = Field(default=None, alias="taxInfo")
    organization_label: Optional[StrictStr] = Field(default=None, alias="organizationLabel")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountNumber", "autoPay", "batch", "billCycleDay", "billToContact", "communicationProfileId", "creditMemoTemplateId", "crmId", "currency", "customFields", "debitMemoTemplateId", "invoiceTemplateId", "name", "notes", "paymentMethod", "paymentTerm", "purchaseOrderNumber", "sequenceSetId", "soldToContact", "shipToContact", "taxInfo", "organizationLabel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bill_to_contact
        if self.bill_to_contact:
            _dict['billToContact'] = self.bill_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sold_to_contact
        if self.sold_to_contact:
            _dict['soldToContact'] = self.sold_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_contact
        if self.ship_to_contact:
            _dict['shipToContact'] = self.ship_to_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_info
        if self.tax_info:
            _dict['taxInfo'] = self.tax_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountNumber": obj.get("accountNumber"),
            "autoPay": obj.get("autoPay"),
            "batch": obj.get("batch"),
            "billCycleDay": obj.get("billCycleDay"),
            "billToContact": ContactInfo.from_dict(obj["billToContact"]) if obj.get("billToContact") is not None else None,
            "communicationProfileId": obj.get("communicationProfileId"),
            "creditMemoTemplateId": obj.get("creditMemoTemplateId"),
            "crmId": obj.get("crmId"),
            "currency": obj.get("currency"),
            "customFields": obj.get("customFields"),
            "debitMemoTemplateId": obj.get("debitMemoTemplateId"),
            "invoiceTemplateId": obj.get("invoiceTemplateId"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "paymentMethod": SignUpPaymentMethod.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "paymentTerm": obj.get("paymentTerm"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "soldToContact": ContactInfo.from_dict(obj["soldToContact"]) if obj.get("soldToContact") is not None else None,
            "shipToContact": ContactInfo.from_dict(obj["shipToContact"]) if obj.get("shipToContact") is not None else None,
            "taxInfo": SignUpTaxInfo.from_dict(obj["taxInfo"]) if obj.get("taxInfo") is not None else None,
            "organizationLabel": obj.get("organizationLabel")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
