# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.create_order_change_plan import CreateOrderChangePlan
from zuora_sdk.models.create_order_resume import CreateOrderResume
from zuora_sdk.models.create_order_suspend import CreateOrderSuspend
from zuora_sdk.models.create_order_terms_and_conditions import CreateOrderTermsAndConditions
from zuora_sdk.models.order_action_cancel_subscription import OrderActionCancelSubscription
from zuora_sdk.models.order_action_owner_transfer import OrderActionOwnerTransfer
from zuora_sdk.models.order_action_remove_product import OrderActionRemoveProduct
from zuora_sdk.models.order_action_renew_subscription import OrderActionRenewSubscription
from zuora_sdk.models.preview_order_create_subscription import PreviewOrderCreateSubscription
from zuora_sdk.models.preview_order_rate_plan_override import PreviewOrderRatePlanOverride
from zuora_sdk.models.preview_order_rate_plan_update import PreviewOrderRatePlanUpdate
from zuora_sdk.models.trigger_date import TriggerDate
from typing import Optional, Set
from typing_extensions import Self

class PreviewOrderOrderAction(BaseModel):
    """
    PreviewOrderOrderAction
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    add_product: Optional[PreviewOrderRatePlanOverride] = Field(default=None, alias="addProduct")
    cancel_subscription: Optional[OrderActionCancelSubscription] = Field(default=None, alias="cancelSubscription")
    change_plan: Optional[CreateOrderChangePlan] = Field(default=None, alias="changePlan")
    change_reason: Optional[StrictStr] = Field(default=None, description="The change reason set for an order action when an order is created. ", alias="changeReason")
    create_subscription: Optional[PreviewOrderCreateSubscription] = Field(default=None, alias="createSubscription")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of an Order Action object. ", alias="customFields")
    owner_transfer: Optional[OrderActionOwnerTransfer] = Field(default=None, alias="ownerTransfer")
    remove_product: Optional[OrderActionRemoveProduct] = Field(default=None, alias="removeProduct")
    renew_subscription: Optional[OrderActionRenewSubscription] = Field(default=None, alias="renewSubscription")
    resume: Optional[CreateOrderResume] = None
    suspend: Optional[CreateOrderSuspend] = None
    terms_and_conditions: Optional[CreateOrderTermsAndConditions] = Field(default=None, alias="termsAndConditions")
    trigger_dates: Optional[List[TriggerDate]] = Field(default=None, description="Container for the contract effective, service activation, and customer acceptance dates of the order action.   If the service activation date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Activation` subscription.  If the customer acceptance date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Acceptance` subscription. If the service activation date field is at the same time required and skipped (or set as null), it will be a `Pending Activation` subscription. ", alias="triggerDates")
    type: StrictStr
    update_product: Optional[PreviewOrderRatePlanUpdate] = Field(default=None, alias="updateProduct")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["addProduct", "cancelSubscription", "changePlan", "changeReason", "createSubscription", "customFields", "ownerTransfer", "removeProduct", "renewSubscription", "resume", "suspend", "termsAndConditions", "triggerDates", "type", "updateProduct"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreviewOrderOrderAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_product
        if self.add_product:
            _dict['addProduct'] = self.add_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_subscription
        if self.cancel_subscription:
            _dict['cancelSubscription'] = self.cancel_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_plan
        if self.change_plan:
            _dict['changePlan'] = self.change_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_subscription
        if self.create_subscription:
            _dict['createSubscription'] = self.create_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_transfer
        if self.owner_transfer:
            _dict['ownerTransfer'] = self.owner_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remove_product
        if self.remove_product:
            _dict['removeProduct'] = self.remove_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of renew_subscription
        if self.renew_subscription:
            _dict['renewSubscription'] = self.renew_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resume
        if self.resume:
            _dict['resume'] = self.resume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspend
        if self.suspend:
            _dict['suspend'] = self.suspend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms_and_conditions
        if self.terms_and_conditions:
            _dict['termsAndConditions'] = self.terms_and_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_dates (list)
        _items = []
        if self.trigger_dates:
            for _item_trigger_dates in self.trigger_dates:
                if _item_trigger_dates:
                    _items.append(_item_trigger_dates.to_dict())
            _dict['triggerDates'] = _items
        # override the default output from pydantic by calling `to_dict()` of update_product
        if self.update_product:
            _dict['updateProduct'] = self.update_product.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreviewOrderOrderAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "addProduct": PreviewOrderRatePlanOverride.from_dict(obj["addProduct"]) if obj.get("addProduct") is not None else None,
            "cancelSubscription": OrderActionCancelSubscription.from_dict(obj["cancelSubscription"]) if obj.get("cancelSubscription") is not None else None,
            "changePlan": CreateOrderChangePlan.from_dict(obj["changePlan"]) if obj.get("changePlan") is not None else None,
            "changeReason": obj.get("changeReason"),
            "createSubscription": PreviewOrderCreateSubscription.from_dict(obj["createSubscription"]) if obj.get("createSubscription") is not None else None,
            "customFields": obj.get("customFields"),
            "ownerTransfer": OrderActionOwnerTransfer.from_dict(obj["ownerTransfer"]) if obj.get("ownerTransfer") is not None else None,
            "removeProduct": OrderActionRemoveProduct.from_dict(obj["removeProduct"]) if obj.get("removeProduct") is not None else None,
            "renewSubscription": OrderActionRenewSubscription.from_dict(obj["renewSubscription"]) if obj.get("renewSubscription") is not None else None,
            "resume": CreateOrderResume.from_dict(obj["resume"]) if obj.get("resume") is not None else None,
            "suspend": CreateOrderSuspend.from_dict(obj["suspend"]) if obj.get("suspend") is not None else None,
            "termsAndConditions": CreateOrderTermsAndConditions.from_dict(obj["termsAndConditions"]) if obj.get("termsAndConditions") is not None else None,
            "triggerDates": [TriggerDate.from_dict(_item) for _item in obj["triggerDates"]] if obj.get("triggerDates") is not None else None,
            "type": obj.get("type"),
            "updateProduct": PreviewOrderRatePlanUpdate.from_dict(obj["updateProduct"]) if obj.get("updateProduct") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
