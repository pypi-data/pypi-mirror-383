# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.billing_document_status import BillingDocumentStatus
from zuora_sdk.models.e_invoice_status import EInvoiceStatus
from zuora_sdk.models.failed_reason import FailedReason
from zuora_sdk.models.tax_status import TaxStatus
from zuora_sdk.models.transferred_to_accounting_status import TransferredToAccountingStatus
from typing import Optional, Set
from typing_extensions import Self

class InvoiceResponse(BaseModel):
    """
    InvoiceResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=True, description="Indicates whether the call succeeded. ")
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer account associated with the invoice.", alias="accountId")
    adjustment_amount: Optional[Decimal] = Field(default=None, description="The amount of the invoice adjustments associated with the invoice.", alias="adjustmentAmount")
    amount: Optional[Decimal] = Field(default=None, description="The total amount of the invoice.")
    amount_without_tax: Optional[Decimal] = Field(default=None, description="The invoice amount excluding tax.", alias="amountWithoutTax")
    auto_pay: Optional[StrictBool] = Field(default=None, description="Whether invoices are automatically picked up for processing in the corresponding payment run.", alias="autoPay")
    balance: Optional[Decimal] = Field(default=None, description="The remaining balance of the invoice after all payments, adjustments and refunds are applied.")
    bill_run_id: Optional[StrictStr] = Field(default=None, description="The id of bill run if the invoice is generated by a bill run.", alias="billRunId")
    bill_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact associated with the invoice.", alias="billToContactId")
    bill_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, description="The ID of the bill-to contact snapshot associated with the invoice.", alias="billToContactSnapshotId")
    comments: Optional[StrictStr] = Field(default=None, description="Comments about the invoice.")
    created_by_id: Optional[StrictStr] = Field(default=None, description="The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.", alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, description="The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.", alias="createdDate")
    credit_balance_adjustment_amount: Optional[Decimal] = Field(default=None, description="The currency amount of the adjustment applied to the customer's credit balance.   **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled. ", alias="creditBalanceAdjustmentAmount")
    credit_memo_amount: Optional[Decimal] = Field(default=None, description="The currency amount of all credit memos applied to this invoice. **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.", alias="creditMemoAmount")
    currency: Optional[StrictStr] = Field(default=None, description="A currency defined in the web-based UI administrative settings.")
    discount: Optional[Decimal] = Field(default=None, description="the invoice discount amount.")
    due_date: Optional[date] = Field(default=None, description="The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.", alias="dueDate")
    e_invoice_status: Optional[StrictStr] = Field(default=None, alias="eInvoiceStatus")
    e_invoice_error_code: Optional[StrictStr] = Field(default=None, alias="eInvoiceErrorCode")
    e_invoice_error_message: Optional[StrictStr] = Field(default=None, alias="eInvoiceErrorMessage")
    e_invoice_file_id: Optional[StrictStr] = Field(default=None, alias="eInvoiceFileId")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the invoice.")
    includes_one_time: Optional[StrictBool] = Field(default=None, description="Specifies whether the invoice includes one-time charges.", alias="includesOneTime")
    includes_recurring: Optional[StrictBool] = Field(default=None, description="Specifies whether the invoice includes recurring charges.", alias="includesRecurring")
    includes_usage: Optional[StrictBool] = Field(default=None, description="Specifies whether the invoice includes usage charges.", alias="includesUsage")
    invoice_date: Optional[date] = Field(default=None, description="The date that appears on the invoice being created.", alias="invoiceDate")
    invoice_group_number: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The number of invoice group associated with the invoice.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled. ", alias="invoiceGroupNumber")
    invoice_number: Optional[StrictStr] = Field(default=None, description="The unique identification number of the invoice.", alias="invoiceNumber")
    last_email_sent_date: Optional[StrictStr] = Field(default=None, description="The date when the invoice was last emailed.", alias="lastEmailSentDate")
    payment_amount: Optional[Decimal] = Field(default=None, description="The amount of payments applied to the invoice.", alias="paymentAmount")
    payment_term: Optional[StrictStr] = Field(default=None, description="The name of payment term associated with the invoice.", alias="paymentTerm")
    posted_by: Optional[StrictStr] = Field(default=None, description="The user ID of the person who moved the invoice to Posted status.", alias="postedBy")
    posted_date: Optional[date] = Field(default=None, description="The date when the invoice was posted.", alias="postedDate")
    refund_amount: Optional[Decimal] = Field(default=None, description="Specifies the amount of a refund that was applied against an earlier payment on the invoice.", alias="refundAmount")
    sequence_set_id: Optional[StrictStr] = Field(default=None, description="The ID of the sequence set associated with the invoice.", alias="sequenceSetId")
    ship_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact associated with the invoice.", alias="shipToContactId")
    ship_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, description="The ID of the ship-to contact snapshot associated with the invoice.", alias="shipToContactSnapshotId")
    sold_to_contact_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact associated with the invoice.", alias="soldToContactId")
    sold_to_contact_snapshot_id: Optional[StrictStr] = Field(default=None, description="The ID of the sold-to contact snapshot associated with the invoice.", alias="soldToContactSnapshotId")
    communication_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of the communication profile associated with the invoice.", alias="communicationProfileId")
    source: Optional[StrictStr] = Field(default=None, description="The source of the invoice.")
    source_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice source. If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.", alias="sourceId")
    source_type: Optional[StrictStr] = Field(default=None, description="The type of the invoice source.", alias="sourceType")
    status: Optional[StrictStr] = None
    target_date: Optional[date] = Field(default=None, description="This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.", alias="targetDate")
    tax_amount: Optional[Decimal] = Field(default=None, description="The amount of taxation.", alias="taxAmount")
    tax_exempt_amount: Optional[Decimal] = Field(default=None, description="The calculated tax amount excluded due to the exemption.", alias="taxExemptAmount")
    tax_message: Optional[StrictStr] = Field(default=None, description="The message that the tax engine return if it calculates the taxes of this invoice fails.", alias="taxMessage")
    tax_status: Optional[StrictStr] = Field(default=None, alias="taxStatus")
    template_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice template.  - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template.    - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account. - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`. ", alias="templateId")
    transferred_to_accounting: Optional[StrictStr] = Field(default=None, alias="transferredToAccounting")
    updated_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who last updated the invoice.", alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, description="The date when the invoice was last updated.", alias="updatedDate")
    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationStatus__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SyncDate__NS")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "accountId", "adjustmentAmount", "amount", "amountWithoutTax", "autoPay", "balance", "billRunId", "billToContactId", "billToContactSnapshotId", "comments", "createdById", "createdDate", "creditBalanceAdjustmentAmount", "creditMemoAmount", "currency", "discount", "dueDate", "eInvoiceStatus", "eInvoiceErrorCode", "eInvoiceErrorMessage", "eInvoiceFileId", "id", "includesOneTime", "includesRecurring", "includesUsage", "invoiceDate", "invoiceGroupNumber", "invoiceNumber", "lastEmailSentDate", "paymentAmount", "paymentTerm", "postedBy", "postedDate", "refundAmount", "sequenceSetId", "shipToContactId", "shipToContactSnapshotId", "soldToContactId", "soldToContactSnapshotId", "communicationProfileId", "source", "sourceId", "sourceType", "status", "targetDate", "taxAmount", "taxExemptAmount", "taxMessage", "taxStatus", "templateId", "transferredToAccounting", "updatedById", "updatedDate", "IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BillRun', 'API', 'ApiSubscribe', 'ApiAmend']):
            raise ValueError("must be one of enum values ('BillRun', 'API', 'ApiSubscribe', 'ApiAmend')")
        return value

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Subscription', 'Standalone', 'Order', 'Consolidation']):
            raise ValueError("must be one of enum values ('Subscription', 'Standalone', 'Order', 'Consolidation')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success") if obj.get("success") is not None else True,
            "accountId": obj.get("accountId"),
            "adjustmentAmount": obj.get("adjustmentAmount"),
            "amount": obj.get("amount"),
            "amountWithoutTax": obj.get("amountWithoutTax"),
            "autoPay": obj.get("autoPay"),
            "balance": obj.get("balance"),
            "billRunId": obj.get("billRunId"),
            "billToContactId": obj.get("billToContactId"),
            "billToContactSnapshotId": obj.get("billToContactSnapshotId"),
            "comments": obj.get("comments"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "creditBalanceAdjustmentAmount": obj.get("creditBalanceAdjustmentAmount"),
            "creditMemoAmount": obj.get("creditMemoAmount"),
            "currency": obj.get("currency"),
            "discount": obj.get("discount"),
            "dueDate": obj.get("dueDate"),
            "eInvoiceStatus": obj.get("eInvoiceStatus"),
            "eInvoiceErrorCode": obj.get("eInvoiceErrorCode"),
            "eInvoiceErrorMessage": obj.get("eInvoiceErrorMessage"),
            "eInvoiceFileId": obj.get("eInvoiceFileId"),
            "id": obj.get("id"),
            "includesOneTime": obj.get("includesOneTime"),
            "includesRecurring": obj.get("includesRecurring"),
            "includesUsage": obj.get("includesUsage"),
            "invoiceDate": obj.get("invoiceDate"),
            "invoiceGroupNumber": obj.get("invoiceGroupNumber"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "lastEmailSentDate": obj.get("lastEmailSentDate"),
            "paymentAmount": obj.get("paymentAmount"),
            "paymentTerm": obj.get("paymentTerm"),
            "postedBy": obj.get("postedBy"),
            "postedDate": obj.get("postedDate"),
            "refundAmount": obj.get("refundAmount"),
            "sequenceSetId": obj.get("sequenceSetId"),
            "shipToContactId": obj.get("shipToContactId"),
            "shipToContactSnapshotId": obj.get("shipToContactSnapshotId"),
            "soldToContactId": obj.get("soldToContactId"),
            "soldToContactSnapshotId": obj.get("soldToContactSnapshotId"),
            "communicationProfileId": obj.get("communicationProfileId"),
            "source": obj.get("source"),
            "sourceId": obj.get("sourceId"),
            "sourceType": obj.get("sourceType"),
            "status": obj.get("status"),
            "targetDate": obj.get("targetDate"),
            "taxAmount": obj.get("taxAmount"),
            "taxExemptAmount": obj.get("taxExemptAmount"),
            "taxMessage": obj.get("taxMessage"),
            "taxStatus": obj.get("taxStatus"),
            "templateId": obj.get("templateId"),
            "transferredToAccounting": obj.get("transferredToAccounting"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
