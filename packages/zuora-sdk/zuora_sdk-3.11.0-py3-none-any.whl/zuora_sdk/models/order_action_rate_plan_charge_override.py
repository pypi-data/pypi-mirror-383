# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.charge_override_billing import ChargeOverrideBilling
from zuora_sdk.models.end_conditions import EndConditions
from zuora_sdk.models.rate_plan_charge_override_pricing import RatePlanChargeOverridePricing
from zuora_sdk.models.trigger_params import TriggerParams
from typing import Optional, Set
from typing_extensions import Self

class OrderActionRatePlanChargeOverride(BaseModel):
    """
    Charge associated with a rate plan. 
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    billing: Optional[ChargeOverrideBilling] = None
    charge_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number. ", alias="chargeNumber")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of a Rate Plan Charge object. ", alias="customFields")
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description of the charge. ")
    end_date: Optional[EndConditions] = Field(default=None, alias="endDate")
    pricing: Optional[RatePlanChargeOverridePricing] = None
    product_rate_plan_charge_id: StrictStr = Field(description="Internal identifier of the product rate plan charge that the charge is based on. ", alias="productRatePlanChargeId")
    rev_rec_code: Optional[Annotated[str, Field(strict=True, max_length=70)]] = Field(default=None, description="Revenue Recognition Code ", alias="revRecCode")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(default=None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(default=None, alias="revenueRecognitionRuleName")
    start_date: Optional[TriggerParams] = Field(default=None, alias="startDate")
    estimated_start_date: Optional[date] = Field(default=None, description="**Note**: This field is only available if you have the [Pending Charge Flexibility] (https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Pending_Charge_Flexibility). feature enabled. Estimated Start Date of the charge.", alias="estimatedStartDate")
    unique_token: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify. ", alias="uniqueToken")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["billing", "chargeNumber", "customFields", "description", "endDate", "pricing", "productRatePlanChargeId", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "startDate", "estimatedStartDate", "uniqueToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanChargeOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderActionRatePlanChargeOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "billing": ChargeOverrideBilling.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "chargeNumber": obj.get("chargeNumber"),
            "customFields": obj.get("customFields"),
            "description": obj.get("description"),
            "endDate": EndConditions.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "pricing": RatePlanChargeOverridePricing.from_dict(obj["pricing"]) if obj.get("pricing") is not None else None,
            "productRatePlanChargeId": obj.get("productRatePlanChargeId"),
            "revRecCode": obj.get("revRecCode"),
            "revRecTriggerCondition": obj.get("revRecTriggerCondition"),
            "revenueRecognitionRuleName": obj.get("revenueRecognitionRuleName"),
            "startDate": TriggerParams.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "estimatedStartDate": obj.get("estimatedStartDate"),
            "uniqueToken": obj.get("uniqueToken")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
