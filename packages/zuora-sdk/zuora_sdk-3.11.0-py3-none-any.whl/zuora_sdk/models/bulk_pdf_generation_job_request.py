# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.document_id_list import DocumentIdList
from zuora_sdk.models.index_file_format import IndexFileFormat
from typing import Optional, Set
from typing_extensions import Self

class BulkPdfGenerationJobRequest(BaseModel):
    """
    BulkPdfGenerationJobRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    documents: List[DocumentIdList] = Field(description="Array that contains the collection of Objects where each object contains billing document type and their ids ")
    file_name: Annotated[str, Field(strict=True, max_length=32)] = Field(description="Prefix part of output file name(s).  Eg:    if fileName is \"all-invoices-posted-jan-2024\" then fileURL(s) contains this name as a prefix followed by suffix _{number} ", alias="fileName")
    name: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="Name of the Job ")
    index_file_format: IndexFileFormat = Field(alias="indexFileFormat")
    generate_missing_pdf: Optional[StrictBool] = Field(default=None, description="Flag which controls the behaviour of whether to generate the PDF(s) for the billing documents that doesn't have one    - setting it to true indicates service would go through the provided document id list and then find those billing documents that doesn't have PDF generated   and generate them all at once and then proceed to the zipping process    - setting it to false indicates service would go through the provided document id list and find those billing documents that doesn't have PDF generated and   mark them as Invalid and would skip them from zipping it. Ids marked invalid would be part of the response  Default value is false ", alias="generateMissingPDF")
    persist_index_file: Optional[StrictBool] = Field(default=None, description="Flag which controls whether to generated metadata/index file should be present in the final output file or not.     - setting it to true will generate the metadata/index file and store them along with other PDF files in the final zip file(s).    - setting it to false doesn't generate the metadata/index file and do not store them in the final zip file(s)  Default value is true ", alias="persistIndexFile")
    ignore_archived_files: Optional[StrictBool] = Field(default=None, description="Flag which controls whether to skip the archived files or not.     - setting it to true will skip the archived PDF files from including it in the output file. Documents whose Id(s) are in archived status will be displayed in skippedDocuments field of the GET by Job Id API response    - setting it to false will throw error when the job encounters any archived PDF file(s) in the provided document id list.    Default value is false ", alias="ignoreArchivedFiles")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["documents", "fileName", "name", "indexFileFormat", "generateMissingPDF", "persistIndexFile", "ignoreArchivedFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkPdfGenerationJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkPdfGenerationJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "documents": [DocumentIdList.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "fileName": obj.get("fileName"),
            "name": obj.get("name"),
            "indexFileFormat": obj.get("indexFileFormat"),
            "generateMissingPDF": obj.get("generateMissingPDF"),
            "persistIndexFile": obj.get("persistIndexFile"),
            "ignoreArchivedFiles": obj.get("ignoreArchivedFiles")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
