# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpandedAmendment(BaseModel):
    """
    ExpandedAmendment
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = None
    auto_renew: Optional[StrictBool] = Field(default=None, alias="autoRenew")
    code: Optional[StrictStr] = None
    contract_effective_date: Optional[date] = Field(default=None, alias="contractEffectiveDate")
    current_term: Optional[StrictInt] = Field(default=None, alias="currentTerm")
    current_term_period_type: Optional[StrictStr] = Field(default=None, alias="currentTermPeriodType")
    customer_acceptance_date: Optional[date] = Field(default=None, alias="customerAcceptanceDate")
    description: Optional[StrictStr] = None
    effective_date: Optional[date] = Field(default=None, alias="effectiveDate")
    effective_policy: Optional[StrictStr] = Field(default=None, alias="effectivePolicy")
    name: Optional[StrictStr] = None
    new_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="newRatePlanId")
    removed_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="removedRatePlanId")
    renewal_setting: Optional[StrictStr] = Field(default=None, alias="renewalSetting")
    renewal_term: Optional[StrictInt] = Field(default=None, alias="renewalTerm")
    renewal_term_period_type: Optional[StrictStr] = Field(default=None, alias="renewalTermPeriodType")
    resume_date: Optional[date] = Field(default=None, alias="resumeDate")
    service_activation_date: Optional[date] = Field(default=None, alias="serviceActivationDate")
    specific_update_date: Optional[date] = Field(default=None, alias="specificUpdateDate")
    status: Optional[StrictStr] = None
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    suspend_date: Optional[date] = Field(default=None, alias="suspendDate")
    term_start_date: Optional[date] = Field(default=None, alias="termStartDate")
    term_type: Optional[StrictStr] = Field(default=None, alias="termType")
    type: Optional[StrictStr] = None
    sub_type: Optional[StrictStr] = Field(default=None, alias="subType")
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    booking_date: Optional[date] = Field(default=None, alias="bookingDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "autoRenew", "code", "contractEffectiveDate", "currentTerm", "currentTermPeriodType", "customerAcceptanceDate", "description", "effectiveDate", "effectivePolicy", "name", "newRatePlanId", "removedRatePlanId", "renewalSetting", "renewalTerm", "renewalTermPeriodType", "resumeDate", "serviceActivationDate", "specificUpdateDate", "status", "subscriptionId", "suspendDate", "termStartDate", "termType", "type", "subType", "createdById", "createdDate", "updatedById", "updatedDate", "bookingDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedAmendment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedAmendment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "autoRenew": obj.get("autoRenew"),
            "code": obj.get("code"),
            "contractEffectiveDate": obj.get("contractEffectiveDate"),
            "currentTerm": obj.get("currentTerm"),
            "currentTermPeriodType": obj.get("currentTermPeriodType"),
            "customerAcceptanceDate": obj.get("customerAcceptanceDate"),
            "description": obj.get("description"),
            "effectiveDate": obj.get("effectiveDate"),
            "effectivePolicy": obj.get("effectivePolicy"),
            "name": obj.get("name"),
            "newRatePlanId": obj.get("newRatePlanId"),
            "removedRatePlanId": obj.get("removedRatePlanId"),
            "renewalSetting": obj.get("renewalSetting"),
            "renewalTerm": obj.get("renewalTerm"),
            "renewalTermPeriodType": obj.get("renewalTermPeriodType"),
            "resumeDate": obj.get("resumeDate"),
            "serviceActivationDate": obj.get("serviceActivationDate"),
            "specificUpdateDate": obj.get("specificUpdateDate"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "suspendDate": obj.get("suspendDate"),
            "termStartDate": obj.get("termStartDate"),
            "termType": obj.get("termType"),
            "type": obj.get("type"),
            "subType": obj.get("subType"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "bookingDate": obj.get("bookingDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
