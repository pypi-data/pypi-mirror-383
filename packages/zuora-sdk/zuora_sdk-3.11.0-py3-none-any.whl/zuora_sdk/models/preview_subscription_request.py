# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_subscription_rate_plan import CreateSubscriptionRatePlan
from zuora_sdk.models.preview_subscription_account_info import PreviewSubscriptionAccountInfo
from typing import Optional, Set
from typing_extensions import Self

class PreviewSubscriptionRequest(BaseModel):
    """
    PreviewSubscriptionRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_key: Optional[StrictStr] = Field(default=None, description=" Customer account number or ID.   You must specify the account information either in this field or in the `previewAccountInfo` field with the following conditions:           * If you already have a customer account, specify the account number or ID in this field.  * If you do not have a customer account, provide account information in the `previewAccountInfo` field.", alias="accountKey")
    contract_effective_date: date = Field(description="Effective contract date for this subscription, as yyyy-mm-dd. ", alias="contractEffectiveDate")
    customer_acceptance_date: Optional[date] = Field(default=None, description="The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.   Default value is dependent on the value of other fields. See **Notes** section for more details.", alias="customerAcceptanceDate")
    document_date: Optional[date] = Field(default=None, description="The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.   - If this field is specified, the specified date is used as the billing document date.   - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.", alias="documentDate")
    include_existing_draft_doc_items: Optional[StrictBool] = Field(default=None, description="Specifies whether to include draft invoice items in subscription previews.  Values are:   * `true` (default). Includes draft invoice items in the preview result.  * `false`. Excludes draft invoice items in the preview result.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="includeExistingDraftDocItems")
    include_existing_draft_invoice_items: Optional[StrictBool] = Field(default=None, description="Specifies whether to include draft invoice items in previews.  Values are:   * `true` (default). Includes draft invoice items in the preview result.  * `false`. Excludes draft invoice items in the preview result.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="includeExistingDraftInvoiceItems")
    initial_term: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Duration of the first term of the subscription, in whole months. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.    ", alias="initialTerm")
    initial_term_period_type: Optional[StrictStr] = Field(default=None, description="The period type of the initial term.   Supported values are:  * `Month` * `Year` * `Day` * `Week`   The default period type is `Month`.  ", alias="initialTermPeriodType")
    invoice_owner_account_key: Optional[StrictStr] = Field(default=None, description="Invoice owner account number or ID.   **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).", alias="invoiceOwnerAccountKey")
    invoice_target_date: Optional[date] = Field(default=None, description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="invoiceTargetDate")
    notes: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="String of up to 1000 characters.")
    preview_account_info: Optional[PreviewSubscriptionAccountInfo] = Field(default=None, alias="previewAccountInfo")
    preview_type: Optional[StrictStr] = Field(default=None, description="The type of preview you will receive.    This field is in Zuora REST API version control. The supported values of this field depend on the REST API minor version you specified in the request header.    * If you do not specify the REST API minor version or specify the minor version number to one of following values in the request header:     * 186.0   * 187.0   * 188.0   * 189.0   * 196.0   * 206.0      The following values are supported in the **previewType** field:    * InvoiceItem   * ChargeMetrics   * InvoiceItemChargeMetrics      The default value is InvoiceItem.  * If you specify the REST API minor version to 207.0 or later in the request header, the following values are supported in the **previewType** field:    - LegalDoc   - ChargeMetrics   - LegalDocChargeMetrics    The default value is LegalDoc.  See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="previewType")
    service_activation_date: Optional[date] = Field(default=None, description="The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.   Default value is dependent on the value of other fields. See **Notes** section for more details.", alias="serviceActivationDate")
    subscribe_to_rate_plans: List[CreateSubscriptionRatePlan] = Field(description="Container for one or more rate plans for this subscription. ", alias="subscribeToRatePlans")
    target_date: Optional[date] = Field(default=None, description="Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.", alias="targetDate")
    term_start_date: Optional[date] = Field(default=None, description="The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.", alias="termStartDate")
    term_type: StrictStr = Field(description="Possible values are: `TERMED`, `EVERGREEN`. ", alias="termType")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountKey", "contractEffectiveDate", "customerAcceptanceDate", "documentDate", "includeExistingDraftDocItems", "includeExistingDraftInvoiceItems", "initialTerm", "initialTermPeriodType", "invoiceOwnerAccountKey", "invoiceTargetDate", "notes", "previewAccountInfo", "previewType", "serviceActivationDate", "subscribeToRatePlans", "targetDate", "termStartDate", "termType"]

    @field_validator('document_date')
    def document_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-\d{1,2}-\d{1,2}", value):
            raise ValueError(r"must validate the regular expression /\d{4}-\d{1,2}-\d{1,2}/")
        return value

    @field_validator('invoice_target_date')
    def invoice_target_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-\d{1,2}-\d{1,2}", value):
            raise ValueError(r"must validate the regular expression /\d{4}-\d{1,2}-\d{1,2}/")
        return value

    @field_validator('target_date')
    def target_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-\d{1,2}-\d{1,2}", value):
            raise ValueError(r"must validate the regular expression /\d{4}-\d{1,2}-\d{1,2}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreviewSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preview_account_info
        if self.preview_account_info:
            _dict['previewAccountInfo'] = self.preview_account_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscribe_to_rate_plans (list)
        _items = []
        if self.subscribe_to_rate_plans:
            for _item_subscribe_to_rate_plans in self.subscribe_to_rate_plans:
                if _item_subscribe_to_rate_plans:
                    _items.append(_item_subscribe_to_rate_plans.to_dict())
            _dict['subscribeToRatePlans'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreviewSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountKey": obj.get("accountKey"),
            "contractEffectiveDate": obj.get("contractEffectiveDate"),
            "customerAcceptanceDate": obj.get("customerAcceptanceDate"),
            "documentDate": obj.get("documentDate"),
            "includeExistingDraftDocItems": obj.get("includeExistingDraftDocItems"),
            "includeExistingDraftInvoiceItems": obj.get("includeExistingDraftInvoiceItems"),
            "initialTerm": obj.get("initialTerm"),
            "initialTermPeriodType": obj.get("initialTermPeriodType"),
            "invoiceOwnerAccountKey": obj.get("invoiceOwnerAccountKey"),
            "invoiceTargetDate": obj.get("invoiceTargetDate"),
            "notes": obj.get("notes"),
            "previewAccountInfo": PreviewSubscriptionAccountInfo.from_dict(obj["previewAccountInfo"]) if obj.get("previewAccountInfo") is not None else None,
            "previewType": obj.get("previewType"),
            "serviceActivationDate": obj.get("serviceActivationDate"),
            "subscribeToRatePlans": [CreateSubscriptionRatePlan.from_dict(_item) for _item in obj["subscribeToRatePlans"]] if obj.get("subscribeToRatePlans") is not None else None,
            "targetDate": obj.get("targetDate"),
            "termStartDate": obj.get("termStartDate"),
            "termType": obj.get("termType")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
