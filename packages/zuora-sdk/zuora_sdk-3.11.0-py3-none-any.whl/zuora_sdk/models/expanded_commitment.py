# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpandedCommitment(BaseModel):
    """
    ExpandedCommitment
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = None
    commitment_number: Optional[StrictStr] = Field(default=None, alias="commitmentNumber")
    version: Optional[StrictInt] = None
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    order_number: Optional[StrictStr] = Field(default=None, alias="orderNumber")
    name: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    taxable: Optional[StrictBool] = None
    tax_code: Optional[StrictStr] = Field(default=None, alias="taxCode")
    tax_mode: Optional[StrictStr] = Field(default=None, alias="taxMode")
    currency: Optional[StrictStr] = None
    cycle_period_type: Optional[StrictStr] = Field(default=None, alias="cyclePeriodType")
    cycle_period_length: Optional[StrictInt] = Field(default=None, alias="cyclePeriodLength")
    cycle_day_type: Optional[StrictStr] = Field(default=None, alias="cycleDayType")
    cycle_day: Optional[StrictInt] = Field(default=None, alias="cycleDay")
    cycle_alignment_date: Optional[date] = Field(default=None, alias="cycleAlignmentDate")
    accounting_code: Optional[StrictStr] = Field(default=None, alias="accountingCode")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(default=None, alias="adjustmentLiabilityAccountingCode")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(default=None, alias="adjustmentRevenueAccountingCode")
    contract_asset_accounting_code: Optional[StrictStr] = Field(default=None, alias="contractAssetAccountingCode")
    contract_liability_accounting_code: Optional[StrictStr] = Field(default=None, alias="contractLiabilityAccountingCode")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, alias="contractRecognizedRevenueAccountingCode")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(default=None, alias="deferredRevenueAccountingCode")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, alias="excludeItemBillingFromRevenueAccounting")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(default=None, alias="excludeItemBookingFromRevenueAccounting")
    is_allocation_eligible: Optional[StrictBool] = Field(default=None, alias="isAllocationEligible")
    is_unbilled: Optional[StrictBool] = Field(default=None, alias="isUnbilled")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, alias="recognizedRevenueAccountingCode")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(default=None, alias="revenueRecognitionRuleName")
    unbilled_receivables_accounting_code: Optional[StrictStr] = Field(default=None, alias="unbilledReceivablesAccountingCode")
    revenue_recognition_timing: Optional[StrictStr] = Field(default=None, alias="revenueRecognitionTiming")
    revenue_amortization_method: Optional[StrictStr] = Field(default=None, alias="revenueAmortizationMethod")
    account_receivable_accounting_code: Optional[StrictStr] = Field(default=None, alias="accountReceivableAccountingCode")
    proration_option: Optional[StrictStr] = Field(default=None, alias="prorationOption")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "commitmentNumber", "version", "accountNumber", "orderNumber", "name", "priority", "type", "description", "taxable", "taxCode", "taxMode", "currency", "cyclePeriodType", "cyclePeriodLength", "cycleDayType", "cycleDay", "cycleAlignmentDate", "accountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "isAllocationEligible", "isUnbilled", "recognizedRevenueAccountingCode", "revenueRecognitionRuleName", "unbilledReceivablesAccountingCode", "revenueRecognitionTiming", "revenueAmortizationMethod", "accountReceivableAccountingCode", "prorationOption", "createdDate", "updatedDate", "createdById", "updatedById"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedCommitment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedCommitment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "commitmentNumber": obj.get("commitmentNumber"),
            "version": obj.get("version"),
            "accountNumber": obj.get("accountNumber"),
            "orderNumber": obj.get("orderNumber"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "taxable": obj.get("taxable"),
            "taxCode": obj.get("taxCode"),
            "taxMode": obj.get("taxMode"),
            "currency": obj.get("currency"),
            "cyclePeriodType": obj.get("cyclePeriodType"),
            "cyclePeriodLength": obj.get("cyclePeriodLength"),
            "cycleDayType": obj.get("cycleDayType"),
            "cycleDay": obj.get("cycleDay"),
            "cycleAlignmentDate": obj.get("cycleAlignmentDate"),
            "accountingCode": obj.get("accountingCode"),
            "adjustmentLiabilityAccountingCode": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustmentRevenueAccountingCode": obj.get("adjustmentRevenueAccountingCode"),
            "contractAssetAccountingCode": obj.get("contractAssetAccountingCode"),
            "contractLiabilityAccountingCode": obj.get("contractLiabilityAccountingCode"),
            "contractRecognizedRevenueAccountingCode": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferredRevenueAccountingCode": obj.get("deferredRevenueAccountingCode"),
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "excludeItemBookingFromRevenueAccounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "isAllocationEligible": obj.get("isAllocationEligible"),
            "isUnbilled": obj.get("isUnbilled"),
            "recognizedRevenueAccountingCode": obj.get("recognizedRevenueAccountingCode"),
            "revenueRecognitionRuleName": obj.get("revenueRecognitionRuleName"),
            "unbilledReceivablesAccountingCode": obj.get("unbilledReceivablesAccountingCode"),
            "revenueRecognitionTiming": obj.get("revenueRecognitionTiming"),
            "revenueAmortizationMethod": obj.get("revenueAmortizationMethod"),
            "accountReceivableAccountingCode": obj.get("accountReceivableAccountingCode"),
            "prorationOption": obj.get("prorationOption"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "createdById": obj.get("createdById"),
            "updatedById": obj.get("updatedById")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
