# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.expanded_product_rate_plan import ExpandedProductRatePlan
from typing import Optional, Set
from typing_extensions import Self

class ExpandedRatePlan(BaseModel):
    """
    ExpandedRatePlan
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    amendment_id: Optional[StrictStr] = Field(default=None, alias="amendmentId")
    amendment_type: Optional[StrictStr] = Field(default=None, alias="amendmentType")
    name: Optional[StrictStr] = None
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="productRatePlanId")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    subscription_owner_id: Optional[StrictStr] = Field(default=None, alias="subscriptionOwnerId")
    invoice_owner_id: Optional[StrictStr] = Field(default=None, alias="invoiceOwnerId")
    externally_managed_plan_id: Optional[StrictStr] = Field(default=None, alias="externallyManagedPlanId")
    original_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="originalRatePlanId")
    subscription_offer_id: Optional[StrictStr] = Field(default=None, alias="subscriptionOfferId")
    subscription_rate_plan_number: Optional[StrictStr] = Field(default=None, alias="subscriptionRatePlanNumber")
    reverted: Optional[StrictBool] = None
    pricing_attributes: Optional[StrictStr] = Field(default=None, alias="pricingAttributes")
    subscription: Optional[ExpandedSubscription] = None
    product_rate_plan: Optional[ExpandedProductRatePlan] = Field(default=None, alias="productRatePlan")
    rate_plan_charges: Optional[List[ExpandedRatePlanCharge]] = Field(default=None, alias="ratePlanCharges")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["productId", "amendmentId", "amendmentType", "name", "productRatePlanId", "subscriptionId", "id", "createdById", "createdDate", "updatedById", "updatedDate", "subscriptionOwnerId", "invoiceOwnerId", "externallyManagedPlanId", "originalRatePlanId", "subscriptionOfferId", "subscriptionRatePlanNumber", "reverted", "pricingAttributes", "subscription", "productRatePlan", "ratePlanCharges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_rate_plan
        if self.product_rate_plan:
            _dict['productRatePlan'] = self.product_rate_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rate_plan_charges (list)
        _items = []
        if self.rate_plan_charges:
            for _item_rate_plan_charges in self.rate_plan_charges:
                if _item_rate_plan_charges:
                    _items.append(_item_rate_plan_charges.to_dict())
            _dict['ratePlanCharges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "productId": obj.get("productId"),
            "amendmentId": obj.get("amendmentId"),
            "amendmentType": obj.get("amendmentType"),
            "name": obj.get("name"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "subscriptionId": obj.get("subscriptionId"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "subscriptionOwnerId": obj.get("subscriptionOwnerId"),
            "invoiceOwnerId": obj.get("invoiceOwnerId"),
            "externallyManagedPlanId": obj.get("externallyManagedPlanId"),
            "originalRatePlanId": obj.get("originalRatePlanId"),
            "subscriptionOfferId": obj.get("subscriptionOfferId"),
            "subscriptionRatePlanNumber": obj.get("subscriptionRatePlanNumber"),
            "reverted": obj.get("reverted"),
            "pricingAttributes": obj.get("pricingAttributes"),
            "subscription": ExpandedSubscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "productRatePlan": ExpandedProductRatePlan.from_dict(obj["productRatePlan"]) if obj.get("productRatePlan") is not None else None,
            "ratePlanCharges": [ExpandedRatePlanCharge.from_dict(_item) for _item in obj["ratePlanCharges"]] if obj.get("ratePlanCharges") is not None else None
        }
        return _obj
from zuora_sdk.models.expanded_rate_plan_charge import ExpandedRatePlanCharge
from zuora_sdk.models.expanded_subscription import ExpandedSubscription
# TODO: Rewrite to not use raise_errors
ExpandedRatePlan.model_rebuild(raise_errors=False)


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
