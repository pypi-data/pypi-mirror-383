# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.create_taxation_item import CreateTaxationItem
from zuora_sdk.models.rev_rec_trigger import RevRecTrigger
from typing import Optional, Set
from typing_extensions import Self

class CreateDiscountItem(BaseModel):
    """
    CreateDiscountItem
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationStatus__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SyncDate__NS")
    accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code associated with the discount item. ", alias="accountingCode")
    accounts_receivable_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for accounts receivable. ", alias="accountsReceivableAccountingCode")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for adjustment liability. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="adjustmentLiabilityAccountingCode")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for adjustment revenue. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="adjustmentRevenueAccountingCode")
    amount: Decimal = Field(description="The amount of the discount item. - Should be a negative number. For example, `-10`. - Always a fixed amount no matter whether the discount charge associated with the discount item uses the [fixed-amount model or percentage model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models#Fixed_amount_model_and_percentage_model). - For tax-exclusive discount items, this amount indicates the discount item amount excluding tax. - For tax-inclusive discount items, this amount indicates the discount item amount including tax. ")
    booking_reference: Optional[StrictStr] = Field(default=None, description="The booking reference of the discount item. ", alias="bookingReference")
    charge_date: Optional[StrictStr] = Field(default=None, description="The date when the discount item is charged, in `yyyy-mm-dd hh:mm:ss` format.", alias="chargeDate")
    charge_name: Optional[StrictStr] = Field(default=None, description="The name of the charge associated with the discount item. This field is required if the `productRatePlanChargeId` field is not specified in the request body. ", alias="chargeName")
    contract_asset_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for contract asset. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="contractAssetAccountingCode")
    contract_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for contract liability. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="contractLiabilityAccountingCode")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for contract recognized revenue. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="contractRecognizedRevenueAccountingCode")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for the deferred revenue, such as Monthly Recurring Liability. **Note:** This field is only available if you have Zuora Finance enabled. ", alias="deferredRevenueAccountingCode")
    description: Optional[StrictStr] = Field(default=None, description="The description of the discount item. ")
    item_type: Optional[StrictStr] = Field(default=None, description="The type of the discount item. ", alias="itemType")
    product_rate_plan_charge_id: Optional[StrictStr] = Field(default=None, description="The ID of the product rate plan charge that the discount item is created from.  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body: - `chargeName` - `sku`  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding discount charge that [uses discount specific accounting codes, rule and segment to manage revenue](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/Manage_Discount_Charges#Use_discount_specific_accounting_codes.2C_rule_and_segment_to_manage_revenue), regardless of the values specified in the request body: - `accountingCode` - `deferredRevenueAccountingCode` - `recognizedRevenueAccountingCode`  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding invoice item charge if the discount charge DOES NOT [use discount specific accounting codes, rule and segment to manage revenue](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/Manage_Discount_Charges#Use_discount_specific_accounting_codes.2C_rule_and_segment_to_manage_revenue), regardless of the values specified in the request body: - `accountingCode` - `deferredRevenueAccountingCode` - `recognizedRevenueAccountingCode` ", alias="productRatePlanChargeId")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="The purchase order number associated with the discount item. ", alias="purchaseOrderNumber")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges. **Note:** This field is only available if you have Zuora Finance enabled. ", alias="recognizedRevenueAccountingCode")
    rev_rec_code: Optional[StrictStr] = Field(default=None, description="The revenue recognition code. ", alias="revRecCode")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(default=None, alias="revRecTriggerCondition")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(default=None, description="The name of the revenue recognition rule governing the revenue schedule. **Note:** This field is only available if you have Zuora Finance enabled. ", alias="revenueRecognitionRuleName")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU of the invoice item. The SKU of the discount item must be different from the SKU of any existing product. ")
    tax_items: Optional[List[CreateTaxationItem]] = Field(default=None, description="Container for taxation items. The maximum number of taxation items is 5.  **Note**: This field is only available only if you have Taxation enabled. ", alias="taxItems")
    unbilled_receivables_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for unbilled receivables. **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="unbilledReceivablesAccountingCode")
    unit_price: Optional[Decimal] = Field(default=None, description="The per-unit price of the discount item. If the discount charge associated with the discount item uses the percentage model, the unit price will display as a percentage amount in PDF. For example: if unit price is 5.00, it will display as 5.00% in PDF. ", alias="unitPrice")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["IntegrationId__NS", "IntegrationStatus__NS", "SyncDate__NS", "accountingCode", "accountsReceivableAccountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "amount", "bookingReference", "chargeDate", "chargeName", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "description", "itemType", "productRatePlanChargeId", "purchaseOrderNumber", "recognizedRevenueAccountingCode", "revRecCode", "revRecTriggerCondition", "revenueRecognitionRuleName", "sku", "taxItems", "unbilledReceivablesAccountingCode", "unitPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDiscountItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tax_items (list)
        _items = []
        if self.tax_items:
            for _item_tax_items in self.tax_items:
                if _item_tax_items:
                    _items.append(_item_tax_items.to_dict())
            _dict['taxItems'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDiscountItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "accountingCode": obj.get("accountingCode"),
            "accountsReceivableAccountingCode": obj.get("accountsReceivableAccountingCode"),
            "adjustmentLiabilityAccountingCode": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustmentRevenueAccountingCode": obj.get("adjustmentRevenueAccountingCode"),
            "amount": obj.get("amount"),
            "bookingReference": obj.get("bookingReference"),
            "chargeDate": obj.get("chargeDate"),
            "chargeName": obj.get("chargeName"),
            "contractAssetAccountingCode": obj.get("contractAssetAccountingCode"),
            "contractLiabilityAccountingCode": obj.get("contractLiabilityAccountingCode"),
            "contractRecognizedRevenueAccountingCode": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferredRevenueAccountingCode": obj.get("deferredRevenueAccountingCode"),
            "description": obj.get("description"),
            "itemType": obj.get("itemType"),
            "productRatePlanChargeId": obj.get("productRatePlanChargeId"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "recognizedRevenueAccountingCode": obj.get("recognizedRevenueAccountingCode"),
            "revRecCode": obj.get("revRecCode"),
            "revRecTriggerCondition": obj.get("revRecTriggerCondition"),
            "revenueRecognitionRuleName": obj.get("revenueRecognitionRuleName"),
            "sku": obj.get("sku"),
            "taxItems": [CreateTaxationItem.from_dict(_item) for _item in obj["taxItems"]] if obj.get("taxItems") is not None else None,
            "unbilledReceivablesAccountingCode": obj.get("unbilledReceivablesAccountingCode"),
            "unitPrice": obj.get("unitPrice")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
