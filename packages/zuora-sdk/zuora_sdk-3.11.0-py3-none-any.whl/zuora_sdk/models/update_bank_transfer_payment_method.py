# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zuora_sdk.models.gateway_options import GatewayOptions
from zuora_sdk.models.payment_method_request_mandate_info import PaymentMethodRequestMandateInfo
from zuora_sdk.models.payment_method_request_processing_options import PaymentMethodRequestProcessingOptions
from zuora_sdk.models.updater_payment_method_request_account_holder_info import UpdaterPaymentMethodRequestAccountHolderInfo
from typing import Optional, Set
from typing_extensions import Self

class UpdateBankTransferPaymentMethod(BaseModel):
    """
    UpdateBankTransferPaymentMethod
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_key: Optional[StrictStr] = Field(default=None, description="The ID of the customer account associated with this payment method, such as `2x92c0f859b0480f0159d3a4a6ee5bb6`.   **Note:** You can use this field to associate an orphan payment method with a customer account. If a payment method is already associated with a customer account, you cannot change the associated payment method through this operation. You cannot remove the previous account ID and leave this field empty, either.", alias="accountKey")
    auth_gateway: Optional[StrictStr] = Field(default=None, description="Specifies the ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  This field is not supported in updating Credit Card Reference Transaction payment methods. ", alias="authGateway")
    payment_gateway_number: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="The natural key for the payment gateway.", alias="paymentGatewayNumber")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency used for payment method authorization. ", alias="currencyCode")
    gateway_options: Optional[GatewayOptions] = Field(default=None, alias="gatewayOptions")
    use_default_retry_rule: Optional[StrictBool] = Field(default=None, description="Specifies whether to apply the default retry rule configured for your tenant in the Zuora Payments settings:   - To use the default retry rule, specify `true`.    - To use the custom retry rule specific to this payment method, specify `false`. ", alias="useDefaultRetryRule")
    payment_retry_window: Optional[StrictInt] = Field(default=None, description="The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours. ", alias="paymentRetryWindow")
    max_consecutive_payment_failures: Optional[StrictInt] = Field(default=None, description="An optional client parameter that can be used for validating client-side HPM parameters.  See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) for details. ", alias="maxConsecutivePaymentFailures")
    ip_address: Optional[Annotated[str, Field(strict=True, max_length=45)]] = Field(default=None, description="The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention.  If this field is passed to Zuora, Zuora directly passes it to gateways.  If the IP address length is beyond 45 characters, a validation error occurs. For validating SEPA payment methods on Stripe v2, this field is required. ", alias="ipAddress")
    processing_options: Optional[PaymentMethodRequestProcessingOptions] = Field(default=None, alias="processingOptions")
    account_holder_info: Optional[UpdaterPaymentMethodRequestAccountHolderInfo] = Field(default=None, alias="accountHolderInfo")
    mandate_info: Optional[PaymentMethodRequestMandateInfo] = Field(default=None, alias="mandateInfo")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountKey", "authGateway", "paymentGatewayNumber", "currencyCode", "gatewayOptions", "useDefaultRetryRule", "paymentRetryWindow", "maxConsecutivePaymentFailures", "ipAddress", "processingOptions", "accountHolderInfo", "mandateInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateBankTransferPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway_options
        if self.gateway_options:
            _dict['gatewayOptions'] = self.gateway_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_options
        if self.processing_options:
            _dict['processingOptions'] = self.processing_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_holder_info
        if self.account_holder_info:
            _dict['accountHolderInfo'] = self.account_holder_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mandate_info
        if self.mandate_info:
            _dict['mandateInfo'] = self.mandate_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateBankTransferPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountKey": obj.get("accountKey"),
            "authGateway": obj.get("authGateway"),
            "paymentGatewayNumber": obj.get("paymentGatewayNumber"),
            "currencyCode": obj.get("currencyCode"),
            "gatewayOptions": GatewayOptions.from_dict(obj["gatewayOptions"]) if obj.get("gatewayOptions") is not None else None,
            "useDefaultRetryRule": obj.get("useDefaultRetryRule"),
            "paymentRetryWindow": obj.get("paymentRetryWindow"),
            "maxConsecutivePaymentFailures": obj.get("maxConsecutivePaymentFailures"),
            "ipAddress": obj.get("ipAddress"),
            "processingOptions": PaymentMethodRequestProcessingOptions.from_dict(obj["processingOptions"]) if obj.get("processingOptions") is not None else None,
            "accountHolderInfo": UpdaterPaymentMethodRequestAccountHolderInfo.from_dict(obj["accountHolderInfo"]) if obj.get("accountHolderInfo") is not None else None,
            "mandateInfo": PaymentMethodRequestMandateInfo.from_dict(obj["mandateInfo"]) if obj.get("mandateInfo") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
