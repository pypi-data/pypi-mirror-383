# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExpandedPaymentRun(BaseModel):
    """
    ExpandedPaymentRun
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    executed_date: Optional[StrictStr] = Field(default=None, alias="executedDate")
    number_of_credit_balance_adjustments: Optional[StrictInt] = Field(default=None, alias="numberOfCreditBalanceAdjustments")
    number_of_errors: Optional[StrictInt] = Field(default=None, alias="numberOfErrors")
    number_of_invoices: Optional[StrictInt] = Field(default=None, alias="numberOfInvoices")
    number_of_payments: Optional[StrictInt] = Field(default=None, alias="numberOfPayments")
    number_of_unprocessed: Optional[StrictInt] = Field(default=None, alias="numberOfUnprocessed")
    payment_run_number: Optional[StrictStr] = Field(default=None, alias="paymentRunNumber")
    status: Optional[StrictStr] = None
    target_date: Optional[date] = Field(default=None, alias="targetDate")
    apply_credit_balance: Optional[StrictBool] = Field(default=None, alias="applyCreditBalance")
    consolidated_payment: Optional[StrictBool] = Field(default=None, alias="consolidatedPayment")
    process_payment_with_closed_pm: Optional[StrictBool] = Field(default=None, alias="processPaymentWithClosedPM")
    collect_payment: Optional[StrictBool] = Field(default=None, alias="collectPayment")
    auto_apply_credit_memo: Optional[StrictBool] = Field(default=None, alias="autoApplyCreditMemo")
    auto_apply_unapplied_payment: Optional[StrictBool] = Field(default=None, alias="autoApplyUnappliedPayment")
    number_of_credit_memos: Optional[StrictInt] = Field(default=None, alias="numberOfCreditMemos")
    number_of_debit_memos: Optional[StrictInt] = Field(default=None, alias="numberOfDebitMemos")
    number_of_debit_memos_unprocessed: Optional[StrictInt] = Field(default=None, alias="numberOfDebitMemosUnprocessed")
    numberof_unapplied_payments: Optional[StrictInt] = Field(default=None, alias="numberofUnappliedPayments")
    total_execution_time: Optional[StrictInt] = Field(default=None, alias="totalExecutionTime")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    run_date: Optional[date] = Field(default=None, alias="runDate")
    next_run_on: Optional[date] = Field(default=None, alias="nextRunOn")
    repeat_type: Optional[StrictStr] = Field(default=None, alias="repeatType")
    repeat_from: Optional[StrictStr] = Field(default=None, alias="repeatFrom")
    repeat_to: Optional[StrictStr] = Field(default=None, alias="repeatTo")
    run_time: Optional[StrictInt] = Field(default=None, alias="runTime")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    monthly_on_day: Optional[StrictStr] = Field(default=None, alias="monthlyOnDay")
    weekly_on_day: Optional[StrictStr] = Field(default=None, alias="weeklyOnDay")
    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    batch: Optional[StrictStr] = None
    billing_cycle_day: Optional[StrictStr] = Field(default=None, alias="billingCycleDay")
    currency: Optional[StrictStr] = None
    payment_gateway_id: Optional[StrictStr] = Field(default=None, alias="paymentGatewayId")
    billing_run_id: Optional[StrictStr] = Field(default=None, alias="billingRunId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createdById", "createdDate", "updatedById", "updatedDate", "endDate", "executedDate", "numberOfCreditBalanceAdjustments", "numberOfErrors", "numberOfInvoices", "numberOfPayments", "numberOfUnprocessed", "paymentRunNumber", "status", "targetDate", "applyCreditBalance", "consolidatedPayment", "processPaymentWithClosedPM", "collectPayment", "autoApplyCreditMemo", "autoApplyUnappliedPayment", "numberOfCreditMemos", "numberOfDebitMemos", "numberOfDebitMemosUnprocessed", "numberofUnappliedPayments", "totalExecutionTime", "errorMessage", "runDate", "nextRunOn", "repeatType", "repeatFrom", "repeatTo", "runTime", "timeZone", "monthlyOnDay", "weeklyOnDay", "accountId", "batch", "billingCycleDay", "currency", "paymentGatewayId", "billingRunId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedPaymentRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedPaymentRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "endDate": obj.get("endDate"),
            "executedDate": obj.get("executedDate"),
            "numberOfCreditBalanceAdjustments": obj.get("numberOfCreditBalanceAdjustments"),
            "numberOfErrors": obj.get("numberOfErrors"),
            "numberOfInvoices": obj.get("numberOfInvoices"),
            "numberOfPayments": obj.get("numberOfPayments"),
            "numberOfUnprocessed": obj.get("numberOfUnprocessed"),
            "paymentRunNumber": obj.get("paymentRunNumber"),
            "status": obj.get("status"),
            "targetDate": obj.get("targetDate"),
            "applyCreditBalance": obj.get("applyCreditBalance"),
            "consolidatedPayment": obj.get("consolidatedPayment"),
            "processPaymentWithClosedPM": obj.get("processPaymentWithClosedPM"),
            "collectPayment": obj.get("collectPayment"),
            "autoApplyCreditMemo": obj.get("autoApplyCreditMemo"),
            "autoApplyUnappliedPayment": obj.get("autoApplyUnappliedPayment"),
            "numberOfCreditMemos": obj.get("numberOfCreditMemos"),
            "numberOfDebitMemos": obj.get("numberOfDebitMemos"),
            "numberOfDebitMemosUnprocessed": obj.get("numberOfDebitMemosUnprocessed"),
            "numberofUnappliedPayments": obj.get("numberofUnappliedPayments"),
            "totalExecutionTime": obj.get("totalExecutionTime"),
            "errorMessage": obj.get("errorMessage"),
            "runDate": obj.get("runDate"),
            "nextRunOn": obj.get("nextRunOn"),
            "repeatType": obj.get("repeatType"),
            "repeatFrom": obj.get("repeatFrom"),
            "repeatTo": obj.get("repeatTo"),
            "runTime": obj.get("runTime"),
            "timeZone": obj.get("timeZone"),
            "monthlyOnDay": obj.get("monthlyOnDay"),
            "weeklyOnDay": obj.get("weeklyOnDay"),
            "accountId": obj.get("accountId"),
            "batch": obj.get("batch"),
            "billingCycleDay": obj.get("billingCycleDay"),
            "currency": obj.get("currency"),
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "billingRunId": obj.get("billingRunId")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
