# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ExpandedPayment(BaseModel):
    """
    ExpandedPayment
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    accounting_code: Optional[StrictStr] = Field(default=None, alias="accountingCode")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    applied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="appliedAmount")
    applied_credit_balance_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="appliedCreditBalanceAmount")
    auth_transaction_id: Optional[StrictStr] = Field(default=None, alias="authTransactionId")
    bank_identification_number: Optional[StrictStr] = Field(default=None, alias="bankIdentificationNumber")
    cancelled_on: Optional[StrictStr] = Field(default=None, alias="cancelledOn")
    comment: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    effective_date: Optional[date] = Field(default=None, alias="effectiveDate")
    gateway_order_id: Optional[StrictStr] = Field(default=None, alias="gatewayOrderId")
    gateway_reconciliation_reason: Optional[StrictStr] = Field(default=None, alias="gatewayReconciliationReason")
    gateway_reconciliation_status: Optional[StrictStr] = Field(default=None, alias="gatewayReconciliationStatus")
    gateway_response: Optional[StrictStr] = Field(default=None, alias="gatewayResponse")
    gateway_response_code: Optional[StrictStr] = Field(default=None, alias="gatewayResponseCode")
    gateway_state: Optional[StrictStr] = Field(default=None, alias="gatewayState")
    gateway_transaction_state: Optional[StrictStr] = Field(default=None, alias="gatewayTransactionState")
    is_standalone: Optional[StrictBool] = Field(default=None, alias="isStandalone")
    marked_for_submission_on: Optional[StrictStr] = Field(default=None, alias="markedForSubmissionOn")
    payment_method_id: Optional[StrictStr] = Field(default=None, alias="paymentMethodId")
    payment_method_snapshot_id: Optional[StrictStr] = Field(default=None, alias="paymentMethodSnapshotId")
    payment_option_id: Optional[StrictStr] = Field(default=None, alias="paymentOptionId")
    payment_number: Optional[StrictStr] = Field(default=None, alias="paymentNumber")
    payout_id: Optional[StrictStr] = Field(default=None, alias="payoutId")
    prepayment: Optional[StrictBool] = None
    referenced_payment_id: Optional[StrictStr] = Field(default=None, alias="referencedPaymentID")
    reference_id: Optional[StrictStr] = Field(default=None, alias="referenceId")
    refund_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="refundAmount")
    second_payment_reference_id: Optional[StrictStr] = Field(default=None, alias="secondPaymentReferenceId")
    settled_on: Optional[StrictStr] = Field(default=None, alias="settledOn")
    soft_descriptor: Optional[StrictStr] = Field(default=None, alias="softDescriptor")
    soft_descriptor_phone: Optional[StrictStr] = Field(default=None, alias="softDescriptorPhone")
    source: Optional[StrictStr] = None
    source_name: Optional[StrictStr] = Field(default=None, alias="sourceName")
    status: Optional[StrictStr] = None
    submitted_on: Optional[StrictStr] = Field(default=None, alias="submittedOn")
    transferred_to_accounting: Optional[StrictStr] = Field(default=None, alias="transferredToAccounting")
    transaction_source: Optional[StrictStr] = Field(default=None, alias="transactionSource")
    type: Optional[StrictStr] = None
    unapplied_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unappliedAmount")
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    last_email_date_time: Optional[StrictStr] = Field(default=None, alias="lastEmailDateTime")
    gateway_routing_execution_id: Optional[StrictStr] = Field(default=None, alias="gatewayRoutingExecutionId")
    gateway: Optional[StrictStr] = None
    account: Optional[ExpandedAccount] = None
    payment_method: Optional[ExpandedPaymentMethod] = Field(default=None, alias="paymentMethod")
    payment_applications: Optional[List[ExpandedPaymentApplication]] = Field(default=None, alias="paymentApplications")
    payment_schedule_item_payments: Optional[List[ExpandedPaymentScheduleItemPayment]] = Field(default=None, alias="paymentScheduleItemPayments")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "accountingCode", "amount", "appliedAmount", "appliedCreditBalanceAmount", "authTransactionId", "bankIdentificationNumber", "cancelledOn", "comment", "currency", "effectiveDate", "gatewayOrderId", "gatewayReconciliationReason", "gatewayReconciliationStatus", "gatewayResponse", "gatewayResponseCode", "gatewayState", "gatewayTransactionState", "isStandalone", "markedForSubmissionOn", "paymentMethodId", "paymentMethodSnapshotId", "paymentOptionId", "paymentNumber", "payoutId", "prepayment", "referencedPaymentID", "referenceId", "refundAmount", "secondPaymentReferenceId", "settledOn", "softDescriptor", "softDescriptorPhone", "source", "sourceName", "status", "submittedOn", "transferredToAccounting", "transactionSource", "type", "unappliedAmount", "id", "createdById", "createdDate", "updatedById", "updatedDate", "lastEmailDateTime", "gatewayRoutingExecutionId", "gateway", "account", "paymentMethod", "paymentApplications", "paymentScheduleItemPayments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['paymentMethod'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_applications (list)
        _items = []
        if self.payment_applications:
            for _item_payment_applications in self.payment_applications:
                if _item_payment_applications:
                    _items.append(_item_payment_applications.to_dict())
            _dict['paymentApplications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payment_schedule_item_payments (list)
        _items = []
        if self.payment_schedule_item_payments:
            for _item_payment_schedule_item_payments in self.payment_schedule_item_payments:
                if _item_payment_schedule_item_payments:
                    _items.append(_item_payment_schedule_item_payments.to_dict())
            _dict['paymentScheduleItemPayments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "accountingCode": obj.get("accountingCode"),
            "amount": obj.get("amount"),
            "appliedAmount": obj.get("appliedAmount"),
            "appliedCreditBalanceAmount": obj.get("appliedCreditBalanceAmount"),
            "authTransactionId": obj.get("authTransactionId"),
            "bankIdentificationNumber": obj.get("bankIdentificationNumber"),
            "cancelledOn": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "currency": obj.get("currency"),
            "effectiveDate": obj.get("effectiveDate"),
            "gatewayOrderId": obj.get("gatewayOrderId"),
            "gatewayReconciliationReason": obj.get("gatewayReconciliationReason"),
            "gatewayReconciliationStatus": obj.get("gatewayReconciliationStatus"),
            "gatewayResponse": obj.get("gatewayResponse"),
            "gatewayResponseCode": obj.get("gatewayResponseCode"),
            "gatewayState": obj.get("gatewayState"),
            "gatewayTransactionState": obj.get("gatewayTransactionState"),
            "isStandalone": obj.get("isStandalone"),
            "markedForSubmissionOn": obj.get("markedForSubmissionOn"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "paymentMethodSnapshotId": obj.get("paymentMethodSnapshotId"),
            "paymentOptionId": obj.get("paymentOptionId"),
            "paymentNumber": obj.get("paymentNumber"),
            "payoutId": obj.get("payoutId"),
            "prepayment": obj.get("prepayment"),
            "referencedPaymentID": obj.get("referencedPaymentID"),
            "referenceId": obj.get("referenceId"),
            "refundAmount": obj.get("refundAmount"),
            "secondPaymentReferenceId": obj.get("secondPaymentReferenceId"),
            "settledOn": obj.get("settledOn"),
            "softDescriptor": obj.get("softDescriptor"),
            "softDescriptorPhone": obj.get("softDescriptorPhone"),
            "source": obj.get("source"),
            "sourceName": obj.get("sourceName"),
            "status": obj.get("status"),
            "submittedOn": obj.get("submittedOn"),
            "transferredToAccounting": obj.get("transferredToAccounting"),
            "transactionSource": obj.get("transactionSource"),
            "type": obj.get("type"),
            "unappliedAmount": obj.get("unappliedAmount"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "lastEmailDateTime": obj.get("lastEmailDateTime"),
            "gatewayRoutingExecutionId": obj.get("gatewayRoutingExecutionId"),
            "gateway": obj.get("gateway"),
            "account": ExpandedAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "paymentMethod": ExpandedPaymentMethod.from_dict(obj["paymentMethod"]) if obj.get("paymentMethod") is not None else None,
            "paymentApplications": [ExpandedPaymentApplication.from_dict(_item) for _item in obj["paymentApplications"]] if obj.get("paymentApplications") is not None else None,
            "paymentScheduleItemPayments": [ExpandedPaymentScheduleItemPayment.from_dict(_item) for _item in obj["paymentScheduleItemPayments"]] if obj.get("paymentScheduleItemPayments") is not None else None
        }
        return _obj
from zuora_sdk.models.expanded_account import ExpandedAccount
from zuora_sdk.models.expanded_payment_application import ExpandedPaymentApplication
from zuora_sdk.models.expanded_payment_method import ExpandedPaymentMethod
from zuora_sdk.models.expanded_payment_schedule_item_payment import ExpandedPaymentScheduleItemPayment
# TODO: Rewrite to not use raise_errors
ExpandedPayment.model_rebuild(raise_errors=False)


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
