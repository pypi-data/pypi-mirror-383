# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.credit_memo_item_from_write_off_invoice import CreditMemoItemFromWriteOffInvoice
from typing import Optional, Set
from typing_extensions import Self

class WriteOffInvoiceRequest(BaseModel):
    """
    WriteOffInvoiceRequest
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationStatus__NS")
    origin__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="Origin__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SyncDate__NS")
    transaction__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="Transaction__NS")
    comment: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Comments about the write-off. The comment is used as the comment of the credit memo generated by writing off the specified invoice. ")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    tax_auto_calculation: Optional[StrictBool] = Field(default=None, description="Whether to automatically calculate taxes in the credit memo.", alias="taxAutoCalculation")
    revenue_impacting: Optional[StrictStr] = Field(default='Yes', alias="revenueImpacting")
    non_revenue_write_off_accounting_code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, alias="nonRevenueWriteOffAccountingCode")
    items: Optional[List[CreditMemoItemFromWriteOffInvoice]] = Field(default=None, description="Container for items. This field is optional.  **Note:** If specified, you must specify ALL the items of the invoice. The entire balance of the invoice will be written off, you cannot just write off some items of the invoice. ")
    memo_date: Optional[date] = Field(default=None, description="The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.  The default value is the date when you write off the invoice. ", alias="memoDate")
    reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code `Write-off`. ", alias="reasonCode")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["IntegrationId__NS", "IntegrationStatus__NS", "Origin__NS", "SyncDate__NS", "Transaction__NS", "comment", "amount", "taxAutoCalculation", "revenueImpacting", "nonRevenueWriteOffAccountingCode", "items", "memoDate", "reasonCode"]

    @field_validator('revenue_impacting')
    def revenue_impacting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Yes', 'No']):
            raise ValueError("must be one of enum values ('Yes', 'No')")
        return value

    @field_validator('memo_date')
    def memo_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d{4}-\d{1,2}-\d{1,2}", value):
            raise ValueError(r"must validate the regular expression /\d{4}-\d{1,2}-\d{1,2}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WriteOffInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WriteOffInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "Origin__NS": obj.get("Origin__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "Transaction__NS": obj.get("Transaction__NS"),
            "comment": obj.get("comment"),
            "amount": obj.get("amount"),
            "taxAutoCalculation": obj.get("taxAutoCalculation"),
            "revenueImpacting": obj.get("revenueImpacting") if obj.get("revenueImpacting") is not None else 'Yes',
            "nonRevenueWriteOffAccountingCode": obj.get("nonRevenueWriteOffAccountingCode"),
            "items": [CreditMemoItemFromWriteOffInvoice.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "memoDate": obj.get("memoDate"),
            "reasonCode": obj.get("reasonCode")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
