# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from zuora_sdk.models.gateway_state import GatewayState
from zuora_sdk.models.get_refund_credit_memo_finance_information import GetRefundCreditMemoFinanceInformation
from zuora_sdk.models.payment_method_type import PaymentMethodType
from typing import Optional, Set
from typing_extensions import Self

class RefundCreditMemoResponse(BaseModel):
    """
    RefundCreditMemoResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    integration_id__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationId__NS")
    integration_status__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="IntegrationStatus__NS")
    origin__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="Origin__NS")
    sync_date__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SyncDate__NS")
    syncto_net_suite__ns: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).", alias="SynctoNetSuite__NS")
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.", alias="accountId")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the refund.")
    cancelled_on: Optional[StrictStr] = Field(default=None, description="The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.", alias="cancelledOn")
    comment: Optional[StrictStr] = Field(default=None, description="Comments about the refund.")
    created_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who created the refund.", alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, description="The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.", alias="createdDate")
    credit_memo_id: Optional[StrictStr] = Field(default=None, description="The ID of the credit memo that is refunded.", alias="creditMemoId")
    finance_information: Optional[GetRefundCreditMemoFinanceInformation] = Field(default=None, alias="financeInformation")
    gateway_id: Optional[StrictStr] = Field(default=None, description="The ID of the gateway instance that processes the refund.", alias="gatewayId")
    gateway_response: Optional[StrictStr] = Field(default=None, description="The message returned from the payment gateway for the refund. This message is gateway-dependent.", alias="gatewayResponse")
    gateway_response_code: Optional[StrictStr] = Field(default=None, description="The response code returned from the payment gateway for the refund. This code is gateway-dependent.", alias="gatewayResponseCode")
    gateway_state: Optional[StrictStr] = Field(default=None, alias="gatewayState")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the created refund.")
    marked_for_submission_on: Optional[StrictStr] = Field(default=None, description="The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.", alias="markedForSubmissionOn")
    method_type: Optional[StrictStr] = Field(default=None, alias="methodType")
    number: Optional[StrictStr] = Field(default=None, description="The unique identification number of the refund.")
    payment_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment associated with the refund.", alias="paymentId")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the payment method that the customer used to make the refund.", alias="paymentMethodId")
    payment_method_snapshot_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.", alias="paymentMethodSnapshotId")
    reason_code: Optional[StrictStr] = Field(default=None, description="A code identifying the reason for the transaction.", alias="reasonCode")
    reference_id: Optional[StrictStr] = Field(default=None, description="The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.", alias="referenceId")
    refund_date: Optional[StrictStr] = Field(default=None, description="The date when the refund takes effect, in yyyy-mm-dd format.", alias="refundDate")
    refund_transaction_time: Optional[StrictStr] = Field(default=None, description="The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.", alias="refundTransactionTime")
    second_refund_reference_id: Optional[StrictStr] = Field(default=None, description="The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.", alias="secondRefundReferenceId")
    settled_on: Optional[datetime] = Field(default=None, description="The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.", alias="settledOn")
    soft_descriptor: Optional[StrictStr] = Field(default=None, description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.", alias="softDescriptor")
    soft_descriptor_phone: Optional[StrictStr] = Field(default=None, description="A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.", alias="softDescriptorPhone")
    status: Optional[StrictStr] = Field(default=None, description="The status of the refund.")
    submitted_on: Optional[StrictStr] = Field(default=None, description="The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.", alias="submittedOn")
    success: Optional[StrictBool] = Field(default=None, description="Returns `true` if the request was processed successfully.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the refund.")
    updated_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the Zuora user who last updated the refund.", alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, description="The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.", alias="updatedDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["IntegrationId__NS", "IntegrationStatus__NS", "Origin__NS", "SyncDate__NS", "SynctoNetSuite__NS", "accountId", "amount", "cancelledOn", "comment", "createdById", "createdDate", "creditMemoId", "financeInformation", "gatewayId", "gatewayResponse", "gatewayResponseCode", "gatewayState", "id", "markedForSubmissionOn", "methodType", "number", "paymentId", "paymentMethodId", "paymentMethodSnapshotId", "reasonCode", "referenceId", "refundDate", "refundTransactionTime", "secondRefundReferenceId", "settledOn", "softDescriptor", "softDescriptorPhone", "status", "submittedOn", "success", "type", "updatedById", "updatedDate"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Processed', 'Canceled', 'Error', 'Processing']):
            raise ValueError("must be one of enum values ('Processed', 'Canceled', 'Error', 'Processing')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['External', 'Electronic']):
            raise ValueError("must be one of enum values ('External', 'Electronic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundCreditMemoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of finance_information
        if self.finance_information:
            _dict['financeInformation'] = self.finance_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundCreditMemoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "IntegrationId__NS": obj.get("IntegrationId__NS"),
            "IntegrationStatus__NS": obj.get("IntegrationStatus__NS"),
            "Origin__NS": obj.get("Origin__NS"),
            "SyncDate__NS": obj.get("SyncDate__NS"),
            "SynctoNetSuite__NS": obj.get("SynctoNetSuite__NS"),
            "accountId": obj.get("accountId"),
            "amount": obj.get("amount"),
            "cancelledOn": obj.get("cancelledOn"),
            "comment": obj.get("comment"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "creditMemoId": obj.get("creditMemoId"),
            "financeInformation": GetRefundCreditMemoFinanceInformation.from_dict(obj["financeInformation"]) if obj.get("financeInformation") is not None else None,
            "gatewayId": obj.get("gatewayId"),
            "gatewayResponse": obj.get("gatewayResponse"),
            "gatewayResponseCode": obj.get("gatewayResponseCode"),
            "gatewayState": obj.get("gatewayState"),
            "id": obj.get("id"),
            "markedForSubmissionOn": obj.get("markedForSubmissionOn"),
            "methodType": obj.get("methodType"),
            "number": obj.get("number"),
            "paymentId": obj.get("paymentId"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "paymentMethodSnapshotId": obj.get("paymentMethodSnapshotId"),
            "reasonCode": obj.get("reasonCode"),
            "referenceId": obj.get("referenceId"),
            "refundDate": obj.get("refundDate"),
            "refundTransactionTime": obj.get("refundTransactionTime"),
            "secondRefundReferenceId": obj.get("secondRefundReferenceId"),
            "settledOn": obj.get("settledOn"),
            "softDescriptor": obj.get("softDescriptor"),
            "softDescriptorPhone": obj.get("softDescriptorPhone"),
            "status": obj.get("status"),
            "submittedOn": obj.get("submittedOn"),
            "success": obj.get("success"),
            "type": obj.get("type"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
