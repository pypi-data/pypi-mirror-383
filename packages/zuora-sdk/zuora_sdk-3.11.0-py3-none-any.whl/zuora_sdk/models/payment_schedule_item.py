# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.payment_schedule_billing_document import PaymentScheduleBillingDocument
from zuora_sdk.models.payment_schedule_linked_payment_id import PaymentScheduleLinkedPaymentID
from zuora_sdk.models.payment_schedule_payment_option_fields import PaymentSchedulePaymentOptionFields
from typing import Optional, Set
from typing_extensions import Self

class PaymentScheduleItem(BaseModel):
    """
    PaymentScheduleItem
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    account_id: Optional[StrictStr] = Field(default=None, description="ID of the customer account that owns the payment schedule item, for example `402880e741112b310149b7343ef81234`.", alias="accountId")
    amount: Optional[Decimal] = Field(default=None, description="The total amount of the payment schedule. ")
    balance: Optional[Decimal] = Field(default=None, description="The remaining balance of payment schedule item. ")
    billing_document: Optional[PaymentScheduleBillingDocument] = Field(default=None, alias="billingDocument")
    cancellation_reason: Optional[StrictStr] = Field(default=None, description="The reason for the cancellation of payment schedule item. ", alias="cancellationReason")
    cancelled_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the user who cancel the payment schedule item. ", alias="cancelledById")
    cancelled_on: Optional[StrictStr] = Field(default=None, description="The date and time when the payment schedule item was cancelled. ", alias="cancelledOn")
    created_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the user who created the payment schedule item. ", alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, description="The date and time when the payment schedule item was created. ", alias="createdDate")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the payment. ")
    description: Optional[StrictStr] = Field(default=None, description="The description of the payment schedule item. ")
    error_message: Optional[StrictStr] = Field(default=None, description="The error message indicating if the error is related to the configuration or the payment collection.", alias="errorMessage")
    id: Optional[StrictStr] = Field(default=None, description="ID of the payment schedule item. For example, `412880e749b72b310149b7343ef81346`.")
    number: Optional[StrictStr] = Field(default=None, description="Number of the payment schedule item. ")
    payment_gateway_id: Optional[StrictStr] = Field(default=None, description="ID of the payment gateway of the payment schedule item. ", alias="paymentGatewayId")
    payment_id: Optional[StrictStr] = Field(default=None, description="ID of the payment that is created by the payment schedule item, or linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`.  ", alias="paymentId")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="ID of the payment method of the payment schedule item. ", alias="paymentMethodId")
    payment_option: Optional[List[PaymentSchedulePaymentOptionFields]] = Field(default=None, description="Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.   `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.   This field is only available if `zuora-version` is set to `337.0` or later.", alias="paymentOption")
    payment_schedule_id: Optional[StrictStr] = Field(default=None, description="ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`.", alias="paymentScheduleId")
    payment_schedule_number: Optional[StrictStr] = Field(default=None, description="Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`.", alias="paymentScheduleNumber")
    psi_payments: Optional[List[PaymentScheduleLinkedPaymentID]] = Field(default=None, description="Container for payments linked to the payment schedule item. ", alias="psiPayments")
    run_hour: Optional[StrictInt] = Field(default=None, description="At which hour in the day in the tenant’s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.", alias="runHour")
    scheduled_date: Optional[StrictStr] = Field(default=None, description="The scheduled date when the payment is processed. ", alias="scheduledDate")
    standalone: Optional[StrictBool] = Field(default=None, description="Indicates if the payment created by the payment schedule item is a standalone payment or not.")
    status: Optional[StrictStr] = Field(default=None, description="ID of the payment method of the payment schedule item.   - `Pending`: Payment schedule item is waiting for processing.  - `Processed`: The payment has been collected.  - `Error`: Failed to collect the payment.  - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`.")
    updated_by_id: Optional[StrictStr] = Field(default=None, description="The ID of the user who updated the payment schedule item. ", alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, description="The date and time when the payment schedule item was last updated. ", alias="updatedDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountId", "amount", "balance", "billingDocument", "cancellationReason", "cancelledById", "cancelledOn", "createdById", "createdDate", "currency", "description", "errorMessage", "id", "number", "paymentGatewayId", "paymentId", "paymentMethodId", "paymentOption", "paymentScheduleId", "paymentScheduleNumber", "psiPayments", "runHour", "scheduledDate", "standalone", "status", "updatedById", "updatedDate"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Processed', 'Error', 'Canceled']):
            raise ValueError("must be one of enum values ('Pending', 'Processed', 'Error', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentScheduleItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_document
        if self.billing_document:
            _dict['billingDocument'] = self.billing_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_option (list)
        _items = []
        if self.payment_option:
            for _item_payment_option in self.payment_option:
                if _item_payment_option:
                    _items.append(_item_payment_option.to_dict())
            _dict['paymentOption'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in psi_payments (list)
        _items = []
        if self.psi_payments:
            for _item_psi_payments in self.psi_payments:
                if _item_psi_payments:
                    _items.append(_item_psi_payments.to_dict())
            _dict['psiPayments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentScheduleItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountId": obj.get("accountId"),
            "amount": obj.get("amount"),
            "balance": obj.get("balance"),
            "billingDocument": PaymentScheduleBillingDocument.from_dict(obj["billingDocument"]) if obj.get("billingDocument") is not None else None,
            "cancellationReason": obj.get("cancellationReason"),
            "cancelledById": obj.get("cancelledById"),
            "cancelledOn": obj.get("cancelledOn"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "errorMessage": obj.get("errorMessage"),
            "id": obj.get("id"),
            "number": obj.get("number"),
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "paymentId": obj.get("paymentId"),
            "paymentMethodId": obj.get("paymentMethodId"),
            "paymentOption": [PaymentSchedulePaymentOptionFields.from_dict(_item) for _item in obj["paymentOption"]] if obj.get("paymentOption") is not None else None,
            "paymentScheduleId": obj.get("paymentScheduleId"),
            "paymentScheduleNumber": obj.get("paymentScheduleNumber"),
            "psiPayments": [PaymentScheduleLinkedPaymentID.from_dict(_item) for _item in obj["psiPayments"]] if obj.get("psiPayments") is not None else None,
            "runHour": obj.get("runHour"),
            "scheduledDate": obj.get("scheduledDate"),
            "standalone": obj.get("standalone"),
            "status": obj.get("status"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
