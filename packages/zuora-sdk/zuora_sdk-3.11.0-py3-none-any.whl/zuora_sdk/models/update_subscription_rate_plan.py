# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.update_rate_plan_charge import UpdateRatePlanCharge
from typing import Optional, Set
from typing_extensions import Self

class UpdateSubscriptionRatePlan(BaseModel):
    """
    UpdateSubscriptionRatePlan
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    booking_date: Optional[date] = Field(default=None, description="The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.  ", alias="bookingDate")
    charge_update_details: Optional[List[UpdateRatePlanCharge]] = Field(default=None, description="Container for one or more product rate plan charges.  ", alias="chargeUpdateDetails")
    contract_effective_date: date = Field(description="The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect. ", alias="contractEffectiveDate")
    customer_acceptance_date: Optional[date] = Field(default=None, description="The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ", alias="customerAcceptanceDate")
    external_catalog_plan_id: Optional[StrictStr] = Field(default=None, description="An external ID of the rate plan to be updated. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to update the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ", alias="externalCatalogPlanId")
    external_id_source_system: Optional[StrictStr] = Field(default=None, description="The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail. ", alias="externalIdSourceSystem")
    externally_managed_plan_id: Optional[StrictStr] = Field(default=None, description="Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores. ", alias="externallyManagedPlanId")
    product_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a product rate plan for this subscription. ", alias="productRatePlanNumber")
    rate_plan_id: Optional[StrictStr] = Field(default=None, description="ID of a rate plan for this subscription. This can be the latest version or any history version of ID. ", alias="ratePlanId")
    service_activation_date: Optional[date] = Field(default=None, description="The date when the update amendment is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate ", alias="serviceActivationDate")
    specific_update_date: Optional[date] = Field(default=None, description="The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.  Required only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription. ", alias="specificUpdateDate")
    subscription_rate_plan_number: Optional[StrictStr] = Field(default=None, description="Number of a rate plan for this subscription. ", alias="subscriptionRatePlanNumber")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["bookingDate", "chargeUpdateDetails", "contractEffectiveDate", "customerAcceptanceDate", "externalCatalogPlanId", "externalIdSourceSystem", "externallyManagedPlanId", "productRatePlanNumber", "ratePlanId", "serviceActivationDate", "specificUpdateDate", "subscriptionRatePlanNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSubscriptionRatePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charge_update_details (list)
        _items = []
        if self.charge_update_details:
            for _item_charge_update_details in self.charge_update_details:
                if _item_charge_update_details:
                    _items.append(_item_charge_update_details.to_dict())
            _dict['chargeUpdateDetails'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSubscriptionRatePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "bookingDate": obj.get("bookingDate"),
            "chargeUpdateDetails": [UpdateRatePlanCharge.from_dict(_item) for _item in obj["chargeUpdateDetails"]] if obj.get("chargeUpdateDetails") is not None else None,
            "contractEffectiveDate": obj.get("contractEffectiveDate"),
            "customerAcceptanceDate": obj.get("customerAcceptanceDate"),
            "externalCatalogPlanId": obj.get("externalCatalogPlanId"),
            "externalIdSourceSystem": obj.get("externalIdSourceSystem"),
            "externallyManagedPlanId": obj.get("externallyManagedPlanId"),
            "productRatePlanNumber": obj.get("productRatePlanNumber"),
            "ratePlanId": obj.get("ratePlanId"),
            "serviceActivationDate": obj.get("serviceActivationDate"),
            "specificUpdateDate": obj.get("specificUpdateDate"),
            "subscriptionRatePlanNumber": obj.get("subscriptionRatePlanNumber")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
