# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.create_authorization_response_payment_gateway import CreateAuthorizationResponsePaymentGateway
from zuora_sdk.models.create_authorization_response_reasons import CreateAuthorizationResponseReasons
from typing import Optional, Set
from typing_extensions import Self

class CreateAuthorizationResponse(BaseModel):
    """
    CreateAuthorizationResponse
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    gateway_order_id: Optional[StrictStr] = Field(default=None, description="The order ID for the specific gateway.   The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.", alias="gatewayOrderId")
    payment_gateway_response: Optional[CreateAuthorizationResponsePaymentGateway] = Field(default=None, alias="paymentGatewayResponse")
    process_id: Optional[StrictStr] = Field(default=None, description="The ID of the running process when the exception occurs. This field is available only if the `success` field is `false`.", alias="processId")
    reasons: Optional[List[CreateAuthorizationResponseReasons]] = Field(default=None, description="The container of the error code and message. This field is available only if the `success` field is `false`.")
    request_id: Optional[StrictStr] = Field(default=None, description="The ID of the request. This field is available only if the `success` field is `false`", alias="requestId")
    result_code: Optional[StrictStr] = Field(default=None, description="The result code of the request.    0 indicates that the request succeeded, and the following values indicate that the request failed:   - 1: The request is declined.   - 7: The field format is not correct.   - 10: Client connection has timed out.   - 11: Host connection has timed out.   - 12: Processor connection has timed out.   - 13: Gateway server is busy.   - 20: The card type is not supported.   - 21: The merchant account information is invalid.   - 22: A generic error occurred on the processor.   - 40: The card type has not been set up yet.   - 41: The limit for a single transaction is exceeded.   - 42: Address checking failed.   - 43: Card security code checking failed.   - 44: Failed due to the gateway security setting.   - 45: Fraud protection is declined.   - 46: Address checking or card security code checking failed (for Authorize.net gateway only).   - 47: The maximum amount is exceeded (for Authorize.net gateway only).   - 48: The IP address is blocked by the gateway (for Authorize.net gateway only).   - 49: Card security code checking failed (for Authorize.net gateway only).   - 60: User authentication failed.   - 61: The currency code is invalid.   - 62: The transaction ID is invalid.   - 63: The credit card number is invalid.   - 64: The card expiration date is invalid.   - 65: The transaction is duplicated.   - 66: Credit transaction error.   - 67: Void transaction error.   - 90: A valid amount is required.   - 91: The BA code is invalid.   - 92: The account number is invalid.   - 93: The ACH transaction is not accepted by the merchant.   - 94: An error occurred for the ACH transaction.   - 95: The version parameter is invalid.   - 96: The transaction type is invalid.   - 97: The transaction method is invalid.   - 98: The bank account type is invalid.   - 99: The authorization code is invalid.   - 200: General transaction error.   - 500: The transaction is queued for submission.   - 999: Unknown error.   - -1: An error occurred in gateway communication.   - -2: Idempotency is not supported.   - -3: Inquiry call is not supported.", alias="resultCode")
    result_message: Optional[StrictStr] = Field(default=None, description="The corresponding request ID.", alias="resultMessage")
    success: Optional[StrictBool] = Field(default=None, description="Indicates whether the call succeeded.")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the transaction.", alias="transactionId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["gatewayOrderId", "paymentGatewayResponse", "processId", "reasons", "requestId", "resultCode", "resultMessage", "success", "transactionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAuthorizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_gateway_response
        if self.payment_gateway_response:
            _dict['paymentGatewayResponse'] = self.payment_gateway_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAuthorizationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "gatewayOrderId": obj.get("gatewayOrderId"),
            "paymentGatewayResponse": CreateAuthorizationResponsePaymentGateway.from_dict(obj["paymentGatewayResponse"]) if obj.get("paymentGatewayResponse") is not None else None,
            "processId": obj.get("processId"),
            "reasons": [CreateAuthorizationResponseReasons.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "requestId": obj.get("requestId"),
            "resultCode": obj.get("resultCode"),
            "resultMessage": obj.get("resultMessage"),
            "success": obj.get("success"),
            "transactionId": obj.get("transactionId")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
