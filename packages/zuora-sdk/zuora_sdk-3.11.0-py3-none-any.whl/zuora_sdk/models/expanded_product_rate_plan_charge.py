# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ExpandedProductRatePlanCharge(BaseModel):
    """
    ExpandedProductRatePlanCharge
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    accounting_code: Optional[StrictStr] = Field(default=None, alias="accountingCode")
    apply_discount_to: Optional[StrictStr] = Field(default=None, alias="applyDiscountTo")
    bill_cycle_day: Optional[StrictInt] = Field(default=None, alias="billCycleDay")
    bill_cycle_type: Optional[StrictStr] = Field(default=None, alias="billCycleType")
    billing_period: Optional[StrictStr] = Field(default=None, alias="billingPeriod")
    billing_period_alignment: Optional[StrictStr] = Field(default=None, alias="billingPeriodAlignment")
    billing_timing: Optional[StrictStr] = Field(default=None, alias="billingTiming")
    charge_function: Optional[StrictStr] = Field(default=None, alias="chargeFunction")
    charge_model: Optional[StrictStr] = Field(default=None, alias="chargeModel")
    charge_type: Optional[StrictStr] = Field(default=None, alias="chargeType")
    credit_option: Optional[StrictStr] = Field(default=None, alias="creditOption")
    default_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="defaultQuantity")
    deferred_revenue_account: Optional[StrictStr] = Field(default=None, alias="deferredRevenueAccount")
    description: Optional[StrictStr] = None
    discount_class_id: Optional[StrictStr] = Field(default=None, alias="discountClassId")
    discount_level: Optional[StrictStr] = Field(default=None, alias="discountLevel")
    drawdown_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="drawdownRate")
    end_date_condition: Optional[StrictStr] = Field(default=None, alias="endDateCondition")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(default=None, alias="excludeItemBookingFromRevenueAccounting")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, alias="excludeItemBillingFromRevenueAccounting")
    included_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="includedUnits")
    is_prepaid: Optional[StrictBool] = Field(default=None, alias="isPrepaid")
    is_rollover: Optional[StrictBool] = Field(default=None, alias="isRollover")
    is_stacked_discount: Optional[StrictBool] = Field(default=None, alias="isStackedDiscount")
    legacy_revenue_reporting: Optional[StrictBool] = Field(default=None, alias="legacyRevenueReporting")
    list_price_base: Optional[StrictStr] = Field(default=None, alias="listPriceBase")
    specific_list_price_base: Optional[StrictInt] = Field(default=None, alias="specificListPriceBase")
    max_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxQuantity")
    min_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minQuantity")
    name: Optional[StrictStr] = None
    number_of_period: Optional[StrictInt] = Field(default=None, alias="numberOfPeriod")
    overage_calculation_option: Optional[StrictStr] = Field(default=None, alias="overageCalculationOption")
    overage_unused_units_credit_option: Optional[StrictStr] = Field(default=None, alias="overageUnusedUnitsCreditOption")
    prepaid_operation_type: Optional[StrictStr] = Field(default=None, alias="prepaidOperationType")
    proration_option: Optional[StrictStr] = Field(default=None, alias="prorationOption")
    prepaid_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="prepaidQuantity")
    prepaid_total_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="prepaidTotalQuantity")
    price_change_option: Optional[StrictStr] = Field(default=None, alias="priceChangeOption")
    price_increase_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceIncreasePercentage")
    product_rate_plan_charge_number: Optional[StrictStr] = Field(default=None, alias="productRatePlanChargeNumber")
    rating_group: Optional[StrictStr] = Field(default=None, alias="ratingGroup")
    recognized_revenue_account: Optional[StrictStr] = Field(default=None, alias="recognizedRevenueAccount")
    revenue_recognition_rule_name: Optional[StrictStr] = Field(default=None, alias="revenueRecognitionRuleName")
    rev_rec_trigger_condition: Optional[StrictStr] = Field(default=None, alias="revRecTriggerCondition")
    rollover_apply: Optional[StrictStr] = Field(default=None, alias="rolloverApply")
    rollover_periods: Optional[StrictInt] = Field(default=None, alias="rolloverPeriods")
    rollover_period_length: Optional[StrictInt] = Field(default=None, alias="rolloverPeriodLength")
    smoothing_model: Optional[StrictStr] = Field(default=None, alias="smoothingModel")
    specific_billing_period: Optional[StrictInt] = Field(default=None, alias="specificBillingPeriod")
    taxable: Optional[StrictBool] = None
    tax_code: Optional[StrictStr] = Field(default=None, alias="taxCode")
    tax_mode: Optional[StrictStr] = Field(default=None, alias="taxMode")
    trigger_event: Optional[StrictStr] = Field(default=None, alias="triggerEvent")
    up_to_periods: Optional[StrictInt] = Field(default=None, alias="upToPeriods")
    up_to_periods_type: Optional[StrictStr] = Field(default=None, alias="upToPeriodsType")
    usage_record_rating_option: Optional[StrictStr] = Field(default=None, alias="usageRecordRatingOption")
    use_discount_specific_accounting_code: Optional[StrictBool] = Field(default=None, alias="useDiscountSpecificAccountingCode")
    use_tenant_default_for_price_change: Optional[StrictBool] = Field(default=None, alias="useTenantDefaultForPriceChange")
    validity_period_type: Optional[StrictStr] = Field(default=None, alias="validityPeriodType")
    weekly_bill_cycle_day: Optional[StrictStr] = Field(default=None, alias="weeklyBillCycleDay")
    price_upsell_quantity_stacked: Optional[StrictBool] = Field(default=None, alias="priceUpsellQuantityStacked")
    delivery_schedule_id: Optional[StrictStr] = Field(default=None, alias="deliveryScheduleId")
    id: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = Field(default=None, alias="createdById")
    created_date: Optional[StrictStr] = Field(default=None, alias="createdDate")
    updated_by_id: Optional[StrictStr] = Field(default=None, alias="updatedById")
    updated_date: Optional[StrictStr] = Field(default=None, alias="updatedDate")
    commitment_type: Optional[StrictStr] = Field(default=None, alias="commitmentType")
    is_committed: Optional[StrictBool] = Field(default=None, alias="isCommitted")
    product_rate_plan_id: Optional[StrictStr] = Field(default=None, alias="productRatePlanId")
    is_unbilled: Optional[StrictBool] = Field(default=None, alias="isUnbilled")
    is_allocation_eligible: Optional[StrictBool] = Field(default=None, alias="isAllocationEligible")
    product_category: Optional[StrictStr] = Field(default=None, alias="productCategory")
    product_class: Optional[StrictStr] = Field(default=None, alias="productClass")
    product_family: Optional[StrictStr] = Field(default=None, alias="productFamily")
    product_line: Optional[StrictStr] = Field(default=None, alias="productLine")
    revenue_recognition_timing: Optional[StrictStr] = Field(default=None, alias="revenueRecognitionTiming")
    revenue_amortization_method: Optional[StrictStr] = Field(default=None, alias="revenueAmortizationMethod")
    apply_to_billing_period_partially: Optional[StrictBool] = Field(default=None, alias="applyToBillingPeriodPartially")
    account_receivable_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="accountReceivableAccountingCodeId")
    recognized_revenue_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="recognizedRevenueAccountingCodeId")
    deferred_revenue_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="deferredRevenueAccountingCodeId")
    adjustment_liability_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="adjustmentLiabilityAccountingCodeId")
    adjustment_revenue_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="adjustmentRevenueAccountingCodeId")
    contract_asset_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="contractAssetAccountingCodeId")
    contract_liability_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="contractLiabilityAccountingCodeId")
    contract_recognized_revenue_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="contractRecognizedRevenueAccountingCodeId")
    unbilled_receivables_accounting_code_id: Optional[StrictStr] = Field(default=None, alias="unbilledReceivablesAccountingCodeId")
    rev_rec_code: Optional[StrictStr] = Field(default=None, alias="revRecCode")
    u_om: Optional[StrictStr] = Field(default=None, alias="uOM")
    drawdown_uom: Optional[StrictStr] = Field(default=None, alias="drawdownUom")
    prepaid_uom: Optional[StrictStr] = Field(default=None, alias="prepaidUom")
    product_rate_plan: Optional[ExpandedProductRatePlan] = Field(default=None, alias="productRatePlan")
    product_rate_plan_charge_tiers: Optional[List[ExpandedProductRatePlanChargeTier]] = Field(default=None, alias="productRatePlanChargeTiers")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["accountingCode", "applyDiscountTo", "billCycleDay", "billCycleType", "billingPeriod", "billingPeriodAlignment", "billingTiming", "chargeFunction", "chargeModel", "chargeType", "creditOption", "defaultQuantity", "deferredRevenueAccount", "description", "discountClassId", "discountLevel", "drawdownRate", "endDateCondition", "excludeItemBookingFromRevenueAccounting", "excludeItemBillingFromRevenueAccounting", "includedUnits", "isPrepaid", "isRollover", "isStackedDiscount", "legacyRevenueReporting", "listPriceBase", "specificListPriceBase", "maxQuantity", "minQuantity", "name", "numberOfPeriod", "overageCalculationOption", "overageUnusedUnitsCreditOption", "prepaidOperationType", "prorationOption", "prepaidQuantity", "prepaidTotalQuantity", "priceChangeOption", "priceIncreasePercentage", "productRatePlanChargeNumber", "ratingGroup", "recognizedRevenueAccount", "revenueRecognitionRuleName", "revRecTriggerCondition", "rolloverApply", "rolloverPeriods", "rolloverPeriodLength", "smoothingModel", "specificBillingPeriod", "taxable", "taxCode", "taxMode", "triggerEvent", "upToPeriods", "upToPeriodsType", "usageRecordRatingOption", "useDiscountSpecificAccountingCode", "useTenantDefaultForPriceChange", "validityPeriodType", "weeklyBillCycleDay", "priceUpsellQuantityStacked", "deliveryScheduleId", "id", "createdById", "createdDate", "updatedById", "updatedDate", "commitmentType", "isCommitted", "productRatePlanId", "isUnbilled", "isAllocationEligible", "productCategory", "productClass", "productFamily", "productLine", "revenueRecognitionTiming", "revenueAmortizationMethod", "applyToBillingPeriodPartially", "accountReceivableAccountingCodeId", "recognizedRevenueAccountingCodeId", "deferredRevenueAccountingCodeId", "adjustmentLiabilityAccountingCodeId", "adjustmentRevenueAccountingCodeId", "contractAssetAccountingCodeId", "contractLiabilityAccountingCodeId", "contractRecognizedRevenueAccountingCodeId", "unbilledReceivablesAccountingCodeId", "revRecCode", "uOM", "drawdownUom", "prepaidUom", "productRatePlan", "productRatePlanChargeTiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpandedProductRatePlanCharge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product_rate_plan
        if self.product_rate_plan:
            _dict['productRatePlan'] = self.product_rate_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_rate_plan_charge_tiers (list)
        _items = []
        if self.product_rate_plan_charge_tiers:
            for _item_product_rate_plan_charge_tiers in self.product_rate_plan_charge_tiers:
                if _item_product_rate_plan_charge_tiers:
                    _items.append(_item_product_rate_plan_charge_tiers.to_dict())
            _dict['productRatePlanChargeTiers'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpandedProductRatePlanCharge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "accountingCode": obj.get("accountingCode"),
            "applyDiscountTo": obj.get("applyDiscountTo"),
            "billCycleDay": obj.get("billCycleDay"),
            "billCycleType": obj.get("billCycleType"),
            "billingPeriod": obj.get("billingPeriod"),
            "billingPeriodAlignment": obj.get("billingPeriodAlignment"),
            "billingTiming": obj.get("billingTiming"),
            "chargeFunction": obj.get("chargeFunction"),
            "chargeModel": obj.get("chargeModel"),
            "chargeType": obj.get("chargeType"),
            "creditOption": obj.get("creditOption"),
            "defaultQuantity": obj.get("defaultQuantity"),
            "deferredRevenueAccount": obj.get("deferredRevenueAccount"),
            "description": obj.get("description"),
            "discountClassId": obj.get("discountClassId"),
            "discountLevel": obj.get("discountLevel"),
            "drawdownRate": obj.get("drawdownRate"),
            "endDateCondition": obj.get("endDateCondition"),
            "excludeItemBookingFromRevenueAccounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "includedUnits": obj.get("includedUnits"),
            "isPrepaid": obj.get("isPrepaid"),
            "isRollover": obj.get("isRollover"),
            "isStackedDiscount": obj.get("isStackedDiscount"),
            "legacyRevenueReporting": obj.get("legacyRevenueReporting"),
            "listPriceBase": obj.get("listPriceBase"),
            "specificListPriceBase": obj.get("specificListPriceBase"),
            "maxQuantity": obj.get("maxQuantity"),
            "minQuantity": obj.get("minQuantity"),
            "name": obj.get("name"),
            "numberOfPeriod": obj.get("numberOfPeriod"),
            "overageCalculationOption": obj.get("overageCalculationOption"),
            "overageUnusedUnitsCreditOption": obj.get("overageUnusedUnitsCreditOption"),
            "prepaidOperationType": obj.get("prepaidOperationType"),
            "prorationOption": obj.get("prorationOption"),
            "prepaidQuantity": obj.get("prepaidQuantity"),
            "prepaidTotalQuantity": obj.get("prepaidTotalQuantity"),
            "priceChangeOption": obj.get("priceChangeOption"),
            "priceIncreasePercentage": obj.get("priceIncreasePercentage"),
            "productRatePlanChargeNumber": obj.get("productRatePlanChargeNumber"),
            "ratingGroup": obj.get("ratingGroup"),
            "recognizedRevenueAccount": obj.get("recognizedRevenueAccount"),
            "revenueRecognitionRuleName": obj.get("revenueRecognitionRuleName"),
            "revRecTriggerCondition": obj.get("revRecTriggerCondition"),
            "rolloverApply": obj.get("rolloverApply"),
            "rolloverPeriods": obj.get("rolloverPeriods"),
            "rolloverPeriodLength": obj.get("rolloverPeriodLength"),
            "smoothingModel": obj.get("smoothingModel"),
            "specificBillingPeriod": obj.get("specificBillingPeriod"),
            "taxable": obj.get("taxable"),
            "taxCode": obj.get("taxCode"),
            "taxMode": obj.get("taxMode"),
            "triggerEvent": obj.get("triggerEvent"),
            "upToPeriods": obj.get("upToPeriods"),
            "upToPeriodsType": obj.get("upToPeriodsType"),
            "usageRecordRatingOption": obj.get("usageRecordRatingOption"),
            "useDiscountSpecificAccountingCode": obj.get("useDiscountSpecificAccountingCode"),
            "useTenantDefaultForPriceChange": obj.get("useTenantDefaultForPriceChange"),
            "validityPeriodType": obj.get("validityPeriodType"),
            "weeklyBillCycleDay": obj.get("weeklyBillCycleDay"),
            "priceUpsellQuantityStacked": obj.get("priceUpsellQuantityStacked"),
            "deliveryScheduleId": obj.get("deliveryScheduleId"),
            "id": obj.get("id"),
            "createdById": obj.get("createdById"),
            "createdDate": obj.get("createdDate"),
            "updatedById": obj.get("updatedById"),
            "updatedDate": obj.get("updatedDate"),
            "commitmentType": obj.get("commitmentType"),
            "isCommitted": obj.get("isCommitted"),
            "productRatePlanId": obj.get("productRatePlanId"),
            "isUnbilled": obj.get("isUnbilled"),
            "isAllocationEligible": obj.get("isAllocationEligible"),
            "productCategory": obj.get("productCategory"),
            "productClass": obj.get("productClass"),
            "productFamily": obj.get("productFamily"),
            "productLine": obj.get("productLine"),
            "revenueRecognitionTiming": obj.get("revenueRecognitionTiming"),
            "revenueAmortizationMethod": obj.get("revenueAmortizationMethod"),
            "applyToBillingPeriodPartially": obj.get("applyToBillingPeriodPartially"),
            "accountReceivableAccountingCodeId": obj.get("accountReceivableAccountingCodeId"),
            "recognizedRevenueAccountingCodeId": obj.get("recognizedRevenueAccountingCodeId"),
            "deferredRevenueAccountingCodeId": obj.get("deferredRevenueAccountingCodeId"),
            "adjustmentLiabilityAccountingCodeId": obj.get("adjustmentLiabilityAccountingCodeId"),
            "adjustmentRevenueAccountingCodeId": obj.get("adjustmentRevenueAccountingCodeId"),
            "contractAssetAccountingCodeId": obj.get("contractAssetAccountingCodeId"),
            "contractLiabilityAccountingCodeId": obj.get("contractLiabilityAccountingCodeId"),
            "contractRecognizedRevenueAccountingCodeId": obj.get("contractRecognizedRevenueAccountingCodeId"),
            "unbilledReceivablesAccountingCodeId": obj.get("unbilledReceivablesAccountingCodeId"),
            "revRecCode": obj.get("revRecCode"),
            "uOM": obj.get("uOM"),
            "drawdownUom": obj.get("drawdownUom"),
            "prepaidUom": obj.get("prepaidUom"),
            "productRatePlan": ExpandedProductRatePlan.from_dict(obj["productRatePlan"]) if obj.get("productRatePlan") is not None else None,
            "productRatePlanChargeTiers": [ExpandedProductRatePlanChargeTier.from_dict(_item) for _item in obj["productRatePlanChargeTiers"]] if obj.get("productRatePlanChargeTiers") is not None else None
        }
        return _obj
from zuora_sdk.models.expanded_product_rate_plan import ExpandedProductRatePlan
from zuora_sdk.models.expanded_product_rate_plan_charge_tier import ExpandedProductRatePlanChargeTier
# TODO: Rewrite to not use raise_errors
ExpandedProductRatePlanCharge.model_rebuild(raise_errors=False)


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
