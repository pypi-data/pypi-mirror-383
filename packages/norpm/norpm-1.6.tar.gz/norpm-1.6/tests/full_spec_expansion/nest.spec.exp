# Use forge macros for getting source tarball from GitHub

# We build the python bit separately - their build system doesn't let me build
# and install separately - everything is done at install time

# We do not build the developer documentation with doxygen. Advanced developers
# that develop based on the source git tree can build it themselves

# Switch them off if you want
%bcond mpich 1
%bcond openmpi 1

# Tests include source linters and so on, and require a specific older version
# of vera and clang and so forth, so we simply rely on upstream CI here
%bcond tests 0

# Default for numthreads

# build fails on ppc with lto enabled in rawhide
# https://bugzilla.redhat.com/show_bug.cgi?id=2056459
# fails on F34 and F35 on aarch64

# On armv7 we get a failure with LTO.  The log has no useful information in it
# but my guess is we ran out of memory on the builder.  Disable LTO for armv7
# Also runs out of memory without lto. Seems to need about 25Gigs per thread,
# so limit the number of threads


Name:           nest
Version:        3.8
Release:        %autorelease
Summary:        The neural simulation tool
%forgemeta

# thirdparty/compose is LGPLv2.1+
# thirdparty/randutils.hpp is MIT
# SPDX
License:        GPL-2.0-or-later and MIT and LGPL-2.1-or-later
URL:            http://www.nest-simulator.org/
Source0:        %forgesource
Source1:        README-Fedora.md

# https://github.com/sanjayankur31/nest-simulator/tree/fedora-3.7
# 1. Let it build and install the cythonised shared object But we still build
# our python modules ourselves

# 2. The helpindex must be generated after the help files have been installed
# to the install location, so we do this manually because the script doesn't
# respect rpmbuildroot and so on
Patch:          0001-disable-python-setups.patch
# Tweak PYEXECDIR
Patch:          0002-tweak-PYEXECDIR.patch
# Use system Random123
Patch:          0003-use-system-Random123.patch
# Remove rpath
Patch:          0004-remove-rpath.patch
# Install in standard libdir
Patch:          0005-install-in-libdir.patch
# Use online docs for helpdesk
Patch:          0006-use-online-documentation.patch

# Remove hard coded O0
Patch:          0007-remove-hard-coded-O0.patch

# https://fedoraproject.org/wiki/Changes/EncourageI686LeafRemoval
ExcludeArch:    %{ix86}

BuildRequires:  boost-devel
BuildRequires:  cmake
BuildRequires:  chrpath
BuildRequires:  graphviz
BuildRequires:  gcc-c++
BuildRequires:  make
BuildRequires:  ncurses-devel
BuildRequires:  gsl-devel
BuildRequires:  libtool
BuildRequires:  libtool-ltdl-devel
BuildRequires:  libneurosim-devel
BuildRequires:  python3-devel
BuildRequires:  python3-Cython
BuildRequires:  python3-mock
BuildRequires:  python3-pytest
BuildRequires:  python3-setuptools
BuildRequires:  readline-devel
BuildRequires:  Random123-devel
Requires:       nest-common


%description 
NEST is a simulator for spiking neural network models that focuses on the
dynamics, size and structure of neural systems rather than on the exact
morphology of individual neurons. The development of NEST is coordinated by the
NEST Initiative.  NEST is ideal for networks of spiking neurons of any size,
for example: Models of information processing e.g. in the visual or auditory
cortex of mammals; Models of network activity dynamics, e.g. laminar cortical
networks or balanced random networks; Models of learning and plasticity.
Please read the README-Fedora.md file provided in each package for information
on how these NEST packages are to be used.

Please see https://nest-simulator.readthedocs.io/ for the latest documentation.

%package common
BuildArch:  noarch
Summary:    Common files for nest

%description common 
NEST is a simulator for spiking neural network models that focuses on the
dynamics, size and structure of neural systems rather than on the exact
morphology of individual neurons. The development of NEST is coordinated by the
NEST Initiative.  NEST is ideal for networks of spiking neurons of any size,
for example: Models of information processing e.g. in the visual or auditory
cortex of mammals; Models of network activity dynamics, e.g. laminar cortical
networks or balanced random networks; Models of learning and plasticity.
Please read the README-Fedora.md file provided in each package for information
on how these NEST packages are to be used.

Please see https://nest-simulator.readthedocs.io/ for the latest documentation.

# These are also arch specific
%package devel
Summary:    Development files for nest
Requires:   nest = 3.8-%autorelease

# provide headers package
Provides:   nest-headers = 3.8-%autorelease

%description devel 
NEST is a simulator for spiking neural network models that focuses on the
dynamics, size and structure of neural systems rather than on the exact
morphology of individual neurons. The development of NEST is coordinated by the
NEST Initiative.  NEST is ideal for networks of spiking neurons of any size,
for example: Models of information processing e.g. in the visual or auditory
cortex of mammals; Models of network activity dynamics, e.g. laminar cortical
networks or balanced random networks; Models of learning and plasticity.
Please read the README-Fedora.md file provided in each package for information
on how these NEST packages are to be used.

Please see https://nest-simulator.readthedocs.io/ for the latest documentation.

%package doc
BuildArch:  noarch
Summary:    Documentation for nest

%description doc 
NEST is a simulator for spiking neural network models that focuses on the
dynamics, size and structure of neural systems rather than on the exact
morphology of individual neurons. The development of NEST is coordinated by the
NEST Initiative.  NEST is ideal for networks of spiking neurons of any size,
for example: Models of information processing e.g. in the visual or auditory
cortex of mammals; Models of network activity dynamics, e.g. laminar cortical
networks or balanced random networks; Models of learning and plasticity.
Please read the README-Fedora.md file provided in each package for information
on how these NEST packages are to be used.

Please see https://nest-simulator.readthedocs.io/ for the latest documentation.


%package -n python3-%{name}
Summary:    Python3 bindings for nest
Requires:   nest = 3.8-%autorelease
Requires:   nest-common = 3.8-%autorelease
Requires:   %{py3_dist numpy} %{py3_dist scipy}
Recommends: %{py3_dist matplotlib}
Recommends: %{py3_dist ipython}


%description -n python3-nest 
NEST is a simulator for spiking neural network models that focuses on the
dynamics, size and structure of neural systems rather than on the exact
morphology of individual neurons. The development of NEST is coordinated by the
NEST Initiative.  NEST is ideal for networks of spiking neurons of any size,
for example: Models of information processing e.g. in the visual or auditory
cortex of mammals; Models of network activity dynamics, e.g. laminar cortical
networks or balanced random networks; Models of learning and plasticity.
Please read the README-Fedora.md file provided in each package for information
on how these NEST packages are to be used.

Please see https://nest-simulator.readthedocs.io/ for the latest documentation.



%prep
%forgeautosetup -p1
cp %{SOURCE1} ./ -v

# Fix VERSION
# TODO: Check if needed with each release
echo 3.8 > VERSION


# Tweaks
# We'll set it ourselves - easier for mpi implementations
sed -i.orig '/PYEXECDIR/ d' cmake/ProcessOptions.cmake
# These files are all in standard locations so we don't need them
# Loading an MPI module sets up PATH correctly
sed -i '/PATH=/ d' bin/nest_vars.sh.in
# correct output of --libs in nest-config
# it does not need $prefix there
sed -i 's|-L$prefix/|-L|' bin/nest-config.in
# Delete bundled Random123 copy
rm -rf thirdparty/Random123

# Correct shebangs for py3
find . -name "*.py" -exec sed -i 's|#!/usr/bin/env python.*|#!/usr/bin/python3|' '{}' ;

# builddir for serial
mkdir build-serial




%build




# Build serial version, dummy arguments
# Disable music, which requires MPI to be ON
export MPI_PYTHON3_SITEARCH="%{python3_sitearch}"
export MPI_COMPILER=serial
export MPI_SUFFIX=""
export MPI_HOME=%{_prefix}
export MPI_BIN=%{_bindir}
export MPI_INCLUDE=%{_includedir}
export MPI_LIB=%{_libdir}
export MPI_YES=OFF
export PY_MPI4PY=OFF
# Python 3
export MPI_COMPILE_TYPE="-serial"
export PYTHON_VERSION="3"
export PYTHON_BIN="%{python3}"
export MPI_SITEARCH=$MPI_PYTHON3_SITEARCH

echo  
echo "*** BUILDING nest$MPI_COMPILE_TYPE ***"  
export PYEXECDIR=$MPI_SITEARCH  
%set_build_flags 
echo  
pushd build$MPI_COMPILE_TYPE  && 
    cmake         -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG"         -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG"         -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG"         -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON         -DCMAKE_INSTALL_INCLUDEDIR:PATH=$MPI_INCLUDE         -DCMAKE_INSTALL_LIBDIR:PATH=$MPI_LIB         -DSYSCONF_INSTALL_DIR:PATH=%{_sysconfdir}         -DSHARE_INSTALL_PREFIX:PATH=%{_prefix}         -Dwith-optimize:BOOL=OFF         -DCMAKE_SKIP_RPATH:BOOL=ON         -DCMAKE_SKIP_BUILD_RPATH:BOOL=ON         -DCMAKE_SKIP_INSTALL_RPATH:BOOL=ON         -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF         -Dwith-mpi:BOOL=$MPI_YES         -Dwith-gsl:BOOL=ON         -Dwith-boost:BOOL=ON         -Dwith-libneurosim:PATH=$MPI_HOME         -Dwith-python:BOOL=ON          -DPYEXECDIR:PATH=$MPI_SITEARCH         -DCMAKE_INSTALL_PREFIX:PATH=$MPI_HOME         -DBUILD_SHARED_LIBS:BOOL=ON         -DPY_MPI4PY:PATH=$PY_MPI4PY         -DHAVE_RANDOM_123:BOOL=ON         -Dwith-music:BOOL=OFF         -DLIB_SUFFIX="" .. && 
popd || exit -1;

    %make_build -j -C build$MPI_COMPILE_TYPE || exit -1

pushd build$MPI_COMPILE_TYPE  && 
    pushd pynest && 
        # Create nest/lib dir manually or build fails 
        mkdir nest/lib 
        $PYTHON_BIN setup.py build 
    popd && 
popd || exit -1;

# (1) Change configuration slightly for the MPI builds, We want the stuff
# from doc/, examples/, and testsuite/ dirs only in the serial build.
# Backup CMakeLists.txt since we need to put it back for installation
# or nest_serial and nest_indirect will not be installed.
# Don't generate docs for MPI builds
# Don't install examples and extras for MPI builds
# Don't install tests in docdir either for MPI builds
sed -i.serial \
-e '/add_subdirectory.*doc/ d' \
-e '/add_subdirectory.*examples/ d' \
-e '/add_subdirectory.*testsuite/ d' CMakeLists.txt

# Enable music support
# Build mpich version

# Build OpenMPI version
# Disable MUSIC support. OpenMPI build fails with MUSIC enabled.

%install
# Install everything


# Install the other python bits


# (2) Put the original CMakeLists.txt back into place for installation
mv -v CMakeLists.txt CMakeLists.txt.mpi
mv -v CMakeLists.txt.serial CMakeLists.txt

# install serial version
export MPI_SUFFIX=""
export MPI_HOME=%{_prefix}
export MPI_BIN=%{_bindir}
export MPI_YES=OFF
# Python 3
export MPI_COMPILE_TYPE="-serial"
export MPI_SITEARCH="%{python3_sitearch}"
export PYTHON_BIN="%{python3}"

echo  
echo "*** INSTALLING nest$MPI_COMPILE_TYPE ***"  
echo  
    %make_install -C build$MPI_COMPILE_TYPE || exit -1

pushd build$MPI_COMPILE_TYPE && 
    pushd pynest && 
        $PYTHON_BIN setup.py install --skip-build --root $RPM_BUILD_ROOT --install-lib=$MPI_SITEARCH && 
    popd && 
popd || exit -1;

# (3) Swap again for MPI installations
mv -v CMakeLists.txt CMakeLists.txt.serial
mv -v CMakeLists.txt.mpi CMakeLists.txt

# Install MPICH version

# Install OpenMPI version

# Remove test suite so that it isn't included in the package
rm -rf $RPM_BUILD_ROOT/%{_datadir}/nest/testsuite/
rm -rf $RPM_BUILD_ROOT/%{_bindir}/run_all_cpptests


%check
# Cannot run py3_check_import because importing nest does not work in a chroot,
# and there's no way to tweak the location it searches (/usr/share/nest/) to
# include the buildroot before invoking it. Previously, it listened to
# environment variables, but that seems to have been removed in v3. So we'll
# need to build, then install the rpms and then test import :/
# See sli/slistartup.cc

# upstream tests

# remove LICENSE file from docs
rm -v %{buildroot}/%{_pkgdocdir}/LICENSE


%files
%license LICENSE
%doc README-Fedora.md SECURITY.md ACKNOWLEDGMENTS.md README.md CHANGES CONTRIBUTING.md
%{_bindir}/nest
%{_bindir}/nest-server
%{_bindir}/nest-server-mpi
%{_bindir}/sli
%{_bindir}/nest_vars.sh
%{_bindir}/nest-config
%{_bindir}/nest_serial
%{_bindir}/nest_indirect
%{_libdir}/*.so.3*

%files common
%license LICENSE
%{_datadir}/nest

%files devel
%{_includedir}/nest
%{_libdir}/*.so

%files doc
%license LICENSE
%doc %{_pkgdocdir}/EditorSupport
%doc %{_pkgdocdir}/examples
%doc %{_pkgdocdir}/run_examples.sh

%files -n python3-nest
%{python3_sitearch}/nest
%{python3_sitearch}/nest_simulator-3.8-py%{python3_version}.egg-info



%changelog
%autochangelog
