# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generally recommended to include .idea/ in version control, but exclude
#  sensitive files like passwords, api keys, etc.
.idea/
*.swp
*.swo
*~

# VS Code
.vscode/
*.code-workspace

# Mac
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Project specific
*.log
.coverage
bandit-report.json
trivy-results.sarif
security-report.json
dependency-check-report.xml
test-results.xml
junit.xml

# MCP KQL Server specific
test_memory/
cluster_memory/
*.tmp
.test_*
schema_memory.json
*.memory
memory_backup_*

# Azure CLI cache (if stored locally)
.azure/
.azure-cli/

# Schema memory files (exclude from repo, these are user-specific)
KQL_MCP/
AppData/

# Build artifacts and distributions
build/
dist/
*.whl
*.tar.gz
*.zip

# Testing and coverage
.pytest_cache/
.coverage.*
htmlcov/
coverage.xml
.tox/
.nox/

# IDE and editor files
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/.ropeproject
*.swp
*.swo
*~
.idea/
*.sublime-*

# OS specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Desktop.ini

# Environment and configuration
.env
.env.local
.env.production
.env.test
*.config.js
config.local.json

# Temporary files
*.tmp
*.temp
*.bak
*.backup
*~

# Obsolete documentation files
INSTALLATION_IMPROVEMENTS.md
TODO.md
NOTES.md

# Logs and debugging
*.log
*.out
*.err
debug.log
error.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Cache directories
.npm/
.yarn/
.cache/
node_modules/

# Documentation build
docs/_build/
docs/dist/
site/

# Security and vulnerability reports
security/
vulnerabilities/
.snyk

# Performance and profiling
*.prof
*.trace
.benchmarks/

# Database files
*.db
*.sqlite
*.sqlite3

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Virtual environments (additional patterns)
venv*/
env*/
ENV*/
.venv*/
.env*/

# Package manager files
pip-log.txt
pip-delete-this-directory.txt
Pipfile.lock

# Compiled extensions
*.dll
*.dylib
*.so.*

# MacOS specific
.AppleDouble
.LSOverride
Icon?

# Windows specific
[Tt]humbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.lnk

# Linux specific
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*
RELEASE_NOTES_v2.0.3.md
