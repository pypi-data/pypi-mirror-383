# This file is @generated by tarina.lang CLI tool
# It is not intended for manual editing.

from tarina.lang.model import LangItem, LangModel


class EntariCliCommandsInitOptions:
    develop: LangItem = LangItem("entari_cli", "commands.init.options.develop")
    python: LangItem = LangItem("entari_cli", "commands.init.options.python")
    install_args: LangItem = LangItem("entari_cli", "commands.init.options.install_args")


class EntariCliCommandsInitMessages:
    success: LangItem = LangItem("entari_cli", "commands.init.messages.success")
    initialized: LangItem = LangItem("entari_cli", "commands.init.messages.initialized")


class EntariCliCommandsInit:
    description: LangItem = LangItem("entari_cli", "commands.init.description")
    options = EntariCliCommandsInitOptions
    messages = EntariCliCommandsInitMessages


class EntariCliCommandsAddOptions:
    disabled: LangItem = LangItem("entari_cli", "commands.add.options.disabled")
    optional: LangItem = LangItem("entari_cli", "commands.add.options.optional")
    priority: LangItem = LangItem("entari_cli", "commands.add.options.priority")


class EntariCliCommandsAddPrompts:
    name: LangItem = LangItem("entari_cli", "commands.add.prompts.name")
    failed: LangItem = LangItem("entari_cli", "commands.add.prompts.failed")
    success: LangItem = LangItem("entari_cli", "commands.add.prompts.success")


class EntariCliCommandsAdd:
    description: LangItem = LangItem("entari_cli", "commands.add.description")
    options = EntariCliCommandsAddOptions
    prompts = EntariCliCommandsAddPrompts


class EntariCliCommandsNewOptions:
    static: LangItem = LangItem("entari_cli", "commands.new.options.static")
    application: LangItem = LangItem("entari_cli", "commands.new.options.application")
    file: LangItem = LangItem("entari_cli", "commands.new.options.file")
    disabled: LangItem = LangItem("entari_cli", "commands.new.options.disabled")
    optional: LangItem = LangItem("entari_cli", "commands.new.options.optional")
    priority: LangItem = LangItem("entari_cli", "commands.new.options.priority")
    python: LangItem = LangItem("entari_cli", "commands.new.options.python")
    install_args: LangItem = LangItem("entari_cli", "commands.new.options.install_args")


class EntariCliCommandsNewPrompts:
    is_plugin_project: LangItem = LangItem("entari_cli", "commands.new.prompts.is_plugin_project")
    plugin_name: LangItem = LangItem("entari_cli", "commands.new.prompts.plugin_name")
    plugin_version: LangItem = LangItem("entari_cli", "commands.new.prompts.plugin_version")
    plugin_description: LangItem = LangItem("entari_cli", "commands.new.prompts.plugin_description")
    plugin_author_name: LangItem = LangItem("entari_cli", "commands.new.prompts.plugin_author_name")
    plugin_author_email: LangItem = LangItem("entari_cli", "commands.new.prompts.plugin_author_email")
    python_requires: LangItem = LangItem("entari_cli", "commands.new.prompts.python_requires")
    license: LangItem = LangItem("entari_cli", "commands.new.prompts.license")
    is_single_file: LangItem = LangItem("entari_cli", "commands.new.prompts.is_single_file")
    is_disposable: LangItem = LangItem("entari_cli", "commands.new.prompts.is_disposable")


class EntariCliCommandsNewMessages:
    invalid: LangItem = LangItem("entari_cli", "commands.new.messages.invalid")
    corrected: LangItem = LangItem("entari_cli", "commands.new.messages.corrected")
    keep: LangItem = LangItem("entari_cli", "commands.new.messages.keep")
    installed: LangItem = LangItem("entari_cli", "commands.new.messages.installed")
    exists: LangItem = LangItem("entari_cli", "commands.new.messages.exists")
    created: LangItem = LangItem("entari_cli", "commands.new.messages.created")
    proj_exists: LangItem = LangItem("entari_cli", "commands.new.messages.proj_exists")
    in_venv: LangItem = LangItem("entari_cli", "commands.new.messages.in_venv")


class EntariCliCommandsNew:
    description: LangItem = LangItem("entari_cli", "commands.new.description")
    options = EntariCliCommandsNewOptions
    prompts = EntariCliCommandsNewPrompts
    messages = EntariCliCommandsNewMessages


class EntariCliCommandsRemovePrompts:
    name: LangItem = LangItem("entari_cli", "commands.remove.prompts.name")
    success: LangItem = LangItem("entari_cli", "commands.remove.prompts.success")


class EntariCliCommandsRemove:
    description: LangItem = LangItem("entari_cli", "commands.remove.description")
    prompts = EntariCliCommandsRemovePrompts


class EntariCliCommandsRunOptions:
    python: LangItem = LangItem("entari_cli", "commands.run.options.python")


class EntariCliCommandsRun:
    description: LangItem = LangItem("entari_cli", "commands.run.description")
    options = EntariCliCommandsRunOptions


class EntariCliCommandsGenerateMessages:
    generated: LangItem = LangItem("entari_cli", "commands.generate.messages.generated")


class EntariCliCommandsGenerate:
    description: LangItem = LangItem("entari_cli", "commands.generate.description")
    messages = EntariCliCommandsGenerateMessages


class EntariCliCommandsVersion:
    description: LangItem = LangItem("entari_cli", "commands.version.description")


class EntariCliCommandsSettingOptions:
    local: LangItem = LangItem("entari_cli", "commands.setting.options.local")
    delete: LangItem = LangItem("entari_cli", "commands.setting.options.delete")
    edit: LangItem = LangItem("entari_cli", "commands.setting.options.edit")


class EntariCliCommandsSettingEdit:
    failed_key: LangItem = LangItem("entari_cli", "commands.setting.edit.failed_key")
    failed_delete: LangItem = LangItem("entari_cli", "commands.setting.edit.failed_delete")
    success: LangItem = LangItem("entari_cli", "commands.setting.edit.success")
    failed: LangItem = LangItem("entari_cli", "commands.setting.edit.failed")


class EntariCliCommandsSettingDelete:
    missing: LangItem = LangItem("entari_cli", "commands.setting.delete.missing")
    not_exist: LangItem = LangItem("entari_cli", "commands.setting.delete.not_exist")
    success: LangItem = LangItem("entari_cli", "commands.setting.delete.success")


class EntariCliCommandsSettingSet:
    missing: LangItem = LangItem("entari_cli", "commands.setting.set.missing")
    success: LangItem = LangItem("entari_cli", "commands.setting.set.success")


class EntariCliCommandsSettingList:
    title: LangItem = LangItem("entari_cli", "commands.setting.list.title")
    global_: LangItem = LangItem("entari_cli", "commands.setting.list.global")
    local: LangItem = LangItem("entari_cli", "commands.setting.list.local")


class EntariCliCommandsSetting:
    description: LangItem = LangItem("entari_cli", "commands.setting.description")
    key: LangItem = LangItem("entari_cli", "commands.setting.key")
    value: LangItem = LangItem("entari_cli", "commands.setting.value")
    options = EntariCliCommandsSettingOptions
    edit = EntariCliCommandsSettingEdit
    delete = EntariCliCommandsSettingDelete
    set = EntariCliCommandsSettingSet
    get_failed: LangItem = LangItem("entari_cli", "commands.setting.get_failed")
    list = EntariCliCommandsSettingList


class EntariCliCommands:
    init = EntariCliCommandsInit
    add = EntariCliCommandsAdd
    new = EntariCliCommandsNew
    remove = EntariCliCommandsRemove
    run = EntariCliCommandsRun
    generate = EntariCliCommandsGenerate
    version = EntariCliCommandsVersion
    config_path: LangItem = LangItem("entari_cli", "commands.config_path")
    setting = EntariCliCommandsSetting


class EntariCliErrors:
    python_not_found: LangItem = LangItem("entari_cli", "errors.python_not_found")
    invalid_project_name: LangItem = LangItem("entari_cli", "errors.invalid_project_name")


class EntariCliConfig:
    ext_failed: LangItem = LangItem("entari_cli", "config.ext_failed")
    ask_format: LangItem = LangItem("entari_cli", "config.ask_format")
    not_supported: LangItem = LangItem("entari_cli", "config.not_supported")
    exists: LangItem = LangItem("entari_cli", "config.exists")
    created: LangItem = LangItem("entari_cli", "config.created")


class EntariCliProject:
    select_python: LangItem = LangItem("entari_cli", "project.select_python")
    select_pm: LangItem = LangItem("entari_cli", "project.select_pm")
    please_select: LangItem = LangItem("entari_cli", "project.please_select")
    install_failed: LangItem = LangItem("entari_cli", "project.install_failed")
    no_python_found: LangItem = LangItem("entari_cli", "project.no_python_found")
    invalid_selection: LangItem = LangItem("entari_cli", "project.invalid_selection")
    fallback_pip: LangItem = LangItem("entari_cli", "project.fallback_pip")


class EntariCliVenv:
    use: LangItem = LangItem("entari_cli", "venv.use")
    create: LangItem = LangItem("entari_cli", "venv.create")
    ask_create: LangItem = LangItem("entari_cli", "venv.ask_create")


class EntariCli:
    commands = EntariCliCommands
    errors = EntariCliErrors
    config = EntariCliConfig
    project = EntariCliProject
    venv = EntariCliVenv


class Lang(LangModel):
    entari_cli = EntariCli
