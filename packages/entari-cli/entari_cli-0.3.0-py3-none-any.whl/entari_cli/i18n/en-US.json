{
  "$schema": ".lang.schema.json",
  "entari_cli": {
    "commands": {
      "init": {
        "description": "Create a new Entari environment",
        "options": {
          "develop": "Whether to install dependencies for development",
          "python": "Specify the Python version/path to use",
          "install_args": "Extra parameters for installation command passed to the package manager"
        },
        "messages": {
          "success": "Entari environment initialized successfully.",
          "initialized": "Entari environment already initialized."
        }
      },
      "add": {
        "description": "Add an Entari plugin to the configuration file",
        "options": {
          "disabled": "Whether the plugin is initially disabled",
          "optional": "Whether to store only the plugin configuration without loading the plugin",
          "priority": "Plugin loading priority"
        },
        "prompts": {
          "name": "Please specify a plugin name: ",
          "failed": "{name} not found. You should installed it, or run {cmd}",
          "success": "Plugin {name} added to configuration file successfully."
        }
      },
      "new": {
        "description": "Create a new Entari plugin",
        "options": {
          "static": "Whether it's a static plugin",
          "application": "Whether it is an application plugin",
          "file": "Whether it is a single-file plugin",
          "disabled": "Whether the plugin is initially disabled",
          "optional": "Whether to store only the plugin configuration without loading the plugin",
          "priority": "Plugin loading priority",
          "python": "Specify the Python version/path to use",
          "install_args": "Extra parameters for installation command passed to the package manager"
        },
        "prompts": {
          "is_plugin_project": "Is this an plugin project?",
          "plugin_name": "Plugin name",
          "plugin_version": "Plugin version",
          "plugin_description": "Plugin description",
          "plugin_author_name": "Plugin author name",
          "plugin_author_email": "Plugin author email",
          "python_requires": "Python requires ('*' to allow any)",
          "license": "License (SPDX name)",
          "is_single_file": "Is this a single file plugin?",
          "is_disposable": "Is this a disposable plugin?"
        },
        "messages": {
          "invalid": "Invalid plugin name: {name}",
          "corrected": "Plugin will be corrected to 'entari-plugin-{name}' automatically.",
          "keep": "If you want to keep the name, please use option {opt}.",
          "installed": "'{name}' already installed, please use another name.",
          "exists": "Plugin {name} already exists in the configuration file.",
          "created": "Plugin created at {path}.",
          "proj_exists": "You have already been in a project directory, please create an application plugin instead.",
          "in_venv": "Cannot create a new plugin project inside a existing project."
        }
      },
      "remove": {
        "description": "Remove an Entari plugin from the configuration file",
        "prompts": {
          "name": "Please specify a plugin name:",
          "success": "Plugin {name} removed from configuration file successfully."
        }
      },
      "run": {
        "description": "Launch Entari",
        "options": {
          "python": "Custom Python interpreter path"
        }
      },
      "generate": {
        "description": "Generate an Entari main script",
        "messages": {
          "generated": "Main script generated at {file}"
        }
      },
      "version": {
        "description": "show the version and exit"
      },
      "config_path": "Specify the configuration path",
      "setting": {
        "description": "Display the Entari-cli configuration",
        "key": "Config key",
        "value": "Config value",
        "options": {
          "local": "Use the local configuration file, usually .entari_cli.yaml in the project root",
          "delete": "Unset a configuration key",
          "edit": "Open the configuration file in the editor(defined by EDITOR env var or CLI setting)"
        },
        "edit": {
          "failed_key": "Cannot specify an argument when `--edit` is given",
          "failed_delete": "`--delete` doesn't work when `--edit` is given",
          "success": "Configuration file edited successfully.",
          "failed": "Editor {editor} exited abnormally"
        },
        "delete": {
          "missing": "Please specify the configuration key to unset",
          "not_exist": "Configuration file has not created yet.",
          "success": "Configuration key '{key}' unset."
        },
        "set": {
          "missing": "Please specify the configuration key to set",
          "success": "Configuration key '{key}' set to '{value}'."
        },
        "get_failed": "No configuration key matches '{query}'",
        "list": {
          "title": "Site/default setting",
          "global": "Global configuration file",
          "local": "Local configuration file"
        }
      }
    },
    "errors": {
      "python_not_found": "Cannot find a valid Python interpreter.",
      "invalid_project_name": "Invalid project name: {name}"
    },
    "project": {
      "select_python": "Please enter the Python interpreter path to use",
      "select_pm": "Please enter the package manager to use",
      "please_select": "Please select",
      "install_failed": "Failed to install {deps} with {pm}, please check the output above.",
      "no_python_found": "No Python interpreter found.",
      "invalid_selection": "Invalid selection.",
      "fallback_pip": "{pm} not found, falling back to pip."
    },
    "config": {
      "ext_failed": "Failed to load config extension '{ext_mod}': {e}",
      "exists": "{path} already exists.",
      "not_supported": "Unsupported file extension: {suffix}",
      "ask_format": "Please choose a configuration file format:",
      "created": "Configuration file created at {path}"
    },
    "venv": {
      "use": "Using virtual environment Python: {venv_python}",
      "create": "Virtual environment created at {venv_python}",
      "ask_create": "Create a new virtual environment?"
    }
  }
}
