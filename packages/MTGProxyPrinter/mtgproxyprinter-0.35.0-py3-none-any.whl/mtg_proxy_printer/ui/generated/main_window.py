# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window.ui'
##
## Created by: Qt User Interface Compiler version 6.10.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QMainWindow, QMenu, QMenuBar,
    QSizePolicy, QStatusBar, QToolBar, QWidget)

from mtg_proxy_printer.ui.central_widget import CentralWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1050, 700)
        MainWindow.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonFollowStyle)
        self.action_quit = QAction(MainWindow)
        self.action_quit.setObjectName(u"action_quit")
        icon = QIcon(QIcon.fromTheme(u"application-exit"))
        self.action_quit.setIcon(icon)
        self.action_quit.setMenuRole(QAction.MenuRole.QuitRole)
        self.action_print = QAction(MainWindow)
        self.action_print.setObjectName(u"action_print")
        icon1 = QIcon(QIcon.fromTheme(u"document-print-direct"))
        self.action_print.setIcon(icon1)
        self.action_print_preview = QAction(MainWindow)
        self.action_print_preview.setObjectName(u"action_print_preview")
        icon2 = QIcon(QIcon.fromTheme(u"document-print-preview"))
        self.action_print_preview.setIcon(icon2)
        self.action_print_pdf = QAction(MainWindow)
        self.action_print_pdf.setObjectName(u"action_print_pdf")
        icon3 = QIcon(QIcon.fromTheme(u"viewpdf"))
        self.action_print_pdf.setIcon(icon3)
        self.action_discard_page = QAction(MainWindow)
        self.action_discard_page.setObjectName(u"action_discard_page")
        icon4 = QIcon(QIcon.fromTheme(u"document-close"))
        self.action_discard_page.setIcon(icon4)
        self.action_show_settings = QAction(MainWindow)
        self.action_show_settings.setObjectName(u"action_show_settings")
        icon5 = QIcon(QIcon.fromTheme(u"configure"))
        self.action_show_settings.setIcon(icon5)
        self.action_show_settings.setMenuRole(QAction.MenuRole.PreferencesRole)
        self.action_download_card_data = QAction(MainWindow)
        self.action_download_card_data.setObjectName(u"action_download_card_data")
        icon6 = QIcon(QIcon.fromTheme(u"edit-download"))
        self.action_download_card_data.setIcon(icon6)
        self.action_new_page = QAction(MainWindow)
        self.action_new_page.setObjectName(u"action_new_page")
        icon7 = QIcon(QIcon.fromTheme(u"document-new"))
        self.action_new_page.setIcon(icon7)
        self.action_save_document = QAction(MainWindow)
        self.action_save_document.setObjectName(u"action_save_document")
        icon8 = QIcon(QIcon.fromTheme(u"document-save"))
        self.action_save_document.setIcon(icon8)
        self.action_new_document = QAction(MainWindow)
        self.action_new_document.setObjectName(u"action_new_document")
        icon9 = QIcon(QIcon.fromTheme(u"document-replace"))
        self.action_new_document.setIcon(icon9)
        self.action_load_document = QAction(MainWindow)
        self.action_load_document.setObjectName(u"action_load_document")
        icon10 = QIcon(QIcon.fromTheme(u"document-open"))
        self.action_load_document.setIcon(icon10)
        self.action_save_as = QAction(MainWindow)
        self.action_save_as.setObjectName(u"action_save_as")
        icon11 = QIcon(QIcon.fromTheme(u"document-save-as"))
        self.action_save_as.setIcon(icon11)
        self.action_show_about_dialog = QAction(MainWindow)
        self.action_show_about_dialog.setObjectName(u"action_show_about_dialog")
        self.action_show_about_dialog.setMenuRole(QAction.MenuRole.AboutRole)
        self.action_show_changelog = QAction(MainWindow)
        self.action_show_changelog.setObjectName(u"action_show_changelog")
        self.action_compact_document = QAction(MainWindow)
        self.action_compact_document.setObjectName(u"action_compact_document")
        icon12 = QIcon(QIcon.fromTheme(u"format-align-vertical-top"))
        self.action_compact_document.setIcon(icon12)
        self.action_edit_document_settings = QAction(MainWindow)
        self.action_edit_document_settings.setObjectName(u"action_edit_document_settings")
        icon13 = QIcon(QIcon.fromTheme(u"document-properties"))
        self.action_edit_document_settings.setIcon(icon13)
        self.action_import_deck_list = QAction(MainWindow)
        self.action_import_deck_list.setObjectName(u"action_import_deck_list")
        icon14 = QIcon(QIcon.fromTheme(u"document-import"))
        self.action_import_deck_list.setIcon(icon14)
        self.action_cleanup_local_image_cache = QAction(MainWindow)
        self.action_cleanup_local_image_cache.setObjectName(u"action_cleanup_local_image_cache")
        icon15 = QIcon(QIcon.fromTheme(u"edit-clear-history"))
        self.action_cleanup_local_image_cache.setIcon(icon15)
        self.action_show_toolbar = QAction(MainWindow)
        self.action_show_toolbar.setObjectName(u"action_show_toolbar")
        self.action_show_toolbar.setCheckable(True)
        self.action_show_toolbar.setChecked(True)
        self.action_download_missing_card_images = QAction(MainWindow)
        self.action_download_missing_card_images.setObjectName(u"action_download_missing_card_images")
        self.action_download_missing_card_images.setIcon(icon6)
        self.action_shuffle_document = QAction(MainWindow)
        self.action_shuffle_document.setObjectName(u"action_shuffle_document")
        icon16 = QIcon(QIcon.fromTheme(u"shuffle"))
        self.action_shuffle_document.setIcon(icon16)
        self.action_undo = QAction(MainWindow)
        self.action_undo.setObjectName(u"action_undo")
        self.action_undo.setEnabled(False)
        icon17 = QIcon(QIcon.fromTheme(u"edit-undo"))
        self.action_undo.setIcon(icon17)
        self.action_redo = QAction(MainWindow)
        self.action_redo.setObjectName(u"action_redo")
        self.action_redo.setEnabled(False)
        icon18 = QIcon(QIcon.fromTheme(u"edit-redo"))
        self.action_redo.setIcon(icon18)
        self.action_add_empty_card = QAction(MainWindow)
        self.action_add_empty_card.setObjectName(u"action_add_empty_card")
        icon19 = QIcon(QIcon.fromTheme(u"list-add"))
        self.action_add_empty_card.setIcon(icon19)
        self.action_add_custom_cards = QAction(MainWindow)
        self.action_add_custom_cards.setObjectName(u"action_add_custom_cards")
        self.action_add_custom_cards.setIcon(icon19)
        self.action_export_png = QAction(MainWindow)
        self.action_export_png.setObjectName(u"action_export_png")
        icon20 = QIcon(QIcon.fromTheme(u"document-export"))
        self.action_export_png.setIcon(icon20)
        self.action_export_card_images = QAction(MainWindow)
        self.action_export_card_images.setObjectName(u"action_export_card_images")
        self.action_export_card_images.setIcon(icon20)
        self.action_web_source_code = QAction(MainWindow)
        self.action_web_source_code.setObjectName(u"action_web_source_code")
        icon21 = QIcon(QIcon.fromTheme(u"globe"))
        self.action_web_source_code.setIcon(icon21)
        self.action_web_source_code_github = QAction(MainWindow)
        self.action_web_source_code_github.setObjectName(u"action_web_source_code_github")
        self.action_web_source_code_github.setIcon(icon21)
        self.action_web_contribute_translations = QAction(MainWindow)
        self.action_web_contribute_translations.setObjectName(u"action_web_contribute_translations")
        icon22 = QIcon(QIcon.fromTheme(u"translate"))
        self.action_web_contribute_translations.setIcon(icon22)
        self.action_web_kofi = QAction(MainWindow)
        self.action_web_kofi.setObjectName(u"action_web_kofi")
        self.action_web_project_on_pypi = QAction(MainWindow)
        self.action_web_project_on_pypi.setObjectName(u"action_web_project_on_pypi")
        self.action_web_project_on_pypi.setIcon(icon21)
        self.central_widget = CentralWidget(MainWindow)
        self.central_widget.setObjectName(u"central_widget")
        MainWindow.setCentralWidget(self.central_widget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1050, 30))
        self.menu_file = QMenu(self.menubar)
        self.menu_file.setObjectName(u"menu_file")
        self.menu_export = QMenu(self.menu_file)
        self.menu_export.setObjectName(u"menu_export")
        self.menu_export.setIcon(icon20)
        self.menu_application = QMenu(self.menubar)
        self.menu_application.setObjectName(u"menu_application")
        self.menu_edit = QMenu(self.menubar)
        self.menu_edit.setObjectName(u"menu_edit")
        self.menuWeb_links = QMenu(self.menubar)
        self.menuWeb_links.setObjectName(u"menuWeb_links")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        self.toolBar.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        MainWindow.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolBar)

        self.menubar.addAction(self.menu_application.menuAction())
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())
        self.menubar.addAction(self.menuWeb_links.menuAction())
        self.menu_file.addAction(self.action_new_document)
        self.menu_file.addAction(self.action_load_document)
        self.menu_file.addAction(self.action_save_document)
        self.menu_file.addAction(self.action_save_as)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_print_preview)
        self.menu_file.addAction(self.action_print)
        self.menu_file.addAction(self.menu_export.menuAction())
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_import_deck_list)
        self.menu_file.addAction(self.action_add_custom_cards)
        self.menu_export.addAction(self.action_print_pdf)
        self.menu_export.addAction(self.action_export_png)
        self.menu_export.addSeparator()
        self.menu_export.addAction(self.action_export_card_images)
        self.menu_application.addAction(self.action_show_settings)
        self.menu_application.addAction(self.action_show_toolbar)
        self.menu_application.addAction(self.action_download_card_data)
        self.menu_application.addAction(self.action_cleanup_local_image_cache)
        self.menu_application.addSeparator()
        self.menu_application.addAction(self.action_show_changelog)
        self.menu_application.addAction(self.action_show_about_dialog)
        self.menu_application.addSeparator()
        self.menu_application.addAction(self.action_quit)
        self.menu_edit.addAction(self.action_undo)
        self.menu_edit.addAction(self.action_redo)
        self.menu_edit.addSeparator()
        self.menu_edit.addAction(self.action_edit_document_settings)
        self.menu_edit.addAction(self.action_compact_document)
        self.menu_edit.addAction(self.action_shuffle_document)
        self.menu_edit.addAction(self.action_download_missing_card_images)
        self.menu_edit.addSeparator()
        self.menu_edit.addAction(self.action_new_page)
        self.menu_edit.addAction(self.action_add_empty_card)
        self.menu_edit.addAction(self.action_discard_page)
        self.menuWeb_links.addAction(self.action_web_source_code)
        self.menuWeb_links.addAction(self.action_web_source_code_github)
        self.menuWeb_links.addAction(self.action_web_project_on_pypi)
        self.menuWeb_links.addSeparator()
        self.menuWeb_links.addAction(self.action_web_contribute_translations)
        self.menuWeb_links.addAction(self.action_web_kofi)
        self.toolBar.addAction(self.action_load_document)
        self.toolBar.addAction(self.action_save_document)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_undo)
        self.toolBar.addAction(self.action_redo)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_print_preview)
        self.toolBar.addAction(self.action_print)
        self.toolBar.addAction(self.action_print_pdf)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_new_page)
        self.toolBar.addAction(self.action_discard_page)

        self.retranslateUi(MainWindow)
        self.action_show_toolbar.toggled.connect(self.toolBar.setVisible)
        self.toolBar.visibilityChanged.connect(self.action_show_toolbar.setChecked)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MTGProxyPrinter", None))
        self.action_quit.setText(QCoreApplication.translate("MainWindow", u"&Quit", None))
#if QT_CONFIG(shortcut)
        self.action_quit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.action_print.setText(QCoreApplication.translate("MainWindow", u"&Print", None))
#if QT_CONFIG(tooltip)
        self.action_print.setToolTip(QCoreApplication.translate("MainWindow", u"Print the current document", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.action_print.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.action_print_preview.setText(QCoreApplication.translate("MainWindow", u"&Show print preview", None))
#if QT_CONFIG(tooltip)
        self.action_print_preview.setToolTip(QCoreApplication.translate("MainWindow", u"Show print preview window", None))
#endif // QT_CONFIG(tooltip)
        self.action_print_pdf.setText(QCoreApplication.translate("MainWindow", u"&Create PDF", None))
#if QT_CONFIG(tooltip)
        self.action_print_pdf.setToolTip(QCoreApplication.translate("MainWindow", u"Create a PDF document", None))
#endif // QT_CONFIG(tooltip)
        self.action_discard_page.setText(QCoreApplication.translate("MainWindow", u"Discard page", None))
#if QT_CONFIG(tooltip)
        self.action_discard_page.setToolTip(QCoreApplication.translate("MainWindow", u"Discard this page.", None))
#endif // QT_CONFIG(tooltip)
        self.action_show_settings.setText(QCoreApplication.translate("MainWindow", u"Settings", None))
        self.action_download_card_data.setText(QCoreApplication.translate("MainWindow", u"Update card data", None))
        self.action_new_page.setText(QCoreApplication.translate("MainWindow", u"New Page", None))
#if QT_CONFIG(tooltip)
        self.action_new_page.setToolTip(QCoreApplication.translate("MainWindow", u"Add a new, empty page.", None))
#endif // QT_CONFIG(tooltip)
        self.action_save_document.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.action_save_document.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.action_new_document.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(shortcut)
        self.action_new_document.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.action_load_document.setText(QCoreApplication.translate("MainWindow", u"Load", None))
#if QT_CONFIG(shortcut)
        self.action_load_document.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.action_save_as.setText(QCoreApplication.translate("MainWindow", u"Save as \u2026", None))
        self.action_show_about_dialog.setText(QCoreApplication.translate("MainWindow", u"About \u2026", None))
        self.action_show_changelog.setText(QCoreApplication.translate("MainWindow", u"Show Changelog", None))
        self.action_compact_document.setText(QCoreApplication.translate("MainWindow", u"Compact document", None))
#if QT_CONFIG(tooltip)
        self.action_compact_document.setToolTip(QCoreApplication.translate("MainWindow", u"Minimize page count: Fill empty slots on pages by moving cards from the end of the document", None))
#endif // QT_CONFIG(tooltip)
        self.action_edit_document_settings.setText(QCoreApplication.translate("MainWindow", u"Edit document settings", None))
#if QT_CONFIG(tooltip)
        self.action_edit_document_settings.setToolTip(QCoreApplication.translate("MainWindow", u"Configure page size, margins, image spacings for the currently edited document.", None))
#endif // QT_CONFIG(tooltip)
        self.action_import_deck_list.setText(QCoreApplication.translate("MainWindow", u"Import deck list", None))
#if QT_CONFIG(tooltip)
        self.action_import_deck_list.setToolTip(QCoreApplication.translate("MainWindow", u"Import a deck list from online sources", None))
#endif // QT_CONFIG(tooltip)
        self.action_cleanup_local_image_cache.setText(QCoreApplication.translate("MainWindow", u"Cleanup card images", None))
#if QT_CONFIG(tooltip)
        self.action_cleanup_local_image_cache.setToolTip(QCoreApplication.translate("MainWindow", u"Delete locally stored card images you no longer need.", None))
#endif // QT_CONFIG(tooltip)
        self.action_show_toolbar.setText(QCoreApplication.translate("MainWindow", u"Show toolbar", None))
#if QT_CONFIG(shortcut)
        self.action_show_toolbar.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+M", None))
#endif // QT_CONFIG(shortcut)
        self.action_download_missing_card_images.setText(QCoreApplication.translate("MainWindow", u"Download missing card images", None))
        self.action_shuffle_document.setText(QCoreApplication.translate("MainWindow", u"Shuffle document", None))
#if QT_CONFIG(tooltip)
        self.action_shuffle_document.setToolTip(QCoreApplication.translate("MainWindow", u"Randomly rearrange all card image.\n"
"If you want to quickly print a full deck for playing,\n"
"use this to reduce the initial deck shuffling required", None))
#endif // QT_CONFIG(tooltip)
        self.action_undo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
        self.action_redo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
        self.action_add_empty_card.setText(QCoreApplication.translate("MainWindow", u"Add empty card to page", None))
#if QT_CONFIG(tooltip)
        self.action_add_empty_card.setToolTip(QCoreApplication.translate("MainWindow", u"Add an empty spacer filling a card slot", None))
#endif // QT_CONFIG(tooltip)
        self.action_add_custom_cards.setText(QCoreApplication.translate("MainWindow", u"Add custom cards", None))
        self.action_export_png.setText(QCoreApplication.translate("MainWindow", u"Export as image sequence", None))
#if QT_CONFIG(tooltip)
        self.action_export_png.setToolTip(QCoreApplication.translate("MainWindow", u"Export document as an image sequence", None))
#endif // QT_CONFIG(tooltip)
        self.action_export_card_images.setText(QCoreApplication.translate("MainWindow", u"Export individual card images", None))
#if QT_CONFIG(tooltip)
        self.action_export_card_images.setToolTip(QCoreApplication.translate("MainWindow", u"Export all card images to a directory", None))
#endif // QT_CONFIG(tooltip)
        self.action_web_source_code.setText(QCoreApplication.translate("MainWindow", u"Source Code", None))
        self.action_web_source_code_github.setText(QCoreApplication.translate("MainWindow", u"Source Code (GitHub)", None))
        self.action_web_contribute_translations.setText(QCoreApplication.translate("MainWindow", u"Contribute Translations", None))
        self.action_web_kofi.setText(QCoreApplication.translate("MainWindow", u"Support development on Ko-Fi", None))
        self.action_web_project_on_pypi.setText(QCoreApplication.translate("MainWindow", u"Project on PyPI", None))
        self.menu_file.setTitle(QCoreApplication.translate("MainWindow", u"Fi&le", None))
        self.menu_export.setTitle(QCoreApplication.translate("MainWindow", u"Export", None))
        self.menu_application.setTitle(QCoreApplication.translate("MainWindow", u"Application", None))
        self.menu_edit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuWeb_links.setTitle(QCoreApplication.translate("MainWindow", u"Web links", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"Show toolbar", None))
    # retranslateUi

