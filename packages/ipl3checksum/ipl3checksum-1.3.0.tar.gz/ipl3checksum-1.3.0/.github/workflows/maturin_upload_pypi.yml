# This file is autogenerated by maturin v1.9.4
# To update, run
#
#    maturin generate-ci github
#
# This file has been manually edited too.
name: Build maturin wheels and upload to PyPI

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Python
        uses: actions/setup-python@main
        with:
          python-version: 3.x

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@main
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
          if-no-files-found: error

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Python
        uses: actions/setup-python@main
        with:
          python-version: 3.x

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2

      - name: Upload wheels
        uses: actions/upload-artifact@main
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist
          if-no-files-found: error

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Python
        uses: actions/setup-python@main
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Upload wheels
        uses: actions/upload-artifact@main
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist
          if-no-files-found: error

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Python
        uses: actions/setup-python@main
        with:
          python-version: 3.x

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Upload wheels
        uses: actions/upload-artifact@main
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@main
        with:
          name: wheels-sdist
          path: dist

  check_clippy_python_bindings:
    name: Check clippy for Python bindings
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy --all-targets --features python_bindings

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist, check_clippy_python_bindings]
    strategy:
      fail-fast: false
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@main
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@main
        with:
          subject-path: 'wheels-*/*'

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.pypi_password }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
