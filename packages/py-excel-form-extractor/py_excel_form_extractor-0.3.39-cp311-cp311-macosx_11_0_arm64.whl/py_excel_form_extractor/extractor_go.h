/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/adhadse/excelFormExtractor/build/lib.macosx-11.0-arm64-cpython-311/py_excel_form_extractor */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "extractor.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: []extractor.CellRange ---
//
extern long long Slice_extractor_CellRange_CTor();
extern GoInt Slice_extractor_CellRange_len(long long handle);
extern long long Slice_extractor_CellRange_elem(long long handle, GoInt _idx);
extern long long Slice_extractor_CellRange_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_extractor_CellRange_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_extractor_CellRange_append(long long handle, long long _vl);

// --- wrapping slice: []extractor.ControlCotent ---
//
extern long long Slice_extractor_ControlCotent_CTor();
extern GoInt Slice_extractor_ControlCotent_len(long long handle);
extern long long Slice_extractor_ControlCotent_elem(long long handle, GoInt _idx);
extern long long Slice_extractor_ControlCotent_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_extractor_ControlCotent_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_extractor_ControlCotent_append(long long handle, long long _vl);
extern char* extractor_SheetNameGetter_GetSheetName(long long _handle);

// --- wrapping struct: extractor.BuyerDetails ---
//
extern long long extractor_BuyerDetails_CTor();
extern char* extractor_BuyerDetails_SheetName_Get(long long handle);
extern void extractor_BuyerDetails_SheetName_Set(long long handle, char* val);
extern char* extractor_BuyerDetails_PartNumber_Get(long long handle);
extern void extractor_BuyerDetails_PartNumber_Set(long long handle, char* val);
extern char* extractor_BuyerDetails_PartDescription_Get(long long handle);
extern void extractor_BuyerDetails_PartDescription_Set(long long handle, char* val);
extern char* extractor_BuyerDetails_ClassificationOfItem_Get(long long handle);
extern void extractor_BuyerDetails_ClassificationOfItem_Set(long long handle, char* val);
extern char* extractor_BuyerDetails_ControlListClassificationNumber_Get(long long handle);
extern void extractor_BuyerDetails_ControlListClassificationNumber_Set(long long handle, char* val);
extern char* extractor_BuyerDetails_RFQ_Get(long long handle);
extern void extractor_BuyerDetails_RFQ_Set(long long handle, char* val);
extern char extractor_BuyerDetails_BuildToPrint_Get(long long handle);
extern void extractor_BuyerDetails_BuildToPrint_Set(long long handle, char val);
extern char extractor_BuyerDetails_ManufacturedToSpecification_Get(long long handle);
extern void extractor_BuyerDetails_ManufacturedToSpecification_Set(long long handle, char val);
extern char extractor_BuyerDetails_OriginalEquipmentManufacturer_Get(long long handle);
extern void extractor_BuyerDetails_OriginalEquipmentManufacturer_Set(long long handle, char val);
extern char extractor_BuyerDetails_Modified_Get(long long handle);
extern void extractor_BuyerDetails_Modified_Set(long long handle, char val);
extern char* extractor_BuyerDetails_GetSheetName(long long _handle);

// --- wrapping struct: extractor.ClassificationCriteria ---
//
extern long long extractor_ClassificationCriteria_CTor();
extern char* extractor_ClassificationCriteria_Label_Get(long long handle);
extern void extractor_ClassificationCriteria_Label_Set(long long handle, char* val);
extern long long extractor_ClassificationCriteria_SearchTerms_Get(long long handle);
extern void extractor_ClassificationCriteria_SearchTerms_Set(long long handle, long long val);
extern long long extractor_ClassificationCriteria_Offset_Get(long long handle);
extern void extractor_ClassificationCriteria_Offset_Set(long long handle, long long val);

// --- wrapping struct: extractor.SECCFExtraction ---
//
extern long long extractor_SECCFExtraction_CTor();
extern long long extractor_SECCFExtraction_BuyerDetails_Get(long long handle);
extern void extractor_SECCFExtraction_BuyerDetails_Set(long long handle, long long val);
extern long long extractor_SECCFExtraction_ProductDetails_Get(long long handle);
extern void extractor_SECCFExtraction_ProductDetails_Set(long long handle, long long val);
extern long long extractor_SECCFExtraction_ControlledContent_Get(long long handle);
extern void extractor_SECCFExtraction_ControlledContent_Set(long long handle, long long val);

// --- wrapping struct: extractor.TriClassificationCritera ---
//
extern long long extractor_TriClassificationCritera_CTor();
extern long long extractor_TriClassificationCritera_TYPE_1_Get(long long handle);
extern void extractor_TriClassificationCritera_TYPE_1_Set(long long handle, long long val);
extern long long extractor_TriClassificationCritera_TYPE_2_Get(long long handle);
extern void extractor_TriClassificationCritera_TYPE_2_Set(long long handle, long long val);
extern long long extractor_TriClassificationCritera_TYPE_3_Get(long long handle);
extern void extractor_TriClassificationCritera_TYPE_3_Set(long long handle, long long val);

// --- wrapping struct: extractor.TriColumnClfExtractor ---
//
extern long long extractor_TriColumnClfExtractor_CTor();

// --- wrapping struct: extractor.BoolClassificationCriteria ---
//
extern long long extractor_BoolClassificationCriteria_CTor();
extern long long extractor_BoolClassificationCriteria_Offset_Get(long long handle);
extern void extractor_BoolClassificationCriteria_Offset_Set(long long handle, long long val);
extern long long extractor_BoolClassificationCriteria_SearchTerms_Get(long long handle);
extern void extractor_BoolClassificationCriteria_SearchTerms_Set(long long handle, long long val);

// --- wrapping struct: extractor.BoolContainsImageExtractor ---
//
extern long long extractor_BoolContainsImageExtractor_CTor();

// --- wrapping struct: extractor.ColumnMapping ---
//
extern long long extractor_ColumnMapping_CTor();
extern char* extractor_ColumnMapping_FieldName_Get(long long handle);
extern void extractor_ColumnMapping_FieldName_Set(long long handle, char* val);
extern long long extractor_ColumnMapping_SearchTerms_Get(long long handle);
extern void extractor_ColumnMapping_SearchTerms_Set(long long handle, long long val);
extern char* extractor_ColumnMapping_FoundColumn_Get(long long handle);
extern void extractor_ColumnMapping_FoundColumn_Set(long long handle, char* val);

// --- wrapping struct: extractor.DivideByZeroError ---
//
extern long long extractor_DivideByZeroError_CTor();

// --- wrapping struct: extractor.DualColumnClfExtractor ---
//
extern long long extractor_DualColumnClfExtractor_CTor();

// --- wrapping struct: extractor.SimpleValueExtractor ---
//
extern long long extractor_SimpleValueExtractor_CTor();

// --- wrapping struct: extractor.CellRange ---
//
extern long long extractor_CellRange_CTor();
extern char* extractor_CellRange_StartCell_Get(long long handle);
extern void extractor_CellRange_StartCell_Set(long long handle, char* val);
extern char* extractor_CellRange_EndCell_Get(long long handle);
extern void extractor_CellRange_EndCell_Set(long long handle, char* val);

// --- wrapping struct: extractor.ControlCotent ---
//
extern long long extractor_ControlCotent_CTor();
extern char* extractor_ControlCotent_SheetName_Get(long long handle);
extern void extractor_ControlCotent_SheetName_Set(long long handle, char* val);
extern char* extractor_ControlCotent_ItemNum_Get(long long handle);
extern void extractor_ControlCotent_ItemNum_Set(long long handle, char* val);
extern char* extractor_ControlCotent_PartNumber_Get(long long handle);
extern void extractor_ControlCotent_PartNumber_Set(long long handle, char* val);
extern char* extractor_ControlCotent_ComponentManufacturerPartNumber_Get(long long handle);
extern void extractor_ControlCotent_ComponentManufacturerPartNumber_Set(long long handle, char* val);
extern char* extractor_ControlCotent_PartDescription_Get(long long handle);
extern void extractor_ControlCotent_PartDescription_Set(long long handle, char* val);
extern char* extractor_ControlCotent_ManufacturerOfComponent_Get(long long handle);
extern void extractor_ControlCotent_ManufacturerOfComponent_Set(long long handle, char* val);
extern char* extractor_ControlCotent_ExportRegulationCountry_Get(long long handle);
extern void extractor_ControlCotent_ExportRegulationCountry_Set(long long handle, char* val);
extern char* extractor_ControlCotent_DualControlListClfNum_Get(long long handle);
extern void extractor_ControlCotent_DualControlListClfNum_Set(long long handle, char* val);
extern char* extractor_ControlCotent_MilitaryControlListClfNum_Get(long long handle);
extern void extractor_ControlCotent_MilitaryControlListClfNum_Set(long long handle, char* val);
extern char* extractor_ControlCotent_IndicateLicenseApplication_Get(long long handle);
extern void extractor_ControlCotent_IndicateLicenseApplication_Set(long long handle, char* val);
extern char* extractor_ControlCotent_TopLevelDeliverableItem_Get(long long handle);
extern void extractor_ControlCotent_TopLevelDeliverableItem_Set(long long handle, char* val);
extern char* extractor_ControlCotent_USML_N_Get(long long handle);
extern void extractor_ControlCotent_USML_N_Set(long long handle, char* val);
extern char* extractor_ControlCotent_ECCN_N_Get(long long handle);
extern void extractor_ControlCotent_ECCN_N_Set(long long handle, char* val);
extern char* extractor_ControlCotent_US_EA_CONTENT_RATIO_Get(long long handle);
extern void extractor_ControlCotent_US_EA_CONTENT_RATIO_Set(long long handle, char* val);

// --- wrapping struct: extractor.ProductDetails ---
//
extern long long extractor_ProductDetails_CTor();
extern char* extractor_ProductDetails_SheetName_Get(long long handle);
extern void extractor_ProductDetails_SheetName_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SupplierPartNumber_Get(long long handle);
extern void extractor_ProductDetails_SupplierPartNumber_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SupplierCompanyName_Get(long long handle);
extern void extractor_ProductDetails_SupplierCompanyName_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SupplierFullAddress_Get(long long handle);
extern void extractor_ProductDetails_SupplierFullAddress_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SupplierCountry_Get(long long handle);
extern void extractor_ProductDetails_SupplierCountry_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SupplierCompanyNumber_Get(long long handle);
extern void extractor_ProductDetails_SupplierCompanyNumber_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ManufacturerPartNumber_Get(long long handle);
extern void extractor_ProductDetails_ManufacturerPartNumber_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ManufacturerCompanyName_Get(long long handle);
extern void extractor_ProductDetails_ManufacturerCompanyName_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ManufacturerFullAddress_Get(long long handle);
extern void extractor_ProductDetails_ManufacturerFullAddress_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ManufacturerCountry_Get(long long handle);
extern void extractor_ProductDetails_ManufacturerCountry_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ManufacturerCompanyNumber_Get(long long handle);
extern void extractor_ProductDetails_ManufacturerCompanyNumber_Set(long long handle, char* val);
extern char* extractor_ProductDetails_CountryOfOrigin_Get(long long handle);
extern void extractor_ProductDetails_CountryOfOrigin_Set(long long handle, char* val);
extern char* extractor_ProductDetails_CustomsTariffCode_Get(long long handle);
extern void extractor_ProductDetails_CustomsTariffCode_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ExportControlRegulated_Get(long long handle);
extern void extractor_ProductDetails_ExportControlRegulated_Set(long long handle, char* val);
extern char* extractor_ProductDetails_PartClassification_Get(long long handle);
extern void extractor_ProductDetails_PartClassification_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ControlListClassificationNumber_Get(long long handle);
extern void extractor_ProductDetails_ControlListClassificationNumber_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ThirdCountryControlledContent_Get(long long handle);
extern void extractor_ProductDetails_ThirdCountryControlledContent_Set(long long handle, char* val);
extern char* extractor_ProductDetails_EndUserStatementRequired_Get(long long handle);
extern void extractor_ProductDetails_EndUserStatementRequired_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ExportLicenceShipmentRequired_Get(long long handle);
extern void extractor_ProductDetails_ExportLicenceShipmentRequired_Set(long long handle, char* val);
extern char* extractor_ProductDetails_ExportLicenceEndUserRequired_Get(long long handle);
extern void extractor_ProductDetails_ExportLicenceEndUserRequired_Set(long long handle, char* val);
extern char* extractor_ProductDetails_AdditionalExportDocsRequired_Get(long long handle);
extern void extractor_ProductDetails_AdditionalExportDocsRequired_Set(long long handle, char* val);
extern char* extractor_ProductDetails_TransferReexportConditions_Get(long long handle);
extern void extractor_ProductDetails_TransferReexportConditions_Set(long long handle, char* val);
extern char* extractor_ProductDetails_RepresentativeName_Get(long long handle);
extern void extractor_ProductDetails_RepresentativeName_Set(long long handle, char* val);
extern char* extractor_ProductDetails_RepresentativePosition_Get(long long handle);
extern void extractor_ProductDetails_RepresentativePosition_Set(long long handle, char* val);
extern char extractor_ProductDetails_RepresentativeSignature_Get(long long handle);
extern void extractor_ProductDetails_RepresentativeSignature_Set(long long handle, char val);
extern char* extractor_ProductDetails_SupplierCompanySeal_Get(long long handle);
extern void extractor_ProductDetails_SupplierCompanySeal_Set(long long handle, char* val);
extern char* extractor_ProductDetails_SignatureDate_Get(long long handle);
extern void extractor_ProductDetails_SignatureDate_Set(long long handle, char* val);
extern char* extractor_ProductDetails_GetSheetName(long long _handle);

// --- wrapping struct: extractor.Response ---
//
extern long long extractor_Response_CTor();
extern char* extractor_Response_Status_Get(long long handle);
extern void extractor_Response_Status_Set(long long handle, char* val);
extern char* extractor_Response_Message_Get(long long handle);
extern void extractor_Response_Message_Set(long long handle, char* val);
extern long long extractor_Response_Data_Get(long long handle);
extern void extractor_Response_Data_Set(long long handle, long long val);

// --- wrapping struct: extractor.SheetNotFoundError ---
//
extern long long extractor_SheetNotFoundError_CTor();
extern char* extractor_SheetNotFoundError_Error(long long _handle);

// --- wrapping struct: extractor.BoolCheckBoxExtractor ---
//
extern long long extractor_BoolCheckBoxExtractor_CTor();

// --- wrapping struct: extractor.DualClassificationCriteria ---
//
extern long long extractor_DualClassificationCriteria_CTor();
extern long long extractor_DualClassificationCriteria_TYPE_1_Get(long long handle);
extern void extractor_DualClassificationCriteria_TYPE_1_Set(long long handle, long long val);
extern long long extractor_DualClassificationCriteria_TYPE_2_Get(long long handle);
extern void extractor_DualClassificationCriteria_TYPE_2_Set(long long handle, long long val);

// --- wrapping struct: extractor.ExcelExtractor ---
//
extern long long extractor_ExcelExtractor_CTor();
extern long long extractor_ExcelExtractor_Extraction_Get(long long handle);
extern void extractor_ExcelExtractor_Extraction_Set(long long handle, long long val);
extern long long extractor_ExcelExtractor_ReplaceCompanyNames(long long _handle, long long items);
extern char* extractor_ExcelExtractor_GetCellValue(long long _handle, long long cellRange, char* sheetName);
extern char* extractor_ExcelExtractor_ToJson(long long _handle);
extern void extractor_ExcelExtractor_ReadFormControls(long long _handle, char goRun);
extern long long extractor_ExcelExtractor_Extract(long long _handle);
extern char* extractor_ExcelExtractor_Close(long long _handle);

// --- wrapping struct: extractor.SearchCriteria ---
//
extern long long extractor_SearchCriteria_CTor();
extern long long extractor_SearchCriteria_SearchTerms_Get(long long handle);
extern void extractor_SearchCriteria_SearchTerms_Set(long long handle, long long val);
extern long long extractor_SearchCriteria_CellRanges_Get(long long handle);
extern void extractor_SearchCriteria_CellRanges_Set(long long handle, long long val);
extern char extractor_SearchCriteria_DualColumnCheckBoxClf_Get(long long handle);
extern void extractor_SearchCriteria_DualColumnCheckBoxClf_Set(long long handle, char val);
extern long long extractor_SearchCriteria_DualColumnClfCriteria_Get(long long handle);
extern void extractor_SearchCriteria_DualColumnClfCriteria_Set(long long handle, long long val);
extern char extractor_SearchCriteria_TriColumnCheckBoxClf_Get(long long handle);
extern void extractor_SearchCriteria_TriColumnCheckBoxClf_Set(long long handle, char val);
extern long long extractor_SearchCriteria_TriColumnClfCriteria_Get(long long handle);
extern void extractor_SearchCriteria_TriColumnClfCriteria_Set(long long handle, long long val);
extern char extractor_SearchCriteria_BoolCheckBox_Get(long long handle);
extern void extractor_SearchCriteria_BoolCheckBox_Set(long long handle, char val);
extern long long extractor_SearchCriteria_BoolClfCriteria_Get(long long handle);
extern void extractor_SearchCriteria_BoolClfCriteria_Set(long long handle, long long val);
extern char extractor_SearchCriteria_BoolContainsImage_Get(long long handle);
extern void extractor_SearchCriteria_BoolContainsImage_Set(long long handle, char val);
extern long long extractor_SearchCriteria_BoolClfContainsImage_Get(long long handle);
extern void extractor_SearchCriteria_BoolClfContainsImage_Set(long long handle, long long val);
extern long long extractor_SearchCriteria_Offset_Get(long long handle);
extern void extractor_SearchCriteria_Offset_Set(long long handle, long long val);

// --- wrapping slice: extractor.CompanyNameList ---
//
extern long long extractor_CompanyNameList_CTor();
extern GoInt extractor_CompanyNameList_len(long long handle);
extern char* extractor_CompanyNameList_elem(long long handle, GoInt _idx);
extern long long extractor_CompanyNameList_subslice(long long handle, GoInt _st, GoInt _ed);
extern void extractor_CompanyNameList_set(long long handle, GoInt _idx, char* _vl);
extern void extractor_CompanyNameList_append(long long handle, char* _vl);
extern long long extractor_MakeSECCFExtractor(char* filePath, long long companyNames);
extern char* utils_RemoveExtraSpaces(char* value);

#ifdef __cplusplus
}
#endif
