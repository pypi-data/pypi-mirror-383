# coding: utf-8

"""
Binance Margin Trading REST API

OpenAPI Specification for the Binance Margin Trading REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance_sdk_margin_trading.rest_api.models.query_margin_accounts_all_oco_response_inner_orders_inner import (
    QueryMarginAccountsAllOcoResponseInnerOrdersInner,
)
from typing import Set
from typing_extensions import Self


class QueryMarginAccountsAllOcoResponseInner(BaseModel):
    """
    QueryMarginAccountsAllOcoResponseInner
    """  # noqa: E501

    order_list_id: Optional[StrictInt] = Field(default=None, alias="orderListId")
    contingency_type: Optional[StrictStr] = Field(default=None, alias="contingencyType")
    list_status_type: Optional[StrictStr] = Field(default=None, alias="listStatusType")
    list_order_status: Optional[StrictStr] = Field(
        default=None, alias="listOrderStatus"
    )
    list_client_order_id: Optional[StrictStr] = Field(
        default=None, alias="listClientOrderId"
    )
    transaction_time: Optional[StrictInt] = Field(default=None, alias="transactionTime")
    symbol: Optional[StrictStr] = None
    is_isolated: Optional[StrictBool] = Field(default=None, alias="isIsolated")
    orders: Optional[List[QueryMarginAccountsAllOcoResponseInnerOrdersInner]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "orderListId",
        "contingencyType",
        "listStatusType",
        "listOrderStatus",
        "listClientOrderId",
        "transactionTime",
        "symbol",
        "isIsolated",
        "orders",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryMarginAccountsAllOcoResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in orders (list)
        _items = []
        if self.orders:
            for _item_orders in self.orders:
                if _item_orders:
                    _items.append(_item_orders.to_dict())
            _dict["orders"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryMarginAccountsAllOcoResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "orderListId": obj.get("orderListId"),
                "contingencyType": obj.get("contingencyType"),
                "listStatusType": obj.get("listStatusType"),
                "listOrderStatus": obj.get("listOrderStatus"),
                "listClientOrderId": obj.get("listClientOrderId"),
                "transactionTime": obj.get("transactionTime"),
                "symbol": obj.get("symbol"),
                "isIsolated": obj.get("isIsolated"),
                "orders": (
                    [
                        QueryMarginAccountsAllOcoResponseInnerOrdersInner.from_dict(
                            _item
                        )
                        for _item in obj["orders"]
                    ]
                    if obj.get("orders") is not None
                    else None
                ),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
