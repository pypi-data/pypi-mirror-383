"""
Binance Margin Trading REST API

OpenAPI Specification for the Binance Margin Trading REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request


from ..models import StartIsolatedMarginUserDataStreamResponse
from ..models import StartMarginUserDataStreamResponse


class TradeDataStreamApi:
    """API Client for TradeDataStreamApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def close_isolated_margin_user_data_stream(
        self,
        symbol: Union[str, None],
        listenkey: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Close Isolated Margin User Data Stream (USER_STREAM)
                DELETE /sapi/v1/userDataStream/isolated
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Isolated-Margin-User-Data-Stream

                Close out a isolated margin user data stream.

        Weight: 3000

                Args:
                    symbol (Union[str, None]):
                    listenkey (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if listenkey is None:
            raise RequiredError(
                field="listenkey",
                error_message="Missing required parameter 'listenkey'",
            )

        payload = {"symbol": symbol, "listenkey": listenkey}

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/sapi/v1/userDataStream/isolated",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def close_margin_user_data_stream(
        self,
        listenkey: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Close Margin User Data Stream (USER_STREAM)
                DELETE /sapi/v1/userDataStream
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Margin-User-Data-Stream

                Close out a Margin user data stream.

        Weight: 3000

                Args:
                    listenkey (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if listenkey is None:
            raise RequiredError(
                field="listenkey",
                error_message="Missing required parameter 'listenkey'",
            )

        payload = {"listenkey": listenkey}

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/sapi/v1/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def keepalive_isolated_margin_user_data_stream(
        self,
        symbol: Union[str, None],
        listen_key: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Keepalive Isolated Margin User Data Stream (USER_STREAM)
                PUT /sapi/v1/userDataStream/isolated
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Isolated-Margin-User-Data-Stream

                Keepalive an isolated margin user data stream to prevent a time out.

        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    listen_key (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        payload = {"symbol": symbol, "listen_key": listen_key}

        return send_request(
            self._session,
            self._configuration,
            method="PUT",
            path="/sapi/v1/userDataStream/isolated",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def keepalive_margin_user_data_stream(
        self,
        listen_key: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Keepalive Margin User Data Stream (USER_STREAM)
                PUT /sapi/v1/userDataStream
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Margin-User-Data-Stream

                Keepalive a margin user data stream to prevent a time out.

        Weight: 1

                Args:
                    listen_key (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        payload = {"listen_key": listen_key}

        return send_request(
            self._session,
            self._configuration,
            method="PUT",
            path="/sapi/v1/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def start_isolated_margin_user_data_stream(
        self,
        symbol: Union[str, None],
    ) -> ApiResponse[StartIsolatedMarginUserDataStreamResponse]:
        """
                Start Isolated Margin User Data Stream (USER_STREAM)
                POST /sapi/v1/userDataStream/isolated
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Isolated-Margin-User-Data-Stream

                Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.

        Weight: 1

                Args:
                    symbol (Union[str, None]):

                Returns:
                    ApiResponse[StartIsolatedMarginUserDataStreamResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol}

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/userDataStream/isolated",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=StartIsolatedMarginUserDataStreamResponse,
        )

    def start_margin_user_data_stream(
        self,
    ) -> ApiResponse[StartMarginUserDataStreamResponse]:
        """
                Start Margin User Data Stream (USER_STREAM)
                POST /sapi/v1/userDataStream
                https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Margin-User-Data-Stream

                Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.

        Weight: 1

                Args:

                Returns:
                    ApiResponse[StartMarginUserDataStreamResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=StartMarginUserDataStreamResponse,
        )
