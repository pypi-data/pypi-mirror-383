"""
Binance Derivatives Trading COIN Futures REST API

OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Optional, Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request

from ..models import BasisResponse
from ..models import CheckServerTimeResponse
from ..models import CompressedAggregateTradesListResponse
from ..models import ContinuousContractKlineCandlestickDataResponse
from ..models import ExchangeInformationResponse
from ..models import GetFundingRateHistoryOfPerpetualFuturesResponse
from ..models import GetFundingRateInfoResponse
from ..models import IndexPriceAndMarkPriceResponse
from ..models import IndexPriceKlineCandlestickDataResponse
from ..models import KlineCandlestickDataResponse
from ..models import LongShortRatioResponse
from ..models import MarkPriceKlineCandlestickDataResponse
from ..models import OldTradesLookupResponse
from ..models import OpenInterestResponse
from ..models import OpenInterestStatisticsResponse
from ..models import OrderBookResponse
from ..models import PremiumIndexKlineDataResponse
from ..models import QueryIndexPriceConstituentsResponse
from ..models import RecentTradesListResponse
from ..models import SymbolOrderBookTickerResponse
from ..models import SymbolPriceTickerResponse
from ..models import TakerBuySellVolumeResponse

from ..models import Ticker24hrPriceChangeStatisticsResponse
from ..models import TopTraderLongShortRatioAccountsResponse
from ..models import TopTraderLongShortRatioPositionsResponse


from ..models import BasisContractTypeEnum
from ..models import BasisPeriodEnum
from ..models import ContinuousContractKlineCandlestickDataContractTypeEnum
from ..models import ContinuousContractKlineCandlestickDataIntervalEnum
from ..models import IndexPriceKlineCandlestickDataIntervalEnum
from ..models import KlineCandlestickDataIntervalEnum
from ..models import LongShortRatioPeriodEnum
from ..models import MarkPriceKlineCandlestickDataIntervalEnum
from ..models import OpenInterestStatisticsContractTypeEnum
from ..models import OpenInterestStatisticsPeriodEnum
from ..models import PremiumIndexKlineDataIntervalEnum
from ..models import TakerBuySellVolumeContractTypeEnum
from ..models import TakerBuySellVolumePeriodEnum
from ..models import TopTraderLongShortRatioAccountsPeriodEnum
from ..models import TopTraderLongShortRatioPositionsPeriodEnum


class MarketDataApi:
    """API Client for MarketDataApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def basis(
        self,
        pair: Union[str, None],
        contract_type: Union[BasisContractTypeEnum, None],
        period: Union[BasisPeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[BasisResponse]:
        """
                Basis
                GET /futures/data/basis
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Basis

                Query basis

        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    pair (Union[str, None]): BTCUSD
                    contract_type (Union[BasisContractTypeEnum, None]): ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL
                    period (Union[BasisPeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[BasisResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if contract_type is None:
            raise RequiredError(
                field="contract_type",
                error_message="Missing required parameter 'contract_type'",
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "pair": pair,
            "contract_type": contract_type,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/basis",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=BasisResponse,
        )

    def check_server_time(
        self,
    ) -> ApiResponse[CheckServerTimeResponse]:
        """
                Check Server time
                GET /dapi/v1/time
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Check-Server-time

                Test connectivity to the Rest API and get the current server time.

        Weight: 1

                Args:

                Returns:
                    ApiResponse[CheckServerTimeResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/time",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=CheckServerTimeResponse,
        )

    def compressed_aggregate_trades_list(
        self,
        symbol: Union[str, None],
        from_id: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[CompressedAggregateTradesListResponse]:
        """
                Compressed/Aggregate Trades List
                GET /dapi/v1/aggTrades
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Compressed-Aggregate-Trades-List

                Get compressed, aggregate trades. Market trades that fill in 100ms with the same price and the same taking side will have the quantity aggregated.

        * support querying futures trade histories that are not older than one year
        * If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 1 hour.
        * If `fromId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.
        * Only market trades will be aggregated and returned, which means the insurance fund trades and ADL trades won't be aggregated.
        * Sending both `startTime`/`endTime` and `fromId` might cause response timeout, please send either `fromId` or `startTime`/`endTime`

        Weight: 20

                Args:
                    symbol (Union[str, None]):
                    from_id (Optional[int] = None): ID to get aggregate trades from INCLUSIVE.
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[CompressedAggregateTradesListResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {
            "symbol": symbol,
            "from_id": from_id,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/aggTrades",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=CompressedAggregateTradesListResponse,
        )

    def continuous_contract_kline_candlestick_data(
        self,
        pair: Union[str, None],
        contract_type: Union[
            ContinuousContractKlineCandlestickDataContractTypeEnum, None
        ],
        interval: Union[ContinuousContractKlineCandlestickDataIntervalEnum, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[ContinuousContractKlineCandlestickDataResponse]:
        """
                Continuous Contract Kline/Candlestick Data
                GET /dapi/v1/continuousKlines
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Continuous-Contract-Kline-Candlestick-Data

                Kline/candlestick bars for a specific contract type.
        Klines are uniquely identified by their open time.

        * Contract type:
        * PERPETUAL
        * CURRENT_QUARTER
        * NEXT_QUARTER


        1000 | 10
        * The difference between `startTime` and `endTime` can only be up to 200 days
        * Between `startTime` and `endTime`, the most recent `limit` data from `endTime` will be returned:
        * If `startTime` and `endTime` are not sent, current timestamp will be set as `endTime`, and the most recent data will be returned.
        * If `startTime` is sent only, the timestamp of 200 days after `startTime` will be set as `endTime`(up to the current time)
        * If `endTime` is sent only, the timestamp of 200 days before `endTime` will be set as `startTime`

        Weight: based on parameter LIMIT
        LIMIT | weight
        ---|---
        [1,100) | 1
        [100, 500) | 2
        [500, 1000] | 5
        > 1000 | 10

                Args:
                    pair (Union[str, None]): BTCUSD
                    contract_type (Union[ContinuousContractKlineCandlestickDataContractTypeEnum, None]): ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL
                    interval (Union[ContinuousContractKlineCandlestickDataIntervalEnum, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[ContinuousContractKlineCandlestickDataResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if contract_type is None:
            raise RequiredError(
                field="contract_type",
                error_message="Missing required parameter 'contract_type'",
            )
        if interval is None:
            raise RequiredError(
                field="interval", error_message="Missing required parameter 'interval'"
            )

        payload = {
            "pair": pair,
            "contract_type": contract_type,
            "interval": interval,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/continuousKlines",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=ContinuousContractKlineCandlestickDataResponse,
        )

    def exchange_information(
        self,
    ) -> ApiResponse[ExchangeInformationResponse]:
        """
                Exchange Information
                GET /dapi/v1/exchangeInfo
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Exchange-Information

                Current exchange trading rules and symbol information

        Weight: 1

                Args:

                Returns:
                    ApiResponse[ExchangeInformationResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/exchangeInfo",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=ExchangeInformationResponse,
        )

    def get_funding_rate_history_of_perpetual_futures(
        self,
        symbol: Union[str, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[GetFundingRateHistoryOfPerpetualFuturesResponse]:
        """
                Get Funding Rate History of Perpetual Futures
                GET /dapi/v1/fundingRate
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Get-Funding-Rate-History-of-Perpetual-Futures

                Get Funding Rate History of Perpetual Futures

        * empty array will be returned for delivery symbols.

        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[GetFundingRateHistoryOfPerpetualFuturesResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {
            "symbol": symbol,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/fundingRate",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetFundingRateHistoryOfPerpetualFuturesResponse,
        )

    def get_funding_rate_info(
        self,
    ) -> ApiResponse[GetFundingRateInfoResponse]:
        """
                Get Funding Rate Info
                GET /dapi/v1/fundingInfo
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Get-Funding-Info

                Query funding rate info for symbols that had FundingRateCap/ FundingRateFloor / fundingIntervalHours adjustment

        Weight: 0

                Args:

                Returns:
                    ApiResponse[GetFundingRateInfoResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/fundingInfo",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetFundingRateInfoResponse,
        )

    def index_price_and_mark_price(
        self,
        symbol: Optional[str] = None,
        pair: Optional[str] = None,
    ) -> ApiResponse[IndexPriceAndMarkPriceResponse]:
        """
                Index Price and Mark Price
                GET /dapi/v1/premiumIndex
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Index-Price-and-Mark-Price

                Query index price and mark price

        Weight: 10

                Args:
                    symbol (Optional[str] = None):
                    pair (Optional[str] = None):

                Returns:
                    ApiResponse[IndexPriceAndMarkPriceResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {"symbol": symbol, "pair": pair}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/premiumIndex",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=IndexPriceAndMarkPriceResponse,
        )

    def index_price_kline_candlestick_data(
        self,
        pair: Union[str, None],
        interval: Union[IndexPriceKlineCandlestickDataIntervalEnum, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[IndexPriceKlineCandlestickDataResponse]:
        """
                Index Price Kline/Candlestick Data
                GET /dapi/v1/indexPriceKlines
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Index-Price-Kline-Candlestick-Data

                Kline/candlestick bars for the index price of a pair. Klines are uniquely identified by their open time.


        1000 | 10
        * The difference between `startTime` and `endTime` can only be up to 200 days
        * Between `startTime` and `endTime`, the most recent `limit` data from `endTime` will be returned:
        * If `startTime` and `endTime` are not sent, current timestamp will be set as `endTime`, and the most recent data will be returned.
        * If `startTime` is sent only, the timestamp of 200 days after `startTime` will be set as `endTime`(up to the current time)
        * If `endTime` is sent only, the timestamp of 200 days before `endTime` will be set as `startTime`

        Weight: based on parameter LIMIT
        LIMIT | weight
        ---|---
        [1,100) | 1
        [100, 500) | 2
        [500, 1000] | 5
        > 1000 | 10

                Args:
                    pair (Union[str, None]): BTCUSD
                    interval (Union[IndexPriceKlineCandlestickDataIntervalEnum, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[IndexPriceKlineCandlestickDataResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if interval is None:
            raise RequiredError(
                field="interval", error_message="Missing required parameter 'interval'"
            )

        payload = {
            "pair": pair,
            "interval": interval,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/indexPriceKlines",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=IndexPriceKlineCandlestickDataResponse,
        )

    def kline_candlestick_data(
        self,
        symbol: Union[str, None],
        interval: Union[KlineCandlestickDataIntervalEnum, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[KlineCandlestickDataResponse]:
        """
                Kline/Candlestick Data
                GET /dapi/v1/klines
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Kline-Candlestick-Data

                Kline/candlestick bars for a symbol.
        Klines are uniquely identified by their open time.

        1000 | 10
        * The difference between `startTime` and `endTime` can only be up to 200 days
        * Between `startTime` and `endTime`, the most recent `limit` data from `endTime` will be returned:
        * If `startTime` and `endTime` are not sent, current timestamp will be set as `endTime`, and the most recent data will be returned.
        * If `startTime` is sent only, the timestamp of 200 days after `startTime` will be set as `endTime`(up to the current time)
        * If `endTime` is sent only, the timestamp of 200 days before `endTime` will be set as `startTime`

        Weight: based on parameter LIMIT
        LIMIT | weight
        ---|---
        [1,100) | 1
        [100, 500) | 2
        [500, 1000] | 5
        > 1000 | 10

                Args:
                    symbol (Union[str, None]):
                    interval (Union[KlineCandlestickDataIntervalEnum, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[KlineCandlestickDataResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if interval is None:
            raise RequiredError(
                field="interval", error_message="Missing required parameter 'interval'"
            )

        payload = {
            "symbol": symbol,
            "interval": interval,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/klines",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=KlineCandlestickDataResponse,
        )

    def long_short_ratio(
        self,
        pair: Union[str, None],
        period: Union[LongShortRatioPeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[LongShortRatioResponse]:
        """
                Long/Short Ratio
                GET /futures/data/globalLongShortAccountRatio
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Long-Short-Ratio

                Query symbol Long/Short Ratio

        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    pair (Union[str, None]): BTCUSD
                    period (Union[LongShortRatioPeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[LongShortRatioResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "pair": pair,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/globalLongShortAccountRatio",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=LongShortRatioResponse,
        )

    def mark_price_kline_candlestick_data(
        self,
        symbol: Union[str, None],
        interval: Union[MarkPriceKlineCandlestickDataIntervalEnum, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[MarkPriceKlineCandlestickDataResponse]:
        """
                Mark Price Kline/Candlestick Data
                GET /dapi/v1/markPriceKlines
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Mark-Price-Kline-Candlestick-Data

                Kline/candlestick bars for the mark price of a symbol.
        Klines are uniquely identified by their open time.


        1000 | 10
        * The difference between `startTime` and `endTime` can only be up to 200 days
        * Between `startTime` and `endTime`, the most recent `limit` data from `endTime` will be returned:
        * If `startTime` and `endTime` are not sent, current timestamp will be set as `endTime`, and the most recent data will be returned.
        * If `startTime` is sent only, the timestamp of 200 days after `startTime` will be set as `endTime`(up to the current time)
        * If `endTime` is sent only, the timestamp of 200 days before `endTime` will be set as `startTime`

        Weight: based on parameter LIMIT
        LIMIT | weight
        ---|---
        [1,100) | 1
        [100, 500) | 2
        [500, 1000] | 5
        > 1000 | 10

                Args:
                    symbol (Union[str, None]):
                    interval (Union[MarkPriceKlineCandlestickDataIntervalEnum, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[MarkPriceKlineCandlestickDataResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if interval is None:
            raise RequiredError(
                field="interval", error_message="Missing required parameter 'interval'"
            )

        payload = {
            "symbol": symbol,
            "interval": interval,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/markPriceKlines",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=MarkPriceKlineCandlestickDataResponse,
        )

    def old_trades_lookup(
        self,
        symbol: Union[str, None],
        limit: Optional[int] = None,
        from_id: Optional[int] = None,
    ) -> ApiResponse[OldTradesLookupResponse]:
        """
                Old Trades Lookup(MARKET_DATA)
                GET /dapi/v1/historicalTrades
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Old-Trades-Lookup

                Get older market historical trades.

        * Market trades means trades filled in the order book. Only market trades will be returned, which means the insurance fund trades and ADL trades won't be returned.

        Weight: 20

                Args:
                    symbol (Union[str, None]):
                    limit (Optional[int] = None): Default 100; max 1000
                    from_id (Optional[int] = None): ID to get aggregate trades from INCLUSIVE.

                Returns:
                    ApiResponse[OldTradesLookupResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol, "limit": limit, "from_id": from_id}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/historicalTrades",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OldTradesLookupResponse,
        )

    def open_interest(
        self,
        symbol: Union[str, None],
    ) -> ApiResponse[OpenInterestResponse]:
        """
                Open Interest
                GET /dapi/v1/openInterest
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Open-Interest

                Get present open interest of a specific symbol.

        Weight: 1

                Args:
                    symbol (Union[str, None]):

                Returns:
                    ApiResponse[OpenInterestResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/openInterest",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OpenInterestResponse,
        )

    def open_interest_statistics(
        self,
        pair: Union[str, None],
        contract_type: Union[OpenInterestStatisticsContractTypeEnum, None],
        period: Union[OpenInterestStatisticsPeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[OpenInterestStatisticsResponse]:
        """
                Open Interest Statistics
                GET /futures/data/openInterestHist
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Open-Interest-Statistics

                Query open interest stats


        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    pair (Union[str, None]): BTCUSD
                    contract_type (Union[OpenInterestStatisticsContractTypeEnum, None]): ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL
                    period (Union[OpenInterestStatisticsPeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[OpenInterestStatisticsResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if contract_type is None:
            raise RequiredError(
                field="contract_type",
                error_message="Missing required parameter 'contract_type'",
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "pair": pair,
            "contract_type": contract_type,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/openInterestHist",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OpenInterestStatisticsResponse,
        )

    def order_book(
        self,
        symbol: Union[str, None],
        limit: Optional[int] = None,
    ) -> ApiResponse[OrderBookResponse]:
        """
                Order Book
                GET /dapi/v1/depth
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Order-Book

                Query orderbook on specific symbol

        Weight: Adjusted based on the limit:
        Limit | Weight
        ------------ | ------------
        5, 10, 20, 50 | 2
        100 | 5
        500 | 10
        1000 | 20

                Args:
                    symbol (Union[str, None]):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[OrderBookResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol, "limit": limit}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/depth",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderBookResponse,
        )

    def premium_index_kline_data(
        self,
        symbol: Union[str, None],
        interval: Union[PremiumIndexKlineDataIntervalEnum, None],
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> ApiResponse[PremiumIndexKlineDataResponse]:
        """
                Premium index Kline Data
                GET /dapi/v1/premiumIndexKlines
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Premium-index-Kline-Data

                Premium index kline bars of a symbol. Klines are uniquely identified by their open time.


        * If startTime and endTime are not sent, the most recent klines are returned.

        Weight: based on parameter LIMIT
        | LIMIT       | weight |
        | ----------- | ------ |
        | [1,100)     | 1      |
        | [100, 500)  | 2      |
        | [500, 1000] | 5      |
        | > 1000      | 10     |

                Args:
                    symbol (Union[str, None]):
                    interval (Union[PremiumIndexKlineDataIntervalEnum, None]):
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[PremiumIndexKlineDataResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if interval is None:
            raise RequiredError(
                field="interval", error_message="Missing required parameter 'interval'"
            )

        payload = {
            "symbol": symbol,
            "interval": interval,
            "start_time": start_time,
            "end_time": end_time,
            "limit": limit,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/premiumIndexKlines",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=PremiumIndexKlineDataResponse,
        )

    def query_index_price_constituents(
        self,
        symbol: Union[str, None],
    ) -> ApiResponse[QueryIndexPriceConstituentsResponse]:
        """
                Query Index Price Constituents
                GET /dapi/v1/constituents
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Index-Constituents

                Query index price constituents

        Weight: 1

                Args:
                    symbol (Union[str, None]):

                Returns:
                    ApiResponse[QueryIndexPriceConstituentsResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/constituents",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=QueryIndexPriceConstituentsResponse,
        )

    def recent_trades_list(
        self,
        symbol: Union[str, None],
        limit: Optional[int] = None,
    ) -> ApiResponse[RecentTradesListResponse]:
        """
                Recent Trades List
                GET /dapi/v1/trades
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Recent-Trades-List

                Get recent market trades

        * Market trades means trades filled in the order book. Only market trades will be returned, which means the insurance fund trades and ADL trades won't be returned.

        Weight: 5

                Args:
                    symbol (Union[str, None]):
                    limit (Optional[int] = None): Default 100; max 1000

                Returns:
                    ApiResponse[RecentTradesListResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol, "limit": limit}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/trades",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=RecentTradesListResponse,
        )

    def symbol_order_book_ticker(
        self,
        symbol: Optional[str] = None,
        pair: Optional[str] = None,
    ) -> ApiResponse[SymbolOrderBookTickerResponse]:
        """
                Symbol Order Book Ticker
                GET /dapi/v1/ticker/bookTicker
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Symbol-Order-Book-Ticker

                Best price/qty on the order book for a symbol or symbols.

        * Symbol and pair cannot be sent together
        * If a pair is sent,tickers for all symbols of the pair will be returned
        * If either a pair or symbol is sent, tickers for all symbols of all pairs will be returned

        Weight: 2 for a single symbol, 5 when the symbol parameter is omitted

                Args:
                    symbol (Optional[str] = None):
                    pair (Optional[str] = None):

                Returns:
                    ApiResponse[SymbolOrderBookTickerResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {"symbol": symbol, "pair": pair}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/ticker/bookTicker",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SymbolOrderBookTickerResponse,
        )

    def symbol_price_ticker(
        self,
        symbol: Optional[str] = None,
        pair: Optional[str] = None,
    ) -> ApiResponse[SymbolPriceTickerResponse]:
        """
                Symbol Price Ticker
                GET /dapi/v1/ticker/price
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Symbol-Price-Ticker

                Latest price for a symbol or symbols.

        * Symbol and pair cannot be sent together
        * If a pair is sent,tickers for all symbols of the pair will be returned
        * If either a pair or symbol is sent, tickers for all symbols of all pairs will be returned

        Weight: 1 for a single symbol, 2 when the symbol parameter is omitted

                Args:
                    symbol (Optional[str] = None):
                    pair (Optional[str] = None):

                Returns:
                    ApiResponse[SymbolPriceTickerResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {"symbol": symbol, "pair": pair}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/ticker/price",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SymbolPriceTickerResponse,
        )

    def taker_buy_sell_volume(
        self,
        pair: Union[str, None],
        contract_type: Union[TakerBuySellVolumeContractTypeEnum, None],
        period: Union[TakerBuySellVolumePeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[TakerBuySellVolumeResponse]:
        """
                Taker Buy/Sell Volume
                GET /futures/data/takerBuySellVol
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Taker-Buy-Sell-Volume

                Taker Buy Volume: the total volume of buy orders filled by takers within the period.
        Taker Sell Volume: the total volume of sell orders filled by takers within the period.

        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    pair (Union[str, None]): BTCUSD
                    contract_type (Union[TakerBuySellVolumeContractTypeEnum, None]): ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL
                    period (Union[TakerBuySellVolumePeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[TakerBuySellVolumeResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if contract_type is None:
            raise RequiredError(
                field="contract_type",
                error_message="Missing required parameter 'contract_type'",
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "pair": pair,
            "contract_type": contract_type,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/takerBuySellVol",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=TakerBuySellVolumeResponse,
        )

    def test_connectivity(
        self,
    ) -> ApiResponse[None]:
        """
                Test Connectivity
                GET /dapi/v1/ping
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Test-Connectivity

                Test connectivity to the Rest API.

        Weight: 1

                Args:

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/ping",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def ticker24hr_price_change_statistics(
        self,
        symbol: Optional[str] = None,
        pair: Optional[str] = None,
    ) -> ApiResponse[Ticker24hrPriceChangeStatisticsResponse]:
        """
                24hr Ticker Price Change Statistics
                GET /dapi/v1/ticker/24hr
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/24hr-Ticker-Price-Change-Statistics

                24 hour rolling window price change statistics.

        * Symbol and pair cannot be sent together
        * If a pair is sent,tickers for all symbols of the pair will be returned
        * If either a pair or symbol is sent, tickers for all symbols of all pairs will be returned

        Weight: 1 for a single symbol, 40 when the symbol parameter is omitted
        Careful when accessing this with no symbol.

                Args:
                    symbol (Optional[str] = None):
                    pair (Optional[str] = None):

                Returns:
                    ApiResponse[Ticker24hrPriceChangeStatisticsResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {"symbol": symbol, "pair": pair}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/dapi/v1/ticker/24hr",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=Ticker24hrPriceChangeStatisticsResponse,
        )

    def top_trader_long_short_ratio_accounts(
        self,
        symbol: Union[str, None],
        period: Union[TopTraderLongShortRatioAccountsPeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[TopTraderLongShortRatioAccountsResponse]:
        """
                Top Trader Long/Short Ratio (Accounts)
                GET /futures/data/topLongShortAccountRatio
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Top-Long-Short-Account-Ratio

                The proportion of net long and net short accounts to total accounts of the top 20% users with the highest margin balance. Each account is counted once only.
        Long Account % = Accounts of top traders with net long positions / Total accounts of top traders with open positions
        Short Account % = Accounts of top traders with net short positions / Total accounts of top traders with open positions
        Long/Short Ratio (Accounts) = Long Account % / Short Account %

        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    period (Union[TopTraderLongShortRatioAccountsPeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[TopTraderLongShortRatioAccountsResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "symbol": symbol,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/topLongShortAccountRatio",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=TopTraderLongShortRatioAccountsResponse,
        )

    def top_trader_long_short_ratio_positions(
        self,
        pair: Union[str, None],
        period: Union[TopTraderLongShortRatioPositionsPeriodEnum, None],
        limit: Optional[int] = None,
        start_time: Optional[int] = None,
        end_time: Optional[int] = None,
    ) -> ApiResponse[TopTraderLongShortRatioPositionsResponse]:
        """
                Top Trader Long/Short Ratio (Positions)
                GET /futures/data/topLongShortPositionRatio
                https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/rest-api/Top-Trader-Long-Short-Ratio

                The proportion of net long and net short positions to total open positions of the top 20% users with the highest margin balance.
        Long Position % = Long positions of top traders / Total open positions of top traders
        Short Position % = Short positions of top traders / Total open positions of top traders
        Long/Short Ratio (Positions) = Long Position % / Short Position %

        * If startTime and endTime are not sent, the most recent data is returned.
        * Only the data of the latest 30 days is available.

        Weight: 1

                Args:
                    pair (Union[str, None]): BTCUSD
                    period (Union[TopTraderLongShortRatioPositionsPeriodEnum, None]): "5m","15m","30m","1h","2h","4h","6h","12h","1d"
                    limit (Optional[int] = None): Default 100; max 1000
                    start_time (Optional[int] = None):
                    end_time (Optional[int] = None):

                Returns:
                    ApiResponse[TopTraderLongShortRatioPositionsResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if pair is None:
            raise RequiredError(
                field="pair", error_message="Missing required parameter 'pair'"
            )
        if period is None:
            raise RequiredError(
                field="period", error_message="Missing required parameter 'period'"
            )

        payload = {
            "pair": pair,
            "period": period,
            "limit": limit,
            "start_time": start_time,
            "end_time": end_time,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/futures/data/topLongShortPositionRatio",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=TopTraderLongShortRatioPositionsResponse,
        )
