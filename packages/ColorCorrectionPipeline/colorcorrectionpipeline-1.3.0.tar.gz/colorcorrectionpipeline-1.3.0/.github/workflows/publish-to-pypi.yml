name: Publish to PyPI

on:
  push:
    paths:
      - 'pyproject.toml'
      - 'ColorCorrectionPipeline/__version__.py'
    branches:
      - main
      - 'release/**'  # Supports release branches like release/v1.3.0
  pull_request:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'ColorCorrectionPipeline/__version__.py'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-publish:
    name: Build and publish Python distribution to PyPI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine hatchling
    
    - name: Extract version from __version__.py
      id: get_version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'ColorCorrectionPipeline'); from __version__ import __version__; print(__version__)")
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "📦 Package version: ${VERSION}"
    
    - name: Check if version exists on PyPI
      id: check_pypi
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "🔍 Checking if version ${VERSION} exists on PyPI..."
        if pip index versions ColorCorrectionPipeline 2>/dev/null | grep -q "${VERSION}"; then
          echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
          echo "⚠️  Version ${VERSION} already exists on PyPI"
        else
          echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
          echo "✅ Version ${VERSION} does not exist on PyPI, will upload"
        fi
      continue-on-error: true
    
    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        echo "📦 Build artifacts:"
        ls -lh dist/
    
    - name: Validate distribution
      run: |
        echo "🔍 Validating distribution files..."
        twine check dist/*
        echo "✅ Distribution validation passed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30
    
    - name: Publish to PyPI
      if: steps.check_pypi.outputs.VERSION_EXISTS != 'true' && (github.ref == 'refs/heads/main' || github.event_name == 'release')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_CCP_TOKEN }}
      run: |
        echo "📤 Uploading to PyPI..."
        twine upload dist/*
        echo "✅ Successfully published to PyPI!"
    
    - name: Create GitHub Release Tag
      if: steps.check_pypi.outputs.VERSION_EXISTS != 'true' && github.ref == 'refs/heads/main' && github.event_name != 'release'
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "🏷️  Creating git tag v${VERSION}..."
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${VERSION}" -m "Release version ${VERSION}"
        git push origin "v${VERSION}"
        echo "✅ Tag v${VERSION} created successfully"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build only (feature branch)
      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "✅ Build successful on feature branch: ${{ github.ref_name }}"
        echo "📦 Package version: ${VERSION}"
        echo "ℹ️  Note: PyPI publishing only happens on main branch"
        echo "🎯 Artifacts uploaded for download"
    
    - name: Pull Request Check
      if: github.event_name == 'pull_request'
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "✅ Build and validation successful for PR"
        echo "📦 Package version: ${VERSION}"
        echo "🚀 This will be published when merged to main"
        echo "🎯 Artifacts uploaded for download"
    
    - name: Skip publishing (version exists)
      if: steps.check_pypi.outputs.VERSION_EXISTS == 'true'
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "⚠️  Version ${VERSION} already exists on PyPI"
        echo "ℹ️  Skipping publication to avoid duplicate"
        echo "✅ Build and validation completed successfully"
        echo "🎯 Artifacts uploaded for download"
