#!/usr/bin/env python
#    "$Name:  $";
#    "$Header:  $";
# ============================================================================
#
# file :        TestServer
#
# description : Python source for the TestServer and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                TestServer are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
# ============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
# ============================================================================
#

import sys
import numpy
import struct
import pickle

try:
    import tango
except Exception:
    import PyTango as tango

if sys.version_info > (3,):
    long = int
    # unicode = str
else:
    bytes = str


# =================================================================
#   TestServer Class Description:
#
#         My Simple Server
#
# =================================================================
#     Device States Description:
#
#   DevState.ON :  Server On
# =================================================================


class TestServer(tango.Device_4Impl):

    # -------- Add you global variables here --------------------------

    # -----------------------------------------------------------------
    #    Device constructor
    # -----------------------------------------------------------------

    def __init__(self, cl, name):
        tango.Device_4Impl.__init__(self, cl, name)

        self.defaults = {}
        self.defaults["ScalarBoolean"] = [
            True, tango.SCALAR, tango.DevBoolean]
        self.defaults["ScalarUChar"] = [
            12, tango.SCALAR, tango.DevUChar]
        self.defaults["ScalarShort"] = [
            12, tango.SCALAR, tango.DevShort]
        self.defaults["ScalarUShort"] = [
            12, tango.SCALAR, tango.DevUShort]
        self.defaults["ScalarLong"] = [
            123, tango.SCALAR, tango.DevLong]
        self.defaults["ScalarULong"] = [
            123, tango.SCALAR, tango.DevULong]
        self.defaults["ScalarLong64"] = [
            123, tango.SCALAR, tango.DevLong64]
        self.defaults["ScalarULong64"] = [
            123, tango.SCALAR, tango.DevULong64]
        self.defaults["ScalarFloat"] = [
            -1.23, tango.SCALAR, tango.DevFloat]
        self.defaults["ScalarDouble"] = [
            123.45, tango.SCALAR, tango.DevDouble]
        self.defaults["ScalarString"] = [
            "Hello!", tango.SCALAR, tango.DevString]
        self.defaults["ScalarEncoded"] = [
            ("UTF8", b"Hello UTF8! Pr\xc3\xb3ba \xe6\xb5\x8b"),
            tango.SCALAR, tango.DevEncoded]

        self.dtype = None

        self.attr_ScalarBoolean = True
        self.attr_ScalarUChar = 12
        self.attr_ScalarShort = 12
        self.attr_ScalarUShort = 12
        self.attr_ScalarLong = 123
        self.attr_ScalarULong = 123
        self.attr_ScalarLong64 = 123
        self.attr_ScalarULong64 = 123
        self.attr_ScalarFloat = -1.23
        self.attr_ScalarDouble = 1.233
        self.attr_ScalarString = "Hello!"
        self.attr_FilenamePattern = "testscan"
        self.attr_ScalarEncoded = \
            "UTF8", b"Hello UTF8! Pr\xc3\xb3ba \xe6\xb5\x8b"
        self.attr_Crystal = 1
        self.attr_ImagesPerFile = 14
        self.attr_UnitCalibration = 2187.3755

        self.attr_SpectrumBoolean = [True, False]
        self.attr_SpectrumUChar = [1, 2]
        self.attr_SpectrumShort = [1, -3, 4]
        self.attr_SpectrumUShort = [1, 4, 5, 6]
        self.attr_SpectrumULong = numpy.array(
            [1234, 5678, 45, 345], dtype='uint32')
        self.attr_SpectrumLong = [1123, -435, 35, -6345]
        self.attr_SpectrumLong64 = [1123, -435, 35, -6345]
        self.attr_SpectrumULong64 = [1123, 23435, 35, 3345]
        self.attr_SpectrumFloat = [11.23, -4.35, 3.5, -634.5]
        self.attr_SpectrumDouble = [1.123, 23.435, 3.5, 3.345]
        self.attr_SpectrumString = ["Hello", "Word", "!", "!!"]
        self.attr_SpectrumEncoded = [
            "INT32", b"\x00\x01\x03\x04\x20\x31\x43\x54\x10\x11\x13\x14"]
        self.attr_SpectrumEncoded = self.encodeSpectrum()

        self.attr_ImageBoolean = numpy.array([[True]], dtype='int16')
        self.attr_ImageUChar = numpy.array([[2, 5], [3, 4]], dtype='uint8')
        self.attr_ImageShort = numpy.array([[2, 5], [3, 4]], dtype='int16')
        self.attr_ImageUShort = numpy.array([[2, 5], [3, 4]], dtype='uint16')
        self.attr_ImageLong = numpy.array([[2, 5], [3, 4]], dtype='int32')
        self.attr_ImageULong = numpy.array([[2, 5], [3, 4]], dtype='uint32')
        self.attr_ImageLong64 = numpy.array([[2, 5], [3, 4]], dtype='int64')
        self.attr_ImageULong64 = numpy.array([[2, 5], [3, 4]], dtype='uint64')
        self.attr_ImageFloat = numpy.array([[2., 5.], [3., 4.]],
                                           dtype='float32')
        self.attr_ImageDouble = numpy.array([[2.4, 5.45], [3.4, 4.45]],
                                            dtype='double')
        self.attr_ImageString = [['True']]
        self.attr_ImageEncoded = self.encodeImage()

        self.attr_value = ""
        TestServer.init_device(self)

    def encodeSpectrum(self):
        format = 'INT32'
        # uint8 B
        #        mode = 0
        # uint16 H
        #        mode = 1
        # uint32 I
        #        mode = 2
        fspectrum = numpy.array(self.attr_SpectrumULong, dtype='int32')
        ibuffer = bytes(struct.pack('i' * fspectrum.size, *fspectrum))
        return [format, ibuffer]

    def encodeImage(self):
        format = 'VIDEO_IMAGE'
        # uint8 B
        mode = 0
        # uint16 H
        #  mode = 1
        width, height = self.attr_ImageUChar.shape
        version = 1
        endian = sys.byteorder == u'big'
        # endian = ord(str(struct.pack('=H', 1)[-1]))
        hsize = struct.calcsize('!IHHqiiHHHH')
        header = struct.pack(
            '!IHHqiiHHHH', 0x5644454f, version, mode, -1,
            width, height, endian, hsize, 0, 0)
        fimage = self.attr_ImageUChar.flatten()
        ibuffer = struct.pack('B' * fimage.size, *fimage)
        return [format, bytes(header + ibuffer)]

    # -----------------------------------------------------------------
    #    Device destructor
    # -----------------------------------------------------------------
    def delete_device(self):
        """ """

    # -----------------------------------------------------------------
    #    Device initialization
    # -----------------------------------------------------------------

    def init_device(self):
        self.set_state(tango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        env = {'new': {'ActiveMntGrp': 'nxsmntgrp',
                       'DataCompressionRank': 0,
                       'NeXusSelectorDevice': u'p09/nxsrecselector/1',
                       'ScanDir': u'/tmp/',
                       'ScanFile': [u'sar4r.nxs'],
                       'ScanID': 192,
                       '_ViewOptions': {'ShowDial': True}}}

        self.attr_Environment = ("pickle", pickle.dumps(env, protocol=2))
        self.ChangeValueType("ScalarDouble")
        self.attr_DoorList = ['test/door/1', 'test/door/2']
        self.attr_MotorList = []
        self.attr_ExpChannelList = []

    # -----------------------------------------------------------------
    #    Always excuted hook method
    # -----------------------------------------------------------------
    def always_executed_hook(self):
        pass
    #        print "In ", self.get_name(), "::always_excuted_hook()"

    #
    # =================================================================
    #
    #    TestServer read/write attribute methods
    #
    # =================================================================
    #
    # -----------------------------------------------------------------
    #    Read DoorList attribute
    # -----------------------------------------------------------------
    def read_DoorList(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_DoorList)

    # -----------------------------------------------------------------
    #    Write DoorList attribute
    # -----------------------------------------------------------------
    def write_DoorList(self, attr):
        #    Add your own code here

        self.attr_DoorList = attr.get_write_value()

    #
    # =================================================================
    #
    #    TestServer read/write attribute methods
    #
    # =================================================================
    #
    # -----------------------------------------------------------------
    #    Read MotorList attribute
    # -----------------------------------------------------------------
    def read_MotorList(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_MotorList)

    # -----------------------------------------------------------------
    #    Write MotorList attribute
    # -----------------------------------------------------------------
    def write_MotorList(self, attr):
        #    Add your own code here

        self.attr_MotorList = attr.get_write_value()

    #
    # =================================================================
    #
    #    TestServer read/write attribute methods
    #
    # =================================================================
    #
    # -----------------------------------------------------------------
    #    Read ExpChannelList attribute
    # -----------------------------------------------------------------
    def read_ExpChannelList(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ExpChannelList)

    # -----------------------------------------------------------------
    #    Write ExpChannelList attribute
    # -----------------------------------------------------------------
    def write_ExpChannelList(self, attr):
        #    Add your own code here

        self.attr_ExpChannelList = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read Environment attribute
    # -----------------------------------------------------------------
    def read_Environment(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_Environment[0], self.attr_Environment[1])

    # -----------------------------------------------------------------
    #    Write Environment attribute
    # -----------------------------------------------------------------
    def write_Environment(self, attr):
        #    Add your own code here

        self.attr_Environment = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read Value attribute
    # -----------------------------------------------------------------
    def read_Value(self, attr):
        #    Add your own code here

        attr.set_value(self.defaults[self.dtype][0])

    # -----------------------------------------------------------------
    #    Write Value attribute
    # -----------------------------------------------------------------
    def write_Value(self, attr):
        #    Add your own code here

        self.defaults[self.dtype][0] = attr.get_write_value()

    # =================================================================
    #
    #    TestServer command methods
    #
    # =================================================================
    #
    # -----------------------------------------------------------------
    #    SetState command:
    #
    #    Description: Set state of tango device
    #
    #    argin: DevString     tango state
    # -----------------------------------------------------------------
    def SetState(self, state):
        if state == "RUNNING":
            self.set_state(tango.DevState.RUNNING)
        elif state == "FAULT":
            self.set_state(tango.DevState.FAULT)
        elif state == "ALARM":
            self.set_state(tango.DevState.ALARM)
        else:
            self.set_state(tango.DevState.ON)

    # -----------------------------------------------------------------
    #    ChangeValueType command:
    #
    #    Description: Set state of tango device
    #
    #    argin: DevString     tango state
    # -----------------------------------------------------------------
    def ChangeValueType(self, dtype):
        if dtype in self.defaults.keys():
            if self.dtype is not None:
                self.remove_attribute("Value")
            self.dtype = dtype
            dev_class = self.get_device_class()
            attr_data = tango.AttrData(
                "Value", dev_class.get_name(),
                [
                    [
                        self.defaults[self.dtype][2],
                        self.defaults[self.dtype][1],
                        tango.READ_WRITE
                    ],
                    {
                        'description': "dynamic attribute",
                    }
                ]
            )

            self.add_attribute(attr_data,
                               r_meth=self.read_Value,
                               w_meth=self.write_Value)

    # -----------------------------------------------------------------
    #    Read ScalarLong attribute
    # -----------------------------------------------------------------
    def read_ScalarLong(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ScalarLong)

    # -----------------------------------------------------------------
    #    Write ScalarLong attribute
    # -----------------------------------------------------------------
    def write_ScalarLong(self, attr):
        #    Add your own code here
        self.attr_ScalarLong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read Crystal attribute
    # -----------------------------------------------------------------
    def read_Crystal(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_Crystal)

    # -----------------------------------------------------------------
    #    Write Crystal attribute
    # -----------------------------------------------------------------
    def write_Crystal(self, attr):
        #    Add your own code here
        self.attr_Crystal = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read Crystal attribute
    # -----------------------------------------------------------------
    def read_ImagesPerFile(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImagesPerFile)

    # -----------------------------------------------------------------
    #    Write Crystal attribute
    # -----------------------------------------------------------------
    def write_ImagesPerFile(self, attr):
        #    Add your own code here
        self.attr_ImagesPerFile = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read UnitCalibration attribute
    # -----------------------------------------------------------------
    def read_UnitCalibration(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_UnitCalibration)

    # -----------------------------------------------------------------
    #    Write UnitCalibration attribute
    # -----------------------------------------------------------------
    def write_UnitCalibration(self, attr):
        #    Add your own code here
        self.attr_UnitCalibration = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarBoolean attribute
    # -----------------------------------------------------------------
    def read_ScalarBoolean(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarBoolean)

    # -----------------------------------------------------------------
    #    Write ScalarBoolean attribute
    # -----------------------------------------------------------------
    def write_ScalarBoolean(self, attr):
        #    Add your own code here
        self.attr_ScalarBoolean = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarShort attribute
    # -----------------------------------------------------------------
    def read_ScalarShort(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ScalarShort)

    # -----------------------------------------------------------------
    #    Write ScalarShort attribute
    # -----------------------------------------------------------------
    def write_ScalarShort(self, attr):
        #    Add your own code here
        self.attr_ScalarShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarUShort attribute
    # -----------------------------------------------------------------
    def read_ScalarUShort(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ScalarUShort)

    # -----------------------------------------------------------------
    #    Write ScalarUShort attribute
    # -----------------------------------------------------------------
    def write_ScalarUShort(self, attr):
        #    Add your own code here
        self.attr_ScalarUShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarULong attribute
    # -----------------------------------------------------------------
    def read_ScalarULong(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarULong)

    # -----------------------------------------------------------------
    #    Write ScalarULong attribute
    # -----------------------------------------------------------------
    def write_ScalarULong(self, attr):
        #    Add your own code here
        self.attr_ScalarULong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarLong64 attribute
    # -----------------------------------------------------------------
    def read_ScalarLong64(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ScalarLong64)

    # -----------------------------------------------------------------
    #    Write ScalarLong64 attribute
    # -----------------------------------------------------------------
    def write_ScalarLong64(self, attr):
        #    Add your own code here
        self.attr_ScalarLong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarULong64 attribute
    # -----------------------------------------------------------------
    def read_ScalarULong64(self, attr):
        #    Add your own code here
        attr.set_value(long(self.attr_ScalarULong64))
        # Do not work as well

    # -----------------------------------------------------------------
    #    Write ScalarULong64 attribute
    # -----------------------------------------------------------------
    def write_ScalarULong64(self, attr):
        #    Add your own code here
        self.attr_ScalarULong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarFloat attribute
    # -----------------------------------------------------------------
    def read_ScalarFloat(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarFloat)

    # -----------------------------------------------------------------
    #    Write ScalarFloat attribute
    # -----------------------------------------------------------------
    def write_ScalarFloat(self, attr):
        #    Add your own code here
        self.attr_ScalarFloat = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarDouble attribute
    # -----------------------------------------------------------------
    def read_ScalarDouble(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarDouble)

    # -----------------------------------------------------------------
    #    Write ScalarDouble attribute
    # -----------------------------------------------------------------
    def write_ScalarDouble(self, attr):
        #    Add your own code here
        self.attr_ScalarDouble = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarString attribute
    # -----------------------------------------------------------------
    def read_ScalarString(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ScalarString)

    # -----------------------------------------------------------------
    #    Write ScalarString attribute
    # -----------------------------------------------------------------
    def write_ScalarString(self, attr):
        #    Add your own code here
        self.attr_ScalarString = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read FilenamePattern attribute
    # -----------------------------------------------------------------
    def read_FilenamePattern(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_FilenamePattern)

    # -----------------------------------------------------------------
    #    Write FilenamePattern attribute
    # -----------------------------------------------------------------
    def write_FilenamePattern(self, attr):
        #    Add your own code here
        self.attr_FilenamePattern = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarEncoded attribute
    # -----------------------------------------------------------------
    def read_ScalarEncoded(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarEncoded[0], self.attr_ScalarEncoded[1])

    # -----------------------------------------------------------------
    #    Write ScalarEncoded attribute
    # -----------------------------------------------------------------
    def write_ScalarEncoded(self, attr):
        #    Add your own code here

        self.attr_ScalarEncoded = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ScalarUChar attribute
    # -----------------------------------------------------------------
    def read_ScalarUChar(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ScalarUChar)

    # -----------------------------------------------------------------
    #    Write ScalarUChar attribute
    # -----------------------------------------------------------------
    def write_ScalarUChar(self, attr):
        #    Add your own code here
        self.attr_ScalarUChar = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumEncoded attribute
    # -----------------------------------------------------------------
    def read_SpectrumEncoded(self, attr):
        #    Add your own code here
        self.attr_SpectrumEncoded = self.encodeSpectrum()
        attr.set_value(self.attr_SpectrumEncoded[0],
                       self.attr_SpectrumEncoded[1])

    # -----------------------------------------------------------------
    #    Write SpectrumEncoded attribute
    # -----------------------------------------------------------------
    def write_SpectrumEncoded(self, attr):
        #    Add your own code here
        self.attr_SpectrumEncoded = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageEncoded attribute
    # -----------------------------------------------------------------
    def read_ImageEncoded(self, attr):
        #    Add your own code here
        self.attr_ImageEncoded = self.encodeImage()
        attr.set_value(self.attr_ImageEncoded[0], self.attr_ImageEncoded[1])

    # -----------------------------------------------------------------
    #    Write ImageEncoded attribute
    # -----------------------------------------------------------------
    def write_ImageEncoded(self, attr):
        #    Add your own code here
        self.attr_ImageEncoded = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumBoolean attribute
    # -----------------------------------------------------------------
    def read_SpectrumBoolean(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumBoolean)

    # -----------------------------------------------------------------
    #    Write SpectrumBoolean attribute
    # -----------------------------------------------------------------
    def write_SpectrumBoolean(self, attr):
        #    Add your own code here
        self.attr_SpectrumBoolean = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumUChar attribute
    # -----------------------------------------------------------------
    def read_SpectrumUChar(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumUChar)

    # -----------------------------------------------------------------
    #    Write SpectrumUChar attribute
    # -----------------------------------------------------------------
    def write_SpectrumUChar(self, attr):
        #    Add your own code here
        self.attr_SpectrumUChar = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumShort attribute
    # -----------------------------------------------------------------
    def read_SpectrumShort(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumShort)

    # -----------------------------------------------------------------
    #    Write SpectrumShort attribute
    # -----------------------------------------------------------------
    def write_SpectrumShort(self, attr):
        #    Add your own code here
        self.attr_SpectrumShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumUShort attribute
    # -----------------------------------------------------------------
    def read_SpectrumUShort(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumUShort)

    # -----------------------------------------------------------------
    #    Write SpectrumUShort attribute
    # -----------------------------------------------------------------
    def write_SpectrumUShort(self, attr):
        #    Add your own code here
        self.attr_SpectrumUShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumLong attribute
    # -----------------------------------------------------------------
    def read_SpectrumLong(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumLong)

    # -----------------------------------------------------------------
    #    Write SpectrumLong attribute
    # -----------------------------------------------------------------
    def write_SpectrumLong(self, attr):
        #    Add your own code here
        self.attr_SpectrumLong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumULong attribute
    # -----------------------------------------------------------------
    def read_SpectrumULong(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumULong)

    # -----------------------------------------------------------------
    #    Write SpectrumULong attribute
    # -----------------------------------------------------------------
    def write_SpectrumULong(self, attr):
        #    Add your own code here
        self.attr_SpectrumULong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumLong64 attribute
    # -----------------------------------------------------------------
    def read_SpectrumLong64(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumLong64)

    # -----------------------------------------------------------------
    #    Write SpectrumLong64 attribute
    # -----------------------------------------------------------------
    def write_SpectrumLong64(self, attr):
        #    Add your own code here
        self.attr_SpectrumLong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumULong64 attribute
    # -----------------------------------------------------------------
    def read_SpectrumULong64(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumULong64)

    # -----------------------------------------------------------------
    #    Write SpectrumULong64 attribute
    # -----------------------------------------------------------------
    def write_SpectrumULong64(self, attr):
        #    Add your own code here
        self.attr_SpectrumULong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumFloat attribute
    # -----------------------------------------------------------------
    def read_SpectrumFloat(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumFloat)

    # -----------------------------------------------------------------
    #    Write SpectrumFloat attribute
    # -----------------------------------------------------------------
    def write_SpectrumFloat(self, attr):
        #    Add your own code here
        self.attr_SpectrumFloat = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumDouble attribute
    # -----------------------------------------------------------------
    def read_SpectrumDouble(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumDouble)

    # -----------------------------------------------------------------
    #    Write SpectrumDouble attribute
    # -----------------------------------------------------------------
    def write_SpectrumDouble(self, attr):
        #    Add your own code here
        self.attr_SpectrumDouble = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read SpectrumString attribute
    # -----------------------------------------------------------------
    def read_SpectrumString(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_SpectrumString)

    # -----------------------------------------------------------------
    #    Write SpectrumString attribute
    # -----------------------------------------------------------------
    def write_SpectrumString(self, attr):
        #    Add your own code here
        self.attr_SpectrumString = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageBoolean attribute
    # -----------------------------------------------------------------
    def read_ImageBoolean(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ImageBoolean)

    # -----------------------------------------------------------------
    #    Write ImageBoolean attribute
    # -----------------------------------------------------------------
    def write_ImageBoolean(self, attr):
        #    Add your own code here
        self.attr_ImageBoolean = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageUChar attribute
    # -----------------------------------------------------------------
    def read_ImageUChar(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ImageUChar)

    # -----------------------------------------------------------------
    #    Write ImageUChar attribute
    # -----------------------------------------------------------------
    def write_ImageUChar(self, attr):
        self.attr_ImageUChar = attr.get_write_value()
        #    Add your own code here

    # -----------------------------------------------------------------
    #    Read ImageShort attribute
    # -----------------------------------------------------------------
    def read_ImageShort(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageShort)

    # -----------------------------------------------------------------
    #    Write ImageShort attribute
    # -----------------------------------------------------------------
    def write_ImageShort(self, attr):
        #    Add your own code here
        self.attr_ImageShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageUShort attribute
    # -----------------------------------------------------------------
    def read_ImageUShort(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ImageUShort)

    # -----------------------------------------------------------------
    #    Write ImageUShort attribute
    # -----------------------------------------------------------------
    def write_ImageUShort(self, attr):
        #    Add your own code here
        self.attr_ImageUShort = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageLong attribute
    # -----------------------------------------------------------------
    def read_ImageLong(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ImageLong)

    # -----------------------------------------------------------------
    #    Write ImageLong attribute
    # -----------------------------------------------------------------
    def write_ImageLong(self, attr):
        #    Add your own code here
        self.attr_ImageLong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageULong attribute
    # -----------------------------------------------------------------
    def read_ImageULong(self, attr):
        #    Add your own code here

        attr.set_value(self.attr_ImageULong)

    # -----------------------------------------------------------------
    #    Write ImageULong attribute
    # -----------------------------------------------------------------
    def write_ImageULong(self, attr):
        #    Add your own code here
        self.attr_ImageULong = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageLong64 attribute
    # -----------------------------------------------------------------
    def read_ImageLong64(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageLong64)

    # -----------------------------------------------------------------
    #    Write ImageLong64 attribute
    # -----------------------------------------------------------------
    def write_ImageLong64(self, attr):
        #    Add your own code here
        self.attr_ImageLong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageULong64 attribute
    # -----------------------------------------------------------------
    def read_ImageULong64(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageULong64)

    # -----------------------------------------------------------------
    #    Write ImageULong64 attribute
    # -----------------------------------------------------------------
    def write_ImageULong64(self, attr):
        #    Add your own code here
        self.attr_ImageULong64 = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageFloat attribute
    # -----------------------------------------------------------------
    def read_ImageFloat(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageFloat)

    # -----------------------------------------------------------------
    #    Write ImageFloat attribute
    # -----------------------------------------------------------------
    def write_ImageFloat(self, attr):
        #    Add your own code here
        self.attr_ImageFloat = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageDouble attribute
    # -----------------------------------------------------------------
    def read_ImageDouble(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageDouble)

    # -----------------------------------------------------------------
    #    Write ImageDouble attribute
    # -----------------------------------------------------------------
    def write_ImageDouble(self, attr):
        #    Add your own code here
        self.attr_ImageDouble = attr.get_write_value()

    # -----------------------------------------------------------------
    #    Read ImageString attribute
    # -----------------------------------------------------------------
    def read_ImageString(self, attr):
        #    Add your own code here
        attr.set_value(self.attr_ImageString)

    # -----------------------------------------------------------------
    #    Write ImageString attribute
    # -----------------------------------------------------------------
    def write_ImageString(self, attr):
        #    Add your own code here
        self.attr_ImageString = attr.get_write_value()

    # =================================================================
    #
    #    SimpleServer command methods
    #
    # =================================================================
    #
    # -----------------------------------------------------------------
    #    GetBoolean command:
    #
    #    Description: Returns ScalarBoolean
    #
    #    argout: DevBoolean    ScalarBoolean
    # -----------------------------------------------------------------
    def GetBoolean(self):
        #    Add your own code here

        return self.attr_ScalarBoolean

    # -----------------------------------------------------------------
    #    GetShort command:
    #
    #    Description: Returns ScalarShort
    #
    #    argout: DevShort    ScalarShort
    # -----------------------------------------------------------------
    def GetShort(self):
        #    Add your own code here

        return self.attr_ScalarShort

    # -----------------------------------------------------------------
    #    GetLong command:
    #
    #    Description: Returns ScalarLong
    #
    #    argout: DevLong    ScalarLong
    # -----------------------------------------------------------------
    def GetLong(self):
        #    Add your own code here

        return self.attr_ScalarLong

    # -----------------------------------------------------------------
    #    GetLong64 command:
    #
    #    Description: Returns ScalarLong64
    #
    #    argout: DevLong64    ScalarLong64
    # -----------------------------------------------------------------
    def GetLong64(self):
        #    Add your own code here

        return self.attr_ScalarLong64

    # -----------------------------------------------------------------
    #    GetFloat command:
    #
    #    Description: Returns ScalarFloat
    #
    #    argout: DevFloat    ScalarFloat
    # -----------------------------------------------------------------
    def GetFloat(self):
        #    Add your own code here

        return self.attr_ScalarFloat

    # -----------------------------------------------------------------
    #    GetDouble command:
    #
    #    Description: Returns ScalarDouble
    #
    #    argout: DevDouble    ScalarDouble
    # -----------------------------------------------------------------
    def GetDouble(self):
        #    Add your own code here

        return self.attr_ScalarDouble

    # -----------------------------------------------------------------
    #    GetUShort command:
    #
    #    Description: Returns ScalarUShort
    #
    #    argout: DevUShort    ScalarUShort
    # -----------------------------------------------------------------
    def GetUShort(self):
        #    Add your own code here

        return self.attr_ScalarUShort

    # -----------------------------------------------------------------
    #    GetULong command:
    #
    #    Description: Returns ScalarULong
    #
    #    argout: DevULong    ScalarULong
    # -----------------------------------------------------------------
    def GetULong(self):
        #    Add your own code here

        return self.attr_ScalarULong

    # -----------------------------------------------------------------
    #    GetULong64 command:
    #
    #    Description: Returns ScalarULong64
    #
    #    argout: DevULong64    ScalarULong64
    # -----------------------------------------------------------------
    def GetULong64(self):
        #    Add your own code here

        return self.attr_ScalarULong64

    # -----------------------------------------------------------------
    #    GetString command:
    #
    #    Description: Returns ScalarString
    #
    #    argout: DevString    ScalarString
    # -----------------------------------------------------------------
    def GetString(self):
        #    Add your own code here

        return self.attr_ScalarString

    # -----------------------------------------------------------------
    #    CreateDataSource command:
    #
    # -----------------------------------------------------------------
    def CreateAttribute(self, name):
        #    Add your own code here
        attr = tango.Attr(name, tango.DevString, tango.READ_WRITE)
        self.add_attribute(attr, self.read_General, self.write_General)

    def read_General(self, attr):
        attr.set_value(self.attr_value)

    def write_General(self, attr):
        self.attr_value = attr.get_write_value()


# =================================================================
#
#    TestServerClass class definition
#
# =================================================================
class TestServerClass(tango.DeviceClass):

    #    Class Properties
    class_property_list = {
    }

    #    Device Properties
    device_property_list = {
        'StringList':
            [tango.DevVarStringArray,
             "element names",
             []],
        'BraggDevice':
            [tango.DevVarStringArray,
             "brag device name",
             []],
        'Version':
            [tango.DevVarStringArray,
             "version",
             []],
    }

    #    Command definitions
    cmd_list = {
        'SetState':
            [[tango.DevString, "ScalarString"],
             [tango.DevVoid, ""]],
        'CreateAttribute':
            [[tango.DevString, "ScalarString"],
             [tango.DevVoid, ""]],
        'ChangeValueType':
            [[tango.DevString, "ScalarString"],
             [tango.DevVoid, ""]],
        'GetBoolean':
            [[tango.DevVoid, ""],
             [tango.DevBoolean, "ScalarBoolean"]],
        'GetShort':
            [[tango.DevVoid, ""],
             [tango.DevShort, "ScalarShort"]],
        'GetLong':
            [[tango.DevVoid, ""],
             [tango.DevLong, "ScalarLong"]],
        'GetLong64':
            [[tango.DevVoid, ""],
             [tango.DevLong64, "ScalarLong64"]],
        'GetFloat':
            [[tango.DevVoid, ""],
             [tango.DevFloat, "ScalarFloat"]],
        'GetDouble':
            [[tango.DevVoid, ""],
             [tango.DevDouble, "ScalarDouble"]],
        'GetUShort':
            [[tango.DevVoid, ""],
             [tango.DevUShort, "ScalarUShort"]],
        'GetULong':
            [[tango.DevVoid, ""],
             [tango.DevULong, "ScalarULong"]],
        'GetULong64':
            [[tango.DevVoid, ""],
             [tango.DevULong64, "ScalarULong64"]],
        'GetString':
            [[tango.DevVoid, ""],
             [tango.DevString, "ScalarString"]],
    }

    #    Attribute definitions
    attr_list = {
        'Crystal':
            [[tango.DevLong,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "dcm crystal",
            }],
        'ImagesPerFile':
            [[tango.DevLong,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "image per file",
            }],
        'ScalarLong':
            [[tango.DevLong,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "test long scalar attribute",
            }],
        'ScalarBoolean':
            [[tango.DevBoolean,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "test scalar bool attribute",
            }],
        'ScalarShort':
            [[tango.DevShort,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "Scalar Short attribute",
            }],
        'ScalarUShort':
            [[tango.DevUShort,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarUShort attribute",
            }],
        'ScalarULong':
            [[tango.DevULong,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarULong attribute",
            }],
        'ScalarLong64':
            [[tango.DevLong64,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarLong64 attribute",
            }],
        'ScalarULong64':
            [[tango.DevULong64,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarULong64 attribute",
            }],
        'ScalarFloat':
            [[tango.DevFloat,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarFloat attribute",
            }],
        'UnitCalibration':
            [[tango.DevDouble,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "UnitCalibration dcm attribute",
            }],
        'ScalarDouble':
            [[tango.DevDouble,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarDouble attribute",
            }],
        'ScalarString':
            [[tango.DevString,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarString attribute",
            }],
        'FilenamePattern':
            [[tango.DevString,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "FilenamePattern attribute",
            }],
        'ScalarEncoded':
            [[tango.DevEncoded,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarEncoded attribute",
            }],
        'ScalarUChar':
            [[tango.DevUChar,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ScalarUChar attribute",
            }],
        'SpectrumEncoded':
            [[tango.DevEncoded,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "SpectrumEncoded attribute",
            }],
        'ImageEncoded':
            [[tango.DevEncoded,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "ImageEncoded attribute",
            }],
        'SpectrumBoolean':
            [[tango.DevBoolean,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumBoolean attribute",
            }],
        'SpectrumUChar':
            [[tango.DevUChar,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumUChar attribute",
            }],
        'SpectrumShort':
            [[tango.DevShort,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumShort attribute",
            }],
        'SpectrumUShort':
            [[tango.DevUShort,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumUShort",
            }],
        'SpectrumLong':
            [[tango.DevLong,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumLong attribute",
            }],
        'SpectrumULong':
            [[tango.DevULong,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumULong attribute",
            }],
        'SpectrumLong64':
            [[tango.DevLong64,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumLong64 attribute",
            }],
        'SpectrumULong64':
            [[tango.DevULong64,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumULong64 attribute",
            }],
        'SpectrumFloat':
            [[tango.DevFloat,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumFloat attribute",
            }],
        'SpectrumDouble':
            [[tango.DevDouble,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumDouble attribute",
            }],
        'SpectrumString':
            [[tango.DevString,
              tango.SPECTRUM,
              tango.READ_WRITE, 4096],
             {
                 'description': "SpectrumString attribute",
            }],
        'ImageBoolean':
            [[tango.DevBoolean,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageBoolean attribute",
            }],
        'ImageUChar':
            [[tango.DevUChar,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageUChar attribute",
            }],
        'ImageShort':
            [[tango.DevShort,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageShort attribute",
            }],
        'ImageUShort':
            [[tango.DevUShort,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageUShort attribute",
            }],
        'ImageLong':
            [[tango.DevLong,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageLong attribute",
            }],
        'ImageULong':
            [[tango.DevULong,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageULong attribute",
            }],
        'ImageLong64':
            [[tango.DevLong64,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageLong64 attribute",
            }],
        'ImageULong64':
            [[tango.DevULong64,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageULong64 attribute",
            }],
        'ImageFloat':
            [[tango.DevFloat,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageFloat attribute",
            }],
        'ImageDouble':
            [[tango.DevDouble,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageDouble attribute",
            }],
        'ImageString':
            [[tango.DevString,
              tango.IMAGE,
              tango.READ_WRITE, 4096, 4096],
             {
                 'description': "ImageString attribute",
            }],
        'Environment':
            [[tango.DevEncoded,
              tango.SCALAR,
              tango.READ_WRITE],
             {
                 'description': "Environment attribute",
            }],
        'DoorList':
            [[tango.DevString,
              tango.SPECTRUM,
              tango.READ_WRITE,
              256],
             {
                 'description': "door list attribute",
            }],
        'MotorList':
            [[tango.DevString,
              tango.SPECTRUM,
              tango.READ_WRITE,
              256],
             {
                 'description': "motor list attribute",
            }],
        'ExpChannelList':
            [[tango.DevString,
              tango.SPECTRUM,
              tango.READ_WRITE,
              256],
             {
                 'description': "experimental channel list attribute",
            }],
    }

# -----------------------------------------------------------------
#    TestServerClass Constructor
# -----------------------------------------------------------------
    def __init__(self, name):
        tango.DeviceClass.__init__(self, name)
        self.set_type(name)


# =================================================================
#
#    TestServer class main method
#
# =================================================================
if __name__ == '__main__':
    try:
        py = tango.Util(sys.argv)
        py.add_class(TestServerClass, TestServer, 'TestServer')

        U = tango.Util.instance()

        U.server_init()
        U.server_run()

    except tango.DevFailed as e:
        print('-------> Received a DevFailed exception: %s' % e)
    except Exception as e:
        print('-------> An unforeseen exception occured.... %s' % e)
