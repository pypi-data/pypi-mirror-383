import shutil
import tarfile
import urllib.request
from pathlib import Path

import tomllib
from setuptools import setup
from setuptools_rust import Binding, RustExtension

PROJECT_ROOT_DIR = Path(__file__).resolve().parent
SRC_DIR = PROJECT_ROOT_DIR / "src"

CRATE_TARBALL_PATH = SRC_DIR / "notmongo-rs.tar.gz"
RUST_SOURCE_DIR = SRC_DIR / "notmongo-rs"
PY_SOURCE_DIR = SRC_DIR / "notmongo"

RUST_VERSION = "0.1.7"  # Version of Rust crate to download from crates.io


# Read Python version from pyproject.toml
with open(PROJECT_ROOT_DIR / "pyproject.toml", "rb") as f:
    pyproject = tomllib.load(f)
    python_version = pyproject["project"]["version"]


# Download notmongo-rs from crates.io
#
# TODO: This should really be done in the build function, however `setup` fails
#       if the rust sources don't already exist.
def ensure_rust_source_code_exists():
    # Fetch the tarball, if needed
    if not CRATE_TARBALL_PATH.exists():
        print(f'Downloading "notmongo-rs" v{RUST_VERSION} from crates.io')
        download_url = (
            f"https://crates.io/api/v1/crates/notmongo/{RUST_VERSION}/download"
        )

        with urllib.request.urlopen(download_url) as response:
            with CRATE_TARBALL_PATH.open("wb") as outfile:
                shutil.copyfileobj(response, outfile)

    # Unzip the archive, if needed
    if not RUST_SOURCE_DIR.exists():
        print("Extracting rust source")
        with tarfile.open(CRATE_TARBALL_PATH) as zfile:
            zfile.extractall(SRC_DIR)

        shutil.move(SRC_DIR / f"notmongo-{RUST_VERSION}", RUST_SOURCE_DIR)


ensure_rust_source_code_exists()


def generate_version_file():
    """
    Generate AUTOGENERATED_meta.py with version information.
    """
    version_file = PY_SOURCE_DIR / "AUTOGENERATED_meta.py"
    version_file.write_text(
        f'"""Auto-generated version file. Do not edit manually."""\n'
        f'library_version = "{python_version}"\n'
        f'native_library_version = "{RUST_VERSION}"\n'
    )
    print(
        f"Generated {version_file} with Python v{python_version}, Rust v{RUST_VERSION}"
    )


generate_version_file()


setup(
    name="notmongo",
    version=python_version,
    rust_extensions=[
        RustExtension(
            "notmongo-rs",
            binding=Binding.NoBinding,
            path="src/notmongo-rs/Cargo.toml",
        )
    ],
    packages=["notmongo"],
    package_dir={"": "src"},
    zip_safe=False,
)
