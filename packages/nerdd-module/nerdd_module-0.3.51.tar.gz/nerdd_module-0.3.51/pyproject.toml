[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nerdd-module"
version = "0.3.51"
description = "Base package to create NERDD modules"
readme = "README.md"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
authors = [{ name = "Steffen Hirte", email = "steffen.hirte@univie.ac.at" }]
maintainers = [{ name = "Steffen Hirte", email = "steffen.hirte@univie.ac.at" }]
dependencies = [
    "rdkit>=2020.09.1",
    "pandas>=1.2.1",
    "pyyaml>=6.0",
    "filetype~=1.2.0",
    "rich-click>=1.7.1",
    "stringcase>=1.2.0",
    "decorator>=5.1.1",
    "pydantic>=2",
    "chardet>=5",
    # install importlib-resources and importlib-metadata for old Python versions
    "importlib-resources>=5; python_version<'3.9'",
    "importlib-metadata>=4.6; python_version<'3.10'",
    "typing_extensions>=4.0.1; python_version<'3.8'",
]
keywords = ["science", "research", "development", "nerdd"]
classifiers = [
    # audience
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    # programming language
    "Programming Language :: Python",
    # topics
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    # operating systems
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    # python versions
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = [
    "mypy>=1",
    "ruff==0.7.1",
    "pandas-stubs",
    "rdkit-stubs",
    "types-PyYAML",
    "types-decorator",
    "types-setuptools",
    "types-chardet",
    "pre-commit>=2",
]
csp = [
    # Note 1: Version 1.0.0 of chembl_structure_pipeline is not available on
    # pypi, but maybe it was already installed in the current environment
    # manually. So it makes sense to use version ">=1.0.0" here.
    # Note 2: chembl_structure_pipeline *always* installs a recent version
    # of rdkit.
    "chembl_structure_pipeline>=1.0.0",
]
test = [
    "pytest",
    "pytest-sugar",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-bdd<8",
    "pytest-mock",
    "pytest-watcher",
    "hypothesis",
    "hypothesis-rdkit",
]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings[python]"]

[project.urls]
Repository = "https://github.com/molinfo-vienna/nerdd-module"

#
# TOOLS
#
[tool.setuptools.packages.find]
where = ["."]
include = ["nerdd_module*"]

[tool.setuptools.package-data]
nerdd_module = ["py.typed"]

[tool.pytest.ini_options]
log_cli = 1
log_cli_level = "INFO"
addopts = "-x --cov-report term --cov=nerdd_module"

[tool.pytest-watcher]
patterns = ["*.py", "*.feature", "pyproject.toml"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T20", # no print statements
]
ignore = [
    "F403", # I often use 'from .submodule import *' in __init__.py files
    "C408", # I prefer dict(a=5) over {'a': 5}
]

[tool.mypy]
# type stubs of packages lacking types are in the "typings" directory
mypy_path = "typings"
# strict=true
disallow_untyped_defs = true
# disallow_any_unimported = true
no_implicit_optional = true
# check_untyped_defs = True
# show_error_codes = True 

[[tool.mypy.overrides]]
module = ["rdkit.*"]
follow_imports = "skip"
follow_imports_for_stubs = true

[[tool.mypy.overrides]]
module = ["nerdd_module.tests.*", "tests.*"]
ignore_errors = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_vcs_release = true
