# Template of a YAML configuration file for a device variant
#
# Copyright 2021-2024 Clement Savergne <csavergne@yahoo.com>
#
# This file is part of yasim-avr.
#
# yasim-avr is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# yasim-avr is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with yasim-avr.  If not, see <http://www.gnu.org/licenses/>.

---

#Full name of the device variant
name: Atmel AVR ATMegaxxxx

#If this entry is present, only the name and the device signature bytes are kept while the rest of the
#file is ignored and the configuration for atmegayyyy is loaded instead.
aliasof: atmegayyyy

#Architecture used
#Supported values are defined in descriptors.py
architecture: XT

#Definition of the memory map
memory:
    #Each section defines a memory address space.
    #Each address space is made of several segments delimited
    #by two entries: xxxSTART and xxxEND.
    #xxxSTART is optional, the default value is zero.
    #The supported segments are:
    #   - REGSTART/REGEND : General purpose Rxx registers
    #   - IOSTART/IOEND : I/O registers
    #   - RAMSTART/RAMEND : volatile RAM
    #   - FLASHSTART/FLASHEND : flash memory
    #   - EEPROMSTART/EEPROMEND : eeprom memory
    #Additional fields:
    #   - MEMEND : optional, indicating the top address of the space
    #              by default, it is determined from the segments
    space1:
        seg1START: 0x1111
        seg1END : 0x2222
        seg2START: 0x3333
        seg2END: 0x4444
    space2:
        seg1START: 0x12
        seg1END : 0x34
        seg2START: 0x56
        seg2END: 0x78

#Definition of core attributes, see definition in sim_config.h
core:
    extended_addressing: yes
    clear_GIE_on_int: no

#Definition of factory values for the fuses and lock bits
fuses:
    size: 3
    factory_values: [ 0x62, 0xD9, 0xFF ]
    lock_byte: 0xFF

#Signature bytes for the device model, LSB first
device_signature: [ 0x01, 0x23, 0x45 ]

access:
    #For 16-bits registers, these define the order in which the
    #low and high bytes must be accessed for a read/write operation
    #if set to 'yes', the low byte will be accessed first.
    #They can be omitted if the device has no 16-bits register.
    lsb_first_on_write: yes
    lsb_first_on_read: yes

#List of the pins of the device
pins: [ Px0, Px1, Px2, Px3, Px4, Px5, Px6, Px7 ]

#Interrupt map definition
interrupts:
    #Interrupt vector individual size in bytes
    vector_size: 4
    #List of the vectors in their address order
    vectors:
        - RESET
        - Vector1
        - Vector2
        - Vector3
        - Vectorxxx

    #Sleep mode mask map.
    #For each valid sleep mode, it defines a bitset of one bit per vector,
    #indicating with 1 if the associated interrupt will wake up
    #(or not with 0) the device
    sleep_mask:
        Idle:       [ 0xFF, 0xFF, 0xFF ]
        Standby:    [ 0x55, 0x55, 0x55 ]
        PowerDown:  [ 0x01, 0x00, 0x00 ]

#Definition of each peripheral in the device
peripherals:
    PER_NAME:
        #Class defines the peripheral class, if it's
        #different from the peripheral name
        #Normally used for peripheral in multiple instanciations
        class: PER_CLASS
        #File defines the YAML configuration file
        #that contains the peripheral definition and configuration
        file: per_config.yml
        #Base address of the peripheral
        #Only necessary if the peripheral has registers
        #defined with a relative offset
        base: 0x1111
        #Class that defines the variant-specific configuration
        #of the device
        config:
            #Example of a definition of a interrupt vector
            iv_a: Vector1

    PER_NAME2:
        class: PER_CLASS
        file: per_config.yml
        base: 0x2222
        config:
            iv_a: Vector2

    PER_NAME3:
        class: PER_CLASS
        file: per_config.yml
        base: 0x3333
        config:
            iv_a: Vector3

#Definition of IO pin mux configuration for the PinManager object
iomux:
    DRV_ID1:
        MUX_ID1: [ pin1, pin2, ... ]
        MUX_ID2: [ pin3, pin4, ... ]
        MUX_ID3: [] #mux deactivated

