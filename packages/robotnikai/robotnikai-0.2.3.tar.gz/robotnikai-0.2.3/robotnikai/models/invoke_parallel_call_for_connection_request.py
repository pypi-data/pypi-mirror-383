# coding: utf-8

"""
    RobotnikAI API

    Documentation of API endpoints of RobotnikAI for SDK

    The version of the OpenAPI document: 0.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from robotnikai.models.invoke_parallel_call_for_connection_request_data_list_inner import InvokeParallelCallForConnectionRequestDataListInner
from typing import Optional, Set
from typing_extensions import Self

class InvokeParallelCallForConnectionRequest(BaseModel):
    """
    InvokeParallelCallForConnectionRequest
    """ # noqa: E501
    method: StrictStr = Field(description="HTTP method to use for each request")
    endpoint: Optional[StrictStr] = Field(default=None, description="API Endpoint to call for each data object")
    data_list: List[InvokeParallelCallForConnectionRequestDataListInner] = Field(description="List of data objects to process in parallel")
    request_headers: Dict[str, Any] = Field(description="Headers to include in the request to API Service")
    streaming: Optional[StrictBool] = Field(default=False, description="Enable streaming response to return results as they become available")
    __properties: ClassVar[List[str]] = ["method", "endpoint", "data_list", "request_headers", "streaming"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GET', 'POST', 'PUT', 'PATCH', 'DELETE']):
            raise ValueError("must be one of enum values ('GET', 'POST', 'PUT', 'PATCH', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvokeParallelCallForConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_list (list)
        _items = []
        if self.data_list:
            for _item_data_list in self.data_list:
                if _item_data_list:
                    _items.append(_item_data_list.to_dict())
            _dict['data_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvokeParallelCallForConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "endpoint": obj.get("endpoint"),
            "data_list": [InvokeParallelCallForConnectionRequestDataListInner.from_dict(_item) for _item in obj["data_list"]] if obj.get("data_list") is not None else None,
            "request_headers": obj.get("request_headers"),
            "streaming": obj.get("streaming") if obj.get("streaming") is not None else False
        })
        return _obj


