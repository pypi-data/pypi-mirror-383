# coding: utf-8

"""
    RobotnikAI API

    Documentation of API endpoints of RobotnikAI for SDK

    The version of the OpenAPI document: 0.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from robotnikai.models.plugin import Plugin

class TestPlugin(unittest.TestCase):
    """Plugin unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Plugin:
        """Test Plugin
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Plugin`
        """
        model = Plugin()
        if include_optional:
            return Plugin(
                id = 56,
                organization = 56,
                plugin_interface = robotnikai.models.plugin_plugin_interface.Plugin_plugin_interface(
                    id = 56, 
                    namespace = '', 
                    title = '', ),
                integration = robotnikai.models.plugin_integration.Plugin_integration(
                    name = '', 
                    icon = '', 
                    integration_id = '', ),
                implemented_capabilities = [
                    ''
                    ],
                is_enabled = True,
                capabilities = [
                    ''
                    ],
                is_visible = True,
                code = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Plugin(
        )
        """

    def testPlugin(self):
        """Test Plugin"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
