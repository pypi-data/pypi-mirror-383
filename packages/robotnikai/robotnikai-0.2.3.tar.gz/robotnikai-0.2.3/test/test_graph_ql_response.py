# coding: utf-8

"""
    RobotnikAI API

    Documentation of API endpoints of RobotnikAI for SDK

    The version of the OpenAPI document: 0.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from robotnikai.models.graph_ql_response import GraphQLResponse

class TestGraphQLResponse(unittest.TestCase):
    """GraphQLResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GraphQLResponse:
        """Test GraphQLResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GraphQLResponse`
        """
        model = GraphQLResponse()
        if include_optional:
            return GraphQLResponse(
                data = {"list":{"items":[{"id":"123","name":"New York","area":783.8},{"id":"124","name":"Los Angeles","area":1302.15}],"paginationInfo":{"page":1,"limit":10,"totalItems":50,"totalPages":5,"hasNextPage":true,"hasPreviousPage":false}}},
                errors = [
                    robotnikai.models.graph_ql_response_errors_inner.GraphQLResponse_errors_inner(
                        message = '', 
                        locations = [
                            robotnikai.models.graph_ql_response_errors_inner_locations_inner.GraphQLResponse_errors_inner_locations_inner(
                                line = 56, 
                                column = 56, )
                            ], 
                        path = [
                            ''
                            ], )
                    ],
                extensions = None
            )
        else:
            return GraphQLResponse(
        )
        """

    def testGraphQLResponse(self):
        """Test GraphQLResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
