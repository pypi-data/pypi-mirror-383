# coding: utf-8

"""
    RobotnikAI API

    Documentation of API endpoints of RobotnikAI for SDK

    The version of the OpenAPI document: 0.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any
from typing_extensions import Annotated
from robotnikai.models.graph_ql_request import GraphQLRequest
from robotnikai.models.graph_ql_response import GraphQLResponse

from robotnikai.api_client import ApiClient, RequestSerialized
from robotnikai.api_response import ApiResponse
from robotnikai.rest import RESTResponseType


class ApplicationsTablesGraphQLApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def apps_graphql_playground(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """GraphQL Playground Interface

        Access the GraphQL Playground interface for interactive query development and schema exploration.  This provides a web-based IDE for testing GraphQL queries and mutations against your application tables. 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_playground_serialize(
            app=app,
            table=table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_graphql_playground_with_http_info(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """GraphQL Playground Interface

        Access the GraphQL Playground interface for interactive query development and schema exploration.  This provides a web-based IDE for testing GraphQL queries and mutations against your application tables. 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_playground_serialize(
            app=app,
            table=table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_graphql_playground_without_preload_content(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GraphQL Playground Interface

        Access the GraphQL Playground interface for interactive query development and schema exploration.  This provides a web-based IDE for testing GraphQL queries and mutations against your application tables. 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_playground_serialize(
            app=app,
            table=table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_graphql_playground_serialize(
        self,
        app,
        table,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if app is not None:
            
            _query_params.append(('app', app))
            
        if table is not None:
            
            _query_params.append(('table', table))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'knoxApiToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/apps/graphql/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_graphql_query(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        graph_ql_request: GraphQLRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GraphQLResponse:
        """Execute GraphQL Query/Mutation

        Execute GraphQL queries and mutations on application tables.  This endpoint provides a dynamic GraphQL interface where schemas are generated on-the-fly based on MongoDB document structures. The available fields and operations depend on the specific application and table being queried.  **Optional Variables:** - `criteria`: MongoDB-style query criteria for filtering - `connection_id`: The ID of the connection when you are creating or updating a document with a specific integration connection  **Available Operations:** - **Queries**:     - `list`: List items with pagination     - `get`: Get a single item by ID - **Mutations**:     - `create`: Create a new item     - `update`: Update an existing item     - `delete`: Delete an item     - `createMany`: Create multiple items at once  **Example Query:** ```graphql query {   list(page: 1, limit: 10) {     items {       id       name       area       createdAt     }     paginationInfo {       page       limit       totalItems       totalPages       hasNextPage       hasPreviousPage     }   } } ```  **Example Mutation:** ```graphql mutation {   create(input: { name: \"New City\", area: 123 }) {     success     message     item {       id       name       area     }   } } ```  **Example Mutation with Variables:** ```graphql mutation CreateMutation($input: Input = {}) {   create(input: $input) {     success     message     item {       id       name       area     }   } } ``` Variables: ```json {   \"input\": {     \"name\": \"New City\",     \"area\": 123   } } ```  **Example Bulk Creation with Variables:** ```graphql mutation CreateManyMutation($data: [Input!] = {}) {   createMany(inputs: $data) {     success     message     items {       id       name       area     }   } } ``` Variables: ```json {   \"data\": [     {       \"name\": \"City One\",       \"area\": 100     },     {       \"name\": \"City Two\",       \"area\": 200     }   ] } ``` 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param graph_ql_request: (required)
        :type graph_ql_request: GraphQLRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_query_serialize(
            app=app,
            table=table,
            graph_ql_request=graph_ql_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphQLResponse",
            '400': "AppsGraphqlQuery400Response",
            '401': "AppsGraphqlQuery401Response",
            '404': "AppsGraphqlQuery404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_graphql_query_with_http_info(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        graph_ql_request: GraphQLRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GraphQLResponse]:
        """Execute GraphQL Query/Mutation

        Execute GraphQL queries and mutations on application tables.  This endpoint provides a dynamic GraphQL interface where schemas are generated on-the-fly based on MongoDB document structures. The available fields and operations depend on the specific application and table being queried.  **Optional Variables:** - `criteria`: MongoDB-style query criteria for filtering - `connection_id`: The ID of the connection when you are creating or updating a document with a specific integration connection  **Available Operations:** - **Queries**:     - `list`: List items with pagination     - `get`: Get a single item by ID - **Mutations**:     - `create`: Create a new item     - `update`: Update an existing item     - `delete`: Delete an item     - `createMany`: Create multiple items at once  **Example Query:** ```graphql query {   list(page: 1, limit: 10) {     items {       id       name       area       createdAt     }     paginationInfo {       page       limit       totalItems       totalPages       hasNextPage       hasPreviousPage     }   } } ```  **Example Mutation:** ```graphql mutation {   create(input: { name: \"New City\", area: 123 }) {     success     message     item {       id       name       area     }   } } ```  **Example Mutation with Variables:** ```graphql mutation CreateMutation($input: Input = {}) {   create(input: $input) {     success     message     item {       id       name       area     }   } } ``` Variables: ```json {   \"input\": {     \"name\": \"New City\",     \"area\": 123   } } ```  **Example Bulk Creation with Variables:** ```graphql mutation CreateManyMutation($data: [Input!] = {}) {   createMany(inputs: $data) {     success     message     items {       id       name       area     }   } } ``` Variables: ```json {   \"data\": [     {       \"name\": \"City One\",       \"area\": 100     },     {       \"name\": \"City Two\",       \"area\": 200     }   ] } ``` 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param graph_ql_request: (required)
        :type graph_ql_request: GraphQLRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_query_serialize(
            app=app,
            table=table,
            graph_ql_request=graph_ql_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphQLResponse",
            '400': "AppsGraphqlQuery400Response",
            '401': "AppsGraphqlQuery401Response",
            '404': "AppsGraphqlQuery404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_graphql_query_without_preload_content(
        self,
        app: Annotated[Any, Field(description="Application ID or slug")],
        table: Annotated[StrictStr, Field(description="Table name within the application")],
        graph_ql_request: GraphQLRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Execute GraphQL Query/Mutation

        Execute GraphQL queries and mutations on application tables.  This endpoint provides a dynamic GraphQL interface where schemas are generated on-the-fly based on MongoDB document structures. The available fields and operations depend on the specific application and table being queried.  **Optional Variables:** - `criteria`: MongoDB-style query criteria for filtering - `connection_id`: The ID of the connection when you are creating or updating a document with a specific integration connection  **Available Operations:** - **Queries**:     - `list`: List items with pagination     - `get`: Get a single item by ID - **Mutations**:     - `create`: Create a new item     - `update`: Update an existing item     - `delete`: Delete an item     - `createMany`: Create multiple items at once  **Example Query:** ```graphql query {   list(page: 1, limit: 10) {     items {       id       name       area       createdAt     }     paginationInfo {       page       limit       totalItems       totalPages       hasNextPage       hasPreviousPage     }   } } ```  **Example Mutation:** ```graphql mutation {   create(input: { name: \"New City\", area: 123 }) {     success     message     item {       id       name       area     }   } } ```  **Example Mutation with Variables:** ```graphql mutation CreateMutation($input: Input = {}) {   create(input: $input) {     success     message     item {       id       name       area     }   } } ``` Variables: ```json {   \"input\": {     \"name\": \"New City\",     \"area\": 123   } } ```  **Example Bulk Creation with Variables:** ```graphql mutation CreateManyMutation($data: [Input!] = {}) {   createMany(inputs: $data) {     success     message     items {       id       name       area     }   } } ``` Variables: ```json {   \"data\": [     {       \"name\": \"City One\",       \"area\": 100     },     {       \"name\": \"City Two\",       \"area\": 200     }   ] } ``` 

        :param app: Application ID or slug (required)
        :type app: AppsGraphqlPlaygroundAppParameter
        :param table: Table name within the application (required)
        :type table: str
        :param graph_ql_request: (required)
        :type graph_ql_request: GraphQLRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_graphql_query_serialize(
            app=app,
            table=table,
            graph_ql_request=graph_ql_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GraphQLResponse",
            '400': "AppsGraphqlQuery400Response",
            '401': "AppsGraphqlQuery401Response",
            '404': "AppsGraphqlQuery404Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_graphql_query_serialize(
        self,
        app,
        table,
        graph_ql_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if app is not None:
            
            _query_params.append(('app', app))
            
        if table is not None:
            
            _query_params.append(('table', table))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if graph_ql_request is not None:
            _body_params = graph_ql_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'knoxApiToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/apps/graphql/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


