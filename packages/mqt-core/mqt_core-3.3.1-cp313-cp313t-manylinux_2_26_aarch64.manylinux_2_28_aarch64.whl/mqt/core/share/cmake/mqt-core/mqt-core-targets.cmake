# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.31)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS MQT::ProjectWarnings MQT::ProjectOptions MQT::CoreIR MQT::CoreQASM MQT::CoreAlgorithms MQT::CoreCircuitOptimizer MQT::CoreDS MQT::CoreDD MQT::CoreZX MQT::multiprecision MQT::CoreNaDeviceGen MQT::CoreQDMINaDevice MQT::CoreNAFoMaC MQT::CoreNA MQT::CoreQDMIDriver MQT::CoreFoMaC)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target MQT::ProjectWarnings
add_library(MQT::ProjectWarnings INTERFACE IMPORTED)

set_target_properties(MQT::ProjectWarnings PROPERTIES
  INTERFACE_COMPILE_OPTIONS "-Wall;-Wextra;-Wshadow;-Wnon-virtual-dtor;-Wold-style-cast;-Wcast-align;-Wunused;-Woverloaded-virtual;-Wpedantic;-Wconversion;-Wsign-conversion;-Wnull-dereference;-Wdouble-promotion;-Wformat=2;-Wno-unknown-pragmas;-Wno-pragmas;\$<\$<CXX_COMPILER_ID:AppleClang,Clang>:-Wno-unknown-warning-option>;-Wmisleading-indentation;-Wduplicated-cond;-Wduplicated-branches;-Wlogical-op;-Wuseless-cast;-Wmissing-noreturn"
)

# Create imported target MQT::ProjectOptions
add_library(MQT::ProjectOptions INTERFACE IMPORTED)

set_target_properties(MQT::ProjectOptions PROPERTIES
  INTERFACE_COMPILE_OPTIONS "-g;\$<\$<CONFIG:RELEASE>:-fno-math-errno;-ffinite-math-only;-fno-trapping-math;-fno-stack-protector>;\$<\$<CONFIG:DEBUG>:-fno-omit-frame-pointer;-fno-optimize-sibling-calls;-fno-inline-functions>"
  INTERFACE_POSITION_INDEPENDENT_CODE "ON"
)

# Create imported target MQT::CoreIR
add_library(MQT::CoreIR SHARED IMPORTED)

set_target_properties(MQT::CoreIR PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreIR
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/ir/Definitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/Permutation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/QuantumComputation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/Register.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/mqt_core_ir_export.h" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/AodOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/CompoundOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Control.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Expression.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/IfElseOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/NonUnitaryOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/OpType.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/OpType.inc" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Operation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/StandardOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/SymbolicOperation.hpp"
  )
else()
  set_property(TARGET MQT::CoreIR
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreQASM
add_library(MQT::CoreQASM SHARED IMPORTED)

set_target_properties(MQT::CoreQASM PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreQASM
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Exception.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Gate.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Importer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/InstVisitor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/NestedEnvironment.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Parser.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Scanner.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Statement.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Statement_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/StdGates.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Token.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Types.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Types_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/mqt_core_qasm_export.h" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/CompilerPass.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/ConstEvalPass.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/TypeCheckPass.hpp"
  )
else()
  set_property(TARGET MQT::CoreQASM
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreAlgorithms
add_library(MQT::CoreAlgorithms SHARED IMPORTED)

set_target_properties(MQT::CoreAlgorithms PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreAlgorithms
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/algorithms/BernsteinVazirani.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/GHZState.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/Grover.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/QFT.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/QPE.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/RandomCliffordCircuit.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/StatePreparation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/WState.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/mqt_core_algorithms_export.h"
  )
else()
  set_property(TARGET MQT::CoreAlgorithms
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreCircuitOptimizer
add_library(MQT::CoreCircuitOptimizer SHARED IMPORTED)

set_target_properties(MQT::CoreCircuitOptimizer PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreCircuitOptimizer
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/circuit_optimizer/CircuitOptimizer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/circuit_optimizer/mqt_core_circuit_optimizer_export.h"
  )
else()
  set_property(TARGET MQT::CoreCircuitOptimizer
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreDS
add_library(MQT::CoreDS SHARED IMPORTED)

set_target_properties(MQT::CoreDS PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreDS
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DirectedAcyclicGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DirectedGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DisjointSet.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/Layer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/SymmetricMatrix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/UndirectedGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/mqt_core_ds_export.h"
  )
else()
  set_property(TARGET MQT::CoreDS
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreDD
add_library(MQT::CoreDD SHARED IMPORTED)

set_target_properties(MQT::CoreDD PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR;nlohmann_json::nlohmann_json"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreDD
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/dd/Approximation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/CachedEdge.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Complex.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComplexNumbers.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComplexValue.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComputeTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DDDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DDpackageConfig.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DensityNoiseTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Edge.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Export.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/FunctionalityConstruction.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/GateMatrixDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/LinkedListBase.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/MemoryManager.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Node.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/NoiseFunctionality.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Operations.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Package.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Package_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/RealNumber.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/RealNumberUniqueTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Simulation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/StateGeneration.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/StochasticNoiseOperationTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/UnaryComputeTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/UniqueTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/mqt_core_dd_export.h" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/MemoryManagerStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/PackageStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/Statistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/TableStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/UniqueTableStatistics.hpp"
  )
else()
  set_property(TARGET MQT::CoreDD
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreZX
add_library(MQT::CoreZX SHARED IMPORTED)

set_target_properties(MQT::CoreZX PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR;MQT::multiprecision"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreZX
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/zx/FunctionalityConstruction.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Rational.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Rules.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Simplify.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Utils.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/ZXDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/ZXDiagram.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/mqt_core_zx_export.h"
  )
else()
  set_property(TARGET MQT::CoreZX
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::multiprecision
add_library(MQT::multiprecision INTERFACE IMPORTED)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::multiprecision
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/boost/config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/cstdint.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/cxx11_char_types.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/limits.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/version.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi_prefix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi_suffix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx03.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx11.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx14.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx17.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx20.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx23.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/assert_cxx98.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/auto_link.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/header_deprecated.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/helper_macros.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/pragma_message.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/requires_threads.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/user.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/warning_disable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/workaround.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi/borland_prefix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi/borland_suffix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi/msvc_prefix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/abi/msvc_suffix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/borland.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/clang.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/clang_version.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/codegear.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/comeau.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/common_edg.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/compaq_cxx.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/cray.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/diab.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/digitalmars.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/gcc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/gcc_xml.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/greenhills.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/hp_acc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/intel.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/kai.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/metrowerks.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/mpw.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/nvcc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/pathscale.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/pgi.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/sgi_mipspro.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/sunpro_cc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/vacpp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/visualc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/xlcpp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/compiler/xlcpp_zos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/cxx_composite.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/posix_features.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/select_compiler_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/select_platform_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/select_stdlib_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/detail/suffix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/no_tr1/cmath.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/no_tr1/complex.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/no_tr1/functional.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/no_tr1/memory.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/no_tr1/utility.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/aix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/amigaos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/beos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/bsd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/cloudabi.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/cray.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/cygwin.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/haiku.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/hpux.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/irix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/linux.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/macos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/qnxnto.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/solaris.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/symbian.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/vms.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/vxworks.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/wasm.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/win32.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/platform/zos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/dinkumware.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/libcomo.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/libcpp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/libstdcpp3.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/modena.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/msl.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/roguewave.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/sgi.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/stlport.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/vacpp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/config/stdlib/xlcpp_zos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/detail/workaround.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/complex128.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/complex_adaptor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_bin_float.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_complex.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_dec_float.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/debug_adaptor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/eigen.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/float128.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/gmp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/integer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/logged_adaptor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/miller_rabin.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/mpc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/mpfi.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/mpfr.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/number.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/random.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/rational_adaptor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/tommath.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/concepts/mp_number_archetypes.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_bin_float/io.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_bin_float/transcendental.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/add.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/add_unsigned.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/bitwise.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/checked.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/comparison.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/cpp_int_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/divide.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/import_export.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/intel_intrinsics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/limits.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/literals.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/misc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/multiply.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/serialize.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/cpp_int/value_pack.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/assert.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/atomic.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/bitscan.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/check_cpp11_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/constexpr.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/default_ops.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/digits.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/dynamic_array.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/empty_value.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/endian.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/et_ops.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/float128_functions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/float_string_cvt.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/fpclassify.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/generic_interconvert.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/hash.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/integer_ops.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/itos.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/min_max.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/no_et_ops.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/no_exceptions_support.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/number_base.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/number_compare.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/precision.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/rebind.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/standalone_config.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/static_array.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/string_helpers.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/tables.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/ublas_interop.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/uniform_int_distribution.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/utype_helper.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/functions/constants.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/functions/pow.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/functions/trig.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/detail/functions/trunc.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/explicit_conversion.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/extract_exponent_type.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_backend.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_byte_container.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_complex.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_convertible_arithmetic.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_restricted_conversion.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/is_variable_precision.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/max_digits10.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/std_integer_traits.hpp" "${_IMPORT_PREFIX}/include/mqt-core/boost/multiprecision/traits/transcendental_reduction_type.hpp"
  )
else()
  set_property(TARGET MQT::multiprecision
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreNaDeviceGen
add_library(MQT::CoreNaDeviceGen STATIC IMPORTED)

set_target_properties(MQT::CoreNaDeviceGen PROPERTIES
  INTERFACE_LINK_LIBRARIES "nlohmann_json::nlohmann_json;\$<LINK_ONLY:spdlog::spdlog>;\$<LINK_ONLY:MQT::ProjectOptions>;\$<LINK_ONLY:MQT::ProjectWarnings>"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreNaDeviceGen
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/na/device/Generator.hpp"
  )
else()
  set_property(TARGET MQT::CoreNaDeviceGen
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreQDMINaDevice
add_library(MQT::CoreQDMINaDevice SHARED IMPORTED)

set_target_properties(MQT::CoreQDMINaDevice PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "qdmi::qdmi"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreQDMINaDevice
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/mqt_na_qdmi/device.h" "${_IMPORT_PREFIX}/include/mqt-core/mqt_na_qdmi/types.h" "${_IMPORT_PREFIX}/include/mqt-core/na/device/DeviceMemberInitializers.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/device/Device.hpp"
  )
else()
  set_property(TARGET MQT::CoreQDMINaDevice
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreNAFoMaC
add_library(MQT::CoreNAFoMaC SHARED IMPORTED)

set_target_properties(MQT::CoreNAFoMaC PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreFoMaC;nlohmann_json::nlohmann_json"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreNAFoMaC
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/na/fomac/Device.hpp"
  )
else()
  set_property(TARGET MQT::CoreNAFoMaC
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreNA
add_library(MQT::CoreNA SHARED IMPORTED)

set_target_properties(MQT::CoreNA PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreNA
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/na/NAComputation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/mqt_core_na_export.h" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Atom.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Location.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Zone.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalCZOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalRYOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LoadOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalRZOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalUOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/MoveOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/Op.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/ShuttlingOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/StoreOp.hpp"
  )
else()
  set_property(TARGET MQT::CoreNA
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreQDMIDriver
add_library(MQT::CoreQDMIDriver SHARED IMPORTED)

set_target_properties(MQT::CoreQDMIDriver PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "qdmi::qdmi"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreQDMIDriver
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/qdmi/Driver.hpp"
  )
else()
  set_property(TARGET MQT::CoreQDMIDriver
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreFoMaC
add_library(MQT::CoreFoMaC SHARED IMPORTED)

set_target_properties(MQT::CoreFoMaC PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_LINK_LIBRARIES "qdmi::qdmi;MQT::CoreQDMIDriver"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreFoMaC
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/fomac/FoMaC.hpp"
  )
else()
  set_property(TARGET MQT::CoreFoMaC
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/mqt-core-targets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "nlohmann_json::nlohmann_json" "spdlog::spdlog" "qdmi::qdmi" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
