# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

[build-system]
requires = ["scikit-build-core>=0.11.1", "setuptools-scm>=8.2", "pybind11>=3.0.0"]
build-backend = "scikit_build_core.build"

[project]
name = "mqt-core"
description = "The Backbone of the Munich Quantum Toolkit"
readme = "README.md"
authors = [
    { name = "Lukas Burgholzer", email = "burgholzer@me.com" }
]
keywords = ["MQT", "quantum-computing", "design-automation", "decision-diagrams", "zx-calculus"]
license = "MIT"
license-files = ["LICENSE.md"]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: C++",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
  "Typing :: Typed",
]
requires-python = ">=3.10"
dynamic = ["version"]

[project.optional-dependencies]
evaluation = [
  "pandas[output-formatting]>=2.1.2",
  "pandas[output-formatting]>=2.2.3; python_version >= '3.13'",
  "pandas[output-formatting]>=2.3.3; python_version >= '3.14'",
]
qiskit = [
  "qiskit[qasm3-import]>=1.0.0",
]

[project.scripts]
mqt-core-dd-compare = "mqt.core.dd_evaluation:main"
mqt-core-cli = "mqt.core.__main__:main"

[project.urls]
Homepage = "https://github.com/munich-quantum-toolkit/core"
Changelog = "https://github.com/munich-quantum-toolkit/core/blob/main/CHANGELOG.md"
Documentation = "https://mqt.readthedocs.io/projects/core"
Issues = "https://github.com/munich-quantum-toolkit/core/issues"
Discussions = "https://github.com/munich-quantum-toolkit/core/discussions"
PyPI = "https://pypi.org/project/mqt-core/"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"

# Set the wheel install directory
wheel.install-dir = "mqt/core"

# Explicitly set the package directory
wheel.packages = ["python/mqt"]

# Set required Ninja version
ninja.version = ">=1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}/{build_type}"

# All the targets to build
build.targets = [
  "mqt-core-ir",
  "mqt-core-algorithms",
  "mqt-core-circuit-optimizer",
  "mqt-core-dd",
  "mqt-core-zx",
  "mqt-core-ds",
  "mqt-core-na",
  "mqt-core-ir-bindings",
  "mqt-core-dd-bindings",
  "mqt-core-qdmi-na-device",
  "mqt-core-fomac-bindings",
  "mqt-core-na-fomac",
  "mqt-core-na-fomac-bindings",
]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["python/mqt/core/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/eval",
    "**/meta",
    "**/paper",
    "**/plots",
    "**/test",
    "**/tests",
]

[tool.check-sdist]
sdist-only = ["python/mqt/core/_version.py"]
git-only = [
    "docs/*",
    "test/*",
    "mlir/*",
]

[tool.scikit-build.cmake.define]
BUILD_MQT_CORE_BINDINGS = "ON"
BUILD_MQT_CORE_TESTS = "OFF"
BUILD_MQT_CORE_SHARED_LIBS = "ON"

[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.setuptools_scm]
write_to = "python/mqt/core/_version.py"


[tool.check-wheel-contents]
ignore = [
  "W002", # Wheel contains duplicate files (.so symlinks)
  "W004", # Module is not located at importable path (/lib/mqt-core-*.so)
]


[tool.pytest.ini_options]
minversion = "7.2"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--numprocesses=auto", # Automatically use all available CPU cores for parallel testing
]
xfail_strict = true
filterwarnings = [
  "error",
  'ignore:\s.*Pyarrow.*:DeprecationWarning:',
  'ignore:.*datetime\.datetime\.utcfromtimestamp.*:DeprecationWarning:',
  # Qiskit 1.2 deprecations
  'ignore:.*no need for these schema-conformant objects.*:DeprecationWarning:',
  # Qiskit 1.3 deprecations
  'ignore:.*``qiskit.dagcircuit.dagcircuit.DAGCircuit.*`` is deprecated as of qiskit 1.3.0.*:DeprecationWarning:',
  'ignore:.*``qiskit.circuit.library.standard_gates.x.*`` is pending deprecation as of qiskit 1.3.*:PendingDeprecationWarning:',
  'ignore:.*``qiskit.circuit.instruction.Instruction.condition`` is deprecated as of qiskit 1.3.0.*:DeprecationWarning:',
]
log_cli_level = "INFO"
testpaths = ["test/python"]


[tool.coverage]
run.source = ["mqt.core"]
run.omit = [
    '*/_compat/*',
]
run.disable_warnings = [
  "no-sysmon",
]
report.exclude_also = [
  '\.\.\.',
  'if TYPE_CHECKING:',
  'raise AssertionError',
  'raise NotImplementedError',
  'def __dir__()',  # Ignore __dir__ method that exists mainly for better IDE support
  '@overload'  # Overloads are only for static typing
]

[tool.mypy]
files = ["python/mqt", "test/python", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/python"]
python_version = "3.10"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["qiskit.*", "matplotlib.*", "pytest_console_scripts.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
namespace-packages = ["mqt"]
preview = true
unsafe-fixes = true
src = ["python"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "C90",     # <...> too complex
    "COM812",  # Conflicts with formatter
    "CPY001",  # Missing copyright notice at top of file
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "S101",    # Use of assert detected
    "S404",    # `subprocess` module is possibly insecure
    "TID252"   # Prefer absolute imports over relative imports from parent modules
]
future-annotations = true
typing-modules = ["mqt.core._compat.typing"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.assert_never".msg = "Use mqt.core._compat.typing.assert_never instead."

[tool.ruff.lint.isort]
known-first-party = ["mqt.core"]

[tool.ruff.lint.per-file-ignores]
"test/python/**" = ["T20", "INP001"]
"docs/**" = ["T20", "INP001"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "DOC202", "PYI011", "PYI021"]
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]
"python/mqt/core/_compat/**.py" = ["TID251", "A005"]
"python/mqt/core/dd_evaluation.py" = ["T201"]
"python/mqt/core/__main__.py" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
  "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on", # ignore block
  "FoMaC"
]

[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
mch = "mch"
ket = "ket"
optin = "optin"


[tool.repo-review]
ignore = ["GH200"]


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-groups = ["test"]
test-sources = ["test/python", "json/na"]
test-command = "pytest test/python"
build-frontend = "build[uv]"
enable = ["cpython-freethreading"]
test-skip = [
  "cp3*t-*", # no freethreading qiskit wheels
  "cp*-win_arm64", # no numpy, qiskit, ... wheels
]

[tool.cibuildwheel.linux]
before-all = "uv tool install sccache>=0.10.0"
environment = { DEPLOY = "ON", PATH="$PATH:/root/.local/bin" }
before-test = "uvx sccache --show-stats"

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.cibuildwheel.windows]
before-build = "uv pip install delvewheel>=1.9.0"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --namespace-pkg mqt --ignore-existing"


[tool.uv]
required-version = ">=0.5.20"
reinstall-package = ["mqt-core"]

[tool.uv.sources]
mqt-core = { workspace = true }

[dependency-groups]
build = [
  "pybind11>=3.0.0",
  "scikit-build-core>=0.11.1",
  "setuptools-scm>=8.2",
]
docs = [
  "furo>=2024.8.6",
  "myst-nb>=1.2.0",
  "setuptools-scm>=8.2",
  "sphinx-autoapi>=3.6.0",
  "sphinx-copybutton>=0.5.2",
  "sphinx-design>=0.6.1",
  "sphinxcontrib-bibtex>=2.6.3",
  "sphinxcontrib-svg2pdfconverter>=1.3.0",
  "sphinxext-opengraph>=0.10.0",
  "pandas[output-formatting]>=2.1.2",
  "pandas[output-formatting]>=2.2.3; python_version >= '3.13'",
  "pandas[output-formatting]>=2.3.3; python_version >= '3.14'",
  "qiskit[qasm3-import,visualization]>=1.0.0",
  "openqasm-pygments>=0.1.2",
  "breathe>=4.36.0",
  "graphviz>=0.20.3",
  "sphinx>=8.1.3",
  "sphinx>=8.2.3; python_version >= '3.11'",
  "mlir-pygments>=1.0.0",
]
test = [
  "pytest>=8.3.5",
  "pytest-console-scripts>=1.4.1",
  "pytest-cov>=6.1.1",
  "pytest-sugar>=1.0.0",
  "pytest-xdist>=3.7.0",
  "pandas[output-formatting]>=2.1.2",
  "pandas[output-formatting]>=2.2.3; python_version >= '3.13'",
  "pandas[output-formatting]>=2.3.3; python_version >= '3.14'",
  "qiskit[qasm3-import]>=1.0.0",
  "numpy>=2.1; python_version >= '3.13'",
  "numpy>=2.3.2; python_version >= '3.14'",
]
dev = [
  {include-group = "build"},
  {include-group = "docs"},
  {include-group = "test"},
]
