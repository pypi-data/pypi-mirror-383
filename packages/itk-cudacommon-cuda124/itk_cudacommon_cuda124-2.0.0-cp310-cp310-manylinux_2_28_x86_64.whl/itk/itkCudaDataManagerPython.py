# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _CudaCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCudaDataManagerPython
else:
    import _itkCudaDataManagerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython

def itkCudaDataManager_New():
    return itkCudaDataManager.New()

class itkCudaDataManager(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkCudaDataManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaDataManager_Pointer"""
        return _itkCudaDataManagerPython.itkCudaDataManager___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaDataManagerPython.itkCudaDataManager_Clone(self)

    def SetBufferSize(self, num):
        r"""
        SetBufferSize(self, num)

        Parameters
        ----------
        num: unsigned long

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetBufferSize(self, num)

    def GetBufferSize(self):
        r"""GetBufferSize(self) -> unsigned long"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetBufferSize(self)

    def SetBufferFlag(self, flags):
        r"""
        SetBufferFlag(self, flags)

        Parameters
        ----------
        flags: int

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetBufferFlag(self, flags)

    def SetCPUBufferPointer(self, ptr):
        r"""
        SetCPUBufferPointer(self, ptr)

        Parameters
        ----------
        ptr: void *

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetCPUBufferPointer(self, ptr)

    def SetGPUBufferPointer(self, *args):
        r"""
        SetGPUBufferPointer(self, ptr)

        Parameters
        ----------
        ptr: unsigned long

        SetGPUBufferPointer(self, ptr)

        Parameters
        ----------
        ptr: void *

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetGPUBufferPointer(self, *args)

    def SetCPUDirtyFlag(self, isDirty):
        r"""
        SetCPUDirtyFlag(self, isDirty)

        Parameters
        ----------
        isDirty: bool

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetCPUDirtyFlag(self, isDirty)

    def SetGPUDirtyFlag(self, isDirty):
        r"""
        SetGPUDirtyFlag(self, isDirty)

        Parameters
        ----------
        isDirty: bool

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetGPUDirtyFlag(self, isDirty)

    def GetReleaseDirtyGPUBuffer(self):
        r"""GetReleaseDirtyGPUBuffer(self) -> bool"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetReleaseDirtyGPUBuffer(self)

    def SetReleaseDirtyGPUBuffer(self, _arg):
        r"""
        SetReleaseDirtyGPUBuffer(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_SetReleaseDirtyGPUBuffer(self, _arg)

    def ReleaseDirtyGPUBufferOn(self):
        r"""ReleaseDirtyGPUBufferOn(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_ReleaseDirtyGPUBufferOn(self)

    def ReleaseDirtyGPUBufferOff(self):
        r"""ReleaseDirtyGPUBufferOff(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_ReleaseDirtyGPUBufferOff(self)

    def SetCPUBufferDirty(self):
        r"""SetCPUBufferDirty(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_SetCPUBufferDirty(self)

    def SetGPUBufferDirty(self):
        r"""SetGPUBufferDirty(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_SetGPUBufferDirty(self)

    def IsCPUBufferDirty(self):
        r"""IsCPUBufferDirty(self) -> bool"""
        return _itkCudaDataManagerPython.itkCudaDataManager_IsCPUBufferDirty(self)

    def IsGPUBufferDirty(self):
        r"""IsGPUBufferDirty(self) -> bool"""
        return _itkCudaDataManagerPython.itkCudaDataManager_IsGPUBufferDirty(self)

    def UpdateCPUBuffer(self):
        r"""UpdateCPUBuffer(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_UpdateCPUBuffer(self)

    def UpdateGPUBuffer(self):
        r"""UpdateGPUBuffer(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_UpdateGPUBuffer(self)

    def Allocate(self):
        r"""Allocate(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_Allocate(self)

    def Free(self):
        r"""Free(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_Free(self)

    def Update(self):
        r"""Update(self) -> bool"""
        return _itkCudaDataManagerPython.itkCudaDataManager_Update(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaDataManager const *

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_Graft(self, data)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkCudaDataManagerPython.itkCudaDataManager_Initialize(self)

    def GetGPUBufferPointer(self):
        r"""GetGPUBufferPointer(self) -> void *"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetGPUBufferPointer(self)

    def GetGPUBufferPointerPtr(self):
        r"""GetGPUBufferPointerPtr(self) -> void *"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetGPUBufferPointerPtr(self)

    def GetCPUBufferPointer(self):
        r"""GetCPUBufferPointer(self) -> void *"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetCPUBufferPointer(self)

    def GetGPUBufferSize(self):
        r"""GetGPUBufferSize(self) -> unsigned long"""
        return _itkCudaDataManagerPython.itkCudaDataManager_GetGPUBufferSize(self)
    __swig_destroy__ = _itkCudaDataManagerPython.delete_itkCudaDataManager

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaDataManager

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaDataManagerPython.itkCudaDataManager_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaDataManager

        Create a new object of the class itkCudaDataManager and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaDataManager.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaDataManager.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaDataManager.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaDataManager in _itkCudaDataManagerPython:
_itkCudaDataManagerPython.itkCudaDataManager_swigregister(itkCudaDataManager)

