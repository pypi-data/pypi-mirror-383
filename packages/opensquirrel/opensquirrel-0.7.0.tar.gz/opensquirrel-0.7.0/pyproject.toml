[project]
name = "opensquirrel"
version = "0.7.0"
description = "A quantum circuit transformation and manipulation tool"
authors = [
    { name = "Quantum Inspire", email = "support@quantum-inspire.com" },
]
requires-python = ">=3.10.0"
readme = "README.md"
license = "Apache-2.0"
keywords = [
    "quantum",
    "circuits",
    "compilation",
]
dependencies = [
    "libqasm==1.2.1",
    "networkx>=3.4.2",
    "numpy>=2.2.6",
    "scipy>=1.15.3"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
]

[project.urls]
Homepage = "https://qutech-delft.github.io/OpenSquirrel/"
Repository = "https://github.com/QuTech-Delft/OpenSquirrel"

[dependency-groups]
dev = [
    "coverage>=7.10.7,<8",
    "IPython>=8.37,<9",
    "mypy>=1.18.2,<2",
    "pytest>=8.4.2,<9",
    "pytest-cov>=4.1,<8.0",
    "ruff>=0.13.2,<0.15",
    "sympy>=1.14.0,<2",
    "tox>=4.30.2,<5",
]
export = [
    "pyqt5-qt5==5.15.2; sys_platform != 'darwin'",
    "quantify-scheduler==0.25.1; sys_platform != 'darwin'",
]
docs = [
    "mike>=2.1.3",
    "mkdocs>=1.6.1,<2",
    "mkdocs-exclude==1.0.2",
    "mkdocs-build-plantuml-plugin==1.9.0",
    "mkdocs-glightbox==0.5.1",
    "mkdocs-literate-nav>=0.6.2,<0.7",
    "mkdocs-material>=9.6.20,<10",
    "mkdocs-material-extensions==1.3.1",
    "mkdocs-render-swagger-plugin==0.1.2",
    "mkdocs_gen_files>=0.5.0,<0.6",
    "mkdocstrings[python]>=0.24,<0.31",
    "pymdown-extensions>=10.7.1,<11",
]
examples = [
    "jupyter>=1.0.0,<2",
]

[tool.hatch.build.targets.sdist]
include = ["opensquirrel"]

[tool.hatch.build.targets.wheel]
include = ["opensquirrel"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true
omit = ["tests/*", "**/.tox/**"]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
exclude_also = ["if TYPE_CHECKING:"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
preview = true
select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "COM", #flake8-commas
    "C4", #flake8-comprehensions
    "C90", # mccabe
    #"D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E", # pycodestyle (error)
    "ERA", # eradicate
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    "FBT", # flake8-boolean-trap
    "FIX", # flake8-fixme
    "FLY", # flynt
    "G", # flake8-logging-format
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PD", # pandas-vet
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "FURB", # refurb
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "RUF022",
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "TCH", # flake8-type-checking
    "TRY", # tryceratops
    "T20", # flake8-print
    "T100", # flake8-debugger
    "UP", # pyupgrade
    "W", # pycodestyle (warning)
    "Q", # flake8-quotes
    "YTT", # flake8-2020
]
ignore = [
    "A005", # module shadowing a Python builtin module
    "ANN401", # typing.Any can be useful (for example in __eq__)
    "B027", # Ignore the rule for empty methods in abstract base classes
    "COM812", # Conflicts with ruff format
    "ISC001", # Possible conflicts with ruff format
    "W605", # deprecated in Python 3.6
    "PT012", # pytest.raises() block should contain only a single simple statement
    "SIM105", # Use `contextlib.suppress(ModuleNotFoundError)` instead of `try`-`except`-`pass`
]
isort.combine-as-imports = true
pydocstyle.convention = "google"
flake8-type-checking.exempt-modules = ["typing", "typing_extensions", "numpy", "networkx", "collections"]

[tool.ruff.lint.extend-per-file-ignores]
"*.py" = [
    "S101", # asserts allowed everywhere
]
"tests/**/*.py" = [
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "D", # No doc requirements in tests
    "SLF001", # Testing private functions is OK
]
"check_*.py" = [
    "SLF001", # Checking private functions is OK
]

[tool.mypy]
ignore_missing_imports = true
strict = true
