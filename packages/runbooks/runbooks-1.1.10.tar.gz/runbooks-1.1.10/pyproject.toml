##───────────────────────────────────────────────────────────────────────────────
## CloudOps Automation Runbooks 
##───────────────────────────────────────────────────────────────────────────────

[project.urls]
"Homepage" = "https://cloudops.oceansoft.io"
"Repository" = "https://github.com/1xOps/CloudOps-Runbooks"
"Documentation" = "https://cloudops.oceansoft.io/runbooks/"
"Issues" = "https://github.com/1xOps/CloudOps-Runbooks/issues"
"Changelog" = "https://github.com/1xOps/CloudOps-Runbooks/blob/main/CHANGELOG.md"

[project]
## Metadata: https://docs.astral.sh/uv/concepts/projects/config/
name = "runbooks"
## Enhanced with AWS Operations integration, unified CLI architecture, and comprehensive service operations
version = "1.1.10"
description = "CloudOps Automation Toolkit with Enhanced Cloud Foundations Assessment for DevOps and SRE teams."
readme = "README.md"
requires-python = ">=3.11,<3.14"
license = "Apache-2.0"
license-files = ["LICENSE"]
authors = [
  { name = "Maintainers", email = "nnthanh101@gmail.com" },
]
keywords = ["runbooks", "automation", "DevOps", "SRE", "CloudOps", "AWS", "cloud-foundations", "FinOps", "enterprise", "cost-optimization", "security-compliance", "multi-account", "business-intelligence"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

## Core Dependencies  
dependencies = [
    ## Core Infrastructure (Updated to latest versions)
    "boto3>=1.35.40",
    "botocore>=1.35.40",
    "diagrams>=0.24.4",
    ## CLI Framework
    "click>=8.2.1",
    ## Data Models and Validation
    "pydantic>=2.10.0",
    ## CFAT-specific additions for enhanced assessment
    "jinja2>=3.1.4", # HTML report templating (also used by security module)
    "werkzeug>=3.1.0", # Web server for interactive reports
    "markdown>=3.7.0", # Markdown processing for reports
    ## Utilities: Logging & Monitoring
    "simplejson>=3.20.1",
    "python-dateutil>=2.9.0",
    "loguru>=0.7.3",
    "graphviz>=0.20.1", # Organization diagram generation
    ## FinOps module dependencies (simplified and aligned)
    "rich>=14.1.0", # Rich text and beautiful formatting in the terminal
    "reportlab>=3.6.1", # PDF generation
    "requests>=2.32.0", # HTTP requests for version checking
    "packaging>=21.0", # Core utilities for Python packages
    "pyyaml>=6.0.2", # YAML parsing
    ## Security Module Dependencies
    "jmespath>=1.0.1", # JSON query parsing for AWS responses
    "urllib3>=1.26.18,<1.27", # HTTP library (compatible with awscli)
    "openapi-spec-validator>=0.7.2", # CloudFormation template validation
    ## 1xOps/CloudOps-Runbooks: https://pypi.org/project/runbooks/
    # "runbooks>=0.3.0"
    "mcp>=1.12.3",
    "pandas>=2.3.1",
    "ipython>=9.4.0",
    "psutil>=7.0.0",
    "matplotlib>=3.10.5",
    "seaborn>=0.13.2",
    "plotly>=6.3.0",
    "papermill>=2.6.0",
    "jupyter>=1.1.1",
    "ipywidgets>=8.1.7",
    "pytest>=8.4.1",
    "scipy>=1.16.2",
]

##─────────────────────────────────
##  Optional Development Groups
##─────────────────────────────────
[dependency-groups]

## Development Dependencies
dev = [
    ## Code Quality & Testing Tools
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=0.24.0",
    "aiohttp>=3.12.15",  # Async HTTP client for testing
    "pyyaml>=6.0.2", # YAML parsing for testing environment
    "ruff>=0.12.7",
    "mypy>=1.13.0",
    "ty>=0.0.1a16",
    "moto>=5.1.9",
    ## Type stubs for better type checking
    "boto3-stubs[essential]>=1.35.0",
    "types-requests<2.32.0",
    "awscli @ git+https://github.com/aws/aws-cli@v2",
    "pytest-env>=1.1.5",
    "pytest-html>=4.1.1",
    "pytest-timeout>=2.4.0",
    "twine>=6.2.0",
]

## Documentation Tools (MkDocs and Plugins)
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.49",
    "mkdocstrings>=0.27.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-drawio-exporter>=0.10.1",
    "mkdocs-glightbox",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-rss-plugin",
    "pymdown-extensions>=10.13",
    "pygments>=2.18.0",
    "mkdocs-techdocs-core>=1.5.0",
]

## JupyterLab and AI/ML Tools
jupyter = [
    "gunicorn>=23.0.0",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.5",
    ## downgrade ipython to a version compatible with prompt-toolkit<3.0.39 (used by awscli)
    # "ipython>=8.12.0,<8.31.0",
    # "jupyter-ai>=2.28.4",
    # "jupyter-ai[all]>=2.28.4",
    "jupyterlab>=4.3.4",
    "jupyterlab-git>=0.50.2",
    # jupyter-resource-usage
    # jupyter_scheduler
    ## Visualization libraries required by VPC notebooks
    "matplotlib>=3.10.5",
    "seaborn>=0.13.2",
    "plotly>=6.3.0",
    ## Notebook execution automation
    "papermill>=2.6.0",
    "nbconvert>=7.16.6",
]

## CloudOps
cloud = [
    # "ansible>=11.1.0",
    # 
    # "azure-cli",
    # "s3transfer>=0.10.4",
    # 
    # "requests>=2.32.4",
    # "fastapi>=0.116.1",
    
]

## AI & Visual Analytics: "pandasai>=3.0.0b2",
analytics = [
    "openai>=1.58.1",
    "pydantic>=2.10.4",
    "pydantic-ai>=0.0.16",
    "openpyxl>=3.1.5",
    "pandas>=2.2.3",
    "plotly>=5.24.1",
    "vizro>=0.1.46",        ## Updated to latest version per PyPI
    "vizro-ai>=0.3.7",     ## Updated to latest version per PyPI
]

[tool.setuptools.package-data]
"runbooks.security" = [
    "*.json", 
    "*.html",
    "checklist/*.py",
    "utils/*.py"
]
"runbooks.cfat" = [
    "web_assets/dist/*",
    "web_assets/templates/*", 
    "web_assets/static/*"
]
"runbooks.operate" = [
    "*.json",
    "*.py"
]
"runbooks.inventory" = [
    "collectors/*.py",
    "core/*.py", 
    "models/*.py",
    "utils/*.py",
    "legacy/*.md",
    "*.md",
    "*.png", 
    "*.json",
    "*.sh"
]


[tool.pytest.ini_options]
## Pytest Configuration for CloudOps Runbooks Testing Framework
pythonpath = ["src", "src/runbooks", "src/runbooks/inventory"]
testpaths = [
    "tests"
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

## Test Discovery and Execution 
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
    "--disable-warnings",
    # Coverage options (enabled for improved quality gates)
    "--cov=src/runbooks",
    "--cov-report=term-missing",
    "--cov-report=html:tests/reports/htmlcov",
    "--cov-fail-under=90",
    # Performance and logging
    "--capture=no",
]

## Test Markers for Organization (Enhanced for CloudOps)
markers = [
    "functional: marks tests as functional tests (deselect with '-m \"not functional\"')",
    "integration: marks tests as integration tests with moto AWS mocking",
    "unit: Unit tests (fast, no external dependencies)",
    "e2e: End-to-end tests (requires real AWS credentials)",
    "slow: Slow tests (long-running operations)",
    "import_validation: Import validation tests for failed scripts",
    "aws_service: Tests specific AWS service interactions",
    "cli: Tests CLI argument parsing and validation",
    "inventory: Tests for inventory collection scripts",
    "security: Tests for security baseline and assessment",
    "cfat: Tests for Cloud Foundations Assessment Tool",
    "finops: Tests for cost and usage analytics",
    "remediation: Tests for AWS security remediation scripts",
    "operate: Tests for AWS resource operations",
    "organizations: Tests for AWS Organizations functionality",
    "cloudformation: Tests for CloudFormation operations",
    "ec2: Tests for EC2 service operations",
    "iam: Tests for IAM service operations",
    "s3: Tests for S3 service operations",
    "models: Tests for data model validation",
    "assessment: Tests for assessment engine functionality",
    "reporting: Tests for report generation",
    "performance: Performance and benchmark tests",
    "moto_aws: Tests using moto AWS service mocking",
]

## Filterwarnings for cleaner test output (Enhanced)
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:Call to deprecated create function:DeprecationWarning",
    "ignore::pytest.PytestCollectionWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore:.*unclosed.*:ResourceWarning",
    "ignore:.*ssl.*:DeprecationWarning",
    "ignore:.*urllib3.*:DeprecationWarning",
    "ignore:.*boto.*:DeprecationWarning",
    "ignore:.*aws.*:DeprecationWarning",
]

## Async test configuration
asyncio_mode = "auto"

## Test timeout settings (commented out - requires pytest-timeout)
# timeout = 300
# timeout_method = "thread"


[project.scripts]
## CLI Commands
runbooks = "runbooks.main:cli_entry_point"
runbooks-security = "runbooks.security_baseline.run_script:main"

## Enhanced CFAT CLI access
cfat = "runbooks.cfat.cli:main"           # Direct CFAT CLI access
runbooks-cfat = "runbooks.cfat.cli:main"  # Alternative CFAT access

## FinOps CLI access
runbooks-finops = "runbooks.finops.cli:main"  # Direct FinOps CLI access

## Version Management CLI
runbooks-version = "runbooks.utils.version_validator:cli_main"  # Version validation CLI

[tool.uv]
## UV Package Configuration
package = true



[tool.ruff]
## Linting and Formatting Configurations
## https://docs.astral.sh/ruff/configuration/
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = ["E", "W", "F", "I"]
ignore = ["F401", "E501", "F811"]
fixable = ["I"]
unfixable = []

[tool.ruff.format]
line-ending = "lf"

[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"
