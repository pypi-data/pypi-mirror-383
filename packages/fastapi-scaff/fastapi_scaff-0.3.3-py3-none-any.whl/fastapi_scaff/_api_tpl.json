{
    "asm_app_api.py": "import traceback\n\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\n\nfrom app.api.responses import Responses, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.services.tpl import (\n    TplDetailSvc,\n)\n\nrouter = APIRouter()\n\n\n@router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tplDetail\",\n    responses=response_docs(\n        model=TplDetailSvc,\n    ),\n)\nasync def detail(\n        request: Request,\n        tpl_id: str,\n        # TODO: \u8ba4\u8bc1\n):\n    try:\n        tpl_svc = TplDetailSvc(id=tpl_id)\n        data = await tpl_svc.detail()\n        if not data:\n            return Responses.failure(status=Status.RECORD_NOT_EXIST_ERROR, request=request)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Responses.failure(msg=\"tplDetail\u5931\u8d25\", error=e, request=request)\n    return Responses.success(data=data, request=request)\n",
    "asm_app_models.py": "from sqlalchemy import Column, String\n\nfrom app.models import DeclBase\nfrom app.initializer import g\n\n\nclass Tpl(DeclBase):\n    __tablename__ = \"tpl\"\n\n    id = Column(String(20), primary_key=True, default=g.snow_client.gen_uid, comment=\"\u4e3b\u952e\")\n    name = Column(String(50), nullable=False, comment=\"\u540d\u79f0\")\n",
    "asm_app_schemas.py": "from pydantic import BaseModel, Field\n\nfrom app.schemas import filter_fields\n\n\nclass TplDetail(BaseModel):\n    id: str = Field(...)\n    # #\n    name: str = None\n\n    @classmethod\n    def response_fields(cls):\n        return filter_fields(\n            cls,\n            exclude=[]\n        )\n",
    "asm_app_services.py": "from app.schemas.tpl import (\n    TplDetail,\n)\n\n\nclass TplDetailSvc(TplDetail):\n    model_config = {\n        \"json_schema_extra\": {\n            \"title\": \"TplDetail\"\n        }\n    }\n\n    async def detail(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n",
    "as_app_api.py": "import traceback\n\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\n\nfrom app.api.responses import Responses, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.services.tpl import (\n    TplDetailSvc,\n)\n\nrouter = APIRouter()\n\n\n@router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tplDetail\",\n    responses=response_docs(\n        model=TplDetailSvc,\n    ),\n)\nasync def detail(\n        request: Request,\n        tpl_id: str,\n        # TODO: \u8ba4\u8bc1\n):\n    try:\n        tpl_svc = TplDetailSvc(id=tpl_id)\n        data = await tpl_svc.detail()\n        if not data:\n            return Responses.failure(status=Status.RECORD_NOT_EXIST_ERROR, request=request)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Responses.failure(msg=\"tplDetail\u5931\u8d25\", error=e, request=request)\n    return Responses.success(data=data, request=request)\n",
    "as_app_schemas.py": "from pydantic import BaseModel, Field\n\nfrom app.schemas import filter_fields\n\n\nclass TplDetail(BaseModel):\n    id: str = Field(...)\n    # #\n    name: str = None\n\n    @classmethod\n    def response_fields(cls):\n        return filter_fields(\n            cls,\n            exclude=[]\n        )\n",
    "as_app_services.py": "from app.schemas.tpl import (\n    TplDetail,\n)\n\n\nclass TplDetailSvc(TplDetail):\n    model_config = {\n        \"json_schema_extra\": {\n            \"title\": \"TplDetail\"\n        }\n    }\n\n    async def detail(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n",
    "a_app_api.py": "import traceback\n\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\n\nfrom app.api.responses import Responses, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\n\nrouter = APIRouter()\n\n\n@router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tplDetail\",\n    responses=response_docs(),\n)\nasync def detail(\n        request: Request,\n        tpl_id: str,\n        # TODO: \u8ba4\u8bc1\n):\n    try:\n        data = {}  # TODO: \u6570\u636e\n        if not data:\n            return Responses.failure(status=Status.RECORD_NOT_EXIST_ERROR, request=request)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Responses.failure(msg=\"tplDetail\u5931\u8d25\", error=e, request=request)\n    return Responses.success(data=data, request=request)\n",
    "light_app_api.py": "import traceback\n\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\n\nfrom app.api.responses import Responses, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.services.tpl import (\n    TplDetailSvc,\n)\n\nrouter = APIRouter()\n\n\n@router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tplDetail\",\n    responses=response_docs(\n        model=TplDetailSvc,\n    ),\n)\nasync def detail(\n        request: Request,\n        tpl_id: str,\n        # TODO: \u8ba4\u8bc1\n):\n    try:\n        tpl_svc = TplDetailSvc(id=tpl_id)\n        data = await tpl_svc.detail()\n        if not data:\n            return Responses.failure(status=Status.RECORD_NOT_EXIST_ERROR, request=request)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Responses.failure(msg=\"tplDetail\u5931\u8d25\", error=e, request=request)\n    return Responses.success(data=data, request=request)\n",
    "light_app_services.py": "from pydantic import BaseModel\n\n\nclass TplDetailSvc(BaseModel):\n    model_config = {\n        \"json_schema_extra\": {\n            \"title\": \"TplDetail\"\n        }\n    }\n\n    async def detail(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n",
    "only_app_api.py": "import traceback\n\nfrom fastapi import APIRouter\nfrom starlette.requests import Request\n\nfrom app.api.responses import Responses, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\n\nrouter = APIRouter()\n\n\n@router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tplDetail\",\n    responses=response_docs(),\n)\nasync def detail(\n        request: Request,\n        tpl_id: str,\n        # TODO: \u8ba4\u8bc1\n):\n    try:\n        data = {}  # TODO: \u6570\u636e\n        if not data:\n            return Responses.failure(status=Status.RECORD_NOT_EXIST_ERROR, request=request)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Responses.failure(msg=\"tplDetail\u5931\u8d25\", error=e, request=request)\n    return Responses.success(data=data, request=request)\n",
    "only_app_models.py": "from sqlalchemy import Column, String\n\nfrom app.models import DeclBase\nfrom app.initializer import g\n\n\nclass Tpl(DeclBase):\n    __tablename__ = \"tpl\"\n\n    id = Column(String(20), primary_key=True, default=g.snow_client.gen_uid, comment=\"\u4e3b\u952e\")\n    name = Column(String(50), nullable=False, comment=\"\u540d\u79f0\")\n",
    "only_app_schemas.py": "from pydantic import BaseModel, Field\n\nfrom app.schemas import filter_fields\n\n\nclass TplDetail(BaseModel):\n    id: str = Field(...)\n    # #\n    name: str = None\n\n    @classmethod\n    def response_fields(cls):\n        return filter_fields(\n            cls,\n            exclude=[]\n        )\n",
    "only_app_services.py": "from pydantic import BaseModel\n\n\nclass TplDetailSvc(BaseModel):\n    model_config = {\n        \"json_schema_extra\": {\n            \"title\": \"TplDetail\"\n        }\n    }\n\n    async def detail(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n"
}