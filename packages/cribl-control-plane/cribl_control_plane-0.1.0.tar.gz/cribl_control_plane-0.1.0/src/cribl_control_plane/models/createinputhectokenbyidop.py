"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addhectokenrequest import AddHecTokenRequest, AddHecTokenRequestTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateInputHecTokenByIDRequestTypedDict(TypedDict):
    id: str
    r"""The <code>id</code> of the Splunk HEC Source."""
    add_hec_token_request: AddHecTokenRequestTypedDict
    r"""AddHecTokenRequest object"""


class CreateInputHecTokenByIDRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The <code>id</code> of the Splunk HEC Source."""

    add_hec_token_request: Annotated[
        AddHecTokenRequest,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""AddHecTokenRequest object"""


class CreateInputHecTokenByIDResponseTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class CreateInputHecTokenByIDResponse(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
