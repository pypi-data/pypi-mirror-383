#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (C) 2025, Pascal Rath <contact+opnsense@OXL.at>
# GNU General Public License v3.0+ (see https://www.gnu.org/licenses/gpl-3.0.txt)

from basic.ansible import AnsibleModule

from plugins.module_utils.base.handler import \
    module_dependency_error, MODULE_EXCEPTIONS

try:
    from plugins.module_utils.base.wrapper import module_wrapper
    from plugins.module_utils.defaults.main import \
        OPN_MOD_ARGS, STATE_MOD_ARG, RELOAD_MOD_ARG
    from plugins.module_utils.main.acme_validation import Validation

except MODULE_EXCEPTIONS:
    module_dependency_error()


# DOCUMENTATION = 'https://ansible-opnsense.oxl.app/en/latest/modules/acmeclient.html'
# EXAMPLES = 'https://ansible-opnsense.oxl.app/en/latest/modules/acmeclient.html'


def run_module(module_input):
    module_args = dict(
        name=dict(
            type='str', required=True,
            description='Name to identify this validation.',
        ),
        description=dict(
            type='str', required=False, aliases=['desc'],
            description='Description for this validation.',
        ),
        method=dict(
            type='str', required=False, default='dns01',
            choices=['http01', 'dns01', 'tlsalpn01'],
            description='Set the ACME challenge type.',
        ),
        http_service=dict(
            type='str', required=False, default='opnsense',
            choices=['opnsense', 'haproxy'],
            description='HTTP Service to use for \'http01\' validation.',
        ),
        http_opn_autodiscovery=dict(
            type='bool', required=False, default=True,
            description='Choose this option to let OPNsense try to auto-discover these IP addresses.',
        ),
        http_opn_interface=dict(
            type='str', required=False,
            description='Choose the interface where this IP address is currently configured.',
        ),
        http_opn_ipaddresses=dict(
            type='list', required=False, elements='str', default=[],
            description='Enter the all of these IP addresses here.',
        ),
        http_haproxy_inject=dict(
            type='bool', required=False, default=True,
            description='Automatically inject config into the local HAProxy instance to let it serve acme challanges '
                        'without service interruption. Of course, adding the configuration requires a short restart '
                        'of the HAProxy service.',
        ),
        http_haproxy_frontends=dict(
            type='list', required=False, elements='str', default=[],
            description='Choose the local HAProxy frontends. They will automatically be configured to redirect acme '
                        'challenges to the internal acme client. The HAProxy service will automatically be restarted '
                        'if a certificate was renewed. ',
        ),
        tlsalpn_acme_autodiscovery=dict(
            type='bool', required=False, default=True,
            description='Choose this option to let OPNsense try to auto-discover these IP addresses.',
        ),
        tlsalpn_acme_interface=dict(
            type='str', required=False,
            description='Choose the interface where this IP address is currently configured.',
        ),
        tlsalpn_acme_ipaddresses=dict(
            type='list', required=False, elements='str', default=[],
            description='Enter the all of these IP addresses here.',
        ),
        dns_service=dict(
            type='str', required=False, default='dns_freedns',
            choices=[
                'dns_1984hosting', 'dns_acmedns', 'dns_acmeproxy', 'dns_active24', 'dns_ad', 'dns_ali', 'dns_kas',
                'dns_arvan', 'dns_artfiles', 'dns_aurora', 'dns_autodns', 'dns_aws', 'dns_azure', 'dns_bunny',
                'dns_cloudns', 'dns_cf', 'dns_cx', 'dns_cn', 'dns_conoha', 'dns_constellix', 'dns_cpanel', 'dns_cyon',
                'dns_ddnss', 'dns_desec', 'dns_dgon', 'dns_da', 'dns_dnsexit', 'dns_dnshome', 'dns_dnsimple',
                'dns_dnsservices', 'dns_domeneshop', 'dns_me', 'dns_dp', 'dns_doapi', 'dns_do', 'dns_dreamhost',
                'dns_duckdns', 'dns_dyn', 'dns_dynu', 'dns_dynv6', 'dns_easydns', 'dns_euserv', 'dns_exoscale',
                'dns_fornex', 'dns_freedns', 'dns_gandi_livedns', 'dns_gd', 'dns_gcloud', 'dns_googledomains',
                'dns_gdnsdk', 'dns_hetzner', 'dns_hexonet', 'dns_hostingde', 'dns_he', 'dns_infoblox',
                'dns_infomaniak', 'dns_internetbs', 'dns_inwx', 'dns_ionos', 'dns_ipv64', 'dns_ispconfig', 'dns_jd',
                'dns_joker', 'dns_kinghost', 'dns_knot', 'dns_leaseweb', 'dns_lexicon', 'dns_limacity', 'dns_linode',
                'dns_linode_v4', 'dns_loopia', 'dns_lua', 'dns_miab', 'dns_mydnsjp', 'dns_mythic_beasts',
                'dns_namecom', 'dns_namecheap', 'dns_namesilo', 'dns_nederhost', 'dns_netcup', 'dns_nic',
                'dns_njalla', 'dns_nsone', 'dns_nsupdate', 'dns_online', 'dns_opnsense', 'dns_oci', 'dns_ovh',
                'dns_pdns', 'dns_pleskxml', 'dns_pointhq', 'dns_porkbun', 'dns_rackspace', 'dns_rage4', 'dns_regru',
                'dns_schlundtech', 'dns_selectel', 'dns_selfhost', 'dns_servercow', 'dns_simply', 'dns_transip',
                'dns_udr', 'dns_unoeuro', 'dns_variomedia', 'dns_vscale', 'dns_vultr', 'dns_world4you', 'dns_yandex',
                'dns_zilore', 'dns_zone', 'dns_zonomi'
            ],
        ),
        dns_sleep=dict(
            type='int', required=False, default=0,
            description='The time in seconds to wait for all the TXT records to take effect after adding them to the '
                        'DNS API. Defaults to 0 seconds, which causes Acme Client to check public DNS services every '
                        '10 seconds for up to 20 minutes. If set to a non-zero value, a fixed DNS sleep time will be '
                        'used and the local DNS servers will be queried instead. A DNS sleep time of 120 seconds or '
                        'more is recommended for some DNS APIs.',
        ),
        dns_active24_token=dict(type='str', required=False, no_log=True),
        dns_ad_key=dict(type='str', required=False, no_log=True),
        dns_ali_key=dict(type='str', required=False),
        dns_ali_secret=dict(type='str', required=False, no_log=True),
        dns_autodns_user=dict(type='str', required=False),
        dns_autodns_password=dict(type='str', required=False, no_log=True),
        dns_autodns_context=dict(type='str', required=False),
        dns_aws_id=dict(type='str', required=False),
        dns_aws_secret=dict(type='str', required=False, no_log=True),
        dns_azuredns_subscriptionid=dict(type='str', required=False),
        dns_azuredns_tenantid=dict(type='str', required=False),
        dns_azuredns_appid=dict(type='str', required=False),
        dns_azuredns_clientsecret=dict(type='str', required=False, no_log=True),
        dns_bunny_api_key=dict(type='str', required=False, no_log=True),
        dns_cf_email=dict(type='str', required=False),
        dns_cf_key=dict(type='str', required=False),
        dns_cf_token=dict(type='str', required=False, no_log=True),
        dns_cf_account_id=dict(type='str', required=False),
        dns_cf_zone_id=dict(type='str', required=False),
        dns_cloudns_auth_id=dict(type='str', required=False),
        dns_cloudns_sub_auth_id=dict(type='str', required=False),
        dns_cloudns_auth_password=dict(type='str', required=False, no_log=True),
        dns_cx_key=dict(type='str', required=False),
        dns_cx_secret=dict(type='str', required=False, no_log=True),
        dns_cyon_user=dict(type='str', required=False),
        dns_cyon_password=dict(type='str', required=False, no_log=True),
        dns_da_key=dict(type='str', required=False, no_log=True),
        dns_da_insecure=dict(type='bool', required=False, default=False),
        dns_ddnss_token=dict(type='str', required=False, no_log=True),
        dns_dgon_key=dict(type='str', required=False, no_log=True),
        dns_dnsexit_auth_user=dict(type='str', required=False),
        dns_dnsexit_auth_pass=dict(type='str', required=False, no_log=True),
        dns_dnsexit_api=dict(type='str', required=False, no_log=True),
        dns_dnshome_password=dict(type='str', required=False, no_log=True),
        dns_dnshome_subdomain=dict(type='str', required=False),
        dns_dnsimple_token=dict(type='str', required=False, no_log=True),
        dns_dnsservices_user=dict(type='str', required=False),
        dns_dnsservices_password=dict(type='str', required=False, no_log=True),
        dns_doapi_token=dict(type='str', required=False, no_log=True),
        dns_do_pid=dict(type='str', required=False),
        dns_do_password=dict(type='str', required=False, no_log=True),
        dns_domeneshop_token=dict(type='str', required=False),
        dns_domeneshop_secret=dict(type='str', required=False, no_log=True),
        dns_dp_id=dict(type='str', required=False),
        dns_dp_key=dict(type='str', required=False, no_log=True),
        dns_duckdns_token=dict(type='str', required=False, no_log=True),
        dns_dyn_customer=dict(type='str', required=False),
        dns_dyn_user=dict(type='str', required=False),
        dns_dyn_password=dict(type='str', required=False, no_log=True),
        dns_dynu_clientid=dict(type='str', required=False),
        dns_dynu_secret=dict(type='str', required=False, no_log=True),
        dns_freedns_user=dict(type='str', required=False),
        dns_freedns_password=dict(type='str', required=False, no_log=True),
        dns_fornex_api_key=dict(type='str', required=False, no_log=True),
        dns_gandi_livedns_key=dict(type='str', required=False),
        dns_gandi_livedns_token=dict(type='str', required=False, no_log=True),
        dns_gcloud_key=dict(type='str', required=False, no_log=True),
        dns_googledomains_access_token=dict(type='str', required=False, no_log=True),
        dns_googledomains_zone=dict(type='str', required=False),
        dns_gd_key=dict(type='str', required=False),
        dns_gd_secret=dict(type='str', required=False, no_log=True),
        dns_hostingde_server=dict(type='str', required=False),
        dns_hostingde_apiKey=dict(type='str', required=False, no_log=True),
        dns_he_user=dict(type='str', required=False),
        dns_he_password=dict(type='str', required=False, no_log=True),
        dns_infoblox_credentials=dict(type='str', required=False, no_log=True),
        dns_infoblox_server=dict(type='str', required=False),
        dns_inwx_user=dict(type='str', required=False),
        dns_inwx_password=dict(type='str', required=False, no_log=True),
        dns_inwx_shared_secret=dict(type='str', required=False, no_log=True),
        dns_ionos_prefix=dict(type='str', required=False),
        dns_ionos_secret=dict(type='str', required=False, no_log=True),
        dns_ipv64_token=dict(type='str', required=False, no_log=True),
        dns_ispconfig_user=dict(type='str', required=False),
        dns_ispconfig_password=dict(type='str', required=False, no_log=True),
        dns_ispconfig_api=dict(type='str', required=False),
        dns_ispconfig_insecure=dict(type='bool', required=False, default=False),
        dns_jd_id=dict(type='str', required=False),
        dns_jd_region=dict(type='str', required=False),
        dns_jd_secret=dict(type='str', required=False, no_log=True),
        dns_joker_username=dict(type='str', required=False),
        dns_joker_password=dict(type='str', required=False, no_log=True),
        dns_kinghost_username=dict(type='str', required=False),
        dns_kinghost_password=dict(type='str', required=False, no_log=True),
        dns_knot_server=dict(type='str', required=False),
        dns_knot_key=dict(type='str', required=False, no_log=True),
        dns_limacity_apikey=dict(type='str', required=False, no_log=True),
        dns_linode_v4_key=dict(type='str', required=False, no_log=True),
        dns_loopia_api=dict(type='str', required=False),
        dns_loopia_user=dict(type='str', required=False),
        dns_loopia_password=dict(type='str', required=False, no_log=True),
        dns_lua_email=dict(type='str', required=False),
        dns_lua_key=dict(type='str', required=False, no_log=True),
        dns_miab_user=dict(type='str', required=False),
        dns_miab_password=dict(type='str', required=False, no_log=True),
        dns_miab_server=dict(type='str', required=False),
        dns_me_key=dict(type='str', required=False),
        dns_me_secret=dict(type='str', required=False, no_log=True),
        dns_mydnsjp_masterid=dict(type='str', required=False),
        dns_mydnsjp_password=dict(type='str', required=False, no_log=True),
        dns_mythic_beasts_key=dict(type='str', required=False),
        dns_mythic_beasts_secret=dict(type='str', required=False, no_log=True),
        dns_namecheap_user=dict(type='str', required=False),
        dns_namecheap_api=dict(type='str', required=False),
        dns_namecheap_sourceip=dict(type='str', required=False),
        dns_namecom_user=dict(type='str', required=False),
        dns_namecom_token=dict(type='str', required=False, no_log=True),
        dns_namesilo_key=dict(type='str', required=False, no_log=True),
        dns_nederhost_key=dict(type='str', required=False, no_log=True),
        dns_netcup_cid=dict(type='str', required=False),
        dns_netcup_key=dict(type='str', required=False),
        dns_netcup_pw=dict(type='str', required=False, no_log=True),
        dns_njalla_token=dict(type='str', required=False, no_log=True),
        dns_nsone_key=dict(type='str', required=False, no_log=True),
        dns_nsupdate_server=dict(type='str', required=False),
        dns_nsupdate_zone=dict(type='str', required=False),
        dns_nsupdate_key=dict(type='str', required=False, no_log=True),
        dns_oci_cli_user=dict(type='str', required=False),
        dns_oci_cli_tenancy=dict(type='str', required=False),
        dns_oci_cli_region=dict(type='str', required=False),
        dns_oci_cli_key=dict(type='str', required=False, no_log=True),
        dns_online_key=dict(type='str', required=False, no_log=True),
        dns_opnsense_host=dict(type='str', required=False, default='localhost'),
        dns_opnsense_port=dict(type='int', required=False, default=443),
        dns_opnsense_key=dict(type='str', required=False),
        dns_opnsense_token=dict(type='str', required=False, no_log=True),
        dns_opnsense_insecure=dict(type='bool', required=False, default=False),
        dns_ovh_app_key=dict(type='str', required=False),
        dns_ovh_app_secret=dict(type='str', required=False, no_log=True),
        dns_ovh_consumer_key=dict(type='str', required=False),
        dns_ovh_endpoint=dict(type='str', required=False),
        dns_pleskxml_user=dict(type='str', required=False),
        dns_pleskxml_pass=dict(type='str', required=False, no_log=True),
        dns_pleskxml_uri=dict(type='str', required=False),
        dns_pdns_url=dict(type='str', required=False),
        dns_pdns_serverid=dict(type='str', required=False),
        dns_pdns_token=dict(type='str', required=False, no_log=True),
        dns_porkbun_key=dict(type='str', required=False),
        dns_porkbun_secret=dict(type='str', required=False, no_log=True),
        dns_sl_key=dict(type='str', required=False, no_log=True),
        dns_selfhost_user=dict(type='str', required=False),
        dns_selfhost_password=dict(type='str', required=False, no_log=True),
        dns_selfhost_map=dict(type='str', required=False),
        dns_servercow_username=dict(type='str', required=False),
        dns_servercow_password=dict(type='str', required=False, no_log=True),
        dns_simply_api_key=dict(type='str', required=False, no_log=True),
        dns_simply_account_name=dict(type='str', required=False),
        dns_transip_username=dict(type='str', required=False),
        dns_transip_key=dict(type='str', required=False, no_log=True),
        dns_udr_user=dict(type='str', required=False),
        dns_udr_password=dict(type='str', required=False, no_log=True),
        dns_uno_key=dict(type='str', required=False, no_log=True),
        dns_uno_user=dict(type='str', required=False),
        dns_vscale_key=dict(type='str', required=False, no_log=True),
        dns_vultr_key=dict(type='str', required=False, no_log=True),
        dns_yandex_token=dict(type='str', required=False, no_log=True),
        dns_zilore_key=dict(type='str', required=False, no_log=True),
        dns_zm_key=dict(type='str', required=False, no_log=True),
        dns_gdnsdk_user=dict(type='str', required=False),
        dns_gdnsdk_password=dict(type='str', required=False, no_log=True),
        dns_acmedns_user=dict(type='str', required=False),
        dns_acmedns_password=dict(type='str', required=False, no_log=True),
        dns_acmedns_subdomain=dict(type='str', required=False),
        dns_acmedns_updateurl=dict(type='str', required=False),
        dns_acmedns_baseurl=dict(type='str', required=False),
        dns_acmeproxy_endpoint=dict(type='str', required=False),
        dns_acmeproxy_username=dict(type='str', required=False),
        dns_acmeproxy_password=dict(type='str', required=False, no_log=True),
        dns_variomedia_key=dict(type='str', required=False, no_log=True),
        dns_schlundtech_user=dict(type='str', required=False),
        dns_schlundtech_password=dict(type='str', required=False, no_log=True),
        dns_easydns_apitoken=dict(type='str', required=False),
        dns_easydns_apikey=dict(type='str', required=False, no_log=True),
        dns_euserv_user=dict(type='str', required=False),
        dns_euserv_password=dict(type='str', required=False, no_log=True),
        dns_leaseweb_key=dict(type='str', required=False, no_log=True),
        dns_cn_user=dict(type='str', required=False),
        dns_cn_password=dict(type='str', required=False, no_log=True),
        dns_arvan_token=dict(type='str', required=False, no_log=True),
        dns_artfiles_username=dict(type='str', required=False),
        dns_artfiles_password=dict(type='str', required=False, no_log=True),
        dns_hetzner_token=dict(type='str', required=False, no_log=True),
        dns_hexonet_login=dict(type='str', required=False),
        dns_hexonet_password=dict(type='str', required=False, no_log=True),
        dns_1984hosting_user=dict(type='str', required=False),
        dns_1984hosting_password=dict(type='str', required=False, no_log=True),
        dns_kas_login=dict(type='str', required=False),
        dns_kas_authdata=dict(type='str', required=False, no_log=True),
        dns_kas_authtype=dict(type='str', required=False, default='plain', choices=['plain', 'sha1']),
        dns_desec_token=dict(type='str', required=False, no_log=True),
        dns_desec_name=dict(type='str', required=False),
        dns_infomaniak_token=dict(type='str', required=False, no_log=True),
        dns_zone_username=dict(type='str', required=False),
        dns_zone_key=dict(type='str', required=False, no_log=True),
        dns_dynv6_token=dict(type='str', required=False, no_log=True),
        dns_cpanel_user=dict(type='str', required=False),
        dns_cpanel_token=dict(type='str', required=False, no_log=True),
        dns_cpanel_hostname=dict(type='str', required=False),
        dns_regru_username=dict(type='str', required=False),
        dns_regru_password=dict(type='str', required=False, no_log=True),
        dns_nic_username=dict(type='str', required=False),
        dns_nic_password=dict(type='str', required=False, no_log=True),
        dns_nic_client=dict(type='str', required=False),
        dns_nic_secret=dict(type='str', required=False, no_log=True),
        dns_world4you_username=dict(type='str', required=False),
        dns_world4you_password=dict(type='str', required=False, no_log=True),
        dns_aurora_key=dict(type='str', required=False),
        dns_aurora_secret=dict(type='str', required=False, no_log=True),
        dns_conoha_user=dict(type='str', required=False),
        dns_conoha_password=dict(type='str', required=False, no_log=True),
        dns_conoha_tenantid=dict(type='str', required=False),
        dns_conoha_idapi=dict(type='str', required=False),
        dns_constellix_key=dict(type='str', required=False),
        dns_constellix_secret=dict(type='str', required=False, no_log=True),
        dns_exoscale_key=dict(type='str', required=False),
        dns_exoscale_secret=dict(type='str', required=False, no_log=True),
        dns_internetbs_key=dict(type='str', required=False),
        dns_internetbs_password=dict(type='str', required=False, no_log=True),
        dns_pointhq_key=dict(type='str', required=False, no_log=True),
        dns_pointhq_email=dict(type='str', required=False),
        dns_rackspace_user=dict(type='str', required=False),
        dns_rackspace_key=dict(type='str', required=False, no_log=True),
        dns_rage4_token=dict(type='str', required=False, no_log=True),
        dns_rage4_user=dict(type='str', required=False),
        **RELOAD_MOD_ARG,
        **STATE_MOD_ARG,
        **OPN_MOD_ARGS,
    )

    result = dict(
        changed=False,
        diff={
            'before': {},
            'after': {},
        }
    )

    module = AnsibleModule(
        module_input=module_input,
        argument_spec=module_args,
        supports_check_mode=True,
    )

    module_wrapper(Validation(module=module, result=result))
    return result






if __name__ == '__main__':
    pass
