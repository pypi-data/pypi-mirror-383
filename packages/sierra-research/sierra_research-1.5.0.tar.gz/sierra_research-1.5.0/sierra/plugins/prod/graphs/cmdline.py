#
# Copyright 2025 John Harwell, All rights reserved.
#
# SPDX-License Identifier: MIT
#

# Core packages
import typing as tp
import argparse

# 3rd party packages

# Project packages
from sierra.core import types
from sierra.plugins import PluginCmdline


def build(
    parents: tp.List[argparse.ArgumentParser], stages: tp.List[int]
) -> PluginCmdline:
    """
    Get a cmdline parser supporting the ``prod.graphs`` product plugin.
    """
    cmdline = PluginCmdline(parents, stages)
    _build_multistage(cmdline)
    _build_stage4(cmdline)
    return cmdline


def _build_multistage(cmdline: PluginCmdline) -> PluginCmdline:
    # Plotting options
    cmdline.multistage.add_argument(
        "--plot-log-xscale",
        help="""
             Place the set of X values used to generate intra- and
             inter-experiment graphs into the logarithmic space.  Mainly useful
             when the batch criteria involves large system sizes, so that the
             plots are more readable.
             """
        + cmdline.graphs_applicable_doc(
            [":py:func:`Summary Line <sierra.core.graphs.summary_line.generate>`"]
        )
        + cmdline.stage_usage_doc([4, 5]),
        action="store_true",
    )

    cmdline.multistage.add_argument(
        "--plot-enumerated-xscale",
        help="""
             Instead of using the values generated by a given batch criteria for
             the X values, use an enumerated list[0, ..., len(X value) - 1].
             Mainly useful when the batch criteria involves large system sizes,
             so that the plots are more readable.
             """
        + cmdline.graphs_applicable_doc(
            [":py:func:`Summary Line <sierra.core.graphs.summary_line.generate>`"]
        )
        + cmdline.stage_usage_doc([4, 5]),
        action="store_true",
    )

    cmdline.multistage.add_argument(
        "--plot-log-yscale",
        help="""
             Place the set of Y values used to generate intra - and
             inter-experiment graphs into the logarithmic space.  Mainly useful
             when the batch criteria involves large system sizes, so that the
             plots are more readable.
             """
        + cmdline.graphs_applicable_doc(
            [
                ":py:func:`Summary Line <sierra.core.graphs.summary_line.generate>`",
                ":py:func:`Stacked Line <sierra.core.graphs.stacked_line.generate>`",
            ]
        )
        + cmdline.stage_usage_doc([4, 5]),
        action="store_true",
    )

    cmdline.multistage.add_argument(
        "--plot-primary-axis",
        type=int,
        help="""
             This option allows you to override the primary axis, which is
             normally is computed based on the batch criteria.

             For example, in a bivariate batch criteria composed of

                 - :ref:`plugins/engine/argos/bc/population-size` on the X axis
                   (rows)

                 - Another batch criteria which does not affect system size
                   (columns)

             Metrics will be calculated by `computing` across .csv rows and
             `projecting` down the columns by default, since system size will
             only vary within a row.  Passing a value of 1 to this option will
             override this calculation, which can be useful in bivariate batch
             criteria in which you are interested in the effect of the OTHER
             non-size criteria on various performance measures.

             0=criteria of interest varies across `rows`.

             1=criteria of interest varies across `columns`.

             This option only affects generating graphs from bivariate batch
             criteria.
             """
        + cmdline.graphs_applicable_doc(
            [
                ":py:func:`Heatmap <sierra.core.graphs.heatmap.generate>`",
                ":py:func:`Stacked Line <sierra.core.graphs.stacked_line.generate>`",
            ]
        )
        + cmdline.stage_usage_doc([4, 5]),
        default=None,
    )

    cmdline.multistage.add_argument(
        "--plot-large-text",
        help="""
             This option specifies that the title, X/Y axis labels/tick labels
             should be larger than the SIERRA default.  This is useful when
        generating graphs suitable for two column paper format where the
             default text size for rendered graphs will be too small to see
             easily.  The SIERRA defaults are generally fine for the one
             column/journal paper format.
             """
        + cmdline.stage_usage_doc([4, 5]),
        action="store_true",
    )

    cmdline.multistage.add_argument(
        "--plot-transpose-graphs",
        help="""
             Transpose the X, Y axes in generated graphs.  Useful as a general
             way to tweak graphs for best use of space within a paper.

             .. versionchanged:: 1.2.20

             Renamed from ``--transpose-graphs`` to make its relation to other
             plotting options clearer.
             """
        + cmdline.graphs_applicable_doc(
            [":py:func:`Heatmap <sierra.core.graphs.heatmap.generate>`"]
        )
        + cmdline.stage_usage_doc([4, 5]),
        action="store_true",
    )
    return cmdline


def _build_stage4(cmdline: PluginCmdline) -> PluginCmdline:
    cmdline.stage4.add_argument(
        "--graphs-backend",
        choices=["matplotlib", "bokeh"],
        help="""
             Specify the default backend to be used when generating plots.  Can
             be overriden on a per-graph basis.

                 - ``matplotlib`` - Use matplotlib to generate static PNG
                   images.

                 - ``bokeh`` - Use bokeh to generate stand-alone HTML files
                   containing interactive bokeh visualizations.  Files are
                   suitable for inclusion in static webpages, viewing in a
                   browser, etc.

             See :ref:`plugins/prod/graphs` for more information.
             """,
        default="matplotlib",
    )
    cmdline.stage4.add_argument(
        "--exp-n-datapoints-factor",
        type=float,
        help="""
             Specify an additional multiplicative factor for computing the # of
             datapoints captured duration an :term:`Experiment` to modify the
             duration * ticks_per_sec default.
             """,
        default=1.0,
    )
    cmdline.stage4.add_argument(
        "--exp-graphs",
        choices=["intra", "inter", "all", "none"],
        help="""
             Specify which types of graphs should be generated from experimental
             results:

                 - ``intra`` - Generate intra-experiment graphs from the results
                   of a single experiment within a batch, for each experiment in
                   the batch(this can take a long time with large batch
                   experiments).  If any intra-experiment models are defined and
                   enabled, those are run and the results placed on appropriate
                   graphs.

                 - ``inter`` - Generate inter-experiment graphs _across_ the
                   results of all experiments in a batch.  These are very fast
                   to generate, regardless of batch experiment size.  If any
                   inter-experiment models are defined and enabled, those are
                   run and the results placed on appropriate graphs.

                 - ``all`` - Generate all types of graphs.

                 - ``none`` - Skip graph generation.
             """
        + cmdline.stage_usage_doc([4]),
        default="all",
    )

    cmdline.stage4.add_argument(
        "--project-no-LN",
        help="""
             Specify that the intra-experiment and inter-experiment linegraphs
             defined in project YAML configuration should not be generated.
             Useful if you are working on something which results in the
             generation of other types of graphs, and the generation of those
             linegraphs is not currently needed only slows down your development
             cycle.

             Model linegraphs are still generated, if applicable.
             """,
        action="store_true",
    )

    cmdline.stage4.add_argument(
        "--project-no-HM",
        help="""
             Specify that the intra-experiment heatmaps defined in project YAML
             configuration should not be generated.  Useful if:

                 - You are working on something which results in the generation
                   of other types of graphs, and the generation of heatmaps only
                   slows down your development cycle.

                 - You are working on stage5 comparison graphs for bivariate
                   batch criteria, and re-generating many heatmaps during stage4
                   is taking too long.

             Model heatmaps are still generated, if applicable.

             .. versionadded:: 1.2.20
             """,
        action="store_true",
    )

    return cmdline


def to_cmdopts(args: argparse.Namespace) -> types.Cmdopts:
    return {
        # multistage
        "plot_log_xscale": args.plot_log_xscale,
        "plot_enumerated_xscale": args.plot_enumerated_xscale,
        "plot_log_yscale": args.plot_log_yscale,
        "plot_primary_axis": args.plot_primary_axis,
        "plot_large_text": args.plot_large_text,
        "plot_transpose_graphs": args.plot_transpose_graphs,
        # stage 4
        "graphs_backend": args.graphs_backend,
        "exp_n_datapoints_factor": args.exp_n_datapoints_factor,
        "exp_graphs": args.exp_graphs,
        "project_no_LN": args.project_no_LN,
        "project_no_HM": args.project_no_HM,
    }


def sphinx_cmdline_multistage():
    return build([], [3, 4, 5]).parser
