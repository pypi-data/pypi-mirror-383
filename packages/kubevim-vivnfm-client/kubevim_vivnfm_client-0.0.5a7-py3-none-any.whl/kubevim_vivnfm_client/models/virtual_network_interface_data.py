# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.metadata import Metadata
from kubevim_vivnfm_client.models.type_virtual_nic import TypeVirtualNic
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkInterfaceData(BaseModel):
    """
    A virtual network interface is a communication endpoint under a compute resource.
    """ # noqa: E501
    network_id: Optional[Identifier] = Field(default=None, alias="networkId")
    subnet_id: Optional[Identifier] = Field(default=None, alias="subnetId")
    network_port_id: Optional[Identifier] = Field(default=None, alias="networkPortId")
    type_virtual_nic: TypeVirtualNic = Field(alias="typeVirtualNic")
    type_configuration: Optional[List[StrictStr]] = Field(default=None, description="Extra configuration that the virtual network interface supports based on the type of virtual network interface. TODO: That interface might change.", alias="typeConfiguration")
    bandwidth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bandwidth of the virtual network interface (in Mbps).")
    acceleration_capability: Optional[List[StrictStr]] = Field(default=None, description="It specifies if the virtual network interface requires certain acceleration capabilities (e.g. RDMA, packet dispatch, TCP Chimney). The cardinality can be 0, if no particular acceleration capability is requested. TODO: That interface might change.", alias="accelerationCapability")
    metadata: Optional[Metadata] = None
    __properties: ClassVar[List[str]] = ["networkId", "subnetId", "networkPortId", "typeVirtualNic", "typeConfiguration", "bandwidth", "accelerationCapability", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkInterfaceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of network_id
        if self.network_id:
            _dict['networkId'] = self.network_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet_id
        if self.subnet_id:
            _dict['subnetId'] = self.subnet_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_port_id
        if self.network_port_id:
            _dict['networkPortId'] = self.network_port_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkInterfaceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "networkId": Identifier.from_dict(obj["networkId"]) if obj.get("networkId") is not None else None,
            "subnetId": Identifier.from_dict(obj["subnetId"]) if obj.get("subnetId") is not None else None,
            "networkPortId": Identifier.from_dict(obj["networkPortId"]) if obj.get("networkPortId") is not None else None,
            "typeVirtualNic": obj.get("typeVirtualNic") if obj.get("typeVirtualNic") is not None else TypeVirtualNic.BRIDGE,
            "typeConfiguration": obj.get("typeConfiguration"),
            "bandwidth": obj.get("bandwidth"),
            "accelerationCapability": obj.get("accelerationCapability"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


