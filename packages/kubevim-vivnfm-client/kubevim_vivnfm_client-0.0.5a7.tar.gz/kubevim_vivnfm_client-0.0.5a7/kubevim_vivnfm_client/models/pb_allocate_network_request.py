# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.metadata import Metadata
from kubevim_vivnfm_client.models.network_resource_type import NetworkResourceType
from kubevim_vivnfm_client.models.network_subnet_data import NetworkSubnetData
from kubevim_vivnfm_client.models.virtual_network_data import VirtualNetworkData
from typing import Optional, Set
from typing_extensions import Self

class PbAllocateNetworkRequest(BaseModel):
    """
    PbAllocateNetworkRequest
    """ # noqa: E501
    network_resource_name: Optional[StrictStr] = Field(default=None, description="Name provided by the consumer for the virtualised network resource to be allocated. It can be used for identifying resources from consumer side.", alias="networkResourceName")
    reservation_id: Optional[Identifier] = Field(default=None, alias="reservationId")
    network_resource_type: NetworkResourceType = Field(alias="networkResourceType")
    type_network_data: Optional[VirtualNetworkData] = Field(default=None, alias="typeNetworkData")
    type_subnet_data: Optional[NetworkSubnetData] = Field(default=None, alias="typeSubnetData")
    type_network_port_data: Optional[Dict[str, Any]] = Field(default=None, alias="typeNetworkPortData")
    type_trunk_data: Optional[Dict[str, Any]] = Field(default=None, alias="typeTrunkData")
    affinity_or_anti_affinity_constraints: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of elements with affinity or anti affinity (see clause 8.4.8.2) information of the virtualised network resource to be allocated. All the listed constraints shall be fulfilled for a successful operation.", alias="affinityOrAntiAffinityConstraints")
    location_constraints_for_network: Optional[StrictStr] = Field(default=None, description="If present, it defines location constraints for the resource(s) to be allocated, e.g. in what particular resource zone.", alias="locationConstraintsForNetwork")
    meta_data: Optional[Metadata] = Field(default=None, alias="metaData")
    resource_group_id: Optional[Identifier] = Field(default=None, alias="resourceGroupId")
    __properties: ClassVar[List[str]] = ["networkResourceName", "reservationId", "networkResourceType", "typeNetworkData", "typeSubnetData", "typeNetworkPortData", "typeTrunkData", "affinityOrAntiAffinityConstraints", "locationConstraintsForNetwork", "metaData", "resourceGroupId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PbAllocateNetworkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reservation_id
        if self.reservation_id:
            _dict['reservationId'] = self.reservation_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type_network_data
        if self.type_network_data:
            _dict['typeNetworkData'] = self.type_network_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type_subnet_data
        if self.type_subnet_data:
            _dict['typeSubnetData'] = self.type_subnet_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_data
        if self.meta_data:
            _dict['metaData'] = self.meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_group_id
        if self.resource_group_id:
            _dict['resourceGroupId'] = self.resource_group_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PbAllocateNetworkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "networkResourceName": obj.get("networkResourceName"),
            "reservationId": Identifier.from_dict(obj["reservationId"]) if obj.get("reservationId") is not None else None,
            "networkResourceType": obj.get("networkResourceType") if obj.get("networkResourceType") is not None else NetworkResourceType.NETWORK,
            "typeNetworkData": VirtualNetworkData.from_dict(obj["typeNetworkData"]) if obj.get("typeNetworkData") is not None else None,
            "typeSubnetData": NetworkSubnetData.from_dict(obj["typeSubnetData"]) if obj.get("typeSubnetData") is not None else None,
            "typeNetworkPortData": obj.get("typeNetworkPortData"),
            "typeTrunkData": obj.get("typeTrunkData"),
            "affinityOrAntiAffinityConstraints": obj.get("affinityOrAntiAffinityConstraints"),
            "locationConstraintsForNetwork": obj.get("locationConstraintsForNetwork"),
            "metaData": Metadata.from_dict(obj["metaData"]) if obj.get("metaData") is not None else None,
            "resourceGroupId": Identifier.from_dict(obj["resourceGroupId"]) if obj.get("resourceGroupId") is not None else None
        })
        return _obj


