# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CertificateData(BaseModel):
    """
    Note: Either set of \"privatekey\" and \"certificateFile\" or \"keystoreFile\" but not both shall be present. certificateFile is optional only if keystoreFile is present. certSubjectData is required only when a certificate needs to be generated or signed (i.e., not when a complete keystore is provided). certificateProfileName helps automate signing via predefined templates or CA policies.
    """ # noqa: E501
    private_key: Optional[List[StrictStr]] = Field(default=None, description="Private key paired with signed public key. VNFM shall generate both private key and public key and set this attribute.", alias="privateKey")
    certificate_file: Optional[List[StrictStr]] = Field(default=None, description="Signed certificate including public key and certificate chain.", alias="certificateFile")
    keystore_file: Optional[List[StrictStr]] = Field(default=None, description="Keystore which includes the private key, signed certificate and certificate chain, e.g. pkcs#12, pfx. Credentials to read this file shall be provided to the VNF instance by outbound.", alias="keystoreFile")
    cert_subject_data: Optional[List[StrictStr]] = Field(default=None, description="Subject to be signed.", alias="certSubjectData")
    certifiate_profile_name: Optional[List[StrictStr]] = Field(default=None, description="Name of certificate profile to be signed.", alias="certifiateProfileName")
    __properties: ClassVar[List[str]] = ["privateKey", "certificateFile", "keystoreFile", "certSubjectData", "certifiateProfileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "privateKey": obj.get("privateKey"),
            "certificateFile": obj.get("certificateFile"),
            "keystoreFile": obj.get("keystoreFile"),
            "certSubjectData": obj.get("certSubjectData"),
            "certifiateProfileName": obj.get("certifiateProfileName")
        })
        return _obj


