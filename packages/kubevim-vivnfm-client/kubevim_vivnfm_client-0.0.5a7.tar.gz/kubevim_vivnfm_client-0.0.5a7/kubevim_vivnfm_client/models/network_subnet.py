# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.ip_address import IPAddress
from kubevim_vivnfm_client.models.ip_address_pool import IPAddressPool
from kubevim_vivnfm_client.models.ip_subnet_cidr import IPSubnetCIDR
from kubevim_vivnfm_client.models.ip_version import IPVersion
from kubevim_vivnfm_client.models.metadata import Metadata
from typing import Optional, Set
from typing_extensions import Self

class NetworkSubnet(BaseModel):
    """
    The NetworkSubnet information element encapsulates information of an instantiated virtualised sub-network.
    """ # noqa: E501
    resource_id: Identifier = Field(alias="resourceId")
    network_id: Optional[Identifier] = Field(default=None, alias="networkId")
    ip_version: Optional[IPVersion] = Field(default=IPVersion.IPV4, alias="ipVersion")
    gateway_ip: IPAddress = Field(alias="gatewayIp")
    cidr: IPSubnetCIDR
    is_dhcp_enabled: StrictBool = Field(description="True when DHCP is enabled for this network/subnetwork, or false otherwise.", alias="isDhcpEnabled")
    address_pool: Optional[List[IPAddressPool]] = Field(default=None, description="Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the CIDR except for the address of the network/subnetwork gateway.", alias="addressPool")
    metadata: Optional[Metadata] = None
    __properties: ClassVar[List[str]] = ["resourceId", "networkId", "ipVersion", "gatewayIp", "cidr", "isDhcpEnabled", "addressPool", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkSubnet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_id
        if self.resource_id:
            _dict['resourceId'] = self.resource_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_id
        if self.network_id:
            _dict['networkId'] = self.network_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_ip
        if self.gateway_ip:
            _dict['gatewayIp'] = self.gateway_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cidr
        if self.cidr:
            _dict['cidr'] = self.cidr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in address_pool (list)
        _items = []
        if self.address_pool:
            for _item_address_pool in self.address_pool:
                if _item_address_pool:
                    _items.append(_item_address_pool.to_dict())
            _dict['addressPool'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkSubnet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resourceId": Identifier.from_dict(obj["resourceId"]) if obj.get("resourceId") is not None else None,
            "networkId": Identifier.from_dict(obj["networkId"]) if obj.get("networkId") is not None else None,
            "ipVersion": obj.get("ipVersion") if obj.get("ipVersion") is not None else IPVersion.IPV4,
            "gatewayIp": IPAddress.from_dict(obj["gatewayIp"]) if obj.get("gatewayIp") is not None else None,
            "cidr": IPSubnetCIDR.from_dict(obj["cidr"]) if obj.get("cidr") is not None else None,
            "isDhcpEnabled": obj.get("isDhcpEnabled"),
            "addressPool": [IPAddressPool.from_dict(_item) for _item in obj["addressPool"]] if obj.get("addressPool") is not None else None,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


