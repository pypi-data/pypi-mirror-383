# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.virtual_network import VirtualNetwork

class TestVirtualNetwork(unittest.TestCase):
    """VirtualNetwork unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualNetwork:
        """Test VirtualNetwork
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualNetwork`
        """
        model = VirtualNetwork()
        if include_optional:
            return VirtualNetwork(
                network_resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                network_resource_name = '',
                subnet_id = [
                    kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', )
                    ],
                network_port = [
                    kubevim_vivnfm_client.models.virtual_network_port.VirtualNetworkPort()
                    ],
                bandwidth = 1.337,
                network_type = 'OVERLAY',
                provider_network = '',
                segmentation_id = '',
                network_qo_s = [
                    kubevim_vivnfm_client.models.network_qo_s.NetworkQoS(
                        qos_name = '', 
                        qos_value = '', )
                    ],
                is_shared = True,
                zone_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                operational_state = 'ENABLED',
                metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                    fields = {
                        'key' : ''
                        }, ),
                connected_networks = [
                    kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', )
                    ]
            )
        else:
            return VirtualNetwork(
                network_resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                bandwidth = 1.337,
                network_type = 'OVERLAY',
                is_shared = True,
                operational_state = 'ENABLED',
        )
        """

    def testVirtualNetwork(self):
        """Test VirtualNetwork"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
