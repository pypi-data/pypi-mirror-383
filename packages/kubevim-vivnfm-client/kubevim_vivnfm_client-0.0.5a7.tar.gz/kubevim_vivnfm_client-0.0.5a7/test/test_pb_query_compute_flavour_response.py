# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.pb_query_compute_flavour_response import PbQueryComputeFlavourResponse

class TestPbQueryComputeFlavourResponse(unittest.TestCase):
    """PbQueryComputeFlavourResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PbQueryComputeFlavourResponse:
        """Test PbQueryComputeFlavourResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PbQueryComputeFlavourResponse`
        """
        model = PbQueryComputeFlavourResponse()
        if include_optional:
            return PbQueryComputeFlavourResponse(
                flavours = [
                    kubevim_vivnfm_client.models.virtual_compute_flavour.VirtualComputeFlavour(
                        flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        is_public = True, 
                        virtual_memory = kubevim_vivnfm_client.models.virtual_memory_data.VirtualMemoryData(
                            virtual_mem_size = 1.337, 
                            virtual_mem_oversubscription_policy = '', 
                            numa_enabled = True, ), 
                        virtual_cpu = kubevim_vivnfm_client.models.virtual_cpu_data.VirtualCpuData(
                            cpu_architecture = '', 
                            num_virtual_cpu = 56, 
                            cpu_clock = 1.337, 
                            virtual_cpu_oversubscription_policy = '', 
                            virtual_cpu_pinning = kubevim_vivnfm_client.models.virtual_cpu_data_virtual_cpu_pinning_data.VirtualCpuDataVirtualCpuPinningData(
                                virtual_cpu_pinning_policy = 'STATIC', 
                                virtual_cpu_pinning_rules = [
                                    kubevim_vivnfm_client.models.virtual_cpu_pinning_data_virtual_cpu_pinning_rule.VirtualCpuPinningDataVirtualCpuPinningRule(
                                        cores = 1.337, 
                                        sockets = 1.337, 
                                        threads = 1.337, )
                                    ], ), 
                            power_state_reqs = '', ), 
                        storage_attributes = [
                            kubevim_vivnfm_client.models.virtual_storage_data.VirtualStorageData(
                                type_of_storage = '', 
                                size_of_storage = 1.337, 
                                rdma_enabled = True, )
                            ], 
                        virtual_network_interface = [
                            kubevim_vivnfm_client.models.virtual_network_interface_data.VirtualNetworkInterfaceData(
                                network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                                    value = '', ), 
                                subnet_id = , 
                                network_port_id = , 
                                type_virtual_nic = 'BRIDGE', 
                                type_configuration = [
                                    ''
                                    ], 
                                bandwidth = 1.337, 
                                acceleration_capability = [
                                    ''
                                    ], 
                                metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                                    fields = {
                                        'key' : ''
                                        }, ), )
                            ], 
                        metadata = kubevim_vivnfm_client.models.metadata.Metadata(), )
                    ]
            )
        else:
            return PbQueryComputeFlavourResponse(
                flavours = [
                    kubevim_vivnfm_client.models.virtual_compute_flavour.VirtualComputeFlavour(
                        flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        is_public = True, 
                        virtual_memory = kubevim_vivnfm_client.models.virtual_memory_data.VirtualMemoryData(
                            virtual_mem_size = 1.337, 
                            virtual_mem_oversubscription_policy = '', 
                            numa_enabled = True, ), 
                        virtual_cpu = kubevim_vivnfm_client.models.virtual_cpu_data.VirtualCpuData(
                            cpu_architecture = '', 
                            num_virtual_cpu = 56, 
                            cpu_clock = 1.337, 
                            virtual_cpu_oversubscription_policy = '', 
                            virtual_cpu_pinning = kubevim_vivnfm_client.models.virtual_cpu_data_virtual_cpu_pinning_data.VirtualCpuDataVirtualCpuPinningData(
                                virtual_cpu_pinning_policy = 'STATIC', 
                                virtual_cpu_pinning_rules = [
                                    kubevim_vivnfm_client.models.virtual_cpu_pinning_data_virtual_cpu_pinning_rule.VirtualCpuPinningDataVirtualCpuPinningRule(
                                        cores = 1.337, 
                                        sockets = 1.337, 
                                        threads = 1.337, )
                                    ], ), 
                            power_state_reqs = '', ), 
                        storage_attributes = [
                            kubevim_vivnfm_client.models.virtual_storage_data.VirtualStorageData(
                                type_of_storage = '', 
                                size_of_storage = 1.337, 
                                rdma_enabled = True, )
                            ], 
                        virtual_network_interface = [
                            kubevim_vivnfm_client.models.virtual_network_interface_data.VirtualNetworkInterfaceData(
                                network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                                    value = '', ), 
                                subnet_id = , 
                                network_port_id = , 
                                type_virtual_nic = 'BRIDGE', 
                                type_configuration = [
                                    ''
                                    ], 
                                bandwidth = 1.337, 
                                acceleration_capability = [
                                    ''
                                    ], 
                                metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                                    fields = {
                                        'key' : ''
                                        }, ), )
                            ], 
                        metadata = kubevim_vivnfm_client.models.metadata.Metadata(), )
                    ],
        )
        """

    def testPbQueryComputeFlavourResponse(self):
        """Test PbQueryComputeFlavourResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
