# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.pb_allocate_network_response import PbAllocateNetworkResponse

class TestPbAllocateNetworkResponse(unittest.TestCase):
    """PbAllocateNetworkResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PbAllocateNetworkResponse:
        """Test PbAllocateNetworkResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PbAllocateNetworkResponse`
        """
        model = PbAllocateNetworkResponse()
        if include_optional:
            return PbAllocateNetworkResponse(
                network_data = kubevim_vivnfm_client.models.the_information_elements_in_this_group_encapsulates_information_of_an_instantiated_virtualised_network_resource/
in_the_nfvi,_a_virtual_network_transports_information_among_the_network_interfaces_of_vm_instances_and_physical_network_interfaces,_providing_the_necessary_connectiv.The information elements in this group encapsulates information of an instantiated virtualised network resource.
In the NFVI, a virtual network transports information among the network interfaces of VM instances and physical network interfaces, providing the necessary connectiv(
                    network_resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', ), 
                    network_resource_name = '', 
                    subnet_id = [
                        kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', )
                        ], 
                    network_port = [
                        kubevim_vivnfm_client.models.virtual_network_port.VirtualNetworkPort()
                        ], 
                    bandwidth = 1.337, 
                    network_type = 'OVERLAY', 
                    provider_network = '', 
                    segmentation_id = '', 
                    network_qo_s = [
                        kubevim_vivnfm_client.models.network_qo_s.NetworkQoS(
                            qos_name = '', 
                            qos_value = '', )
                        ], 
                    is_shared = True, 
                    zone_id = , 
                    operational_state = 'ENABLED', 
                    metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                        fields = {
                            'key' : ''
                            }, ), 
                    connected_networks = [
                        
                        ], ),
                subnet_data = kubevim_vivnfm_client.models.network_subnet.NetworkSubnet(
                    resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', ), 
                    network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', ), 
                    ip_version = 'IPV4', 
                    gateway_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                        ip = '', ), 
                    cidr = kubevim_vivnfm_client.models.ip_subnet_cidr.IPSubnetCIDR(
                        cidr = '', ), 
                    is_dhcp_enabled = True, 
                    address_pool = [
                        kubevim_vivnfm_client.models.todo:_might_be_few_ranges_specified_in_pool.TODO: Might be few ranges specified in pool(
                            start_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                                ip = '', ), 
                            end_ip = , )
                        ], 
                    metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                        fields = {
                            'key' : ''
                            }, ), ),
                network_port_data = kubevim_vivnfm_client.models.virtual_network_port.VirtualNetworkPort(),
                trunk_data = None,
                routing_resource_data = None
            )
        else:
            return PbAllocateNetworkResponse(
        )
        """

    def testPbAllocateNetworkResponse(self):
        """Test PbAllocateNetworkResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
