# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.pb_allocate_network_request import PbAllocateNetworkRequest

class TestPbAllocateNetworkRequest(unittest.TestCase):
    """PbAllocateNetworkRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PbAllocateNetworkRequest:
        """Test PbAllocateNetworkRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PbAllocateNetworkRequest`
        """
        model = PbAllocateNetworkRequest()
        if include_optional:
            return PbAllocateNetworkRequest(
                network_resource_name = '',
                reservation_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                network_resource_type = 'NETWORK',
                type_network_data = kubevim_vivnfm_client.models.virtual_network_data.VirtualNetworkData(
                    bandwidth = 1.337, 
                    network_type = 'OVERLAY', 
                    provider_network = '', 
                    segmentation_id = '', 
                    network_qo_s = [
                        kubevim_vivnfm_client.models.network_qo_s.NetworkQoS(
                            qos_name = '', 
                            qos_value = '', )
                        ], 
                    is_shared = True, 
                    layer3_attributes = [
                        kubevim_vivnfm_client.models.network_subnet_data.NetworkSubnetData(
                            network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                                value = '', ), 
                            ip_version = 'IPV4', 
                            gateway_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                                ip = '', ), 
                            cidr = kubevim_vivnfm_client.models.ip_subnet_cidr.IPSubnetCIDR(
                                cidr = '', ), 
                            is_dhcp_enabled = True, 
                            address_pool = kubevim_vivnfm_client.models.todo:_might_be_few_ranges_specified_in_pool.TODO: Might be few ranges specified in pool(
                                start_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                                    ip = '', ), 
                                end_ip = , ), 
                            metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                                fields = {
                                    'key' : ''
                                    }, ), )
                        ], 
                    metadata = kubevim_vivnfm_client.models.metadata.Metadata(), ),
                type_subnet_data = kubevim_vivnfm_client.models.network_subnet_data.NetworkSubnetData(
                    network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                        value = '', ), 
                    ip_version = 'IPV4', 
                    gateway_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                        ip = '', ), 
                    cidr = kubevim_vivnfm_client.models.ip_subnet_cidr.IPSubnetCIDR(
                        cidr = '', ), 
                    is_dhcp_enabled = True, 
                    address_pool = kubevim_vivnfm_client.models.todo:_might_be_few_ranges_specified_in_pool.TODO: Might be few ranges specified in pool(
                        start_ip = kubevim_vivnfm_client.models.ip_address.IPAddress(
                            ip = '', ), 
                        end_ip = , ), 
                    metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                        fields = {
                            'key' : ''
                            }, ), ),
                type_network_port_data = None,
                type_trunk_data = None,
                affinity_or_anti_affinity_constraints = [
                    kubevim_vivnfm_client.models.the_parameter_used_when_providing_the_list_of_elements_with_affinity_or_anti_affinity_information_of_the_virtualised_network_resource.The parameter used when providing the list of elements with affinity or anti affinity information of the virtualised network resource()
                    ],
                location_constraints_for_network = '',
                meta_data = kubevim_vivnfm_client.models.metadata.Metadata(
                    fields = {
                        'key' : ''
                        }, ),
                resource_group_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', )
            )
        else:
            return PbAllocateNetworkRequest(
                network_resource_type = 'NETWORK',
        )
        """

    def testPbAllocateNetworkRequest(self):
        """Test PbAllocateNetworkRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
