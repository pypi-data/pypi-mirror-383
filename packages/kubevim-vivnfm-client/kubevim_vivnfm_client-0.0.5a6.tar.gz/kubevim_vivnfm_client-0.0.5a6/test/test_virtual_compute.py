# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.virtual_compute import VirtualCompute

class TestVirtualCompute(unittest.TestCase):
    """VirtualCompute unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualCompute:
        """Test VirtualCompute
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualCompute`
        """
        model = VirtualCompute()
        if include_optional:
            return VirtualCompute(
                compute_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                compute_name = '',
                flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                virtual_cpu = None,
                virtual_memory = None,
                virtual_network_interface = [
                    kubevim_vivnfm_client.models.virtual_network_interface.VirtualNetworkInterface(
                        resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        owner_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        network_id = , 
                        subnet_id = , 
                        network_port_id = , 
                        ip_address = [
                            kubevim_vivnfm_client.models.ip_address.IPAddress(
                                ip = '', )
                            ], 
                        type_virtual_nic = 'BRIDGE', 
                        type_configuration = [
                            ''
                            ], 
                        mac_address = kubevim_vivnfm_client.models.mac_address.MacAddress(
                            mac = '', ), 
                        bandwidth = 1.337, 
                        acceleration_capability = [
                            ''
                            ], 
                        operational_state = 'ENABLED', 
                        metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                            fields = {
                                'key' : ''
                                }, ), )
                    ],
                virtual_disks = [
                    kubevim_vivnfm_client.models.virtual_storage.VirtualStorage()
                    ],
                vc_image_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                zone_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                host_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                operational_state = 'ENABLED',
                running_state = 'STARTING',
                metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                    fields = {
                        'key' : ''
                        }, )
            )
        else:
            return VirtualCompute(
                compute_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                virtual_cpu = None,
                virtual_memory = None,
                virtual_network_interface = [
                    kubevim_vivnfm_client.models.virtual_network_interface.VirtualNetworkInterface(
                        resource_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        owner_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        network_id = , 
                        subnet_id = , 
                        network_port_id = , 
                        ip_address = [
                            kubevim_vivnfm_client.models.ip_address.IPAddress(
                                ip = '', )
                            ], 
                        type_virtual_nic = 'BRIDGE', 
                        type_configuration = [
                            ''
                            ], 
                        mac_address = kubevim_vivnfm_client.models.mac_address.MacAddress(
                            mac = '', ), 
                        bandwidth = 1.337, 
                        acceleration_capability = [
                            ''
                            ], 
                        operational_state = 'ENABLED', 
                        metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                            fields = {
                                'key' : ''
                                }, ), )
                    ],
                virtual_disks = [
                    kubevim_vivnfm_client.models.virtual_storage.VirtualStorage()
                    ],
                host_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                operational_state = 'ENABLED',
                running_state = 'STARTING',
        )
        """

    def testVirtualCompute(self):
        """Test VirtualCompute"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
