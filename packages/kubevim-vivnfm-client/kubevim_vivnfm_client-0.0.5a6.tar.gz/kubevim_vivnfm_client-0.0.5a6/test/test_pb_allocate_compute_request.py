# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubevim_vivnfm_client.models.pb_allocate_compute_request import PbAllocateComputeRequest

class TestPbAllocateComputeRequest(unittest.TestCase):
    """PbAllocateComputeRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PbAllocateComputeRequest:
        """Test PbAllocateComputeRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PbAllocateComputeRequest`
        """
        model = PbAllocateComputeRequest()
        if include_optional:
            return PbAllocateComputeRequest(
                compute_name = '',
                reservation_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                affinity_or_anti_affinity_constraints = [
                    kubevim_vivnfm_client.models.the_parameter_used_when_giving_resource_affinity_or_anti_affinity_constraints_related_to_virtualised_compute_resources/
the_parameter_is_an_element_with_affinity_or_anti_affinity_information_of_the_virtualised_compute_resource_to_be_allocated_etsi_gs_nfv_ifa_005_and_etsi
gs_nfv_ifa_006.The parameter used when giving resource affinity or anti-affinity constraints related to virtualised compute resources.
The parameter is an element with affinity or anti affinity information of the virtualised compute resource to be allocated ETSI GS NFV-IFA 005 and ETSI
GS NFV-IFA 006(
                        type = 'AFFINITY', 
                        scope = 'NFVI_NODE', 
                        affinity_or_anti_affinity_resource_list = kubevim_vivnfm_client.models.affinity_or_anti_affinity_constraint_for_compute_affinity_or_anti_affinity_resource_list.AffinityOrAntiAffinityConstraintForComputeAffinityOrAntiAffinityResourceList(
                            resource_id = [
                                kubevim_vivnfm_client.models.identifier.Identifier(
                                    value = '', )
                                ], ), 
                        affinity_or_anti_affinity_resource_group_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), )
                    ],
                compute_flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                vc_image_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                interface_data = [
                    kubevim_vivnfm_client.models.virtual_network_interface_data.VirtualNetworkInterfaceData(
                        network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        subnet_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        network_port_id = , 
                        type_virtual_nic = 'BRIDGE', 
                        type_configuration = [
                            ''
                            ], 
                        bandwidth = 1.337, 
                        acceleration_capability = [
                            ''
                            ], 
                        metadata = kubevim_vivnfm_client.models.metadata.Metadata(
                            fields = {
                                'key' : ''
                                }, ), )
                    ],
                interface_ipam = [
                    kubevim_vivnfm_client.models.note:_that_is_out_of_the_etsi_gs_nfv_ifa_006_scope/
virtual_interface_data_renamed_to_the_virtual_network_interface_ipam.Note: That is out of the ETSI GS NFV-IFA 006 scope.
VirtualInterfaceData renamed to the VirtualNetworkInterfaceIPAM(
                        network_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        subnet_id = kubevim_vivnfm_client.models.identifier.Identifier(
                            value = '', ), 
                        ip_address = kubevim_vivnfm_client.models.ip_address.IPAddress(
                            ip = '', ), 
                        mac_address = kubevim_vivnfm_client.models.mac_address.MacAddress(
                            mac = '', ), )
                    ],
                meta_data = kubevim_vivnfm_client.models.metadata.Metadata(
                    fields = {
                        'key' : ''
                        }, ),
                resource_group_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
                user_data = kubevim_vivnfm_client.models.user_data.UserData(
                    content = '', 
                    method = 'CONFIG_DRIVE_PLAINTEXT', 
                    certificate_data = [
                        kubevim_vivnfm_client.models.certificate_data.CertificateData(
                            private_key = [
                                ''
                                ], 
                            certificate_file = [
                                ''
                                ], 
                            keystore_file = [
                                ''
                                ], 
                            cert_subject_data = [
                                ''
                                ], 
                            certifiate_profile_name = [
                                ''
                                ], )
                        ], )
            )
        else:
            return PbAllocateComputeRequest(
                compute_flavour_id = kubevim_vivnfm_client.models.identifier.Identifier(
                    value = '', ),
        )
        """

    def testPbAllocateComputeRequest(self):
        """Test PbAllocateComputeRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
