# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubevim_vivnfm_client.models.compute_running_state import ComputeRunningState
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.metadata import Metadata
from kubevim_vivnfm_client.models.operational_state import OperationalState
from kubevim_vivnfm_client.models.virtual_network_interface import VirtualNetworkInterface
from typing import Optional, Set
from typing_extensions import Self

class VirtualCompute(BaseModel):
    """
    VirtualCompute
    """ # noqa: E501
    compute_id: Identifier = Field(alias="computeId")
    compute_name: Optional[StrictStr] = Field(default=None, description="Name of the virtualised compute resource.", alias="computeName")
    flavour_id: Identifier = Field(alias="flavourId")
    virtual_cpu: Dict[str, Any] = Field(alias="virtualCpu")
    virtual_memory: Dict[str, Any] = Field(alias="virtualMemory")
    virtual_network_interface: List[VirtualNetworkInterface] = Field(description="Provides information of the instantiated virtual network interfaces of the compute resource.", alias="virtualNetworkInterface")
    virtual_disks: List[Dict[str, Any]] = Field(description="Provides information of the virtualised storage resources (volumes, ephemeral) that are attached to the compute resource.", alias="virtualDisks")
    vc_image_id: Optional[Identifier] = Field(default=None, alias="vcImageId")
    zone_id: Optional[Identifier] = Field(default=None, alias="zoneId")
    host_id: Identifier = Field(alias="hostId")
    operational_state: OperationalState = Field(alias="operationalState")
    running_state: ComputeRunningState = Field(alias="runningState")
    metadata: Optional[Metadata] = None
    __properties: ClassVar[List[str]] = ["computeId", "computeName", "flavourId", "virtualCpu", "virtualMemory", "virtualNetworkInterface", "virtualDisks", "vcImageId", "zoneId", "hostId", "operationalState", "runningState", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualCompute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_id
        if self.compute_id:
            _dict['computeId'] = self.compute_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flavour_id
        if self.flavour_id:
            _dict['flavourId'] = self.flavour_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_interface (list)
        _items = []
        if self.virtual_network_interface:
            for _item_virtual_network_interface in self.virtual_network_interface:
                if _item_virtual_network_interface:
                    _items.append(_item_virtual_network_interface.to_dict())
            _dict['virtualNetworkInterface'] = _items
        # override the default output from pydantic by calling `to_dict()` of vc_image_id
        if self.vc_image_id:
            _dict['vcImageId'] = self.vc_image_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zone_id
        if self.zone_id:
            _dict['zoneId'] = self.zone_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_id
        if self.host_id:
            _dict['hostId'] = self.host_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualCompute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeId": Identifier.from_dict(obj["computeId"]) if obj.get("computeId") is not None else None,
            "computeName": obj.get("computeName"),
            "flavourId": Identifier.from_dict(obj["flavourId"]) if obj.get("flavourId") is not None else None,
            "virtualCpu": obj.get("virtualCpu"),
            "virtualMemory": obj.get("virtualMemory"),
            "virtualNetworkInterface": [VirtualNetworkInterface.from_dict(_item) for _item in obj["virtualNetworkInterface"]] if obj.get("virtualNetworkInterface") is not None else None,
            "virtualDisks": obj.get("virtualDisks"),
            "vcImageId": Identifier.from_dict(obj["vcImageId"]) if obj.get("vcImageId") is not None else None,
            "zoneId": Identifier.from_dict(obj["zoneId"]) if obj.get("zoneId") is not None else None,
            "hostId": Identifier.from_dict(obj["hostId"]) if obj.get("hostId") is not None else None,
            "operationalState": obj.get("operationalState") if obj.get("operationalState") is not None else OperationalState.ENABLED,
            "runningState": obj.get("runningState") if obj.get("runningState") is not None else ComputeRunningState.STARTING,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


