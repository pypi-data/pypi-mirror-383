# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.metadata import Metadata
from kubevim_vivnfm_client.models.resource_quantity import ResourceQuantity
from typing import Optional, Set
from typing_extensions import Self

class SoftwareImageInformation(BaseModel):
    """
    SoftwareImageInformation
    """ # noqa: E501
    software_image_id: Identifier = Field(alias="softwareImageId")
    name: StrictStr = Field(description="Name of this software image.")
    provider: Optional[StrictStr] = Field(default=None, description="Provider of this software image.")
    version: Optional[StrictStr] = Field(default=None, description="Version of the software image file.")
    checksum: Optional[StrictStr] = Field(default=None, description="Checksum of the software image file.")
    container_format: Optional[StrictStr] = Field(default=None, description="Container format indicates whether the software image is in a file format that also contains metadata about the actual software.", alias="containerFormat")
    disk_format: Optional[StrictStr] = Field(default=None, description="Disk format of a software image is the format of the underlying disk image.", alias="diskFormat")
    created_at: datetime = Field(description="Time this software image was created.", alias="createdAt")
    updated_at: datetime = Field(description="Time this software image was last updated.", alias="updatedAt")
    min_disk: Optional[ResourceQuantity] = Field(default=None, alias="minDisk")
    min_ram: Optional[ResourceQuantity] = Field(default=None, alias="minRam")
    size: ResourceQuantity
    status: StrictStr
    metadata: Optional[Metadata] = None
    __properties: ClassVar[List[str]] = ["softwareImageId", "name", "provider", "version", "checksum", "containerFormat", "diskFormat", "createdAt", "updatedAt", "minDisk", "minRam", "size", "status", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareImageInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of software_image_id
        if self.software_image_id:
            _dict['softwareImageId'] = self.software_image_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_disk
        if self.min_disk:
            _dict['minDisk'] = self.min_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_ram
        if self.min_ram:
            _dict['minRam'] = self.min_ram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareImageInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "softwareImageId": Identifier.from_dict(obj["softwareImageId"]) if obj.get("softwareImageId") is not None else None,
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "version": obj.get("version"),
            "checksum": obj.get("checksum"),
            "containerFormat": obj.get("containerFormat"),
            "diskFormat": obj.get("diskFormat"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "minDisk": ResourceQuantity.from_dict(obj["minDisk"]) if obj.get("minDisk") is not None else None,
            "minRam": ResourceQuantity.from_dict(obj["minRam"]) if obj.get("minRam") is not None else None,
            "size": ResourceQuantity.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "status": obj.get("status"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


