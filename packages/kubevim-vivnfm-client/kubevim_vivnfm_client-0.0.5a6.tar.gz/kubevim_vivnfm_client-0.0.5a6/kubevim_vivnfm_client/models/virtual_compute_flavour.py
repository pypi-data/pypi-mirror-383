# coding: utf-8

"""
    vivnfm/vi-vnfm.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from kubevim_vivnfm_client.models.identifier import Identifier
from kubevim_vivnfm_client.models.metadata import Metadata
from kubevim_vivnfm_client.models.virtual_cpu_data import VirtualCpuData
from kubevim_vivnfm_client.models.virtual_memory_data import VirtualMemoryData
from kubevim_vivnfm_client.models.virtual_network_interface_data import VirtualNetworkInterfaceData
from kubevim_vivnfm_client.models.virtual_storage_data import VirtualStorageData
from typing import Optional, Set
from typing_extensions import Self

class VirtualComputeFlavour(BaseModel):
    """
    The VirtualComputeFlavour information element encapsulates information for compute flavours. A compute flavour includes information about number of virtual CPUs, size of virtual memory, size of virtual storage, and virtual network interfaces.
    """ # noqa: E501
    flavour_id: Optional[Identifier] = Field(default=None, alias="flavourId")
    is_public: Optional[StrictBool] = Field(default=True, description="Scope of flavour accessibility. It indicates if the compute flavour is accessible and shared across clients. Default value is True (if not specified), which means public. False means private.  accelerationCapability = 3;", alias="isPublic")
    virtual_memory: VirtualMemoryData = Field(alias="virtualMemory")
    virtual_cpu: VirtualCpuData = Field(alias="virtualCpu")
    storage_attributes: Optional[List[VirtualStorageData]] = Field(default=None, description="Contains information about the size of virtualised storage resource (e.g. size of volume, in GB), the type of storage (e.g. volume, object), and support for RDMA.", alias="storageAttributes")
    virtual_network_interface: Optional[List[VirtualNetworkInterfaceData]] = Field(default=None, alias="virtualNetworkInterface")
    metadata: Optional[Metadata] = None
    __properties: ClassVar[List[str]] = ["flavourId", "isPublic", "virtualMemory", "virtualCpu", "storageAttributes", "virtualNetworkInterface", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualComputeFlavour from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flavour_id
        if self.flavour_id:
            _dict['flavourId'] = self.flavour_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_memory
        if self.virtual_memory:
            _dict['virtualMemory'] = self.virtual_memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_cpu
        if self.virtual_cpu:
            _dict['virtualCpu'] = self.virtual_cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in storage_attributes (list)
        _items = []
        if self.storage_attributes:
            for _item_storage_attributes in self.storage_attributes:
                if _item_storage_attributes:
                    _items.append(_item_storage_attributes.to_dict())
            _dict['storageAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_interface (list)
        _items = []
        if self.virtual_network_interface:
            for _item_virtual_network_interface in self.virtual_network_interface:
                if _item_virtual_network_interface:
                    _items.append(_item_virtual_network_interface.to_dict())
            _dict['virtualNetworkInterface'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualComputeFlavour from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flavourId": Identifier.from_dict(obj["flavourId"]) if obj.get("flavourId") is not None else None,
            "isPublic": obj.get("isPublic") if obj.get("isPublic") is not None else True,
            "virtualMemory": VirtualMemoryData.from_dict(obj["virtualMemory"]) if obj.get("virtualMemory") is not None else None,
            "virtualCpu": VirtualCpuData.from_dict(obj["virtualCpu"]) if obj.get("virtualCpu") is not None else None,
            "storageAttributes": [VirtualStorageData.from_dict(_item) for _item in obj["storageAttributes"]] if obj.get("storageAttributes") is not None else None,
            "virtualNetworkInterface": [VirtualNetworkInterfaceData.from_dict(_item) for _item in obj["virtualNetworkInterface"]] if obj.get("virtualNetworkInterface") is not None else None,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


