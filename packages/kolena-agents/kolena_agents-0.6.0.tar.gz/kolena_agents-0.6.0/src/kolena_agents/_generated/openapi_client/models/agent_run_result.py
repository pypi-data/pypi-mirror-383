# type: ignore
# coding: utf-8

"""
    kolena

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kolena_agents._generated.openapi_client.models.agent_credit_usage import AgentCreditUsage
from kolena_agents._generated.openapi_client.models.agent_run_result_metadata import AgentRunResultMetadata
from kolena_agents._generated.openapi_client.models.agent_run_status import AgentRunStatus
from kolena_agents._generated.openapi_client.models.cell_result_user_input import CellResultUserInput
from typing import Optional, Set
from typing_extensions import Self

class AgentRunResult(BaseModel):
    """
    AgentRunResult
    """ # noqa: E501
    status: AgentRunStatus = Field(description="The status of this Prompt, either `success` or `failed`. Prompts that are `running` are omitted from the `data` object.")
    value: Optional[Any]
    error: Optional[StrictStr]
    metadata: Optional[AgentRunResultMetadata]
    user_input: Optional[CellResultUserInput] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    usage: Optional[AgentCreditUsage] = None
    __properties: ClassVar[List[str]] = ["status", "value", "error", "metadata", "user_input", "start_time", "end_time", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentRunResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_input
        if self.user_input:
            _dict['user_input'] = self.user_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if user_input (nullable) is None
        # and model_fields_set contains the field
        if self.user_input is None and "user_input" in self.model_fields_set:
            _dict['user_input'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict['usage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentRunResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "value": obj.get("value"),
            "error": obj.get("error"),
            "metadata": AgentRunResultMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "user_input": CellResultUserInput.from_dict(obj["user_input"]) if obj.get("user_input") is not None else None,
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "usage": AgentCreditUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj


