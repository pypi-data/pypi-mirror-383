# type: ignore
# coding: utf-8

"""
    kolena

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kolena_agents._generated.openapi_client.models.agent_run_result_metadata_citation import AgentRunResultMetadataCitation
from kolena_agents._generated.openapi_client.models.agent_run_result_metadata_url_citation import AgentRunResultMetadataUrlCitation
from typing import Optional, Set
from typing_extensions import Self

class AgentRunResultMetadata(BaseModel):
    """
    AgentRunResultMetadata
    """ # noqa: E501
    reasoning: Optional[StrictStr]
    confidence: Optional[Union[StrictFloat, StrictInt]]
    citations: List[AgentRunResultMetadataCitation] = Field(description="A list of citations, including documents and page numbers, used to produce the output `value`.")
    url_citations: Optional[List[AgentRunResultMetadataUrlCitation]] = Field(default=None, description="A list of URL citations, including web pages and resources, used to produce the output `value`.")
    __properties: ClassVar[List[str]] = ["reasoning", "confidence", "citations", "url_citations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentRunResultMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in citations (list)
        _items = []
        if self.citations:
            for _item_citations in self.citations:
                if _item_citations:
                    _items.append(_item_citations.to_dict())
            _dict['citations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in url_citations (list)
        _items = []
        if self.url_citations:
            for _item_url_citations in self.url_citations:
                if _item_url_citations:
                    _items.append(_item_url_citations.to_dict())
            _dict['url_citations'] = _items
        # set to None if reasoning (nullable) is None
        # and model_fields_set contains the field
        if self.reasoning is None and "reasoning" in self.model_fields_set:
            _dict['reasoning'] = None

        # set to None if confidence (nullable) is None
        # and model_fields_set contains the field
        if self.confidence is None and "confidence" in self.model_fields_set:
            _dict['confidence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentRunResultMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reasoning": obj.get("reasoning"),
            "confidence": obj.get("confidence"),
            "citations": [AgentRunResultMetadataCitation.from_dict(_item) for _item in obj["citations"]] if obj.get("citations") is not None else None,
            "url_citations": [AgentRunResultMetadataUrlCitation.from_dict(_item) for _item in obj["url_citations"]] if obj.get("url_citations") is not None else None
        })
        return _obj


