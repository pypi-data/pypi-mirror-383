# type: ignore
# coding: utf-8

"""
    kolena

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kolena_agents._generated.openapi_client.models.agent_credit_usage import AgentCreditUsage
from kolena_agents._generated.openapi_client.models.agent_run_result import AgentRunResult
from kolena_agents._generated.openapi_client.models.agent_run_status import AgentRunStatus
from typing import Optional, Set
from typing_extensions import Self

class AgentRun(BaseModel):
    """
    AgentRun
    """ # noqa: E501
    agent_id: StrictInt = Field(description="The ID of the Agent being run.")
    run_id: StrictInt = Field(description="The ID of this Agent Run.")
    user_defined_id: Optional[StrictStr]
    created: datetime = Field(description="When this Run was created, formatted as an ISO 8601 timestamp (e.g. `2025-10-08T20:14:29.472247+00:00`)")
    updated: datetime = Field(description="When this Run was last updated, formatted as an ISO 8601 timestamp (e.g. `2025-10-08T20:14:29.472247+00:00`)")
    files: List[StrictStr] = Field(description="List of filenames included in this Run.")
    run_url: StrictStr = Field(description="Link to this Run on [agents.kolena.com](https://agents.kolena.com/).")
    order: List[StrictStr] = Field(description="The order of Prompts in this Agent. When results are ready for a Prompt, it will be included in the `data` object.")
    data: Dict[str, AgentRunResult] = Field(description="The output data from completed Prompts, keyed on Prompt name.  Once a Prompt is completed (status `success` or `failed`), it will be included in this object. Any `running` prompts are omitted.")
    status: AgentRunStatus = Field(description="The status of this Run.")
    usage: Optional[AgentCreditUsage] = None
    __properties: ClassVar[List[str]] = ["agent_id", "run_id", "user_defined_id", "created", "updated", "files", "run_url", "order", "data", "status", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in data (dict)
        _field_dict = {}
        if self.data:
            for _key_data in self.data:
                if self.data[_key_data]:
                    _field_dict[_key_data] = self.data[_key_data].to_dict()
            _dict['data'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # set to None if user_defined_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_defined_id is None and "user_defined_id" in self.model_fields_set:
            _dict['user_defined_id'] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict['usage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_id": obj.get("agent_id"),
            "run_id": obj.get("run_id"),
            "user_defined_id": obj.get("user_defined_id"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "files": obj.get("files"),
            "run_url": obj.get("run_url"),
            "order": obj.get("order"),
            "data": dict(
                (_k, AgentRunResult.from_dict(_v))
                for _k, _v in obj["data"].items()
            )
            if obj.get("data") is not None
            else None,
            "status": obj.get("status"),
            "usage": AgentCreditUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj


