name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'printerm/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'Dockerfile'
      - '.github/workflows/build-docker.yml'
  workflow_call:
    inputs:
      release_version:
        description: 'Release version for tagging'
        required: false
        type: string
      is_release:
        description: 'Whether this is a release build'
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use (e.g., test, v1.0.0, latest)'
        required: true
        default: 'test'
        type: string
      push_to_registry:
        description: 'Push to registry'
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: an0da/printerm

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.push_to_registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For main branch pushes - tag as 'main'  
            type=raw,value=main,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            # For releases - version tag and latest
            type=raw,value=${{ inputs.release_version }},enable=${{ inputs.is_release && inputs.release_version != '' }}
            type=raw,value=latest,enable=${{ inputs.is_release }}
            # For manual dispatch - use custom tag
            type=raw,value=${{ inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Printerm
            org.opencontainers.image.description=A printing terminal application
            org.opencontainers.image.vendor=an0da

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'workflow_dispatch' || inputs.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.push_to_registry }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event_name == 'workflow_dispatch' && inputs.tag || (inputs.is_release && 'latest' || 'main') }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name != 'workflow_dispatch' || inputs.push_to_registry)
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Logout from GitHub Container Registry
        if: always() && (github.event_name != 'workflow_dispatch' || inputs.push_to_registry)
        run: docker logout ${{ env.REGISTRY }}
