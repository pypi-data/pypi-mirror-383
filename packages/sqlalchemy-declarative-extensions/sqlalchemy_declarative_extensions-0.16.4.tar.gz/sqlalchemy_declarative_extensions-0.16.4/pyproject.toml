[project]
name = "sqlalchemy-declarative-extensions"
version = "0.16.4"
authors = [
    {name = "Dan Cardin", email = "ddcardin@gmail.com"},
]
description = "Library to declare additional kinds of objects not natively supported by SQLAlchemy/Alembic."
license = {file = "LICENSE"}
readme = 'README.md'

keywords = [
  "sqlalchemy",
  "alembic",
  "declarative",

  "mysql",
  "postgresql",
  "snowflake",
  "sqlite",

  "schema",
  "role",
  "grant",
  "view",
  "function",
  "trigger",
]
classifiers = [
  "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.8,<4"

dependencies = [
  "sqlalchemy >= 1.3",
]

[project.urls]
documentation = "https://sqlalchemy-declarative-extensions.readthedocs.io/en/latest/"
homepage = "https://sqlalchemy-declarative-extensions.readthedocs.io/en/latest/"
repository = "https://github.com/dancardin/sqlalchemy-declarative-extensions"
changelog = "https://github.com/DanCardin/sqlalchemy-declarative-extensions/blob/main/CHANGELOG.md"

[project.optional-dependencies]
alembic = ["alembic >= 1.0"]
parse = ["sqlglot"]

[tool.uv]
environments = ["python_version < '3.9'", "python_version >= '3.9' and python_version < '4'"]
dev-dependencies = [
  "alembic-utils >= 0.8.1",
  "coverage >= 5",
  "mypy == 1.8.0",
  "pymysql[rsa]",
  "pytest >= 7",
  "pytest-alembic",
  "pytest-mock-resources[docker] >= 2.6.13",
  "pytest-xdist",
  "ruff >= 0.5.0",
  "sqlalchemy[mypy] >= 1.4",
  "psycopg",
  "psycopg2-binary",

  # snowflake
  "fakesnow >= 0.9.21; python_version >= '3.9'",
  "snowflake-connector-python >= 3.7; python_version >= '3.9'",
  "snowflake-sqlalchemy >= 1.6.0; python_version >= '3.9'",
]

[tool.mypy]
strict_optional = true
ignore_missing_imports = true
warn_unused_ignores = false
implicit_reexport = true
incremental = true
plugins = ['sqlalchemy.ext.mypy.plugin']
exclude = "tests/examples"

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.run]
include = ["src/*"]
branch = true
parallel = true

[tool.pytest.ini_options]
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS"
addopts = "--doctest-modules -vv --ff --strict-markers"
norecursedirs = ".* build dist *.egg bin tests/examples --junitxml=junit.xml"
filterwarnings = [
  'error',
  'ignore:invalid escape sequence.*',
  'ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning',
  'ignore:_SixMetaPathImporter.find_spec.*:ImportWarning',
  'ignore:`ignore_views` is deprecated, use `ignore` instead:DeprecationWarning',
  'ignore:The GenericFunction.*:sqlalchemy.exc.SAWarning',
  'ignore:Did not recognize type.*:sqlalchemy.exc.SAWarning',
]
pytester_example_dir = "tests/examples"
markers = [
    'grant',
    'schema',
    'role',
    'row',
    'alembic',
]
pmr_multiprocess_safe = true
log_level = 'WARNING'
log_cli_level = 'WARNING'

[tool.ruff]
src = ["src", "tests"]
target-version = "py37"

[tool.ruff.lint]
select = ["C", "D", "E", "F", "I", "N", "Q", "RET", "RUF", "S", "T", "UP", "YTT"]
ignore = ["C901", "E501", "S101"]
extend-select = ["D"]
extend-ignore = [
    "D1",

    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]

[tool.ruff.lint.isort]
known-first-party = ["sqlalchemy_declarative_extensions", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "S", 'RUF012']

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
