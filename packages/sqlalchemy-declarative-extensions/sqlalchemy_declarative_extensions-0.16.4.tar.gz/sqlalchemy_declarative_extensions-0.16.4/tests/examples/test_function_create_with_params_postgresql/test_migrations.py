import pytest
from pytest_alembic import (
    MigrationContext,
    tests,  # Import the tests module
)
from pytest_mock_resources import PostgresConfig, create_postgres_fixture
from sqlalchemy import text

# Use the postgres fixture provided by pytest-mock-resources
alembic_engine = create_postgres_fixture(scope="function", engine_kwargs={"echo": True})


@pytest.fixture(scope="session")
def pmr_postgres_config():
    """Override the default config to avoid port conflicts."""
    return PostgresConfig(image="postgres:13", port=None, ci_port=None)


def test_apply_autogenerated_revision(alembic_runner: MigrationContext, alembic_engine):
    """Check that autogenerate detects the new function and the migration runs."""
    # Generate the revision based on the models
    alembic_runner.generate_revision(
        autogenerate=True,
        prevent_file_generation=False,
        message="Add add_stable function",
    )

    # Apply the generated migration
    alembic_runner.migrate_up_one()

    # Verify the function exists and works
    with alembic_engine.connect() as conn:
        result = conn.execute(text("select add_stable(5)")).scalar()
        assert result == 6

        # Also verify the multi-param function
        # Create some dummy data first
        conn.execute(text("INSERT INTO dummy_table (id) VALUES (1), (3), (5)"))
        conn.commit()

        multi_result = conn.execute(
            text("select * from get_users_by_group(ARRAY[1, 5, 7])")
        ).fetchall()

        assert len(multi_result) == 2
        assert {row.id for row in multi_result} == {1, 5}
        assert {row.name for row in multi_result} == {"1", "5"}

    # Verify that a subsequent autogenerate is empty using pytest-alembic helper
    tests.test_model_definitions_match_ddl(alembic_runner)

    # Apply the downgrade
    alembic_runner.migrate_down_one()

    # Verify functions are gone by querying pg_proc
    with alembic_engine.connect() as conn:
        # We need the schema OID first
        schema_oid = conn.execute(
            text("SELECT oid FROM pg_namespace WHERE nspname = 'public'")
        ).scalar()

        count = conn.execute(
            text(
                "SELECT count(*) FROM pg_proc "
                "WHERE pronamespace = :schema_oid AND proname IN ('add_stable', 'get_users_by_group')"
            ),
            {"schema_oid": schema_oid},
        ).scalar()
        assert count == 0
