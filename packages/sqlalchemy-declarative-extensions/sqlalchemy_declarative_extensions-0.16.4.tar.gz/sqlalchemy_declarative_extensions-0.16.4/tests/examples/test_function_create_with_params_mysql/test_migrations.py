import pytest
from pytest_alembic import (
    MigrationContext,
    tests,  # Import the tests module
)
from pytest_mock_resources import MysqlConfig, create_mysql_fixture
from sqlalchemy import text

# Use the mysql fixture provided by pytest-mock-resources
alembic_engine = create_mysql_fixture(scope="function", engine_kwargs={"echo": True})


@pytest.fixture(scope="session")
def pmr_mysql_config():
    """Override the default config."""
    return MysqlConfig(image="mysql:8", port=None, ci_port=None)


def test_apply_autogenerated_revision(alembic_runner: MigrationContext, alembic_engine):
    """Check that autogenerate detects the new function and the migration runs."""
    # Required for MySQL function creation without SUPER privilege
    with alembic_engine.connect() as conn:
        conn.execute(text("SET GLOBAL log_bin_trust_function_creators = ON;"))
        conn.commit()  # Commit the global setting change if needed

    # Generate the revision based on the models
    alembic_runner.generate_revision(
        autogenerate=True, prevent_file_generation=False, message="Add MySQL functions"
    )

    # Apply the generated migration
    alembic_runner.migrate_up_one()

    # Verify the function exists and works
    with alembic_engine.connect() as conn:
        result = conn.execute(text("select add_deterministic(5)")).scalar()
        assert result == 6

        # Also verify the multi-param function
        multi_result = conn.execute(text("select add_two_numbers(10, 20)")).scalar()
        assert multi_result == 30

        # Verify the complex function
        complex_result = conn.execute(
            text("SELECT complex_processor(99, 'Complex')")
        ).scalar()
        assert complex_result == "Complex: 99"

    # Verify that a subsequent autogenerate is empty using pytest-alembic helper
    tests.test_model_definitions_match_ddl(alembic_runner)

    # Apply the downgrade
    alembic_runner.migrate_down_one()

    # Verify functions are gone by querying information_schema.ROUTINES
    with alembic_engine.connect() as conn:
        db_name = conn.execute(text("SELECT DATABASE()")).scalar()
        count = conn.execute(
            text(
                "SELECT count(*) FROM information_schema.ROUTINES "
                "WHERE ROUTINE_SCHEMA = :db_name "
                "AND ROUTINE_TYPE = 'FUNCTION' "
                "AND ROUTINE_NAME IN ('add_deterministic', 'add_two_numbers', 'complex_processor')"
            ),
            {"db_name": db_name},
        ).scalar()
        assert count == 0
