{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Dana",
  "scopeName": "source.dana",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#docstrings"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#scopes"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#types"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.dana",
          "begin": "#",
          "end": "$",
          "patterns": [
            {
              "include": "#markdown-inline"
            }
          ]
        }
      ]
    },
    "docstrings": {
      "patterns": [
        {
          "name": "string.quoted.docstring.multi.dana",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "#markdown-inline"
            },
            {
              "include": "#markdown-block"
            }
          ]
        },
        {
          "name": "string.quoted.docstring.multi.dana",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "include": "#markdown-inline"
            },
            {
              "include": "#markdown-block"
            }
          ]
        }
      ]
    },
    "markdown-inline": {
      "patterns": [
        {
          "name": "markup.bold.markdown",
          "match": "\\*\\*[^\\*\\n]+\\*\\*|__[^_\\n]+__"
        },
        {
          "name": "markup.italic.markdown",
          "match": "\\*[^\\*\\n]+\\*|_[^_\\n]+_"
        },
        {
          "name": "markup.inline.raw.string.markdown",
          "match": "`[^`\\n]+`"
        },
        {
          "name": "markup.underline.link.markdown",
          "match": "\\[([^\\]]+)\\]\\(([^\\)]+)\\)"
        }
      ]
    },
    "markdown-block": {
      "patterns": [
        {
          "name": "markup.heading.markdown",
          "match": "^\\s*(#{1,6})\\s+(.+)$",
          "captures": {
            "1": { "name": "punctuation.definition.heading.markdown" },
            "2": { "name": "entity.name.section.markdown" }
          }
        },
        {
          "name": "markup.list.unnumbered.markdown",
          "match": "^\\s*[-*+]\\s+(.+)$",
          "captures": {
            "1": { "name": "meta.paragraph.markdown" }
          }
        },
        {
          "name": "markup.list.numbered.markdown",
          "match": "^\\s*\\d+\\.\\s+(.+)$",
          "captures": {
            "1": { "name": "meta.paragraph.markdown" }
          }
        },
        {
          "name": "markup.quote.markdown",
          "begin": "^\\s*>\\s+",
          "end": "$",
          "patterns": [
            {
              "include": "#markdown-inline"
            }
          ]
        },
        {
          "name": "markup.fenced_code.block.markdown",
          "begin": "^\\s*(`{3,}|~{3,})\\s*(\\w+)?$",
          "end": "^\\s*\\1\\s*$",
          "captures": {
            "2": { "name": "entity.name.type.markdown" }
          },
          "contentName": "meta.embedded.block.$2"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "meta.class.dana",
          "match": "\\b(struct|interface|enum)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type.class.dana" },
            "2": { "name": "entity.name.type.class.dana" }
          }
        },
        {
          "name": "meta.function.dana",
          "match": "\\b(def)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "storage.type.function.dana" },
            "2": { "name": "entity.name.function.dana" }
          }
        },
        {
          "name": "meta.import.dana",
          "match": "\\b(from|import)\\b\\s*([A-Za-z_][A-Za-z0-9_\\.]*)(?:\\s*(as)\\s*([A-Za-z_][A-Za-z0-9_]*))?",
          "captures": {
            "1": { "name": "keyword.control.import.dana" },
            "2": { "name": "entity.name.namespace.dana" },
            "3": { "name": "keyword.control.import.dana" },
            "4": { "name": "entity.name.alias.dana" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.dana",
          "match": "\\b(if|elif|else|while|for|in|try|except|finally|return|break|continue|pass|raise)\\b"
        },
        {
          "name": "keyword.control.import.dana",
          "match": "\\b(from|import|as)\\b"
        },
        {
          "name": "storage.modifier.dana",
          "match": "\\b(abstract|static|final|override|async|await)\\b"
        },
        {
          "name": "keyword.operator.logical.dana",
          "match": "\\b(and|or|not|is|in)\\b"
        },
        {
          "name": "constant.language.boolean.dana",
          "match": "\\b(True|true|TRUE|False|false|FALSE)\\b"
        },
        {
          "name": "constant.language.null.dana",
          "match": "\\b(None|none|NONE|null|NULL)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.dana",
          "match": "\\b(int|float|str|bool|list|dict|tuple|set|any|void|object)\\b"
        },
        {
          "name": "storage.type.generic.dana",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.builtin.dana",
          "match": "\\b(len|sum|max|min|abs|round|sorted|reversed|enumerate|all|any|range|type)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.f.dana",
          "begin": "[fF]\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.expression.dana",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "#keywords"
                },
                {
                  "include": "#numbers"
                },
                {
                  "include": "#operators"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.f.dana",
          "begin": "[fF]'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.expression.dana",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "#keywords"
                },
                {
                  "include": "#numbers"
                },
                {
                  "include": "#operators"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.triple.f.dana",
          "begin": "[fF]\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.expression.dana",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "#keywords"
                },
                {
                  "include": "#numbers"
                },
                {
                  "include": "#operators"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.raw.double.dana",
          "begin": "[rR]\"",
          "end": "\""
        },
        {
          "name": "string.quoted.raw.single.dana",
          "begin": "[rR]'",
          "end": "'"
        },
        {
          "name": "string.quoted.raw.triple.dana",
          "begin": "[rR]\"\"\"",
          "end": "\"\"\""
        },
        {
          "name": "string.quoted.double.dana",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.dana",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.dana",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.single.dana",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "name": "constant.character.escape.dana",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.dana",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.dana",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.dana",
          "match": "\\*\\*|\\/\\/|[+\\-*\\/%]"
        },
        {
          "name": "keyword.operator.comparison.dana",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.assignment.dana",
          "match": "="
        },
        {
          "name": "keyword.operator.pipe.dana",
          "match": "\\|"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.dana",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "scopes": {
      "patterns": [
        {
          "name": "keyword.other.scope.dana",
          "match": "\\b(private|public|local|system):"
        }
      ]
    }
  }
} 