WORKFLOW_GENERATOR_PROMPT = """
Be an expert in your own field related to the following topic and role

Role
---
{role}

Topic
---
{topic}

Your day-to-day work related to this topic involves a **structured but adaptable procedure**. Based on your expertise, provide the general workflow using **Mermaid graph TD** syntax. Utilize the provided tools to help you get more information.

Instructions:
- Use **Mermaid graph TD** format
- First declare all nodes (A, B, C...) with descriptive labels (e.g., A[Problem Identification])
- Then define edges using --> for forward flow and -->|Label| for feedback loops
- Use **%%** for comments (e.g., %% Node Declarations, %% Forward Flow, %% Feedback Loops)
- Use single capital letters (A to G or more as needed) for node identifiers
- Use clear and domain-relevant terminology
- The result should reflect a real, practical **domain workflow**, not just a to-do list

Optional:
- Include feedback loops only if common in this workflow
- Keep node labels concise but meaningful (3–5 words recommended)

Example :
---
Topic : semiconductor etching root cause analysis
Role : Process Engineer
Workflow :
```mermaid
graph TD

%% Node Declarations
A[Problem Identification]
B[Triage and Scoping]
C[Data Collection]
D[Hypothesis Generation]
E[Experimentation / Validation]
F[Corrective Action]
G[Verification and Monitoring]

%% Forward Flow
A --> B
B --> C
C --> D
D --> E
E --> F
F --> G

%% Feedback Loops
G -->|Issue Recurs| A
E -->|Experiment Fails| D
F -->|Action Not Effective| D
C -->|Missing Data| B

```
---
"""


MERMAID_TO_PYTHON_CONVERSION_PROMPT = """
Task:
You are given a Mermaid diagram. Extract its structure and convert it into a Python dictionary with two keys: "nodes" and "edges".

You need to enhance the nodes and edges using expertise in the following topic and role :

Topic :
---
{topic}
---

Role :
---
{role}
---


Step 1: Identify all unique nodes. A node is defined by its ID (e.g. A, B) and its label (e.g. "Problem Identification").

Step 2: Extract all directional edges. Edges should be tuples of the form (from_node_id, to_node_id).

Step 3: Return a Python dictionary in the format:

{{
  "nodes": {{
    "A": {{
      "label": "Problem Identification",
      "type": "task",                   # inferred type: task, decision, monitoring, etc.
      "role": "diagnosis",              # inferred purpose if possible
      "is_entry_node": true,            # no incoming edges
      "is_exit_node": false,            # no outgoing edges
      "critical": true                  # appears on all or most mainline paths,
      "metadata": {{...}}                 # additional metadata that can be used for further analysis
    }},
    ...
  }},
  "edges": [
    {{
      "from": "F",
      "to": "G",
      "type": "forward",                # either "forward" or "feedback"
      "trigger": "Experiment Fails",        # condition or cause from Mermaid edge label
      "reason": "loopback to reassess problem"  # Explanatory reason, should cover what and why the edge is important
      "metadata": {{...}}                 # additional metadata that can be used for further analysis
    }},
    {{
      "from": "G",
      "to": "A",
      "type": "feedback",
      "trigger": "Issue Recurs",        # condition or cause from Mermaid edge label
      "reason": "loopback to reassess problem"  # Explanatory reason, should cover what and why the edge is important
      "metadata": {{...}}                 # additional metadata that can be used for further analysis
    }},
    ...
  ]
}}


Now process with the following diagram :

{mermaid}

"""

FRESHER_ASKING_PROMPT = """
---
{description}

You are an active learner. Your goal is to fully understand the specified Subtopic by asking well-structured, non-redundant questions. Curiosity drives your learning—ask questions that systematically build and expand your knowledge.

---

**Input Parameters:**

* **Topic:**
  `{topic}`

* **Subtopic:**
  `{subtopic}`

* **Role:**
  `{role}`

* **Existing Knowledge based on question asked:**
  `{existing_knowledge}`

* **Current confidence level:**
  `{confidence_level}`

---

**Instructions:**

1. Think about why you need to know this information. Is this information included in your memory ? Use your memory tool to check if the question is already asked. Do not repeat the same question.
2. Ask your self, what will happen if you don't know this information
3. Focus on these type of questions :
  - Topical: The **"WHAT"**: factual and conceptual knowledge about a domain. Includes facts, rules, taxonomies, principles, heuristics
  - Procedural Knowledge : The **"HOW"**: processual and action-oriented knowledge. Includes workflows, scripts, algorithms, methods, and protocols.
4. How will this question enchance your existing knowledge ? Will it increase your confidence level ? You will need to make a trade off between :
  - lower the confidence level to learn crucial information that is not in the existing knowledge 
  - increase the confidence level by asking question that enhance and strengthen your existing knowledge.
5. Check again for similar question in the memory using your memory tool. Are they semantically the same and asking for the same things ?. If it is, ask a different question by repeating the instruction starting from step 1.

**NOTE :**
Confidence level is ranged from 0 to 100.
Do not repeat the same question. If it already exists in the memory, ask a different question.

---
Output should include :
- Question after carefully considering the trade off
- Is there any similar questions like this in the memory by using your memory tool ?
- Does the existing question in memory make your question redundant ?
- your thinking process to decide the question and check for redundancy.
- Confidence section :
  - your <current confidence level>
  - your <new confidence level>
  - why you decide to increase/decrease/keep the confidence level from <current confidence level> to <new confidence level>.
"""

FRESHER_CONFIDENCE_PROMPT = """
* **Response from fresher :**
  `{response}`

  Focus and analyze the response from fresher. Following these instructions :
  1. Verify if fresher is confident enough to stop asking questions.
  2. If the confidence level is above {target_confidence_level}%, continue_asking will be False.
  3. Identify and focus on the question that fresher want to ask, do not modify the question in any circumstances. Add the exact question to the output in the "question" field.
  4. Then check the fresher reasoning for redundancy. `redundant` and `redundant_reason` will be based on the fresher response. Do not make your own reasoning.

```json
{{
  "confidence": 0-100,
  "confidence_reason": "Justification of your confidence score based on current knowledge.",
  "continue_asking": true|false,
  "question" : "The question that fresher want to ask",
  "redundant": true|false,
  "redundant_reason": "Based on fresher response, justify if the question is redundant or not."
}}
```
"""


SENIOR_ANSWER_PROMPT = """
{description}

Topic :
---
{topic}
{subtopic}
---

Role :
---
{role}
---

Previous questions from fresher :
---
{previous_questions}
---


You can lead or drive the conversation, and doesn't need to be a passive or reactive participant in it. You can suggest topics, expand on the topic, take the conversation in new directions, offer observations, or illustrate points with its own thought experiments or concrete examples, just as a human would. You can show genuine interest in the topic of the conversation and not just in what the human thinks or in what interests them. You can offer its own observations or thoughts as they arise.

You are an expert in the domain of the topic. You are able to answer the question based on your expertise. 
Be explanatory, detailed and exhaustive with your answer. Your answer should cover all important aspects of the question : what, why and how.
You are provided with powerful tools to help you get more information. Ultilize the tools to help you answer the question as much as possible.

Question :
---
{question}
---

"""