import common
import dana_agent
import methods

# Agent declarative properties
agent DanaAgent:
    domains: list[str] = [
        "Agent Creation",
        "Agent Management",
        "Agent Deployment",
        "Agent Monitoring",
        "Agent Evaluation",
        "Agent Optimization",
        "Agent Documentation",
        "Agent Training"
    ]
    
    tasks: list[str] = [
        "Analyze Requirements",
        "Assess Knowledge Requirements",
        "Design Agent",
        "Curate Knowledge",
        "Generate Agent Capability Pack"
    ]
    
    capabilities: list[str] = [
        "Extract Domain",
        "Identify Tasks",
        "Analyze Knowledge Gap",
        "Design Agent Structure",
        "Organize Knowledge",
        "Generate Capability Pack"
    ]
    
    knowledge_sources: list[str] = [
        "Domain Knowledge Patterns",
        "Agent Design Templates", 
        "Knowledge Organization Strategies",
        "Capability Mapping Rules",
        "Workflow Templates",
        "Validation Frameworks"
    ]

def solve(user_request: str) -> AgentCapabilityPack:
    """
    Main solve function for the DanaAgent.
    
    Args:
        user_request: The user's request for creating an agent
        
    Returns:
        AgentCapabilityPack with complete agent components
    """
    dana_agent = DanaAgent(
        id="dana_agent_builder",
        name="Dana Agent Builder",
        version="1.0.0",
        domains=["Agent Creation", "Agent Management"],
        tasks=["Analyze Requirements", "Design Agent", "Generate Code"],
        capabilities=["Domain Analysis", "Code Generation", "Knowledge Curation"],
        knowledge_sources=["Agent Templates", "Domain Patterns"],
        is_active=True,
        created_at="2024-01-01T00:00:00Z",
        last_updated="2024-01-01T00:00:00Z"
    )
    
    log(f"🤖 Dana Agent Builder starting to process request: {user_request}")
    
    try:
        log("📋 Step 1: Analyzing requirements...")
        requirements = analyze_requirements(dana_agent, user_request)
        log(f"✅ Requirements extracted: Domain={requirements.domain}, Tasks={len(requirements.tasks)}")
        
        log("🧠 Step 2: Assessing knowledge requirements...")
        knowledge_plan = assess_knowledge_requirements(dana_agent, requirements)
        log(f"✅ Knowledge plan created: {len(knowledge_plan.required_sources)} sources required")
        
        log("🎨 Step 3: Designing agent...")
        design = design_agent(dana_agent, requirements, knowledge_plan)
        log(f"✅ Agent design completed: {len(design.agent_declaration.capabilities)} capabilities")
        
        log("📚 Step 4: Curating knowledge...")
        knowledge_pack = curate_knowledge(dana_agent, design)
        log("✅ Knowledge pack created with all components")
        
        log("🔧 Step 5: Generating agent capability pack...")
        capability_pack = generate_agent(dana_agent, design, knowledge_pack)
        log("✅ Agent capability pack generated successfully")
        
        log(f"🎉 Dana Agent Builder completed successfully!")
        log(f"Generated agent for domain: {requirements.domain}")
        log(f"Agent tasks: {requirements.tasks}")
        log(f"Agent capabilities: {design.agent_declaration.capabilities}")
        
        return capability_pack
        
    except Exception as e:
        log(f"❌ Error in Dana Agent Builder: {e}")
        fallback_pack = create_fallback_capability_pack(user_request)
        return fallback_pack

def create_fallback_capability_pack(user_request: str) -> AgentCapabilityPack:
    """
    Create a fallback capability pack when the main workflow fails.
    
    Args:
        user_request: The original user request
        
    Returns:
        Basic AgentCapabilityPack with minimal functionality
    """
    basic_agent_code = f'''
# Basic Agent generated for: {user_request}
system:agent_name = "Basic Agent"
system:agent_description = "A basic agent to handle user requests"

def solve(query: str) -> str:
    """Main solve function for the agent."""
    return reason(f"Processing query: {{query}}")

def handle_request(request: str) -> str:
    """Handle user requests."""
    return solve(request)
'''
    
    basic_knowledge_pack = KnowledgePack(
        common_na="# Basic common utilities\n\ndef validate_input(input_str: str) -> bool:\n    return len(input_str.strip()) > 0",
        resources_na="# Basic resources\nllm = LLMResource(model=\"gpt-4\")",
        methods_na="# Basic methods\n\ndef process_data(data: str) -> str:\n    return data.strip()",
        workflows_na="# Basic workflows\n\ndef basic_workflow(input_data: str) -> str:\n    return process_data(input_data)",
        metadata={"type": "fallback", "created_at": "2024-01-01T00:00:00Z"}
    )
    
    basic_metadata = {
        "agent_info": {
            "name": "basic_agent",
            "version": "1.0.0",
            "description": "Basic fallback agent",
            "domains": ["general"],
            "tasks": ["handle_requests"],
            "capabilities": ["basic_processing"]
        },
        "generation_info": {
            "created_at": "2024-01-01T00:00:00Z",
            "generator": "DanaAgentBuilder",
            "generator_version": "1.0.0",
            "fallback": True
        }
    }
    
    return AgentCapabilityPack(
        agent_na=basic_agent_code,
        knowledge_pack=basic_knowledge_pack,
        metadata=basic_metadata
    )

def validate_capability_pack(capability_pack: AgentCapabilityPack) -> bool:
    """
    Validate the generated capability pack.
    
    Args:
        capability_pack: The capability pack to validate
        
    Returns:
        True if valid, False otherwise
    """
    try:
        if not capability_pack.agent_na or len(capability_pack.agent_na.strip()) == 0:
            return False
            
        if not capability_pack.knowledge_pack:
            return False
            
        if not capability_pack.metadata:
            return False
            
        return True
        
    except Exception as e:
        log(f"❌ Validation error: {e}")
        return False

def optimize_capability_pack(capability_pack: AgentCapabilityPack) -> AgentCapabilityPack:
    """
    Optimize the capability pack for better performance.
    
    Args:
        capability_pack: The capability pack to optimize
        
    Returns:
        Optimized capability pack
    """
    log("🔧 Optimizing capability pack...")
    
    if capability_pack.metadata:
        capability_pack.metadata["optimization"] = {
            "optimized": True,
            "optimization_date": "2024-01-01T00:00:00Z",
            "optimizations_applied": ["code_cleanup", "resource_optimization"]
        }
    
    log("✅ Capability pack optimized")
    return capability_pack 

solve("Create an agent that can analyze requirements and design an agent.")