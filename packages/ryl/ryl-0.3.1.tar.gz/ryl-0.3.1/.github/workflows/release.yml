name: Release Crate and Wheels

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish to PyPI and crates.io"
        type: boolean
        required: false
        default: false

permissions:
  contents: read

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Verify version consistency
        run: |
          set -euo pipefail
          EVENT_NAME="${GITHUB_EVENT_NAME}"
          REF_NAME="${GITHUB_REF_NAME}"
          TAG_VERSION=""
          if [ "$EVENT_NAME" = "push" ] && [[ "$REF_NAME" == v* ]]; then
            TAG_VERSION="${REF_NAME#v}"  # drop 'v' prefix if present
          fi
          echo "Event:             $EVENT_NAME"
          echo "Ref name:          $REF_NAME"
          echo "Tag version:       ${TAG_VERSION:-<none>}"
          python - <<'PY'
          import os, sys
          try:
              import tomllib  # Python 3.11+
          except Exception as e:  # pragma: no cover
              print("Python 3.11+ with tomllib is required", file=sys.stderr)
              raise

          def read_toml(path: str):
              with open(path, 'rb') as f:
                  return tomllib.load(f)

          tag = os.environ.get('TAG_VERSION', '')
          cargo = read_toml('Cargo.toml')
          pyproj = read_toml('pyproject.toml')

          cargo_version = cargo.get('package', {}).get('version')
          py_version = pyproj.get('project', {}).get('version')

          print(f"Cargo.toml version: {cargo_version}")
          print(f"pyproject.toml version: {py_version}")

          ok = True
          # Always ensure Cargo and pyproject match each other
          if cargo_version != py_version:
              print("❌ Cargo.toml and pyproject.toml versions differ", file=sys.stderr)
              ok = False
          # On tag builds, also enforce equality with the tag
          if tag:
              if cargo_version != tag:
                  print("❌ Cargo.toml version does not match tag", file=sys.stderr)
                  ok = False
              if py_version != tag:
                  print("❌ pyproject.toml version does not match tag", file=sys.stderr)
                  ok = False

          if not ok:
              sys.exit(1)

          print("✅ Versions are consistent")
          PY

  linux:
    needs: [version-check]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7, i686, ppc64le, s390x]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build manylinux wheels
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          manylinux: auto
          sccache: ${{ github.event_name != 'release' }}
      - name: Upload wheels (manylinux)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-manylinux-${{ matrix.target }}
          path: dist

  smoke-manylinux:
    name: Smoke Test (manylinux)
    needs: [linux]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: wheels-manylinux-*
          merge-multiple: true
          path: dist
      - name: Install uv
        uses: astral-sh/setup-uv@eb1897b8dc4b5d5bfe39a428a8f2304605e0983c
      - name: Install wheel and run CLI
        run: |
          set -euxo pipefail
          uv python install ${{ matrix.python }}
          uv venv -p ${{ matrix.python }} .venv
          uv pip install -p .venv --no-index --find-links dist ryl
          uv run -p .venv ryl --version

  musllinux:
    needs: [version-check]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build musllinux wheels
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          manylinux: musllinux_1_2
          sccache: ${{ github.event_name != 'release' }}
      - name: Upload wheels (musllinux)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist

  smoke-musllinux:
    name: Smoke Test (musllinux)
    needs: [musllinux]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python_image: ["3.10-alpine", "3.11-alpine", "3.12-alpine", "3.13-alpine"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: wheels-musllinux-*
          merge-multiple: true
          path: dist
      - name: Install wheel and run CLI in Alpine
        run: |
          set -euxo pipefail
          docker run --rm -v "$PWD/dist":/dist python:${{ matrix.python_image }} \
            sh -euxc "python --version; python -m pip install --no-index --find-links /dist ryl; ryl --version"

  windows:
    needs: [version-check]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build Windows wheels
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: ${{ github.event_name != 'release' }}
      - name: Upload wheels (Windows)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  smoke-windows:
    name: Smoke Test (Windows)
    needs: [windows]
    runs-on: windows-latest
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: wheels-windows-*
          merge-multiple: true
          path: dist
      - name: Install uv
        uses: astral-sh/setup-uv@eb1897b8dc4b5d5bfe39a428a8f2304605e0983c
      - name: Install wheel and run CLI
        shell: bash
        run: |
          set -euxo pipefail
          uv python install ${{ matrix.python }}
          uv venv -p ${{ matrix.python }} .venv
          uv pip install -p .venv --no-index --find-links dist ryl
          uv run -p .venv ryl --version

  macos:
    needs: [version-check]
    strategy:
      matrix:
        include:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build macOS wheels
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: ${{ github.event_name != 'release' }}
      - name: Upload wheels (macOS)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  smoke-macos:
    name: Smoke Test (macOS)
    needs: [macos]
    strategy:
      matrix:
        runner: [macos-13, macos-14]
        python: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: wheels-macos-*
          merge-multiple: true
          path: dist
      - name: Install uv
        uses: astral-sh/setup-uv@eb1897b8dc4b5d5bfe39a428a8f2304605e0983c
      - name: Install wheel and run CLI
        run: |
          set -euxo pipefail
          uv python install ${{ matrix.python }}
          uv venv -p ${{ matrix.python }} .venv
          uv pip install -p .venv --no-index --find-links dist ryl
          uv run -p .venv ryl --version

  sdist:
    needs: [version-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Build sdist
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheels-sdist
          path: dist

  create-github-release:
    name: Create GitHub release
    needs:
      - smoke-manylinux
      - smoke-musllinux
      - smoke-windows
      - smoke-macos
      - sdist
    if: >-
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.publish == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Create release
        uses: taiki-e/create-gh-release-action@26b80501670402f1999aff4b934e1574ef2d3705
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-release-binaries:
    name: Upload release binaries
    needs: create-github-release
    if: >-
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.publish == true)
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
          - runner: ubuntu-22.04
            target: i686-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: powerpc64le-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: s390x-unknown-linux-gnu
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-musl
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
          - runner: windows-latest
            target: aarch64-pc-windows-msvc
          - runner: macos-13
            target: x86_64-apple-darwin
          - runner: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Upload binaries for ${{ matrix.target }}
        uses: taiki-e/upload-rust-binary-action@3962470d6e7f1993108411bc3f75a135ec67fc8c
        with:
          bin: ryl
          target: ${{ matrix.target }}
          locked: true
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - smoke-manylinux
      - smoke-musllinux
      - smoke-windows
      - smoke-macos
      - sdist
      - upload-release-binaries
    if: >-
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.publish == true)
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a
        with:
          subject-path: 'dist/*'
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e
        with:
          print-hash: true
          skip-existing: true
