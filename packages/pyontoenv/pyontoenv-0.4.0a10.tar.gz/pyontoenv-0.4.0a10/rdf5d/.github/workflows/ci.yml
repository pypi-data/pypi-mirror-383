name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:

jobs:
  test:
    name: "Test (${{ matrix.os }} | features: ${{ matrix.features }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        features: ["", "oxigraph", "oxigraph,mmap", "zstd", "oxigraph,zstd", "oxigraph,mmap,zstd"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        shell: bash
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo build --all-targets --locked
          else
            cargo build --all-targets --locked --features "${{ matrix.features }}"
          fi

      - name: Test
        shell: bash
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo test --locked
          else
            cargo test --locked --features "${{ matrix.features }}"
          fi

  lint:
    name: Lint (clippy + fmt)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (components)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: cargo fmt --check
        run: cargo fmt --all -- --check

      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings

  publish:
    name: Publish (crates.io)
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cargo publish --locked

  build-cli:
    name: Build CLI Artifacts (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build CLI (release)
        run: cargo build --release --bin r5tu --features "oxigraph,mmap" --locked

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: r5tu-${{ matrix.os }}
          path: |
            target/release/r5tu*

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [test, lint, build-cli]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: ${{ contains(steps.vars.outputs.tag, '-') }}
          files: |
            artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
