name: Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering with version input
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  # Security checks and release creation
  release:
    runs-on: ubuntu-latest
    if: github.repository == 'pmcgleenon/heavykeeper-py'  # Only run in original repo
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Check permissions for manual triggers
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v8
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            
            const permission = collaborator.permission;
            console.log(`User ${context.actor} has ${permission} permission`);
            
            if (!['admin', 'write'].includes(permission)) {
              core.setFailed(`User ${context.actor} does not have permission to trigger releases. Required: admin or write access.`);
            }
            
      - uses: actions/checkout@v5
        if: github.event_name == 'workflow_dispatch'
        
      - name: Create manual release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: |
            Manual release v${{ github.event.inputs.version }}
            
            Changes in this release will be updated by Release Please in future automated releases.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: true
          
      - name: Set build flag
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Will build and publish"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Skipping build"
          fi

  test:
    needs: [release]
    if: needs.release.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin and pytest (Linux)
      if: runner.os == 'Linux'
      run: pip install maturin[patchelf] pytest
    
    - name: Install maturin and pytest (non-Linux)
      if: runner.os != 'Linux'
      run: pip install maturin pytest
    
    - name: Build wheel
      run: maturin build --release
    
    - name: Install built wheel
      run: pip install --find-links target/wheels heavykeeper
    
    - name: Run tests
      run: python -m pytest test_heavykeeper.py -v

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [release]
    if: needs.release.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        args: --release --out dist --interpreter 3.11 3.12
        sccache: 'true'
        manylinux: auto
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  build-wheels-cross:
    name: Build wheels (Linux ARM64)
    needs: [release]
    if: needs.release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: aarch64-unknown-linux-gnu
        args: --release --out dist --interpreter 3.11 3.12
        sccache: 'true'
        manylinux: auto
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-aarch64
        path: dist

  build-sdist:
    name: Build source distribution
    needs: [release]
    if: needs.release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build-wheels, build-wheels-cross, build-sdist]
    if: always() && !failure() && !cancelled()
    environment:
      name: pypi
      url: https://pypi.org/p/heavykeeper
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: dist
        merge-multiple: true
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true 
