# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class ParseConfigChunkingStrategyOptions(UncheckedBaseModel):
    """
    Additional options for the chunking strategy.
    """

    min_characters: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="minCharacters")] = (
        pydantic.Field(default=None)
    )
    """
    Specify a minimum number of characters per chunk.
    """

    max_characters: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxCharacters")] = (
        pydantic.Field(default=None)
    )
    """
    Specify a maximum number of characters per chunk.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
