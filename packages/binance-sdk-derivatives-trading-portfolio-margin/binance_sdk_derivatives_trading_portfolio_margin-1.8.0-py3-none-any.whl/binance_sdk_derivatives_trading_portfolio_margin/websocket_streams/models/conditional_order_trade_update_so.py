# coding: utf-8

"""
Binance Derivatives Trading Portfolio Margin WebSocket Market Streams

OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class ConditionalOrderTradeUpdateSo(BaseModel):
    """
    ConditionalOrderTradeUpdateSo
    """  # noqa: E501

    s: Optional[StrictStr] = None
    c: Optional[StrictStr] = None
    si: Optional[StrictInt] = None
    S: Optional[StrictStr] = Field(default=None, alias="S")
    st: Optional[StrictStr] = None
    f: Optional[StrictStr] = None
    q: Optional[StrictStr] = None
    p: Optional[StrictStr] = None
    sp: Optional[StrictStr] = None
    os: Optional[StrictStr] = None
    T: Optional[StrictInt] = Field(default=None, alias="T")
    ut: Optional[StrictInt] = None
    R: Optional[StrictBool] = Field(default=None, alias="R")
    wt: Optional[StrictStr] = None
    ps: Optional[StrictStr] = None
    cp: Optional[StrictBool] = None
    AP: Optional[StrictStr] = Field(default=None, alias="AP")
    cr: Optional[StrictStr] = None
    i: Optional[StrictInt] = None
    V: Optional[StrictStr] = Field(default=None, alias="V")
    gtd: Optional[StrictInt] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "s",
        "c",
        "si",
        "S",
        "st",
        "f",
        "q",
        "p",
        "sp",
        "os",
        "T",
        "ut",
        "R",
        "wt",
        "ps",
        "cp",
        "AP",
        "cr",
        "i",
        "V",
        "gtd",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConditionalOrderTradeUpdateSo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConditionalOrderTradeUpdateSo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "s": obj.get("s"),
                "c": obj.get("c"),
                "si": obj.get("si"),
                "S": obj.get("S"),
                "st": obj.get("st"),
                "f": obj.get("f"),
                "q": obj.get("q"),
                "p": obj.get("p"),
                "sp": obj.get("sp"),
                "os": obj.get("os"),
                "T": obj.get("T"),
                "ut": obj.get("ut"),
                "R": obj.get("R"),
                "wt": obj.get("wt"),
                "ps": obj.get("ps"),
                "cp": obj.get("cp"),
                "AP": obj.get("AP"),
                "cr": obj.get("cr"),
                "i": obj.get("i"),
                "V": obj.get("V"),
                "gtd": obj.get("gtd"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
