test_types:
  id: '1007'
  test_type: Constant
  test_name_short: Constant Match
  test_name_long: All column values match constant value
  test_description: |-
    Tests that all values in the column match the constant value identified in baseline data
  except_message: |-
    A constant value is expected for this column.
  measure_uom: Mismatched values
  measure_uom_description: null
  selection_criteria: |-
    TEMPLATE
  dq_score_prevalence_formula: |-
    ({RESULT_MEASURE}-{THRESHOLD_VALUE})::FLOAT/NULLIF({RECORD_CT}::FLOAT, 0)
  dq_score_risk_factor: '1.0'
  column_name_prompt: null
  column_name_help: null
  default_parm_columns: baseline_value,threshold_value
  default_parm_values: null
  default_parm_prompts: |-
    Constant Value at Baseline,Threshold Error Count
  default_parm_help: |-
    The single, unchanging value of the column, per baseline|The number of errors that are acceptable before test fails.
  default_severity: Fail
  run_type: CAT
  test_scope: column
  dq_dimension: Validity
  health_dimension: Schema Drift
  threshold_description: |-
    Count of records with unexpected values
  result_visualization: line_chart
  result_visualization_params: null
  usage_notes: |-
    Constant Match tests that a single value determined to be a constant in baseline profiling is still the only value for the column that appears in subsequent versions of the dataset. Sometimes new data or business knowledge may reveal that the value is not a constant at all, even though only one value was present at profiling. In this case, you will want to disable this test. Alternatively, you can use the Value Match test to provide a limited number of valid values for the column.
  active: Y
  cat_test_conditions:
  - id: '7004'
    test_type: Constant
    sql_flavor: bigquery
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} != {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '6004'
    test_type: Constant
    sql_flavor: databricks
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '3004'
    test_type: Constant
    sql_flavor: mssql
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '4004'
    test_type: Constant
    sql_flavor: postgresql
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '1004'
    test_type: Constant
    sql_flavor: redshift
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '7004'
    test_type: Constant
    sql_flavor: redshift_spectrum
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '2004'
    test_type: Constant
    sql_flavor: snowflake
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '5004'
    test_type: Constant
    sql_flavor: trino
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} <> {BASELINE_VALUE} THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  target_data_lookups:
  - id: '1367'
    test_id: '1007'
    test_type: Constant
    sql_flavor: bigquery
    lookup_type: null
    lookup_query: |-
      SELECT `{COLUMN_NAME}`, COUNT(*) AS count
      FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}`
      WHERE `{COLUMN_NAME}` <> {BASELINE_VALUE}
      GROUP BY `{COLUMN_NAME}`
      LIMIT 500;
    error_type: Test Results
  - id: '1301'
    test_id: '1007'
    test_type: Constant
    sql_flavor: databricks
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT `{COLUMN_NAME}`, COUNT(*) AS count FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}` WHERE `{COLUMN_NAME}` <> {BASELINE_VALUE} GROUP BY `{COLUMN_NAME}` LIMIT 500;
    error_type: Test Results
  - id: '1143'
    test_id: '1007'
    test_type: Constant
    sql_flavor: mssql
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT TOP 500 "{COLUMN_NAME}", COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" <> {BASELINE_VALUE} GROUP BY "{COLUMN_NAME}";
    error_type: Test Results
  - id: '1086'
    test_id: '1007'
    test_type: Constant
    sql_flavor: postgresql
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}", COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" <> {BASELINE_VALUE} GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1004'
    test_id: '1007'
    test_type: Constant
    sql_flavor: redshift
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}", COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" <> {BASELINE_VALUE} GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1404'
    test_id: '1007'
    test_type: Constant
    sql_flavor: redshift_spectrum
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}", COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" <> {BASELINE_VALUE} GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1200'
    test_id: '1007'
    test_type: Constant
    sql_flavor: snowflake
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}", COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" <> {BASELINE_VALUE} GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  test_templates: []
