test_types:
  id: '1505'
  test_type: Aggregate_Balance_Range
  test_name_short: Aggregate Balance Range
  test_name_long: Aggregate measure per group within hard range of reference
  test_description: |-
    Tests that aggregate measure for each set of column values fall within a hard range above or below the measure for reference dataset
  except_message: |-
    Aggregate measure per set of column values is outside expected range of reference dataset.
  measure_uom: Mismatched measures
  measure_uom_description: null
  selection_criteria: null
  dq_score_prevalence_formula: |-
    1
  dq_score_risk_factor: '1.0'
  column_name_prompt: |-
    Aggregate Expression
  column_name_help: |-
    Specify an aggregate column expression: one of `SUM([column_name])` or `COUNT([column_name])`
  default_parm_columns: subset_condition,groupby_names,having_condition,match_schema_name,match_table_name,match_column_names,match_subset_condition,match_groupby_names,match_having_condition,lower_tolerance,upper_tolerance
  default_parm_values: null
  default_parm_prompts: |-
    Record Subset Condition,Grouping Columns,Group Subset Condition,Matching Schema Name,Matching Table Name,Matching Aggregate Expression,Matching Record Subset Condition,Matching Grouping Columns,Matching Group Subset Condition,Lower Tolerance Constant,Upper Tolerance Constant
  default_parm_help: |-
    Condition defining a subset of records in main table, written like a condition within a SQL WHERE clause - OPTIONAL|Category columns in main table separated by commas (e.g. GROUP BY columns)|Condition defining a subset of aggregate records in main table (e.g. HAVING clause) - OPTIONAL|Schema location of matching table|Matching table name|Agregate column expression in matching table: one of `SUM([column_name])` or `COUNT([column_name])`|Condition defining a subset of records in matching table, written like a condition within a SQL WHERE clause - OPTIONAL|Category columns in matching table separated by commas (e.g. GROUP BY columns)|Condition defining a subset of aggregate records in matching table (e.g. HAVING clause) - OPTIONAL|Allowable tolerance below the reference measure expressed as a constant value|Allowable tolerance above the reference measure expressed as a constant value
  default_severity: Fail
  run_type: QUERY
  test_scope: referential
  dq_dimension: Consistency
  health_dimension: Data Drift
  threshold_description: |-
    Expected count of group totals not matching aggregate value
  result_visualization: line_chart
  result_visualization_params: null
  usage_notes: |-
    This test compares sums or counts of a column rolled up to one or more category combinations across two different tables. Both tables must be accessible at the same time. Use it to confirm that two datasets closely match within the tolerances you define as specific values above or below the aggregate measure for the same categories in the reference dataset -- that the sum of a measure or count of a value remains sufficiently consistent between categories. For instance, you can use this test to compare sales per product within one month to another, when you want to be alerted if the difference for any product falls outside of the range defined as 10000 dollars above or below the prior week. An error here means that one or more value combinations fail to match within the set tolerances. New categories or combinations will cause failure.
  active: Y
  cat_test_conditions: []
  target_data_lookups:
  - id: '1405'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: bigquery
    lookup_type: null
    lookup_query: |-
      SELECT *
      FROM (
        SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
        FROM (
          SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
          FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}`
          WHERE {SUBSET_CONDITION}
          GROUP BY {GROUPBY_NAMES}
          {HAVING_CONDITION}
          UNION ALL
          SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
          FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
          WHERE {MATCH_SUBSET_CONDITION}
          GROUP BY {MATCH_GROUPBY_NAMES}
          {MATCH_HAVING_CONDITION}
        ) a
        GROUP BY {GROUPBY_NAMES}
      ) s
      WHERE (total IS NOT NULL AND match_total IS NULL)
         OR (total IS NULL AND match_total IS NOT NULL)
         OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
      ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1245'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: databricks
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}`
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1247'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: mssql
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM "{TARGET_SCHEMA}"."{TABLE_NAME}"
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1248'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: postgresql
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM "{TARGET_SCHEMA}"."{TABLE_NAME}"
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1245'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: redshift
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM "{TARGET_SCHEMA}"."{TABLE_NAME}"
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1467'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: redshift_spectrum
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM "{TARGET_SCHEMA}"."{TABLE_NAME}"
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  - id: '1246'
    test_id: '1505'
    test_type: Aggregate_Balance_Range
    sql_flavor: snowflake
    lookup_type: null
    lookup_query: |-
      SELECT *
        FROM ( SELECT {GROUPBY_NAMES}, SUM(TOTAL) AS total, SUM(MATCH_TOTAL) AS MATCH_TOTAL
          FROM
            ( SELECT {GROUPBY_NAMES}, {COLUMN_NAME_NO_QUOTES} AS total, NULL AS match_total
                FROM "{TARGET_SCHEMA}"."{TABLE_NAME}"
              WHERE {SUBSET_CONDITION}
              GROUP BY {GROUPBY_NAMES}
              {HAVING_CONDITION}
                UNION ALL
              SELECT {MATCH_GROUPBY_NAMES}, NULL AS total, {MATCH_COLUMN_NAMES} AS match_total
                FROM {MATCH_SCHEMA_NAME}.{MATCH_TABLE_NAME}
              WHERE {MATCH_SUBSET_CONDITION}
              GROUP BY {MATCH_GROUPBY_NAMES}
              {MATCH_HAVING_CONDITION} ) a
          GROUP BY {GROUPBY_NAMES} ) s
        WHERE (total IS NOT NULL AND match_total IS NULL)
          OR (total IS NULL AND match_total IS NOT NULL)
          OR (total NOT BETWEEN match_total + {LOWER_TOLERANCE} AND match_total + {UPPER_TOLERANCE})
        ORDER BY {GROUPBY_NAMES};
    error_type: Test Results
  test_templates:
  - id: '2510'
    test_type: Aggregate_Balance_Range
    sql_flavor: bigquery
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2410'
    test_type: Aggregate_Balance_Range
    sql_flavor: databricks
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2210'
    test_type: Aggregate_Balance_Range
    sql_flavor: mssql
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2310'
    test_type: Aggregate_Balance_Range
    sql_flavor: postgresql
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2010'
    test_type: Aggregate_Balance_Range
    sql_flavor: redshift
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2510'
    test_type: Aggregate_Balance_Range
    sql_flavor: redshift_spectrum
    template_name: ex_aggregate_match_range_generic.sql
  - id: '2110'
    test_type: Aggregate_Balance_Range
    sql_flavor: snowflake
    template_name: ex_aggregate_match_range_generic.sql
