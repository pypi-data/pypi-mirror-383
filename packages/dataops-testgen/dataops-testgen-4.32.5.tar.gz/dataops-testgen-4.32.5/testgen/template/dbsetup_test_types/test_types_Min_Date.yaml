test_types:
  id: '1020'
  test_type: Min_Date
  test_name_short: Minimum Date
  test_name_long: All dates on or after set minimum
  test_description: |-
    Tests that the earliest date referenced in the column is no earlier than baseline data
  except_message: |-
    The earliest date value found is before the earliest value at baseline.
  measure_uom: Dates prior to limit
  measure_uom_description: null
  selection_criteria: |-
    general_type='D'and min_date IS NOT NULL AND distinct_value_ct > 1
  dq_score_prevalence_formula: |-
    ({RESULT_MEASURE}-{THRESHOLD_VALUE})::FLOAT/NULLIF({RECORD_CT}::FLOAT, 0)
  dq_score_risk_factor: '1.0'
  column_name_prompt: null
  column_name_help: null
  default_parm_columns: baseline_value,threshold_value
  default_parm_values: |-
    min_date,0
  default_parm_prompts: |-
    Minimum Date at Baseline,Threshold Error Count
  default_parm_help: null
  default_severity: Fail
  run_type: CAT
  test_scope: column
  dq_dimension: Validity
  health_dimension: Schema Drift
  threshold_description: |-
    Expected count of dates prior to minimum
  result_visualization: line_chart
  result_visualization_params: null
  usage_notes: |-
    This test is appropriate for a cumulative dataset only, because it assumes all prior values are still present. It's appropriate where new records are added with more recent dates, but old dates dates do not change.
  active: Y
  cat_test_conditions:
  - id: '7015'
    test_type: Min_Date
    sql_flavor: bigquery
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < SAFE_CAST('{BASELINE_VALUE}' AS {COLUMN_TYPE}) THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '6015'
    test_type: Min_Date
    sql_flavor: databricks
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '3015'
    test_type: Min_Date
    sql_flavor: mssql
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '4015'
    test_type: Min_Date
    sql_flavor: postgresql
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '1015'
    test_type: Min_Date
    sql_flavor: redshift
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '7015'
    test_type: Min_Date
    sql_flavor: redshift_spectrum
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '2015'
    test_type: Min_Date
    sql_flavor: snowflake
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < '{BASELINE_VALUE}' THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  - id: '5015'
    test_type: Min_Date
    sql_flavor: trino
    measure: |-
      SUM(CASE WHEN {COLUMN_NAME} < CAST('{BASELINE_VALUE}' AS DATE) THEN 1 ELSE 0 END)
    test_operator: '>'
    test_condition: |-
      {THRESHOLD_VALUE}
  target_data_lookups:
  - id: '1378'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: bigquery
    lookup_type: null
    lookup_query: |-
      SELECT `{COLUMN_NAME}`, COUNT(*) AS count
      FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}`
      WHERE CAST(`{COLUMN_NAME}` AS DATE) < CAST(CAST('{BASELINE_VALUE}' AS DATETIME) AS DATE)
      GROUP BY `{COLUMN_NAME}`
      LIMIT 500;
    error_type: Test Results
  - id: '1312'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: databricks
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT `{COLUMN_NAME}`,  COUNT(*) AS count  FROM `{TARGET_SCHEMA}`.`{TABLE_NAME}` WHERE `{COLUMN_NAME}` :: DATE < '{BASELINE_VALUE}' :: DATE GROUP BY `{COLUMN_NAME}` LIMIT 500;
    error_type: Test Results
  - id: '1154'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: mssql
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT TOP 500 "{COLUMN_NAME}", COUNT(*) AS count  FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE CAST("{COLUMN_NAME}" AS DATE) < CAST('{BASELINE_VALUE}' AS DATE) GROUP BY "{COLUMN_NAME}";
    error_type: Test Results
  - id: '1097'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: postgresql
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}",  COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" :: DATE < '{BASELINE_VALUE}' :: DATE GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1015'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: redshift
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}",  COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" :: DATE < '{BASELINE_VALUE}' :: DATE GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1415'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: redshift_spectrum
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}",  COUNT(*) AS count FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" :: DATE < '{BASELINE_VALUE}' :: DATE GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  - id: '1211'
    test_id: '1020'
    test_type: Min_Date
    sql_flavor: snowflake
    lookup_type: null
    lookup_query: |-
      SELECT DISTINCT "{COLUMN_NAME}",  COUNT(*) AS count  FROM "{TARGET_SCHEMA}"."{TABLE_NAME}" WHERE "{COLUMN_NAME}" :: DATE < '{BASELINE_VALUE}' :: DATE GROUP BY "{COLUMN_NAME}" LIMIT 500;
    error_type: Test Results
  test_templates: []
