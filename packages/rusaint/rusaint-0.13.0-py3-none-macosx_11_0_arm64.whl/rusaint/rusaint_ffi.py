# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
from dataclasses import dataclass
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform
from . import rusaint


# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_rusaint_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_rusaint_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_rusaint_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError(f"junk data left in buffer at end of consume_with_stream {s.remaining()}")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError(f"junk data left in buffer at end of read_with_stream {s.remaining()}")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiFfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiFfiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiFfiConverterString.lower(repr(e))
# Initial value and increment amount for handles. 
# These ensure that Python-generated handles always have the lowest bit set
_UNIFFI_HANDLEMAP_INITIAL = 1
_UNIFFI_HANDLEMAP_DELTA = 2

class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = _UNIFFI_HANDLEMAP_INITIAL

    def insert(self, obj):
        with self._lock:
            return self._insert(obj)

    """Low-level insert, this assumes `self._lock` is held."""
    def _insert(self, obj):
        handle = self._counter
        self._counter += _UNIFFI_HANDLEMAP_DELTA
        self._map[handle] = obj
        return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.get: Invalid handle {handle}")

    def clone(self, handle):
        try:
            with self._lock:
                obj = self._map[handle]
                return self._insert(obj)
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.clone: Invalid handle {handle}")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError(f"_UniffiHandleMap.remove: Invalid handle: {handle}")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("rusaint_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 30
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_rusaint_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_rusaint_ffi_checksum_method_chapelapplication_get_selected_semester() != 6133:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_chapelapplication_information() != 21740:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_chapelapplicationbuilder_new() != 52857:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_chapelapplicationbuilder_build() != 32906:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_certificated_summary() != 8880:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_class_detail() != 3843:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_classes() != 12879:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_get_selected_semester() != 50223:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_recorded_summary() != 3787:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_semesters() != 55958:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_coursegradesapplicationbuilder_new() != 45366:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursegradesapplicationbuilder_build() != 50139:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_chapel_categories() != 21428:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_collages() != 50658:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_connected_majors() != 24954:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_departments() != 10692:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_find_lectures() != 7590:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_get_selected_semester() != 52870:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_collages() != 29655:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_departments() != 42882:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_majors() != 356:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_optional_elective_categories() != 63165:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_required_electives() != 46039:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_united_majors() != 41228:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_coursescheduleapplicationbuilder_new() != 52419:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplicationbuilder_build() != 60808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_requirements() != 63669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_student_info() != 6063:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_graduationrequirementsapplicationbuilder_new() != 7670:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplicationbuilder_build() != 18426:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_find_assessments() != 35425:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_get_selected_semester() != 2234:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_lectureassessmentapplicationbuilder_new() != 61021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplicationbuilder_build() != 52720:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_get_selected_semester() != 26180:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_schedule() != 58730:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_personalcoursescheduleapplicationbuilder_new() != 46717:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplicationbuilder_build() != 42578:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplication_scholarships() != 28486:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_scholarshipsapplicationbuilder_new() != 64614:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplicationbuilder_build() != 35090:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_academic_record() != 56142:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_bank_account() != 24141:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_family() != 32983:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_general() != 64238:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_graduation() != 31914:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_qualifications() != 24889:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_religion() != 49903:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_research_bank_account() != 7706:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_transfer() != 46555:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_work() != 4701:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_studentinformationapplicationbuilder_new() != 5527:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_studentinformationapplicationbuilder_build() != 12986:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_constructor_usaintsessionbuilder_new() != 54500:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_anonymous() != 59232:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_password() != 35896:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_token() != 48669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.ffi_rusaint_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_rusaint_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_rusaint_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_rusaint_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_DROPPED_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFutureDroppedCallbackStruct(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_DROPPED_CALLBACK),
    ]
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_rusaint_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_rusaint_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_rusaint_ffi_rust_future_complete_void.restype = None
_UniffiLib.ffi_rusaint_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_rusaint_ffi_rust_future_free_void.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplication.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplication.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplication.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplicationbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplicationbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplicationbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsession.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsession.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsession.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsession.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsessionbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsessionbuilder.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsessionbuilder.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsessionbuilder.restype = None
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_get_selected_semester.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_get_selected_semester.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_information.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_information.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_chapelapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_chapelapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_certificated_summary.argtypes = (
    ctypes.c_uint64,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_certificated_summary.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_class_detail.argtypes = (
    ctypes.c_uint64,
    rusaint._UniffiRustBuffer,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_class_detail.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_classes.argtypes = (
    ctypes.c_uint64,
    rusaint._UniffiRustBuffer,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    ctypes.c_int8,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_classes.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_get_selected_semester.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_get_selected_semester.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_recorded_summary.argtypes = (
    ctypes.c_uint64,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_recorded_summary.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_semesters.argtypes = (
    ctypes.c_uint64,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_semesters.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursegradesapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursegradesapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_chapel_categories.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_chapel_categories.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_collages.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_collages.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_connected_majors.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_connected_majors.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_departments.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_departments.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_find_lectures.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_find_lectures.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_get_selected_semester.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_get_selected_semester.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_collages.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_collages.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_departments.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_departments.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_majors.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_majors.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_optional_elective_categories.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_optional_elective_categories.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_required_electives.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_required_electives.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_united_majors.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_united_majors.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursescheduleapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursescheduleapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_requirements.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_requirements.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_student_info.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_student_info.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_graduationrequirementsapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_graduationrequirementsapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_find_assessments.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_find_assessments.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_get_selected_semester.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_get_selected_semester.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_lectureassessmentapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_lectureassessmentapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_get_selected_semester.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_get_selected_semester.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_schedule.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint32,
    rusaint._UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_schedule.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_personalcoursescheduleapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_personalcoursescheduleapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplication_scholarships.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplication_scholarships.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_scholarshipsapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_scholarshipsapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_academic_record.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_academic_record.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_bank_account.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_bank_account.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_family.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_family.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_general.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_general.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_graduation.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_graduation.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_qualifications.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_qualifications.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_religion.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_religion.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_research_bank_account.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_research_bank_account.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_transfer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_transfer.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_work.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_work.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_studentinformationapplicationbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_studentinformationapplicationbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplicationbuilder_build.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplicationbuilder_build.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_usaintsessionbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_constructor_usaintsessionbuilder_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_anonymous.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_anonymous.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_password.argtypes = (
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_password.restype = ctypes.c_uint64
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_token.argtypes = (
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_token.restype = ctypes.c_uint64
_UniffiLib.ffi_rusaint_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_rusaint_ffi_uniffi_contract_version.restype = ctypes.c_uint32
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplication_get_selected_semester.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplication_get_selected_semester.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplication_information.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplication_information.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_chapelapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_chapelapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_chapelapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_certificated_summary.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_certificated_summary.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_class_detail.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_class_detail.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_classes.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_classes.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_get_selected_semester.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_get_selected_semester.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_recorded_summary.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_recorded_summary.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_semesters.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplication_semesters.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_coursegradesapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_coursegradesapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursegradesapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_chapel_categories.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_chapel_categories.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_collages.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_collages.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_connected_majors.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_connected_majors.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_departments.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_departments.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_find_lectures.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_find_lectures.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_get_selected_semester.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_get_selected_semester.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_collages.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_collages.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_departments.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_graduated_departments.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_majors.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_majors.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_optional_elective_categories.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_optional_elective_categories.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_required_electives.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_required_electives.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_united_majors.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_united_majors.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_coursescheduleapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_coursescheduleapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_coursescheduleapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_requirements.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_requirements.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_student_info.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplication_student_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_graduationrequirementsapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_graduationrequirementsapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_graduationrequirementsapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_find_assessments.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_find_assessments.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_get_selected_semester.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplication_get_selected_semester.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_lectureassessmentapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_lectureassessmentapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_lectureassessmentapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_get_selected_semester.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_get_selected_semester.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_schedule.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplication_schedule.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_personalcoursescheduleapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_personalcoursescheduleapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_personalcoursescheduleapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplication_scholarships.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplication_scholarships.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_scholarshipsapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_scholarshipsapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_scholarshipsapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_academic_record.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_academic_record.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_bank_account.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_bank_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_family.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_family.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_general.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_general.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_graduation.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_graduation.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_qualifications.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_qualifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_religion.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_religion.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_research_bank_account.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_research_bank_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_transfer.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_transfer.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_work.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplication_work.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_studentinformationapplicationbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_studentinformationapplicationbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplicationbuilder_build.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_studentinformationapplicationbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_usaintsessionbuilder_new.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_constructor_usaintsessionbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_anonymous.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_anonymous.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_password.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_password.restype = ctypes.c_uint16
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_token.argtypes = (
)
_UniffiLib.uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_token.restype = ctypes.c_uint16

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_WAKE = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

# Public interface members begin here.


class _UniffiFfiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)



@dataclass
class YearSemester:
    def __init__(self, *, year:int, semester:rusaint.SemesterType):
        self.year = year
        self.semester = semester
        
        

    
    def __str__(self):
        return "YearSemester(year={}, semester={})".format(self.year, self.semester)
    def __eq__(self, other):
        if self.year != other.year:
            return False
        if self.semester != other.semester:
            return False
        return True

class _UniffiFfiConverterTypeYearSemester(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return YearSemester(
            year=_UniffiFfiConverterUInt32.read(buf),
            semester=rusaint._UniffiFfiConverterTypeSemesterType.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiFfiConverterUInt32.check_lower(value.year)
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(value.semester)

    @staticmethod
    def write(value, buf):
        _UniffiFfiConverterUInt32.write(value.year, buf)
        rusaint._UniffiFfiConverterTypeSemesterType.write(value.semester, buf)



# RusaintError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class RusaintError(Exception):
    """
    Rusaint에서 반환하는 기본 오류
"""
    pass

_UniffiTempRusaintError = RusaintError

class RusaintError:  # type: ignore
    """
    Rusaint에서 반환하는 기본 오류
"""
    
    class General(_UniffiTempRusaintError):
        def __repr__(self):
            return "RusaintError.General({})".format(repr(str(self)))
    _UniffiTempRusaintError.General = General # type: ignore

RusaintError = _UniffiTempRusaintError # type: ignore
del _UniffiTempRusaintError


class _UniffiFfiConverterTypeRusaintError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RusaintError.General(
                _UniffiFfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, RusaintError.General):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, RusaintError.General):
            buf.write_i32(1)




class ChapelApplicationProtocol(typing.Protocol):
    """
    [채플정보조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW3681)
"""
    
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        raise NotImplementedError
    async def information(self, year: int,semester: rusaint.SemesterType) -> rusaint.ChapelInformation:
        """
        해당 학기의 채플 정보를 가져옵니다.
"""
        raise NotImplementedError

class ChapelApplication(ChapelApplicationProtocol):
    """
    [채플정보조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW3681)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeYearSemester.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_get_selected_semester(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def information(self, year: int,semester: rusaint.SemesterType) -> rusaint.ChapelInformation:
        """
        해당 학기의 채플 정보를 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeChapelInformation.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplication_information(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeChapelApplication:
    @staticmethod
    def lift(value: int) -> ChapelApplication:
        return ChapelApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: ChapelApplication):
        if not isinstance(value, ChapelApplication):
            raise TypeError("Expected ChapelApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ChapelApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> ChapelApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ChapelApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class USaintSessionProtocol(typing.Protocol):
    """
    u-saint에서 사용할 세션
    [`USaintSessionBuilder`]를 이용해 생성합니다.
"""
    
    pass

class USaintSession(USaintSessionProtocol):
    """
    u-saint에서 사용할 세션
    [`USaintSessionBuilder`]를 이용해 생성합니다.
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsession, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsession, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst





class _UniffiFfiConverterTypeUSaintSession:
    @staticmethod
    def lift(value: int) -> USaintSession:
        return USaintSession._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: USaintSession):
        if not isinstance(value, USaintSession):
            raise TypeError("Expected USaintSession instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: USaintSession) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> USaintSession:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: USaintSession, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class ChapelApplicationBuilderProtocol(typing.Protocol):
    """
    [`ChapelApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> ChapelApplication:
        """
        세션과 함께 [`ChapelApplication`]을 만듭니다.
"""
        raise NotImplementedError

class ChapelApplicationBuilder(ChapelApplicationBuilderProtocol):
    """
    [`ChapelApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`ChapelApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeChapelApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_chapelapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_chapelapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_chapelapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> ChapelApplication:
        """
        세션과 함께 [`ChapelApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeChapelApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_chapelapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeChapelApplicationBuilder:
    @staticmethod
    def lift(value: int) -> ChapelApplicationBuilder:
        return ChapelApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: ChapelApplicationBuilder):
        if not isinstance(value, ChapelApplicationBuilder):
            raise TypeError("Expected ChapelApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ChapelApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> ChapelApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ChapelApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))





class _UniffiFfiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiFfiConverterFloat32(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_float()

    @staticmethod
    def write(value, buf):
        buf.write_float(value)

class _UniffiFfiConverterMapStringFloat32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiFfiConverterString.check_lower(key)
            _UniffiFfiConverterFloat32.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiFfiConverterString.write(key, buf)
            _UniffiFfiConverterFloat32.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiFfiConverterString.read(buf)
            val = _UniffiFfiConverterFloat32.read(buf)
            d[key] = val
        return d

class _UniffiFfiConverterBoolean:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)



class _UniffiFfiConverterSequenceTypeClassGrade(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            rusaint._UniffiFfiConverterTypeClassGrade.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            rusaint._UniffiFfiConverterTypeClassGrade.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            rusaint._UniffiFfiConverterTypeClassGrade.read(buf) for i in range(count)
        ]



class _UniffiFfiConverterSequenceTypeSemesterGrade(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            rusaint._UniffiFfiConverterTypeSemesterGrade.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            rusaint._UniffiFfiConverterTypeSemesterGrade.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            rusaint._UniffiFfiConverterTypeSemesterGrade.read(buf) for i in range(count)
        ]


class CourseGradesApplicationProtocol(typing.Protocol):
    """
    [학생 성적 조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMB3W0017)
"""
    
    async def certificated_summary(self, course_type: rusaint.CourseType) -> rusaint.GradeSummary:
        """
        전체 학기의 증명 평점 정보를 가져옵니다.
"""
        raise NotImplementedError
    async def class_detail(self, course_type: rusaint.CourseType,year: int,semester: rusaint.SemesterType,code: str) -> dict[str, float]:
        """
        주어진 수업의 상세 성적 정보를 가져옵니다.
"""
        raise NotImplementedError
    async def classes(self, course_type: rusaint.CourseType,year: int,semester: rusaint.SemesterType,include_details: bool) -> typing.List[rusaint.ClassGrade]:
        """
        주어진 학기의 수업별 성적을 가져옵니다. `include_details`가 `true`인 경우 수업의 상세 성적도 가져옵니다.
        수업의 상세 성적까지 가져올 경우 상세 성적이 있는 수업의 수 만큼 서버에 요청을 보내므로 반드시 상세 성적도 한번에 가져와야 할 때에만 사용하십시오.

        수업 성적을 가져온 이후 상세 성적 또한 가져오려면 `[class_detail()]`함수를 이용하십시오.
"""
        raise NotImplementedError
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        raise NotImplementedError
    async def recorded_summary(self, course_type: rusaint.CourseType) -> rusaint.GradeSummary:
        """
        전체 학기의 학적부 평점 정보를 가져옵니다.
"""
        raise NotImplementedError
    async def semesters(self, course_type: rusaint.CourseType) -> typing.List[rusaint.SemesterGrade]:
        """
        학기별 평점 정보를 가져옵니다.
"""
        raise NotImplementedError

class CourseGradesApplication(CourseGradesApplicationProtocol):
    """
    [학생 성적 조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMB3W0017)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def certificated_summary(self, course_type: rusaint.CourseType) -> rusaint.GradeSummary:
        """
        전체 학기의 증명 평점 정보를 가져옵니다.
"""
        
        rusaint._UniffiFfiConverterTypeCourseType.check_lower(course_type)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            rusaint._UniffiFfiConverterTypeCourseType.lower(course_type),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeGradeSummary.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_certificated_summary(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def class_detail(self, course_type: rusaint.CourseType,year: int,semester: rusaint.SemesterType,code: str) -> dict[str, float]:
        """
        주어진 수업의 상세 성적 정보를 가져옵니다.
"""
        
        rusaint._UniffiFfiConverterTypeCourseType.check_lower(course_type)
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        _UniffiFfiConverterString.check_lower(code)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            rusaint._UniffiFfiConverterTypeCourseType.lower(course_type),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterString.lower(code),
        )
        _uniffi_lift_return = _UniffiFfiConverterMapStringFloat32.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_class_detail(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def classes(self, course_type: rusaint.CourseType,year: int,semester: rusaint.SemesterType,include_details: bool) -> typing.List[rusaint.ClassGrade]:
        """
        주어진 학기의 수업별 성적을 가져옵니다. `include_details`가 `true`인 경우 수업의 상세 성적도 가져옵니다.
        수업의 상세 성적까지 가져올 경우 상세 성적이 있는 수업의 수 만큼 서버에 요청을 보내므로 반드시 상세 성적도 한번에 가져와야 할 때에만 사용하십시오.

        수업 성적을 가져온 이후 상세 성적 또한 가져오려면 `[class_detail()]`함수를 이용하십시오.
"""
        
        rusaint._UniffiFfiConverterTypeCourseType.check_lower(course_type)
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        _UniffiFfiConverterBoolean.check_lower(include_details)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            rusaint._UniffiFfiConverterTypeCourseType.lower(course_type),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterBoolean.lower(include_details),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceTypeClassGrade.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_classes(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeYearSemester.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_get_selected_semester(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def recorded_summary(self, course_type: rusaint.CourseType) -> rusaint.GradeSummary:
        """
        전체 학기의 학적부 평점 정보를 가져옵니다.
"""
        
        rusaint._UniffiFfiConverterTypeCourseType.check_lower(course_type)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            rusaint._UniffiFfiConverterTypeCourseType.lower(course_type),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeGradeSummary.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_recorded_summary(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def semesters(self, course_type: rusaint.CourseType) -> typing.List[rusaint.SemesterGrade]:
        """
        학기별 평점 정보를 가져옵니다.
"""
        
        rusaint._UniffiFfiConverterTypeCourseType.check_lower(course_type)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            rusaint._UniffiFfiConverterTypeCourseType.lower(course_type),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceTypeSemesterGrade.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplication_semesters(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeCourseGradesApplication:
    @staticmethod
    def lift(value: int) -> CourseGradesApplication:
        return CourseGradesApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: CourseGradesApplication):
        if not isinstance(value, CourseGradesApplication):
            raise TypeError("Expected CourseGradesApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CourseGradesApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> CourseGradesApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CourseGradesApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CourseGradesApplicationBuilderProtocol(typing.Protocol):
    """
    [`CourseGradesApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> CourseGradesApplication:
        """
        세션과 함께 [`CourseGradesApplication`]을 만듭니다.
"""
        raise NotImplementedError

class CourseGradesApplicationBuilder(CourseGradesApplicationBuilderProtocol):
    """
    [`CourseGradesApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`CourseGradesApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeCourseGradesApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursegradesapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_coursegradesapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursegradesapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> CourseGradesApplication:
        """
        세션과 함께 [`CourseGradesApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeCourseGradesApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursegradesapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeCourseGradesApplicationBuilder:
    @staticmethod
    def lift(value: int) -> CourseGradesApplicationBuilder:
        return CourseGradesApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: CourseGradesApplicationBuilder):
        if not isinstance(value, CourseGradesApplicationBuilder):
            raise TypeError("Expected CourseGradesApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CourseGradesApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> CourseGradesApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CourseGradesApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

class _UniffiFfiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiFfiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiFfiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiFfiConverterString.read(buf) for i in range(count)
        ]





class _UniffiFfiConverterSequenceTypeLecture(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            rusaint._UniffiFfiConverterTypeLecture.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            rusaint._UniffiFfiConverterTypeLecture.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            rusaint._UniffiFfiConverterTypeLecture.read(buf) for i in range(count)
        ]


class CourseScheduleApplicationProtocol(typing.Protocol):
    """
    [강의시간표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW2100)
"""
    
    async def chapel_categories(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 채플 과목 분류 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def collages(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기 기준 단과대 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def connected_majors(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 연계전공 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def departments(self, year: int,semester: rusaint.SemesterType,collage: str) -> typing.List[str]:
        """
        선택한 학기 기준 주어진 단과대의 학과(부) 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def find_lectures(self, year: int,semester: rusaint.SemesterType,lecture_category: rusaint.LectureCategory) -> typing.List[rusaint.Lecture]:
        """
        학기, 학년도, 강의 분류를 통해 강의를 찾습니다.
"""
        raise NotImplementedError
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        raise NotImplementedError
    async def graduated_collages(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 대학원 단과대학 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def graduated_departments(self, year: int,semester: rusaint.SemesterType,collage: str) -> typing.List[str]:
        """
        선택한 학기의 주어진 대학원 단과대의 학과 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def majors(self, year: int,semester: rusaint.SemesterType,collage: str,department: str) -> typing.List[str]:
        """
        선택한 학과(부)의 전공 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def optional_elective_categories(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 교양선택 분야 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def required_electives(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 교양필수 과목명 목록을 가져옵니다.
"""
        raise NotImplementedError
    async def united_majors(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 융합전공 목록을 가져옵니다.
"""
        raise NotImplementedError

class CourseScheduleApplication(CourseScheduleApplicationProtocol):
    """
    [강의시간표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW2100)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def chapel_categories(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 채플 과목 분류 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_chapel_categories(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def collages(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기 기준 단과대 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_collages(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def connected_majors(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 연계전공 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_connected_majors(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def departments(self, year: int,semester: rusaint.SemesterType,collage: str) -> typing.List[str]:
        """
        선택한 학기 기준 주어진 단과대의 학과(부) 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        _UniffiFfiConverterString.check_lower(collage)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterString.lower(collage),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_departments(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def find_lectures(self, year: int,semester: rusaint.SemesterType,lecture_category: rusaint.LectureCategory) -> typing.List[rusaint.Lecture]:
        """
        학기, 학년도, 강의 분류를 통해 강의를 찾습니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        rusaint._UniffiFfiConverterTypeLectureCategory.check_lower(lecture_category)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            rusaint._UniffiFfiConverterTypeLectureCategory.lower(lecture_category),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceTypeLecture.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_find_lectures(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeYearSemester.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_get_selected_semester(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def graduated_collages(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 대학원 단과대학 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_collages(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def graduated_departments(self, year: int,semester: rusaint.SemesterType,collage: str) -> typing.List[str]:
        """
        선택한 학기의 주어진 대학원 단과대의 학과 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        _UniffiFfiConverterString.check_lower(collage)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterString.lower(collage),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_graduated_departments(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def majors(self, year: int,semester: rusaint.SemesterType,collage: str,department: str) -> typing.List[str]:
        """
        선택한 학과(부)의 전공 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        _UniffiFfiConverterString.check_lower(collage)
        
        _UniffiFfiConverterString.check_lower(department)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterString.lower(collage),
            _UniffiFfiConverterString.lower(department),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_majors(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def optional_elective_categories(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 교양선택 분야 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_optional_elective_categories(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def required_electives(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 교양필수 과목명 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_required_electives(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def united_majors(self, year: int,semester: rusaint.SemesterType) -> typing.List[str]:
        """
        선택한 학기의 융합전공 목록을 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceString.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplication_united_majors(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeCourseScheduleApplication:
    @staticmethod
    def lift(value: int) -> CourseScheduleApplication:
        return CourseScheduleApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: CourseScheduleApplication):
        if not isinstance(value, CourseScheduleApplication):
            raise TypeError("Expected CourseScheduleApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CourseScheduleApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> CourseScheduleApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CourseScheduleApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class CourseScheduleApplicationBuilderProtocol(typing.Protocol):
    """
    [`CourseScheduleApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> CourseScheduleApplication:
        """
        세션과 함께 [`CourseScheduleApplication`]을 만듭니다.
"""
        raise NotImplementedError

class CourseScheduleApplicationBuilder(CourseScheduleApplicationBuilderProtocol):
    """
    [`CourseScheduleApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`CourseScheduleApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeCourseScheduleApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_coursescheduleapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_coursescheduleapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_coursescheduleapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> CourseScheduleApplication:
        """
        세션과 함께 [`CourseScheduleApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeCourseScheduleApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_coursescheduleapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeCourseScheduleApplicationBuilder:
    @staticmethod
    def lift(value: int) -> CourseScheduleApplicationBuilder:
        return CourseScheduleApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: CourseScheduleApplicationBuilder):
        if not isinstance(value, CourseScheduleApplicationBuilder):
            raise TypeError("Expected CourseScheduleApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CourseScheduleApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> CourseScheduleApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CourseScheduleApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))






class GraduationRequirementsApplicationProtocol(typing.Protocol):
    """
    [졸업사정표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW8015)
"""
    
    async def requirements(self, ) -> rusaint.GraduationRequirements:
        """
        졸업사정 결과와 졸업 필요 요건별 충족 여부와 세부 정보를 반환합니다.
"""
        raise NotImplementedError
    async def student_info(self, ) -> rusaint.GraduationStudent:
        """
        학생 정보를 반환합니다.
"""
        raise NotImplementedError

class GraduationRequirementsApplication(GraduationRequirementsApplicationProtocol):
    """
    [졸업사정표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW8015)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def requirements(self, ) -> rusaint.GraduationRequirements:
        """
        졸업사정 결과와 졸업 필요 요건별 충족 여부와 세부 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeGraduationRequirements.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_requirements(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def student_info(self, ) -> rusaint.GraduationStudent:
        """
        학생 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeGraduationStudent.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplication_student_info(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeGraduationRequirementsApplication:
    @staticmethod
    def lift(value: int) -> GraduationRequirementsApplication:
        return GraduationRequirementsApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: GraduationRequirementsApplication):
        if not isinstance(value, GraduationRequirementsApplication):
            raise TypeError("Expected GraduationRequirementsApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: GraduationRequirementsApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> GraduationRequirementsApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: GraduationRequirementsApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class GraduationRequirementsApplicationBuilderProtocol(typing.Protocol):
    """
    [`GraduationRequirementsApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> GraduationRequirementsApplication:
        """
        세션과 함께 [`GraduationRequirementsApplication`]을 만듭니다.
"""
        raise NotImplementedError

class GraduationRequirementsApplicationBuilder(GraduationRequirementsApplicationBuilderProtocol):
    """
    [`GraduationRequirementsApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`GraduationRequirementsApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeGraduationRequirementsApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_graduationrequirementsapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_graduationrequirementsapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_graduationrequirementsapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> GraduationRequirementsApplication:
        """
        세션과 함께 [`GraduationRequirementsApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeGraduationRequirementsApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_graduationrequirementsapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeGraduationRequirementsApplicationBuilder:
    @staticmethod
    def lift(value: int) -> GraduationRequirementsApplicationBuilder:
        return GraduationRequirementsApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: GraduationRequirementsApplicationBuilder):
        if not isinstance(value, GraduationRequirementsApplicationBuilder):
            raise TypeError("Expected GraduationRequirementsApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: GraduationRequirementsApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> GraduationRequirementsApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: GraduationRequirementsApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

class _UniffiFfiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

class _UniffiFfiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiFfiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiFfiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiFfiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiFfiConverterSequenceTypeLectureAssessmentResult(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            rusaint._UniffiFfiConverterTypeLectureAssessmentResult.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            rusaint._UniffiFfiConverterTypeLectureAssessmentResult.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            rusaint._UniffiFfiConverterTypeLectureAssessmentResult.read(buf) for i in range(count)
        ]


class LectureAssessmentApplicationProtocol(typing.Protocol):
    """
    [강의평가조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMB2W1010)
"""
    
    async def find_assessments(self, year: int,semester: rusaint.SemesterType,lecture_name: typing.Union[object, typing.Optional[str]] = _DEFAULT,lecture_code: typing.Union[object, typing.Optional[int]] = _DEFAULT,professor_name: typing.Union[object, typing.Optional[str]] = _DEFAULT) -> typing.List[rusaint.LectureAssessmentResult]:
        """
        검색 조건에 맞는 강의평가 정보를 가져옵니다.
"""
        raise NotImplementedError
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        raise NotImplementedError

class LectureAssessmentApplication(LectureAssessmentApplicationProtocol):
    """
    [강의평가조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMB2W1010)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def find_assessments(self, year: int,semester: rusaint.SemesterType,lecture_name: typing.Union[object, typing.Optional[str]] = _DEFAULT,lecture_code: typing.Union[object, typing.Optional[int]] = _DEFAULT,professor_name: typing.Union[object, typing.Optional[str]] = _DEFAULT) -> typing.List[rusaint.LectureAssessmentResult]:
        """
        검색 조건에 맞는 강의평가 정보를 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        
        if lecture_name is _DEFAULT:
            lecture_name = None
        _UniffiFfiConverterOptionalString.check_lower(lecture_name)
        
        if lecture_code is _DEFAULT:
            lecture_code = None
        _UniffiFfiConverterOptionalUInt32.check_lower(lecture_code)
        
        if professor_name is _DEFAULT:
            professor_name = None
        _UniffiFfiConverterOptionalString.check_lower(professor_name)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
            _UniffiFfiConverterOptionalString.lower(lecture_name),
            _UniffiFfiConverterOptionalUInt32.lower(lecture_code),
            _UniffiFfiConverterOptionalString.lower(professor_name),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceTypeLectureAssessmentResult.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_find_assessments(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeYearSemester.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplication_get_selected_semester(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeLectureAssessmentApplication:
    @staticmethod
    def lift(value: int) -> LectureAssessmentApplication:
        return LectureAssessmentApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: LectureAssessmentApplication):
        if not isinstance(value, LectureAssessmentApplication):
            raise TypeError("Expected LectureAssessmentApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LectureAssessmentApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> LectureAssessmentApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LectureAssessmentApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class LectureAssessmentApplicationBuilderProtocol(typing.Protocol):
    """
    [`LectureAssessmentApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> LectureAssessmentApplication:
        """
        세션과 함께 [`LectureAssessmentApplication`]을 만듭니다.
"""
        raise NotImplementedError

class LectureAssessmentApplicationBuilder(LectureAssessmentApplicationBuilderProtocol):
    """
    [`LectureAssessmentApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`LectureAssessmentApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeLectureAssessmentApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_lectureassessmentapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_lectureassessmentapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_lectureassessmentapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> LectureAssessmentApplication:
        """
        세션과 함께 [`LectureAssessmentApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeLectureAssessmentApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_lectureassessmentapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeLectureAssessmentApplicationBuilder:
    @staticmethod
    def lift(value: int) -> LectureAssessmentApplicationBuilder:
        return LectureAssessmentApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: LectureAssessmentApplicationBuilder):
        if not isinstance(value, LectureAssessmentApplicationBuilder):
            raise TypeError("Expected LectureAssessmentApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LectureAssessmentApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> LectureAssessmentApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LectureAssessmentApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))




class PersonalCourseScheduleApplicationProtocol(typing.Protocol):
    """
    [개인수업시간표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW2102)
"""
    
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        raise NotImplementedError
    async def schedule(self, year: int,semester: rusaint.SemesterType) -> rusaint.PersonalCourseSchedule:
        """
        해당 학기의 시간표 정보를 가져옵니다.
"""
        raise NotImplementedError

class PersonalCourseScheduleApplication(PersonalCourseScheduleApplicationProtocol):
    """
    [개인수업시간표](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW2102)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def get_selected_semester(self, ) -> YearSemester:
        """
        현재 페이지에 선택된 년도와 학기를 가져옵니다. 최초 로드 시 현재 학기를 가져올 가능성이 있습니다.
        하지만 이 애플리케이션의 다른 함수를 호출하여 한번 정보를 가져왔다면 마지막으로 가져온 정보의 학기가 반환되므로 주의하여야 하며, 신뢰할 수 있는 현재 학기의 원천으로 사용되어서는 안됩니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeYearSemester.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_get_selected_semester(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def schedule(self, year: int,semester: rusaint.SemesterType) -> rusaint.PersonalCourseSchedule:
        """
        해당 학기의 시간표 정보를 가져옵니다.
"""
        
        _UniffiFfiConverterUInt32.check_lower(year)
        
        rusaint._UniffiFfiConverterTypeSemesterType.check_lower(semester)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterUInt32.lower(year),
            rusaint._UniffiFfiConverterTypeSemesterType.lower(semester),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypePersonalCourseSchedule.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplication_schedule(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypePersonalCourseScheduleApplication:
    @staticmethod
    def lift(value: int) -> PersonalCourseScheduleApplication:
        return PersonalCourseScheduleApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: PersonalCourseScheduleApplication):
        if not isinstance(value, PersonalCourseScheduleApplication):
            raise TypeError("Expected PersonalCourseScheduleApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PersonalCourseScheduleApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> PersonalCourseScheduleApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PersonalCourseScheduleApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class PersonalCourseScheduleApplicationBuilderProtocol(typing.Protocol):
    """
    [`PersonalCourseScheduleApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> PersonalCourseScheduleApplication:
        """
        세션과 함께 [`PersonalCourseScheduleApplication`]을 만듭니다.
"""
        raise NotImplementedError

class PersonalCourseScheduleApplicationBuilder(PersonalCourseScheduleApplicationBuilderProtocol):
    """
    [`PersonalCourseScheduleApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`PersonalCourseScheduleApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypePersonalCourseScheduleApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_personalcoursescheduleapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_personalcoursescheduleapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_personalcoursescheduleapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> PersonalCourseScheduleApplication:
        """
        세션과 함께 [`PersonalCourseScheduleApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypePersonalCourseScheduleApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_personalcoursescheduleapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypePersonalCourseScheduleApplicationBuilder:
    @staticmethod
    def lift(value: int) -> PersonalCourseScheduleApplicationBuilder:
        return PersonalCourseScheduleApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: PersonalCourseScheduleApplicationBuilder):
        if not isinstance(value, PersonalCourseScheduleApplicationBuilder):
            raise TypeError("Expected PersonalCourseScheduleApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PersonalCourseScheduleApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> PersonalCourseScheduleApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PersonalCourseScheduleApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class _UniffiFfiConverterSequenceTypeScholarship(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            rusaint._UniffiFfiConverterTypeScholarship.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            rusaint._UniffiFfiConverterTypeScholarship.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            rusaint._UniffiFfiConverterTypeScholarship.read(buf) for i in range(count)
        ]


class ScholarshipsApplicationProtocol(typing.Protocol):
    """
    [장학금수혜내역조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW7530n)
"""
    
    async def scholarships(self, ) -> typing.List[rusaint.Scholarship]:
        """
        장학금 수혜 내역을 가져옵니다.
"""
        raise NotImplementedError

class ScholarshipsApplication(ScholarshipsApplicationProtocol):
    """
    [장학금수혜내역조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW7530n)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def scholarships(self, ) -> typing.List[rusaint.Scholarship]:
        """
        장학금 수혜 내역을 가져옵니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterSequenceTypeScholarship.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplication_scholarships(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeScholarshipsApplication:
    @staticmethod
    def lift(value: int) -> ScholarshipsApplication:
        return ScholarshipsApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: ScholarshipsApplication):
        if not isinstance(value, ScholarshipsApplication):
            raise TypeError("Expected ScholarshipsApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ScholarshipsApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> ScholarshipsApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ScholarshipsApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class ScholarshipsApplicationBuilderProtocol(typing.Protocol):
    """
    [`ScholarshipsApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> ScholarshipsApplication:
        """
        세션과 함께 [`ScholarshipsApplication`]을 만듭니다.
"""
        raise NotImplementedError

class ScholarshipsApplicationBuilder(ScholarshipsApplicationBuilderProtocol):
    """
    [`ScholarshipsApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`ScholarshipsApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeScholarshipsApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_scholarshipsapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_scholarshipsapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_scholarshipsapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> ScholarshipsApplication:
        """
        세션과 함께 [`ScholarshipsApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeScholarshipsApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_scholarshipsapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeScholarshipsApplicationBuilder:
    @staticmethod
    def lift(value: int) -> ScholarshipsApplicationBuilder:
        return ScholarshipsApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: ScholarshipsApplicationBuilder):
        if not isinstance(value, ScholarshipsApplicationBuilder):
            raise TypeError("Expected ScholarshipsApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ScholarshipsApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> ScholarshipsApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ScholarshipsApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))






















class StudentInformationApplicationProtocol(typing.Protocol):
    """
    [학생 정보 수정 및 조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW1001n)
"""
    
    async def academic_record(self, ) -> rusaint.StudentAcademicRecords:
        """
        학생의 학적상태 정보를 반환합니다.
"""
        raise NotImplementedError
    async def bank_account(self, ) -> rusaint.StudentBankAccount:
        """
        학생의 은행계좌 정보를 반환합니다.
"""
        raise NotImplementedError
    async def family(self, ) -> rusaint.StudentFamily:
        """
        학생의 가족관계 정보를 반환합니다.
"""
        raise NotImplementedError
    async def general(self, ) -> rusaint.StudentInformation:
        """
        일반 학생 정보를 반환합니다.
"""
        raise NotImplementedError
    async def graduation(self, ) -> rusaint.StudentGraduation:
        """
        학생의 졸업과 관련된 정보를 반환합니다.
"""
        raise NotImplementedError
    async def qualifications(self, ) -> rusaint.StudentQualification:
        """
        학생의 교직, 평생교육사, 7+1 프로그램 등 자격 관련 정보를 반환합니다.
"""
        raise NotImplementedError
    async def religion(self, ) -> rusaint.StudentReligion:
        """
        학생의 종교 정보를 반환합니다.
"""
        raise NotImplementedError
    async def research_bank_account(self, ) -> rusaint.StudentResearchBankAccount:
        """
        학생의 연구비 입금 계좌를 반환합니다.
"""
        raise NotImplementedError
    async def transfer(self, ) -> rusaint.StudentTransferRecords:
        """
        학생의 편입정보를 반환합니다.
"""
        raise NotImplementedError
    async def work(self, ) -> rusaint.StudentWorkInformation:
        """
        학생의 직장 정보를 반환합니다.
"""
        raise NotImplementedError

class StudentInformationApplication(StudentInformationApplicationProtocol):
    """
    [학생 정보 수정 및 조회](https://ecc.ssu.ac.kr/sap/bc/webdynpro/SAP/ZCMW1001n)
"""
    
    _handle: ctypes.c_uint64
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplication, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplication, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def academic_record(self, ) -> rusaint.StudentAcademicRecords:
        """
        학생의 학적상태 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentAcademicRecords.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_academic_record(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def bank_account(self, ) -> rusaint.StudentBankAccount:
        """
        학생의 은행계좌 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentBankAccount.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_bank_account(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def family(self, ) -> rusaint.StudentFamily:
        """
        학생의 가족관계 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentFamily.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_family(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def general(self, ) -> rusaint.StudentInformation:
        """
        일반 학생 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentInformation.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_general(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def graduation(self, ) -> rusaint.StudentGraduation:
        """
        학생의 졸업과 관련된 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentGraduation.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_graduation(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def qualifications(self, ) -> rusaint.StudentQualification:
        """
        학생의 교직, 평생교육사, 7+1 프로그램 등 자격 관련 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentQualification.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_qualifications(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def religion(self, ) -> rusaint.StudentReligion:
        """
        학생의 종교 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentReligion.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_religion(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def research_bank_account(self, ) -> rusaint.StudentResearchBankAccount:
        """
        학생의 연구비 입금 계좌를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentResearchBankAccount.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_research_bank_account(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def transfer(self, ) -> rusaint.StudentTransferRecords:
        """
        학생의 편입정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentTransferRecords.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_transfer(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def work(self, ) -> rusaint.StudentWorkInformation:
        """
        학생의 직장 정보를 반환합니다.
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = rusaint._UniffiFfiConverterTypeStudentWorkInformation.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplication_work(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_rust_buffer,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeStudentInformationApplication:
    @staticmethod
    def lift(value: int) -> StudentInformationApplication:
        return StudentInformationApplication._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: StudentInformationApplication):
        if not isinstance(value, StudentInformationApplication):
            raise TypeError("Expected StudentInformationApplication instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: StudentInformationApplication) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> StudentInformationApplication:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: StudentInformationApplication, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class StudentInformationApplicationBuilderProtocol(typing.Protocol):
    """
    [`StudentInformationApplication`] 생성을 위한 빌더
"""
    
    async def build(self, session: USaintSession) -> StudentInformationApplication:
        """
        세션과 함께 [`StudentInformationApplication`]을 만듭니다.
"""
        raise NotImplementedError

class StudentInformationApplicationBuilder(StudentInformationApplicationBuilderProtocol):
    """
    [`StudentInformationApplication`] 생성을 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`StudentInformationApplicationBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeStudentInformationApplicationBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_studentinformationapplicationbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_studentinformationapplicationbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_studentinformationapplicationbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    async def build(self, session: USaintSession) -> StudentInformationApplication:
        """
        세션과 함께 [`StudentInformationApplication`]을 만듭니다.
"""
        
        _UniffiFfiConverterTypeUSaintSession.check_lower(session)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterTypeUSaintSession.lower(session),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeStudentInformationApplication.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_studentinformationapplicationbuilder_build(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeStudentInformationApplicationBuilder:
    @staticmethod
    def lift(value: int) -> StudentInformationApplicationBuilder:
        return StudentInformationApplicationBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: StudentInformationApplicationBuilder):
        if not isinstance(value, StudentInformationApplicationBuilder):
            raise TypeError("Expected StudentInformationApplicationBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: StudentInformationApplicationBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> StudentInformationApplicationBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: StudentInformationApplicationBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class USaintSessionBuilderProtocol(typing.Protocol):
    """
    [`USaintSession`]을 생성하기 위한 빌더
"""
    
    def anonymous(self, ) -> USaintSession:
        """
        익명 세션(비로그인)을 만듭니다.
        ## Kotlin
        ```kotlin
        fun createAnonymousSession() {
        val anonymous = USaintSessionBuilder().anonymous()
        }
        ```
"""
        raise NotImplementedError
    async def with_password(self, id: str,password: str) -> USaintSession:
        """
        ID, 비밀번호로 세션을 만듭니다.
        ## Kotlin
        ```kotlin
        suspend fun createSessionWithPassword() {
        val withPassword = USaintSessionBuilder().withPassword("20211561", "password") // suspend
        }
"""
        raise NotImplementedError
    async def with_token(self, id: str,token: str) -> USaintSession:
        """
        SSO 토큰으로 세션을 만듭니다.
        ## Kotlin
        ```kotlin
        suspend fun createSessionWithSsoToken() {
        val withToken = USaintSessionBuilder().withToken("<example sso token>") // suspend
        }
"""
        raise NotImplementedError

class USaintSessionBuilder(USaintSessionBuilderProtocol):
    """
    [`USaintSession`]을 생성하기 위한 빌더
"""
    
    _handle: ctypes.c_uint64
    def __init__(self, ):
        """
        새로운 [`USaintSessionBuilder`]를 만듭니다.
"""
        _uniffi_lowered_args = (
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeUSaintSessionBuilder.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_constructor_usaintsessionbuilder_new,
            *_uniffi_lowered_args,
        )
        self._handle = _uniffi_ffi_result

    def __del__(self):
        # In case of partial initialization of instances.
        handle = getattr(self, "_handle", None)
        if handle is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_free_usaintsessionbuilder, handle)

    def _uniffi_clone_handle(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_rusaint_ffi_fn_clone_usaintsessionbuilder, self._handle)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _uniffi_make_instance(cls, handle):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required handle.
        inst = cls.__new__(cls)
        inst._handle = handle
        return inst
    def anonymous(self, ) -> USaintSession:
        """
        익명 세션(비로그인)을 만듭니다.
        ## Kotlin
        ```kotlin
        fun createAnonymousSession() {
        val anonymous = USaintSessionBuilder().anonymous()
        }
        ```
"""
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeUSaintSession.lift
        _uniffi_error_converter = None
        _uniffi_ffi_result = _uniffi_rust_call_with_error(
            _uniffi_error_converter,
            _UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_anonymous,
            *_uniffi_lowered_args,
        )
        return _uniffi_lift_return(_uniffi_ffi_result)
    async def with_password(self, id: str,password: str) -> USaintSession:
        """
        ID, 비밀번호로 세션을 만듭니다.
        ## Kotlin
        ```kotlin
        suspend fun createSessionWithPassword() {
        val withPassword = USaintSessionBuilder().withPassword("20211561", "password") // suspend
        }
"""
        
        _UniffiFfiConverterString.check_lower(id)
        
        _UniffiFfiConverterString.check_lower(password)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterString.lower(id),
            _UniffiFfiConverterString.lower(password),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeUSaintSession.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_password(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )
    async def with_token(self, id: str,token: str) -> USaintSession:
        """
        SSO 토큰으로 세션을 만듭니다.
        ## Kotlin
        ```kotlin
        suspend fun createSessionWithSsoToken() {
        val withToken = USaintSessionBuilder().withToken("<example sso token>") // suspend
        }
"""
        
        _UniffiFfiConverterString.check_lower(id)
        
        _UniffiFfiConverterString.check_lower(token)
        _uniffi_lowered_args = (
            self._uniffi_clone_handle(),
            _UniffiFfiConverterString.lower(id),
            _UniffiFfiConverterString.lower(token),
        )
        _uniffi_lift_return = _UniffiFfiConverterTypeUSaintSession.lift
        _uniffi_error_converter = _UniffiFfiConverterTypeRusaintError
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_token(*_uniffi_lowered_args),
            _UniffiLib.ffi_rusaint_ffi_rust_future_poll_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_complete_u64,
            _UniffiLib.ffi_rusaint_ffi_rust_future_free_u64,
            _uniffi_lift_return,
            _uniffi_error_converter,
        )





class _UniffiFfiConverterTypeUSaintSessionBuilder:
    @staticmethod
    def lift(value: int) -> USaintSessionBuilder:
        return USaintSessionBuilder._uniffi_make_instance(value)

    @staticmethod
    def check_lower(value: USaintSessionBuilder):
        if not isinstance(value, USaintSessionBuilder):
            raise TypeError("Expected USaintSessionBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: USaintSessionBuilder) -> ctypes.c_uint64:
        return value._uniffi_clone_handle()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer) -> USaintSessionBuilder:
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw handle value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: USaintSessionBuilder, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

class _UniffiFfiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

__all__ = [
    "InternalError",
    "RusaintError",
    "YearSemester",
    "ChapelApplication",
    "ChapelApplicationProtocol",
    "USaintSession",
    "USaintSessionProtocol",
    "ChapelApplicationBuilder",
    "ChapelApplicationBuilderProtocol",
    "CourseGradesApplication",
    "CourseGradesApplicationProtocol",
    "CourseGradesApplicationBuilder",
    "CourseGradesApplicationBuilderProtocol",
    "CourseScheduleApplication",
    "CourseScheduleApplicationProtocol",
    "CourseScheduleApplicationBuilder",
    "CourseScheduleApplicationBuilderProtocol",
    "GraduationRequirementsApplication",
    "GraduationRequirementsApplicationProtocol",
    "GraduationRequirementsApplicationBuilder",
    "GraduationRequirementsApplicationBuilderProtocol",
    "LectureAssessmentApplication",
    "LectureAssessmentApplicationProtocol",
    "LectureAssessmentApplicationBuilder",
    "LectureAssessmentApplicationBuilderProtocol",
    "PersonalCourseScheduleApplication",
    "PersonalCourseScheduleApplicationProtocol",
    "PersonalCourseScheduleApplicationBuilder",
    "PersonalCourseScheduleApplicationBuilderProtocol",
    "ScholarshipsApplication",
    "ScholarshipsApplicationProtocol",
    "ScholarshipsApplicationBuilder",
    "ScholarshipsApplicationBuilderProtocol",
    "StudentInformationApplication",
    "StudentInformationApplicationProtocol",
    "StudentInformationApplicationBuilder",
    "StudentInformationApplicationBuilderProtocol",
    "USaintSessionBuilder",
    "USaintSessionBuilderProtocol",
]