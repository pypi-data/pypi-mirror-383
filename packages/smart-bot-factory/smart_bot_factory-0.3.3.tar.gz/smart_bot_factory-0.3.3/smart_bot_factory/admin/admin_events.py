# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π

import logging
from datetime import datetime, time, timezone
from dateutil.relativedelta import relativedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from ..aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
import pytz

logger = logging.getLogger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from ..core.states import AdminStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
admin_events_router = Router()

def setup_admin_events_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
    dp.include_router(admin_events_router)

@admin_events_router.message(Command(commands=["—Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ", "create_event"]))
async def create_event_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    from ..handlers.handlers import get_global_var
    admin_manager = get_global_var('admin_manager')
    
    if not admin_manager.is_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.create_event_name)
    
    await message.answer(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        "_(–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è)_",
        parse_mode='Markdown'
    )

@admin_events_router.message(AdminStates.create_event_name)
async def process_event_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    from ..handlers.handlers import get_global_var
    
    event_name = message.text.strip()
    
    if not event_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
    supabase_client = get_global_var('supabase_client')
    name_exists = await supabase_client.check_event_name_exists(event_name)
    
    if name_exists:
        await message.answer(
            f"‚ö†Ô∏è **–°–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{event_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è!**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n\n"
            f"üí° _–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è._",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(event_name=event_name)
    await state.set_state(AdminStates.create_event_date)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar = SimpleCalendar(locale='ru', today_btn='–°–µ–≥–æ–¥–Ω—è', cancel_btn='–û—Ç–º–µ–Ω–∞')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç–∞–º–∏ –æ—Ç –≤—á–µ—Ä–∞ –¥–æ +12 –º–µ—Å—è—Ü–µ–≤ (—á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
    calendar.set_dates_range(datetime.now() + relativedelta(days=-1), datetime.now() + relativedelta(months=+12))
    calendar_markup = await calendar.start_calendar()
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: **{event_name}**\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=calendar_markup,
        parse_mode='Markdown'
    )

@admin_events_router.callback_query(SimpleCalendarCallback.filter(), AdminStates.create_event_date)
async def process_event_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    calendar = SimpleCalendar(locale='ru', cancel_btn='–û—Ç–º–µ–Ω–∞', today_btn='–°–µ–≥–æ–¥–Ω—è')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç–∞–º–∏ –æ—Ç –≤—á–µ—Ä–∞ –¥–æ +12 –º–µ—Å—è—Ü–µ–≤ (—á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
    calendar.set_dates_range(datetime.now() + relativedelta(days=-1), datetime.now() + relativedelta(months=+12))
    selected, date = await calendar.process_selection(callback_query, callback_data)
    
    if selected == 'cancel':
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        await state.clear()
        await callback_query.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            parse_mode='Markdown'
        )
    elif selected:
        # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ (True –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä)
        await state.update_data(event_date=date.strftime('%Y-%m-%d'))
        await state.set_state(AdminStates.create_event_time)
        
        await callback_query.message.edit_text(
            f"‚úÖ –î–∞—Ç–∞: **{date.strftime('%d.%m.%Y')}**\n\n"
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "_(–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30)_",
            parse_mode='Markdown'
        )
    # –ï—Å–ª–∏ selected is False/None - —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

@admin_events_router.message(AdminStates.create_event_time)
async def process_event_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    time_str = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        event_time = datetime.strptime(time_str, '%H:%M').time()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM\n"
            "_(–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30)_",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    await state.update_data(event_time=time_str)
    await state.set_state(AdminStates.create_event_segment)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    from ..handlers.handlers import get_global_var
    supabase_client = get_global_var('supabase_client')
    
    segments = await supabase_client.get_all_segments()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
    keyboard = []
    
    # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º" –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    keyboard.append([
        InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="segment:all")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    if segments:
        for i in range(0, len(segments), 2):
            row = []
            row.append(InlineKeyboardButton(
                text=f"üë• {segments[i]}", 
                callback_data=f"segment:{segments[i]}"
            ))
            if i + 1 < len(segments):
                row.append(InlineKeyboardButton(
                    text=f"üë• {segments[i+1]}", 
                    callback_data=f"segment:{segments[i+1]}"
                ))
            keyboard.append(row)
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è: **{time_str}**\n\n"
        f"üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        f"_(–ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)})_",
        reply_markup=markup,
        parse_mode='Markdown'
    )

@admin_events_router.callback_query(F.data.startswith("segment:"), AdminStates.create_event_segment)
async def process_event_segment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    segment_data = callback_query.data.split(":", 1)[1]
    
    # segment_data = "all" –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    segment_name = None if segment_data == "all" else segment_data
    segment_display = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" if segment_data == "all" else segment_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
    await state.update_data(segment=segment_name, segment_display=segment_display)
    await state.set_state(AdminStates.create_event_message)
    
    await callback_query.message.edit_text(
        f"‚úÖ –°–µ–≥–º–µ–Ω—Ç: **{segment_display}**\n\n"
        "üí¨ **–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "üì∏ _–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é **—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ** ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ_\n\n"
        "üìÑ _–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å **PDF –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã**, –≤—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ_",
        parse_mode='Markdown'
    )

@admin_events_router.message(AdminStates.create_event_message)
async def process_event_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    event_message = message.text or message.caption or ""
    
    if not event_message.strip():
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ media_group_id –µ—Å–ª–∏ –µ—Å—Ç—å
    data_to_update = {'event_message': event_message}
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ (media group), —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        data_to_update['media_group_id'] = message.media_group_id
        data_to_update['waiting_for_album'] = True
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–ª—å–±–æ–º —Å ID: {message.media_group_id}")
    
    await state.update_data(**data_to_update)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    files = []
    if message.photo:
        import os
        from ..handlers.handlers import get_global_var
        bot = get_global_var('bot')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        temp_dir = "temp_event_files"
        os.makedirs(temp_dir, exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await bot.get_file(photo.file_id)
        file_path = os.path.join(temp_dir, f"{photo.file_id}.jpg")
        await bot.download_file(file.file_path, file_path)
        
        files.append({
            'type': 'photo',
            'file_path': file_path,
            'name': f"{photo.file_id}.jpg",
            'stage': 'with_message',
            'has_caption': bool(message.caption)  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        })
        logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (with_message)")
    
    await state.update_data(files=files)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∞–ª—å–±–æ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤
    if not message.media_group_id:
        await state.set_state(AdminStates.create_event_files)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="files:skip")]
        ])
        
        await message.answer(
            "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
            "üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "üìÅ –§–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
            "üé• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            "üñº –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n\n"
            "üí° _–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏_\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    # –ï—Å–ª–∏ –∞–ª—å–±–æ–º - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º handler

@admin_events_router.message(AdminStates.create_event_message, F.photo)
async def process_album_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞"""
    import os
    from ..handlers.handlers import get_global_var
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–ª—å–±–æ–º –∏ –º—ã –∂–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
    if not data.get('waiting_for_album'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∞–ª—å–±–æ–º
    if message.media_group_id != data.get('media_group_id'):
        return
    
    bot = get_global_var('bot')
    files = data.get('files', [])
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    temp_dir = "temp_event_files"
    os.makedirs(temp_dir, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = os.path.join(temp_dir, f"{photo.file_id}.jpg")
    await bot.download_file(file.file_path, file_path)
    
    files.append({
        'type': 'photo',
        'file_path': file_path,
        'name': f"{photo.file_id}.jpg",
        'stage': 'with_message',
        'has_caption': False  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    })
    
    await state.update_data(files=files)
    logger.info(f"–§–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (with_message, –≤—Å–µ–≥–æ: {len(files)})")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
    import asyncio
    await asyncio.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –µ—â–µ –∂–¥–µ–º –∞–ª—å–±–æ–º (–Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ)
    data = await state.get_data()
    if data.get('waiting_for_album') and data.get('media_group_id') == message.media_group_id:
        # –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ–ø —Ñ–∞–π–ª–æ–≤
        await state.update_data(waiting_for_album=False)
        await state.set_state(AdminStates.create_event_files)
        
        files_count = len(data.get('files', []))
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="files:skip")]
        ])
        
        await message.answer(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –∏ {files_count} —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
            "üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "üìÅ –§–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
            "üé• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n\n"
            "üí° _–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏_\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

@admin_events_router.callback_query(F.data == "album:done", AdminStates.create_event_message)
async def finish_album_collection(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞"""
    await state.update_data(waiting_for_album=False)
    await state.set_state(AdminStates.create_event_files)
    
    data = await state.get_data()
    files_count = len(data.get('files', []))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="files:skip")]
    ])
    
    await callback_query.message.edit_text(
        f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –∏ {files_count} —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
        "üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "üìÅ –§–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
        "üé• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n\n"
        "üí° _–≠—Ç–∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è_\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@admin_events_router.message(AdminStates.create_event_files, F.document | F.photo | F.video)
async def process_event_files(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
    import os
    from ..handlers.handlers import get_global_var
    
    data = await state.get_data()
    files = data.get('files', [])
    bot = get_global_var('bot')
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    temp_dir = "temp_event_files"
    os.makedirs(temp_dir, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    if message.document:
        file = await bot.get_file(message.document.file_id)
        file_path = os.path.join(temp_dir, f"{message.document.file_id}_{message.document.file_name}")
        await bot.download_file(file.file_path, file_path)
        
        files.append({
            'type': 'document',
            'file_path': file_path,
            'name': message.document.file_name,
            'stage': 'after_message'
        })
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} (after_message)")
        
    elif message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = os.path.join(temp_dir, f"{photo.file_id}.jpg")
        await bot.download_file(file.file_path, file_path)
        
        files.append({
            'type': 'photo',
            'file_path': file_path,
            'name': f"{photo.file_id}.jpg",
            'stage': 'after_message'
        })
        logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (after_message)")
        
    elif message.video:
        file = await bot.get_file(message.video.file_id)
        file_path = os.path.join(temp_dir, f"{message.video.file_id}.mp4")
        await bot.download_file(file.file_path, file_path)
        
        files.append({
            'type': 'video',
            'file_path': file_path,
            'name': f"{message.video.file_id}.mp4",
            'stage': 'after_message'
        })
        logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (after_message)")
    
    await state.update_data(files=files)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", callback_data="files:done")]
    ])
    
    await message.answer(
        f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ: {len(files)})\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@admin_events_router.callback_query(F.data.startswith("files:"), AdminStates.create_event_files)
async def process_files_action(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
    action = callback_query.data.split(":", 1)[1]
    
    data = await state.get_data()
    files = data.get('files', [])
    
    if action == "skip":
        files = []
        await state.update_data(files=files)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(AdminStates.create_event_confirm)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    event_date = data.get('event_date')
    event_time = data.get('event_time')
    naive_datetime = datetime.strptime(f"{event_date} {event_time}", '%Y-%m-%d %H:%M')
    moscow_datetime = MOSCOW_TZ.localize(naive_datetime)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
    from aiogram.types import FSInputFile, InputMediaPhoto, InputMediaVideo
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    files_with_msg = [f for f in files if f.get('stage') == 'with_message']
    files_after = [f for f in files if f.get('stage') == 'after_message']
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    if files_with_msg:
        media_group = []
        first_file = True
        
        for file_info in files_with_msg:
            if file_info['type'] == 'photo':
                media = InputMediaPhoto(
                    media=FSInputFile(file_info['file_path']),
                    caption=data.get('event_message') if first_file else None,
                    parse_mode='Markdown' if first_file else None
                )
                media_group.append(media)
            elif file_info['type'] == 'video':
                media = InputMediaVideo(
                    media=FSInputFile(file_info['file_path']),
                    caption=data.get('event_message') if first_file else None,
                    parse_mode='Markdown' if first_file else None
                )
                media_group.append(media)
            first_file = False
        
        if media_group:
            await callback_query.message.answer_media_group(media_group)
    else:
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback_query.message.answer(
            data.get('event_message'),
            parse_mode='Markdown'
        )
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_info in files_after:
        if file_info['type'] == 'document':
            await callback_query.message.answer_document(
                FSInputFile(file_info['file_path'])
            )
        elif file_info['type'] == 'photo':
            await callback_query.message.answer_photo(
                FSInputFile(file_info['file_path'])
            )
        elif file_info['type'] == 'video':
            await callback_query.message.answer_video(
                FSInputFile(file_info['file_path'])
            )
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    summary = (
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: **{data.get('event_name')}**\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: **{moscow_datetime.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)**\n"
        f"üë• –°–µ–≥–º–µ–Ω—Ç: **{data.get('segment_display')}**\n"
        f"üìé –§–∞–π–ª–æ–≤: **{len(files)}**\n\n"
        f"‚¨ÜÔ∏è _–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {data.get('segment_display', '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')}_\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm:yes"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no")
        ]
    ])
    
    await callback_query.message.edit_text(
        summary,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@admin_events_router.callback_query(F.data.startswith("confirm:"), AdminStates.create_event_confirm)
async def process_event_confirmation(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    action = callback_query.data.split(":", 1)[1]
    
    if action == "no":
        await state.clear()
        await callback_query.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    data = await state.get_data()
    
    from ..handlers.handlers import get_global_var
    supabase_client = get_global_var('supabase_client')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    event_date = data.get('event_date')
    event_time = data.get('event_time')
    
    # –°–æ–∑–¥–∞–µ–º naive datetime –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    naive_datetime = datetime.strptime(f"{event_date} {event_time}", '%Y-%m-%d %H:%M')
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    moscow_datetime = MOSCOW_TZ.localize(naive_datetime)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    utc_datetime = moscow_datetime.astimezone(pytz.UTC)
    
    logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: –ú–æ—Å–∫–≤–∞={moscow_datetime.strftime('%d.%m.%Y %H:%M %Z')}, UTC={utc_datetime.strftime('%d.%m.%Y %H:%M %Z')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Supabase Storage
    import os
    event_name = data.get('event_name')
    files = data.get('files', [])
    uploaded_files = []
    
    try:
        for file_info in files:
            # –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            with open(file_info['file_path'], 'rb') as f:
                file_bytes = f.read()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
            storage_info = await supabase_client.upload_event_file(
                event_name=event_name,
                file_data=file_bytes,
                file_name=file_info['name']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó file_id –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏)
            uploaded_files.append({
                'type': file_info['type'],
                'name': file_info['name'],
                'storage_path': storage_info['storage_path'],
                'stage': file_info['stage'],
                'has_caption': file_info.get('has_caption', False)
            })
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_info['file_path'])
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_info['file_path']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤ Storage –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_name}'")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Storage: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            await supabase_client.delete_event_files(event_name)
        except:
            pass
        raise
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–æ–≤
    event_data = {
        'segment': data.get('segment'),
        'message': data.get('event_message'),
        'files': uploaded_files  # ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–≤ UTC)
        event_id = await supabase_client.save_admin_event(
            event_name=event_name,
            event_data=event_data,
            scheduled_datetime=utc_datetime
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: `{data.get('event_name')}`\n"
            f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: **{moscow_datetime.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)**\n"
            f"üë• –°–µ–≥–º–µ–Ω—Ç: **{data.get('segment_display')}**\n\n"
            f"üí° _–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è_",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.set_state(AdminStates.admin_mode)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:\n`{str(e)}`",
            parse_mode='Markdown'
        )
        await state.clear()
        await state.set_state(AdminStates.admin_mode)

@admin_events_router.message(Command(commands=["—Å–ø–∏—Å–æ–∫_—Å–æ–±—ã—Ç–∏–π", "list_events"]))
async def list_events_command(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    from ..handlers.handlers import get_global_var
    admin_manager = get_global_var('admin_manager')
    supabase_client = get_global_var('supabase_client')
    
    if not admin_manager.is_admin(message.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending —Å–æ–±—ã—Ç–∏—è (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
        events = await supabase_client.get_admin_events(status='pending')
        
        if not events:
            await message.answer(
                "üìã **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create_event` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        text_parts = [
            f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è** ({len(events)})\n"
        ]
        
        for idx, event in enumerate(events, 1):
            event_name = event['event_type']
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            utc_time = datetime.fromisoformat(event['scheduled_at'].replace('Z', '+00:00'))
            moscow_time = utc_time.astimezone(MOSCOW_TZ)
            
            # –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            text_parts.append(
                f"üìå **{idx}.** `{event_name}`\n"
                f"    üïê {moscow_time.strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö\n"
            )
        
        text_parts.append(
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí° _–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è_\n"
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: `/delete_event –Ω–∞–∑–≤–∞–Ω–∏–µ`"
        )
        
        await message.answer(
            "\n".join(text_parts),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:\n`{str(e)}`",
            parse_mode='Markdown'
        )


@admin_events_router.message(Command(commands=["—É–¥–∞–ª–∏—Ç—å_—Å–æ–±—ã—Ç–∏–µ", "delete_event"]))
async def delete_event_command(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    from ..handlers.handlers import get_global_var
    admin_manager = get_global_var('admin_manager')
    supabase_client = get_global_var('supabase_client')
    
    if not admin_manager.is_admin(message.from_user.id):
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
            "`/delete_event –Ω–∞–∑–≤–∞–Ω–∏–µ`\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π",
            parse_mode='Markdown'
        )
        return
    
    event_name = parts[1].strip()
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ pending —Å–æ–±—ã—Ç–∏—è)
        response = supabase_client.client.table('scheduled_events').update({
            'status': 'cancelled'
        }).eq('event_type', event_name).eq(
            'event_category', 'admin_event'
        ).eq('status', 'pending').execute()
        
        if response.data:
            await message.answer(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ `{event_name}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='Markdown'
            )
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{event_name}'")
        else:
            await message.answer(
                f"‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º `{event_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:\n`{str(e)}`",
            parse_mode='Markdown'
        )

