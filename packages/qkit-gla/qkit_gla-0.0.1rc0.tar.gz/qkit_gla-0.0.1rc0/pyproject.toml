[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qkit-gla"
version = "0.0.1c"
description = "A quantum measurement toolkit for superconducting qubits and resonators"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Wridhdhisom Karar", email = "w.karar.1@research.gla.ac.uk"}
]
maintainers = [
    {name = "Quantum Circuits Group Glasgow", email = "eng-weideslab@gla.ac.uk"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
keywords = ["physics", "quantum", "measurement", "superconducting", "resonator"]
requires-python = ">=3.9"
dependencies = [
    "ipython>=8.12.3",
    "setuptools>=75.8.0",
    "h5py==3.8.0",
    "pyqt5==5.15.9",
    "pyqtgraph==0.13.3",
    "PyVISA==1.13.0",
    "PyVISA-py==0.6.3",
    "zhinst==23.2.4",
    "pyzmq==25.0.2",
    "numpy==1.24.2",
    "scipy==1.10.1",
    "jupyterlab==3.6.3",
    "jupyterlab-templates==0.4.0",
    "ipywidgets==8.0.6",
    "matplotlib==3.7.1",
    "uncertainties==3.1.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "autoflake>=2.0.0",
    "pyupgrade>=3.0.0",
    "vulture>=2.0.0",
    "pre-commit>=3.0.0",
    "pip-tools>=7.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]
all = [
    "qkit[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/qkitgroup/qkit"
Documentation = "https://qkit.readthedocs.io"
Repository = "https://github.com/qkitgroup/qkit"
Issues = "https://github.com/qkitgroup/qkit/issues"

[project.scripts]
qkit = "qkit.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["qkit*"]
exclude = ["tests*", "docs*", "*.tests*", "*.tests"]

[tool.setuptools.package-data]
qkit = ["*.json", "*.yaml", "*.yml", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ["py39", "py310"]
include = '\.pyi?$'
extend-exclude = """
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
"""

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["qkit"]

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=qkit --cov-report=term-missing"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["qkit"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
