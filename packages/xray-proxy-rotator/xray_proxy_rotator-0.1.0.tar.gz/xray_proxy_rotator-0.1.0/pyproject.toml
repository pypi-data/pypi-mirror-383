[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "xray-proxy-rotator"
version = "0.1.0"
description = "Async VMESS proxy rotation manager with automatic subscription updates and connection testing"
readme = "README.md"
authors = [{ name = "Keyhan Kamyar", email = "keyhankamyar@gmail.com" }]
maintainers = [{ name = "Keyhan Kamyar", email = "keyhankamyar@gmail.com" }]
license = { text = "MIT" }
keywords = [
    "proxy",
    "vmess",
    "rotation",
    "xray",
    "scraping",
    "async",
    "subscription",
    "proxy-rotation",
    "web-scraping",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Framework :: AsyncIO",
]
requires-python = ">=3.11"
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.0",
    "build>=1.0.0",
    "twine>=5.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/keyhankamyar/ProxyRotator"
Documentation = "https://github.com/keyhankamyar/ProxyRotator#readme"
Repository = "https://github.com/keyhankamyar/ProxyRotator"
Issues = "https://github.com/keyhankamyar/ProxyRotator/issues"
Changelog = "https://github.com/keyhankamyar/ProxyRotator/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["proxy_rotator", "proxy_rotator.protocols"]

[tool.setuptools.package-data]
proxy_rotator = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "B905", # zip without explicit strict parameter
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # unused imports in __init__.py

[tool.ruff.isort]
known-first-party = ["proxy_rotator"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = ["httpx.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=proxy_rotator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["proxy_rotator"]
branch = true
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]