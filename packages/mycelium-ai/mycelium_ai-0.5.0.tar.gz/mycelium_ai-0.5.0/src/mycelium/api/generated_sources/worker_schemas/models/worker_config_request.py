# coding: utf-8

"""
    Mycelium Worker (Client) API

    Configuration API for Mycelium client workers

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, ConfigDict

class WorkerConfigRequest(BaseModel):
    """
    WorkerConfigRequest
    """
    client: Dict[str, Any] = Field(...)
    client_api: Dict[str, Any] = Field(...)
    clap: Dict[str, Any] = Field(...)
    logging: Dict[str, Any] = Field(...)
    __properties = ["client", "client_api", "clap", "logging"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkerConfigRequest:
        """Create an instance of WorkerConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkerConfigRequest:
        """Create an instance of WorkerConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkerConfigRequest.model_validate(obj)

        _obj = WorkerConfigRequest.model_validate({
            "client": obj.get("client"),
            "client_api": obj.get("client_api"),
            "clap": obj.get("clap"),
            "logging": obj.get("logging")
        })
        return _obj


