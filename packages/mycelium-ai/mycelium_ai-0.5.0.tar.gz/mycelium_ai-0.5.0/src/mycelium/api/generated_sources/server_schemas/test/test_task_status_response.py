# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from mycelium.api.generated_sources.server_schemas.models.task_status_response import TaskStatusResponse  # noqa: E501

class TestTaskStatusResponse(unittest.TestCase):
    """TaskStatusResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskStatusResponse:
        """Test TaskStatusResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskStatusResponse`
        """
        model = TaskStatusResponse()  # noqa: E501
        if include_optional:
            return TaskStatusResponse(
                task_id = '',
                status = '',
                track_id = '',
                started_at = '',
                completed_at = '',
                error_message = '',
                search_results = [
                    mycelium.api.generated_sources.server_schemas.models.search_result_response.SearchResultResponse(
                        track = mycelium.api.generated_sources.server_schemas.models.track_response.TrackResponse(
                            artist = '', 
                            album = '', 
                            title = '', 
                            filepath = '', 
                            media_server_rating_key = '', 
                            media_server_type = '', ), 
                        similarity_score = 1.337, 
                        distance = 1.337, )
                    ]
            )
        else:
            return TaskStatusResponse(
                task_id = '',
                status = '',
        )
        """

    def testTaskStatusResponse(self):
        """Test TaskStatusResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
