# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, ConfigDict

class ScanLibraryResponse(BaseModel):
    """
    ScanLibraryResponse
    """
    message: StrictStr = Field(...)
    total_tracks: StrictInt = Field(...)
    new_tracks: StrictInt = Field(...)
    updated_tracks: StrictInt = Field(...)
    scan_timestamp: StrictStr = Field(...)
    __properties = ["message", "total_tracks", "new_tracks", "updated_tracks", "scan_timestamp"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScanLibraryResponse:
        """Create an instance of ScanLibraryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScanLibraryResponse:
        """Create an instance of ScanLibraryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScanLibraryResponse.model_validate(obj)

        _obj = ScanLibraryResponse.model_validate({
            "message": obj.get("message"),
            "total_tracks": obj.get("total_tracks"),
            "new_tracks": obj.get("new_tracks"),
            "updated_tracks": obj.get("updated_tracks"),
            "scan_timestamp": obj.get("scan_timestamp")
        })
        return _obj


