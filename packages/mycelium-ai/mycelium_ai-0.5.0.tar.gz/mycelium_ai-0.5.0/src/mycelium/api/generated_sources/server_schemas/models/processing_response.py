# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator, ConfigDict

class ProcessingResponse(BaseModel):
    """
    ProcessingResponse
    """
    status: StrictStr = Field(...)
    message: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = None
    track_id: Optional[StrictStr] = None
    query: Optional[StrictStr] = None
    filename: Optional[StrictStr] = None
    active_workers: Optional[StrictInt] = None
    tasks_created: Optional[StrictInt] = None
    confirmation_required: Optional[StrictBool] = None
    __properties = ["status", "message", "task_id", "track_id", "query", "filename", "active_workers", "tasks_created", "confirmation_required"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('processing', 'confirmation_required', 'already_running', 'worker_processing_started', 'worker_error', 'no_workers', 'server_started',):
            raise ValueError("must be one of enum values ('processing', 'confirmation_required', 'already_running', 'worker_processing_started', 'worker_error', 'no_workers', 'server_started')")
        return value

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessingResponse:
        """Create an instance of ProcessingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessingResponse:
        """Create an instance of ProcessingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessingResponse.model_validate(obj)

        _obj = ProcessingResponse.model_validate({
            "status": obj.get("status"),
            "message": obj.get("message"),
            "task_id": obj.get("task_id"),
            "track_id": obj.get("track_id"),
            "query": obj.get("query"),
            "filename": obj.get("filename"),
            "active_workers": obj.get("active_workers"),
            "tasks_created": obj.get("tasks_created"),
            "confirmation_required": obj.get("confirmation_required")
        })
        return _obj


