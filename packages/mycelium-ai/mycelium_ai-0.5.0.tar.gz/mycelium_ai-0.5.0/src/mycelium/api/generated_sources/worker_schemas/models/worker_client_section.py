# coding: utf-8

"""
    Mycelium Worker (Client) API

    Configuration API for Mycelium client workers

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, ConfigDict

class WorkerClientSection(BaseModel):
    """
    WorkerClientSection
    """
    server_host: StrictStr = Field(...)
    server_port: StrictInt = Field(...)
    download_queue_size: StrictInt = Field(...)
    job_queue_size: StrictInt = Field(...)
    poll_interval: Union[StrictFloat, StrictInt] = Field(...)
    download_workers: StrictInt = Field(...)
    gpu_batch_size: StrictInt = Field(...)
    __properties = ["server_host", "server_port", "download_queue_size", "job_queue_size", "poll_interval", "download_workers", "gpu_batch_size"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkerClientSection:
        """Create an instance of WorkerClientSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkerClientSection:
        """Create an instance of WorkerClientSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkerClientSection.model_validate(obj)

        _obj = WorkerClientSection.model_validate({
            "server_host": obj.get("server_host"),
            "server_port": obj.get("server_port"),
            "download_queue_size": obj.get("download_queue_size"),
            "job_queue_size": obj.get("job_queue_size"),
            "poll_interval": obj.get("poll_interval"),
            "download_workers": obj.get("download_workers"),
            "gpu_batch_size": obj.get("gpu_batch_size")
        })
        return _obj


