# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, ConfigDict

class CreatePlaylistRequest(BaseModel):
    """
    CreatePlaylistRequest
    """
    name: StrictStr = Field(...)
    track_ids: conlist(StrictStr) = Field(...)
    batch_size: Optional[StrictInt] = 100
    __properties = ["name", "track_ids", "batch_size"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePlaylistRequest:
        """Create an instance of CreatePlaylistRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePlaylistRequest:
        """Create an instance of CreatePlaylistRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePlaylistRequest.model_validate(obj)

        _obj = CreatePlaylistRequest.model_validate({
            "name": obj.get("name"),
            "track_ids": obj.get("track_ids"),
            "batch_size": obj.get("batch_size") if obj.get("batch_size") is not None else 100
        })
        return _obj


