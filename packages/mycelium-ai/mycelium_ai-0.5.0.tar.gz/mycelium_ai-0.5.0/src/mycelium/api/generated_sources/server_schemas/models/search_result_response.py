# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, ConfigDict
from mycelium.api.generated_sources.server_schemas.models.track_response import TrackResponse

class SearchResultResponse(BaseModel):
    """
    SearchResultResponse
    """
    track: TrackResponse = Field(...)
    similarity_score: Union[StrictFloat, StrictInt] = Field(...)
    distance: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["track", "similarity_score", "distance"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchResultResponse:
        """Create an instance of SearchResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of track
        if self.track:
            _dict['track'] = self.track.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchResultResponse:
        """Create an instance of SearchResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchResultResponse.model_validate(obj)

        _obj = SearchResultResponse.model_validate({
            "track": TrackResponse.from_dict(obj.get("track")) if obj.get("track") is not None else None,
            "similarity_score": obj.get("similarity_score"),
            "distance": obj.get("distance")
        })
        return _obj


