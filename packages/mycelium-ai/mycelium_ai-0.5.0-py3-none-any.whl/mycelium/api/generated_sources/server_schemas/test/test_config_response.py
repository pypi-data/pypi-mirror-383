# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from mycelium.api.generated_sources.server_schemas.models.config_response import ConfigResponse  # noqa: E501

class TestConfigResponse(unittest.TestCase):
    """ConfigResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigResponse:
        """Test ConfigResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigResponse`
        """
        model = ConfigResponse()  # noqa: E501
        if include_optional:
            return ConfigResponse(
                media_server = mycelium.api.generated_sources.server_schemas.models.media_server_section.MediaServerSection(
                    type = '', ),
                plex = mycelium.api.generated_sources.server_schemas.models.plex_section.PlexSection(
                    url = '', 
                    token = '', 
                    music_library_name = '', ),
                server = mycelium.api.generated_sources.server_schemas.models.server_section.ServerSection(
                    gpu_batch_size = 56, ),
                api = mycelium.api.generated_sources.server_schemas.models.api_section.APISection(
                    host = '', 
                    port = 56, 
                    reload = True, ),
                chroma = mycelium.api.generated_sources.server_schemas.models.chroma_section.ChromaSection(
                    collection_name = '', 
                    batch_size = 56, ),
                clap = mycelium.api.generated_sources.server_schemas.models.clap_section.ClapSection(
                    model_id = '', 
                    target_sr = 56, 
                    chunk_duration_s = 56, 
                    num_chunks = 56, 
                    max_load_duration_s = 56, ),
                logging = mycelium.api.generated_sources.server_schemas.models.logging_section.LoggingSection(
                    level = '', )
            )
        else:
            return ConfigResponse(
                media_server = mycelium.api.generated_sources.server_schemas.models.media_server_section.MediaServerSection(
                    type = '', ),
                plex = mycelium.api.generated_sources.server_schemas.models.plex_section.PlexSection(
                    url = '', 
                    token = '', 
                    music_library_name = '', ),
                server = mycelium.api.generated_sources.server_schemas.models.server_section.ServerSection(
                    gpu_batch_size = 56, ),
                api = mycelium.api.generated_sources.server_schemas.models.api_section.APISection(
                    host = '', 
                    port = 56, 
                    reload = True, ),
                chroma = mycelium.api.generated_sources.server_schemas.models.chroma_section.ChromaSection(
                    collection_name = '', 
                    batch_size = 56, ),
                clap = mycelium.api.generated_sources.server_schemas.models.clap_section.ClapSection(
                    model_id = '', 
                    target_sr = 56, 
                    chunk_duration_s = 56, 
                    num_chunks = 56, 
                    max_load_duration_s = 56, ),
                logging = mycelium.api.generated_sources.server_schemas.models.logging_section.LoggingSection(
                    level = '', ),
        )
        """

    def testConfigResponse(self):
        """Test ConfigResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
