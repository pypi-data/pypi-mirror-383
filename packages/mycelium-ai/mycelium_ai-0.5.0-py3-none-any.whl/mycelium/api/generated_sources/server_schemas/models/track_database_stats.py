# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, ConfigDict

class TrackDatabaseStats(BaseModel):
    """
    TrackDatabaseStats
    """
    total_tracks: StrictInt = Field(...)
    processed_tracks: StrictInt = Field(...)
    unprocessed_tracks: StrictInt = Field(...)
    progress_percentage: Union[StrictFloat, StrictInt] = Field(...)
    is_processing: Optional[StrictBool] = None
    __properties = ["total_tracks", "processed_tracks", "unprocessed_tracks", "progress_percentage", "is_processing"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackDatabaseStats:
        """Create an instance of TrackDatabaseStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackDatabaseStats:
        """Create an instance of TrackDatabaseStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackDatabaseStats.model_validate(obj)

        _obj = TrackDatabaseStats.model_validate({
            "total_tracks": obj.get("total_tracks"),
            "processed_tracks": obj.get("processed_tracks"),
            "unprocessed_tracks": obj.get("unprocessed_tracks"),
            "progress_percentage": obj.get("progress_percentage"),
            "is_processing": obj.get("is_processing")
        })
        return _obj


