# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, ConfigDict

class ConfigRequest(BaseModel):
    """
    ConfigRequest
    """
    media_server: Dict[str, Any] = Field(...)
    plex: Dict[str, Any] = Field(...)
    api: Dict[str, Any] = Field(...)
    chroma: Dict[str, Any] = Field(...)
    clap: Dict[str, Any] = Field(...)
    server: Dict[str, Any] = Field(...)
    logging: Dict[str, Any] = Field(...)
    database: Optional[Dict[str, Any]] = None
    __properties = ["media_server", "plex", "api", "chroma", "clap", "server", "logging", "database"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigRequest:
        """Create an instance of ConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigRequest:
        """Create an instance of ConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigRequest.model_validate(obj)

        _obj = ConfigRequest.model_validate({
            "media_server": obj.get("media_server"),
            "plex": obj.get("plex"),
            "api": obj.get("api"),
            "chroma": obj.get("chroma"),
            "clap": obj.get("clap"),
            "server": obj.get("server"),
            "logging": obj.get("logging"),
            "database": obj.get("database")
        })
        return _obj


