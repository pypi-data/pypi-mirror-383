# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, ConfigDict
from mycelium.api.generated_sources.server_schemas.models.track_database_stats import TrackDatabaseStats

class LibraryStatsResponse(BaseModel):
    """
    LibraryStatsResponse
    """
    total_embeddings: StrictInt = Field(...)
    collection_name: StrictStr = Field(...)
    database_path: StrictStr = Field(...)
    track_database_stats: Optional[TrackDatabaseStats] = None
    __properties = ["total_embeddings", "collection_name", "database_path", "track_database_stats"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LibraryStatsResponse:
        """Create an instance of LibraryStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of track_database_stats
        if self.track_database_stats:
            _dict['track_database_stats'] = self.track_database_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LibraryStatsResponse:
        """Create an instance of LibraryStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LibraryStatsResponse.model_validate(obj)

        _obj = LibraryStatsResponse.model_validate({
            "total_embeddings": obj.get("total_embeddings"),
            "collection_name": obj.get("collection_name"),
            "database_path": obj.get("database_path"),
            "track_database_stats": TrackDatabaseStats.from_dict(obj.get("track_database_stats")) if obj.get("track_database_stats") is not None else None
        })
        return _obj


