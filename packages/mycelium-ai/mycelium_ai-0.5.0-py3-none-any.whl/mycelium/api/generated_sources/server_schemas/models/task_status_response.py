# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, ConfigDict
from mycelium.api.generated_sources.server_schemas.models.search_result_response import SearchResultResponse

class TaskStatusResponse(BaseModel):
    """
    TaskStatusResponse
    """
    task_id: StrictStr = Field(...)
    status: StrictStr = Field(...)
    track_id: Optional[StrictStr] = None
    started_at: Optional[StrictStr] = None
    completed_at: Optional[StrictStr] = None
    error_message: Optional[StrictStr] = None
    search_results: Optional[conlist(SearchResultResponse)] = None
    __properties = ["task_id", "status", "track_id", "started_at", "completed_at", "error_message", "search_results"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaskStatusResponse:
        """Create an instance of TaskStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in search_results (list)
        _items = []
        if self.search_results:
            for _item in self.search_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['search_results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaskStatusResponse:
        """Create an instance of TaskStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TaskStatusResponse.model_validate(obj)

        _obj = TaskStatusResponse.model_validate({
            "task_id": obj.get("task_id"),
            "status": obj.get("status"),
            "track_id": obj.get("track_id"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "error_message": obj.get("error_message"),
            "search_results": [SearchResultResponse.from_dict(_item) for _item in obj.get("search_results")] if obj.get("search_results") is not None else None
        })
        return _obj


