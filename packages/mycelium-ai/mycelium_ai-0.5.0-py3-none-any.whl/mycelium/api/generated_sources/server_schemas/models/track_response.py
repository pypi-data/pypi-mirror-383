# coding: utf-8

"""
    Mycelium API

    Plex music collection and recommendation system using CLAP embeddings

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, ConfigDict

class TrackResponse(BaseModel):
    """
    TrackResponse
    """
    artist: StrictStr = Field(...)
    album: StrictStr = Field(...)
    title: StrictStr = Field(...)
    filepath: StrictStr = Field(...)
    media_server_rating_key: StrictStr = Field(...)
    media_server_type: StrictStr = Field(...)
    __properties = ["artist", "album", "title", "filepath", "media_server_rating_key", "media_server_type"]

    model_config = {"populate_by_name": True, "validate_assignment": True}
    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackResponse:
        """Create an instance of TrackResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackResponse:
        """Create an instance of TrackResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackResponse.model_validate(obj)

        _obj = TrackResponse.model_validate({
            "artist": obj.get("artist"),
            "album": obj.get("album"),
            "title": obj.get("title"),
            "filepath": obj.get("filepath"),
            "media_server_rating_key": obj.get("media_server_rating_key"),
            "media_server_type": obj.get("media_server_type")
        })
        return _obj


