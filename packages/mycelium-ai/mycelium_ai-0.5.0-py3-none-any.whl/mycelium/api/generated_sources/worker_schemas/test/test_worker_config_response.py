# coding: utf-8

"""
    Mycelium Worker (Client) API

    Configuration API for Mycelium client workers

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from mycelium.api.generated_sources.worker_schemas.models.worker_config_response import WorkerConfigResponse  # noqa: E501

class TestWorkerConfigResponse(unittest.TestCase):
    """WorkerConfigResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkerConfigResponse:
        """Test WorkerConfigResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkerConfigResponse`
        """
        model = WorkerConfigResponse()  # noqa: E501
        if include_optional:
            return WorkerConfigResponse(
                client = mycelium.api.generated_sources.worker_schemas.models.worker_client_section.WorkerClientSection(
                    server_host = '', 
                    server_port = 56, 
                    download_queue_size = 56, 
                    job_queue_size = 56, 
                    poll_interval = 1.337, 
                    download_workers = 56, 
                    gpu_batch_size = 56, ),
                client_api = mycelium.api.generated_sources.worker_schemas.models.worker_client_api_section.WorkerClientAPISection(
                    host = '', 
                    port = 56, ),
                clap = mycelium.api.generated_sources.worker_schemas.models.worker_clap_section.WorkerClapSection(
                    model_id = '', 
                    target_sr = 56, 
                    chunk_duration_s = 56, 
                    num_chunks = 56, 
                    max_load_duration_s = 56, ),
                logging = mycelium.api.generated_sources.worker_schemas.models.worker_logging_section.WorkerLoggingSection(
                    level = '', )
            )
        else:
            return WorkerConfigResponse(
                client = mycelium.api.generated_sources.worker_schemas.models.worker_client_section.WorkerClientSection(
                    server_host = '', 
                    server_port = 56, 
                    download_queue_size = 56, 
                    job_queue_size = 56, 
                    poll_interval = 1.337, 
                    download_workers = 56, 
                    gpu_batch_size = 56, ),
                client_api = mycelium.api.generated_sources.worker_schemas.models.worker_client_api_section.WorkerClientAPISection(
                    host = '', 
                    port = 56, ),
                clap = mycelium.api.generated_sources.worker_schemas.models.worker_clap_section.WorkerClapSection(
                    model_id = '', 
                    target_sr = 56, 
                    chunk_duration_s = 56, 
                    num_chunks = 56, 
                    max_load_duration_s = 56, ),
                logging = mycelium.api.generated_sources.worker_schemas.models.worker_logging_section.WorkerLoggingSection(
                    level = '', ),
        )
        """

    def testWorkerConfigResponse(self):
        """Test WorkerConfigResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
