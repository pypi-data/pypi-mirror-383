from __future__ import annotations
import _wlplan.data
import _wlplan.graph_generator
import _wlplan.planning
import typing
__all__: list[str] = ['CCWLFeatures', 'CCWLaFeatures', 'Features', 'IWLFeatures', 'KWL2Features', 'LWL2Features', 'NIWLFeatures', 'PruningOptions', 'WLFeatures']
class CCWLFeatures(WLFeatures):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class CCWLaFeatures(WLFeatures):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class Features:
    @typing.overload
    def collect(self, dataset: _wlplan.data.DomainDataset) -> None:
        ...
    @typing.overload
    def collect(self, graphs: list[_wlplan.graph_generator.Graph]) -> None:
        ...
    @typing.overload
    def embed(self, dataset: _wlplan.data.DomainDataset) -> list[list[float]]:
        ...
    @typing.overload
    def embed(self, graphs: list[_wlplan.graph_generator.Graph]) -> list[list[float]]:
        ...
    @typing.overload
    def embed(self, graph: _wlplan.graph_generator.Graph) -> list[float]:
        ...
    @typing.overload
    def embed(self, state: _wlplan.planning.State) -> list[float]:
        ...
    def get_colour_to_layer(self) -> dict[int, int]:
        ...
    def get_feature_name(self) -> str:
        ...
    def get_graph_representation(self) -> str:
        ...
    def get_iterations(self) -> int:
        ...
    def get_layer_to_colours(self) -> list[set[int]]:
        ...
    def get_layer_to_n_colours(self) -> list[int]:
        ...
    def get_n_colours(self) -> int:
        ...
    def get_n_features(self) -> int:
        ...
    def get_pruning(self) -> str:
        ...
    def get_seen_counts(self) -> list[int]:
        ...
    @typing.overload
    def get_string_representation(self, embedding: list[float]) -> str:
        ...
    @typing.overload
    def get_string_representation(self, state: _wlplan.planning.State) -> str:
        ...
    def get_unseen_counts(self) -> list[int]:
        ...
    def get_weights(self) -> list[float]:
        ...
    @typing.overload
    def predict(self, graph: _wlplan.graph_generator.Graph) -> float:
        ...
    @typing.overload
    def predict(self, state: _wlplan.planning.State) -> float:
        ...
    def print_init_colours(self) -> None:
        ...
    @typing.overload
    def save(self, filename: str) -> None:
        ...
    @typing.overload
    def save(self, filename: str, weights: list[float]) -> None:
        ...
    def set_problem(self, problem: _wlplan.planning.Problem) -> None:
        ...
    def set_pruning(self, pruning: str) -> None:
        ...
    def set_weights(self, weights: list[float]) -> None:
        ...
    def to_graphs(self, dataset: _wlplan.data.DomainDataset) -> list[_wlplan.graph_generator.Graph]:
        ...
class IWLFeatures(Features):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class KWL2Features(Features):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class LWL2Features(Features):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class NIWLFeatures(IWLFeatures):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
class PruningOptions:
    NONE: typing.ClassVar[str] = 'none'
    @staticmethod
    def get_all() -> list[str]:
        ...
class WLFeatures(Features):
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, quiet: bool) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, pruning: str, multiset_hash: bool) -> None:
        ...
