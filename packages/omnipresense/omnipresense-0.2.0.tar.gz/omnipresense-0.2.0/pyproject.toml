[project]
name = "omnipresense"
version = "0.2.0"
description = "A comprehensive, type-safe Python interface for OmniPreSense radar sensors"
readme = "README.md"
requires-python = ">=3.8.1"
dependencies = ["pyserial>=3.4"]
authors = [{ name = "Oskar Graeb", email = "graeb.oskar@gmail.com" }]
license = { text = "MIT" }
keywords = ["radar", "sensor", "omnipresense", "doppler", "fmcw"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: System :: Hardware :: Hardware Drivers",
]

[project.optional-dependencies]
dev = [
  "pre-commit>=3.0.0",
  "black>=24.0.0",
  "isort>=5.13.0",
  "ruff>=0.6.0",
  "mypy>=1.11.0",
  "bandit[toml]>=1.7.0",
  "safety>=3.0.0",
  "pydocstyle>=6.3.0",
  "autoflake>=2.0.0",
  "pyupgrade>=3.8.0",
  "pytest>=8.0.0",
  "pytest-cov>=5.0.0",
  "pytest-mock>=3.14.0",
  "types-pyserial>=3.4.0",
]

[project.urls]
Homepage = "https://github.com/graeb/OmnipresenseRadar"
Documentation = "https://github.com/graeb/OmnipresenseRadar"
Repository = "https://github.com/graeb/OmnipresenseRadar.git"
Issues = "https://github.com/graeb/OmnipresenseRadar/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
  "S",  # bandit
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
  "S101", # use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]                    # allow assert in tests
"examples/*" = ["E722", "B904", "S110"] # relax type checking for examples

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]         # skip assert_used test

[tool.pydocstyle]
convention = "google"
match-dir = "^(?!tests).*"
add-ignore = ["D100", "D104"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["omnipresense"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
