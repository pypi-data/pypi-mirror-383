# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class LogCollectionWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[LogCollectionWhereInput]',
        '_not': 'list[LogCollectionWhereInput]',
        '_or': 'list[LogCollectionWhereInput]',
        'cluster': 'ClusterWhereInput',
        'hosts_every': 'HostWhereInput',
        'hosts_none': 'HostWhereInput',
        'hosts_some': 'HostWhereInput',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'local_id': 'str',
        'local_id_contains': 'str',
        'local_id_ends_with': 'str',
        'local_id_gt': 'str',
        'local_id_gte': 'str',
        'local_id_in': 'list[str]',
        'local_id_lt': 'str',
        'local_id_lte': 'str',
        'local_id_not': 'str',
        'local_id_not_contains': 'str',
        'local_id_not_ends_with': 'str',
        'local_id_not_in': 'list[str]',
        'local_id_not_starts_with': 'str',
        'local_id_starts_with': 'str',
        'log_ended_at': 'str',
        'log_ended_at_gt': 'str',
        'log_ended_at_gte': 'str',
        'log_ended_at_in': 'list[str]',
        'log_ended_at_lt': 'str',
        'log_ended_at_lte': 'str',
        'log_ended_at_not': 'str',
        'log_ended_at_not_in': 'list[str]',
        'log_started_at': 'str',
        'log_started_at_gt': 'str',
        'log_started_at_gte': 'str',
        'log_started_at_in': 'list[str]',
        'log_started_at_lt': 'str',
        'log_started_at_lte': 'str',
        'log_started_at_not': 'str',
        'log_started_at_not_in': 'list[str]',
        'owner': 'str',
        'owner_contains': 'str',
        'owner_ends_with': 'str',
        'owner_gt': 'str',
        'owner_gte': 'str',
        'owner_in': 'list[str]',
        'owner_lt': 'str',
        'owner_lte': 'str',
        'owner_not': 'str',
        'owner_not_contains': 'str',
        'owner_not_ends_with': 'str',
        'owner_not_in': 'list[str]',
        'owner_not_starts_with': 'str',
        'owner_starts_with': 'str',
        'path': 'str',
        'path_contains': 'str',
        'path_ends_with': 'str',
        'path_gt': 'str',
        'path_gte': 'str',
        'path_in': 'list[str]',
        'path_lt': 'str',
        'path_lte': 'str',
        'path_not': 'str',
        'path_not_contains': 'str',
        'path_not_ends_with': 'str',
        'path_not_in': 'list[str]',
        'path_not_starts_with': 'str',
        'path_starts_with': 'str',
        'progress': 'float',
        'progress_gt': 'float',
        'progress_gte': 'float',
        'progress_in': 'list[float]',
        'progress_lt': 'float',
        'progress_lte': 'float',
        'progress_not': 'float',
        'progress_not_in': 'list[float]',
        'size': 'int',
        'size_gt': 'int',
        'size_gte': 'int',
        'size_in': 'list[int]',
        'size_lt': 'int',
        'size_lte': 'int',
        'size_not': 'int',
        'size_not_in': 'list[int]',
        'started_at': 'str',
        'started_at_gt': 'str',
        'started_at_gte': 'str',
        'started_at_in': 'list[str]',
        'started_at_lt': 'str',
        'started_at_lte': 'str',
        'started_at_not': 'str',
        'started_at_not_in': 'list[str]',
        'status': 'LogCollectionStatus',
        'status_in': 'list[LogCollectionStatus]',
        'status_not': 'LogCollectionStatus',
        'status_not_in': 'list[LogCollectionStatus]',
        'witness': 'WitnessWhereInput'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'cluster': 'cluster',
        'hosts_every': 'hosts_every',
        'hosts_none': 'hosts_none',
        'hosts_some': 'hosts_some',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'local_id': 'local_id',
        'local_id_contains': 'local_id_contains',
        'local_id_ends_with': 'local_id_ends_with',
        'local_id_gt': 'local_id_gt',
        'local_id_gte': 'local_id_gte',
        'local_id_in': 'local_id_in',
        'local_id_lt': 'local_id_lt',
        'local_id_lte': 'local_id_lte',
        'local_id_not': 'local_id_not',
        'local_id_not_contains': 'local_id_not_contains',
        'local_id_not_ends_with': 'local_id_not_ends_with',
        'local_id_not_in': 'local_id_not_in',
        'local_id_not_starts_with': 'local_id_not_starts_with',
        'local_id_starts_with': 'local_id_starts_with',
        'log_ended_at': 'log_ended_at',
        'log_ended_at_gt': 'log_ended_at_gt',
        'log_ended_at_gte': 'log_ended_at_gte',
        'log_ended_at_in': 'log_ended_at_in',
        'log_ended_at_lt': 'log_ended_at_lt',
        'log_ended_at_lte': 'log_ended_at_lte',
        'log_ended_at_not': 'log_ended_at_not',
        'log_ended_at_not_in': 'log_ended_at_not_in',
        'log_started_at': 'log_started_at',
        'log_started_at_gt': 'log_started_at_gt',
        'log_started_at_gte': 'log_started_at_gte',
        'log_started_at_in': 'log_started_at_in',
        'log_started_at_lt': 'log_started_at_lt',
        'log_started_at_lte': 'log_started_at_lte',
        'log_started_at_not': 'log_started_at_not',
        'log_started_at_not_in': 'log_started_at_not_in',
        'owner': 'owner',
        'owner_contains': 'owner_contains',
        'owner_ends_with': 'owner_ends_with',
        'owner_gt': 'owner_gt',
        'owner_gte': 'owner_gte',
        'owner_in': 'owner_in',
        'owner_lt': 'owner_lt',
        'owner_lte': 'owner_lte',
        'owner_not': 'owner_not',
        'owner_not_contains': 'owner_not_contains',
        'owner_not_ends_with': 'owner_not_ends_with',
        'owner_not_in': 'owner_not_in',
        'owner_not_starts_with': 'owner_not_starts_with',
        'owner_starts_with': 'owner_starts_with',
        'path': 'path',
        'path_contains': 'path_contains',
        'path_ends_with': 'path_ends_with',
        'path_gt': 'path_gt',
        'path_gte': 'path_gte',
        'path_in': 'path_in',
        'path_lt': 'path_lt',
        'path_lte': 'path_lte',
        'path_not': 'path_not',
        'path_not_contains': 'path_not_contains',
        'path_not_ends_with': 'path_not_ends_with',
        'path_not_in': 'path_not_in',
        'path_not_starts_with': 'path_not_starts_with',
        'path_starts_with': 'path_starts_with',
        'progress': 'progress',
        'progress_gt': 'progress_gt',
        'progress_gte': 'progress_gte',
        'progress_in': 'progress_in',
        'progress_lt': 'progress_lt',
        'progress_lte': 'progress_lte',
        'progress_not': 'progress_not',
        'progress_not_in': 'progress_not_in',
        'size': 'size',
        'size_gt': 'size_gt',
        'size_gte': 'size_gte',
        'size_in': 'size_in',
        'size_lt': 'size_lt',
        'size_lte': 'size_lte',
        'size_not': 'size_not',
        'size_not_in': 'size_not_in',
        'started_at': 'started_at',
        'started_at_gt': 'started_at_gt',
        'started_at_gte': 'started_at_gte',
        'started_at_in': 'started_at_in',
        'started_at_lt': 'started_at_lt',
        'started_at_lte': 'started_at_lte',
        'started_at_not': 'started_at_not',
        'started_at_not_in': 'started_at_not_in',
        'status': 'status',
        'status_in': 'status_in',
        'status_not': 'status_not',
        'status_not_in': 'status_not_in',
        'witness': 'witness'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """LogCollectionWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._cluster = None
        self._hosts_every = None
        self._hosts_none = None
        self._hosts_some = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._local_id = None
        self._local_id_contains = None
        self._local_id_ends_with = None
        self._local_id_gt = None
        self._local_id_gte = None
        self._local_id_in = None
        self._local_id_lt = None
        self._local_id_lte = None
        self._local_id_not = None
        self._local_id_not_contains = None
        self._local_id_not_ends_with = None
        self._local_id_not_in = None
        self._local_id_not_starts_with = None
        self._local_id_starts_with = None
        self._log_ended_at = None
        self._log_ended_at_gt = None
        self._log_ended_at_gte = None
        self._log_ended_at_in = None
        self._log_ended_at_lt = None
        self._log_ended_at_lte = None
        self._log_ended_at_not = None
        self._log_ended_at_not_in = None
        self._log_started_at = None
        self._log_started_at_gt = None
        self._log_started_at_gte = None
        self._log_started_at_in = None
        self._log_started_at_lt = None
        self._log_started_at_lte = None
        self._log_started_at_not = None
        self._log_started_at_not_in = None
        self._owner = None
        self._owner_contains = None
        self._owner_ends_with = None
        self._owner_gt = None
        self._owner_gte = None
        self._owner_in = None
        self._owner_lt = None
        self._owner_lte = None
        self._owner_not = None
        self._owner_not_contains = None
        self._owner_not_ends_with = None
        self._owner_not_in = None
        self._owner_not_starts_with = None
        self._owner_starts_with = None
        self._path = None
        self._path_contains = None
        self._path_ends_with = None
        self._path_gt = None
        self._path_gte = None
        self._path_in = None
        self._path_lt = None
        self._path_lte = None
        self._path_not = None
        self._path_not_contains = None
        self._path_not_ends_with = None
        self._path_not_in = None
        self._path_not_starts_with = None
        self._path_starts_with = None
        self._progress = None
        self._progress_gt = None
        self._progress_gte = None
        self._progress_in = None
        self._progress_lt = None
        self._progress_lte = None
        self._progress_not = None
        self._progress_not_in = None
        self._size = None
        self._size_gt = None
        self._size_gte = None
        self._size_in = None
        self._size_lt = None
        self._size_lte = None
        self._size_not = None
        self._size_not_in = None
        self._started_at = None
        self._started_at_gt = None
        self._started_at_gte = None
        self._started_at_in = None
        self._started_at_lt = None
        self._started_at_lte = None
        self._started_at_not = None
        self._started_at_not_in = None
        self._status = None
        self._status_in = None
        self._status_not = None
        self._status_not_in = None
        self._witness = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.cluster = kwargs.get("cluster", None)
        self.hosts_every = kwargs.get("hosts_every", None)
        self.hosts_none = kwargs.get("hosts_none", None)
        self.hosts_some = kwargs.get("hosts_some", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.local_id = kwargs.get("local_id", None)
        self.local_id_contains = kwargs.get("local_id_contains", None)
        self.local_id_ends_with = kwargs.get("local_id_ends_with", None)
        self.local_id_gt = kwargs.get("local_id_gt", None)
        self.local_id_gte = kwargs.get("local_id_gte", None)
        self.local_id_in = kwargs.get("local_id_in", None)
        self.local_id_lt = kwargs.get("local_id_lt", None)
        self.local_id_lte = kwargs.get("local_id_lte", None)
        self.local_id_not = kwargs.get("local_id_not", None)
        self.local_id_not_contains = kwargs.get("local_id_not_contains", None)
        self.local_id_not_ends_with = kwargs.get("local_id_not_ends_with", None)
        self.local_id_not_in = kwargs.get("local_id_not_in", None)
        self.local_id_not_starts_with = kwargs.get("local_id_not_starts_with", None)
        self.local_id_starts_with = kwargs.get("local_id_starts_with", None)
        self.log_ended_at = kwargs.get("log_ended_at", None)
        self.log_ended_at_gt = kwargs.get("log_ended_at_gt", None)
        self.log_ended_at_gte = kwargs.get("log_ended_at_gte", None)
        self.log_ended_at_in = kwargs.get("log_ended_at_in", None)
        self.log_ended_at_lt = kwargs.get("log_ended_at_lt", None)
        self.log_ended_at_lte = kwargs.get("log_ended_at_lte", None)
        self.log_ended_at_not = kwargs.get("log_ended_at_not", None)
        self.log_ended_at_not_in = kwargs.get("log_ended_at_not_in", None)
        self.log_started_at = kwargs.get("log_started_at", None)
        self.log_started_at_gt = kwargs.get("log_started_at_gt", None)
        self.log_started_at_gte = kwargs.get("log_started_at_gte", None)
        self.log_started_at_in = kwargs.get("log_started_at_in", None)
        self.log_started_at_lt = kwargs.get("log_started_at_lt", None)
        self.log_started_at_lte = kwargs.get("log_started_at_lte", None)
        self.log_started_at_not = kwargs.get("log_started_at_not", None)
        self.log_started_at_not_in = kwargs.get("log_started_at_not_in", None)
        self.owner = kwargs.get("owner", None)
        self.owner_contains = kwargs.get("owner_contains", None)
        self.owner_ends_with = kwargs.get("owner_ends_with", None)
        self.owner_gt = kwargs.get("owner_gt", None)
        self.owner_gte = kwargs.get("owner_gte", None)
        self.owner_in = kwargs.get("owner_in", None)
        self.owner_lt = kwargs.get("owner_lt", None)
        self.owner_lte = kwargs.get("owner_lte", None)
        self.owner_not = kwargs.get("owner_not", None)
        self.owner_not_contains = kwargs.get("owner_not_contains", None)
        self.owner_not_ends_with = kwargs.get("owner_not_ends_with", None)
        self.owner_not_in = kwargs.get("owner_not_in", None)
        self.owner_not_starts_with = kwargs.get("owner_not_starts_with", None)
        self.owner_starts_with = kwargs.get("owner_starts_with", None)
        self.path = kwargs.get("path", None)
        self.path_contains = kwargs.get("path_contains", None)
        self.path_ends_with = kwargs.get("path_ends_with", None)
        self.path_gt = kwargs.get("path_gt", None)
        self.path_gte = kwargs.get("path_gte", None)
        self.path_in = kwargs.get("path_in", None)
        self.path_lt = kwargs.get("path_lt", None)
        self.path_lte = kwargs.get("path_lte", None)
        self.path_not = kwargs.get("path_not", None)
        self.path_not_contains = kwargs.get("path_not_contains", None)
        self.path_not_ends_with = kwargs.get("path_not_ends_with", None)
        self.path_not_in = kwargs.get("path_not_in", None)
        self.path_not_starts_with = kwargs.get("path_not_starts_with", None)
        self.path_starts_with = kwargs.get("path_starts_with", None)
        self.progress = kwargs.get("progress", None)
        self.progress_gt = kwargs.get("progress_gt", None)
        self.progress_gte = kwargs.get("progress_gte", None)
        self.progress_in = kwargs.get("progress_in", None)
        self.progress_lt = kwargs.get("progress_lt", None)
        self.progress_lte = kwargs.get("progress_lte", None)
        self.progress_not = kwargs.get("progress_not", None)
        self.progress_not_in = kwargs.get("progress_not_in", None)
        self.size = kwargs.get("size", None)
        self.size_gt = kwargs.get("size_gt", None)
        self.size_gte = kwargs.get("size_gte", None)
        self.size_in = kwargs.get("size_in", None)
        self.size_lt = kwargs.get("size_lt", None)
        self.size_lte = kwargs.get("size_lte", None)
        self.size_not = kwargs.get("size_not", None)
        self.size_not_in = kwargs.get("size_not_in", None)
        self.started_at = kwargs.get("started_at", None)
        self.started_at_gt = kwargs.get("started_at_gt", None)
        self.started_at_gte = kwargs.get("started_at_gte", None)
        self.started_at_in = kwargs.get("started_at_in", None)
        self.started_at_lt = kwargs.get("started_at_lt", None)
        self.started_at_lte = kwargs.get("started_at_lte", None)
        self.started_at_not = kwargs.get("started_at_not", None)
        self.started_at_not_in = kwargs.get("started_at_not_in", None)
        self.status = kwargs.get("status", None)
        self.status_in = kwargs.get("status_in", None)
        self.status_not = kwargs.get("status_not", None)
        self.status_not_in = kwargs.get("status_not_in", None)
        self.witness = kwargs.get("witness", None)

    @property
    def _and(self):
        """Gets the _and of this LogCollectionWhereInput.  # noqa: E501


        :return: The _and of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[LogCollectionWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this LogCollectionWhereInput.


        :param _and: The _and of this LogCollectionWhereInput.  # noqa: E501
        :type _and: list[LogCollectionWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this LogCollectionWhereInput.  # noqa: E501


        :return: The _not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[LogCollectionWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this LogCollectionWhereInput.


        :param _not: The _not of this LogCollectionWhereInput.  # noqa: E501
        :type _not: list[LogCollectionWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this LogCollectionWhereInput.  # noqa: E501


        :return: The _or of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[LogCollectionWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this LogCollectionWhereInput.


        :param _or: The _or of this LogCollectionWhereInput.  # noqa: E501
        :type _or: list[LogCollectionWhereInput]
        """

        self.__or = _or

    @property
    def cluster(self):
        """Gets the cluster of this LogCollectionWhereInput.  # noqa: E501


        :return: The cluster of this LogCollectionWhereInput.  # noqa: E501
        :rtype: ClusterWhereInput
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this LogCollectionWhereInput.


        :param cluster: The cluster of this LogCollectionWhereInput.  # noqa: E501
        :type cluster: ClusterWhereInput
        """

        self._cluster = cluster

    @property
    def hosts_every(self):
        """Gets the hosts_every of this LogCollectionWhereInput.  # noqa: E501


        :return: The hosts_every of this LogCollectionWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_every

    @hosts_every.setter
    def hosts_every(self, hosts_every):
        """Sets the hosts_every of this LogCollectionWhereInput.


        :param hosts_every: The hosts_every of this LogCollectionWhereInput.  # noqa: E501
        :type hosts_every: HostWhereInput
        """

        self._hosts_every = hosts_every

    @property
    def hosts_none(self):
        """Gets the hosts_none of this LogCollectionWhereInput.  # noqa: E501


        :return: The hosts_none of this LogCollectionWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_none

    @hosts_none.setter
    def hosts_none(self, hosts_none):
        """Sets the hosts_none of this LogCollectionWhereInput.


        :param hosts_none: The hosts_none of this LogCollectionWhereInput.  # noqa: E501
        :type hosts_none: HostWhereInput
        """

        self._hosts_none = hosts_none

    @property
    def hosts_some(self):
        """Gets the hosts_some of this LogCollectionWhereInput.  # noqa: E501


        :return: The hosts_some of this LogCollectionWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_some

    @hosts_some.setter
    def hosts_some(self, hosts_some):
        """Sets the hosts_some of this LogCollectionWhereInput.


        :param hosts_some: The hosts_some of this LogCollectionWhereInput.  # noqa: E501
        :type hosts_some: HostWhereInput
        """

        self._hosts_some = hosts_some

    @property
    def id(self):
        """Gets the id of this LogCollectionWhereInput.  # noqa: E501


        :return: The id of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogCollectionWhereInput.


        :param id: The id of this LogCollectionWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this LogCollectionWhereInput.


        :param id_contains: The id_contains of this LogCollectionWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this LogCollectionWhereInput.


        :param id_ends_with: The id_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this LogCollectionWhereInput.


        :param id_gt: The id_gt of this LogCollectionWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this LogCollectionWhereInput.


        :param id_gte: The id_gte of this LogCollectionWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this LogCollectionWhereInput.


        :param id_in: The id_in of this LogCollectionWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this LogCollectionWhereInput.


        :param id_lt: The id_lt of this LogCollectionWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this LogCollectionWhereInput.


        :param id_lte: The id_lte of this LogCollectionWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this LogCollectionWhereInput.


        :param id_not: The id_not of this LogCollectionWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this LogCollectionWhereInput.


        :param id_not_contains: The id_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this LogCollectionWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this LogCollectionWhereInput.


        :param id_not_in: The id_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this LogCollectionWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The id_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this LogCollectionWhereInput.


        :param id_starts_with: The id_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def local_id(self):
        """Gets the local_id of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this LogCollectionWhereInput.


        :param local_id: The local_id of this LogCollectionWhereInput.  # noqa: E501
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def local_id_contains(self):
        """Gets the local_id_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_contains

    @local_id_contains.setter
    def local_id_contains(self, local_id_contains):
        """Sets the local_id_contains of this LogCollectionWhereInput.


        :param local_id_contains: The local_id_contains of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_contains: str
        """

        self._local_id_contains = local_id_contains

    @property
    def local_id_ends_with(self):
        """Gets the local_id_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_ends_with

    @local_id_ends_with.setter
    def local_id_ends_with(self, local_id_ends_with):
        """Sets the local_id_ends_with of this LogCollectionWhereInput.


        :param local_id_ends_with: The local_id_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_ends_with: str
        """

        self._local_id_ends_with = local_id_ends_with

    @property
    def local_id_gt(self):
        """Gets the local_id_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gt

    @local_id_gt.setter
    def local_id_gt(self, local_id_gt):
        """Sets the local_id_gt of this LogCollectionWhereInput.


        :param local_id_gt: The local_id_gt of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_gt: str
        """

        self._local_id_gt = local_id_gt

    @property
    def local_id_gte(self):
        """Gets the local_id_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gte

    @local_id_gte.setter
    def local_id_gte(self, local_id_gte):
        """Sets the local_id_gte of this LogCollectionWhereInput.


        :param local_id_gte: The local_id_gte of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_gte: str
        """

        self._local_id_gte = local_id_gte

    @property
    def local_id_in(self):
        """Gets the local_id_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_in

    @local_id_in.setter
    def local_id_in(self, local_id_in):
        """Sets the local_id_in of this LogCollectionWhereInput.


        :param local_id_in: The local_id_in of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_in: list[str]
        """

        self._local_id_in = local_id_in

    @property
    def local_id_lt(self):
        """Gets the local_id_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lt

    @local_id_lt.setter
    def local_id_lt(self, local_id_lt):
        """Sets the local_id_lt of this LogCollectionWhereInput.


        :param local_id_lt: The local_id_lt of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_lt: str
        """

        self._local_id_lt = local_id_lt

    @property
    def local_id_lte(self):
        """Gets the local_id_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lte

    @local_id_lte.setter
    def local_id_lte(self, local_id_lte):
        """Sets the local_id_lte of this LogCollectionWhereInput.


        :param local_id_lte: The local_id_lte of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_lte: str
        """

        self._local_id_lte = local_id_lte

    @property
    def local_id_not(self):
        """Gets the local_id_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not

    @local_id_not.setter
    def local_id_not(self, local_id_not):
        """Sets the local_id_not of this LogCollectionWhereInput.


        :param local_id_not: The local_id_not of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_not: str
        """

        self._local_id_not = local_id_not

    @property
    def local_id_not_contains(self):
        """Gets the local_id_not_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_contains

    @local_id_not_contains.setter
    def local_id_not_contains(self, local_id_not_contains):
        """Sets the local_id_not_contains of this LogCollectionWhereInput.


        :param local_id_not_contains: The local_id_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_not_contains: str
        """

        self._local_id_not_contains = local_id_not_contains

    @property
    def local_id_not_ends_with(self):
        """Gets the local_id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_ends_with

    @local_id_not_ends_with.setter
    def local_id_not_ends_with(self, local_id_not_ends_with):
        """Sets the local_id_not_ends_with of this LogCollectionWhereInput.


        :param local_id_not_ends_with: The local_id_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_not_ends_with: str
        """

        self._local_id_not_ends_with = local_id_not_ends_with

    @property
    def local_id_not_in(self):
        """Gets the local_id_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_not_in

    @local_id_not_in.setter
    def local_id_not_in(self, local_id_not_in):
        """Sets the local_id_not_in of this LogCollectionWhereInput.


        :param local_id_not_in: The local_id_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_not_in: list[str]
        """

        self._local_id_not_in = local_id_not_in

    @property
    def local_id_not_starts_with(self):
        """Gets the local_id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_starts_with

    @local_id_not_starts_with.setter
    def local_id_not_starts_with(self, local_id_not_starts_with):
        """Sets the local_id_not_starts_with of this LogCollectionWhereInput.


        :param local_id_not_starts_with: The local_id_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_not_starts_with: str
        """

        self._local_id_not_starts_with = local_id_not_starts_with

    @property
    def local_id_starts_with(self):
        """Gets the local_id_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The local_id_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_starts_with

    @local_id_starts_with.setter
    def local_id_starts_with(self, local_id_starts_with):
        """Sets the local_id_starts_with of this LogCollectionWhereInput.


        :param local_id_starts_with: The local_id_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type local_id_starts_with: str
        """

        self._local_id_starts_with = local_id_starts_with

    @property
    def log_ended_at(self):
        """Gets the log_ended_at of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at

    @log_ended_at.setter
    def log_ended_at(self, log_ended_at):
        """Sets the log_ended_at of this LogCollectionWhereInput.


        :param log_ended_at: The log_ended_at of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at: str
        """

        self._log_ended_at = log_ended_at

    @property
    def log_ended_at_gt(self):
        """Gets the log_ended_at_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at_gt

    @log_ended_at_gt.setter
    def log_ended_at_gt(self, log_ended_at_gt):
        """Sets the log_ended_at_gt of this LogCollectionWhereInput.


        :param log_ended_at_gt: The log_ended_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_gt: str
        """

        self._log_ended_at_gt = log_ended_at_gt

    @property
    def log_ended_at_gte(self):
        """Gets the log_ended_at_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at_gte

    @log_ended_at_gte.setter
    def log_ended_at_gte(self, log_ended_at_gte):
        """Sets the log_ended_at_gte of this LogCollectionWhereInput.


        :param log_ended_at_gte: The log_ended_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_gte: str
        """

        self._log_ended_at_gte = log_ended_at_gte

    @property
    def log_ended_at_in(self):
        """Gets the log_ended_at_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._log_ended_at_in

    @log_ended_at_in.setter
    def log_ended_at_in(self, log_ended_at_in):
        """Sets the log_ended_at_in of this LogCollectionWhereInput.


        :param log_ended_at_in: The log_ended_at_in of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_in: list[str]
        """

        self._log_ended_at_in = log_ended_at_in

    @property
    def log_ended_at_lt(self):
        """Gets the log_ended_at_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at_lt

    @log_ended_at_lt.setter
    def log_ended_at_lt(self, log_ended_at_lt):
        """Sets the log_ended_at_lt of this LogCollectionWhereInput.


        :param log_ended_at_lt: The log_ended_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_lt: str
        """

        self._log_ended_at_lt = log_ended_at_lt

    @property
    def log_ended_at_lte(self):
        """Gets the log_ended_at_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at_lte

    @log_ended_at_lte.setter
    def log_ended_at_lte(self, log_ended_at_lte):
        """Sets the log_ended_at_lte of this LogCollectionWhereInput.


        :param log_ended_at_lte: The log_ended_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_lte: str
        """

        self._log_ended_at_lte = log_ended_at_lte

    @property
    def log_ended_at_not(self):
        """Gets the log_ended_at_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_ended_at_not

    @log_ended_at_not.setter
    def log_ended_at_not(self, log_ended_at_not):
        """Sets the log_ended_at_not of this LogCollectionWhereInput.


        :param log_ended_at_not: The log_ended_at_not of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_not: str
        """

        self._log_ended_at_not = log_ended_at_not

    @property
    def log_ended_at_not_in(self):
        """Gets the log_ended_at_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_ended_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._log_ended_at_not_in

    @log_ended_at_not_in.setter
    def log_ended_at_not_in(self, log_ended_at_not_in):
        """Sets the log_ended_at_not_in of this LogCollectionWhereInput.


        :param log_ended_at_not_in: The log_ended_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type log_ended_at_not_in: list[str]
        """

        self._log_ended_at_not_in = log_ended_at_not_in

    @property
    def log_started_at(self):
        """Gets the log_started_at of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at

    @log_started_at.setter
    def log_started_at(self, log_started_at):
        """Sets the log_started_at of this LogCollectionWhereInput.


        :param log_started_at: The log_started_at of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at: str
        """

        self._log_started_at = log_started_at

    @property
    def log_started_at_gt(self):
        """Gets the log_started_at_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at_gt

    @log_started_at_gt.setter
    def log_started_at_gt(self, log_started_at_gt):
        """Sets the log_started_at_gt of this LogCollectionWhereInput.


        :param log_started_at_gt: The log_started_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_gt: str
        """

        self._log_started_at_gt = log_started_at_gt

    @property
    def log_started_at_gte(self):
        """Gets the log_started_at_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at_gte

    @log_started_at_gte.setter
    def log_started_at_gte(self, log_started_at_gte):
        """Sets the log_started_at_gte of this LogCollectionWhereInput.


        :param log_started_at_gte: The log_started_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_gte: str
        """

        self._log_started_at_gte = log_started_at_gte

    @property
    def log_started_at_in(self):
        """Gets the log_started_at_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._log_started_at_in

    @log_started_at_in.setter
    def log_started_at_in(self, log_started_at_in):
        """Sets the log_started_at_in of this LogCollectionWhereInput.


        :param log_started_at_in: The log_started_at_in of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_in: list[str]
        """

        self._log_started_at_in = log_started_at_in

    @property
    def log_started_at_lt(self):
        """Gets the log_started_at_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at_lt

    @log_started_at_lt.setter
    def log_started_at_lt(self, log_started_at_lt):
        """Sets the log_started_at_lt of this LogCollectionWhereInput.


        :param log_started_at_lt: The log_started_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_lt: str
        """

        self._log_started_at_lt = log_started_at_lt

    @property
    def log_started_at_lte(self):
        """Gets the log_started_at_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at_lte

    @log_started_at_lte.setter
    def log_started_at_lte(self, log_started_at_lte):
        """Sets the log_started_at_lte of this LogCollectionWhereInput.


        :param log_started_at_lte: The log_started_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_lte: str
        """

        self._log_started_at_lte = log_started_at_lte

    @property
    def log_started_at_not(self):
        """Gets the log_started_at_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._log_started_at_not

    @log_started_at_not.setter
    def log_started_at_not(self, log_started_at_not):
        """Sets the log_started_at_not of this LogCollectionWhereInput.


        :param log_started_at_not: The log_started_at_not of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_not: str
        """

        self._log_started_at_not = log_started_at_not

    @property
    def log_started_at_not_in(self):
        """Gets the log_started_at_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The log_started_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._log_started_at_not_in

    @log_started_at_not_in.setter
    def log_started_at_not_in(self, log_started_at_not_in):
        """Sets the log_started_at_not_in of this LogCollectionWhereInput.


        :param log_started_at_not_in: The log_started_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type log_started_at_not_in: list[str]
        """

        self._log_started_at_not_in = log_started_at_not_in

    @property
    def owner(self):
        """Gets the owner of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this LogCollectionWhereInput.


        :param owner: The owner of this LogCollectionWhereInput.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def owner_contains(self):
        """Gets the owner_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_contains

    @owner_contains.setter
    def owner_contains(self, owner_contains):
        """Sets the owner_contains of this LogCollectionWhereInput.


        :param owner_contains: The owner_contains of this LogCollectionWhereInput.  # noqa: E501
        :type owner_contains: str
        """

        self._owner_contains = owner_contains

    @property
    def owner_ends_with(self):
        """Gets the owner_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_ends_with

    @owner_ends_with.setter
    def owner_ends_with(self, owner_ends_with):
        """Sets the owner_ends_with of this LogCollectionWhereInput.


        :param owner_ends_with: The owner_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type owner_ends_with: str
        """

        self._owner_ends_with = owner_ends_with

    @property
    def owner_gt(self):
        """Gets the owner_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_gt

    @owner_gt.setter
    def owner_gt(self, owner_gt):
        """Sets the owner_gt of this LogCollectionWhereInput.


        :param owner_gt: The owner_gt of this LogCollectionWhereInput.  # noqa: E501
        :type owner_gt: str
        """

        self._owner_gt = owner_gt

    @property
    def owner_gte(self):
        """Gets the owner_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_gte

    @owner_gte.setter
    def owner_gte(self, owner_gte):
        """Sets the owner_gte of this LogCollectionWhereInput.


        :param owner_gte: The owner_gte of this LogCollectionWhereInput.  # noqa: E501
        :type owner_gte: str
        """

        self._owner_gte = owner_gte

    @property
    def owner_in(self):
        """Gets the owner_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_in

    @owner_in.setter
    def owner_in(self, owner_in):
        """Sets the owner_in of this LogCollectionWhereInput.


        :param owner_in: The owner_in of this LogCollectionWhereInput.  # noqa: E501
        :type owner_in: list[str]
        """

        self._owner_in = owner_in

    @property
    def owner_lt(self):
        """Gets the owner_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_lt

    @owner_lt.setter
    def owner_lt(self, owner_lt):
        """Sets the owner_lt of this LogCollectionWhereInput.


        :param owner_lt: The owner_lt of this LogCollectionWhereInput.  # noqa: E501
        :type owner_lt: str
        """

        self._owner_lt = owner_lt

    @property
    def owner_lte(self):
        """Gets the owner_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_lte

    @owner_lte.setter
    def owner_lte(self, owner_lte):
        """Sets the owner_lte of this LogCollectionWhereInput.


        :param owner_lte: The owner_lte of this LogCollectionWhereInput.  # noqa: E501
        :type owner_lte: str
        """

        self._owner_lte = owner_lte

    @property
    def owner_not(self):
        """Gets the owner_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_not

    @owner_not.setter
    def owner_not(self, owner_not):
        """Sets the owner_not of this LogCollectionWhereInput.


        :param owner_not: The owner_not of this LogCollectionWhereInput.  # noqa: E501
        :type owner_not: str
        """

        self._owner_not = owner_not

    @property
    def owner_not_contains(self):
        """Gets the owner_not_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_not_contains

    @owner_not_contains.setter
    def owner_not_contains(self, owner_not_contains):
        """Sets the owner_not_contains of this LogCollectionWhereInput.


        :param owner_not_contains: The owner_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :type owner_not_contains: str
        """

        self._owner_not_contains = owner_not_contains

    @property
    def owner_not_ends_with(self):
        """Gets the owner_not_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_not_ends_with

    @owner_not_ends_with.setter
    def owner_not_ends_with(self, owner_not_ends_with):
        """Sets the owner_not_ends_with of this LogCollectionWhereInput.


        :param owner_not_ends_with: The owner_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type owner_not_ends_with: str
        """

        self._owner_not_ends_with = owner_not_ends_with

    @property
    def owner_not_in(self):
        """Gets the owner_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_not_in

    @owner_not_in.setter
    def owner_not_in(self, owner_not_in):
        """Sets the owner_not_in of this LogCollectionWhereInput.


        :param owner_not_in: The owner_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type owner_not_in: list[str]
        """

        self._owner_not_in = owner_not_in

    @property
    def owner_not_starts_with(self):
        """Gets the owner_not_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_not_starts_with

    @owner_not_starts_with.setter
    def owner_not_starts_with(self, owner_not_starts_with):
        """Sets the owner_not_starts_with of this LogCollectionWhereInput.


        :param owner_not_starts_with: The owner_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type owner_not_starts_with: str
        """

        self._owner_not_starts_with = owner_not_starts_with

    @property
    def owner_starts_with(self):
        """Gets the owner_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The owner_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._owner_starts_with

    @owner_starts_with.setter
    def owner_starts_with(self, owner_starts_with):
        """Sets the owner_starts_with of this LogCollectionWhereInput.


        :param owner_starts_with: The owner_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type owner_starts_with: str
        """

        self._owner_starts_with = owner_starts_with

    @property
    def path(self):
        """Gets the path of this LogCollectionWhereInput.  # noqa: E501


        :return: The path of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LogCollectionWhereInput.


        :param path: The path of this LogCollectionWhereInput.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def path_contains(self):
        """Gets the path_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_contains

    @path_contains.setter
    def path_contains(self, path_contains):
        """Sets the path_contains of this LogCollectionWhereInput.


        :param path_contains: The path_contains of this LogCollectionWhereInput.  # noqa: E501
        :type path_contains: str
        """

        self._path_contains = path_contains

    @property
    def path_ends_with(self):
        """Gets the path_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_ends_with

    @path_ends_with.setter
    def path_ends_with(self, path_ends_with):
        """Sets the path_ends_with of this LogCollectionWhereInput.


        :param path_ends_with: The path_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type path_ends_with: str
        """

        self._path_ends_with = path_ends_with

    @property
    def path_gt(self):
        """Gets the path_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_gt

    @path_gt.setter
    def path_gt(self, path_gt):
        """Sets the path_gt of this LogCollectionWhereInput.


        :param path_gt: The path_gt of this LogCollectionWhereInput.  # noqa: E501
        :type path_gt: str
        """

        self._path_gt = path_gt

    @property
    def path_gte(self):
        """Gets the path_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_gte

    @path_gte.setter
    def path_gte(self, path_gte):
        """Sets the path_gte of this LogCollectionWhereInput.


        :param path_gte: The path_gte of this LogCollectionWhereInput.  # noqa: E501
        :type path_gte: str
        """

        self._path_gte = path_gte

    @property
    def path_in(self):
        """Gets the path_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._path_in

    @path_in.setter
    def path_in(self, path_in):
        """Sets the path_in of this LogCollectionWhereInput.


        :param path_in: The path_in of this LogCollectionWhereInput.  # noqa: E501
        :type path_in: list[str]
        """

        self._path_in = path_in

    @property
    def path_lt(self):
        """Gets the path_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_lt

    @path_lt.setter
    def path_lt(self, path_lt):
        """Sets the path_lt of this LogCollectionWhereInput.


        :param path_lt: The path_lt of this LogCollectionWhereInput.  # noqa: E501
        :type path_lt: str
        """

        self._path_lt = path_lt

    @property
    def path_lte(self):
        """Gets the path_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_lte

    @path_lte.setter
    def path_lte(self, path_lte):
        """Sets the path_lte of this LogCollectionWhereInput.


        :param path_lte: The path_lte of this LogCollectionWhereInput.  # noqa: E501
        :type path_lte: str
        """

        self._path_lte = path_lte

    @property
    def path_not(self):
        """Gets the path_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_not

    @path_not.setter
    def path_not(self, path_not):
        """Sets the path_not of this LogCollectionWhereInput.


        :param path_not: The path_not of this LogCollectionWhereInput.  # noqa: E501
        :type path_not: str
        """

        self._path_not = path_not

    @property
    def path_not_contains(self):
        """Gets the path_not_contains of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_not_contains

    @path_not_contains.setter
    def path_not_contains(self, path_not_contains):
        """Sets the path_not_contains of this LogCollectionWhereInput.


        :param path_not_contains: The path_not_contains of this LogCollectionWhereInput.  # noqa: E501
        :type path_not_contains: str
        """

        self._path_not_contains = path_not_contains

    @property
    def path_not_ends_with(self):
        """Gets the path_not_ends_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_not_ends_with

    @path_not_ends_with.setter
    def path_not_ends_with(self, path_not_ends_with):
        """Sets the path_not_ends_with of this LogCollectionWhereInput.


        :param path_not_ends_with: The path_not_ends_with of this LogCollectionWhereInput.  # noqa: E501
        :type path_not_ends_with: str
        """

        self._path_not_ends_with = path_not_ends_with

    @property
    def path_not_in(self):
        """Gets the path_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._path_not_in

    @path_not_in.setter
    def path_not_in(self, path_not_in):
        """Sets the path_not_in of this LogCollectionWhereInput.


        :param path_not_in: The path_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type path_not_in: list[str]
        """

        self._path_not_in = path_not_in

    @property
    def path_not_starts_with(self):
        """Gets the path_not_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_not_starts_with

    @path_not_starts_with.setter
    def path_not_starts_with(self, path_not_starts_with):
        """Sets the path_not_starts_with of this LogCollectionWhereInput.


        :param path_not_starts_with: The path_not_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type path_not_starts_with: str
        """

        self._path_not_starts_with = path_not_starts_with

    @property
    def path_starts_with(self):
        """Gets the path_starts_with of this LogCollectionWhereInput.  # noqa: E501


        :return: The path_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._path_starts_with

    @path_starts_with.setter
    def path_starts_with(self, path_starts_with):
        """Sets the path_starts_with of this LogCollectionWhereInput.


        :param path_starts_with: The path_starts_with of this LogCollectionWhereInput.  # noqa: E501
        :type path_starts_with: str
        """

        self._path_starts_with = path_starts_with

    @property
    def progress(self):
        """Gets the progress of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this LogCollectionWhereInput.


        :param progress: The progress of this LogCollectionWhereInput.  # noqa: E501
        :type progress: float
        """

        self._progress = progress

    @property
    def progress_gt(self):
        """Gets the progress_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress_gt

    @progress_gt.setter
    def progress_gt(self, progress_gt):
        """Sets the progress_gt of this LogCollectionWhereInput.


        :param progress_gt: The progress_gt of this LogCollectionWhereInput.  # noqa: E501
        :type progress_gt: float
        """

        self._progress_gt = progress_gt

    @property
    def progress_gte(self):
        """Gets the progress_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress_gte

    @progress_gte.setter
    def progress_gte(self, progress_gte):
        """Sets the progress_gte of this LogCollectionWhereInput.


        :param progress_gte: The progress_gte of this LogCollectionWhereInput.  # noqa: E501
        :type progress_gte: float
        """

        self._progress_gte = progress_gte

    @property
    def progress_in(self):
        """Gets the progress_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[float]
        """
        return self._progress_in

    @progress_in.setter
    def progress_in(self, progress_in):
        """Sets the progress_in of this LogCollectionWhereInput.


        :param progress_in: The progress_in of this LogCollectionWhereInput.  # noqa: E501
        :type progress_in: list[float]
        """

        self._progress_in = progress_in

    @property
    def progress_lt(self):
        """Gets the progress_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress_lt

    @progress_lt.setter
    def progress_lt(self, progress_lt):
        """Sets the progress_lt of this LogCollectionWhereInput.


        :param progress_lt: The progress_lt of this LogCollectionWhereInput.  # noqa: E501
        :type progress_lt: float
        """

        self._progress_lt = progress_lt

    @property
    def progress_lte(self):
        """Gets the progress_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress_lte

    @progress_lte.setter
    def progress_lte(self, progress_lte):
        """Sets the progress_lte of this LogCollectionWhereInput.


        :param progress_lte: The progress_lte of this LogCollectionWhereInput.  # noqa: E501
        :type progress_lte: float
        """

        self._progress_lte = progress_lte

    @property
    def progress_not(self):
        """Gets the progress_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._progress_not

    @progress_not.setter
    def progress_not(self, progress_not):
        """Sets the progress_not of this LogCollectionWhereInput.


        :param progress_not: The progress_not of this LogCollectionWhereInput.  # noqa: E501
        :type progress_not: float
        """

        self._progress_not = progress_not

    @property
    def progress_not_in(self):
        """Gets the progress_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The progress_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[float]
        """
        return self._progress_not_in

    @progress_not_in.setter
    def progress_not_in(self, progress_not_in):
        """Sets the progress_not_in of this LogCollectionWhereInput.


        :param progress_not_in: The progress_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type progress_not_in: list[float]
        """

        self._progress_not_in = progress_not_in

    @property
    def size(self):
        """Gets the size of this LogCollectionWhereInput.  # noqa: E501


        :return: The size of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LogCollectionWhereInput.


        :param size: The size of this LogCollectionWhereInput.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def size_gt(self):
        """Gets the size_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size_gt

    @size_gt.setter
    def size_gt(self, size_gt):
        """Sets the size_gt of this LogCollectionWhereInput.


        :param size_gt: The size_gt of this LogCollectionWhereInput.  # noqa: E501
        :type size_gt: int
        """

        self._size_gt = size_gt

    @property
    def size_gte(self):
        """Gets the size_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size_gte

    @size_gte.setter
    def size_gte(self, size_gte):
        """Sets the size_gte of this LogCollectionWhereInput.


        :param size_gte: The size_gte of this LogCollectionWhereInput.  # noqa: E501
        :type size_gte: int
        """

        self._size_gte = size_gte

    @property
    def size_in(self):
        """Gets the size_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._size_in

    @size_in.setter
    def size_in(self, size_in):
        """Sets the size_in of this LogCollectionWhereInput.


        :param size_in: The size_in of this LogCollectionWhereInput.  # noqa: E501
        :type size_in: list[int]
        """

        self._size_in = size_in

    @property
    def size_lt(self):
        """Gets the size_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size_lt

    @size_lt.setter
    def size_lt(self, size_lt):
        """Sets the size_lt of this LogCollectionWhereInput.


        :param size_lt: The size_lt of this LogCollectionWhereInput.  # noqa: E501
        :type size_lt: int
        """

        self._size_lt = size_lt

    @property
    def size_lte(self):
        """Gets the size_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size_lte

    @size_lte.setter
    def size_lte(self, size_lte):
        """Sets the size_lte of this LogCollectionWhereInput.


        :param size_lte: The size_lte of this LogCollectionWhereInput.  # noqa: E501
        :type size_lte: int
        """

        self._size_lte = size_lte

    @property
    def size_not(self):
        """Gets the size_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._size_not

    @size_not.setter
    def size_not(self, size_not):
        """Sets the size_not of this LogCollectionWhereInput.


        :param size_not: The size_not of this LogCollectionWhereInput.  # noqa: E501
        :type size_not: int
        """

        self._size_not = size_not

    @property
    def size_not_in(self):
        """Gets the size_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The size_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._size_not_in

    @size_not_in.setter
    def size_not_in(self, size_not_in):
        """Sets the size_not_in of this LogCollectionWhereInput.


        :param size_not_in: The size_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type size_not_in: list[int]
        """

        self._size_not_in = size_not_in

    @property
    def started_at(self):
        """Gets the started_at of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this LogCollectionWhereInput.


        :param started_at: The started_at of this LogCollectionWhereInput.  # noqa: E501
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def started_at_gt(self):
        """Gets the started_at_gt of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at_gt

    @started_at_gt.setter
    def started_at_gt(self, started_at_gt):
        """Sets the started_at_gt of this LogCollectionWhereInput.


        :param started_at_gt: The started_at_gt of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_gt: str
        """

        self._started_at_gt = started_at_gt

    @property
    def started_at_gte(self):
        """Gets the started_at_gte of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at_gte

    @started_at_gte.setter
    def started_at_gte(self, started_at_gte):
        """Sets the started_at_gte of this LogCollectionWhereInput.


        :param started_at_gte: The started_at_gte of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_gte: str
        """

        self._started_at_gte = started_at_gte

    @property
    def started_at_in(self):
        """Gets the started_at_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._started_at_in

    @started_at_in.setter
    def started_at_in(self, started_at_in):
        """Sets the started_at_in of this LogCollectionWhereInput.


        :param started_at_in: The started_at_in of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_in: list[str]
        """

        self._started_at_in = started_at_in

    @property
    def started_at_lt(self):
        """Gets the started_at_lt of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at_lt

    @started_at_lt.setter
    def started_at_lt(self, started_at_lt):
        """Sets the started_at_lt of this LogCollectionWhereInput.


        :param started_at_lt: The started_at_lt of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_lt: str
        """

        self._started_at_lt = started_at_lt

    @property
    def started_at_lte(self):
        """Gets the started_at_lte of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at_lte

    @started_at_lte.setter
    def started_at_lte(self, started_at_lte):
        """Sets the started_at_lte of this LogCollectionWhereInput.


        :param started_at_lte: The started_at_lte of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_lte: str
        """

        self._started_at_lte = started_at_lte

    @property
    def started_at_not(self):
        """Gets the started_at_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._started_at_not

    @started_at_not.setter
    def started_at_not(self, started_at_not):
        """Sets the started_at_not of this LogCollectionWhereInput.


        :param started_at_not: The started_at_not of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_not: str
        """

        self._started_at_not = started_at_not

    @property
    def started_at_not_in(self):
        """Gets the started_at_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The started_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._started_at_not_in

    @started_at_not_in.setter
    def started_at_not_in(self, started_at_not_in):
        """Sets the started_at_not_in of this LogCollectionWhereInput.


        :param started_at_not_in: The started_at_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type started_at_not_in: list[str]
        """

        self._started_at_not_in = started_at_not_in

    @property
    def status(self):
        """Gets the status of this LogCollectionWhereInput.  # noqa: E501


        :return: The status of this LogCollectionWhereInput.  # noqa: E501
        :rtype: LogCollectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogCollectionWhereInput.


        :param status: The status of this LogCollectionWhereInput.  # noqa: E501
        :type status: LogCollectionStatus
        """

        self._status = status

    @property
    def status_in(self):
        """Gets the status_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The status_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[LogCollectionStatus]
        """
        return self._status_in

    @status_in.setter
    def status_in(self, status_in):
        """Sets the status_in of this LogCollectionWhereInput.


        :param status_in: The status_in of this LogCollectionWhereInput.  # noqa: E501
        :type status_in: list[LogCollectionStatus]
        """

        self._status_in = status_in

    @property
    def status_not(self):
        """Gets the status_not of this LogCollectionWhereInput.  # noqa: E501


        :return: The status_not of this LogCollectionWhereInput.  # noqa: E501
        :rtype: LogCollectionStatus
        """
        return self._status_not

    @status_not.setter
    def status_not(self, status_not):
        """Sets the status_not of this LogCollectionWhereInput.


        :param status_not: The status_not of this LogCollectionWhereInput.  # noqa: E501
        :type status_not: LogCollectionStatus
        """

        self._status_not = status_not

    @property
    def status_not_in(self):
        """Gets the status_not_in of this LogCollectionWhereInput.  # noqa: E501


        :return: The status_not_in of this LogCollectionWhereInput.  # noqa: E501
        :rtype: list[LogCollectionStatus]
        """
        return self._status_not_in

    @status_not_in.setter
    def status_not_in(self, status_not_in):
        """Sets the status_not_in of this LogCollectionWhereInput.


        :param status_not_in: The status_not_in of this LogCollectionWhereInput.  # noqa: E501
        :type status_not_in: list[LogCollectionStatus]
        """

        self._status_not_in = status_not_in

    @property
    def witness(self):
        """Gets the witness of this LogCollectionWhereInput.  # noqa: E501


        :return: The witness of this LogCollectionWhereInput.  # noqa: E501
        :rtype: WitnessWhereInput
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this LogCollectionWhereInput.


        :param witness: The witness of this LogCollectionWhereInput.  # noqa: E501
        :type witness: WitnessWhereInput
        """

        self._witness = witness

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogCollectionWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogCollectionWhereInput):
            return True

        return self.to_dict() != other.to_dict()
