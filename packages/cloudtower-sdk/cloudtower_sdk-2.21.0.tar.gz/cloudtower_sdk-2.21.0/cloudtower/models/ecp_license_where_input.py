# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class EcpLicenseWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[EcpLicenseWhereInput]',
        '_not': 'list[EcpLicenseWhereInput]',
        '_or': 'list[EcpLicenseWhereInput]',
        'cluster': 'ClusterWhereInput',
        'cluster_local_id': 'str',
        'cluster_local_id_contains': 'str',
        'cluster_local_id_ends_with': 'str',
        'cluster_local_id_gt': 'str',
        'cluster_local_id_gte': 'str',
        'cluster_local_id_in': 'list[str]',
        'cluster_local_id_lt': 'str',
        'cluster_local_id_lte': 'str',
        'cluster_local_id_not': 'str',
        'cluster_local_id_not_contains': 'str',
        'cluster_local_id_not_ends_with': 'str',
        'cluster_local_id_not_in': 'list[str]',
        'cluster_local_id_not_starts_with': 'str',
        'cluster_local_id_starts_with': 'str',
        'ecp_edition': 'EcpEdition',
        'ecp_edition_in': 'list[EcpEdition]',
        'ecp_edition_not': 'EcpEdition',
        'ecp_edition_not_in': 'list[EcpEdition]',
        'expire_date': 'str',
        'expire_date_gt': 'str',
        'expire_date_gte': 'str',
        'expire_date_in': 'list[str]',
        'expire_date_lt': 'str',
        'expire_date_lte': 'str',
        'expire_date_not': 'str',
        'expire_date_not_in': 'list[str]',
        'has_metrox': 'bool',
        'has_metrox_not': 'bool',
        'has_remote_backup': 'bool',
        'has_remote_backup_not': 'bool',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'license_type': 'LicenseType',
        'license_type_in': 'list[LicenseType]',
        'license_type_not': 'LicenseType',
        'license_type_not_in': 'list[LicenseType]',
        'max_core_num': 'int',
        'max_core_num_gt': 'int',
        'max_core_num_gte': 'int',
        'max_core_num_in': 'list[int]',
        'max_core_num_lt': 'int',
        'max_core_num_lte': 'int',
        'max_core_num_not': 'int',
        'max_core_num_not_in': 'list[int]',
        'max_physical_data_capacity': 'float',
        'max_physical_data_capacity_gt': 'float',
        'max_physical_data_capacity_gte': 'float',
        'max_physical_data_capacity_in': 'list[float]',
        'max_physical_data_capacity_lt': 'float',
        'max_physical_data_capacity_lte': 'float',
        'max_physical_data_capacity_not': 'float',
        'max_physical_data_capacity_not_in': 'list[float]',
        'original_code': 'str',
        'original_code_contains': 'str',
        'original_code_ends_with': 'str',
        'original_code_gt': 'str',
        'original_code_gte': 'str',
        'original_code_in': 'list[str]',
        'original_code_lt': 'str',
        'original_code_lte': 'str',
        'original_code_not': 'str',
        'original_code_not_contains': 'str',
        'original_code_not_ends_with': 'str',
        'original_code_not_in': 'list[str]',
        'original_code_not_starts_with': 'str',
        'original_code_starts_with': 'str',
        'product_name': 'str',
        'product_name_contains': 'str',
        'product_name_ends_with': 'str',
        'product_name_gt': 'str',
        'product_name_gte': 'str',
        'product_name_in': 'list[str]',
        'product_name_lt': 'str',
        'product_name_lte': 'str',
        'product_name_not': 'str',
        'product_name_not_contains': 'str',
        'product_name_not_ends_with': 'str',
        'product_name_not_in': 'list[str]',
        'product_name_not_starts_with': 'str',
        'product_name_starts_with': 'str',
        'serial': 'str',
        'serial_contains': 'str',
        'serial_ends_with': 'str',
        'serial_gt': 'str',
        'serial_gte': 'str',
        'serial_in': 'list[str]',
        'serial_lt': 'str',
        'serial_lte': 'str',
        'serial_not': 'str',
        'serial_not_contains': 'str',
        'serial_not_ends_with': 'str',
        'serial_not_in': 'list[str]',
        'serial_not_starts_with': 'str',
        'serial_starts_with': 'str',
        'sign_date': 'str',
        'sign_date_gt': 'str',
        'sign_date_gte': 'str',
        'sign_date_in': 'list[str]',
        'sign_date_lt': 'str',
        'sign_date_lte': 'str',
        'sign_date_not': 'str',
        'sign_date_not_in': 'list[str]',
        'subscription_expire_date': 'str',
        'subscription_expire_date_gt': 'str',
        'subscription_expire_date_gte': 'str',
        'subscription_expire_date_in': 'list[str]',
        'subscription_expire_date_lt': 'str',
        'subscription_expire_date_lte': 'str',
        'subscription_expire_date_not': 'str',
        'subscription_expire_date_not_in': 'list[str]',
        'subscription_start_date': 'str',
        'subscription_start_date_gt': 'str',
        'subscription_start_date_gte': 'str',
        'subscription_start_date_in': 'list[str]',
        'subscription_start_date_lt': 'str',
        'subscription_start_date_lte': 'str',
        'subscription_start_date_not': 'str',
        'subscription_start_date_not_in': 'list[str]',
        'vendor': 'str',
        'vendor_contains': 'str',
        'vendor_ends_with': 'str',
        'vendor_gt': 'str',
        'vendor_gte': 'str',
        'vendor_in': 'list[str]',
        'vendor_lt': 'str',
        'vendor_lte': 'str',
        'vendor_not': 'str',
        'vendor_not_contains': 'str',
        'vendor_not_ends_with': 'str',
        'vendor_not_in': 'list[str]',
        'vendor_not_starts_with': 'str',
        'vendor_starts_with': 'str',
        'version': 'int',
        'version_gt': 'int',
        'version_gte': 'int',
        'version_in': 'list[int]',
        'version_lt': 'int',
        'version_lte': 'int',
        'version_not': 'int',
        'version_not_in': 'list[int]'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'cluster': 'cluster',
        'cluster_local_id': 'cluster_local_id',
        'cluster_local_id_contains': 'cluster_local_id_contains',
        'cluster_local_id_ends_with': 'cluster_local_id_ends_with',
        'cluster_local_id_gt': 'cluster_local_id_gt',
        'cluster_local_id_gte': 'cluster_local_id_gte',
        'cluster_local_id_in': 'cluster_local_id_in',
        'cluster_local_id_lt': 'cluster_local_id_lt',
        'cluster_local_id_lte': 'cluster_local_id_lte',
        'cluster_local_id_not': 'cluster_local_id_not',
        'cluster_local_id_not_contains': 'cluster_local_id_not_contains',
        'cluster_local_id_not_ends_with': 'cluster_local_id_not_ends_with',
        'cluster_local_id_not_in': 'cluster_local_id_not_in',
        'cluster_local_id_not_starts_with': 'cluster_local_id_not_starts_with',
        'cluster_local_id_starts_with': 'cluster_local_id_starts_with',
        'ecp_edition': 'ecp_edition',
        'ecp_edition_in': 'ecp_edition_in',
        'ecp_edition_not': 'ecp_edition_not',
        'ecp_edition_not_in': 'ecp_edition_not_in',
        'expire_date': 'expire_date',
        'expire_date_gt': 'expire_date_gt',
        'expire_date_gte': 'expire_date_gte',
        'expire_date_in': 'expire_date_in',
        'expire_date_lt': 'expire_date_lt',
        'expire_date_lte': 'expire_date_lte',
        'expire_date_not': 'expire_date_not',
        'expire_date_not_in': 'expire_date_not_in',
        'has_metrox': 'has_metrox',
        'has_metrox_not': 'has_metrox_not',
        'has_remote_backup': 'has_remote_backup',
        'has_remote_backup_not': 'has_remote_backup_not',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'license_type': 'license_type',
        'license_type_in': 'license_type_in',
        'license_type_not': 'license_type_not',
        'license_type_not_in': 'license_type_not_in',
        'max_core_num': 'max_core_num',
        'max_core_num_gt': 'max_core_num_gt',
        'max_core_num_gte': 'max_core_num_gte',
        'max_core_num_in': 'max_core_num_in',
        'max_core_num_lt': 'max_core_num_lt',
        'max_core_num_lte': 'max_core_num_lte',
        'max_core_num_not': 'max_core_num_not',
        'max_core_num_not_in': 'max_core_num_not_in',
        'max_physical_data_capacity': 'max_physical_data_capacity',
        'max_physical_data_capacity_gt': 'max_physical_data_capacity_gt',
        'max_physical_data_capacity_gte': 'max_physical_data_capacity_gte',
        'max_physical_data_capacity_in': 'max_physical_data_capacity_in',
        'max_physical_data_capacity_lt': 'max_physical_data_capacity_lt',
        'max_physical_data_capacity_lte': 'max_physical_data_capacity_lte',
        'max_physical_data_capacity_not': 'max_physical_data_capacity_not',
        'max_physical_data_capacity_not_in': 'max_physical_data_capacity_not_in',
        'original_code': 'original_code',
        'original_code_contains': 'original_code_contains',
        'original_code_ends_with': 'original_code_ends_with',
        'original_code_gt': 'original_code_gt',
        'original_code_gte': 'original_code_gte',
        'original_code_in': 'original_code_in',
        'original_code_lt': 'original_code_lt',
        'original_code_lte': 'original_code_lte',
        'original_code_not': 'original_code_not',
        'original_code_not_contains': 'original_code_not_contains',
        'original_code_not_ends_with': 'original_code_not_ends_with',
        'original_code_not_in': 'original_code_not_in',
        'original_code_not_starts_with': 'original_code_not_starts_with',
        'original_code_starts_with': 'original_code_starts_with',
        'product_name': 'product_name',
        'product_name_contains': 'product_name_contains',
        'product_name_ends_with': 'product_name_ends_with',
        'product_name_gt': 'product_name_gt',
        'product_name_gte': 'product_name_gte',
        'product_name_in': 'product_name_in',
        'product_name_lt': 'product_name_lt',
        'product_name_lte': 'product_name_lte',
        'product_name_not': 'product_name_not',
        'product_name_not_contains': 'product_name_not_contains',
        'product_name_not_ends_with': 'product_name_not_ends_with',
        'product_name_not_in': 'product_name_not_in',
        'product_name_not_starts_with': 'product_name_not_starts_with',
        'product_name_starts_with': 'product_name_starts_with',
        'serial': 'serial',
        'serial_contains': 'serial_contains',
        'serial_ends_with': 'serial_ends_with',
        'serial_gt': 'serial_gt',
        'serial_gte': 'serial_gte',
        'serial_in': 'serial_in',
        'serial_lt': 'serial_lt',
        'serial_lte': 'serial_lte',
        'serial_not': 'serial_not',
        'serial_not_contains': 'serial_not_contains',
        'serial_not_ends_with': 'serial_not_ends_with',
        'serial_not_in': 'serial_not_in',
        'serial_not_starts_with': 'serial_not_starts_with',
        'serial_starts_with': 'serial_starts_with',
        'sign_date': 'sign_date',
        'sign_date_gt': 'sign_date_gt',
        'sign_date_gte': 'sign_date_gte',
        'sign_date_in': 'sign_date_in',
        'sign_date_lt': 'sign_date_lt',
        'sign_date_lte': 'sign_date_lte',
        'sign_date_not': 'sign_date_not',
        'sign_date_not_in': 'sign_date_not_in',
        'subscription_expire_date': 'subscription_expire_date',
        'subscription_expire_date_gt': 'subscription_expire_date_gt',
        'subscription_expire_date_gte': 'subscription_expire_date_gte',
        'subscription_expire_date_in': 'subscription_expire_date_in',
        'subscription_expire_date_lt': 'subscription_expire_date_lt',
        'subscription_expire_date_lte': 'subscription_expire_date_lte',
        'subscription_expire_date_not': 'subscription_expire_date_not',
        'subscription_expire_date_not_in': 'subscription_expire_date_not_in',
        'subscription_start_date': 'subscription_start_date',
        'subscription_start_date_gt': 'subscription_start_date_gt',
        'subscription_start_date_gte': 'subscription_start_date_gte',
        'subscription_start_date_in': 'subscription_start_date_in',
        'subscription_start_date_lt': 'subscription_start_date_lt',
        'subscription_start_date_lte': 'subscription_start_date_lte',
        'subscription_start_date_not': 'subscription_start_date_not',
        'subscription_start_date_not_in': 'subscription_start_date_not_in',
        'vendor': 'vendor',
        'vendor_contains': 'vendor_contains',
        'vendor_ends_with': 'vendor_ends_with',
        'vendor_gt': 'vendor_gt',
        'vendor_gte': 'vendor_gte',
        'vendor_in': 'vendor_in',
        'vendor_lt': 'vendor_lt',
        'vendor_lte': 'vendor_lte',
        'vendor_not': 'vendor_not',
        'vendor_not_contains': 'vendor_not_contains',
        'vendor_not_ends_with': 'vendor_not_ends_with',
        'vendor_not_in': 'vendor_not_in',
        'vendor_not_starts_with': 'vendor_not_starts_with',
        'vendor_starts_with': 'vendor_starts_with',
        'version': 'version',
        'version_gt': 'version_gt',
        'version_gte': 'version_gte',
        'version_in': 'version_in',
        'version_lt': 'version_lt',
        'version_lte': 'version_lte',
        'version_not': 'version_not',
        'version_not_in': 'version_not_in'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """EcpLicenseWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._cluster = None
        self._cluster_local_id = None
        self._cluster_local_id_contains = None
        self._cluster_local_id_ends_with = None
        self._cluster_local_id_gt = None
        self._cluster_local_id_gte = None
        self._cluster_local_id_in = None
        self._cluster_local_id_lt = None
        self._cluster_local_id_lte = None
        self._cluster_local_id_not = None
        self._cluster_local_id_not_contains = None
        self._cluster_local_id_not_ends_with = None
        self._cluster_local_id_not_in = None
        self._cluster_local_id_not_starts_with = None
        self._cluster_local_id_starts_with = None
        self._ecp_edition = None
        self._ecp_edition_in = None
        self._ecp_edition_not = None
        self._ecp_edition_not_in = None
        self._expire_date = None
        self._expire_date_gt = None
        self._expire_date_gte = None
        self._expire_date_in = None
        self._expire_date_lt = None
        self._expire_date_lte = None
        self._expire_date_not = None
        self._expire_date_not_in = None
        self._has_metrox = None
        self._has_metrox_not = None
        self._has_remote_backup = None
        self._has_remote_backup_not = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._license_type = None
        self._license_type_in = None
        self._license_type_not = None
        self._license_type_not_in = None
        self._max_core_num = None
        self._max_core_num_gt = None
        self._max_core_num_gte = None
        self._max_core_num_in = None
        self._max_core_num_lt = None
        self._max_core_num_lte = None
        self._max_core_num_not = None
        self._max_core_num_not_in = None
        self._max_physical_data_capacity = None
        self._max_physical_data_capacity_gt = None
        self._max_physical_data_capacity_gte = None
        self._max_physical_data_capacity_in = None
        self._max_physical_data_capacity_lt = None
        self._max_physical_data_capacity_lte = None
        self._max_physical_data_capacity_not = None
        self._max_physical_data_capacity_not_in = None
        self._original_code = None
        self._original_code_contains = None
        self._original_code_ends_with = None
        self._original_code_gt = None
        self._original_code_gte = None
        self._original_code_in = None
        self._original_code_lt = None
        self._original_code_lte = None
        self._original_code_not = None
        self._original_code_not_contains = None
        self._original_code_not_ends_with = None
        self._original_code_not_in = None
        self._original_code_not_starts_with = None
        self._original_code_starts_with = None
        self._product_name = None
        self._product_name_contains = None
        self._product_name_ends_with = None
        self._product_name_gt = None
        self._product_name_gte = None
        self._product_name_in = None
        self._product_name_lt = None
        self._product_name_lte = None
        self._product_name_not = None
        self._product_name_not_contains = None
        self._product_name_not_ends_with = None
        self._product_name_not_in = None
        self._product_name_not_starts_with = None
        self._product_name_starts_with = None
        self._serial = None
        self._serial_contains = None
        self._serial_ends_with = None
        self._serial_gt = None
        self._serial_gte = None
        self._serial_in = None
        self._serial_lt = None
        self._serial_lte = None
        self._serial_not = None
        self._serial_not_contains = None
        self._serial_not_ends_with = None
        self._serial_not_in = None
        self._serial_not_starts_with = None
        self._serial_starts_with = None
        self._sign_date = None
        self._sign_date_gt = None
        self._sign_date_gte = None
        self._sign_date_in = None
        self._sign_date_lt = None
        self._sign_date_lte = None
        self._sign_date_not = None
        self._sign_date_not_in = None
        self._subscription_expire_date = None
        self._subscription_expire_date_gt = None
        self._subscription_expire_date_gte = None
        self._subscription_expire_date_in = None
        self._subscription_expire_date_lt = None
        self._subscription_expire_date_lte = None
        self._subscription_expire_date_not = None
        self._subscription_expire_date_not_in = None
        self._subscription_start_date = None
        self._subscription_start_date_gt = None
        self._subscription_start_date_gte = None
        self._subscription_start_date_in = None
        self._subscription_start_date_lt = None
        self._subscription_start_date_lte = None
        self._subscription_start_date_not = None
        self._subscription_start_date_not_in = None
        self._vendor = None
        self._vendor_contains = None
        self._vendor_ends_with = None
        self._vendor_gt = None
        self._vendor_gte = None
        self._vendor_in = None
        self._vendor_lt = None
        self._vendor_lte = None
        self._vendor_not = None
        self._vendor_not_contains = None
        self._vendor_not_ends_with = None
        self._vendor_not_in = None
        self._vendor_not_starts_with = None
        self._vendor_starts_with = None
        self._version = None
        self._version_gt = None
        self._version_gte = None
        self._version_in = None
        self._version_lt = None
        self._version_lte = None
        self._version_not = None
        self._version_not_in = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.cluster = kwargs.get("cluster", None)
        self.cluster_local_id = kwargs.get("cluster_local_id", None)
        self.cluster_local_id_contains = kwargs.get("cluster_local_id_contains", None)
        self.cluster_local_id_ends_with = kwargs.get("cluster_local_id_ends_with", None)
        self.cluster_local_id_gt = kwargs.get("cluster_local_id_gt", None)
        self.cluster_local_id_gte = kwargs.get("cluster_local_id_gte", None)
        self.cluster_local_id_in = kwargs.get("cluster_local_id_in", None)
        self.cluster_local_id_lt = kwargs.get("cluster_local_id_lt", None)
        self.cluster_local_id_lte = kwargs.get("cluster_local_id_lte", None)
        self.cluster_local_id_not = kwargs.get("cluster_local_id_not", None)
        self.cluster_local_id_not_contains = kwargs.get("cluster_local_id_not_contains", None)
        self.cluster_local_id_not_ends_with = kwargs.get("cluster_local_id_not_ends_with", None)
        self.cluster_local_id_not_in = kwargs.get("cluster_local_id_not_in", None)
        self.cluster_local_id_not_starts_with = kwargs.get("cluster_local_id_not_starts_with", None)
        self.cluster_local_id_starts_with = kwargs.get("cluster_local_id_starts_with", None)
        self.ecp_edition = kwargs.get("ecp_edition", None)
        self.ecp_edition_in = kwargs.get("ecp_edition_in", None)
        self.ecp_edition_not = kwargs.get("ecp_edition_not", None)
        self.ecp_edition_not_in = kwargs.get("ecp_edition_not_in", None)
        self.expire_date = kwargs.get("expire_date", None)
        self.expire_date_gt = kwargs.get("expire_date_gt", None)
        self.expire_date_gte = kwargs.get("expire_date_gte", None)
        self.expire_date_in = kwargs.get("expire_date_in", None)
        self.expire_date_lt = kwargs.get("expire_date_lt", None)
        self.expire_date_lte = kwargs.get("expire_date_lte", None)
        self.expire_date_not = kwargs.get("expire_date_not", None)
        self.expire_date_not_in = kwargs.get("expire_date_not_in", None)
        self.has_metrox = kwargs.get("has_metrox", None)
        self.has_metrox_not = kwargs.get("has_metrox_not", None)
        self.has_remote_backup = kwargs.get("has_remote_backup", None)
        self.has_remote_backup_not = kwargs.get("has_remote_backup_not", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.license_type = kwargs.get("license_type", None)
        self.license_type_in = kwargs.get("license_type_in", None)
        self.license_type_not = kwargs.get("license_type_not", None)
        self.license_type_not_in = kwargs.get("license_type_not_in", None)
        self.max_core_num = kwargs.get("max_core_num", None)
        self.max_core_num_gt = kwargs.get("max_core_num_gt", None)
        self.max_core_num_gte = kwargs.get("max_core_num_gte", None)
        self.max_core_num_in = kwargs.get("max_core_num_in", None)
        self.max_core_num_lt = kwargs.get("max_core_num_lt", None)
        self.max_core_num_lte = kwargs.get("max_core_num_lte", None)
        self.max_core_num_not = kwargs.get("max_core_num_not", None)
        self.max_core_num_not_in = kwargs.get("max_core_num_not_in", None)
        self.max_physical_data_capacity = kwargs.get("max_physical_data_capacity", None)
        self.max_physical_data_capacity_gt = kwargs.get("max_physical_data_capacity_gt", None)
        self.max_physical_data_capacity_gte = kwargs.get("max_physical_data_capacity_gte", None)
        self.max_physical_data_capacity_in = kwargs.get("max_physical_data_capacity_in", None)
        self.max_physical_data_capacity_lt = kwargs.get("max_physical_data_capacity_lt", None)
        self.max_physical_data_capacity_lte = kwargs.get("max_physical_data_capacity_lte", None)
        self.max_physical_data_capacity_not = kwargs.get("max_physical_data_capacity_not", None)
        self.max_physical_data_capacity_not_in = kwargs.get("max_physical_data_capacity_not_in", None)
        self.original_code = kwargs.get("original_code", None)
        self.original_code_contains = kwargs.get("original_code_contains", None)
        self.original_code_ends_with = kwargs.get("original_code_ends_with", None)
        self.original_code_gt = kwargs.get("original_code_gt", None)
        self.original_code_gte = kwargs.get("original_code_gte", None)
        self.original_code_in = kwargs.get("original_code_in", None)
        self.original_code_lt = kwargs.get("original_code_lt", None)
        self.original_code_lte = kwargs.get("original_code_lte", None)
        self.original_code_not = kwargs.get("original_code_not", None)
        self.original_code_not_contains = kwargs.get("original_code_not_contains", None)
        self.original_code_not_ends_with = kwargs.get("original_code_not_ends_with", None)
        self.original_code_not_in = kwargs.get("original_code_not_in", None)
        self.original_code_not_starts_with = kwargs.get("original_code_not_starts_with", None)
        self.original_code_starts_with = kwargs.get("original_code_starts_with", None)
        self.product_name = kwargs.get("product_name", None)
        self.product_name_contains = kwargs.get("product_name_contains", None)
        self.product_name_ends_with = kwargs.get("product_name_ends_with", None)
        self.product_name_gt = kwargs.get("product_name_gt", None)
        self.product_name_gte = kwargs.get("product_name_gte", None)
        self.product_name_in = kwargs.get("product_name_in", None)
        self.product_name_lt = kwargs.get("product_name_lt", None)
        self.product_name_lte = kwargs.get("product_name_lte", None)
        self.product_name_not = kwargs.get("product_name_not", None)
        self.product_name_not_contains = kwargs.get("product_name_not_contains", None)
        self.product_name_not_ends_with = kwargs.get("product_name_not_ends_with", None)
        self.product_name_not_in = kwargs.get("product_name_not_in", None)
        self.product_name_not_starts_with = kwargs.get("product_name_not_starts_with", None)
        self.product_name_starts_with = kwargs.get("product_name_starts_with", None)
        self.serial = kwargs.get("serial", None)
        self.serial_contains = kwargs.get("serial_contains", None)
        self.serial_ends_with = kwargs.get("serial_ends_with", None)
        self.serial_gt = kwargs.get("serial_gt", None)
        self.serial_gte = kwargs.get("serial_gte", None)
        self.serial_in = kwargs.get("serial_in", None)
        self.serial_lt = kwargs.get("serial_lt", None)
        self.serial_lte = kwargs.get("serial_lte", None)
        self.serial_not = kwargs.get("serial_not", None)
        self.serial_not_contains = kwargs.get("serial_not_contains", None)
        self.serial_not_ends_with = kwargs.get("serial_not_ends_with", None)
        self.serial_not_in = kwargs.get("serial_not_in", None)
        self.serial_not_starts_with = kwargs.get("serial_not_starts_with", None)
        self.serial_starts_with = kwargs.get("serial_starts_with", None)
        self.sign_date = kwargs.get("sign_date", None)
        self.sign_date_gt = kwargs.get("sign_date_gt", None)
        self.sign_date_gte = kwargs.get("sign_date_gte", None)
        self.sign_date_in = kwargs.get("sign_date_in", None)
        self.sign_date_lt = kwargs.get("sign_date_lt", None)
        self.sign_date_lte = kwargs.get("sign_date_lte", None)
        self.sign_date_not = kwargs.get("sign_date_not", None)
        self.sign_date_not_in = kwargs.get("sign_date_not_in", None)
        self.subscription_expire_date = kwargs.get("subscription_expire_date", None)
        self.subscription_expire_date_gt = kwargs.get("subscription_expire_date_gt", None)
        self.subscription_expire_date_gte = kwargs.get("subscription_expire_date_gte", None)
        self.subscription_expire_date_in = kwargs.get("subscription_expire_date_in", None)
        self.subscription_expire_date_lt = kwargs.get("subscription_expire_date_lt", None)
        self.subscription_expire_date_lte = kwargs.get("subscription_expire_date_lte", None)
        self.subscription_expire_date_not = kwargs.get("subscription_expire_date_not", None)
        self.subscription_expire_date_not_in = kwargs.get("subscription_expire_date_not_in", None)
        self.subscription_start_date = kwargs.get("subscription_start_date", None)
        self.subscription_start_date_gt = kwargs.get("subscription_start_date_gt", None)
        self.subscription_start_date_gte = kwargs.get("subscription_start_date_gte", None)
        self.subscription_start_date_in = kwargs.get("subscription_start_date_in", None)
        self.subscription_start_date_lt = kwargs.get("subscription_start_date_lt", None)
        self.subscription_start_date_lte = kwargs.get("subscription_start_date_lte", None)
        self.subscription_start_date_not = kwargs.get("subscription_start_date_not", None)
        self.subscription_start_date_not_in = kwargs.get("subscription_start_date_not_in", None)
        self.vendor = kwargs.get("vendor", None)
        self.vendor_contains = kwargs.get("vendor_contains", None)
        self.vendor_ends_with = kwargs.get("vendor_ends_with", None)
        self.vendor_gt = kwargs.get("vendor_gt", None)
        self.vendor_gte = kwargs.get("vendor_gte", None)
        self.vendor_in = kwargs.get("vendor_in", None)
        self.vendor_lt = kwargs.get("vendor_lt", None)
        self.vendor_lte = kwargs.get("vendor_lte", None)
        self.vendor_not = kwargs.get("vendor_not", None)
        self.vendor_not_contains = kwargs.get("vendor_not_contains", None)
        self.vendor_not_ends_with = kwargs.get("vendor_not_ends_with", None)
        self.vendor_not_in = kwargs.get("vendor_not_in", None)
        self.vendor_not_starts_with = kwargs.get("vendor_not_starts_with", None)
        self.vendor_starts_with = kwargs.get("vendor_starts_with", None)
        self.version = kwargs.get("version", None)
        self.version_gt = kwargs.get("version_gt", None)
        self.version_gte = kwargs.get("version_gte", None)
        self.version_in = kwargs.get("version_in", None)
        self.version_lt = kwargs.get("version_lt", None)
        self.version_lte = kwargs.get("version_lte", None)
        self.version_not = kwargs.get("version_not", None)
        self.version_not_in = kwargs.get("version_not_in", None)

    @property
    def _and(self):
        """Gets the _and of this EcpLicenseWhereInput.  # noqa: E501


        :return: The _and of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[EcpLicenseWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this EcpLicenseWhereInput.


        :param _and: The _and of this EcpLicenseWhereInput.  # noqa: E501
        :type _and: list[EcpLicenseWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The _not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[EcpLicenseWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this EcpLicenseWhereInput.


        :param _not: The _not of this EcpLicenseWhereInput.  # noqa: E501
        :type _not: list[EcpLicenseWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this EcpLicenseWhereInput.  # noqa: E501


        :return: The _or of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[EcpLicenseWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this EcpLicenseWhereInput.


        :param _or: The _or of this EcpLicenseWhereInput.  # noqa: E501
        :type _or: list[EcpLicenseWhereInput]
        """

        self.__or = _or

    @property
    def cluster(self):
        """Gets the cluster of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: ClusterWhereInput
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this EcpLicenseWhereInput.


        :param cluster: The cluster of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster: ClusterWhereInput
        """

        self._cluster = cluster

    @property
    def cluster_local_id(self):
        """Gets the cluster_local_id of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id

    @cluster_local_id.setter
    def cluster_local_id(self, cluster_local_id):
        """Sets the cluster_local_id of this EcpLicenseWhereInput.


        :param cluster_local_id: The cluster_local_id of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id: str
        """

        self._cluster_local_id = cluster_local_id

    @property
    def cluster_local_id_contains(self):
        """Gets the cluster_local_id_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_contains

    @cluster_local_id_contains.setter
    def cluster_local_id_contains(self, cluster_local_id_contains):
        """Sets the cluster_local_id_contains of this EcpLicenseWhereInput.


        :param cluster_local_id_contains: The cluster_local_id_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_contains: str
        """

        self._cluster_local_id_contains = cluster_local_id_contains

    @property
    def cluster_local_id_ends_with(self):
        """Gets the cluster_local_id_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_ends_with

    @cluster_local_id_ends_with.setter
    def cluster_local_id_ends_with(self, cluster_local_id_ends_with):
        """Sets the cluster_local_id_ends_with of this EcpLicenseWhereInput.


        :param cluster_local_id_ends_with: The cluster_local_id_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_ends_with: str
        """

        self._cluster_local_id_ends_with = cluster_local_id_ends_with

    @property
    def cluster_local_id_gt(self):
        """Gets the cluster_local_id_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_gt

    @cluster_local_id_gt.setter
    def cluster_local_id_gt(self, cluster_local_id_gt):
        """Sets the cluster_local_id_gt of this EcpLicenseWhereInput.


        :param cluster_local_id_gt: The cluster_local_id_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_gt: str
        """

        self._cluster_local_id_gt = cluster_local_id_gt

    @property
    def cluster_local_id_gte(self):
        """Gets the cluster_local_id_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_gte

    @cluster_local_id_gte.setter
    def cluster_local_id_gte(self, cluster_local_id_gte):
        """Sets the cluster_local_id_gte of this EcpLicenseWhereInput.


        :param cluster_local_id_gte: The cluster_local_id_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_gte: str
        """

        self._cluster_local_id_gte = cluster_local_id_gte

    @property
    def cluster_local_id_in(self):
        """Gets the cluster_local_id_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_local_id_in

    @cluster_local_id_in.setter
    def cluster_local_id_in(self, cluster_local_id_in):
        """Sets the cluster_local_id_in of this EcpLicenseWhereInput.


        :param cluster_local_id_in: The cluster_local_id_in of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_in: list[str]
        """

        self._cluster_local_id_in = cluster_local_id_in

    @property
    def cluster_local_id_lt(self):
        """Gets the cluster_local_id_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_lt

    @cluster_local_id_lt.setter
    def cluster_local_id_lt(self, cluster_local_id_lt):
        """Sets the cluster_local_id_lt of this EcpLicenseWhereInput.


        :param cluster_local_id_lt: The cluster_local_id_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_lt: str
        """

        self._cluster_local_id_lt = cluster_local_id_lt

    @property
    def cluster_local_id_lte(self):
        """Gets the cluster_local_id_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_lte

    @cluster_local_id_lte.setter
    def cluster_local_id_lte(self, cluster_local_id_lte):
        """Sets the cluster_local_id_lte of this EcpLicenseWhereInput.


        :param cluster_local_id_lte: The cluster_local_id_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_lte: str
        """

        self._cluster_local_id_lte = cluster_local_id_lte

    @property
    def cluster_local_id_not(self):
        """Gets the cluster_local_id_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_not

    @cluster_local_id_not.setter
    def cluster_local_id_not(self, cluster_local_id_not):
        """Sets the cluster_local_id_not of this EcpLicenseWhereInput.


        :param cluster_local_id_not: The cluster_local_id_not of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_not: str
        """

        self._cluster_local_id_not = cluster_local_id_not

    @property
    def cluster_local_id_not_contains(self):
        """Gets the cluster_local_id_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_not_contains

    @cluster_local_id_not_contains.setter
    def cluster_local_id_not_contains(self, cluster_local_id_not_contains):
        """Sets the cluster_local_id_not_contains of this EcpLicenseWhereInput.


        :param cluster_local_id_not_contains: The cluster_local_id_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_not_contains: str
        """

        self._cluster_local_id_not_contains = cluster_local_id_not_contains

    @property
    def cluster_local_id_not_ends_with(self):
        """Gets the cluster_local_id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_not_ends_with

    @cluster_local_id_not_ends_with.setter
    def cluster_local_id_not_ends_with(self, cluster_local_id_not_ends_with):
        """Sets the cluster_local_id_not_ends_with of this EcpLicenseWhereInput.


        :param cluster_local_id_not_ends_with: The cluster_local_id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_not_ends_with: str
        """

        self._cluster_local_id_not_ends_with = cluster_local_id_not_ends_with

    @property
    def cluster_local_id_not_in(self):
        """Gets the cluster_local_id_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_local_id_not_in

    @cluster_local_id_not_in.setter
    def cluster_local_id_not_in(self, cluster_local_id_not_in):
        """Sets the cluster_local_id_not_in of this EcpLicenseWhereInput.


        :param cluster_local_id_not_in: The cluster_local_id_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_not_in: list[str]
        """

        self._cluster_local_id_not_in = cluster_local_id_not_in

    @property
    def cluster_local_id_not_starts_with(self):
        """Gets the cluster_local_id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_not_starts_with

    @cluster_local_id_not_starts_with.setter
    def cluster_local_id_not_starts_with(self, cluster_local_id_not_starts_with):
        """Sets the cluster_local_id_not_starts_with of this EcpLicenseWhereInput.


        :param cluster_local_id_not_starts_with: The cluster_local_id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_not_starts_with: str
        """

        self._cluster_local_id_not_starts_with = cluster_local_id_not_starts_with

    @property
    def cluster_local_id_starts_with(self):
        """Gets the cluster_local_id_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The cluster_local_id_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id_starts_with

    @cluster_local_id_starts_with.setter
    def cluster_local_id_starts_with(self, cluster_local_id_starts_with):
        """Sets the cluster_local_id_starts_with of this EcpLicenseWhereInput.


        :param cluster_local_id_starts_with: The cluster_local_id_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type cluster_local_id_starts_with: str
        """

        self._cluster_local_id_starts_with = cluster_local_id_starts_with

    @property
    def ecp_edition(self):
        """Gets the ecp_edition of this EcpLicenseWhereInput.  # noqa: E501


        :return: The ecp_edition of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: EcpEdition
        """
        return self._ecp_edition

    @ecp_edition.setter
    def ecp_edition(self, ecp_edition):
        """Sets the ecp_edition of this EcpLicenseWhereInput.


        :param ecp_edition: The ecp_edition of this EcpLicenseWhereInput.  # noqa: E501
        :type ecp_edition: EcpEdition
        """

        self._ecp_edition = ecp_edition

    @property
    def ecp_edition_in(self):
        """Gets the ecp_edition_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The ecp_edition_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[EcpEdition]
        """
        return self._ecp_edition_in

    @ecp_edition_in.setter
    def ecp_edition_in(self, ecp_edition_in):
        """Sets the ecp_edition_in of this EcpLicenseWhereInput.


        :param ecp_edition_in: The ecp_edition_in of this EcpLicenseWhereInput.  # noqa: E501
        :type ecp_edition_in: list[EcpEdition]
        """

        self._ecp_edition_in = ecp_edition_in

    @property
    def ecp_edition_not(self):
        """Gets the ecp_edition_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The ecp_edition_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: EcpEdition
        """
        return self._ecp_edition_not

    @ecp_edition_not.setter
    def ecp_edition_not(self, ecp_edition_not):
        """Sets the ecp_edition_not of this EcpLicenseWhereInput.


        :param ecp_edition_not: The ecp_edition_not of this EcpLicenseWhereInput.  # noqa: E501
        :type ecp_edition_not: EcpEdition
        """

        self._ecp_edition_not = ecp_edition_not

    @property
    def ecp_edition_not_in(self):
        """Gets the ecp_edition_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The ecp_edition_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[EcpEdition]
        """
        return self._ecp_edition_not_in

    @ecp_edition_not_in.setter
    def ecp_edition_not_in(self, ecp_edition_not_in):
        """Sets the ecp_edition_not_in of this EcpLicenseWhereInput.


        :param ecp_edition_not_in: The ecp_edition_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type ecp_edition_not_in: list[EcpEdition]
        """

        self._ecp_edition_not_in = ecp_edition_not_in

    @property
    def expire_date(self):
        """Gets the expire_date of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this EcpLicenseWhereInput.


        :param expire_date: The expire_date of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date: str
        """

        self._expire_date = expire_date

    @property
    def expire_date_gt(self):
        """Gets the expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gt

    @expire_date_gt.setter
    def expire_date_gt(self, expire_date_gt):
        """Sets the expire_date_gt of this EcpLicenseWhereInput.


        :param expire_date_gt: The expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_gt: str
        """

        self._expire_date_gt = expire_date_gt

    @property
    def expire_date_gte(self):
        """Gets the expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gte

    @expire_date_gte.setter
    def expire_date_gte(self, expire_date_gte):
        """Sets the expire_date_gte of this EcpLicenseWhereInput.


        :param expire_date_gte: The expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_gte: str
        """

        self._expire_date_gte = expire_date_gte

    @property
    def expire_date_in(self):
        """Gets the expire_date_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_in

    @expire_date_in.setter
    def expire_date_in(self, expire_date_in):
        """Sets the expire_date_in of this EcpLicenseWhereInput.


        :param expire_date_in: The expire_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_in: list[str]
        """

        self._expire_date_in = expire_date_in

    @property
    def expire_date_lt(self):
        """Gets the expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lt

    @expire_date_lt.setter
    def expire_date_lt(self, expire_date_lt):
        """Sets the expire_date_lt of this EcpLicenseWhereInput.


        :param expire_date_lt: The expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_lt: str
        """

        self._expire_date_lt = expire_date_lt

    @property
    def expire_date_lte(self):
        """Gets the expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lte

    @expire_date_lte.setter
    def expire_date_lte(self, expire_date_lte):
        """Sets the expire_date_lte of this EcpLicenseWhereInput.


        :param expire_date_lte: The expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_lte: str
        """

        self._expire_date_lte = expire_date_lte

    @property
    def expire_date_not(self):
        """Gets the expire_date_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_not

    @expire_date_not.setter
    def expire_date_not(self, expire_date_not):
        """Sets the expire_date_not of this EcpLicenseWhereInput.


        :param expire_date_not: The expire_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_not: str
        """

        self._expire_date_not = expire_date_not

    @property
    def expire_date_not_in(self):
        """Gets the expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_not_in

    @expire_date_not_in.setter
    def expire_date_not_in(self, expire_date_not_in):
        """Sets the expire_date_not_in of this EcpLicenseWhereInput.


        :param expire_date_not_in: The expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type expire_date_not_in: list[str]
        """

        self._expire_date_not_in = expire_date_not_in

    @property
    def has_metrox(self):
        """Gets the has_metrox of this EcpLicenseWhereInput.  # noqa: E501


        :return: The has_metrox of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._has_metrox

    @has_metrox.setter
    def has_metrox(self, has_metrox):
        """Sets the has_metrox of this EcpLicenseWhereInput.


        :param has_metrox: The has_metrox of this EcpLicenseWhereInput.  # noqa: E501
        :type has_metrox: bool
        """

        self._has_metrox = has_metrox

    @property
    def has_metrox_not(self):
        """Gets the has_metrox_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The has_metrox_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._has_metrox_not

    @has_metrox_not.setter
    def has_metrox_not(self, has_metrox_not):
        """Sets the has_metrox_not of this EcpLicenseWhereInput.


        :param has_metrox_not: The has_metrox_not of this EcpLicenseWhereInput.  # noqa: E501
        :type has_metrox_not: bool
        """

        self._has_metrox_not = has_metrox_not

    @property
    def has_remote_backup(self):
        """Gets the has_remote_backup of this EcpLicenseWhereInput.  # noqa: E501


        :return: The has_remote_backup of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._has_remote_backup

    @has_remote_backup.setter
    def has_remote_backup(self, has_remote_backup):
        """Sets the has_remote_backup of this EcpLicenseWhereInput.


        :param has_remote_backup: The has_remote_backup of this EcpLicenseWhereInput.  # noqa: E501
        :type has_remote_backup: bool
        """

        self._has_remote_backup = has_remote_backup

    @property
    def has_remote_backup_not(self):
        """Gets the has_remote_backup_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The has_remote_backup_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._has_remote_backup_not

    @has_remote_backup_not.setter
    def has_remote_backup_not(self, has_remote_backup_not):
        """Sets the has_remote_backup_not of this EcpLicenseWhereInput.


        :param has_remote_backup_not: The has_remote_backup_not of this EcpLicenseWhereInput.  # noqa: E501
        :type has_remote_backup_not: bool
        """

        self._has_remote_backup_not = has_remote_backup_not

    @property
    def id(self):
        """Gets the id of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EcpLicenseWhereInput.


        :param id: The id of this EcpLicenseWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this EcpLicenseWhereInput.


        :param id_contains: The id_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this EcpLicenseWhereInput.


        :param id_ends_with: The id_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this EcpLicenseWhereInput.


        :param id_gt: The id_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this EcpLicenseWhereInput.


        :param id_gte: The id_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this EcpLicenseWhereInput.


        :param id_in: The id_in of this EcpLicenseWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this EcpLicenseWhereInput.


        :param id_lt: The id_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this EcpLicenseWhereInput.


        :param id_lte: The id_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this EcpLicenseWhereInput.


        :param id_not: The id_not of this EcpLicenseWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this EcpLicenseWhereInput.


        :param id_not_contains: The id_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this EcpLicenseWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this EcpLicenseWhereInput.


        :param id_not_in: The id_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this EcpLicenseWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The id_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this EcpLicenseWhereInput.


        :param id_starts_with: The id_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def license_type(self):
        """Gets the license_type of this EcpLicenseWhereInput.  # noqa: E501


        :return: The license_type of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this EcpLicenseWhereInput.


        :param license_type: The license_type of this EcpLicenseWhereInput.  # noqa: E501
        :type license_type: LicenseType
        """

        self._license_type = license_type

    @property
    def license_type_in(self):
        """Gets the license_type_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The license_type_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._license_type_in

    @license_type_in.setter
    def license_type_in(self, license_type_in):
        """Sets the license_type_in of this EcpLicenseWhereInput.


        :param license_type_in: The license_type_in of this EcpLicenseWhereInput.  # noqa: E501
        :type license_type_in: list[LicenseType]
        """

        self._license_type_in = license_type_in

    @property
    def license_type_not(self):
        """Gets the license_type_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The license_type_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._license_type_not

    @license_type_not.setter
    def license_type_not(self, license_type_not):
        """Sets the license_type_not of this EcpLicenseWhereInput.


        :param license_type_not: The license_type_not of this EcpLicenseWhereInput.  # noqa: E501
        :type license_type_not: LicenseType
        """

        self._license_type_not = license_type_not

    @property
    def license_type_not_in(self):
        """Gets the license_type_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The license_type_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._license_type_not_in

    @license_type_not_in.setter
    def license_type_not_in(self, license_type_not_in):
        """Sets the license_type_not_in of this EcpLicenseWhereInput.


        :param license_type_not_in: The license_type_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type license_type_not_in: list[LicenseType]
        """

        self._license_type_not_in = license_type_not_in

    @property
    def max_core_num(self):
        """Gets the max_core_num of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num

    @max_core_num.setter
    def max_core_num(self, max_core_num):
        """Sets the max_core_num of this EcpLicenseWhereInput.


        :param max_core_num: The max_core_num of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num: int
        """

        self._max_core_num = max_core_num

    @property
    def max_core_num_gt(self):
        """Gets the max_core_num_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num_gt

    @max_core_num_gt.setter
    def max_core_num_gt(self, max_core_num_gt):
        """Sets the max_core_num_gt of this EcpLicenseWhereInput.


        :param max_core_num_gt: The max_core_num_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_gt: int
        """

        self._max_core_num_gt = max_core_num_gt

    @property
    def max_core_num_gte(self):
        """Gets the max_core_num_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num_gte

    @max_core_num_gte.setter
    def max_core_num_gte(self, max_core_num_gte):
        """Sets the max_core_num_gte of this EcpLicenseWhereInput.


        :param max_core_num_gte: The max_core_num_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_gte: int
        """

        self._max_core_num_gte = max_core_num_gte

    @property
    def max_core_num_in(self):
        """Gets the max_core_num_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_core_num_in

    @max_core_num_in.setter
    def max_core_num_in(self, max_core_num_in):
        """Sets the max_core_num_in of this EcpLicenseWhereInput.


        :param max_core_num_in: The max_core_num_in of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_in: list[int]
        """

        self._max_core_num_in = max_core_num_in

    @property
    def max_core_num_lt(self):
        """Gets the max_core_num_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num_lt

    @max_core_num_lt.setter
    def max_core_num_lt(self, max_core_num_lt):
        """Sets the max_core_num_lt of this EcpLicenseWhereInput.


        :param max_core_num_lt: The max_core_num_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_lt: int
        """

        self._max_core_num_lt = max_core_num_lt

    @property
    def max_core_num_lte(self):
        """Gets the max_core_num_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num_lte

    @max_core_num_lte.setter
    def max_core_num_lte(self, max_core_num_lte):
        """Sets the max_core_num_lte of this EcpLicenseWhereInput.


        :param max_core_num_lte: The max_core_num_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_lte: int
        """

        self._max_core_num_lte = max_core_num_lte

    @property
    def max_core_num_not(self):
        """Gets the max_core_num_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_core_num_not

    @max_core_num_not.setter
    def max_core_num_not(self, max_core_num_not):
        """Sets the max_core_num_not of this EcpLicenseWhereInput.


        :param max_core_num_not: The max_core_num_not of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_not: int
        """

        self._max_core_num_not = max_core_num_not

    @property
    def max_core_num_not_in(self):
        """Gets the max_core_num_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_core_num_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_core_num_not_in

    @max_core_num_not_in.setter
    def max_core_num_not_in(self, max_core_num_not_in):
        """Sets the max_core_num_not_in of this EcpLicenseWhereInput.


        :param max_core_num_not_in: The max_core_num_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type max_core_num_not_in: list[int]
        """

        self._max_core_num_not_in = max_core_num_not_in

    @property
    def max_physical_data_capacity(self):
        """Gets the max_physical_data_capacity of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity

    @max_physical_data_capacity.setter
    def max_physical_data_capacity(self, max_physical_data_capacity):
        """Sets the max_physical_data_capacity of this EcpLicenseWhereInput.


        :param max_physical_data_capacity: The max_physical_data_capacity of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity: float
        """

        self._max_physical_data_capacity = max_physical_data_capacity

    @property
    def max_physical_data_capacity_gt(self):
        """Gets the max_physical_data_capacity_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity_gt

    @max_physical_data_capacity_gt.setter
    def max_physical_data_capacity_gt(self, max_physical_data_capacity_gt):
        """Sets the max_physical_data_capacity_gt of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_gt: The max_physical_data_capacity_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_gt: float
        """

        self._max_physical_data_capacity_gt = max_physical_data_capacity_gt

    @property
    def max_physical_data_capacity_gte(self):
        """Gets the max_physical_data_capacity_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity_gte

    @max_physical_data_capacity_gte.setter
    def max_physical_data_capacity_gte(self, max_physical_data_capacity_gte):
        """Sets the max_physical_data_capacity_gte of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_gte: The max_physical_data_capacity_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_gte: float
        """

        self._max_physical_data_capacity_gte = max_physical_data_capacity_gte

    @property
    def max_physical_data_capacity_in(self):
        """Gets the max_physical_data_capacity_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_physical_data_capacity_in

    @max_physical_data_capacity_in.setter
    def max_physical_data_capacity_in(self, max_physical_data_capacity_in):
        """Sets the max_physical_data_capacity_in of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_in: The max_physical_data_capacity_in of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_in: list[float]
        """

        self._max_physical_data_capacity_in = max_physical_data_capacity_in

    @property
    def max_physical_data_capacity_lt(self):
        """Gets the max_physical_data_capacity_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity_lt

    @max_physical_data_capacity_lt.setter
    def max_physical_data_capacity_lt(self, max_physical_data_capacity_lt):
        """Sets the max_physical_data_capacity_lt of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_lt: The max_physical_data_capacity_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_lt: float
        """

        self._max_physical_data_capacity_lt = max_physical_data_capacity_lt

    @property
    def max_physical_data_capacity_lte(self):
        """Gets the max_physical_data_capacity_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity_lte

    @max_physical_data_capacity_lte.setter
    def max_physical_data_capacity_lte(self, max_physical_data_capacity_lte):
        """Sets the max_physical_data_capacity_lte of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_lte: The max_physical_data_capacity_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_lte: float
        """

        self._max_physical_data_capacity_lte = max_physical_data_capacity_lte

    @property
    def max_physical_data_capacity_not(self):
        """Gets the max_physical_data_capacity_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: float
        """
        return self._max_physical_data_capacity_not

    @max_physical_data_capacity_not.setter
    def max_physical_data_capacity_not(self, max_physical_data_capacity_not):
        """Sets the max_physical_data_capacity_not of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_not: The max_physical_data_capacity_not of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_not: float
        """

        self._max_physical_data_capacity_not = max_physical_data_capacity_not

    @property
    def max_physical_data_capacity_not_in(self):
        """Gets the max_physical_data_capacity_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The max_physical_data_capacity_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_physical_data_capacity_not_in

    @max_physical_data_capacity_not_in.setter
    def max_physical_data_capacity_not_in(self, max_physical_data_capacity_not_in):
        """Sets the max_physical_data_capacity_not_in of this EcpLicenseWhereInput.


        :param max_physical_data_capacity_not_in: The max_physical_data_capacity_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type max_physical_data_capacity_not_in: list[float]
        """

        self._max_physical_data_capacity_not_in = max_physical_data_capacity_not_in

    @property
    def original_code(self):
        """Gets the original_code of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code

    @original_code.setter
    def original_code(self, original_code):
        """Sets the original_code of this EcpLicenseWhereInput.


        :param original_code: The original_code of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code: str
        """

        self._original_code = original_code

    @property
    def original_code_contains(self):
        """Gets the original_code_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_contains

    @original_code_contains.setter
    def original_code_contains(self, original_code_contains):
        """Sets the original_code_contains of this EcpLicenseWhereInput.


        :param original_code_contains: The original_code_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_contains: str
        """

        self._original_code_contains = original_code_contains

    @property
    def original_code_ends_with(self):
        """Gets the original_code_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_ends_with

    @original_code_ends_with.setter
    def original_code_ends_with(self, original_code_ends_with):
        """Sets the original_code_ends_with of this EcpLicenseWhereInput.


        :param original_code_ends_with: The original_code_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_ends_with: str
        """

        self._original_code_ends_with = original_code_ends_with

    @property
    def original_code_gt(self):
        """Gets the original_code_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_gt

    @original_code_gt.setter
    def original_code_gt(self, original_code_gt):
        """Sets the original_code_gt of this EcpLicenseWhereInput.


        :param original_code_gt: The original_code_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_gt: str
        """

        self._original_code_gt = original_code_gt

    @property
    def original_code_gte(self):
        """Gets the original_code_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_gte

    @original_code_gte.setter
    def original_code_gte(self, original_code_gte):
        """Sets the original_code_gte of this EcpLicenseWhereInput.


        :param original_code_gte: The original_code_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_gte: str
        """

        self._original_code_gte = original_code_gte

    @property
    def original_code_in(self):
        """Gets the original_code_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._original_code_in

    @original_code_in.setter
    def original_code_in(self, original_code_in):
        """Sets the original_code_in of this EcpLicenseWhereInput.


        :param original_code_in: The original_code_in of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_in: list[str]
        """

        self._original_code_in = original_code_in

    @property
    def original_code_lt(self):
        """Gets the original_code_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_lt

    @original_code_lt.setter
    def original_code_lt(self, original_code_lt):
        """Sets the original_code_lt of this EcpLicenseWhereInput.


        :param original_code_lt: The original_code_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_lt: str
        """

        self._original_code_lt = original_code_lt

    @property
    def original_code_lte(self):
        """Gets the original_code_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_lte

    @original_code_lte.setter
    def original_code_lte(self, original_code_lte):
        """Sets the original_code_lte of this EcpLicenseWhereInput.


        :param original_code_lte: The original_code_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_lte: str
        """

        self._original_code_lte = original_code_lte

    @property
    def original_code_not(self):
        """Gets the original_code_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_not

    @original_code_not.setter
    def original_code_not(self, original_code_not):
        """Sets the original_code_not of this EcpLicenseWhereInput.


        :param original_code_not: The original_code_not of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_not: str
        """

        self._original_code_not = original_code_not

    @property
    def original_code_not_contains(self):
        """Gets the original_code_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_not_contains

    @original_code_not_contains.setter
    def original_code_not_contains(self, original_code_not_contains):
        """Sets the original_code_not_contains of this EcpLicenseWhereInput.


        :param original_code_not_contains: The original_code_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_not_contains: str
        """

        self._original_code_not_contains = original_code_not_contains

    @property
    def original_code_not_ends_with(self):
        """Gets the original_code_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_not_ends_with

    @original_code_not_ends_with.setter
    def original_code_not_ends_with(self, original_code_not_ends_with):
        """Sets the original_code_not_ends_with of this EcpLicenseWhereInput.


        :param original_code_not_ends_with: The original_code_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_not_ends_with: str
        """

        self._original_code_not_ends_with = original_code_not_ends_with

    @property
    def original_code_not_in(self):
        """Gets the original_code_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._original_code_not_in

    @original_code_not_in.setter
    def original_code_not_in(self, original_code_not_in):
        """Sets the original_code_not_in of this EcpLicenseWhereInput.


        :param original_code_not_in: The original_code_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_not_in: list[str]
        """

        self._original_code_not_in = original_code_not_in

    @property
    def original_code_not_starts_with(self):
        """Gets the original_code_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_not_starts_with

    @original_code_not_starts_with.setter
    def original_code_not_starts_with(self, original_code_not_starts_with):
        """Sets the original_code_not_starts_with of this EcpLicenseWhereInput.


        :param original_code_not_starts_with: The original_code_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_not_starts_with: str
        """

        self._original_code_not_starts_with = original_code_not_starts_with

    @property
    def original_code_starts_with(self):
        """Gets the original_code_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The original_code_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._original_code_starts_with

    @original_code_starts_with.setter
    def original_code_starts_with(self, original_code_starts_with):
        """Sets the original_code_starts_with of this EcpLicenseWhereInput.


        :param original_code_starts_with: The original_code_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type original_code_starts_with: str
        """

        self._original_code_starts_with = original_code_starts_with

    @property
    def product_name(self):
        """Gets the product_name of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this EcpLicenseWhereInput.


        :param product_name: The product_name of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def product_name_contains(self):
        """Gets the product_name_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_contains

    @product_name_contains.setter
    def product_name_contains(self, product_name_contains):
        """Sets the product_name_contains of this EcpLicenseWhereInput.


        :param product_name_contains: The product_name_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_contains: str
        """

        self._product_name_contains = product_name_contains

    @property
    def product_name_ends_with(self):
        """Gets the product_name_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_ends_with

    @product_name_ends_with.setter
    def product_name_ends_with(self, product_name_ends_with):
        """Sets the product_name_ends_with of this EcpLicenseWhereInput.


        :param product_name_ends_with: The product_name_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_ends_with: str
        """

        self._product_name_ends_with = product_name_ends_with

    @property
    def product_name_gt(self):
        """Gets the product_name_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_gt

    @product_name_gt.setter
    def product_name_gt(self, product_name_gt):
        """Sets the product_name_gt of this EcpLicenseWhereInput.


        :param product_name_gt: The product_name_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_gt: str
        """

        self._product_name_gt = product_name_gt

    @property
    def product_name_gte(self):
        """Gets the product_name_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_gte

    @product_name_gte.setter
    def product_name_gte(self, product_name_gte):
        """Sets the product_name_gte of this EcpLicenseWhereInput.


        :param product_name_gte: The product_name_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_gte: str
        """

        self._product_name_gte = product_name_gte

    @property
    def product_name_in(self):
        """Gets the product_name_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_name_in

    @product_name_in.setter
    def product_name_in(self, product_name_in):
        """Sets the product_name_in of this EcpLicenseWhereInput.


        :param product_name_in: The product_name_in of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_in: list[str]
        """

        self._product_name_in = product_name_in

    @property
    def product_name_lt(self):
        """Gets the product_name_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_lt

    @product_name_lt.setter
    def product_name_lt(self, product_name_lt):
        """Sets the product_name_lt of this EcpLicenseWhereInput.


        :param product_name_lt: The product_name_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_lt: str
        """

        self._product_name_lt = product_name_lt

    @property
    def product_name_lte(self):
        """Gets the product_name_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_lte

    @product_name_lte.setter
    def product_name_lte(self, product_name_lte):
        """Sets the product_name_lte of this EcpLicenseWhereInput.


        :param product_name_lte: The product_name_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_lte: str
        """

        self._product_name_lte = product_name_lte

    @property
    def product_name_not(self):
        """Gets the product_name_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_not

    @product_name_not.setter
    def product_name_not(self, product_name_not):
        """Sets the product_name_not of this EcpLicenseWhereInput.


        :param product_name_not: The product_name_not of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_not: str
        """

        self._product_name_not = product_name_not

    @property
    def product_name_not_contains(self):
        """Gets the product_name_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_not_contains

    @product_name_not_contains.setter
    def product_name_not_contains(self, product_name_not_contains):
        """Sets the product_name_not_contains of this EcpLicenseWhereInput.


        :param product_name_not_contains: The product_name_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_not_contains: str
        """

        self._product_name_not_contains = product_name_not_contains

    @property
    def product_name_not_ends_with(self):
        """Gets the product_name_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_not_ends_with

    @product_name_not_ends_with.setter
    def product_name_not_ends_with(self, product_name_not_ends_with):
        """Sets the product_name_not_ends_with of this EcpLicenseWhereInput.


        :param product_name_not_ends_with: The product_name_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_not_ends_with: str
        """

        self._product_name_not_ends_with = product_name_not_ends_with

    @property
    def product_name_not_in(self):
        """Gets the product_name_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_name_not_in

    @product_name_not_in.setter
    def product_name_not_in(self, product_name_not_in):
        """Sets the product_name_not_in of this EcpLicenseWhereInput.


        :param product_name_not_in: The product_name_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_not_in: list[str]
        """

        self._product_name_not_in = product_name_not_in

    @property
    def product_name_not_starts_with(self):
        """Gets the product_name_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_not_starts_with

    @product_name_not_starts_with.setter
    def product_name_not_starts_with(self, product_name_not_starts_with):
        """Sets the product_name_not_starts_with of this EcpLicenseWhereInput.


        :param product_name_not_starts_with: The product_name_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_not_starts_with: str
        """

        self._product_name_not_starts_with = product_name_not_starts_with

    @property
    def product_name_starts_with(self):
        """Gets the product_name_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The product_name_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._product_name_starts_with

    @product_name_starts_with.setter
    def product_name_starts_with(self, product_name_starts_with):
        """Sets the product_name_starts_with of this EcpLicenseWhereInput.


        :param product_name_starts_with: The product_name_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type product_name_starts_with: str
        """

        self._product_name_starts_with = product_name_starts_with

    @property
    def serial(self):
        """Gets the serial of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this EcpLicenseWhereInput.


        :param serial: The serial of this EcpLicenseWhereInput.  # noqa: E501
        :type serial: str
        """

        self._serial = serial

    @property
    def serial_contains(self):
        """Gets the serial_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_contains

    @serial_contains.setter
    def serial_contains(self, serial_contains):
        """Sets the serial_contains of this EcpLicenseWhereInput.


        :param serial_contains: The serial_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_contains: str
        """

        self._serial_contains = serial_contains

    @property
    def serial_ends_with(self):
        """Gets the serial_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_ends_with

    @serial_ends_with.setter
    def serial_ends_with(self, serial_ends_with):
        """Sets the serial_ends_with of this EcpLicenseWhereInput.


        :param serial_ends_with: The serial_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_ends_with: str
        """

        self._serial_ends_with = serial_ends_with

    @property
    def serial_gt(self):
        """Gets the serial_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_gt

    @serial_gt.setter
    def serial_gt(self, serial_gt):
        """Sets the serial_gt of this EcpLicenseWhereInput.


        :param serial_gt: The serial_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_gt: str
        """

        self._serial_gt = serial_gt

    @property
    def serial_gte(self):
        """Gets the serial_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_gte

    @serial_gte.setter
    def serial_gte(self, serial_gte):
        """Sets the serial_gte of this EcpLicenseWhereInput.


        :param serial_gte: The serial_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_gte: str
        """

        self._serial_gte = serial_gte

    @property
    def serial_in(self):
        """Gets the serial_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._serial_in

    @serial_in.setter
    def serial_in(self, serial_in):
        """Sets the serial_in of this EcpLicenseWhereInput.


        :param serial_in: The serial_in of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_in: list[str]
        """

        self._serial_in = serial_in

    @property
    def serial_lt(self):
        """Gets the serial_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_lt

    @serial_lt.setter
    def serial_lt(self, serial_lt):
        """Sets the serial_lt of this EcpLicenseWhereInput.


        :param serial_lt: The serial_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_lt: str
        """

        self._serial_lt = serial_lt

    @property
    def serial_lte(self):
        """Gets the serial_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_lte

    @serial_lte.setter
    def serial_lte(self, serial_lte):
        """Sets the serial_lte of this EcpLicenseWhereInput.


        :param serial_lte: The serial_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_lte: str
        """

        self._serial_lte = serial_lte

    @property
    def serial_not(self):
        """Gets the serial_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not

    @serial_not.setter
    def serial_not(self, serial_not):
        """Sets the serial_not of this EcpLicenseWhereInput.


        :param serial_not: The serial_not of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_not: str
        """

        self._serial_not = serial_not

    @property
    def serial_not_contains(self):
        """Gets the serial_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_contains

    @serial_not_contains.setter
    def serial_not_contains(self, serial_not_contains):
        """Sets the serial_not_contains of this EcpLicenseWhereInput.


        :param serial_not_contains: The serial_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_not_contains: str
        """

        self._serial_not_contains = serial_not_contains

    @property
    def serial_not_ends_with(self):
        """Gets the serial_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_ends_with

    @serial_not_ends_with.setter
    def serial_not_ends_with(self, serial_not_ends_with):
        """Sets the serial_not_ends_with of this EcpLicenseWhereInput.


        :param serial_not_ends_with: The serial_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_not_ends_with: str
        """

        self._serial_not_ends_with = serial_not_ends_with

    @property
    def serial_not_in(self):
        """Gets the serial_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._serial_not_in

    @serial_not_in.setter
    def serial_not_in(self, serial_not_in):
        """Sets the serial_not_in of this EcpLicenseWhereInput.


        :param serial_not_in: The serial_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_not_in: list[str]
        """

        self._serial_not_in = serial_not_in

    @property
    def serial_not_starts_with(self):
        """Gets the serial_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_not_starts_with

    @serial_not_starts_with.setter
    def serial_not_starts_with(self, serial_not_starts_with):
        """Sets the serial_not_starts_with of this EcpLicenseWhereInput.


        :param serial_not_starts_with: The serial_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_not_starts_with: str
        """

        self._serial_not_starts_with = serial_not_starts_with

    @property
    def serial_starts_with(self):
        """Gets the serial_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The serial_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._serial_starts_with

    @serial_starts_with.setter
    def serial_starts_with(self, serial_starts_with):
        """Sets the serial_starts_with of this EcpLicenseWhereInput.


        :param serial_starts_with: The serial_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type serial_starts_with: str
        """

        self._serial_starts_with = serial_starts_with

    @property
    def sign_date(self):
        """Gets the sign_date of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date

    @sign_date.setter
    def sign_date(self, sign_date):
        """Sets the sign_date of this EcpLicenseWhereInput.


        :param sign_date: The sign_date of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date: str
        """

        self._sign_date = sign_date

    @property
    def sign_date_gt(self):
        """Gets the sign_date_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gt

    @sign_date_gt.setter
    def sign_date_gt(self, sign_date_gt):
        """Sets the sign_date_gt of this EcpLicenseWhereInput.


        :param sign_date_gt: The sign_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_gt: str
        """

        self._sign_date_gt = sign_date_gt

    @property
    def sign_date_gte(self):
        """Gets the sign_date_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gte

    @sign_date_gte.setter
    def sign_date_gte(self, sign_date_gte):
        """Sets the sign_date_gte of this EcpLicenseWhereInput.


        :param sign_date_gte: The sign_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_gte: str
        """

        self._sign_date_gte = sign_date_gte

    @property
    def sign_date_in(self):
        """Gets the sign_date_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_in

    @sign_date_in.setter
    def sign_date_in(self, sign_date_in):
        """Sets the sign_date_in of this EcpLicenseWhereInput.


        :param sign_date_in: The sign_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_in: list[str]
        """

        self._sign_date_in = sign_date_in

    @property
    def sign_date_lt(self):
        """Gets the sign_date_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lt

    @sign_date_lt.setter
    def sign_date_lt(self, sign_date_lt):
        """Sets the sign_date_lt of this EcpLicenseWhereInput.


        :param sign_date_lt: The sign_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_lt: str
        """

        self._sign_date_lt = sign_date_lt

    @property
    def sign_date_lte(self):
        """Gets the sign_date_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lte

    @sign_date_lte.setter
    def sign_date_lte(self, sign_date_lte):
        """Sets the sign_date_lte of this EcpLicenseWhereInput.


        :param sign_date_lte: The sign_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_lte: str
        """

        self._sign_date_lte = sign_date_lte

    @property
    def sign_date_not(self):
        """Gets the sign_date_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_not

    @sign_date_not.setter
    def sign_date_not(self, sign_date_not):
        """Sets the sign_date_not of this EcpLicenseWhereInput.


        :param sign_date_not: The sign_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_not: str
        """

        self._sign_date_not = sign_date_not

    @property
    def sign_date_not_in(self):
        """Gets the sign_date_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The sign_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_not_in

    @sign_date_not_in.setter
    def sign_date_not_in(self, sign_date_not_in):
        """Sets the sign_date_not_in of this EcpLicenseWhereInput.


        :param sign_date_not_in: The sign_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type sign_date_not_in: list[str]
        """

        self._sign_date_not_in = sign_date_not_in

    @property
    def subscription_expire_date(self):
        """Gets the subscription_expire_date of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date

    @subscription_expire_date.setter
    def subscription_expire_date(self, subscription_expire_date):
        """Sets the subscription_expire_date of this EcpLicenseWhereInput.


        :param subscription_expire_date: The subscription_expire_date of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date: str
        """

        self._subscription_expire_date = subscription_expire_date

    @property
    def subscription_expire_date_gt(self):
        """Gets the subscription_expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date_gt

    @subscription_expire_date_gt.setter
    def subscription_expire_date_gt(self, subscription_expire_date_gt):
        """Sets the subscription_expire_date_gt of this EcpLicenseWhereInput.


        :param subscription_expire_date_gt: The subscription_expire_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_gt: str
        """

        self._subscription_expire_date_gt = subscription_expire_date_gt

    @property
    def subscription_expire_date_gte(self):
        """Gets the subscription_expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date_gte

    @subscription_expire_date_gte.setter
    def subscription_expire_date_gte(self, subscription_expire_date_gte):
        """Sets the subscription_expire_date_gte of this EcpLicenseWhereInput.


        :param subscription_expire_date_gte: The subscription_expire_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_gte: str
        """

        self._subscription_expire_date_gte = subscription_expire_date_gte

    @property
    def subscription_expire_date_in(self):
        """Gets the subscription_expire_date_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_expire_date_in

    @subscription_expire_date_in.setter
    def subscription_expire_date_in(self, subscription_expire_date_in):
        """Sets the subscription_expire_date_in of this EcpLicenseWhereInput.


        :param subscription_expire_date_in: The subscription_expire_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_in: list[str]
        """

        self._subscription_expire_date_in = subscription_expire_date_in

    @property
    def subscription_expire_date_lt(self):
        """Gets the subscription_expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date_lt

    @subscription_expire_date_lt.setter
    def subscription_expire_date_lt(self, subscription_expire_date_lt):
        """Sets the subscription_expire_date_lt of this EcpLicenseWhereInput.


        :param subscription_expire_date_lt: The subscription_expire_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_lt: str
        """

        self._subscription_expire_date_lt = subscription_expire_date_lt

    @property
    def subscription_expire_date_lte(self):
        """Gets the subscription_expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date_lte

    @subscription_expire_date_lte.setter
    def subscription_expire_date_lte(self, subscription_expire_date_lte):
        """Sets the subscription_expire_date_lte of this EcpLicenseWhereInput.


        :param subscription_expire_date_lte: The subscription_expire_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_lte: str
        """

        self._subscription_expire_date_lte = subscription_expire_date_lte

    @property
    def subscription_expire_date_not(self):
        """Gets the subscription_expire_date_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_expire_date_not

    @subscription_expire_date_not.setter
    def subscription_expire_date_not(self, subscription_expire_date_not):
        """Sets the subscription_expire_date_not of this EcpLicenseWhereInput.


        :param subscription_expire_date_not: The subscription_expire_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_not: str
        """

        self._subscription_expire_date_not = subscription_expire_date_not

    @property
    def subscription_expire_date_not_in(self):
        """Gets the subscription_expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_expire_date_not_in

    @subscription_expire_date_not_in.setter
    def subscription_expire_date_not_in(self, subscription_expire_date_not_in):
        """Sets the subscription_expire_date_not_in of this EcpLicenseWhereInput.


        :param subscription_expire_date_not_in: The subscription_expire_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_expire_date_not_in: list[str]
        """

        self._subscription_expire_date_not_in = subscription_expire_date_not_in

    @property
    def subscription_start_date(self):
        """Gets the subscription_start_date of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date

    @subscription_start_date.setter
    def subscription_start_date(self, subscription_start_date):
        """Sets the subscription_start_date of this EcpLicenseWhereInput.


        :param subscription_start_date: The subscription_start_date of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date: str
        """

        self._subscription_start_date = subscription_start_date

    @property
    def subscription_start_date_gt(self):
        """Gets the subscription_start_date_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date_gt

    @subscription_start_date_gt.setter
    def subscription_start_date_gt(self, subscription_start_date_gt):
        """Sets the subscription_start_date_gt of this EcpLicenseWhereInput.


        :param subscription_start_date_gt: The subscription_start_date_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_gt: str
        """

        self._subscription_start_date_gt = subscription_start_date_gt

    @property
    def subscription_start_date_gte(self):
        """Gets the subscription_start_date_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date_gte

    @subscription_start_date_gte.setter
    def subscription_start_date_gte(self, subscription_start_date_gte):
        """Sets the subscription_start_date_gte of this EcpLicenseWhereInput.


        :param subscription_start_date_gte: The subscription_start_date_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_gte: str
        """

        self._subscription_start_date_gte = subscription_start_date_gte

    @property
    def subscription_start_date_in(self):
        """Gets the subscription_start_date_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_start_date_in

    @subscription_start_date_in.setter
    def subscription_start_date_in(self, subscription_start_date_in):
        """Sets the subscription_start_date_in of this EcpLicenseWhereInput.


        :param subscription_start_date_in: The subscription_start_date_in of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_in: list[str]
        """

        self._subscription_start_date_in = subscription_start_date_in

    @property
    def subscription_start_date_lt(self):
        """Gets the subscription_start_date_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date_lt

    @subscription_start_date_lt.setter
    def subscription_start_date_lt(self, subscription_start_date_lt):
        """Sets the subscription_start_date_lt of this EcpLicenseWhereInput.


        :param subscription_start_date_lt: The subscription_start_date_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_lt: str
        """

        self._subscription_start_date_lt = subscription_start_date_lt

    @property
    def subscription_start_date_lte(self):
        """Gets the subscription_start_date_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date_lte

    @subscription_start_date_lte.setter
    def subscription_start_date_lte(self, subscription_start_date_lte):
        """Sets the subscription_start_date_lte of this EcpLicenseWhereInput.


        :param subscription_start_date_lte: The subscription_start_date_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_lte: str
        """

        self._subscription_start_date_lte = subscription_start_date_lte

    @property
    def subscription_start_date_not(self):
        """Gets the subscription_start_date_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_date_not

    @subscription_start_date_not.setter
    def subscription_start_date_not(self, subscription_start_date_not):
        """Sets the subscription_start_date_not of this EcpLicenseWhereInput.


        :param subscription_start_date_not: The subscription_start_date_not of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_not: str
        """

        self._subscription_start_date_not = subscription_start_date_not

    @property
    def subscription_start_date_not_in(self):
        """Gets the subscription_start_date_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The subscription_start_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_start_date_not_in

    @subscription_start_date_not_in.setter
    def subscription_start_date_not_in(self, subscription_start_date_not_in):
        """Sets the subscription_start_date_not_in of this EcpLicenseWhereInput.


        :param subscription_start_date_not_in: The subscription_start_date_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type subscription_start_date_not_in: list[str]
        """

        self._subscription_start_date_not_in = subscription_start_date_not_in

    @property
    def vendor(self):
        """Gets the vendor of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this EcpLicenseWhereInput.


        :param vendor: The vendor of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def vendor_contains(self):
        """Gets the vendor_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_contains

    @vendor_contains.setter
    def vendor_contains(self, vendor_contains):
        """Sets the vendor_contains of this EcpLicenseWhereInput.


        :param vendor_contains: The vendor_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_contains: str
        """

        self._vendor_contains = vendor_contains

    @property
    def vendor_ends_with(self):
        """Gets the vendor_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_ends_with

    @vendor_ends_with.setter
    def vendor_ends_with(self, vendor_ends_with):
        """Sets the vendor_ends_with of this EcpLicenseWhereInput.


        :param vendor_ends_with: The vendor_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_ends_with: str
        """

        self._vendor_ends_with = vendor_ends_with

    @property
    def vendor_gt(self):
        """Gets the vendor_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_gt

    @vendor_gt.setter
    def vendor_gt(self, vendor_gt):
        """Sets the vendor_gt of this EcpLicenseWhereInput.


        :param vendor_gt: The vendor_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_gt: str
        """

        self._vendor_gt = vendor_gt

    @property
    def vendor_gte(self):
        """Gets the vendor_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_gte

    @vendor_gte.setter
    def vendor_gte(self, vendor_gte):
        """Sets the vendor_gte of this EcpLicenseWhereInput.


        :param vendor_gte: The vendor_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_gte: str
        """

        self._vendor_gte = vendor_gte

    @property
    def vendor_in(self):
        """Gets the vendor_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_in

    @vendor_in.setter
    def vendor_in(self, vendor_in):
        """Sets the vendor_in of this EcpLicenseWhereInput.


        :param vendor_in: The vendor_in of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_in: list[str]
        """

        self._vendor_in = vendor_in

    @property
    def vendor_lt(self):
        """Gets the vendor_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_lt

    @vendor_lt.setter
    def vendor_lt(self, vendor_lt):
        """Sets the vendor_lt of this EcpLicenseWhereInput.


        :param vendor_lt: The vendor_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_lt: str
        """

        self._vendor_lt = vendor_lt

    @property
    def vendor_lte(self):
        """Gets the vendor_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_lte

    @vendor_lte.setter
    def vendor_lte(self, vendor_lte):
        """Sets the vendor_lte of this EcpLicenseWhereInput.


        :param vendor_lte: The vendor_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_lte: str
        """

        self._vendor_lte = vendor_lte

    @property
    def vendor_not(self):
        """Gets the vendor_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_not

    @vendor_not.setter
    def vendor_not(self, vendor_not):
        """Sets the vendor_not of this EcpLicenseWhereInput.


        :param vendor_not: The vendor_not of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_not: str
        """

        self._vendor_not = vendor_not

    @property
    def vendor_not_contains(self):
        """Gets the vendor_not_contains of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_not_contains

    @vendor_not_contains.setter
    def vendor_not_contains(self, vendor_not_contains):
        """Sets the vendor_not_contains of this EcpLicenseWhereInput.


        :param vendor_not_contains: The vendor_not_contains of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_not_contains: str
        """

        self._vendor_not_contains = vendor_not_contains

    @property
    def vendor_not_ends_with(self):
        """Gets the vendor_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_not_ends_with

    @vendor_not_ends_with.setter
    def vendor_not_ends_with(self, vendor_not_ends_with):
        """Sets the vendor_not_ends_with of this EcpLicenseWhereInput.


        :param vendor_not_ends_with: The vendor_not_ends_with of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_not_ends_with: str
        """

        self._vendor_not_ends_with = vendor_not_ends_with

    @property
    def vendor_not_in(self):
        """Gets the vendor_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_not_in

    @vendor_not_in.setter
    def vendor_not_in(self, vendor_not_in):
        """Sets the vendor_not_in of this EcpLicenseWhereInput.


        :param vendor_not_in: The vendor_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_not_in: list[str]
        """

        self._vendor_not_in = vendor_not_in

    @property
    def vendor_not_starts_with(self):
        """Gets the vendor_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_not_starts_with

    @vendor_not_starts_with.setter
    def vendor_not_starts_with(self, vendor_not_starts_with):
        """Sets the vendor_not_starts_with of this EcpLicenseWhereInput.


        :param vendor_not_starts_with: The vendor_not_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_not_starts_with: str
        """

        self._vendor_not_starts_with = vendor_not_starts_with

    @property
    def vendor_starts_with(self):
        """Gets the vendor_starts_with of this EcpLicenseWhereInput.  # noqa: E501


        :return: The vendor_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._vendor_starts_with

    @vendor_starts_with.setter
    def vendor_starts_with(self, vendor_starts_with):
        """Sets the vendor_starts_with of this EcpLicenseWhereInput.


        :param vendor_starts_with: The vendor_starts_with of this EcpLicenseWhereInput.  # noqa: E501
        :type vendor_starts_with: str
        """

        self._vendor_starts_with = vendor_starts_with

    @property
    def version(self):
        """Gets the version of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EcpLicenseWhereInput.


        :param version: The version of this EcpLicenseWhereInput.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def version_gt(self):
        """Gets the version_gt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_gt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version_gt

    @version_gt.setter
    def version_gt(self, version_gt):
        """Sets the version_gt of this EcpLicenseWhereInput.


        :param version_gt: The version_gt of this EcpLicenseWhereInput.  # noqa: E501
        :type version_gt: int
        """

        self._version_gt = version_gt

    @property
    def version_gte(self):
        """Gets the version_gte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_gte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version_gte

    @version_gte.setter
    def version_gte(self, version_gte):
        """Sets the version_gte of this EcpLicenseWhereInput.


        :param version_gte: The version_gte of this EcpLicenseWhereInput.  # noqa: E501
        :type version_gte: int
        """

        self._version_gte = version_gte

    @property
    def version_in(self):
        """Gets the version_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._version_in

    @version_in.setter
    def version_in(self, version_in):
        """Sets the version_in of this EcpLicenseWhereInput.


        :param version_in: The version_in of this EcpLicenseWhereInput.  # noqa: E501
        :type version_in: list[int]
        """

        self._version_in = version_in

    @property
    def version_lt(self):
        """Gets the version_lt of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_lt of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version_lt

    @version_lt.setter
    def version_lt(self, version_lt):
        """Sets the version_lt of this EcpLicenseWhereInput.


        :param version_lt: The version_lt of this EcpLicenseWhereInput.  # noqa: E501
        :type version_lt: int
        """

        self._version_lt = version_lt

    @property
    def version_lte(self):
        """Gets the version_lte of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_lte of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version_lte

    @version_lte.setter
    def version_lte(self, version_lte):
        """Sets the version_lte of this EcpLicenseWhereInput.


        :param version_lte: The version_lte of this EcpLicenseWhereInput.  # noqa: E501
        :type version_lte: int
        """

        self._version_lte = version_lte

    @property
    def version_not(self):
        """Gets the version_not of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_not of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._version_not

    @version_not.setter
    def version_not(self, version_not):
        """Sets the version_not of this EcpLicenseWhereInput.


        :param version_not: The version_not of this EcpLicenseWhereInput.  # noqa: E501
        :type version_not: int
        """

        self._version_not = version_not

    @property
    def version_not_in(self):
        """Gets the version_not_in of this EcpLicenseWhereInput.  # noqa: E501


        :return: The version_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._version_not_in

    @version_not_in.setter
    def version_not_in(self, version_not_in):
        """Sets the version_not_in of this EcpLicenseWhereInput.


        :param version_not_in: The version_not_in of this EcpLicenseWhereInput.  # noqa: E501
        :type version_not_in: list[int]
        """

        self._version_not_in = version_not_in

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcpLicenseWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcpLicenseWhereInput):
            return True

        return self.to_dict() != other.to_dict()
