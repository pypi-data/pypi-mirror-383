# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BrickTopoWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[BrickTopoWhereInput]',
        '_not': 'list[BrickTopoWhereInput]',
        '_or': 'list[BrickTopoWhereInput]',
        'cluster': 'ClusterWhereInput',
        'cluster_topo': 'ClusterTopoWhereInput',
        'height': 'int',
        'height_gt': 'int',
        'height_gte': 'int',
        'height_in': 'list[int]',
        'height_lt': 'int',
        'height_lte': 'int',
        'height_not': 'int',
        'height_not_in': 'list[int]',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'local_id': 'str',
        'local_id_contains': 'str',
        'local_id_ends_with': 'str',
        'local_id_gt': 'str',
        'local_id_gte': 'str',
        'local_id_in': 'list[str]',
        'local_id_lt': 'str',
        'local_id_lte': 'str',
        'local_id_not': 'str',
        'local_id_not_contains': 'str',
        'local_id_not_ends_with': 'str',
        'local_id_not_in': 'list[str]',
        'local_id_not_starts_with': 'str',
        'local_id_starts_with': 'str',
        'model': 'str',
        'model_contains': 'str',
        'model_ends_with': 'str',
        'model_gt': 'str',
        'model_gte': 'str',
        'model_in': 'list[str]',
        'model_lt': 'str',
        'model_lte': 'str',
        'model_not': 'str',
        'model_not_contains': 'str',
        'model_not_ends_with': 'str',
        'model_not_in': 'list[str]',
        'model_not_starts_with': 'str',
        'model_starts_with': 'str',
        'name': 'str',
        'name_contains': 'str',
        'name_ends_with': 'str',
        'name_gt': 'str',
        'name_gte': 'str',
        'name_in': 'list[str]',
        'name_lt': 'str',
        'name_lte': 'str',
        'name_not': 'str',
        'name_not_contains': 'str',
        'name_not_ends_with': 'str',
        'name_not_in': 'list[str]',
        'name_not_starts_with': 'str',
        'name_starts_with': 'str',
        'node_topoes_every': 'NodeTopoWhereInput',
        'node_topoes_none': 'NodeTopoWhereInput',
        'node_topoes_some': 'NodeTopoWhereInput',
        'position': 'int',
        'position_gt': 'int',
        'position_gte': 'int',
        'position_in': 'list[int]',
        'position_lt': 'int',
        'position_lte': 'int',
        'position_not': 'int',
        'position_not_in': 'list[int]',
        'power_layout': 'Direction',
        'power_layout_in': 'list[Direction]',
        'power_layout_not': 'Direction',
        'power_layout_not_in': 'list[Direction]',
        'power_position': 'PowerPosition',
        'power_position_in': 'list[PowerPosition]',
        'power_position_not': 'PowerPosition',
        'power_position_not_in': 'list[PowerPosition]',
        'rack_topo': 'RackTopoWhereInput'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'cluster': 'cluster',
        'cluster_topo': 'cluster_topo',
        'height': 'height',
        'height_gt': 'height_gt',
        'height_gte': 'height_gte',
        'height_in': 'height_in',
        'height_lt': 'height_lt',
        'height_lte': 'height_lte',
        'height_not': 'height_not',
        'height_not_in': 'height_not_in',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'local_id': 'local_id',
        'local_id_contains': 'local_id_contains',
        'local_id_ends_with': 'local_id_ends_with',
        'local_id_gt': 'local_id_gt',
        'local_id_gte': 'local_id_gte',
        'local_id_in': 'local_id_in',
        'local_id_lt': 'local_id_lt',
        'local_id_lte': 'local_id_lte',
        'local_id_not': 'local_id_not',
        'local_id_not_contains': 'local_id_not_contains',
        'local_id_not_ends_with': 'local_id_not_ends_with',
        'local_id_not_in': 'local_id_not_in',
        'local_id_not_starts_with': 'local_id_not_starts_with',
        'local_id_starts_with': 'local_id_starts_with',
        'model': 'model',
        'model_contains': 'model_contains',
        'model_ends_with': 'model_ends_with',
        'model_gt': 'model_gt',
        'model_gte': 'model_gte',
        'model_in': 'model_in',
        'model_lt': 'model_lt',
        'model_lte': 'model_lte',
        'model_not': 'model_not',
        'model_not_contains': 'model_not_contains',
        'model_not_ends_with': 'model_not_ends_with',
        'model_not_in': 'model_not_in',
        'model_not_starts_with': 'model_not_starts_with',
        'model_starts_with': 'model_starts_with',
        'name': 'name',
        'name_contains': 'name_contains',
        'name_ends_with': 'name_ends_with',
        'name_gt': 'name_gt',
        'name_gte': 'name_gte',
        'name_in': 'name_in',
        'name_lt': 'name_lt',
        'name_lte': 'name_lte',
        'name_not': 'name_not',
        'name_not_contains': 'name_not_contains',
        'name_not_ends_with': 'name_not_ends_with',
        'name_not_in': 'name_not_in',
        'name_not_starts_with': 'name_not_starts_with',
        'name_starts_with': 'name_starts_with',
        'node_topoes_every': 'node_topoes_every',
        'node_topoes_none': 'node_topoes_none',
        'node_topoes_some': 'node_topoes_some',
        'position': 'position',
        'position_gt': 'position_gt',
        'position_gte': 'position_gte',
        'position_in': 'position_in',
        'position_lt': 'position_lt',
        'position_lte': 'position_lte',
        'position_not': 'position_not',
        'position_not_in': 'position_not_in',
        'power_layout': 'power_layout',
        'power_layout_in': 'power_layout_in',
        'power_layout_not': 'power_layout_not',
        'power_layout_not_in': 'power_layout_not_in',
        'power_position': 'power_position',
        'power_position_in': 'power_position_in',
        'power_position_not': 'power_position_not',
        'power_position_not_in': 'power_position_not_in',
        'rack_topo': 'rack_topo'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """BrickTopoWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._cluster = None
        self._cluster_topo = None
        self._height = None
        self._height_gt = None
        self._height_gte = None
        self._height_in = None
        self._height_lt = None
        self._height_lte = None
        self._height_not = None
        self._height_not_in = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._local_id = None
        self._local_id_contains = None
        self._local_id_ends_with = None
        self._local_id_gt = None
        self._local_id_gte = None
        self._local_id_in = None
        self._local_id_lt = None
        self._local_id_lte = None
        self._local_id_not = None
        self._local_id_not_contains = None
        self._local_id_not_ends_with = None
        self._local_id_not_in = None
        self._local_id_not_starts_with = None
        self._local_id_starts_with = None
        self._model = None
        self._model_contains = None
        self._model_ends_with = None
        self._model_gt = None
        self._model_gte = None
        self._model_in = None
        self._model_lt = None
        self._model_lte = None
        self._model_not = None
        self._model_not_contains = None
        self._model_not_ends_with = None
        self._model_not_in = None
        self._model_not_starts_with = None
        self._model_starts_with = None
        self._name = None
        self._name_contains = None
        self._name_ends_with = None
        self._name_gt = None
        self._name_gte = None
        self._name_in = None
        self._name_lt = None
        self._name_lte = None
        self._name_not = None
        self._name_not_contains = None
        self._name_not_ends_with = None
        self._name_not_in = None
        self._name_not_starts_with = None
        self._name_starts_with = None
        self._node_topoes_every = None
        self._node_topoes_none = None
        self._node_topoes_some = None
        self._position = None
        self._position_gt = None
        self._position_gte = None
        self._position_in = None
        self._position_lt = None
        self._position_lte = None
        self._position_not = None
        self._position_not_in = None
        self._power_layout = None
        self._power_layout_in = None
        self._power_layout_not = None
        self._power_layout_not_in = None
        self._power_position = None
        self._power_position_in = None
        self._power_position_not = None
        self._power_position_not_in = None
        self._rack_topo = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.cluster = kwargs.get("cluster", None)
        self.cluster_topo = kwargs.get("cluster_topo", None)
        self.height = kwargs.get("height", None)
        self.height_gt = kwargs.get("height_gt", None)
        self.height_gte = kwargs.get("height_gte", None)
        self.height_in = kwargs.get("height_in", None)
        self.height_lt = kwargs.get("height_lt", None)
        self.height_lte = kwargs.get("height_lte", None)
        self.height_not = kwargs.get("height_not", None)
        self.height_not_in = kwargs.get("height_not_in", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.local_id = kwargs.get("local_id", None)
        self.local_id_contains = kwargs.get("local_id_contains", None)
        self.local_id_ends_with = kwargs.get("local_id_ends_with", None)
        self.local_id_gt = kwargs.get("local_id_gt", None)
        self.local_id_gte = kwargs.get("local_id_gte", None)
        self.local_id_in = kwargs.get("local_id_in", None)
        self.local_id_lt = kwargs.get("local_id_lt", None)
        self.local_id_lte = kwargs.get("local_id_lte", None)
        self.local_id_not = kwargs.get("local_id_not", None)
        self.local_id_not_contains = kwargs.get("local_id_not_contains", None)
        self.local_id_not_ends_with = kwargs.get("local_id_not_ends_with", None)
        self.local_id_not_in = kwargs.get("local_id_not_in", None)
        self.local_id_not_starts_with = kwargs.get("local_id_not_starts_with", None)
        self.local_id_starts_with = kwargs.get("local_id_starts_with", None)
        self.model = kwargs.get("model", None)
        self.model_contains = kwargs.get("model_contains", None)
        self.model_ends_with = kwargs.get("model_ends_with", None)
        self.model_gt = kwargs.get("model_gt", None)
        self.model_gte = kwargs.get("model_gte", None)
        self.model_in = kwargs.get("model_in", None)
        self.model_lt = kwargs.get("model_lt", None)
        self.model_lte = kwargs.get("model_lte", None)
        self.model_not = kwargs.get("model_not", None)
        self.model_not_contains = kwargs.get("model_not_contains", None)
        self.model_not_ends_with = kwargs.get("model_not_ends_with", None)
        self.model_not_in = kwargs.get("model_not_in", None)
        self.model_not_starts_with = kwargs.get("model_not_starts_with", None)
        self.model_starts_with = kwargs.get("model_starts_with", None)
        self.name = kwargs.get("name", None)
        self.name_contains = kwargs.get("name_contains", None)
        self.name_ends_with = kwargs.get("name_ends_with", None)
        self.name_gt = kwargs.get("name_gt", None)
        self.name_gte = kwargs.get("name_gte", None)
        self.name_in = kwargs.get("name_in", None)
        self.name_lt = kwargs.get("name_lt", None)
        self.name_lte = kwargs.get("name_lte", None)
        self.name_not = kwargs.get("name_not", None)
        self.name_not_contains = kwargs.get("name_not_contains", None)
        self.name_not_ends_with = kwargs.get("name_not_ends_with", None)
        self.name_not_in = kwargs.get("name_not_in", None)
        self.name_not_starts_with = kwargs.get("name_not_starts_with", None)
        self.name_starts_with = kwargs.get("name_starts_with", None)
        self.node_topoes_every = kwargs.get("node_topoes_every", None)
        self.node_topoes_none = kwargs.get("node_topoes_none", None)
        self.node_topoes_some = kwargs.get("node_topoes_some", None)
        self.position = kwargs.get("position", None)
        self.position_gt = kwargs.get("position_gt", None)
        self.position_gte = kwargs.get("position_gte", None)
        self.position_in = kwargs.get("position_in", None)
        self.position_lt = kwargs.get("position_lt", None)
        self.position_lte = kwargs.get("position_lte", None)
        self.position_not = kwargs.get("position_not", None)
        self.position_not_in = kwargs.get("position_not_in", None)
        self.power_layout = kwargs.get("power_layout", None)
        self.power_layout_in = kwargs.get("power_layout_in", None)
        self.power_layout_not = kwargs.get("power_layout_not", None)
        self.power_layout_not_in = kwargs.get("power_layout_not_in", None)
        self.power_position = kwargs.get("power_position", None)
        self.power_position_in = kwargs.get("power_position_in", None)
        self.power_position_not = kwargs.get("power_position_not", None)
        self.power_position_not_in = kwargs.get("power_position_not_in", None)
        self.rack_topo = kwargs.get("rack_topo", None)

    @property
    def _and(self):
        """Gets the _and of this BrickTopoWhereInput.  # noqa: E501


        :return: The _and of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[BrickTopoWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this BrickTopoWhereInput.


        :param _and: The _and of this BrickTopoWhereInput.  # noqa: E501
        :type _and: list[BrickTopoWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this BrickTopoWhereInput.  # noqa: E501


        :return: The _not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[BrickTopoWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this BrickTopoWhereInput.


        :param _not: The _not of this BrickTopoWhereInput.  # noqa: E501
        :type _not: list[BrickTopoWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this BrickTopoWhereInput.  # noqa: E501


        :return: The _or of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[BrickTopoWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this BrickTopoWhereInput.


        :param _or: The _or of this BrickTopoWhereInput.  # noqa: E501
        :type _or: list[BrickTopoWhereInput]
        """

        self.__or = _or

    @property
    def cluster(self):
        """Gets the cluster of this BrickTopoWhereInput.  # noqa: E501


        :return: The cluster of this BrickTopoWhereInput.  # noqa: E501
        :rtype: ClusterWhereInput
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this BrickTopoWhereInput.


        :param cluster: The cluster of this BrickTopoWhereInput.  # noqa: E501
        :type cluster: ClusterWhereInput
        """

        self._cluster = cluster

    @property
    def cluster_topo(self):
        """Gets the cluster_topo of this BrickTopoWhereInput.  # noqa: E501


        :return: The cluster_topo of this BrickTopoWhereInput.  # noqa: E501
        :rtype: ClusterTopoWhereInput
        """
        return self._cluster_topo

    @cluster_topo.setter
    def cluster_topo(self, cluster_topo):
        """Sets the cluster_topo of this BrickTopoWhereInput.


        :param cluster_topo: The cluster_topo of this BrickTopoWhereInput.  # noqa: E501
        :type cluster_topo: ClusterTopoWhereInput
        """

        self._cluster_topo = cluster_topo

    @property
    def height(self):
        """Gets the height of this BrickTopoWhereInput.  # noqa: E501


        :return: The height of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BrickTopoWhereInput.


        :param height: The height of this BrickTopoWhereInput.  # noqa: E501
        :type height: int
        """

        self._height = height

    @property
    def height_gt(self):
        """Gets the height_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height_gt

    @height_gt.setter
    def height_gt(self, height_gt):
        """Sets the height_gt of this BrickTopoWhereInput.


        :param height_gt: The height_gt of this BrickTopoWhereInput.  # noqa: E501
        :type height_gt: int
        """

        self._height_gt = height_gt

    @property
    def height_gte(self):
        """Gets the height_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height_gte

    @height_gte.setter
    def height_gte(self, height_gte):
        """Sets the height_gte of this BrickTopoWhereInput.


        :param height_gte: The height_gte of this BrickTopoWhereInput.  # noqa: E501
        :type height_gte: int
        """

        self._height_gte = height_gte

    @property
    def height_in(self):
        """Gets the height_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._height_in

    @height_in.setter
    def height_in(self, height_in):
        """Sets the height_in of this BrickTopoWhereInput.


        :param height_in: The height_in of this BrickTopoWhereInput.  # noqa: E501
        :type height_in: list[int]
        """

        self._height_in = height_in

    @property
    def height_lt(self):
        """Gets the height_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height_lt

    @height_lt.setter
    def height_lt(self, height_lt):
        """Sets the height_lt of this BrickTopoWhereInput.


        :param height_lt: The height_lt of this BrickTopoWhereInput.  # noqa: E501
        :type height_lt: int
        """

        self._height_lt = height_lt

    @property
    def height_lte(self):
        """Gets the height_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height_lte

    @height_lte.setter
    def height_lte(self, height_lte):
        """Sets the height_lte of this BrickTopoWhereInput.


        :param height_lte: The height_lte of this BrickTopoWhereInput.  # noqa: E501
        :type height_lte: int
        """

        self._height_lte = height_lte

    @property
    def height_not(self):
        """Gets the height_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._height_not

    @height_not.setter
    def height_not(self, height_not):
        """Sets the height_not of this BrickTopoWhereInput.


        :param height_not: The height_not of this BrickTopoWhereInput.  # noqa: E501
        :type height_not: int
        """

        self._height_not = height_not

    @property
    def height_not_in(self):
        """Gets the height_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The height_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._height_not_in

    @height_not_in.setter
    def height_not_in(self, height_not_in):
        """Sets the height_not_in of this BrickTopoWhereInput.


        :param height_not_in: The height_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type height_not_in: list[int]
        """

        self._height_not_in = height_not_in

    @property
    def id(self):
        """Gets the id of this BrickTopoWhereInput.  # noqa: E501


        :return: The id of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BrickTopoWhereInput.


        :param id: The id of this BrickTopoWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this BrickTopoWhereInput.


        :param id_contains: The id_contains of this BrickTopoWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this BrickTopoWhereInput.


        :param id_ends_with: The id_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this BrickTopoWhereInput.


        :param id_gt: The id_gt of this BrickTopoWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this BrickTopoWhereInput.


        :param id_gte: The id_gte of this BrickTopoWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this BrickTopoWhereInput.


        :param id_in: The id_in of this BrickTopoWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this BrickTopoWhereInput.


        :param id_lt: The id_lt of this BrickTopoWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this BrickTopoWhereInput.


        :param id_lte: The id_lte of this BrickTopoWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this BrickTopoWhereInput.


        :param id_not: The id_not of this BrickTopoWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this BrickTopoWhereInput.


        :param id_not_contains: The id_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this BrickTopoWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this BrickTopoWhereInput.


        :param id_not_in: The id_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this BrickTopoWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The id_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this BrickTopoWhereInput.


        :param id_starts_with: The id_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def local_id(self):
        """Gets the local_id of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this BrickTopoWhereInput.


        :param local_id: The local_id of this BrickTopoWhereInput.  # noqa: E501
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def local_id_contains(self):
        """Gets the local_id_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_contains

    @local_id_contains.setter
    def local_id_contains(self, local_id_contains):
        """Sets the local_id_contains of this BrickTopoWhereInput.


        :param local_id_contains: The local_id_contains of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_contains: str
        """

        self._local_id_contains = local_id_contains

    @property
    def local_id_ends_with(self):
        """Gets the local_id_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_ends_with

    @local_id_ends_with.setter
    def local_id_ends_with(self, local_id_ends_with):
        """Sets the local_id_ends_with of this BrickTopoWhereInput.


        :param local_id_ends_with: The local_id_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_ends_with: str
        """

        self._local_id_ends_with = local_id_ends_with

    @property
    def local_id_gt(self):
        """Gets the local_id_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gt

    @local_id_gt.setter
    def local_id_gt(self, local_id_gt):
        """Sets the local_id_gt of this BrickTopoWhereInput.


        :param local_id_gt: The local_id_gt of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_gt: str
        """

        self._local_id_gt = local_id_gt

    @property
    def local_id_gte(self):
        """Gets the local_id_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gte

    @local_id_gte.setter
    def local_id_gte(self, local_id_gte):
        """Sets the local_id_gte of this BrickTopoWhereInput.


        :param local_id_gte: The local_id_gte of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_gte: str
        """

        self._local_id_gte = local_id_gte

    @property
    def local_id_in(self):
        """Gets the local_id_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_in

    @local_id_in.setter
    def local_id_in(self, local_id_in):
        """Sets the local_id_in of this BrickTopoWhereInput.


        :param local_id_in: The local_id_in of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_in: list[str]
        """

        self._local_id_in = local_id_in

    @property
    def local_id_lt(self):
        """Gets the local_id_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lt

    @local_id_lt.setter
    def local_id_lt(self, local_id_lt):
        """Sets the local_id_lt of this BrickTopoWhereInput.


        :param local_id_lt: The local_id_lt of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_lt: str
        """

        self._local_id_lt = local_id_lt

    @property
    def local_id_lte(self):
        """Gets the local_id_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lte

    @local_id_lte.setter
    def local_id_lte(self, local_id_lte):
        """Sets the local_id_lte of this BrickTopoWhereInput.


        :param local_id_lte: The local_id_lte of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_lte: str
        """

        self._local_id_lte = local_id_lte

    @property
    def local_id_not(self):
        """Gets the local_id_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not

    @local_id_not.setter
    def local_id_not(self, local_id_not):
        """Sets the local_id_not of this BrickTopoWhereInput.


        :param local_id_not: The local_id_not of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_not: str
        """

        self._local_id_not = local_id_not

    @property
    def local_id_not_contains(self):
        """Gets the local_id_not_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_contains

    @local_id_not_contains.setter
    def local_id_not_contains(self, local_id_not_contains):
        """Sets the local_id_not_contains of this BrickTopoWhereInput.


        :param local_id_not_contains: The local_id_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_not_contains: str
        """

        self._local_id_not_contains = local_id_not_contains

    @property
    def local_id_not_ends_with(self):
        """Gets the local_id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_ends_with

    @local_id_not_ends_with.setter
    def local_id_not_ends_with(self, local_id_not_ends_with):
        """Sets the local_id_not_ends_with of this BrickTopoWhereInput.


        :param local_id_not_ends_with: The local_id_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_not_ends_with: str
        """

        self._local_id_not_ends_with = local_id_not_ends_with

    @property
    def local_id_not_in(self):
        """Gets the local_id_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_not_in

    @local_id_not_in.setter
    def local_id_not_in(self, local_id_not_in):
        """Sets the local_id_not_in of this BrickTopoWhereInput.


        :param local_id_not_in: The local_id_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_not_in: list[str]
        """

        self._local_id_not_in = local_id_not_in

    @property
    def local_id_not_starts_with(self):
        """Gets the local_id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_starts_with

    @local_id_not_starts_with.setter
    def local_id_not_starts_with(self, local_id_not_starts_with):
        """Sets the local_id_not_starts_with of this BrickTopoWhereInput.


        :param local_id_not_starts_with: The local_id_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_not_starts_with: str
        """

        self._local_id_not_starts_with = local_id_not_starts_with

    @property
    def local_id_starts_with(self):
        """Gets the local_id_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The local_id_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_starts_with

    @local_id_starts_with.setter
    def local_id_starts_with(self, local_id_starts_with):
        """Sets the local_id_starts_with of this BrickTopoWhereInput.


        :param local_id_starts_with: The local_id_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type local_id_starts_with: str
        """

        self._local_id_starts_with = local_id_starts_with

    @property
    def model(self):
        """Gets the model of this BrickTopoWhereInput.  # noqa: E501


        :return: The model of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this BrickTopoWhereInput.


        :param model: The model of this BrickTopoWhereInput.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def model_contains(self):
        """Gets the model_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_contains

    @model_contains.setter
    def model_contains(self, model_contains):
        """Sets the model_contains of this BrickTopoWhereInput.


        :param model_contains: The model_contains of this BrickTopoWhereInput.  # noqa: E501
        :type model_contains: str
        """

        self._model_contains = model_contains

    @property
    def model_ends_with(self):
        """Gets the model_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_ends_with

    @model_ends_with.setter
    def model_ends_with(self, model_ends_with):
        """Sets the model_ends_with of this BrickTopoWhereInput.


        :param model_ends_with: The model_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type model_ends_with: str
        """

        self._model_ends_with = model_ends_with

    @property
    def model_gt(self):
        """Gets the model_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_gt

    @model_gt.setter
    def model_gt(self, model_gt):
        """Sets the model_gt of this BrickTopoWhereInput.


        :param model_gt: The model_gt of this BrickTopoWhereInput.  # noqa: E501
        :type model_gt: str
        """

        self._model_gt = model_gt

    @property
    def model_gte(self):
        """Gets the model_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_gte

    @model_gte.setter
    def model_gte(self, model_gte):
        """Sets the model_gte of this BrickTopoWhereInput.


        :param model_gte: The model_gte of this BrickTopoWhereInput.  # noqa: E501
        :type model_gte: str
        """

        self._model_gte = model_gte

    @property
    def model_in(self):
        """Gets the model_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_in

    @model_in.setter
    def model_in(self, model_in):
        """Sets the model_in of this BrickTopoWhereInput.


        :param model_in: The model_in of this BrickTopoWhereInput.  # noqa: E501
        :type model_in: list[str]
        """

        self._model_in = model_in

    @property
    def model_lt(self):
        """Gets the model_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_lt

    @model_lt.setter
    def model_lt(self, model_lt):
        """Sets the model_lt of this BrickTopoWhereInput.


        :param model_lt: The model_lt of this BrickTopoWhereInput.  # noqa: E501
        :type model_lt: str
        """

        self._model_lt = model_lt

    @property
    def model_lte(self):
        """Gets the model_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_lte

    @model_lte.setter
    def model_lte(self, model_lte):
        """Sets the model_lte of this BrickTopoWhereInput.


        :param model_lte: The model_lte of this BrickTopoWhereInput.  # noqa: E501
        :type model_lte: str
        """

        self._model_lte = model_lte

    @property
    def model_not(self):
        """Gets the model_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_not

    @model_not.setter
    def model_not(self, model_not):
        """Sets the model_not of this BrickTopoWhereInput.


        :param model_not: The model_not of this BrickTopoWhereInput.  # noqa: E501
        :type model_not: str
        """

        self._model_not = model_not

    @property
    def model_not_contains(self):
        """Gets the model_not_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_not_contains

    @model_not_contains.setter
    def model_not_contains(self, model_not_contains):
        """Sets the model_not_contains of this BrickTopoWhereInput.


        :param model_not_contains: The model_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :type model_not_contains: str
        """

        self._model_not_contains = model_not_contains

    @property
    def model_not_ends_with(self):
        """Gets the model_not_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_not_ends_with

    @model_not_ends_with.setter
    def model_not_ends_with(self, model_not_ends_with):
        """Sets the model_not_ends_with of this BrickTopoWhereInput.


        :param model_not_ends_with: The model_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type model_not_ends_with: str
        """

        self._model_not_ends_with = model_not_ends_with

    @property
    def model_not_in(self):
        """Gets the model_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_not_in

    @model_not_in.setter
    def model_not_in(self, model_not_in):
        """Sets the model_not_in of this BrickTopoWhereInput.


        :param model_not_in: The model_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type model_not_in: list[str]
        """

        self._model_not_in = model_not_in

    @property
    def model_not_starts_with(self):
        """Gets the model_not_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_not_starts_with

    @model_not_starts_with.setter
    def model_not_starts_with(self, model_not_starts_with):
        """Sets the model_not_starts_with of this BrickTopoWhereInput.


        :param model_not_starts_with: The model_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type model_not_starts_with: str
        """

        self._model_not_starts_with = model_not_starts_with

    @property
    def model_starts_with(self):
        """Gets the model_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The model_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._model_starts_with

    @model_starts_with.setter
    def model_starts_with(self, model_starts_with):
        """Sets the model_starts_with of this BrickTopoWhereInput.


        :param model_starts_with: The model_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type model_starts_with: str
        """

        self._model_starts_with = model_starts_with

    @property
    def name(self):
        """Gets the name of this BrickTopoWhereInput.  # noqa: E501


        :return: The name of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrickTopoWhereInput.


        :param name: The name of this BrickTopoWhereInput.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def name_contains(self):
        """Gets the name_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_contains

    @name_contains.setter
    def name_contains(self, name_contains):
        """Sets the name_contains of this BrickTopoWhereInput.


        :param name_contains: The name_contains of this BrickTopoWhereInput.  # noqa: E501
        :type name_contains: str
        """

        self._name_contains = name_contains

    @property
    def name_ends_with(self):
        """Gets the name_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_ends_with

    @name_ends_with.setter
    def name_ends_with(self, name_ends_with):
        """Sets the name_ends_with of this BrickTopoWhereInput.


        :param name_ends_with: The name_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type name_ends_with: str
        """

        self._name_ends_with = name_ends_with

    @property
    def name_gt(self):
        """Gets the name_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_gt

    @name_gt.setter
    def name_gt(self, name_gt):
        """Sets the name_gt of this BrickTopoWhereInput.


        :param name_gt: The name_gt of this BrickTopoWhereInput.  # noqa: E501
        :type name_gt: str
        """

        self._name_gt = name_gt

    @property
    def name_gte(self):
        """Gets the name_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_gte

    @name_gte.setter
    def name_gte(self, name_gte):
        """Sets the name_gte of this BrickTopoWhereInput.


        :param name_gte: The name_gte of this BrickTopoWhereInput.  # noqa: E501
        :type name_gte: str
        """

        self._name_gte = name_gte

    @property
    def name_in(self):
        """Gets the name_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._name_in

    @name_in.setter
    def name_in(self, name_in):
        """Sets the name_in of this BrickTopoWhereInput.


        :param name_in: The name_in of this BrickTopoWhereInput.  # noqa: E501
        :type name_in: list[str]
        """

        self._name_in = name_in

    @property
    def name_lt(self):
        """Gets the name_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_lt

    @name_lt.setter
    def name_lt(self, name_lt):
        """Sets the name_lt of this BrickTopoWhereInput.


        :param name_lt: The name_lt of this BrickTopoWhereInput.  # noqa: E501
        :type name_lt: str
        """

        self._name_lt = name_lt

    @property
    def name_lte(self):
        """Gets the name_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_lte

    @name_lte.setter
    def name_lte(self, name_lte):
        """Sets the name_lte of this BrickTopoWhereInput.


        :param name_lte: The name_lte of this BrickTopoWhereInput.  # noqa: E501
        :type name_lte: str
        """

        self._name_lte = name_lte

    @property
    def name_not(self):
        """Gets the name_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not

    @name_not.setter
    def name_not(self, name_not):
        """Sets the name_not of this BrickTopoWhereInput.


        :param name_not: The name_not of this BrickTopoWhereInput.  # noqa: E501
        :type name_not: str
        """

        self._name_not = name_not

    @property
    def name_not_contains(self):
        """Gets the name_not_contains of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_contains

    @name_not_contains.setter
    def name_not_contains(self, name_not_contains):
        """Sets the name_not_contains of this BrickTopoWhereInput.


        :param name_not_contains: The name_not_contains of this BrickTopoWhereInput.  # noqa: E501
        :type name_not_contains: str
        """

        self._name_not_contains = name_not_contains

    @property
    def name_not_ends_with(self):
        """Gets the name_not_ends_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_ends_with

    @name_not_ends_with.setter
    def name_not_ends_with(self, name_not_ends_with):
        """Sets the name_not_ends_with of this BrickTopoWhereInput.


        :param name_not_ends_with: The name_not_ends_with of this BrickTopoWhereInput.  # noqa: E501
        :type name_not_ends_with: str
        """

        self._name_not_ends_with = name_not_ends_with

    @property
    def name_not_in(self):
        """Gets the name_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._name_not_in

    @name_not_in.setter
    def name_not_in(self, name_not_in):
        """Sets the name_not_in of this BrickTopoWhereInput.


        :param name_not_in: The name_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type name_not_in: list[str]
        """

        self._name_not_in = name_not_in

    @property
    def name_not_starts_with(self):
        """Gets the name_not_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_starts_with

    @name_not_starts_with.setter
    def name_not_starts_with(self, name_not_starts_with):
        """Sets the name_not_starts_with of this BrickTopoWhereInput.


        :param name_not_starts_with: The name_not_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type name_not_starts_with: str
        """

        self._name_not_starts_with = name_not_starts_with

    @property
    def name_starts_with(self):
        """Gets the name_starts_with of this BrickTopoWhereInput.  # noqa: E501


        :return: The name_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_starts_with

    @name_starts_with.setter
    def name_starts_with(self, name_starts_with):
        """Sets the name_starts_with of this BrickTopoWhereInput.


        :param name_starts_with: The name_starts_with of this BrickTopoWhereInput.  # noqa: E501
        :type name_starts_with: str
        """

        self._name_starts_with = name_starts_with

    @property
    def node_topoes_every(self):
        """Gets the node_topoes_every of this BrickTopoWhereInput.  # noqa: E501


        :return: The node_topoes_every of this BrickTopoWhereInput.  # noqa: E501
        :rtype: NodeTopoWhereInput
        """
        return self._node_topoes_every

    @node_topoes_every.setter
    def node_topoes_every(self, node_topoes_every):
        """Sets the node_topoes_every of this BrickTopoWhereInput.


        :param node_topoes_every: The node_topoes_every of this BrickTopoWhereInput.  # noqa: E501
        :type node_topoes_every: NodeTopoWhereInput
        """

        self._node_topoes_every = node_topoes_every

    @property
    def node_topoes_none(self):
        """Gets the node_topoes_none of this BrickTopoWhereInput.  # noqa: E501


        :return: The node_topoes_none of this BrickTopoWhereInput.  # noqa: E501
        :rtype: NodeTopoWhereInput
        """
        return self._node_topoes_none

    @node_topoes_none.setter
    def node_topoes_none(self, node_topoes_none):
        """Sets the node_topoes_none of this BrickTopoWhereInput.


        :param node_topoes_none: The node_topoes_none of this BrickTopoWhereInput.  # noqa: E501
        :type node_topoes_none: NodeTopoWhereInput
        """

        self._node_topoes_none = node_topoes_none

    @property
    def node_topoes_some(self):
        """Gets the node_topoes_some of this BrickTopoWhereInput.  # noqa: E501


        :return: The node_topoes_some of this BrickTopoWhereInput.  # noqa: E501
        :rtype: NodeTopoWhereInput
        """
        return self._node_topoes_some

    @node_topoes_some.setter
    def node_topoes_some(self, node_topoes_some):
        """Sets the node_topoes_some of this BrickTopoWhereInput.


        :param node_topoes_some: The node_topoes_some of this BrickTopoWhereInput.  # noqa: E501
        :type node_topoes_some: NodeTopoWhereInput
        """

        self._node_topoes_some = node_topoes_some

    @property
    def position(self):
        """Gets the position of this BrickTopoWhereInput.  # noqa: E501


        :return: The position of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BrickTopoWhereInput.


        :param position: The position of this BrickTopoWhereInput.  # noqa: E501
        :type position: int
        """

        self._position = position

    @property
    def position_gt(self):
        """Gets the position_gt of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_gt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position_gt

    @position_gt.setter
    def position_gt(self, position_gt):
        """Sets the position_gt of this BrickTopoWhereInput.


        :param position_gt: The position_gt of this BrickTopoWhereInput.  # noqa: E501
        :type position_gt: int
        """

        self._position_gt = position_gt

    @property
    def position_gte(self):
        """Gets the position_gte of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_gte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position_gte

    @position_gte.setter
    def position_gte(self, position_gte):
        """Sets the position_gte of this BrickTopoWhereInput.


        :param position_gte: The position_gte of this BrickTopoWhereInput.  # noqa: E501
        :type position_gte: int
        """

        self._position_gte = position_gte

    @property
    def position_in(self):
        """Gets the position_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._position_in

    @position_in.setter
    def position_in(self, position_in):
        """Sets the position_in of this BrickTopoWhereInput.


        :param position_in: The position_in of this BrickTopoWhereInput.  # noqa: E501
        :type position_in: list[int]
        """

        self._position_in = position_in

    @property
    def position_lt(self):
        """Gets the position_lt of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_lt of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position_lt

    @position_lt.setter
    def position_lt(self, position_lt):
        """Sets the position_lt of this BrickTopoWhereInput.


        :param position_lt: The position_lt of this BrickTopoWhereInput.  # noqa: E501
        :type position_lt: int
        """

        self._position_lt = position_lt

    @property
    def position_lte(self):
        """Gets the position_lte of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_lte of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position_lte

    @position_lte.setter
    def position_lte(self, position_lte):
        """Sets the position_lte of this BrickTopoWhereInput.


        :param position_lte: The position_lte of this BrickTopoWhereInput.  # noqa: E501
        :type position_lte: int
        """

        self._position_lte = position_lte

    @property
    def position_not(self):
        """Gets the position_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._position_not

    @position_not.setter
    def position_not(self, position_not):
        """Sets the position_not of this BrickTopoWhereInput.


        :param position_not: The position_not of this BrickTopoWhereInput.  # noqa: E501
        :type position_not: int
        """

        self._position_not = position_not

    @property
    def position_not_in(self):
        """Gets the position_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The position_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._position_not_in

    @position_not_in.setter
    def position_not_in(self, position_not_in):
        """Sets the position_not_in of this BrickTopoWhereInput.


        :param position_not_in: The position_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type position_not_in: list[int]
        """

        self._position_not_in = position_not_in

    @property
    def power_layout(self):
        """Gets the power_layout of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_layout of this BrickTopoWhereInput.  # noqa: E501
        :rtype: Direction
        """
        return self._power_layout

    @power_layout.setter
    def power_layout(self, power_layout):
        """Sets the power_layout of this BrickTopoWhereInput.


        :param power_layout: The power_layout of this BrickTopoWhereInput.  # noqa: E501
        :type power_layout: Direction
        """

        self._power_layout = power_layout

    @property
    def power_layout_in(self):
        """Gets the power_layout_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_layout_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[Direction]
        """
        return self._power_layout_in

    @power_layout_in.setter
    def power_layout_in(self, power_layout_in):
        """Sets the power_layout_in of this BrickTopoWhereInput.


        :param power_layout_in: The power_layout_in of this BrickTopoWhereInput.  # noqa: E501
        :type power_layout_in: list[Direction]
        """

        self._power_layout_in = power_layout_in

    @property
    def power_layout_not(self):
        """Gets the power_layout_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_layout_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: Direction
        """
        return self._power_layout_not

    @power_layout_not.setter
    def power_layout_not(self, power_layout_not):
        """Sets the power_layout_not of this BrickTopoWhereInput.


        :param power_layout_not: The power_layout_not of this BrickTopoWhereInput.  # noqa: E501
        :type power_layout_not: Direction
        """

        self._power_layout_not = power_layout_not

    @property
    def power_layout_not_in(self):
        """Gets the power_layout_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_layout_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[Direction]
        """
        return self._power_layout_not_in

    @power_layout_not_in.setter
    def power_layout_not_in(self, power_layout_not_in):
        """Sets the power_layout_not_in of this BrickTopoWhereInput.


        :param power_layout_not_in: The power_layout_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type power_layout_not_in: list[Direction]
        """

        self._power_layout_not_in = power_layout_not_in

    @property
    def power_position(self):
        """Gets the power_position of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_position of this BrickTopoWhereInput.  # noqa: E501
        :rtype: PowerPosition
        """
        return self._power_position

    @power_position.setter
    def power_position(self, power_position):
        """Sets the power_position of this BrickTopoWhereInput.


        :param power_position: The power_position of this BrickTopoWhereInput.  # noqa: E501
        :type power_position: PowerPosition
        """

        self._power_position = power_position

    @property
    def power_position_in(self):
        """Gets the power_position_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_position_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[PowerPosition]
        """
        return self._power_position_in

    @power_position_in.setter
    def power_position_in(self, power_position_in):
        """Sets the power_position_in of this BrickTopoWhereInput.


        :param power_position_in: The power_position_in of this BrickTopoWhereInput.  # noqa: E501
        :type power_position_in: list[PowerPosition]
        """

        self._power_position_in = power_position_in

    @property
    def power_position_not(self):
        """Gets the power_position_not of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_position_not of this BrickTopoWhereInput.  # noqa: E501
        :rtype: PowerPosition
        """
        return self._power_position_not

    @power_position_not.setter
    def power_position_not(self, power_position_not):
        """Sets the power_position_not of this BrickTopoWhereInput.


        :param power_position_not: The power_position_not of this BrickTopoWhereInput.  # noqa: E501
        :type power_position_not: PowerPosition
        """

        self._power_position_not = power_position_not

    @property
    def power_position_not_in(self):
        """Gets the power_position_not_in of this BrickTopoWhereInput.  # noqa: E501


        :return: The power_position_not_in of this BrickTopoWhereInput.  # noqa: E501
        :rtype: list[PowerPosition]
        """
        return self._power_position_not_in

    @power_position_not_in.setter
    def power_position_not_in(self, power_position_not_in):
        """Sets the power_position_not_in of this BrickTopoWhereInput.


        :param power_position_not_in: The power_position_not_in of this BrickTopoWhereInput.  # noqa: E501
        :type power_position_not_in: list[PowerPosition]
        """

        self._power_position_not_in = power_position_not_in

    @property
    def rack_topo(self):
        """Gets the rack_topo of this BrickTopoWhereInput.  # noqa: E501


        :return: The rack_topo of this BrickTopoWhereInput.  # noqa: E501
        :rtype: RackTopoWhereInput
        """
        return self._rack_topo

    @rack_topo.setter
    def rack_topo(self, rack_topo):
        """Sets the rack_topo of this BrickTopoWhereInput.


        :param rack_topo: The rack_topo of this BrickTopoWhereInput.  # noqa: E501
        :type rack_topo: RackTopoWhereInput
        """

        self._rack_topo = rack_topo

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrickTopoWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrickTopoWhereInput):
            return True

        return self.to_dict() != other.to_dict()
