# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class NicOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    DRIVER_ASC = "driver_ASC"
    DRIVER_DESC = "driver_DESC"
    DRIVER_STATE_ASC = "driver_state_ASC"
    DRIVER_STATE_DESC = "driver_state_DESC"
    ENTITYASYNCSTATUS_ASC = "entityAsyncStatus_ASC"
    ENTITYASYNCSTATUS_DESC = "entityAsyncStatus_DESC"
    GATEWAY_IP_ASC = "gateway_ip_ASC"
    GATEWAY_IP_DESC = "gateway_ip_DESC"
    IBDEV_ASC = "ibdev_ASC"
    IBDEV_DESC = "ibdev_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    IOMMU_STATUS_ASC = "iommu_status_ASC"
    IOMMU_STATUS_DESC = "iommu_status_DESC"
    IP_ADDRESS_ASC = "ip_address_ASC"
    IP_ADDRESS_DESC = "ip_address_DESC"
    IS_SRIOV_ASC = "is_sriov_ASC"
    IS_SRIOV_DESC = "is_sriov_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    MAC_ADDRESS_ASC = "mac_address_ASC"
    MAC_ADDRESS_DESC = "mac_address_DESC"
    MAX_VF_NUM_ASC = "max_vf_num_ASC"
    MAX_VF_NUM_DESC = "max_vf_num_DESC"
    MODEL_ASC = "model_ASC"
    MODEL_DESC = "model_DESC"
    MTU_ASC = "mtu_ASC"
    MTU_DESC = "mtu_DESC"
    NAME_ASC = "name_ASC"
    NAME_DESC = "name_DESC"
    NIC_UUID_ASC = "nic_uuid_ASC"
    NIC_UUID_DESC = "nic_uuid_DESC"
    PHYSICAL_ASC = "physical_ASC"
    PHYSICAL_DESC = "physical_DESC"
    RDMA_ENABLED_ASC = "rdma_enabled_ASC"
    RDMA_ENABLED_DESC = "rdma_enabled_DESC"
    RUNNING_ASC = "running_ASC"
    RUNNING_DESC = "running_DESC"
    SPEED_ASC = "speed_ASC"
    SPEED_DESC = "speed_DESC"
    SUBNET_MASK_ASC = "subnet_mask_ASC"
    SUBNET_MASK_DESC = "subnet_mask_DESC"
    TOTAL_VF_NUM_ASC = "total_vf_num_ASC"
    TOTAL_VF_NUM_DESC = "total_vf_num_DESC"
    TYPE_ASC = "type_ASC"
    TYPE_DESC = "type_DESC"
    UP_ASC = "up_ASC"
    UP_DESC = "up_DESC"
    USED_VF_NUM_ASC = "used_vf_num_ASC"
    USED_VF_NUM_DESC = "used_vf_num_DESC"
    USER_USAGE_ASC = "user_usage_ASC"
    USER_USAGE_DESC = "user_usage_DESC"

    allowable_values = [DRIVER_ASC, DRIVER_DESC, DRIVER_STATE_ASC, DRIVER_STATE_DESC, ENTITYASYNCSTATUS_ASC, ENTITYASYNCSTATUS_DESC, GATEWAY_IP_ASC, GATEWAY_IP_DESC, IBDEV_ASC, IBDEV_DESC, ID_ASC, ID_DESC, IOMMU_STATUS_ASC, IOMMU_STATUS_DESC, IP_ADDRESS_ASC, IP_ADDRESS_DESC, IS_SRIOV_ASC, IS_SRIOV_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, MAC_ADDRESS_ASC, MAC_ADDRESS_DESC, MAX_VF_NUM_ASC, MAX_VF_NUM_DESC, MODEL_ASC, MODEL_DESC, MTU_ASC, MTU_DESC, NAME_ASC, NAME_DESC, NIC_UUID_ASC, NIC_UUID_DESC, PHYSICAL_ASC, PHYSICAL_DESC, RDMA_ENABLED_ASC, RDMA_ENABLED_DESC, RUNNING_ASC, RUNNING_DESC, SPEED_ASC, SPEED_DESC, SUBNET_MASK_ASC, SUBNET_MASK_DESC, TOTAL_VF_NUM_ASC, TOTAL_VF_NUM_DESC, TYPE_ASC, TYPE_DESC, UP_ASC, UP_DESC, USED_VF_NUM_ASC, USED_VF_NUM_DESC, USER_USAGE_ASC, USER_USAGE_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """NicOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NicOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NicOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
