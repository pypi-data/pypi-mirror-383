# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BackupRestorePointOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLUSTER_LOCAL_ID_ASC = "cluster_local_id_ASC"
    CLUSTER_LOCAL_ID_DESC = "cluster_local_id_DESC"
    COMPRESSED_ASC = "compressed_ASC"
    COMPRESSED_DESC = "compressed_DESC"
    COMPRESSION_RATIO_ASC = "compression_ratio_ASC"
    COMPRESSION_RATIO_DESC = "compression_ratio_DESC"
    CREATION_ASC = "creation_ASC"
    CREATION_DESC = "creation_DESC"
    ENTITYASYNCSTATUS_ASC = "entityAsyncStatus_ASC"
    ENTITYASYNCSTATUS_DESC = "entityAsyncStatus_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    LOCAL_CREATED_AT_ASC = "local_created_at_ASC"
    LOCAL_CREATED_AT_DESC = "local_created_at_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    LOGICAL_SIZE_ASC = "logical_size_ASC"
    LOGICAL_SIZE_DESC = "logical_size_DESC"
    PARENT_RESTORE_POINT_ASC = "parent_restore_point_ASC"
    PARENT_RESTORE_POINT_DESC = "parent_restore_point_DESC"
    PHYSICAL_SIZE_ASC = "physical_size_ASC"
    PHYSICAL_SIZE_DESC = "physical_size_DESC"
    SIZE_ASC = "size_ASC"
    SIZE_DESC = "size_DESC"
    SLICE_ASC = "slice_ASC"
    SLICE_DESC = "slice_DESC"
    SNAPSHOT_CONSISTENT_TYPE_ASC = "snapshot_consistent_type_ASC"
    SNAPSHOT_CONSISTENT_TYPE_DESC = "snapshot_consistent_type_DESC"
    TYPE_ASC = "type_ASC"
    TYPE_DESC = "type_DESC"
    VALID_CAPACITY_ASC = "valid_capacity_ASC"
    VALID_CAPACITY_DESC = "valid_capacity_DESC"
    VALID_SIZE_ASC = "valid_size_ASC"
    VALID_SIZE_DESC = "valid_size_DESC"
    VM_LOCAL_ID_ASC = "vm_local_id_ASC"
    VM_LOCAL_ID_DESC = "vm_local_id_DESC"
    VM_NAME_ASC = "vm_name_ASC"
    VM_NAME_DESC = "vm_name_DESC"

    allowable_values = [CLUSTER_LOCAL_ID_ASC, CLUSTER_LOCAL_ID_DESC, COMPRESSED_ASC, COMPRESSED_DESC, COMPRESSION_RATIO_ASC, COMPRESSION_RATIO_DESC, CREATION_ASC, CREATION_DESC, ENTITYASYNCSTATUS_ASC, ENTITYASYNCSTATUS_DESC, ID_ASC, ID_DESC, LOCAL_CREATED_AT_ASC, LOCAL_CREATED_AT_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, LOGICAL_SIZE_ASC, LOGICAL_SIZE_DESC, PARENT_RESTORE_POINT_ASC, PARENT_RESTORE_POINT_DESC, PHYSICAL_SIZE_ASC, PHYSICAL_SIZE_DESC, SIZE_ASC, SIZE_DESC, SLICE_ASC, SLICE_DESC, SNAPSHOT_CONSISTENT_TYPE_ASC, SNAPSHOT_CONSISTENT_TYPE_DESC, TYPE_ASC, TYPE_DESC, VALID_CAPACITY_ASC, VALID_CAPACITY_DESC, VALID_SIZE_ASC, VALID_SIZE_DESC, VM_LOCAL_ID_ASC, VM_LOCAL_ID_DESC, VM_NAME_ASC, VM_NAME_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """BackupRestorePointOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupRestorePointOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupRestorePointOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
