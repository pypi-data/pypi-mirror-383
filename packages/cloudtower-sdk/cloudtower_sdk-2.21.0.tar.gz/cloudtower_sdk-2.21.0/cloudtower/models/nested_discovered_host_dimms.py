# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class NestedDiscoveredHostDimms(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dimm_id': 'str',
        'fw_version': 'str',
        'health_status': 'str',
        'socket_id': 'str'
    }

    attribute_map = {
        'dimm_id': 'dimm_id',
        'fw_version': 'fw_version',
        'health_status': 'health_status',
        'socket_id': 'socket_id'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """NestedDiscoveredHostDimms - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._dimm_id = None
        self._fw_version = None
        self._health_status = None
        self._socket_id = None
        self.discriminator = None

        if "dimm_id" in kwargs:
            self.dimm_id = kwargs["dimm_id"]
        if "fw_version" in kwargs:
            self.fw_version = kwargs["fw_version"]
        if "health_status" in kwargs:
            self.health_status = kwargs["health_status"]
        if "socket_id" in kwargs:
            self.socket_id = kwargs["socket_id"]

    @property
    def dimm_id(self):
        """Gets the dimm_id of this NestedDiscoveredHostDimms.  # noqa: E501


        :return: The dimm_id of this NestedDiscoveredHostDimms.  # noqa: E501
        :rtype: str
        """
        return self._dimm_id

    @dimm_id.setter
    def dimm_id(self, dimm_id):
        """Sets the dimm_id of this NestedDiscoveredHostDimms.


        :param dimm_id: The dimm_id of this NestedDiscoveredHostDimms.  # noqa: E501
        :type dimm_id: str
        """
        if self.local_vars_configuration.client_side_validation and dimm_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dimm_id`, must not be `None`")  # noqa: E501

        self._dimm_id = dimm_id

    @property
    def fw_version(self):
        """Gets the fw_version of this NestedDiscoveredHostDimms.  # noqa: E501


        :return: The fw_version of this NestedDiscoveredHostDimms.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this NestedDiscoveredHostDimms.


        :param fw_version: The fw_version of this NestedDiscoveredHostDimms.  # noqa: E501
        :type fw_version: str
        """
        if self.local_vars_configuration.client_side_validation and fw_version is None:  # noqa: E501
            raise ValueError("Invalid value for `fw_version`, must not be `None`")  # noqa: E501

        self._fw_version = fw_version

    @property
    def health_status(self):
        """Gets the health_status of this NestedDiscoveredHostDimms.  # noqa: E501


        :return: The health_status of this NestedDiscoveredHostDimms.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this NestedDiscoveredHostDimms.


        :param health_status: The health_status of this NestedDiscoveredHostDimms.  # noqa: E501
        :type health_status: str
        """
        if self.local_vars_configuration.client_side_validation and health_status is None:  # noqa: E501
            raise ValueError("Invalid value for `health_status`, must not be `None`")  # noqa: E501

        self._health_status = health_status

    @property
    def socket_id(self):
        """Gets the socket_id of this NestedDiscoveredHostDimms.  # noqa: E501


        :return: The socket_id of this NestedDiscoveredHostDimms.  # noqa: E501
        :rtype: str
        """
        return self._socket_id

    @socket_id.setter
    def socket_id(self, socket_id):
        """Sets the socket_id of this NestedDiscoveredHostDimms.


        :param socket_id: The socket_id of this NestedDiscoveredHostDimms.  # noqa: E501
        :type socket_id: str
        """
        if self.local_vars_configuration.client_side_validation and socket_id is None:  # noqa: E501
            raise ValueError("Invalid value for `socket_id`, must not be `None`")  # noqa: E501

        self._socket_id = socket_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedDiscoveredHostDimms):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NestedDiscoveredHostDimms):
            return True

        return self.to_dict() != other.to_dict()
