# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class GlobalSettingsWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[GlobalSettingsWhereInput]',
        '_not': 'list[GlobalSettingsWhereInput]',
        '_or': 'list[GlobalSettingsWhereInput]',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """GlobalSettingsWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)

    @property
    def _and(self):
        """Gets the _and of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The _and of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: list[GlobalSettingsWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this GlobalSettingsWhereInput.


        :param _and: The _and of this GlobalSettingsWhereInput.  # noqa: E501
        :type _and: list[GlobalSettingsWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The _not of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: list[GlobalSettingsWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this GlobalSettingsWhereInput.


        :param _not: The _not of this GlobalSettingsWhereInput.  # noqa: E501
        :type _not: list[GlobalSettingsWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The _or of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: list[GlobalSettingsWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this GlobalSettingsWhereInput.


        :param _or: The _or of this GlobalSettingsWhereInput.  # noqa: E501
        :type _or: list[GlobalSettingsWhereInput]
        """

        self.__or = _or

    @property
    def id(self):
        """Gets the id of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalSettingsWhereInput.


        :param id: The id of this GlobalSettingsWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_contains of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this GlobalSettingsWhereInput.


        :param id_contains: The id_contains of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_ends_with of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this GlobalSettingsWhereInput.


        :param id_ends_with: The id_ends_with of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_gt of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this GlobalSettingsWhereInput.


        :param id_gt: The id_gt of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_gte of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this GlobalSettingsWhereInput.


        :param id_gte: The id_gte of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_in of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this GlobalSettingsWhereInput.


        :param id_in: The id_in of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_lt of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this GlobalSettingsWhereInput.


        :param id_lt: The id_lt of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_lte of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this GlobalSettingsWhereInput.


        :param id_lte: The id_lte of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_not of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this GlobalSettingsWhereInput.


        :param id_not: The id_not of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_not_contains of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this GlobalSettingsWhereInput.


        :param id_not_contains: The id_not_contains of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this GlobalSettingsWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_not_in of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this GlobalSettingsWhereInput.


        :param id_not_in: The id_not_in of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this GlobalSettingsWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this GlobalSettingsWhereInput.  # noqa: E501


        :return: The id_starts_with of this GlobalSettingsWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this GlobalSettingsWhereInput.


        :param id_starts_with: The id_starts_with of this GlobalSettingsWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalSettingsWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalSettingsWhereInput):
            return True

        return self.to_dict() != other.to_dict()
