# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class Disk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_async_status': 'EntityAsyncStatus',
        'failure_information': 'NestedDiskFailureInformation',
        'firmware': 'str',
        'function': 'DiskFunction',
        'health_status': 'DiskHealthStatus',
        'healthy': 'bool',
        'host': 'NestedHost',
        'id': 'str',
        'labels': 'list[NestedLabel]',
        'local_id': 'str',
        'model': 'str',
        'mounted': 'bool',
        'name': 'str',
        'numa_node': 'int',
        'offline': 'bool',
        'partitions': 'list[NestedPartition]',
        'path': 'str',
        'persistent_memory_type': 'str',
        'physical_slot_on_brick': 'int',
        'pmem_dimms': 'list[NestedPmemDimm]',
        'recommended_usage': 'DiskUsage',
        'remaining_life_percent': 'int',
        'serial': 'str',
        'size': 'int',
        'type': 'DiskType',
        'usage': 'DiskUsage',
        'usage_status': 'DiskUsageStatus'
    }

    attribute_map = {
        'entity_async_status': 'entityAsyncStatus',
        'failure_information': 'failure_information',
        'firmware': 'firmware',
        'function': 'function',
        'health_status': 'health_status',
        'healthy': 'healthy',
        'host': 'host',
        'id': 'id',
        'labels': 'labels',
        'local_id': 'local_id',
        'model': 'model',
        'mounted': 'mounted',
        'name': 'name',
        'numa_node': 'numa_node',
        'offline': 'offline',
        'partitions': 'partitions',
        'path': 'path',
        'persistent_memory_type': 'persistent_memory_type',
        'physical_slot_on_brick': 'physical_slot_on_brick',
        'pmem_dimms': 'pmem_dimms',
        'recommended_usage': 'recommended_usage',
        'remaining_life_percent': 'remaining_life_percent',
        'serial': 'serial',
        'size': 'size',
        'type': 'type',
        'usage': 'usage',
        'usage_status': 'usage_status'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """Disk - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._entity_async_status = None
        self._failure_information = None
        self._firmware = None
        self._function = None
        self._health_status = None
        self._healthy = None
        self._host = None
        self._id = None
        self._labels = None
        self._local_id = None
        self._model = None
        self._mounted = None
        self._name = None
        self._numa_node = None
        self._offline = None
        self._partitions = None
        self._path = None
        self._persistent_memory_type = None
        self._physical_slot_on_brick = None
        self._pmem_dimms = None
        self._recommended_usage = None
        self._remaining_life_percent = None
        self._serial = None
        self._size = None
        self._type = None
        self._usage = None
        self._usage_status = None
        self.discriminator = None

        self.entity_async_status = kwargs.get("entity_async_status", None)
        self.failure_information = kwargs.get("failure_information", None)
        if "firmware" in kwargs:
            self.firmware = kwargs["firmware"]
        self.function = kwargs.get("function", None)
        self.health_status = kwargs.get("health_status", None)
        if "healthy" in kwargs:
            self.healthy = kwargs["healthy"]
        if "host" in kwargs:
            self.host = kwargs["host"]
        if "id" in kwargs:
            self.id = kwargs["id"]
        self.labels = kwargs.get("labels", None)
        if "local_id" in kwargs:
            self.local_id = kwargs["local_id"]
        if "model" in kwargs:
            self.model = kwargs["model"]
        if "mounted" in kwargs:
            self.mounted = kwargs["mounted"]
        if "name" in kwargs:
            self.name = kwargs["name"]
        self.numa_node = kwargs.get("numa_node", None)
        if "offline" in kwargs:
            self.offline = kwargs["offline"]
        if "partitions" in kwargs:
            self.partitions = kwargs["partitions"]
        if "path" in kwargs:
            self.path = kwargs["path"]
        self.persistent_memory_type = kwargs.get("persistent_memory_type", None)
        self.physical_slot_on_brick = kwargs.get("physical_slot_on_brick", None)
        self.pmem_dimms = kwargs.get("pmem_dimms", None)
        self.recommended_usage = kwargs.get("recommended_usage", None)
        self.remaining_life_percent = kwargs.get("remaining_life_percent", None)
        if "serial" in kwargs:
            self.serial = kwargs["serial"]
        if "size" in kwargs:
            self.size = kwargs["size"]
        if "type" in kwargs:
            self.type = kwargs["type"]
        if "usage" in kwargs:
            self.usage = kwargs["usage"]
        self.usage_status = kwargs.get("usage_status", None)

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this Disk.  # noqa: E501


        :return: The entity_async_status of this Disk.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this Disk.


        :param entity_async_status: The entity_async_status of this Disk.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def failure_information(self):
        """Gets the failure_information of this Disk.  # noqa: E501


        :return: The failure_information of this Disk.  # noqa: E501
        :rtype: NestedDiskFailureInformation
        """
        return self._failure_information

    @failure_information.setter
    def failure_information(self, failure_information):
        """Sets the failure_information of this Disk.


        :param failure_information: The failure_information of this Disk.  # noqa: E501
        :type failure_information: NestedDiskFailureInformation
        """

        self._failure_information = failure_information

    @property
    def firmware(self):
        """Gets the firmware of this Disk.  # noqa: E501


        :return: The firmware of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this Disk.


        :param firmware: The firmware of this Disk.  # noqa: E501
        :type firmware: str
        """
        if self.local_vars_configuration.client_side_validation and firmware is None:  # noqa: E501
            raise ValueError("Invalid value for `firmware`, must not be `None`")  # noqa: E501

        self._firmware = firmware

    @property
    def function(self):
        """Gets the function of this Disk.  # noqa: E501


        :return: The function of this Disk.  # noqa: E501
        :rtype: DiskFunction
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Disk.


        :param function: The function of this Disk.  # noqa: E501
        :type function: DiskFunction
        """

        self._function = function

    @property
    def health_status(self):
        """Gets the health_status of this Disk.  # noqa: E501


        :return: The health_status of this Disk.  # noqa: E501
        :rtype: DiskHealthStatus
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this Disk.


        :param health_status: The health_status of this Disk.  # noqa: E501
        :type health_status: DiskHealthStatus
        """

        self._health_status = health_status

    @property
    def healthy(self):
        """Gets the healthy of this Disk.  # noqa: E501


        :return: The healthy of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this Disk.


        :param healthy: The healthy of this Disk.  # noqa: E501
        :type healthy: bool
        """
        if self.local_vars_configuration.client_side_validation and healthy is None:  # noqa: E501
            raise ValueError("Invalid value for `healthy`, must not be `None`")  # noqa: E501

        self._healthy = healthy

    @property
    def host(self):
        """Gets the host of this Disk.  # noqa: E501


        :return: The host of this Disk.  # noqa: E501
        :rtype: NestedHost
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Disk.


        :param host: The host of this Disk.  # noqa: E501
        :type host: NestedHost
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def id(self):
        """Gets the id of this Disk.  # noqa: E501


        :return: The id of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Disk.


        :param id: The id of this Disk.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Disk.  # noqa: E501


        :return: The labels of this Disk.  # noqa: E501
        :rtype: list[NestedLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Disk.


        :param labels: The labels of this Disk.  # noqa: E501
        :type labels: list[NestedLabel]
        """

        self._labels = labels

    @property
    def local_id(self):
        """Gets the local_id of this Disk.  # noqa: E501


        :return: The local_id of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this Disk.


        :param local_id: The local_id of this Disk.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def model(self):
        """Gets the model of this Disk.  # noqa: E501


        :return: The model of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Disk.


        :param model: The model of this Disk.  # noqa: E501
        :type model: str
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def mounted(self):
        """Gets the mounted of this Disk.  # noqa: E501


        :return: The mounted of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._mounted

    @mounted.setter
    def mounted(self, mounted):
        """Sets the mounted of this Disk.


        :param mounted: The mounted of this Disk.  # noqa: E501
        :type mounted: bool
        """
        if self.local_vars_configuration.client_side_validation and mounted is None:  # noqa: E501
            raise ValueError("Invalid value for `mounted`, must not be `None`")  # noqa: E501

        self._mounted = mounted

    @property
    def name(self):
        """Gets the name of this Disk.  # noqa: E501


        :return: The name of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Disk.


        :param name: The name of this Disk.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def numa_node(self):
        """Gets the numa_node of this Disk.  # noqa: E501


        :return: The numa_node of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._numa_node

    @numa_node.setter
    def numa_node(self, numa_node):
        """Sets the numa_node of this Disk.


        :param numa_node: The numa_node of this Disk.  # noqa: E501
        :type numa_node: int
        """

        self._numa_node = numa_node

    @property
    def offline(self):
        """Gets the offline of this Disk.  # noqa: E501


        :return: The offline of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this Disk.


        :param offline: The offline of this Disk.  # noqa: E501
        :type offline: bool
        """
        if self.local_vars_configuration.client_side_validation and offline is None:  # noqa: E501
            raise ValueError("Invalid value for `offline`, must not be `None`")  # noqa: E501

        self._offline = offline

    @property
    def partitions(self):
        """Gets the partitions of this Disk.  # noqa: E501


        :return: The partitions of this Disk.  # noqa: E501
        :rtype: list[NestedPartition]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this Disk.


        :param partitions: The partitions of this Disk.  # noqa: E501
        :type partitions: list[NestedPartition]
        """
        if self.local_vars_configuration.client_side_validation and partitions is None:  # noqa: E501
            raise ValueError("Invalid value for `partitions`, must not be `None`")  # noqa: E501

        self._partitions = partitions

    @property
    def path(self):
        """Gets the path of this Disk.  # noqa: E501


        :return: The path of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Disk.


        :param path: The path of this Disk.  # noqa: E501
        :type path: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def persistent_memory_type(self):
        """Gets the persistent_memory_type of this Disk.  # noqa: E501


        :return: The persistent_memory_type of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._persistent_memory_type

    @persistent_memory_type.setter
    def persistent_memory_type(self, persistent_memory_type):
        """Sets the persistent_memory_type of this Disk.


        :param persistent_memory_type: The persistent_memory_type of this Disk.  # noqa: E501
        :type persistent_memory_type: str
        """

        self._persistent_memory_type = persistent_memory_type

    @property
    def physical_slot_on_brick(self):
        """Gets the physical_slot_on_brick of this Disk.  # noqa: E501


        :return: The physical_slot_on_brick of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._physical_slot_on_brick

    @physical_slot_on_brick.setter
    def physical_slot_on_brick(self, physical_slot_on_brick):
        """Sets the physical_slot_on_brick of this Disk.


        :param physical_slot_on_brick: The physical_slot_on_brick of this Disk.  # noqa: E501
        :type physical_slot_on_brick: int
        """

        self._physical_slot_on_brick = physical_slot_on_brick

    @property
    def pmem_dimms(self):
        """Gets the pmem_dimms of this Disk.  # noqa: E501


        :return: The pmem_dimms of this Disk.  # noqa: E501
        :rtype: list[NestedPmemDimm]
        """
        return self._pmem_dimms

    @pmem_dimms.setter
    def pmem_dimms(self, pmem_dimms):
        """Sets the pmem_dimms of this Disk.


        :param pmem_dimms: The pmem_dimms of this Disk.  # noqa: E501
        :type pmem_dimms: list[NestedPmemDimm]
        """

        self._pmem_dimms = pmem_dimms

    @property
    def recommended_usage(self):
        """Gets the recommended_usage of this Disk.  # noqa: E501


        :return: The recommended_usage of this Disk.  # noqa: E501
        :rtype: DiskUsage
        """
        return self._recommended_usage

    @recommended_usage.setter
    def recommended_usage(self, recommended_usage):
        """Sets the recommended_usage of this Disk.


        :param recommended_usage: The recommended_usage of this Disk.  # noqa: E501
        :type recommended_usage: DiskUsage
        """

        self._recommended_usage = recommended_usage

    @property
    def remaining_life_percent(self):
        """Gets the remaining_life_percent of this Disk.  # noqa: E501


        :return: The remaining_life_percent of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._remaining_life_percent

    @remaining_life_percent.setter
    def remaining_life_percent(self, remaining_life_percent):
        """Sets the remaining_life_percent of this Disk.


        :param remaining_life_percent: The remaining_life_percent of this Disk.  # noqa: E501
        :type remaining_life_percent: int
        """

        self._remaining_life_percent = remaining_life_percent

    @property
    def serial(self):
        """Gets the serial of this Disk.  # noqa: E501


        :return: The serial of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Disk.


        :param serial: The serial of this Disk.  # noqa: E501
        :type serial: str
        """
        if self.local_vars_configuration.client_side_validation and serial is None:  # noqa: E501
            raise ValueError("Invalid value for `serial`, must not be `None`")  # noqa: E501

        self._serial = serial

    @property
    def size(self):
        """Gets the size of this Disk.  # noqa: E501


        :return: The size of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Disk.


        :param size: The size of this Disk.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def type(self):
        """Gets the type of this Disk.  # noqa: E501


        :return: The type of this Disk.  # noqa: E501
        :rtype: DiskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Disk.


        :param type: The type of this Disk.  # noqa: E501
        :type type: DiskType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def usage(self):
        """Gets the usage of this Disk.  # noqa: E501


        :return: The usage of this Disk.  # noqa: E501
        :rtype: DiskUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Disk.


        :param usage: The usage of this Disk.  # noqa: E501
        :type usage: DiskUsage
        """
        if self.local_vars_configuration.client_side_validation and usage is None:  # noqa: E501
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    @property
    def usage_status(self):
        """Gets the usage_status of this Disk.  # noqa: E501


        :return: The usage_status of this Disk.  # noqa: E501
        :rtype: DiskUsageStatus
        """
        return self._usage_status

    @usage_status.setter
    def usage_status(self, usage_status):
        """Sets the usage_status of this Disk.


        :param usage_status: The usage_status of this Disk.  # noqa: E501
        :type usage_status: DiskUsageStatus
        """

        self._usage_status = usage_status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Disk):
            return True

        return self.to_dict() != other.to_dict()
