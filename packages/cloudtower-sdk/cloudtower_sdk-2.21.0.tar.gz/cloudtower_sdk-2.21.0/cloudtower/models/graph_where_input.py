# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class GraphWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[GraphWhereInput]',
        '_not': 'list[GraphWhereInput]',
        '_or': 'list[GraphWhereInput]',
        'cluster': 'ClusterWhereInput',
        'disks_every': 'DiskWhereInput',
        'disks_none': 'DiskWhereInput',
        'disks_some': 'DiskWhereInput',
        'entity_async_status': 'EntityAsyncStatus',
        'entity_async_status_in': 'list[EntityAsyncStatus]',
        'entity_async_status_not': 'EntityAsyncStatus',
        'entity_async_status_not_in': 'list[EntityAsyncStatus]',
        'hosts_every': 'HostWhereInput',
        'hosts_none': 'HostWhereInput',
        'hosts_some': 'HostWhereInput',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'local_id': 'str',
        'local_id_contains': 'str',
        'local_id_ends_with': 'str',
        'local_id_gt': 'str',
        'local_id_gte': 'str',
        'local_id_in': 'list[str]',
        'local_id_lt': 'str',
        'local_id_lte': 'str',
        'local_id_not': 'str',
        'local_id_not_contains': 'str',
        'local_id_not_ends_with': 'str',
        'local_id_not_in': 'list[str]',
        'local_id_not_starts_with': 'str',
        'local_id_starts_with': 'str',
        'luns_every': 'IscsiLunWhereInput',
        'luns_none': 'IscsiLunWhereInput',
        'luns_some': 'IscsiLunWhereInput',
        'metric_count': 'int',
        'metric_count_gt': 'int',
        'metric_count_gte': 'int',
        'metric_count_in': 'list[int]',
        'metric_count_lt': 'int',
        'metric_count_lte': 'int',
        'metric_count_not': 'int',
        'metric_count_not_in': 'list[int]',
        'metric_name': 'str',
        'metric_name_contains': 'str',
        'metric_name_ends_with': 'str',
        'metric_name_gt': 'str',
        'metric_name_gte': 'str',
        'metric_name_in': 'list[str]',
        'metric_name_lt': 'str',
        'metric_name_lte': 'str',
        'metric_name_not': 'str',
        'metric_name_not_contains': 'str',
        'metric_name_not_ends_with': 'str',
        'metric_name_not_in': 'list[str]',
        'metric_name_not_starts_with': 'str',
        'metric_name_starts_with': 'str',
        'metric_type': 'MetricType',
        'metric_type_in': 'list[MetricType]',
        'metric_type_not': 'MetricType',
        'metric_type_not_in': 'list[MetricType]',
        'namespaces_every': 'NvmfNamespaceWhereInput',
        'namespaces_none': 'NvmfNamespaceWhereInput',
        'namespaces_some': 'NvmfNamespaceWhereInput',
        'network': 'NetworkType',
        'network_in': 'list[NetworkType]',
        'network_not': 'NetworkType',
        'network_not_in': 'list[NetworkType]',
        'nics_every': 'NicWhereInput',
        'nics_none': 'NicWhereInput',
        'nics_some': 'NicWhereInput',
        'resource_type': 'str',
        'resource_type_contains': 'str',
        'resource_type_ends_with': 'str',
        'resource_type_gt': 'str',
        'resource_type_gte': 'str',
        'resource_type_in': 'list[str]',
        'resource_type_lt': 'str',
        'resource_type_lte': 'str',
        'resource_type_not': 'str',
        'resource_type_not_contains': 'str',
        'resource_type_not_ends_with': 'str',
        'resource_type_not_in': 'list[str]',
        'resource_type_not_starts_with': 'str',
        'resource_type_starts_with': 'str',
        'service': 'str',
        'service_contains': 'str',
        'service_ends_with': 'str',
        'service_gt': 'str',
        'service_gte': 'str',
        'service_in': 'list[str]',
        'service_lt': 'str',
        'service_lte': 'str',
        'service_not': 'str',
        'service_not_contains': 'str',
        'service_not_ends_with': 'str',
        'service_not_in': 'list[str]',
        'service_not_starts_with': 'str',
        'service_starts_with': 'str',
        'title': 'str',
        'title_contains': 'str',
        'title_ends_with': 'str',
        'title_gt': 'str',
        'title_gte': 'str',
        'title_in': 'list[str]',
        'title_lt': 'str',
        'title_lte': 'str',
        'title_not': 'str',
        'title_not_contains': 'str',
        'title_not_ends_with': 'str',
        'title_not_in': 'list[str]',
        'title_not_starts_with': 'str',
        'title_starts_with': 'str',
        'type': 'GraphType',
        'type_in': 'list[GraphType]',
        'type_not': 'GraphType',
        'type_not_in': 'list[GraphType]',
        'view': 'ViewWhereInput',
        'vm_nics_every': 'VmNicWhereInput',
        'vm_nics_none': 'VmNicWhereInput',
        'vm_nics_some': 'VmNicWhereInput',
        'vm_volumes_every': 'VmVolumeWhereInput',
        'vm_volumes_none': 'VmVolumeWhereInput',
        'vm_volumes_some': 'VmVolumeWhereInput',
        'vms_every': 'VmWhereInput',
        'vms_none': 'VmWhereInput',
        'vms_some': 'VmWhereInput',
        'witnesses_every': 'WitnessWhereInput',
        'witnesses_none': 'WitnessWhereInput',
        'witnesses_some': 'WitnessWhereInput',
        'zones_every': 'ZoneWhereInput',
        'zones_none': 'ZoneWhereInput',
        'zones_some': 'ZoneWhereInput'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'cluster': 'cluster',
        'disks_every': 'disks_every',
        'disks_none': 'disks_none',
        'disks_some': 'disks_some',
        'entity_async_status': 'entityAsyncStatus',
        'entity_async_status_in': 'entityAsyncStatus_in',
        'entity_async_status_not': 'entityAsyncStatus_not',
        'entity_async_status_not_in': 'entityAsyncStatus_not_in',
        'hosts_every': 'hosts_every',
        'hosts_none': 'hosts_none',
        'hosts_some': 'hosts_some',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'local_id': 'local_id',
        'local_id_contains': 'local_id_contains',
        'local_id_ends_with': 'local_id_ends_with',
        'local_id_gt': 'local_id_gt',
        'local_id_gte': 'local_id_gte',
        'local_id_in': 'local_id_in',
        'local_id_lt': 'local_id_lt',
        'local_id_lte': 'local_id_lte',
        'local_id_not': 'local_id_not',
        'local_id_not_contains': 'local_id_not_contains',
        'local_id_not_ends_with': 'local_id_not_ends_with',
        'local_id_not_in': 'local_id_not_in',
        'local_id_not_starts_with': 'local_id_not_starts_with',
        'local_id_starts_with': 'local_id_starts_with',
        'luns_every': 'luns_every',
        'luns_none': 'luns_none',
        'luns_some': 'luns_some',
        'metric_count': 'metric_count',
        'metric_count_gt': 'metric_count_gt',
        'metric_count_gte': 'metric_count_gte',
        'metric_count_in': 'metric_count_in',
        'metric_count_lt': 'metric_count_lt',
        'metric_count_lte': 'metric_count_lte',
        'metric_count_not': 'metric_count_not',
        'metric_count_not_in': 'metric_count_not_in',
        'metric_name': 'metric_name',
        'metric_name_contains': 'metric_name_contains',
        'metric_name_ends_with': 'metric_name_ends_with',
        'metric_name_gt': 'metric_name_gt',
        'metric_name_gte': 'metric_name_gte',
        'metric_name_in': 'metric_name_in',
        'metric_name_lt': 'metric_name_lt',
        'metric_name_lte': 'metric_name_lte',
        'metric_name_not': 'metric_name_not',
        'metric_name_not_contains': 'metric_name_not_contains',
        'metric_name_not_ends_with': 'metric_name_not_ends_with',
        'metric_name_not_in': 'metric_name_not_in',
        'metric_name_not_starts_with': 'metric_name_not_starts_with',
        'metric_name_starts_with': 'metric_name_starts_with',
        'metric_type': 'metric_type',
        'metric_type_in': 'metric_type_in',
        'metric_type_not': 'metric_type_not',
        'metric_type_not_in': 'metric_type_not_in',
        'namespaces_every': 'namespaces_every',
        'namespaces_none': 'namespaces_none',
        'namespaces_some': 'namespaces_some',
        'network': 'network',
        'network_in': 'network_in',
        'network_not': 'network_not',
        'network_not_in': 'network_not_in',
        'nics_every': 'nics_every',
        'nics_none': 'nics_none',
        'nics_some': 'nics_some',
        'resource_type': 'resource_type',
        'resource_type_contains': 'resource_type_contains',
        'resource_type_ends_with': 'resource_type_ends_with',
        'resource_type_gt': 'resource_type_gt',
        'resource_type_gte': 'resource_type_gte',
        'resource_type_in': 'resource_type_in',
        'resource_type_lt': 'resource_type_lt',
        'resource_type_lte': 'resource_type_lte',
        'resource_type_not': 'resource_type_not',
        'resource_type_not_contains': 'resource_type_not_contains',
        'resource_type_not_ends_with': 'resource_type_not_ends_with',
        'resource_type_not_in': 'resource_type_not_in',
        'resource_type_not_starts_with': 'resource_type_not_starts_with',
        'resource_type_starts_with': 'resource_type_starts_with',
        'service': 'service',
        'service_contains': 'service_contains',
        'service_ends_with': 'service_ends_with',
        'service_gt': 'service_gt',
        'service_gte': 'service_gte',
        'service_in': 'service_in',
        'service_lt': 'service_lt',
        'service_lte': 'service_lte',
        'service_not': 'service_not',
        'service_not_contains': 'service_not_contains',
        'service_not_ends_with': 'service_not_ends_with',
        'service_not_in': 'service_not_in',
        'service_not_starts_with': 'service_not_starts_with',
        'service_starts_with': 'service_starts_with',
        'title': 'title',
        'title_contains': 'title_contains',
        'title_ends_with': 'title_ends_with',
        'title_gt': 'title_gt',
        'title_gte': 'title_gte',
        'title_in': 'title_in',
        'title_lt': 'title_lt',
        'title_lte': 'title_lte',
        'title_not': 'title_not',
        'title_not_contains': 'title_not_contains',
        'title_not_ends_with': 'title_not_ends_with',
        'title_not_in': 'title_not_in',
        'title_not_starts_with': 'title_not_starts_with',
        'title_starts_with': 'title_starts_with',
        'type': 'type',
        'type_in': 'type_in',
        'type_not': 'type_not',
        'type_not_in': 'type_not_in',
        'view': 'view',
        'vm_nics_every': 'vmNics_every',
        'vm_nics_none': 'vmNics_none',
        'vm_nics_some': 'vmNics_some',
        'vm_volumes_every': 'vmVolumes_every',
        'vm_volumes_none': 'vmVolumes_none',
        'vm_volumes_some': 'vmVolumes_some',
        'vms_every': 'vms_every',
        'vms_none': 'vms_none',
        'vms_some': 'vms_some',
        'witnesses_every': 'witnesses_every',
        'witnesses_none': 'witnesses_none',
        'witnesses_some': 'witnesses_some',
        'zones_every': 'zones_every',
        'zones_none': 'zones_none',
        'zones_some': 'zones_some'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """GraphWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._cluster = None
        self._disks_every = None
        self._disks_none = None
        self._disks_some = None
        self._entity_async_status = None
        self._entity_async_status_in = None
        self._entity_async_status_not = None
        self._entity_async_status_not_in = None
        self._hosts_every = None
        self._hosts_none = None
        self._hosts_some = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._local_id = None
        self._local_id_contains = None
        self._local_id_ends_with = None
        self._local_id_gt = None
        self._local_id_gte = None
        self._local_id_in = None
        self._local_id_lt = None
        self._local_id_lte = None
        self._local_id_not = None
        self._local_id_not_contains = None
        self._local_id_not_ends_with = None
        self._local_id_not_in = None
        self._local_id_not_starts_with = None
        self._local_id_starts_with = None
        self._luns_every = None
        self._luns_none = None
        self._luns_some = None
        self._metric_count = None
        self._metric_count_gt = None
        self._metric_count_gte = None
        self._metric_count_in = None
        self._metric_count_lt = None
        self._metric_count_lte = None
        self._metric_count_not = None
        self._metric_count_not_in = None
        self._metric_name = None
        self._metric_name_contains = None
        self._metric_name_ends_with = None
        self._metric_name_gt = None
        self._metric_name_gte = None
        self._metric_name_in = None
        self._metric_name_lt = None
        self._metric_name_lte = None
        self._metric_name_not = None
        self._metric_name_not_contains = None
        self._metric_name_not_ends_with = None
        self._metric_name_not_in = None
        self._metric_name_not_starts_with = None
        self._metric_name_starts_with = None
        self._metric_type = None
        self._metric_type_in = None
        self._metric_type_not = None
        self._metric_type_not_in = None
        self._namespaces_every = None
        self._namespaces_none = None
        self._namespaces_some = None
        self._network = None
        self._network_in = None
        self._network_not = None
        self._network_not_in = None
        self._nics_every = None
        self._nics_none = None
        self._nics_some = None
        self._resource_type = None
        self._resource_type_contains = None
        self._resource_type_ends_with = None
        self._resource_type_gt = None
        self._resource_type_gte = None
        self._resource_type_in = None
        self._resource_type_lt = None
        self._resource_type_lte = None
        self._resource_type_not = None
        self._resource_type_not_contains = None
        self._resource_type_not_ends_with = None
        self._resource_type_not_in = None
        self._resource_type_not_starts_with = None
        self._resource_type_starts_with = None
        self._service = None
        self._service_contains = None
        self._service_ends_with = None
        self._service_gt = None
        self._service_gte = None
        self._service_in = None
        self._service_lt = None
        self._service_lte = None
        self._service_not = None
        self._service_not_contains = None
        self._service_not_ends_with = None
        self._service_not_in = None
        self._service_not_starts_with = None
        self._service_starts_with = None
        self._title = None
        self._title_contains = None
        self._title_ends_with = None
        self._title_gt = None
        self._title_gte = None
        self._title_in = None
        self._title_lt = None
        self._title_lte = None
        self._title_not = None
        self._title_not_contains = None
        self._title_not_ends_with = None
        self._title_not_in = None
        self._title_not_starts_with = None
        self._title_starts_with = None
        self._type = None
        self._type_in = None
        self._type_not = None
        self._type_not_in = None
        self._view = None
        self._vm_nics_every = None
        self._vm_nics_none = None
        self._vm_nics_some = None
        self._vm_volumes_every = None
        self._vm_volumes_none = None
        self._vm_volumes_some = None
        self._vms_every = None
        self._vms_none = None
        self._vms_some = None
        self._witnesses_every = None
        self._witnesses_none = None
        self._witnesses_some = None
        self._zones_every = None
        self._zones_none = None
        self._zones_some = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.cluster = kwargs.get("cluster", None)
        self.disks_every = kwargs.get("disks_every", None)
        self.disks_none = kwargs.get("disks_none", None)
        self.disks_some = kwargs.get("disks_some", None)
        self.entity_async_status = kwargs.get("entity_async_status", None)
        self.entity_async_status_in = kwargs.get("entity_async_status_in", None)
        self.entity_async_status_not = kwargs.get("entity_async_status_not", None)
        self.entity_async_status_not_in = kwargs.get("entity_async_status_not_in", None)
        self.hosts_every = kwargs.get("hosts_every", None)
        self.hosts_none = kwargs.get("hosts_none", None)
        self.hosts_some = kwargs.get("hosts_some", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.local_id = kwargs.get("local_id", None)
        self.local_id_contains = kwargs.get("local_id_contains", None)
        self.local_id_ends_with = kwargs.get("local_id_ends_with", None)
        self.local_id_gt = kwargs.get("local_id_gt", None)
        self.local_id_gte = kwargs.get("local_id_gte", None)
        self.local_id_in = kwargs.get("local_id_in", None)
        self.local_id_lt = kwargs.get("local_id_lt", None)
        self.local_id_lte = kwargs.get("local_id_lte", None)
        self.local_id_not = kwargs.get("local_id_not", None)
        self.local_id_not_contains = kwargs.get("local_id_not_contains", None)
        self.local_id_not_ends_with = kwargs.get("local_id_not_ends_with", None)
        self.local_id_not_in = kwargs.get("local_id_not_in", None)
        self.local_id_not_starts_with = kwargs.get("local_id_not_starts_with", None)
        self.local_id_starts_with = kwargs.get("local_id_starts_with", None)
        self.luns_every = kwargs.get("luns_every", None)
        self.luns_none = kwargs.get("luns_none", None)
        self.luns_some = kwargs.get("luns_some", None)
        self.metric_count = kwargs.get("metric_count", None)
        self.metric_count_gt = kwargs.get("metric_count_gt", None)
        self.metric_count_gte = kwargs.get("metric_count_gte", None)
        self.metric_count_in = kwargs.get("metric_count_in", None)
        self.metric_count_lt = kwargs.get("metric_count_lt", None)
        self.metric_count_lte = kwargs.get("metric_count_lte", None)
        self.metric_count_not = kwargs.get("metric_count_not", None)
        self.metric_count_not_in = kwargs.get("metric_count_not_in", None)
        self.metric_name = kwargs.get("metric_name", None)
        self.metric_name_contains = kwargs.get("metric_name_contains", None)
        self.metric_name_ends_with = kwargs.get("metric_name_ends_with", None)
        self.metric_name_gt = kwargs.get("metric_name_gt", None)
        self.metric_name_gte = kwargs.get("metric_name_gte", None)
        self.metric_name_in = kwargs.get("metric_name_in", None)
        self.metric_name_lt = kwargs.get("metric_name_lt", None)
        self.metric_name_lte = kwargs.get("metric_name_lte", None)
        self.metric_name_not = kwargs.get("metric_name_not", None)
        self.metric_name_not_contains = kwargs.get("metric_name_not_contains", None)
        self.metric_name_not_ends_with = kwargs.get("metric_name_not_ends_with", None)
        self.metric_name_not_in = kwargs.get("metric_name_not_in", None)
        self.metric_name_not_starts_with = kwargs.get("metric_name_not_starts_with", None)
        self.metric_name_starts_with = kwargs.get("metric_name_starts_with", None)
        self.metric_type = kwargs.get("metric_type", None)
        self.metric_type_in = kwargs.get("metric_type_in", None)
        self.metric_type_not = kwargs.get("metric_type_not", None)
        self.metric_type_not_in = kwargs.get("metric_type_not_in", None)
        self.namespaces_every = kwargs.get("namespaces_every", None)
        self.namespaces_none = kwargs.get("namespaces_none", None)
        self.namespaces_some = kwargs.get("namespaces_some", None)
        self.network = kwargs.get("network", None)
        self.network_in = kwargs.get("network_in", None)
        self.network_not = kwargs.get("network_not", None)
        self.network_not_in = kwargs.get("network_not_in", None)
        self.nics_every = kwargs.get("nics_every", None)
        self.nics_none = kwargs.get("nics_none", None)
        self.nics_some = kwargs.get("nics_some", None)
        self.resource_type = kwargs.get("resource_type", None)
        self.resource_type_contains = kwargs.get("resource_type_contains", None)
        self.resource_type_ends_with = kwargs.get("resource_type_ends_with", None)
        self.resource_type_gt = kwargs.get("resource_type_gt", None)
        self.resource_type_gte = kwargs.get("resource_type_gte", None)
        self.resource_type_in = kwargs.get("resource_type_in", None)
        self.resource_type_lt = kwargs.get("resource_type_lt", None)
        self.resource_type_lte = kwargs.get("resource_type_lte", None)
        self.resource_type_not = kwargs.get("resource_type_not", None)
        self.resource_type_not_contains = kwargs.get("resource_type_not_contains", None)
        self.resource_type_not_ends_with = kwargs.get("resource_type_not_ends_with", None)
        self.resource_type_not_in = kwargs.get("resource_type_not_in", None)
        self.resource_type_not_starts_with = kwargs.get("resource_type_not_starts_with", None)
        self.resource_type_starts_with = kwargs.get("resource_type_starts_with", None)
        self.service = kwargs.get("service", None)
        self.service_contains = kwargs.get("service_contains", None)
        self.service_ends_with = kwargs.get("service_ends_with", None)
        self.service_gt = kwargs.get("service_gt", None)
        self.service_gte = kwargs.get("service_gte", None)
        self.service_in = kwargs.get("service_in", None)
        self.service_lt = kwargs.get("service_lt", None)
        self.service_lte = kwargs.get("service_lte", None)
        self.service_not = kwargs.get("service_not", None)
        self.service_not_contains = kwargs.get("service_not_contains", None)
        self.service_not_ends_with = kwargs.get("service_not_ends_with", None)
        self.service_not_in = kwargs.get("service_not_in", None)
        self.service_not_starts_with = kwargs.get("service_not_starts_with", None)
        self.service_starts_with = kwargs.get("service_starts_with", None)
        self.title = kwargs.get("title", None)
        self.title_contains = kwargs.get("title_contains", None)
        self.title_ends_with = kwargs.get("title_ends_with", None)
        self.title_gt = kwargs.get("title_gt", None)
        self.title_gte = kwargs.get("title_gte", None)
        self.title_in = kwargs.get("title_in", None)
        self.title_lt = kwargs.get("title_lt", None)
        self.title_lte = kwargs.get("title_lte", None)
        self.title_not = kwargs.get("title_not", None)
        self.title_not_contains = kwargs.get("title_not_contains", None)
        self.title_not_ends_with = kwargs.get("title_not_ends_with", None)
        self.title_not_in = kwargs.get("title_not_in", None)
        self.title_not_starts_with = kwargs.get("title_not_starts_with", None)
        self.title_starts_with = kwargs.get("title_starts_with", None)
        self.type = kwargs.get("type", None)
        self.type_in = kwargs.get("type_in", None)
        self.type_not = kwargs.get("type_not", None)
        self.type_not_in = kwargs.get("type_not_in", None)
        self.view = kwargs.get("view", None)
        self.vm_nics_every = kwargs.get("vm_nics_every", None)
        self.vm_nics_none = kwargs.get("vm_nics_none", None)
        self.vm_nics_some = kwargs.get("vm_nics_some", None)
        self.vm_volumes_every = kwargs.get("vm_volumes_every", None)
        self.vm_volumes_none = kwargs.get("vm_volumes_none", None)
        self.vm_volumes_some = kwargs.get("vm_volumes_some", None)
        self.vms_every = kwargs.get("vms_every", None)
        self.vms_none = kwargs.get("vms_none", None)
        self.vms_some = kwargs.get("vms_some", None)
        self.witnesses_every = kwargs.get("witnesses_every", None)
        self.witnesses_none = kwargs.get("witnesses_none", None)
        self.witnesses_some = kwargs.get("witnesses_some", None)
        self.zones_every = kwargs.get("zones_every", None)
        self.zones_none = kwargs.get("zones_none", None)
        self.zones_some = kwargs.get("zones_some", None)

    @property
    def _and(self):
        """Gets the _and of this GraphWhereInput.  # noqa: E501


        :return: The _and of this GraphWhereInput.  # noqa: E501
        :rtype: list[GraphWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this GraphWhereInput.


        :param _and: The _and of this GraphWhereInput.  # noqa: E501
        :type _and: list[GraphWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this GraphWhereInput.  # noqa: E501


        :return: The _not of this GraphWhereInput.  # noqa: E501
        :rtype: list[GraphWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this GraphWhereInput.


        :param _not: The _not of this GraphWhereInput.  # noqa: E501
        :type _not: list[GraphWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this GraphWhereInput.  # noqa: E501


        :return: The _or of this GraphWhereInput.  # noqa: E501
        :rtype: list[GraphWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this GraphWhereInput.


        :param _or: The _or of this GraphWhereInput.  # noqa: E501
        :type _or: list[GraphWhereInput]
        """

        self.__or = _or

    @property
    def cluster(self):
        """Gets the cluster of this GraphWhereInput.  # noqa: E501


        :return: The cluster of this GraphWhereInput.  # noqa: E501
        :rtype: ClusterWhereInput
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this GraphWhereInput.


        :param cluster: The cluster of this GraphWhereInput.  # noqa: E501
        :type cluster: ClusterWhereInput
        """

        self._cluster = cluster

    @property
    def disks_every(self):
        """Gets the disks_every of this GraphWhereInput.  # noqa: E501


        :return: The disks_every of this GraphWhereInput.  # noqa: E501
        :rtype: DiskWhereInput
        """
        return self._disks_every

    @disks_every.setter
    def disks_every(self, disks_every):
        """Sets the disks_every of this GraphWhereInput.


        :param disks_every: The disks_every of this GraphWhereInput.  # noqa: E501
        :type disks_every: DiskWhereInput
        """

        self._disks_every = disks_every

    @property
    def disks_none(self):
        """Gets the disks_none of this GraphWhereInput.  # noqa: E501


        :return: The disks_none of this GraphWhereInput.  # noqa: E501
        :rtype: DiskWhereInput
        """
        return self._disks_none

    @disks_none.setter
    def disks_none(self, disks_none):
        """Sets the disks_none of this GraphWhereInput.


        :param disks_none: The disks_none of this GraphWhereInput.  # noqa: E501
        :type disks_none: DiskWhereInput
        """

        self._disks_none = disks_none

    @property
    def disks_some(self):
        """Gets the disks_some of this GraphWhereInput.  # noqa: E501


        :return: The disks_some of this GraphWhereInput.  # noqa: E501
        :rtype: DiskWhereInput
        """
        return self._disks_some

    @disks_some.setter
    def disks_some(self, disks_some):
        """Sets the disks_some of this GraphWhereInput.


        :param disks_some: The disks_some of this GraphWhereInput.  # noqa: E501
        :type disks_some: DiskWhereInput
        """

        self._disks_some = disks_some

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this GraphWhereInput.  # noqa: E501


        :return: The entity_async_status of this GraphWhereInput.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this GraphWhereInput.


        :param entity_async_status: The entity_async_status of this GraphWhereInput.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def entity_async_status_in(self):
        """Gets the entity_async_status_in of this GraphWhereInput.  # noqa: E501


        :return: The entity_async_status_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[EntityAsyncStatus]
        """
        return self._entity_async_status_in

    @entity_async_status_in.setter
    def entity_async_status_in(self, entity_async_status_in):
        """Sets the entity_async_status_in of this GraphWhereInput.


        :param entity_async_status_in: The entity_async_status_in of this GraphWhereInput.  # noqa: E501
        :type entity_async_status_in: list[EntityAsyncStatus]
        """

        self._entity_async_status_in = entity_async_status_in

    @property
    def entity_async_status_not(self):
        """Gets the entity_async_status_not of this GraphWhereInput.  # noqa: E501


        :return: The entity_async_status_not of this GraphWhereInput.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status_not

    @entity_async_status_not.setter
    def entity_async_status_not(self, entity_async_status_not):
        """Sets the entity_async_status_not of this GraphWhereInput.


        :param entity_async_status_not: The entity_async_status_not of this GraphWhereInput.  # noqa: E501
        :type entity_async_status_not: EntityAsyncStatus
        """

        self._entity_async_status_not = entity_async_status_not

    @property
    def entity_async_status_not_in(self):
        """Gets the entity_async_status_not_in of this GraphWhereInput.  # noqa: E501


        :return: The entity_async_status_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[EntityAsyncStatus]
        """
        return self._entity_async_status_not_in

    @entity_async_status_not_in.setter
    def entity_async_status_not_in(self, entity_async_status_not_in):
        """Sets the entity_async_status_not_in of this GraphWhereInput.


        :param entity_async_status_not_in: The entity_async_status_not_in of this GraphWhereInput.  # noqa: E501
        :type entity_async_status_not_in: list[EntityAsyncStatus]
        """

        self._entity_async_status_not_in = entity_async_status_not_in

    @property
    def hosts_every(self):
        """Gets the hosts_every of this GraphWhereInput.  # noqa: E501


        :return: The hosts_every of this GraphWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_every

    @hosts_every.setter
    def hosts_every(self, hosts_every):
        """Sets the hosts_every of this GraphWhereInput.


        :param hosts_every: The hosts_every of this GraphWhereInput.  # noqa: E501
        :type hosts_every: HostWhereInput
        """

        self._hosts_every = hosts_every

    @property
    def hosts_none(self):
        """Gets the hosts_none of this GraphWhereInput.  # noqa: E501


        :return: The hosts_none of this GraphWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_none

    @hosts_none.setter
    def hosts_none(self, hosts_none):
        """Sets the hosts_none of this GraphWhereInput.


        :param hosts_none: The hosts_none of this GraphWhereInput.  # noqa: E501
        :type hosts_none: HostWhereInput
        """

        self._hosts_none = hosts_none

    @property
    def hosts_some(self):
        """Gets the hosts_some of this GraphWhereInput.  # noqa: E501


        :return: The hosts_some of this GraphWhereInput.  # noqa: E501
        :rtype: HostWhereInput
        """
        return self._hosts_some

    @hosts_some.setter
    def hosts_some(self, hosts_some):
        """Sets the hosts_some of this GraphWhereInput.


        :param hosts_some: The hosts_some of this GraphWhereInput.  # noqa: E501
        :type hosts_some: HostWhereInput
        """

        self._hosts_some = hosts_some

    @property
    def id(self):
        """Gets the id of this GraphWhereInput.  # noqa: E501


        :return: The id of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GraphWhereInput.


        :param id: The id of this GraphWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this GraphWhereInput.  # noqa: E501


        :return: The id_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this GraphWhereInput.


        :param id_contains: The id_contains of this GraphWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The id_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this GraphWhereInput.


        :param id_ends_with: The id_ends_with of this GraphWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this GraphWhereInput.  # noqa: E501


        :return: The id_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this GraphWhereInput.


        :param id_gt: The id_gt of this GraphWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this GraphWhereInput.  # noqa: E501


        :return: The id_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this GraphWhereInput.


        :param id_gte: The id_gte of this GraphWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this GraphWhereInput.  # noqa: E501


        :return: The id_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this GraphWhereInput.


        :param id_in: The id_in of this GraphWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this GraphWhereInput.  # noqa: E501


        :return: The id_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this GraphWhereInput.


        :param id_lt: The id_lt of this GraphWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this GraphWhereInput.  # noqa: E501


        :return: The id_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this GraphWhereInput.


        :param id_lte: The id_lte of this GraphWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this GraphWhereInput.  # noqa: E501


        :return: The id_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this GraphWhereInput.


        :param id_not: The id_not of this GraphWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The id_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this GraphWhereInput.


        :param id_not_contains: The id_not_contains of this GraphWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this GraphWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this GraphWhereInput.  # noqa: E501


        :return: The id_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this GraphWhereInput.


        :param id_not_in: The id_not_in of this GraphWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this GraphWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The id_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this GraphWhereInput.


        :param id_starts_with: The id_starts_with of this GraphWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def local_id(self):
        """Gets the local_id of this GraphWhereInput.  # noqa: E501


        :return: The local_id of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this GraphWhereInput.


        :param local_id: The local_id of this GraphWhereInput.  # noqa: E501
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def local_id_contains(self):
        """Gets the local_id_contains of this GraphWhereInput.  # noqa: E501


        :return: The local_id_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_contains

    @local_id_contains.setter
    def local_id_contains(self, local_id_contains):
        """Sets the local_id_contains of this GraphWhereInput.


        :param local_id_contains: The local_id_contains of this GraphWhereInput.  # noqa: E501
        :type local_id_contains: str
        """

        self._local_id_contains = local_id_contains

    @property
    def local_id_ends_with(self):
        """Gets the local_id_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The local_id_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_ends_with

    @local_id_ends_with.setter
    def local_id_ends_with(self, local_id_ends_with):
        """Sets the local_id_ends_with of this GraphWhereInput.


        :param local_id_ends_with: The local_id_ends_with of this GraphWhereInput.  # noqa: E501
        :type local_id_ends_with: str
        """

        self._local_id_ends_with = local_id_ends_with

    @property
    def local_id_gt(self):
        """Gets the local_id_gt of this GraphWhereInput.  # noqa: E501


        :return: The local_id_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gt

    @local_id_gt.setter
    def local_id_gt(self, local_id_gt):
        """Sets the local_id_gt of this GraphWhereInput.


        :param local_id_gt: The local_id_gt of this GraphWhereInput.  # noqa: E501
        :type local_id_gt: str
        """

        self._local_id_gt = local_id_gt

    @property
    def local_id_gte(self):
        """Gets the local_id_gte of this GraphWhereInput.  # noqa: E501


        :return: The local_id_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gte

    @local_id_gte.setter
    def local_id_gte(self, local_id_gte):
        """Sets the local_id_gte of this GraphWhereInput.


        :param local_id_gte: The local_id_gte of this GraphWhereInput.  # noqa: E501
        :type local_id_gte: str
        """

        self._local_id_gte = local_id_gte

    @property
    def local_id_in(self):
        """Gets the local_id_in of this GraphWhereInput.  # noqa: E501


        :return: The local_id_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_in

    @local_id_in.setter
    def local_id_in(self, local_id_in):
        """Sets the local_id_in of this GraphWhereInput.


        :param local_id_in: The local_id_in of this GraphWhereInput.  # noqa: E501
        :type local_id_in: list[str]
        """

        self._local_id_in = local_id_in

    @property
    def local_id_lt(self):
        """Gets the local_id_lt of this GraphWhereInput.  # noqa: E501


        :return: The local_id_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lt

    @local_id_lt.setter
    def local_id_lt(self, local_id_lt):
        """Sets the local_id_lt of this GraphWhereInput.


        :param local_id_lt: The local_id_lt of this GraphWhereInput.  # noqa: E501
        :type local_id_lt: str
        """

        self._local_id_lt = local_id_lt

    @property
    def local_id_lte(self):
        """Gets the local_id_lte of this GraphWhereInput.  # noqa: E501


        :return: The local_id_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lte

    @local_id_lte.setter
    def local_id_lte(self, local_id_lte):
        """Sets the local_id_lte of this GraphWhereInput.


        :param local_id_lte: The local_id_lte of this GraphWhereInput.  # noqa: E501
        :type local_id_lte: str
        """

        self._local_id_lte = local_id_lte

    @property
    def local_id_not(self):
        """Gets the local_id_not of this GraphWhereInput.  # noqa: E501


        :return: The local_id_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not

    @local_id_not.setter
    def local_id_not(self, local_id_not):
        """Sets the local_id_not of this GraphWhereInput.


        :param local_id_not: The local_id_not of this GraphWhereInput.  # noqa: E501
        :type local_id_not: str
        """

        self._local_id_not = local_id_not

    @property
    def local_id_not_contains(self):
        """Gets the local_id_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The local_id_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_contains

    @local_id_not_contains.setter
    def local_id_not_contains(self, local_id_not_contains):
        """Sets the local_id_not_contains of this GraphWhereInput.


        :param local_id_not_contains: The local_id_not_contains of this GraphWhereInput.  # noqa: E501
        :type local_id_not_contains: str
        """

        self._local_id_not_contains = local_id_not_contains

    @property
    def local_id_not_ends_with(self):
        """Gets the local_id_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The local_id_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_ends_with

    @local_id_not_ends_with.setter
    def local_id_not_ends_with(self, local_id_not_ends_with):
        """Sets the local_id_not_ends_with of this GraphWhereInput.


        :param local_id_not_ends_with: The local_id_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type local_id_not_ends_with: str
        """

        self._local_id_not_ends_with = local_id_not_ends_with

    @property
    def local_id_not_in(self):
        """Gets the local_id_not_in of this GraphWhereInput.  # noqa: E501


        :return: The local_id_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_not_in

    @local_id_not_in.setter
    def local_id_not_in(self, local_id_not_in):
        """Sets the local_id_not_in of this GraphWhereInput.


        :param local_id_not_in: The local_id_not_in of this GraphWhereInput.  # noqa: E501
        :type local_id_not_in: list[str]
        """

        self._local_id_not_in = local_id_not_in

    @property
    def local_id_not_starts_with(self):
        """Gets the local_id_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The local_id_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_starts_with

    @local_id_not_starts_with.setter
    def local_id_not_starts_with(self, local_id_not_starts_with):
        """Sets the local_id_not_starts_with of this GraphWhereInput.


        :param local_id_not_starts_with: The local_id_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type local_id_not_starts_with: str
        """

        self._local_id_not_starts_with = local_id_not_starts_with

    @property
    def local_id_starts_with(self):
        """Gets the local_id_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The local_id_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_starts_with

    @local_id_starts_with.setter
    def local_id_starts_with(self, local_id_starts_with):
        """Sets the local_id_starts_with of this GraphWhereInput.


        :param local_id_starts_with: The local_id_starts_with of this GraphWhereInput.  # noqa: E501
        :type local_id_starts_with: str
        """

        self._local_id_starts_with = local_id_starts_with

    @property
    def luns_every(self):
        """Gets the luns_every of this GraphWhereInput.  # noqa: E501


        :return: The luns_every of this GraphWhereInput.  # noqa: E501
        :rtype: IscsiLunWhereInput
        """
        return self._luns_every

    @luns_every.setter
    def luns_every(self, luns_every):
        """Sets the luns_every of this GraphWhereInput.


        :param luns_every: The luns_every of this GraphWhereInput.  # noqa: E501
        :type luns_every: IscsiLunWhereInput
        """

        self._luns_every = luns_every

    @property
    def luns_none(self):
        """Gets the luns_none of this GraphWhereInput.  # noqa: E501


        :return: The luns_none of this GraphWhereInput.  # noqa: E501
        :rtype: IscsiLunWhereInput
        """
        return self._luns_none

    @luns_none.setter
    def luns_none(self, luns_none):
        """Sets the luns_none of this GraphWhereInput.


        :param luns_none: The luns_none of this GraphWhereInput.  # noqa: E501
        :type luns_none: IscsiLunWhereInput
        """

        self._luns_none = luns_none

    @property
    def luns_some(self):
        """Gets the luns_some of this GraphWhereInput.  # noqa: E501


        :return: The luns_some of this GraphWhereInput.  # noqa: E501
        :rtype: IscsiLunWhereInput
        """
        return self._luns_some

    @luns_some.setter
    def luns_some(self, luns_some):
        """Sets the luns_some of this GraphWhereInput.


        :param luns_some: The luns_some of this GraphWhereInput.  # noqa: E501
        :type luns_some: IscsiLunWhereInput
        """

        self._luns_some = luns_some

    @property
    def metric_count(self):
        """Gets the metric_count of this GraphWhereInput.  # noqa: E501


        :return: The metric_count of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count

    @metric_count.setter
    def metric_count(self, metric_count):
        """Sets the metric_count of this GraphWhereInput.


        :param metric_count: The metric_count of this GraphWhereInput.  # noqa: E501
        :type metric_count: int
        """

        self._metric_count = metric_count

    @property
    def metric_count_gt(self):
        """Gets the metric_count_gt of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_gt of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count_gt

    @metric_count_gt.setter
    def metric_count_gt(self, metric_count_gt):
        """Sets the metric_count_gt of this GraphWhereInput.


        :param metric_count_gt: The metric_count_gt of this GraphWhereInput.  # noqa: E501
        :type metric_count_gt: int
        """

        self._metric_count_gt = metric_count_gt

    @property
    def metric_count_gte(self):
        """Gets the metric_count_gte of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_gte of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count_gte

    @metric_count_gte.setter
    def metric_count_gte(self, metric_count_gte):
        """Sets the metric_count_gte of this GraphWhereInput.


        :param metric_count_gte: The metric_count_gte of this GraphWhereInput.  # noqa: E501
        :type metric_count_gte: int
        """

        self._metric_count_gte = metric_count_gte

    @property
    def metric_count_in(self):
        """Gets the metric_count_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._metric_count_in

    @metric_count_in.setter
    def metric_count_in(self, metric_count_in):
        """Sets the metric_count_in of this GraphWhereInput.


        :param metric_count_in: The metric_count_in of this GraphWhereInput.  # noqa: E501
        :type metric_count_in: list[int]
        """

        self._metric_count_in = metric_count_in

    @property
    def metric_count_lt(self):
        """Gets the metric_count_lt of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_lt of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count_lt

    @metric_count_lt.setter
    def metric_count_lt(self, metric_count_lt):
        """Sets the metric_count_lt of this GraphWhereInput.


        :param metric_count_lt: The metric_count_lt of this GraphWhereInput.  # noqa: E501
        :type metric_count_lt: int
        """

        self._metric_count_lt = metric_count_lt

    @property
    def metric_count_lte(self):
        """Gets the metric_count_lte of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_lte of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count_lte

    @metric_count_lte.setter
    def metric_count_lte(self, metric_count_lte):
        """Sets the metric_count_lte of this GraphWhereInput.


        :param metric_count_lte: The metric_count_lte of this GraphWhereInput.  # noqa: E501
        :type metric_count_lte: int
        """

        self._metric_count_lte = metric_count_lte

    @property
    def metric_count_not(self):
        """Gets the metric_count_not of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_not of this GraphWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._metric_count_not

    @metric_count_not.setter
    def metric_count_not(self, metric_count_not):
        """Sets the metric_count_not of this GraphWhereInput.


        :param metric_count_not: The metric_count_not of this GraphWhereInput.  # noqa: E501
        :type metric_count_not: int
        """

        self._metric_count_not = metric_count_not

    @property
    def metric_count_not_in(self):
        """Gets the metric_count_not_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_count_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._metric_count_not_in

    @metric_count_not_in.setter
    def metric_count_not_in(self, metric_count_not_in):
        """Sets the metric_count_not_in of this GraphWhereInput.


        :param metric_count_not_in: The metric_count_not_in of this GraphWhereInput.  # noqa: E501
        :type metric_count_not_in: list[int]
        """

        self._metric_count_not_in = metric_count_not_in

    @property
    def metric_name(self):
        """Gets the metric_name of this GraphWhereInput.  # noqa: E501


        :return: The metric_name of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this GraphWhereInput.


        :param metric_name: The metric_name of this GraphWhereInput.  # noqa: E501
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def metric_name_contains(self):
        """Gets the metric_name_contains of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_contains

    @metric_name_contains.setter
    def metric_name_contains(self, metric_name_contains):
        """Sets the metric_name_contains of this GraphWhereInput.


        :param metric_name_contains: The metric_name_contains of this GraphWhereInput.  # noqa: E501
        :type metric_name_contains: str
        """

        self._metric_name_contains = metric_name_contains

    @property
    def metric_name_ends_with(self):
        """Gets the metric_name_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_ends_with

    @metric_name_ends_with.setter
    def metric_name_ends_with(self, metric_name_ends_with):
        """Sets the metric_name_ends_with of this GraphWhereInput.


        :param metric_name_ends_with: The metric_name_ends_with of this GraphWhereInput.  # noqa: E501
        :type metric_name_ends_with: str
        """

        self._metric_name_ends_with = metric_name_ends_with

    @property
    def metric_name_gt(self):
        """Gets the metric_name_gt of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_gt

    @metric_name_gt.setter
    def metric_name_gt(self, metric_name_gt):
        """Sets the metric_name_gt of this GraphWhereInput.


        :param metric_name_gt: The metric_name_gt of this GraphWhereInput.  # noqa: E501
        :type metric_name_gt: str
        """

        self._metric_name_gt = metric_name_gt

    @property
    def metric_name_gte(self):
        """Gets the metric_name_gte of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_gte

    @metric_name_gte.setter
    def metric_name_gte(self, metric_name_gte):
        """Sets the metric_name_gte of this GraphWhereInput.


        :param metric_name_gte: The metric_name_gte of this GraphWhereInput.  # noqa: E501
        :type metric_name_gte: str
        """

        self._metric_name_gte = metric_name_gte

    @property
    def metric_name_in(self):
        """Gets the metric_name_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._metric_name_in

    @metric_name_in.setter
    def metric_name_in(self, metric_name_in):
        """Sets the metric_name_in of this GraphWhereInput.


        :param metric_name_in: The metric_name_in of this GraphWhereInput.  # noqa: E501
        :type metric_name_in: list[str]
        """

        self._metric_name_in = metric_name_in

    @property
    def metric_name_lt(self):
        """Gets the metric_name_lt of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_lt

    @metric_name_lt.setter
    def metric_name_lt(self, metric_name_lt):
        """Sets the metric_name_lt of this GraphWhereInput.


        :param metric_name_lt: The metric_name_lt of this GraphWhereInput.  # noqa: E501
        :type metric_name_lt: str
        """

        self._metric_name_lt = metric_name_lt

    @property
    def metric_name_lte(self):
        """Gets the metric_name_lte of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_lte

    @metric_name_lte.setter
    def metric_name_lte(self, metric_name_lte):
        """Sets the metric_name_lte of this GraphWhereInput.


        :param metric_name_lte: The metric_name_lte of this GraphWhereInput.  # noqa: E501
        :type metric_name_lte: str
        """

        self._metric_name_lte = metric_name_lte

    @property
    def metric_name_not(self):
        """Gets the metric_name_not of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_not

    @metric_name_not.setter
    def metric_name_not(self, metric_name_not):
        """Sets the metric_name_not of this GraphWhereInput.


        :param metric_name_not: The metric_name_not of this GraphWhereInput.  # noqa: E501
        :type metric_name_not: str
        """

        self._metric_name_not = metric_name_not

    @property
    def metric_name_not_contains(self):
        """Gets the metric_name_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_not_contains

    @metric_name_not_contains.setter
    def metric_name_not_contains(self, metric_name_not_contains):
        """Sets the metric_name_not_contains of this GraphWhereInput.


        :param metric_name_not_contains: The metric_name_not_contains of this GraphWhereInput.  # noqa: E501
        :type metric_name_not_contains: str
        """

        self._metric_name_not_contains = metric_name_not_contains

    @property
    def metric_name_not_ends_with(self):
        """Gets the metric_name_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_not_ends_with

    @metric_name_not_ends_with.setter
    def metric_name_not_ends_with(self, metric_name_not_ends_with):
        """Sets the metric_name_not_ends_with of this GraphWhereInput.


        :param metric_name_not_ends_with: The metric_name_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type metric_name_not_ends_with: str
        """

        self._metric_name_not_ends_with = metric_name_not_ends_with

    @property
    def metric_name_not_in(self):
        """Gets the metric_name_not_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._metric_name_not_in

    @metric_name_not_in.setter
    def metric_name_not_in(self, metric_name_not_in):
        """Sets the metric_name_not_in of this GraphWhereInput.


        :param metric_name_not_in: The metric_name_not_in of this GraphWhereInput.  # noqa: E501
        :type metric_name_not_in: list[str]
        """

        self._metric_name_not_in = metric_name_not_in

    @property
    def metric_name_not_starts_with(self):
        """Gets the metric_name_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_not_starts_with

    @metric_name_not_starts_with.setter
    def metric_name_not_starts_with(self, metric_name_not_starts_with):
        """Sets the metric_name_not_starts_with of this GraphWhereInput.


        :param metric_name_not_starts_with: The metric_name_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type metric_name_not_starts_with: str
        """

        self._metric_name_not_starts_with = metric_name_not_starts_with

    @property
    def metric_name_starts_with(self):
        """Gets the metric_name_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The metric_name_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._metric_name_starts_with

    @metric_name_starts_with.setter
    def metric_name_starts_with(self, metric_name_starts_with):
        """Sets the metric_name_starts_with of this GraphWhereInput.


        :param metric_name_starts_with: The metric_name_starts_with of this GraphWhereInput.  # noqa: E501
        :type metric_name_starts_with: str
        """

        self._metric_name_starts_with = metric_name_starts_with

    @property
    def metric_type(self):
        """Gets the metric_type of this GraphWhereInput.  # noqa: E501


        :return: The metric_type of this GraphWhereInput.  # noqa: E501
        :rtype: MetricType
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this GraphWhereInput.


        :param metric_type: The metric_type of this GraphWhereInput.  # noqa: E501
        :type metric_type: MetricType
        """

        self._metric_type = metric_type

    @property
    def metric_type_in(self):
        """Gets the metric_type_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_type_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[MetricType]
        """
        return self._metric_type_in

    @metric_type_in.setter
    def metric_type_in(self, metric_type_in):
        """Sets the metric_type_in of this GraphWhereInput.


        :param metric_type_in: The metric_type_in of this GraphWhereInput.  # noqa: E501
        :type metric_type_in: list[MetricType]
        """

        self._metric_type_in = metric_type_in

    @property
    def metric_type_not(self):
        """Gets the metric_type_not of this GraphWhereInput.  # noqa: E501


        :return: The metric_type_not of this GraphWhereInput.  # noqa: E501
        :rtype: MetricType
        """
        return self._metric_type_not

    @metric_type_not.setter
    def metric_type_not(self, metric_type_not):
        """Sets the metric_type_not of this GraphWhereInput.


        :param metric_type_not: The metric_type_not of this GraphWhereInput.  # noqa: E501
        :type metric_type_not: MetricType
        """

        self._metric_type_not = metric_type_not

    @property
    def metric_type_not_in(self):
        """Gets the metric_type_not_in of this GraphWhereInput.  # noqa: E501


        :return: The metric_type_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[MetricType]
        """
        return self._metric_type_not_in

    @metric_type_not_in.setter
    def metric_type_not_in(self, metric_type_not_in):
        """Sets the metric_type_not_in of this GraphWhereInput.


        :param metric_type_not_in: The metric_type_not_in of this GraphWhereInput.  # noqa: E501
        :type metric_type_not_in: list[MetricType]
        """

        self._metric_type_not_in = metric_type_not_in

    @property
    def namespaces_every(self):
        """Gets the namespaces_every of this GraphWhereInput.  # noqa: E501


        :return: The namespaces_every of this GraphWhereInput.  # noqa: E501
        :rtype: NvmfNamespaceWhereInput
        """
        return self._namespaces_every

    @namespaces_every.setter
    def namespaces_every(self, namespaces_every):
        """Sets the namespaces_every of this GraphWhereInput.


        :param namespaces_every: The namespaces_every of this GraphWhereInput.  # noqa: E501
        :type namespaces_every: NvmfNamespaceWhereInput
        """

        self._namespaces_every = namespaces_every

    @property
    def namespaces_none(self):
        """Gets the namespaces_none of this GraphWhereInput.  # noqa: E501


        :return: The namespaces_none of this GraphWhereInput.  # noqa: E501
        :rtype: NvmfNamespaceWhereInput
        """
        return self._namespaces_none

    @namespaces_none.setter
    def namespaces_none(self, namespaces_none):
        """Sets the namespaces_none of this GraphWhereInput.


        :param namespaces_none: The namespaces_none of this GraphWhereInput.  # noqa: E501
        :type namespaces_none: NvmfNamespaceWhereInput
        """

        self._namespaces_none = namespaces_none

    @property
    def namespaces_some(self):
        """Gets the namespaces_some of this GraphWhereInput.  # noqa: E501


        :return: The namespaces_some of this GraphWhereInput.  # noqa: E501
        :rtype: NvmfNamespaceWhereInput
        """
        return self._namespaces_some

    @namespaces_some.setter
    def namespaces_some(self, namespaces_some):
        """Sets the namespaces_some of this GraphWhereInput.


        :param namespaces_some: The namespaces_some of this GraphWhereInput.  # noqa: E501
        :type namespaces_some: NvmfNamespaceWhereInput
        """

        self._namespaces_some = namespaces_some

    @property
    def network(self):
        """Gets the network of this GraphWhereInput.  # noqa: E501


        :return: The network of this GraphWhereInput.  # noqa: E501
        :rtype: NetworkType
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GraphWhereInput.


        :param network: The network of this GraphWhereInput.  # noqa: E501
        :type network: NetworkType
        """

        self._network = network

    @property
    def network_in(self):
        """Gets the network_in of this GraphWhereInput.  # noqa: E501


        :return: The network_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[NetworkType]
        """
        return self._network_in

    @network_in.setter
    def network_in(self, network_in):
        """Sets the network_in of this GraphWhereInput.


        :param network_in: The network_in of this GraphWhereInput.  # noqa: E501
        :type network_in: list[NetworkType]
        """

        self._network_in = network_in

    @property
    def network_not(self):
        """Gets the network_not of this GraphWhereInput.  # noqa: E501


        :return: The network_not of this GraphWhereInput.  # noqa: E501
        :rtype: NetworkType
        """
        return self._network_not

    @network_not.setter
    def network_not(self, network_not):
        """Sets the network_not of this GraphWhereInput.


        :param network_not: The network_not of this GraphWhereInput.  # noqa: E501
        :type network_not: NetworkType
        """

        self._network_not = network_not

    @property
    def network_not_in(self):
        """Gets the network_not_in of this GraphWhereInput.  # noqa: E501


        :return: The network_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[NetworkType]
        """
        return self._network_not_in

    @network_not_in.setter
    def network_not_in(self, network_not_in):
        """Sets the network_not_in of this GraphWhereInput.


        :param network_not_in: The network_not_in of this GraphWhereInput.  # noqa: E501
        :type network_not_in: list[NetworkType]
        """

        self._network_not_in = network_not_in

    @property
    def nics_every(self):
        """Gets the nics_every of this GraphWhereInput.  # noqa: E501


        :return: The nics_every of this GraphWhereInput.  # noqa: E501
        :rtype: NicWhereInput
        """
        return self._nics_every

    @nics_every.setter
    def nics_every(self, nics_every):
        """Sets the nics_every of this GraphWhereInput.


        :param nics_every: The nics_every of this GraphWhereInput.  # noqa: E501
        :type nics_every: NicWhereInput
        """

        self._nics_every = nics_every

    @property
    def nics_none(self):
        """Gets the nics_none of this GraphWhereInput.  # noqa: E501


        :return: The nics_none of this GraphWhereInput.  # noqa: E501
        :rtype: NicWhereInput
        """
        return self._nics_none

    @nics_none.setter
    def nics_none(self, nics_none):
        """Sets the nics_none of this GraphWhereInput.


        :param nics_none: The nics_none of this GraphWhereInput.  # noqa: E501
        :type nics_none: NicWhereInput
        """

        self._nics_none = nics_none

    @property
    def nics_some(self):
        """Gets the nics_some of this GraphWhereInput.  # noqa: E501


        :return: The nics_some of this GraphWhereInput.  # noqa: E501
        :rtype: NicWhereInput
        """
        return self._nics_some

    @nics_some.setter
    def nics_some(self, nics_some):
        """Sets the nics_some of this GraphWhereInput.


        :param nics_some: The nics_some of this GraphWhereInput.  # noqa: E501
        :type nics_some: NicWhereInput
        """

        self._nics_some = nics_some

    @property
    def resource_type(self):
        """Gets the resource_type of this GraphWhereInput.  # noqa: E501


        :return: The resource_type of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GraphWhereInput.


        :param resource_type: The resource_type of this GraphWhereInput.  # noqa: E501
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def resource_type_contains(self):
        """Gets the resource_type_contains of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_contains

    @resource_type_contains.setter
    def resource_type_contains(self, resource_type_contains):
        """Sets the resource_type_contains of this GraphWhereInput.


        :param resource_type_contains: The resource_type_contains of this GraphWhereInput.  # noqa: E501
        :type resource_type_contains: str
        """

        self._resource_type_contains = resource_type_contains

    @property
    def resource_type_ends_with(self):
        """Gets the resource_type_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_ends_with

    @resource_type_ends_with.setter
    def resource_type_ends_with(self, resource_type_ends_with):
        """Sets the resource_type_ends_with of this GraphWhereInput.


        :param resource_type_ends_with: The resource_type_ends_with of this GraphWhereInput.  # noqa: E501
        :type resource_type_ends_with: str
        """

        self._resource_type_ends_with = resource_type_ends_with

    @property
    def resource_type_gt(self):
        """Gets the resource_type_gt of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_gt

    @resource_type_gt.setter
    def resource_type_gt(self, resource_type_gt):
        """Sets the resource_type_gt of this GraphWhereInput.


        :param resource_type_gt: The resource_type_gt of this GraphWhereInput.  # noqa: E501
        :type resource_type_gt: str
        """

        self._resource_type_gt = resource_type_gt

    @property
    def resource_type_gte(self):
        """Gets the resource_type_gte of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_gte

    @resource_type_gte.setter
    def resource_type_gte(self, resource_type_gte):
        """Sets the resource_type_gte of this GraphWhereInput.


        :param resource_type_gte: The resource_type_gte of this GraphWhereInput.  # noqa: E501
        :type resource_type_gte: str
        """

        self._resource_type_gte = resource_type_gte

    @property
    def resource_type_in(self):
        """Gets the resource_type_in of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type_in

    @resource_type_in.setter
    def resource_type_in(self, resource_type_in):
        """Sets the resource_type_in of this GraphWhereInput.


        :param resource_type_in: The resource_type_in of this GraphWhereInput.  # noqa: E501
        :type resource_type_in: list[str]
        """

        self._resource_type_in = resource_type_in

    @property
    def resource_type_lt(self):
        """Gets the resource_type_lt of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_lt

    @resource_type_lt.setter
    def resource_type_lt(self, resource_type_lt):
        """Sets the resource_type_lt of this GraphWhereInput.


        :param resource_type_lt: The resource_type_lt of this GraphWhereInput.  # noqa: E501
        :type resource_type_lt: str
        """

        self._resource_type_lt = resource_type_lt

    @property
    def resource_type_lte(self):
        """Gets the resource_type_lte of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_lte

    @resource_type_lte.setter
    def resource_type_lte(self, resource_type_lte):
        """Sets the resource_type_lte of this GraphWhereInput.


        :param resource_type_lte: The resource_type_lte of this GraphWhereInput.  # noqa: E501
        :type resource_type_lte: str
        """

        self._resource_type_lte = resource_type_lte

    @property
    def resource_type_not(self):
        """Gets the resource_type_not of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_not

    @resource_type_not.setter
    def resource_type_not(self, resource_type_not):
        """Sets the resource_type_not of this GraphWhereInput.


        :param resource_type_not: The resource_type_not of this GraphWhereInput.  # noqa: E501
        :type resource_type_not: str
        """

        self._resource_type_not = resource_type_not

    @property
    def resource_type_not_contains(self):
        """Gets the resource_type_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_not_contains

    @resource_type_not_contains.setter
    def resource_type_not_contains(self, resource_type_not_contains):
        """Sets the resource_type_not_contains of this GraphWhereInput.


        :param resource_type_not_contains: The resource_type_not_contains of this GraphWhereInput.  # noqa: E501
        :type resource_type_not_contains: str
        """

        self._resource_type_not_contains = resource_type_not_contains

    @property
    def resource_type_not_ends_with(self):
        """Gets the resource_type_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_not_ends_with

    @resource_type_not_ends_with.setter
    def resource_type_not_ends_with(self, resource_type_not_ends_with):
        """Sets the resource_type_not_ends_with of this GraphWhereInput.


        :param resource_type_not_ends_with: The resource_type_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type resource_type_not_ends_with: str
        """

        self._resource_type_not_ends_with = resource_type_not_ends_with

    @property
    def resource_type_not_in(self):
        """Gets the resource_type_not_in of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type_not_in

    @resource_type_not_in.setter
    def resource_type_not_in(self, resource_type_not_in):
        """Sets the resource_type_not_in of this GraphWhereInput.


        :param resource_type_not_in: The resource_type_not_in of this GraphWhereInput.  # noqa: E501
        :type resource_type_not_in: list[str]
        """

        self._resource_type_not_in = resource_type_not_in

    @property
    def resource_type_not_starts_with(self):
        """Gets the resource_type_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_not_starts_with

    @resource_type_not_starts_with.setter
    def resource_type_not_starts_with(self, resource_type_not_starts_with):
        """Sets the resource_type_not_starts_with of this GraphWhereInput.


        :param resource_type_not_starts_with: The resource_type_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type resource_type_not_starts_with: str
        """

        self._resource_type_not_starts_with = resource_type_not_starts_with

    @property
    def resource_type_starts_with(self):
        """Gets the resource_type_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The resource_type_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_starts_with

    @resource_type_starts_with.setter
    def resource_type_starts_with(self, resource_type_starts_with):
        """Sets the resource_type_starts_with of this GraphWhereInput.


        :param resource_type_starts_with: The resource_type_starts_with of this GraphWhereInput.  # noqa: E501
        :type resource_type_starts_with: str
        """

        self._resource_type_starts_with = resource_type_starts_with

    @property
    def service(self):
        """Gets the service of this GraphWhereInput.  # noqa: E501


        :return: The service of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GraphWhereInput.


        :param service: The service of this GraphWhereInput.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def service_contains(self):
        """Gets the service_contains of this GraphWhereInput.  # noqa: E501


        :return: The service_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_contains

    @service_contains.setter
    def service_contains(self, service_contains):
        """Sets the service_contains of this GraphWhereInput.


        :param service_contains: The service_contains of this GraphWhereInput.  # noqa: E501
        :type service_contains: str
        """

        self._service_contains = service_contains

    @property
    def service_ends_with(self):
        """Gets the service_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The service_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_ends_with

    @service_ends_with.setter
    def service_ends_with(self, service_ends_with):
        """Sets the service_ends_with of this GraphWhereInput.


        :param service_ends_with: The service_ends_with of this GraphWhereInput.  # noqa: E501
        :type service_ends_with: str
        """

        self._service_ends_with = service_ends_with

    @property
    def service_gt(self):
        """Gets the service_gt of this GraphWhereInput.  # noqa: E501


        :return: The service_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_gt

    @service_gt.setter
    def service_gt(self, service_gt):
        """Sets the service_gt of this GraphWhereInput.


        :param service_gt: The service_gt of this GraphWhereInput.  # noqa: E501
        :type service_gt: str
        """

        self._service_gt = service_gt

    @property
    def service_gte(self):
        """Gets the service_gte of this GraphWhereInput.  # noqa: E501


        :return: The service_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_gte

    @service_gte.setter
    def service_gte(self, service_gte):
        """Sets the service_gte of this GraphWhereInput.


        :param service_gte: The service_gte of this GraphWhereInput.  # noqa: E501
        :type service_gte: str
        """

        self._service_gte = service_gte

    @property
    def service_in(self):
        """Gets the service_in of this GraphWhereInput.  # noqa: E501


        :return: The service_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_in

    @service_in.setter
    def service_in(self, service_in):
        """Sets the service_in of this GraphWhereInput.


        :param service_in: The service_in of this GraphWhereInput.  # noqa: E501
        :type service_in: list[str]
        """

        self._service_in = service_in

    @property
    def service_lt(self):
        """Gets the service_lt of this GraphWhereInput.  # noqa: E501


        :return: The service_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_lt

    @service_lt.setter
    def service_lt(self, service_lt):
        """Sets the service_lt of this GraphWhereInput.


        :param service_lt: The service_lt of this GraphWhereInput.  # noqa: E501
        :type service_lt: str
        """

        self._service_lt = service_lt

    @property
    def service_lte(self):
        """Gets the service_lte of this GraphWhereInput.  # noqa: E501


        :return: The service_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_lte

    @service_lte.setter
    def service_lte(self, service_lte):
        """Sets the service_lte of this GraphWhereInput.


        :param service_lte: The service_lte of this GraphWhereInput.  # noqa: E501
        :type service_lte: str
        """

        self._service_lte = service_lte

    @property
    def service_not(self):
        """Gets the service_not of this GraphWhereInput.  # noqa: E501


        :return: The service_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_not

    @service_not.setter
    def service_not(self, service_not):
        """Sets the service_not of this GraphWhereInput.


        :param service_not: The service_not of this GraphWhereInput.  # noqa: E501
        :type service_not: str
        """

        self._service_not = service_not

    @property
    def service_not_contains(self):
        """Gets the service_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The service_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_not_contains

    @service_not_contains.setter
    def service_not_contains(self, service_not_contains):
        """Sets the service_not_contains of this GraphWhereInput.


        :param service_not_contains: The service_not_contains of this GraphWhereInput.  # noqa: E501
        :type service_not_contains: str
        """

        self._service_not_contains = service_not_contains

    @property
    def service_not_ends_with(self):
        """Gets the service_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The service_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_not_ends_with

    @service_not_ends_with.setter
    def service_not_ends_with(self, service_not_ends_with):
        """Sets the service_not_ends_with of this GraphWhereInput.


        :param service_not_ends_with: The service_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type service_not_ends_with: str
        """

        self._service_not_ends_with = service_not_ends_with

    @property
    def service_not_in(self):
        """Gets the service_not_in of this GraphWhereInput.  # noqa: E501


        :return: The service_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_not_in

    @service_not_in.setter
    def service_not_in(self, service_not_in):
        """Sets the service_not_in of this GraphWhereInput.


        :param service_not_in: The service_not_in of this GraphWhereInput.  # noqa: E501
        :type service_not_in: list[str]
        """

        self._service_not_in = service_not_in

    @property
    def service_not_starts_with(self):
        """Gets the service_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The service_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_not_starts_with

    @service_not_starts_with.setter
    def service_not_starts_with(self, service_not_starts_with):
        """Sets the service_not_starts_with of this GraphWhereInput.


        :param service_not_starts_with: The service_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type service_not_starts_with: str
        """

        self._service_not_starts_with = service_not_starts_with

    @property
    def service_starts_with(self):
        """Gets the service_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The service_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._service_starts_with

    @service_starts_with.setter
    def service_starts_with(self, service_starts_with):
        """Sets the service_starts_with of this GraphWhereInput.


        :param service_starts_with: The service_starts_with of this GraphWhereInput.  # noqa: E501
        :type service_starts_with: str
        """

        self._service_starts_with = service_starts_with

    @property
    def title(self):
        """Gets the title of this GraphWhereInput.  # noqa: E501


        :return: The title of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GraphWhereInput.


        :param title: The title of this GraphWhereInput.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def title_contains(self):
        """Gets the title_contains of this GraphWhereInput.  # noqa: E501


        :return: The title_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_contains

    @title_contains.setter
    def title_contains(self, title_contains):
        """Sets the title_contains of this GraphWhereInput.


        :param title_contains: The title_contains of this GraphWhereInput.  # noqa: E501
        :type title_contains: str
        """

        self._title_contains = title_contains

    @property
    def title_ends_with(self):
        """Gets the title_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The title_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_ends_with

    @title_ends_with.setter
    def title_ends_with(self, title_ends_with):
        """Sets the title_ends_with of this GraphWhereInput.


        :param title_ends_with: The title_ends_with of this GraphWhereInput.  # noqa: E501
        :type title_ends_with: str
        """

        self._title_ends_with = title_ends_with

    @property
    def title_gt(self):
        """Gets the title_gt of this GraphWhereInput.  # noqa: E501


        :return: The title_gt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_gt

    @title_gt.setter
    def title_gt(self, title_gt):
        """Sets the title_gt of this GraphWhereInput.


        :param title_gt: The title_gt of this GraphWhereInput.  # noqa: E501
        :type title_gt: str
        """

        self._title_gt = title_gt

    @property
    def title_gte(self):
        """Gets the title_gte of this GraphWhereInput.  # noqa: E501


        :return: The title_gte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_gte

    @title_gte.setter
    def title_gte(self, title_gte):
        """Sets the title_gte of this GraphWhereInput.


        :param title_gte: The title_gte of this GraphWhereInput.  # noqa: E501
        :type title_gte: str
        """

        self._title_gte = title_gte

    @property
    def title_in(self):
        """Gets the title_in of this GraphWhereInput.  # noqa: E501


        :return: The title_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._title_in

    @title_in.setter
    def title_in(self, title_in):
        """Sets the title_in of this GraphWhereInput.


        :param title_in: The title_in of this GraphWhereInput.  # noqa: E501
        :type title_in: list[str]
        """

        self._title_in = title_in

    @property
    def title_lt(self):
        """Gets the title_lt of this GraphWhereInput.  # noqa: E501


        :return: The title_lt of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_lt

    @title_lt.setter
    def title_lt(self, title_lt):
        """Sets the title_lt of this GraphWhereInput.


        :param title_lt: The title_lt of this GraphWhereInput.  # noqa: E501
        :type title_lt: str
        """

        self._title_lt = title_lt

    @property
    def title_lte(self):
        """Gets the title_lte of this GraphWhereInput.  # noqa: E501


        :return: The title_lte of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_lte

    @title_lte.setter
    def title_lte(self, title_lte):
        """Sets the title_lte of this GraphWhereInput.


        :param title_lte: The title_lte of this GraphWhereInput.  # noqa: E501
        :type title_lte: str
        """

        self._title_lte = title_lte

    @property
    def title_not(self):
        """Gets the title_not of this GraphWhereInput.  # noqa: E501


        :return: The title_not of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_not

    @title_not.setter
    def title_not(self, title_not):
        """Sets the title_not of this GraphWhereInput.


        :param title_not: The title_not of this GraphWhereInput.  # noqa: E501
        :type title_not: str
        """

        self._title_not = title_not

    @property
    def title_not_contains(self):
        """Gets the title_not_contains of this GraphWhereInput.  # noqa: E501


        :return: The title_not_contains of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_not_contains

    @title_not_contains.setter
    def title_not_contains(self, title_not_contains):
        """Sets the title_not_contains of this GraphWhereInput.


        :param title_not_contains: The title_not_contains of this GraphWhereInput.  # noqa: E501
        :type title_not_contains: str
        """

        self._title_not_contains = title_not_contains

    @property
    def title_not_ends_with(self):
        """Gets the title_not_ends_with of this GraphWhereInput.  # noqa: E501


        :return: The title_not_ends_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_not_ends_with

    @title_not_ends_with.setter
    def title_not_ends_with(self, title_not_ends_with):
        """Sets the title_not_ends_with of this GraphWhereInput.


        :param title_not_ends_with: The title_not_ends_with of this GraphWhereInput.  # noqa: E501
        :type title_not_ends_with: str
        """

        self._title_not_ends_with = title_not_ends_with

    @property
    def title_not_in(self):
        """Gets the title_not_in of this GraphWhereInput.  # noqa: E501


        :return: The title_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._title_not_in

    @title_not_in.setter
    def title_not_in(self, title_not_in):
        """Sets the title_not_in of this GraphWhereInput.


        :param title_not_in: The title_not_in of this GraphWhereInput.  # noqa: E501
        :type title_not_in: list[str]
        """

        self._title_not_in = title_not_in

    @property
    def title_not_starts_with(self):
        """Gets the title_not_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The title_not_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_not_starts_with

    @title_not_starts_with.setter
    def title_not_starts_with(self, title_not_starts_with):
        """Sets the title_not_starts_with of this GraphWhereInput.


        :param title_not_starts_with: The title_not_starts_with of this GraphWhereInput.  # noqa: E501
        :type title_not_starts_with: str
        """

        self._title_not_starts_with = title_not_starts_with

    @property
    def title_starts_with(self):
        """Gets the title_starts_with of this GraphWhereInput.  # noqa: E501


        :return: The title_starts_with of this GraphWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._title_starts_with

    @title_starts_with.setter
    def title_starts_with(self, title_starts_with):
        """Sets the title_starts_with of this GraphWhereInput.


        :param title_starts_with: The title_starts_with of this GraphWhereInput.  # noqa: E501
        :type title_starts_with: str
        """

        self._title_starts_with = title_starts_with

    @property
    def type(self):
        """Gets the type of this GraphWhereInput.  # noqa: E501


        :return: The type of this GraphWhereInput.  # noqa: E501
        :rtype: GraphType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GraphWhereInput.


        :param type: The type of this GraphWhereInput.  # noqa: E501
        :type type: GraphType
        """

        self._type = type

    @property
    def type_in(self):
        """Gets the type_in of this GraphWhereInput.  # noqa: E501


        :return: The type_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[GraphType]
        """
        return self._type_in

    @type_in.setter
    def type_in(self, type_in):
        """Sets the type_in of this GraphWhereInput.


        :param type_in: The type_in of this GraphWhereInput.  # noqa: E501
        :type type_in: list[GraphType]
        """

        self._type_in = type_in

    @property
    def type_not(self):
        """Gets the type_not of this GraphWhereInput.  # noqa: E501


        :return: The type_not of this GraphWhereInput.  # noqa: E501
        :rtype: GraphType
        """
        return self._type_not

    @type_not.setter
    def type_not(self, type_not):
        """Sets the type_not of this GraphWhereInput.


        :param type_not: The type_not of this GraphWhereInput.  # noqa: E501
        :type type_not: GraphType
        """

        self._type_not = type_not

    @property
    def type_not_in(self):
        """Gets the type_not_in of this GraphWhereInput.  # noqa: E501


        :return: The type_not_in of this GraphWhereInput.  # noqa: E501
        :rtype: list[GraphType]
        """
        return self._type_not_in

    @type_not_in.setter
    def type_not_in(self, type_not_in):
        """Sets the type_not_in of this GraphWhereInput.


        :param type_not_in: The type_not_in of this GraphWhereInput.  # noqa: E501
        :type type_not_in: list[GraphType]
        """

        self._type_not_in = type_not_in

    @property
    def view(self):
        """Gets the view of this GraphWhereInput.  # noqa: E501


        :return: The view of this GraphWhereInput.  # noqa: E501
        :rtype: ViewWhereInput
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this GraphWhereInput.


        :param view: The view of this GraphWhereInput.  # noqa: E501
        :type view: ViewWhereInput
        """

        self._view = view

    @property
    def vm_nics_every(self):
        """Gets the vm_nics_every of this GraphWhereInput.  # noqa: E501


        :return: The vm_nics_every of this GraphWhereInput.  # noqa: E501
        :rtype: VmNicWhereInput
        """
        return self._vm_nics_every

    @vm_nics_every.setter
    def vm_nics_every(self, vm_nics_every):
        """Sets the vm_nics_every of this GraphWhereInput.


        :param vm_nics_every: The vm_nics_every of this GraphWhereInput.  # noqa: E501
        :type vm_nics_every: VmNicWhereInput
        """

        self._vm_nics_every = vm_nics_every

    @property
    def vm_nics_none(self):
        """Gets the vm_nics_none of this GraphWhereInput.  # noqa: E501


        :return: The vm_nics_none of this GraphWhereInput.  # noqa: E501
        :rtype: VmNicWhereInput
        """
        return self._vm_nics_none

    @vm_nics_none.setter
    def vm_nics_none(self, vm_nics_none):
        """Sets the vm_nics_none of this GraphWhereInput.


        :param vm_nics_none: The vm_nics_none of this GraphWhereInput.  # noqa: E501
        :type vm_nics_none: VmNicWhereInput
        """

        self._vm_nics_none = vm_nics_none

    @property
    def vm_nics_some(self):
        """Gets the vm_nics_some of this GraphWhereInput.  # noqa: E501


        :return: The vm_nics_some of this GraphWhereInput.  # noqa: E501
        :rtype: VmNicWhereInput
        """
        return self._vm_nics_some

    @vm_nics_some.setter
    def vm_nics_some(self, vm_nics_some):
        """Sets the vm_nics_some of this GraphWhereInput.


        :param vm_nics_some: The vm_nics_some of this GraphWhereInput.  # noqa: E501
        :type vm_nics_some: VmNicWhereInput
        """

        self._vm_nics_some = vm_nics_some

    @property
    def vm_volumes_every(self):
        """Gets the vm_volumes_every of this GraphWhereInput.  # noqa: E501


        :return: The vm_volumes_every of this GraphWhereInput.  # noqa: E501
        :rtype: VmVolumeWhereInput
        """
        return self._vm_volumes_every

    @vm_volumes_every.setter
    def vm_volumes_every(self, vm_volumes_every):
        """Sets the vm_volumes_every of this GraphWhereInput.


        :param vm_volumes_every: The vm_volumes_every of this GraphWhereInput.  # noqa: E501
        :type vm_volumes_every: VmVolumeWhereInput
        """

        self._vm_volumes_every = vm_volumes_every

    @property
    def vm_volumes_none(self):
        """Gets the vm_volumes_none of this GraphWhereInput.  # noqa: E501


        :return: The vm_volumes_none of this GraphWhereInput.  # noqa: E501
        :rtype: VmVolumeWhereInput
        """
        return self._vm_volumes_none

    @vm_volumes_none.setter
    def vm_volumes_none(self, vm_volumes_none):
        """Sets the vm_volumes_none of this GraphWhereInput.


        :param vm_volumes_none: The vm_volumes_none of this GraphWhereInput.  # noqa: E501
        :type vm_volumes_none: VmVolumeWhereInput
        """

        self._vm_volumes_none = vm_volumes_none

    @property
    def vm_volumes_some(self):
        """Gets the vm_volumes_some of this GraphWhereInput.  # noqa: E501


        :return: The vm_volumes_some of this GraphWhereInput.  # noqa: E501
        :rtype: VmVolumeWhereInput
        """
        return self._vm_volumes_some

    @vm_volumes_some.setter
    def vm_volumes_some(self, vm_volumes_some):
        """Sets the vm_volumes_some of this GraphWhereInput.


        :param vm_volumes_some: The vm_volumes_some of this GraphWhereInput.  # noqa: E501
        :type vm_volumes_some: VmVolumeWhereInput
        """

        self._vm_volumes_some = vm_volumes_some

    @property
    def vms_every(self):
        """Gets the vms_every of this GraphWhereInput.  # noqa: E501


        :return: The vms_every of this GraphWhereInput.  # noqa: E501
        :rtype: VmWhereInput
        """
        return self._vms_every

    @vms_every.setter
    def vms_every(self, vms_every):
        """Sets the vms_every of this GraphWhereInput.


        :param vms_every: The vms_every of this GraphWhereInput.  # noqa: E501
        :type vms_every: VmWhereInput
        """

        self._vms_every = vms_every

    @property
    def vms_none(self):
        """Gets the vms_none of this GraphWhereInput.  # noqa: E501


        :return: The vms_none of this GraphWhereInput.  # noqa: E501
        :rtype: VmWhereInput
        """
        return self._vms_none

    @vms_none.setter
    def vms_none(self, vms_none):
        """Sets the vms_none of this GraphWhereInput.


        :param vms_none: The vms_none of this GraphWhereInput.  # noqa: E501
        :type vms_none: VmWhereInput
        """

        self._vms_none = vms_none

    @property
    def vms_some(self):
        """Gets the vms_some of this GraphWhereInput.  # noqa: E501


        :return: The vms_some of this GraphWhereInput.  # noqa: E501
        :rtype: VmWhereInput
        """
        return self._vms_some

    @vms_some.setter
    def vms_some(self, vms_some):
        """Sets the vms_some of this GraphWhereInput.


        :param vms_some: The vms_some of this GraphWhereInput.  # noqa: E501
        :type vms_some: VmWhereInput
        """

        self._vms_some = vms_some

    @property
    def witnesses_every(self):
        """Gets the witnesses_every of this GraphWhereInput.  # noqa: E501


        :return: The witnesses_every of this GraphWhereInput.  # noqa: E501
        :rtype: WitnessWhereInput
        """
        return self._witnesses_every

    @witnesses_every.setter
    def witnesses_every(self, witnesses_every):
        """Sets the witnesses_every of this GraphWhereInput.


        :param witnesses_every: The witnesses_every of this GraphWhereInput.  # noqa: E501
        :type witnesses_every: WitnessWhereInput
        """

        self._witnesses_every = witnesses_every

    @property
    def witnesses_none(self):
        """Gets the witnesses_none of this GraphWhereInput.  # noqa: E501


        :return: The witnesses_none of this GraphWhereInput.  # noqa: E501
        :rtype: WitnessWhereInput
        """
        return self._witnesses_none

    @witnesses_none.setter
    def witnesses_none(self, witnesses_none):
        """Sets the witnesses_none of this GraphWhereInput.


        :param witnesses_none: The witnesses_none of this GraphWhereInput.  # noqa: E501
        :type witnesses_none: WitnessWhereInput
        """

        self._witnesses_none = witnesses_none

    @property
    def witnesses_some(self):
        """Gets the witnesses_some of this GraphWhereInput.  # noqa: E501


        :return: The witnesses_some of this GraphWhereInput.  # noqa: E501
        :rtype: WitnessWhereInput
        """
        return self._witnesses_some

    @witnesses_some.setter
    def witnesses_some(self, witnesses_some):
        """Sets the witnesses_some of this GraphWhereInput.


        :param witnesses_some: The witnesses_some of this GraphWhereInput.  # noqa: E501
        :type witnesses_some: WitnessWhereInput
        """

        self._witnesses_some = witnesses_some

    @property
    def zones_every(self):
        """Gets the zones_every of this GraphWhereInput.  # noqa: E501


        :return: The zones_every of this GraphWhereInput.  # noqa: E501
        :rtype: ZoneWhereInput
        """
        return self._zones_every

    @zones_every.setter
    def zones_every(self, zones_every):
        """Sets the zones_every of this GraphWhereInput.


        :param zones_every: The zones_every of this GraphWhereInput.  # noqa: E501
        :type zones_every: ZoneWhereInput
        """

        self._zones_every = zones_every

    @property
    def zones_none(self):
        """Gets the zones_none of this GraphWhereInput.  # noqa: E501


        :return: The zones_none of this GraphWhereInput.  # noqa: E501
        :rtype: ZoneWhereInput
        """
        return self._zones_none

    @zones_none.setter
    def zones_none(self, zones_none):
        """Sets the zones_none of this GraphWhereInput.


        :param zones_none: The zones_none of this GraphWhereInput.  # noqa: E501
        :type zones_none: ZoneWhereInput
        """

        self._zones_none = zones_none

    @property
    def zones_some(self):
        """Gets the zones_some of this GraphWhereInput.  # noqa: E501


        :return: The zones_some of this GraphWhereInput.  # noqa: E501
        :rtype: ZoneWhereInput
        """
        return self._zones_some

    @zones_some.setter
    def zones_some(self, zones_some):
        """Sets the zones_some of this GraphWhereInput.


        :param zones_some: The zones_some of this GraphWhereInput.  # noqa: E501
        :type zones_some: ZoneWhereInput
        """

        self._zones_some = zones_some

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphWhereInput):
            return True

        return self.to_dict() != other.to_dict()
