# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class SnmpTrapReceiverOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AUTH_PASS_PHRASE_ASC = "auth_pass_phrase_ASC"
    AUTH_PASS_PHRASE_DESC = "auth_pass_phrase_DESC"
    AUTH_PROTOCOL_ASC = "auth_protocol_ASC"
    AUTH_PROTOCOL_DESC = "auth_protocol_DESC"
    COMMUNITY_ASC = "community_ASC"
    COMMUNITY_DESC = "community_DESC"
    DISABLED_ASC = "disabled_ASC"
    DISABLED_DESC = "disabled_DESC"
    ENGINE_ID_ASC = "engine_id_ASC"
    ENGINE_ID_DESC = "engine_id_DESC"
    ENTITYASYNCSTATUS_ASC = "entityAsyncStatus_ASC"
    ENTITYASYNCSTATUS_DESC = "entityAsyncStatus_DESC"
    HOST_ASC = "host_ASC"
    HOST_DESC = "host_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    INFORM_ASC = "inform_ASC"
    INFORM_DESC = "inform_DESC"
    LANGUAGE_CODE_ASC = "language_code_ASC"
    LANGUAGE_CODE_DESC = "language_code_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    NAME_ASC = "name_ASC"
    NAME_DESC = "name_DESC"
    PORT_ASC = "port_ASC"
    PORT_DESC = "port_DESC"
    PRIVACY_PASS_PHRASE_ASC = "privacy_pass_phrase_ASC"
    PRIVACY_PASS_PHRASE_DESC = "privacy_pass_phrase_DESC"
    PRIVACY_PROTOCOL_ASC = "privacy_protocol_ASC"
    PRIVACY_PROTOCOL_DESC = "privacy_protocol_DESC"
    PROTOCOL_ASC = "protocol_ASC"
    PROTOCOL_DESC = "protocol_DESC"
    USERNAME_ASC = "username_ASC"
    USERNAME_DESC = "username_DESC"
    VERSION_ASC = "version_ASC"
    VERSION_DESC = "version_DESC"

    allowable_values = [AUTH_PASS_PHRASE_ASC, AUTH_PASS_PHRASE_DESC, AUTH_PROTOCOL_ASC, AUTH_PROTOCOL_DESC, COMMUNITY_ASC, COMMUNITY_DESC, DISABLED_ASC, DISABLED_DESC, ENGINE_ID_ASC, ENGINE_ID_DESC, ENTITYASYNCSTATUS_ASC, ENTITYASYNCSTATUS_DESC, HOST_ASC, HOST_DESC, ID_ASC, ID_DESC, INFORM_ASC, INFORM_DESC, LANGUAGE_CODE_ASC, LANGUAGE_CODE_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, NAME_ASC, NAME_DESC, PORT_ASC, PORT_DESC, PRIVACY_PASS_PHRASE_ASC, PRIVACY_PASS_PHRASE_DESC, PRIVACY_PROTOCOL_ASC, PRIVACY_PROTOCOL_DESC, PROTOCOL_ASC, PROTOCOL_DESC, USERNAME_ASC, USERNAME_DESC, VERSION_ASC, VERSION_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """SnmpTrapReceiverOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpTrapReceiverOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnmpTrapReceiverOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
