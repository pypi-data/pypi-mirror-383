# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class IscsiLun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_initiators': 'str',
        'assigned_size': 'int',
        'bps': 'int',
        'bps_max': 'int',
        'bps_max_length': 'int',
        'bps_rd': 'int',
        'bps_rd_max': 'int',
        'bps_rd_max_length': 'int',
        'bps_wr': 'int',
        'bps_wr_max': 'int',
        'bps_wr_max_length': 'int',
        'business_host_groups': 'list[NestedBusinessHostGroup]',
        'business_host_is_same_with_parent': 'bool',
        'business_hosts': 'list[NestedBusinessHost]',
        'configuration_method': 'ConfigurationMethod',
        'consistency_group': 'NestedConsistencyGroup',
        'downgraded_prioritized_space': 'int',
        'ec_k': 'int',
        'ec_m': 'int',
        'encrypt_method': 'EncryptMethod',
        'entity_async_status': 'EntityAsyncStatus',
        'id': 'str',
        'io_size': 'int',
        'iops': 'int',
        'iops_max': 'int',
        'iops_max_length': 'int',
        'iops_rd': 'int',
        'iops_rd_max': 'int',
        'iops_rd_max_length': 'int',
        'iops_wr': 'int',
        'iops_wr_max': 'int',
        'iops_wr_max_length': 'int',
        'iscsi_target': 'NestedIscsiTarget',
        'labels': 'list[NestedLabel]',
        'local_created_at': 'str',
        'local_id': 'str',
        'lun_id': 'int',
        'name': 'str',
        'prioritized': 'bool',
        'replica_num': 'int',
        'replication_plans': 'list[NestedReplicationPlan]',
        'resiliency_type': 'ResiliencyType',
        'shared_size': 'int',
        'snapshot_num': 'int',
        'snapshot_plans': 'list[NestedSnapshotPlan]',
        'stripe_num': 'int',
        'stripe_size': 'int',
        'thin_provision': 'bool',
        'unique_logical_size': 'float',
        'unique_size': 'int',
        'zbs_volume_id': 'str'
    }

    attribute_map = {
        'allowed_initiators': 'allowed_initiators',
        'assigned_size': 'assigned_size',
        'bps': 'bps',
        'bps_max': 'bps_max',
        'bps_max_length': 'bps_max_length',
        'bps_rd': 'bps_rd',
        'bps_rd_max': 'bps_rd_max',
        'bps_rd_max_length': 'bps_rd_max_length',
        'bps_wr': 'bps_wr',
        'bps_wr_max': 'bps_wr_max',
        'bps_wr_max_length': 'bps_wr_max_length',
        'business_host_groups': 'business_host_groups',
        'business_host_is_same_with_parent': 'business_host_is_same_with_parent',
        'business_hosts': 'business_hosts',
        'configuration_method': 'configuration_method',
        'consistency_group': 'consistency_group',
        'downgraded_prioritized_space': 'downgraded_prioritized_space',
        'ec_k': 'ec_k',
        'ec_m': 'ec_m',
        'encrypt_method': 'encrypt_method',
        'entity_async_status': 'entityAsyncStatus',
        'id': 'id',
        'io_size': 'io_size',
        'iops': 'iops',
        'iops_max': 'iops_max',
        'iops_max_length': 'iops_max_length',
        'iops_rd': 'iops_rd',
        'iops_rd_max': 'iops_rd_max',
        'iops_rd_max_length': 'iops_rd_max_length',
        'iops_wr': 'iops_wr',
        'iops_wr_max': 'iops_wr_max',
        'iops_wr_max_length': 'iops_wr_max_length',
        'iscsi_target': 'iscsi_target',
        'labels': 'labels',
        'local_created_at': 'local_created_at',
        'local_id': 'local_id',
        'lun_id': 'lun_id',
        'name': 'name',
        'prioritized': 'prioritized',
        'replica_num': 'replica_num',
        'replication_plans': 'replication_plans',
        'resiliency_type': 'resiliency_type',
        'shared_size': 'shared_size',
        'snapshot_num': 'snapshot_num',
        'snapshot_plans': 'snapshot_plans',
        'stripe_num': 'stripe_num',
        'stripe_size': 'stripe_size',
        'thin_provision': 'thin_provision',
        'unique_logical_size': 'unique_logical_size',
        'unique_size': 'unique_size',
        'zbs_volume_id': 'zbs_volume_id'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """IscsiLun - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._allowed_initiators = None
        self._assigned_size = None
        self._bps = None
        self._bps_max = None
        self._bps_max_length = None
        self._bps_rd = None
        self._bps_rd_max = None
        self._bps_rd_max_length = None
        self._bps_wr = None
        self._bps_wr_max = None
        self._bps_wr_max_length = None
        self._business_host_groups = None
        self._business_host_is_same_with_parent = None
        self._business_hosts = None
        self._configuration_method = None
        self._consistency_group = None
        self._downgraded_prioritized_space = None
        self._ec_k = None
        self._ec_m = None
        self._encrypt_method = None
        self._entity_async_status = None
        self._id = None
        self._io_size = None
        self._iops = None
        self._iops_max = None
        self._iops_max_length = None
        self._iops_rd = None
        self._iops_rd_max = None
        self._iops_rd_max_length = None
        self._iops_wr = None
        self._iops_wr_max = None
        self._iops_wr_max_length = None
        self._iscsi_target = None
        self._labels = None
        self._local_created_at = None
        self._local_id = None
        self._lun_id = None
        self._name = None
        self._prioritized = None
        self._replica_num = None
        self._replication_plans = None
        self._resiliency_type = None
        self._shared_size = None
        self._snapshot_num = None
        self._snapshot_plans = None
        self._stripe_num = None
        self._stripe_size = None
        self._thin_provision = None
        self._unique_logical_size = None
        self._unique_size = None
        self._zbs_volume_id = None
        self.discriminator = None

        if "allowed_initiators" in kwargs:
            self.allowed_initiators = kwargs["allowed_initiators"]
        if "assigned_size" in kwargs:
            self.assigned_size = kwargs["assigned_size"]
        if "bps" in kwargs:
            self.bps = kwargs["bps"]
        if "bps_max" in kwargs:
            self.bps_max = kwargs["bps_max"]
        if "bps_max_length" in kwargs:
            self.bps_max_length = kwargs["bps_max_length"]
        if "bps_rd" in kwargs:
            self.bps_rd = kwargs["bps_rd"]
        if "bps_rd_max" in kwargs:
            self.bps_rd_max = kwargs["bps_rd_max"]
        if "bps_rd_max_length" in kwargs:
            self.bps_rd_max_length = kwargs["bps_rd_max_length"]
        if "bps_wr" in kwargs:
            self.bps_wr = kwargs["bps_wr"]
        if "bps_wr_max" in kwargs:
            self.bps_wr_max = kwargs["bps_wr_max"]
        if "bps_wr_max_length" in kwargs:
            self.bps_wr_max_length = kwargs["bps_wr_max_length"]
        self.business_host_groups = kwargs.get("business_host_groups", None)
        self.business_host_is_same_with_parent = kwargs.get("business_host_is_same_with_parent", None)
        self.business_hosts = kwargs.get("business_hosts", None)
        self.configuration_method = kwargs.get("configuration_method", None)
        self.consistency_group = kwargs.get("consistency_group", None)
        self.downgraded_prioritized_space = kwargs.get("downgraded_prioritized_space", None)
        self.ec_k = kwargs.get("ec_k", None)
        self.ec_m = kwargs.get("ec_m", None)
        self.encrypt_method = kwargs.get("encrypt_method", None)
        self.entity_async_status = kwargs.get("entity_async_status", None)
        if "id" in kwargs:
            self.id = kwargs["id"]
        if "io_size" in kwargs:
            self.io_size = kwargs["io_size"]
        if "iops" in kwargs:
            self.iops = kwargs["iops"]
        if "iops_max" in kwargs:
            self.iops_max = kwargs["iops_max"]
        if "iops_max_length" in kwargs:
            self.iops_max_length = kwargs["iops_max_length"]
        if "iops_rd" in kwargs:
            self.iops_rd = kwargs["iops_rd"]
        if "iops_rd_max" in kwargs:
            self.iops_rd_max = kwargs["iops_rd_max"]
        if "iops_rd_max_length" in kwargs:
            self.iops_rd_max_length = kwargs["iops_rd_max_length"]
        if "iops_wr" in kwargs:
            self.iops_wr = kwargs["iops_wr"]
        if "iops_wr_max" in kwargs:
            self.iops_wr_max = kwargs["iops_wr_max"]
        if "iops_wr_max_length" in kwargs:
            self.iops_wr_max_length = kwargs["iops_wr_max_length"]
        if "iscsi_target" in kwargs:
            self.iscsi_target = kwargs["iscsi_target"]
        self.labels = kwargs.get("labels", None)
        if "local_created_at" in kwargs:
            self.local_created_at = kwargs["local_created_at"]
        if "local_id" in kwargs:
            self.local_id = kwargs["local_id"]
        if "lun_id" in kwargs:
            self.lun_id = kwargs["lun_id"]
        if "name" in kwargs:
            self.name = kwargs["name"]
        self.prioritized = kwargs.get("prioritized", None)
        if "replica_num" in kwargs:
            self.replica_num = kwargs["replica_num"]
        self.replication_plans = kwargs.get("replication_plans", None)
        self.resiliency_type = kwargs.get("resiliency_type", None)
        if "shared_size" in kwargs:
            self.shared_size = kwargs["shared_size"]
        if "snapshot_num" in kwargs:
            self.snapshot_num = kwargs["snapshot_num"]
        self.snapshot_plans = kwargs.get("snapshot_plans", None)
        if "stripe_num" in kwargs:
            self.stripe_num = kwargs["stripe_num"]
        if "stripe_size" in kwargs:
            self.stripe_size = kwargs["stripe_size"]
        if "thin_provision" in kwargs:
            self.thin_provision = kwargs["thin_provision"]
        self.unique_logical_size = kwargs.get("unique_logical_size", None)
        if "unique_size" in kwargs:
            self.unique_size = kwargs["unique_size"]
        if "zbs_volume_id" in kwargs:
            self.zbs_volume_id = kwargs["zbs_volume_id"]

    @property
    def allowed_initiators(self):
        """Gets the allowed_initiators of this IscsiLun.  # noqa: E501


        :return: The allowed_initiators of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._allowed_initiators

    @allowed_initiators.setter
    def allowed_initiators(self, allowed_initiators):
        """Sets the allowed_initiators of this IscsiLun.


        :param allowed_initiators: The allowed_initiators of this IscsiLun.  # noqa: E501
        :type allowed_initiators: str
        """
        if self.local_vars_configuration.client_side_validation and allowed_initiators is None:  # noqa: E501
            raise ValueError("Invalid value for `allowed_initiators`, must not be `None`")  # noqa: E501

        self._allowed_initiators = allowed_initiators

    @property
    def assigned_size(self):
        """Gets the assigned_size of this IscsiLun.  # noqa: E501


        :return: The assigned_size of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._assigned_size

    @assigned_size.setter
    def assigned_size(self, assigned_size):
        """Sets the assigned_size of this IscsiLun.


        :param assigned_size: The assigned_size of this IscsiLun.  # noqa: E501
        :type assigned_size: int
        """
        if self.local_vars_configuration.client_side_validation and assigned_size is None:  # noqa: E501
            raise ValueError("Invalid value for `assigned_size`, must not be `None`")  # noqa: E501

        self._assigned_size = assigned_size

    @property
    def bps(self):
        """Gets the bps of this IscsiLun.  # noqa: E501


        :return: The bps of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps

    @bps.setter
    def bps(self, bps):
        """Sets the bps of this IscsiLun.


        :param bps: The bps of this IscsiLun.  # noqa: E501
        :type bps: int
        """
        if self.local_vars_configuration.client_side_validation and bps is None:  # noqa: E501
            raise ValueError("Invalid value for `bps`, must not be `None`")  # noqa: E501

        self._bps = bps

    @property
    def bps_max(self):
        """Gets the bps_max of this IscsiLun.  # noqa: E501


        :return: The bps_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_max

    @bps_max.setter
    def bps_max(self, bps_max):
        """Sets the bps_max of this IscsiLun.


        :param bps_max: The bps_max of this IscsiLun.  # noqa: E501
        :type bps_max: int
        """
        if self.local_vars_configuration.client_side_validation and bps_max is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_max`, must not be `None`")  # noqa: E501

        self._bps_max = bps_max

    @property
    def bps_max_length(self):
        """Gets the bps_max_length of this IscsiLun.  # noqa: E501


        :return: The bps_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_max_length

    @bps_max_length.setter
    def bps_max_length(self, bps_max_length):
        """Sets the bps_max_length of this IscsiLun.


        :param bps_max_length: The bps_max_length of this IscsiLun.  # noqa: E501
        :type bps_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and bps_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_max_length`, must not be `None`")  # noqa: E501

        self._bps_max_length = bps_max_length

    @property
    def bps_rd(self):
        """Gets the bps_rd of this IscsiLun.  # noqa: E501


        :return: The bps_rd of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd

    @bps_rd.setter
    def bps_rd(self, bps_rd):
        """Sets the bps_rd of this IscsiLun.


        :param bps_rd: The bps_rd of this IscsiLun.  # noqa: E501
        :type bps_rd: int
        """
        if self.local_vars_configuration.client_side_validation and bps_rd is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_rd`, must not be `None`")  # noqa: E501

        self._bps_rd = bps_rd

    @property
    def bps_rd_max(self):
        """Gets the bps_rd_max of this IscsiLun.  # noqa: E501


        :return: The bps_rd_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd_max

    @bps_rd_max.setter
    def bps_rd_max(self, bps_rd_max):
        """Sets the bps_rd_max of this IscsiLun.


        :param bps_rd_max: The bps_rd_max of this IscsiLun.  # noqa: E501
        :type bps_rd_max: int
        """
        if self.local_vars_configuration.client_side_validation and bps_rd_max is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_rd_max`, must not be `None`")  # noqa: E501

        self._bps_rd_max = bps_rd_max

    @property
    def bps_rd_max_length(self):
        """Gets the bps_rd_max_length of this IscsiLun.  # noqa: E501


        :return: The bps_rd_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd_max_length

    @bps_rd_max_length.setter
    def bps_rd_max_length(self, bps_rd_max_length):
        """Sets the bps_rd_max_length of this IscsiLun.


        :param bps_rd_max_length: The bps_rd_max_length of this IscsiLun.  # noqa: E501
        :type bps_rd_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and bps_rd_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_rd_max_length`, must not be `None`")  # noqa: E501

        self._bps_rd_max_length = bps_rd_max_length

    @property
    def bps_wr(self):
        """Gets the bps_wr of this IscsiLun.  # noqa: E501


        :return: The bps_wr of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr

    @bps_wr.setter
    def bps_wr(self, bps_wr):
        """Sets the bps_wr of this IscsiLun.


        :param bps_wr: The bps_wr of this IscsiLun.  # noqa: E501
        :type bps_wr: int
        """
        if self.local_vars_configuration.client_side_validation and bps_wr is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_wr`, must not be `None`")  # noqa: E501

        self._bps_wr = bps_wr

    @property
    def bps_wr_max(self):
        """Gets the bps_wr_max of this IscsiLun.  # noqa: E501


        :return: The bps_wr_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr_max

    @bps_wr_max.setter
    def bps_wr_max(self, bps_wr_max):
        """Sets the bps_wr_max of this IscsiLun.


        :param bps_wr_max: The bps_wr_max of this IscsiLun.  # noqa: E501
        :type bps_wr_max: int
        """
        if self.local_vars_configuration.client_side_validation and bps_wr_max is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_wr_max`, must not be `None`")  # noqa: E501

        self._bps_wr_max = bps_wr_max

    @property
    def bps_wr_max_length(self):
        """Gets the bps_wr_max_length of this IscsiLun.  # noqa: E501


        :return: The bps_wr_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr_max_length

    @bps_wr_max_length.setter
    def bps_wr_max_length(self, bps_wr_max_length):
        """Sets the bps_wr_max_length of this IscsiLun.


        :param bps_wr_max_length: The bps_wr_max_length of this IscsiLun.  # noqa: E501
        :type bps_wr_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and bps_wr_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `bps_wr_max_length`, must not be `None`")  # noqa: E501

        self._bps_wr_max_length = bps_wr_max_length

    @property
    def business_host_groups(self):
        """Gets the business_host_groups of this IscsiLun.  # noqa: E501


        :return: The business_host_groups of this IscsiLun.  # noqa: E501
        :rtype: list[NestedBusinessHostGroup]
        """
        return self._business_host_groups

    @business_host_groups.setter
    def business_host_groups(self, business_host_groups):
        """Sets the business_host_groups of this IscsiLun.


        :param business_host_groups: The business_host_groups of this IscsiLun.  # noqa: E501
        :type business_host_groups: list[NestedBusinessHostGroup]
        """

        self._business_host_groups = business_host_groups

    @property
    def business_host_is_same_with_parent(self):
        """Gets the business_host_is_same_with_parent of this IscsiLun.  # noqa: E501


        :return: The business_host_is_same_with_parent of this IscsiLun.  # noqa: E501
        :rtype: bool
        """
        return self._business_host_is_same_with_parent

    @business_host_is_same_with_parent.setter
    def business_host_is_same_with_parent(self, business_host_is_same_with_parent):
        """Sets the business_host_is_same_with_parent of this IscsiLun.


        :param business_host_is_same_with_parent: The business_host_is_same_with_parent of this IscsiLun.  # noqa: E501
        :type business_host_is_same_with_parent: bool
        """

        self._business_host_is_same_with_parent = business_host_is_same_with_parent

    @property
    def business_hosts(self):
        """Gets the business_hosts of this IscsiLun.  # noqa: E501


        :return: The business_hosts of this IscsiLun.  # noqa: E501
        :rtype: list[NestedBusinessHost]
        """
        return self._business_hosts

    @business_hosts.setter
    def business_hosts(self, business_hosts):
        """Sets the business_hosts of this IscsiLun.


        :param business_hosts: The business_hosts of this IscsiLun.  # noqa: E501
        :type business_hosts: list[NestedBusinessHost]
        """

        self._business_hosts = business_hosts

    @property
    def configuration_method(self):
        """Gets the configuration_method of this IscsiLun.  # noqa: E501


        :return: The configuration_method of this IscsiLun.  # noqa: E501
        :rtype: ConfigurationMethod
        """
        return self._configuration_method

    @configuration_method.setter
    def configuration_method(self, configuration_method):
        """Sets the configuration_method of this IscsiLun.


        :param configuration_method: The configuration_method of this IscsiLun.  # noqa: E501
        :type configuration_method: ConfigurationMethod
        """

        self._configuration_method = configuration_method

    @property
    def consistency_group(self):
        """Gets the consistency_group of this IscsiLun.  # noqa: E501


        :return: The consistency_group of this IscsiLun.  # noqa: E501
        :rtype: NestedConsistencyGroup
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this IscsiLun.


        :param consistency_group: The consistency_group of this IscsiLun.  # noqa: E501
        :type consistency_group: NestedConsistencyGroup
        """

        self._consistency_group = consistency_group

    @property
    def downgraded_prioritized_space(self):
        """Gets the downgraded_prioritized_space of this IscsiLun.  # noqa: E501


        :return: The downgraded_prioritized_space of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._downgraded_prioritized_space

    @downgraded_prioritized_space.setter
    def downgraded_prioritized_space(self, downgraded_prioritized_space):
        """Sets the downgraded_prioritized_space of this IscsiLun.


        :param downgraded_prioritized_space: The downgraded_prioritized_space of this IscsiLun.  # noqa: E501
        :type downgraded_prioritized_space: int
        """

        self._downgraded_prioritized_space = downgraded_prioritized_space

    @property
    def ec_k(self):
        """Gets the ec_k of this IscsiLun.  # noqa: E501


        :return: The ec_k of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._ec_k

    @ec_k.setter
    def ec_k(self, ec_k):
        """Sets the ec_k of this IscsiLun.


        :param ec_k: The ec_k of this IscsiLun.  # noqa: E501
        :type ec_k: int
        """

        self._ec_k = ec_k

    @property
    def ec_m(self):
        """Gets the ec_m of this IscsiLun.  # noqa: E501


        :return: The ec_m of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._ec_m

    @ec_m.setter
    def ec_m(self, ec_m):
        """Sets the ec_m of this IscsiLun.


        :param ec_m: The ec_m of this IscsiLun.  # noqa: E501
        :type ec_m: int
        """

        self._ec_m = ec_m

    @property
    def encrypt_method(self):
        """Gets the encrypt_method of this IscsiLun.  # noqa: E501


        :return: The encrypt_method of this IscsiLun.  # noqa: E501
        :rtype: EncryptMethod
        """
        return self._encrypt_method

    @encrypt_method.setter
    def encrypt_method(self, encrypt_method):
        """Sets the encrypt_method of this IscsiLun.


        :param encrypt_method: The encrypt_method of this IscsiLun.  # noqa: E501
        :type encrypt_method: EncryptMethod
        """

        self._encrypt_method = encrypt_method

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this IscsiLun.  # noqa: E501


        :return: The entity_async_status of this IscsiLun.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this IscsiLun.


        :param entity_async_status: The entity_async_status of this IscsiLun.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def id(self):
        """Gets the id of this IscsiLun.  # noqa: E501


        :return: The id of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IscsiLun.


        :param id: The id of this IscsiLun.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def io_size(self):
        """Gets the io_size of this IscsiLun.  # noqa: E501


        :return: The io_size of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._io_size

    @io_size.setter
    def io_size(self, io_size):
        """Sets the io_size of this IscsiLun.


        :param io_size: The io_size of this IscsiLun.  # noqa: E501
        :type io_size: int
        """
        if self.local_vars_configuration.client_side_validation and io_size is None:  # noqa: E501
            raise ValueError("Invalid value for `io_size`, must not be `None`")  # noqa: E501

        self._io_size = io_size

    @property
    def iops(self):
        """Gets the iops of this IscsiLun.  # noqa: E501


        :return: The iops of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this IscsiLun.


        :param iops: The iops of this IscsiLun.  # noqa: E501
        :type iops: int
        """
        if self.local_vars_configuration.client_side_validation and iops is None:  # noqa: E501
            raise ValueError("Invalid value for `iops`, must not be `None`")  # noqa: E501

        self._iops = iops

    @property
    def iops_max(self):
        """Gets the iops_max of this IscsiLun.  # noqa: E501


        :return: The iops_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_max

    @iops_max.setter
    def iops_max(self, iops_max):
        """Sets the iops_max of this IscsiLun.


        :param iops_max: The iops_max of this IscsiLun.  # noqa: E501
        :type iops_max: int
        """
        if self.local_vars_configuration.client_side_validation and iops_max is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_max`, must not be `None`")  # noqa: E501

        self._iops_max = iops_max

    @property
    def iops_max_length(self):
        """Gets the iops_max_length of this IscsiLun.  # noqa: E501


        :return: The iops_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_max_length

    @iops_max_length.setter
    def iops_max_length(self, iops_max_length):
        """Sets the iops_max_length of this IscsiLun.


        :param iops_max_length: The iops_max_length of this IscsiLun.  # noqa: E501
        :type iops_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and iops_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_max_length`, must not be `None`")  # noqa: E501

        self._iops_max_length = iops_max_length

    @property
    def iops_rd(self):
        """Gets the iops_rd of this IscsiLun.  # noqa: E501


        :return: The iops_rd of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd

    @iops_rd.setter
    def iops_rd(self, iops_rd):
        """Sets the iops_rd of this IscsiLun.


        :param iops_rd: The iops_rd of this IscsiLun.  # noqa: E501
        :type iops_rd: int
        """
        if self.local_vars_configuration.client_side_validation and iops_rd is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_rd`, must not be `None`")  # noqa: E501

        self._iops_rd = iops_rd

    @property
    def iops_rd_max(self):
        """Gets the iops_rd_max of this IscsiLun.  # noqa: E501


        :return: The iops_rd_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd_max

    @iops_rd_max.setter
    def iops_rd_max(self, iops_rd_max):
        """Sets the iops_rd_max of this IscsiLun.


        :param iops_rd_max: The iops_rd_max of this IscsiLun.  # noqa: E501
        :type iops_rd_max: int
        """
        if self.local_vars_configuration.client_side_validation and iops_rd_max is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_rd_max`, must not be `None`")  # noqa: E501

        self._iops_rd_max = iops_rd_max

    @property
    def iops_rd_max_length(self):
        """Gets the iops_rd_max_length of this IscsiLun.  # noqa: E501


        :return: The iops_rd_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd_max_length

    @iops_rd_max_length.setter
    def iops_rd_max_length(self, iops_rd_max_length):
        """Sets the iops_rd_max_length of this IscsiLun.


        :param iops_rd_max_length: The iops_rd_max_length of this IscsiLun.  # noqa: E501
        :type iops_rd_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and iops_rd_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_rd_max_length`, must not be `None`")  # noqa: E501

        self._iops_rd_max_length = iops_rd_max_length

    @property
    def iops_wr(self):
        """Gets the iops_wr of this IscsiLun.  # noqa: E501


        :return: The iops_wr of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr

    @iops_wr.setter
    def iops_wr(self, iops_wr):
        """Sets the iops_wr of this IscsiLun.


        :param iops_wr: The iops_wr of this IscsiLun.  # noqa: E501
        :type iops_wr: int
        """
        if self.local_vars_configuration.client_side_validation and iops_wr is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_wr`, must not be `None`")  # noqa: E501

        self._iops_wr = iops_wr

    @property
    def iops_wr_max(self):
        """Gets the iops_wr_max of this IscsiLun.  # noqa: E501


        :return: The iops_wr_max of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr_max

    @iops_wr_max.setter
    def iops_wr_max(self, iops_wr_max):
        """Sets the iops_wr_max of this IscsiLun.


        :param iops_wr_max: The iops_wr_max of this IscsiLun.  # noqa: E501
        :type iops_wr_max: int
        """
        if self.local_vars_configuration.client_side_validation and iops_wr_max is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_wr_max`, must not be `None`")  # noqa: E501

        self._iops_wr_max = iops_wr_max

    @property
    def iops_wr_max_length(self):
        """Gets the iops_wr_max_length of this IscsiLun.  # noqa: E501


        :return: The iops_wr_max_length of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr_max_length

    @iops_wr_max_length.setter
    def iops_wr_max_length(self, iops_wr_max_length):
        """Sets the iops_wr_max_length of this IscsiLun.


        :param iops_wr_max_length: The iops_wr_max_length of this IscsiLun.  # noqa: E501
        :type iops_wr_max_length: int
        """
        if self.local_vars_configuration.client_side_validation and iops_wr_max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `iops_wr_max_length`, must not be `None`")  # noqa: E501

        self._iops_wr_max_length = iops_wr_max_length

    @property
    def iscsi_target(self):
        """Gets the iscsi_target of this IscsiLun.  # noqa: E501


        :return: The iscsi_target of this IscsiLun.  # noqa: E501
        :rtype: NestedIscsiTarget
        """
        return self._iscsi_target

    @iscsi_target.setter
    def iscsi_target(self, iscsi_target):
        """Sets the iscsi_target of this IscsiLun.


        :param iscsi_target: The iscsi_target of this IscsiLun.  # noqa: E501
        :type iscsi_target: NestedIscsiTarget
        """
        if self.local_vars_configuration.client_side_validation and iscsi_target is None:  # noqa: E501
            raise ValueError("Invalid value for `iscsi_target`, must not be `None`")  # noqa: E501

        self._iscsi_target = iscsi_target

    @property
    def labels(self):
        """Gets the labels of this IscsiLun.  # noqa: E501


        :return: The labels of this IscsiLun.  # noqa: E501
        :rtype: list[NestedLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IscsiLun.


        :param labels: The labels of this IscsiLun.  # noqa: E501
        :type labels: list[NestedLabel]
        """

        self._labels = labels

    @property
    def local_created_at(self):
        """Gets the local_created_at of this IscsiLun.  # noqa: E501


        :return: The local_created_at of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._local_created_at

    @local_created_at.setter
    def local_created_at(self, local_created_at):
        """Sets the local_created_at of this IscsiLun.


        :param local_created_at: The local_created_at of this IscsiLun.  # noqa: E501
        :type local_created_at: str
        """
        if self.local_vars_configuration.client_side_validation and local_created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `local_created_at`, must not be `None`")  # noqa: E501

        self._local_created_at = local_created_at

    @property
    def local_id(self):
        """Gets the local_id of this IscsiLun.  # noqa: E501


        :return: The local_id of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this IscsiLun.


        :param local_id: The local_id of this IscsiLun.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def lun_id(self):
        """Gets the lun_id of this IscsiLun.  # noqa: E501


        :return: The lun_id of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._lun_id

    @lun_id.setter
    def lun_id(self, lun_id):
        """Sets the lun_id of this IscsiLun.


        :param lun_id: The lun_id of this IscsiLun.  # noqa: E501
        :type lun_id: int
        """
        if self.local_vars_configuration.client_side_validation and lun_id is None:  # noqa: E501
            raise ValueError("Invalid value for `lun_id`, must not be `None`")  # noqa: E501

        self._lun_id = lun_id

    @property
    def name(self):
        """Gets the name of this IscsiLun.  # noqa: E501


        :return: The name of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IscsiLun.


        :param name: The name of this IscsiLun.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def prioritized(self):
        """Gets the prioritized of this IscsiLun.  # noqa: E501


        :return: The prioritized of this IscsiLun.  # noqa: E501
        :rtype: bool
        """
        return self._prioritized

    @prioritized.setter
    def prioritized(self, prioritized):
        """Sets the prioritized of this IscsiLun.


        :param prioritized: The prioritized of this IscsiLun.  # noqa: E501
        :type prioritized: bool
        """

        self._prioritized = prioritized

    @property
    def replica_num(self):
        """Gets the replica_num of this IscsiLun.  # noqa: E501


        :return: The replica_num of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._replica_num

    @replica_num.setter
    def replica_num(self, replica_num):
        """Sets the replica_num of this IscsiLun.


        :param replica_num: The replica_num of this IscsiLun.  # noqa: E501
        :type replica_num: int
        """
        if self.local_vars_configuration.client_side_validation and replica_num is None:  # noqa: E501
            raise ValueError("Invalid value for `replica_num`, must not be `None`")  # noqa: E501

        self._replica_num = replica_num

    @property
    def replication_plans(self):
        """Gets the replication_plans of this IscsiLun.  # noqa: E501


        :return: The replication_plans of this IscsiLun.  # noqa: E501
        :rtype: list[NestedReplicationPlan]
        """
        return self._replication_plans

    @replication_plans.setter
    def replication_plans(self, replication_plans):
        """Sets the replication_plans of this IscsiLun.


        :param replication_plans: The replication_plans of this IscsiLun.  # noqa: E501
        :type replication_plans: list[NestedReplicationPlan]
        """

        self._replication_plans = replication_plans

    @property
    def resiliency_type(self):
        """Gets the resiliency_type of this IscsiLun.  # noqa: E501


        :return: The resiliency_type of this IscsiLun.  # noqa: E501
        :rtype: ResiliencyType
        """
        return self._resiliency_type

    @resiliency_type.setter
    def resiliency_type(self, resiliency_type):
        """Sets the resiliency_type of this IscsiLun.


        :param resiliency_type: The resiliency_type of this IscsiLun.  # noqa: E501
        :type resiliency_type: ResiliencyType
        """

        self._resiliency_type = resiliency_type

    @property
    def shared_size(self):
        """Gets the shared_size of this IscsiLun.  # noqa: E501


        :return: The shared_size of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._shared_size

    @shared_size.setter
    def shared_size(self, shared_size):
        """Sets the shared_size of this IscsiLun.


        :param shared_size: The shared_size of this IscsiLun.  # noqa: E501
        :type shared_size: int
        """
        if self.local_vars_configuration.client_side_validation and shared_size is None:  # noqa: E501
            raise ValueError("Invalid value for `shared_size`, must not be `None`")  # noqa: E501

        self._shared_size = shared_size

    @property
    def snapshot_num(self):
        """Gets the snapshot_num of this IscsiLun.  # noqa: E501


        :return: The snapshot_num of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_num

    @snapshot_num.setter
    def snapshot_num(self, snapshot_num):
        """Sets the snapshot_num of this IscsiLun.


        :param snapshot_num: The snapshot_num of this IscsiLun.  # noqa: E501
        :type snapshot_num: int
        """
        if self.local_vars_configuration.client_side_validation and snapshot_num is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_num`, must not be `None`")  # noqa: E501

        self._snapshot_num = snapshot_num

    @property
    def snapshot_plans(self):
        """Gets the snapshot_plans of this IscsiLun.  # noqa: E501


        :return: The snapshot_plans of this IscsiLun.  # noqa: E501
        :rtype: list[NestedSnapshotPlan]
        """
        return self._snapshot_plans

    @snapshot_plans.setter
    def snapshot_plans(self, snapshot_plans):
        """Sets the snapshot_plans of this IscsiLun.


        :param snapshot_plans: The snapshot_plans of this IscsiLun.  # noqa: E501
        :type snapshot_plans: list[NestedSnapshotPlan]
        """

        self._snapshot_plans = snapshot_plans

    @property
    def stripe_num(self):
        """Gets the stripe_num of this IscsiLun.  # noqa: E501


        :return: The stripe_num of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._stripe_num

    @stripe_num.setter
    def stripe_num(self, stripe_num):
        """Sets the stripe_num of this IscsiLun.


        :param stripe_num: The stripe_num of this IscsiLun.  # noqa: E501
        :type stripe_num: int
        """
        if self.local_vars_configuration.client_side_validation and stripe_num is None:  # noqa: E501
            raise ValueError("Invalid value for `stripe_num`, must not be `None`")  # noqa: E501

        self._stripe_num = stripe_num

    @property
    def stripe_size(self):
        """Gets the stripe_size of this IscsiLun.  # noqa: E501


        :return: The stripe_size of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._stripe_size

    @stripe_size.setter
    def stripe_size(self, stripe_size):
        """Sets the stripe_size of this IscsiLun.


        :param stripe_size: The stripe_size of this IscsiLun.  # noqa: E501
        :type stripe_size: int
        """
        if self.local_vars_configuration.client_side_validation and stripe_size is None:  # noqa: E501
            raise ValueError("Invalid value for `stripe_size`, must not be `None`")  # noqa: E501

        self._stripe_size = stripe_size

    @property
    def thin_provision(self):
        """Gets the thin_provision of this IscsiLun.  # noqa: E501


        :return: The thin_provision of this IscsiLun.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provision

    @thin_provision.setter
    def thin_provision(self, thin_provision):
        """Sets the thin_provision of this IscsiLun.


        :param thin_provision: The thin_provision of this IscsiLun.  # noqa: E501
        :type thin_provision: bool
        """
        if self.local_vars_configuration.client_side_validation and thin_provision is None:  # noqa: E501
            raise ValueError("Invalid value for `thin_provision`, must not be `None`")  # noqa: E501

        self._thin_provision = thin_provision

    @property
    def unique_logical_size(self):
        """Gets the unique_logical_size of this IscsiLun.  # noqa: E501


        :return: The unique_logical_size of this IscsiLun.  # noqa: E501
        :rtype: float
        """
        return self._unique_logical_size

    @unique_logical_size.setter
    def unique_logical_size(self, unique_logical_size):
        """Sets the unique_logical_size of this IscsiLun.


        :param unique_logical_size: The unique_logical_size of this IscsiLun.  # noqa: E501
        :type unique_logical_size: float
        """

        self._unique_logical_size = unique_logical_size

    @property
    def unique_size(self):
        """Gets the unique_size of this IscsiLun.  # noqa: E501


        :return: The unique_size of this IscsiLun.  # noqa: E501
        :rtype: int
        """
        return self._unique_size

    @unique_size.setter
    def unique_size(self, unique_size):
        """Sets the unique_size of this IscsiLun.


        :param unique_size: The unique_size of this IscsiLun.  # noqa: E501
        :type unique_size: int
        """
        if self.local_vars_configuration.client_side_validation and unique_size is None:  # noqa: E501
            raise ValueError("Invalid value for `unique_size`, must not be `None`")  # noqa: E501

        self._unique_size = unique_size

    @property
    def zbs_volume_id(self):
        """Gets the zbs_volume_id of this IscsiLun.  # noqa: E501


        :return: The zbs_volume_id of this IscsiLun.  # noqa: E501
        :rtype: str
        """
        return self._zbs_volume_id

    @zbs_volume_id.setter
    def zbs_volume_id(self, zbs_volume_id):
        """Sets the zbs_volume_id of this IscsiLun.


        :param zbs_volume_id: The zbs_volume_id of this IscsiLun.  # noqa: E501
        :type zbs_volume_id: str
        """
        if self.local_vars_configuration.client_side_validation and zbs_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `zbs_volume_id`, must not be `None`")  # noqa: E501

        self._zbs_volume_id = zbs_volume_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IscsiLun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IscsiLun):
            return True

        return self.to_dict() != other.to_dict()
