# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class AlertOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CAUSE_ASC = "cause_ASC"
    CAUSE_DESC = "cause_DESC"
    CREATE_TIME_ASC = "create_time_ASC"
    CREATE_TIME_DESC = "create_time_DESC"
    ENDED_ASC = "ended_ASC"
    ENDED_DESC = "ended_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    IMPACT_ASC = "impact_ASC"
    IMPACT_DESC = "impact_DESC"
    LABELS_ASC = "labels_ASC"
    LABELS_DESC = "labels_DESC"
    LOCAL_CREATE_TIME_ASC = "local_create_time_ASC"
    LOCAL_CREATE_TIME_DESC = "local_create_time_DESC"
    LOCAL_END_TIME_ASC = "local_end_time_ASC"
    LOCAL_END_TIME_DESC = "local_end_time_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    LOCAL_START_TIME_ASC = "local_start_time_ASC"
    LOCAL_START_TIME_DESC = "local_start_time_DESC"
    LOCAL_UPDATE_TIME_ASC = "local_update_time_ASC"
    LOCAL_UPDATE_TIME_DESC = "local_update_time_DESC"
    MESSAGE_ASC = "message_ASC"
    MESSAGE_DESC = "message_DESC"
    SEVERITY_ASC = "severity_ASC"
    SEVERITY_DESC = "severity_DESC"
    SOLUTION_ASC = "solution_ASC"
    SOLUTION_DESC = "solution_DESC"
    THRESHOLD_ASC = "threshold_ASC"
    THRESHOLD_DESC = "threshold_DESC"
    VALUE_ASC = "value_ASC"
    VALUE_DESC = "value_DESC"

    allowable_values = [CAUSE_ASC, CAUSE_DESC, CREATE_TIME_ASC, CREATE_TIME_DESC, ENDED_ASC, ENDED_DESC, ID_ASC, ID_DESC, IMPACT_ASC, IMPACT_DESC, LABELS_ASC, LABELS_DESC, LOCAL_CREATE_TIME_ASC, LOCAL_CREATE_TIME_DESC, LOCAL_END_TIME_ASC, LOCAL_END_TIME_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, LOCAL_START_TIME_ASC, LOCAL_START_TIME_DESC, LOCAL_UPDATE_TIME_ASC, LOCAL_UPDATE_TIME_DESC, MESSAGE_ASC, MESSAGE_DESC, SEVERITY_ASC, SEVERITY_DESC, SOLUTION_ASC, SOLUTION_DESC, THRESHOLD_ASC, THRESHOLD_DESC, VALUE_ASC, VALUE_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """AlertOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
