# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class BackupServiceOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BACKUP_NETWORK_GATEWAY_ASC = "backup_network_gateway_ASC"
    BACKUP_NETWORK_GATEWAY_DESC = "backup_network_gateway_DESC"
    BACKUP_NETWORK_IP_ASC = "backup_network_ip_ASC"
    BACKUP_NETWORK_IP_DESC = "backup_network_ip_DESC"
    BACKUP_NETWORK_SUBNET_MASK_ASC = "backup_network_subnet_mask_ASC"
    BACKUP_NETWORK_SUBNET_MASK_DESC = "backup_network_subnet_mask_DESC"
    BACKUP_NETWORK_TYPE_ASC = "backup_network_type_ASC"
    BACKUP_NETWORK_TYPE_DESC = "backup_network_type_DESC"
    BACKUP_NETWORK_VLAN_ASC = "backup_network_vlan_ASC"
    BACKUP_NETWORK_VLAN_DESC = "backup_network_vlan_DESC"
    BACKUP_RD_IOPS_MAX_ASC = "backup_rd_iops_max_ASC"
    BACKUP_RD_IOPS_MAX_DESC = "backup_rd_iops_max_DESC"
    BACKUP_WR_IOPS_MAX_ASC = "backup_wr_iops_max_ASC"
    BACKUP_WR_IOPS_MAX_DESC = "backup_wr_iops_max_DESC"
    DESCRIPTION_ASC = "description_ASC"
    DESCRIPTION_DESC = "description_DESC"
    ENTITYASYNCSTATUS_ASC = "entityAsyncStatus_ASC"
    ENTITYASYNCSTATUS_DESC = "entityAsyncStatus_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    KUBE_CONFIG_ASC = "kube_config_ASC"
    KUBE_CONFIG_DESC = "kube_config_DESC"
    MANAGEMENT_NETWORK_GATEWAY_ASC = "management_network_gateway_ASC"
    MANAGEMENT_NETWORK_GATEWAY_DESC = "management_network_gateway_DESC"
    MANAGEMENT_NETWORK_IP_ASC = "management_network_ip_ASC"
    MANAGEMENT_NETWORK_IP_DESC = "management_network_ip_DESC"
    MANAGEMENT_NETWORK_SUBNET_MASK_ASC = "management_network_subnet_mask_ASC"
    MANAGEMENT_NETWORK_SUBNET_MASK_DESC = "management_network_subnet_mask_DESC"
    MANAGEMENT_NETWORK_VLAN_ASC = "management_network_vlan_ASC"
    MANAGEMENT_NETWORK_VLAN_DESC = "management_network_vlan_DESC"
    MAX_JOB_RETRY_TIMES_ASC = "max_job_retry_times_ASC"
    MAX_JOB_RETRY_TIMES_DESC = "max_job_retry_times_DESC"
    MAX_PARALLEL_BACKUP_JOBS_ASC = "max_parallel_backup_jobs_ASC"
    MAX_PARALLEL_BACKUP_JOBS_DESC = "max_parallel_backup_jobs_DESC"
    MAX_PARALLEL_RESTORE_JOBS_ASC = "max_parallel_restore_jobs_ASC"
    MAX_PARALLEL_RESTORE_JOBS_DESC = "max_parallel_restore_jobs_DESC"
    NAME_ASC = "name_ASC"
    NAME_DESC = "name_DESC"
    NETWORK_STATUS_ASC = "network_status_ASC"
    NETWORK_STATUS_DESC = "network_status_DESC"
    RESTORE_RD_IOPS_MAX_ASC = "restore_rd_iops_max_ASC"
    RESTORE_RD_IOPS_MAX_DESC = "restore_rd_iops_max_DESC"
    RESTORE_WR_IOPS_MAX_ASC = "restore_wr_iops_max_ASC"
    RESTORE_WR_IOPS_MAX_DESC = "restore_wr_iops_max_DESC"
    RETRY_INTERVAL_ASC = "retry_interval_ASC"
    RETRY_INTERVAL_DESC = "retry_interval_DESC"
    STATUS_ASC = "status_ASC"
    STATUS_DESC = "status_DESC"
    STORAGE_NETWORK_GATEWAY_ASC = "storage_network_gateway_ASC"
    STORAGE_NETWORK_GATEWAY_DESC = "storage_network_gateway_DESC"
    STORAGE_NETWORK_IP_ASC = "storage_network_ip_ASC"
    STORAGE_NETWORK_IP_DESC = "storage_network_ip_DESC"
    STORAGE_NETWORK_SUBNET_MASK_ASC = "storage_network_subnet_mask_ASC"
    STORAGE_NETWORK_SUBNET_MASK_DESC = "storage_network_subnet_mask_DESC"
    STORAGE_NETWORK_TYPE_ASC = "storage_network_type_ASC"
    STORAGE_NETWORK_TYPE_DESC = "storage_network_type_DESC"
    STORAGE_NETWORK_VLAN_ASC = "storage_network_vlan_ASC"
    STORAGE_NETWORK_VLAN_DESC = "storage_network_vlan_DESC"

    allowable_values = [BACKUP_NETWORK_GATEWAY_ASC, BACKUP_NETWORK_GATEWAY_DESC, BACKUP_NETWORK_IP_ASC, BACKUP_NETWORK_IP_DESC, BACKUP_NETWORK_SUBNET_MASK_ASC, BACKUP_NETWORK_SUBNET_MASK_DESC, BACKUP_NETWORK_TYPE_ASC, BACKUP_NETWORK_TYPE_DESC, BACKUP_NETWORK_VLAN_ASC, BACKUP_NETWORK_VLAN_DESC, BACKUP_RD_IOPS_MAX_ASC, BACKUP_RD_IOPS_MAX_DESC, BACKUP_WR_IOPS_MAX_ASC, BACKUP_WR_IOPS_MAX_DESC, DESCRIPTION_ASC, DESCRIPTION_DESC, ENTITYASYNCSTATUS_ASC, ENTITYASYNCSTATUS_DESC, ID_ASC, ID_DESC, KUBE_CONFIG_ASC, KUBE_CONFIG_DESC, MANAGEMENT_NETWORK_GATEWAY_ASC, MANAGEMENT_NETWORK_GATEWAY_DESC, MANAGEMENT_NETWORK_IP_ASC, MANAGEMENT_NETWORK_IP_DESC, MANAGEMENT_NETWORK_SUBNET_MASK_ASC, MANAGEMENT_NETWORK_SUBNET_MASK_DESC, MANAGEMENT_NETWORK_VLAN_ASC, MANAGEMENT_NETWORK_VLAN_DESC, MAX_JOB_RETRY_TIMES_ASC, MAX_JOB_RETRY_TIMES_DESC, MAX_PARALLEL_BACKUP_JOBS_ASC, MAX_PARALLEL_BACKUP_JOBS_DESC, MAX_PARALLEL_RESTORE_JOBS_ASC, MAX_PARALLEL_RESTORE_JOBS_DESC, NAME_ASC, NAME_DESC, NETWORK_STATUS_ASC, NETWORK_STATUS_DESC, RESTORE_RD_IOPS_MAX_ASC, RESTORE_RD_IOPS_MAX_DESC, RESTORE_WR_IOPS_MAX_ASC, RESTORE_WR_IOPS_MAX_DESC, RETRY_INTERVAL_ASC, RETRY_INTERVAL_DESC, STATUS_ASC, STATUS_DESC, STORAGE_NETWORK_GATEWAY_ASC, STORAGE_NETWORK_GATEWAY_DESC, STORAGE_NETWORK_IP_ASC, STORAGE_NETWORK_IP_DESC, STORAGE_NETWORK_SUBNET_MASK_ASC, STORAGE_NETWORK_SUBNET_MASK_DESC, STORAGE_NETWORK_TYPE_ASC, STORAGE_NETWORK_TYPE_DESC, STORAGE_NETWORK_VLAN_ASC, STORAGE_NETWORK_VLAN_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """BackupServiceOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupServiceOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupServiceOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
