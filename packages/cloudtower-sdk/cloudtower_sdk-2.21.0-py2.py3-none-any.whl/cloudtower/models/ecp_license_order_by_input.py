# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class EcpLicenseOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLUSTER_LOCAL_ID_ASC = "cluster_local_id_ASC"
    CLUSTER_LOCAL_ID_DESC = "cluster_local_id_DESC"
    ECP_EDITION_ASC = "ecp_edition_ASC"
    ECP_EDITION_DESC = "ecp_edition_DESC"
    EXPIRE_DATE_ASC = "expire_date_ASC"
    EXPIRE_DATE_DESC = "expire_date_DESC"
    HAS_METROX_ASC = "has_metrox_ASC"
    HAS_METROX_DESC = "has_metrox_DESC"
    HAS_REMOTE_BACKUP_ASC = "has_remote_backup_ASC"
    HAS_REMOTE_BACKUP_DESC = "has_remote_backup_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    LICENSE_TYPE_ASC = "license_type_ASC"
    LICENSE_TYPE_DESC = "license_type_DESC"
    MAX_CORE_NUM_ASC = "max_core_num_ASC"
    MAX_CORE_NUM_DESC = "max_core_num_DESC"
    MAX_PHYSICAL_DATA_CAPACITY_ASC = "max_physical_data_capacity_ASC"
    MAX_PHYSICAL_DATA_CAPACITY_DESC = "max_physical_data_capacity_DESC"
    ORIGINAL_CODE_ASC = "original_code_ASC"
    ORIGINAL_CODE_DESC = "original_code_DESC"
    PRODUCT_NAME_ASC = "product_name_ASC"
    PRODUCT_NAME_DESC = "product_name_DESC"
    SERIAL_ASC = "serial_ASC"
    SERIAL_DESC = "serial_DESC"
    SIGN_DATE_ASC = "sign_date_ASC"
    SIGN_DATE_DESC = "sign_date_DESC"
    SUBSCRIPTION_EXPIRE_DATE_ASC = "subscription_expire_date_ASC"
    SUBSCRIPTION_EXPIRE_DATE_DESC = "subscription_expire_date_DESC"
    SUBSCRIPTION_START_DATE_ASC = "subscription_start_date_ASC"
    SUBSCRIPTION_START_DATE_DESC = "subscription_start_date_DESC"
    VENDOR_ASC = "vendor_ASC"
    VENDOR_DESC = "vendor_DESC"
    VERSION_ASC = "version_ASC"
    VERSION_DESC = "version_DESC"

    allowable_values = [CLUSTER_LOCAL_ID_ASC, CLUSTER_LOCAL_ID_DESC, ECP_EDITION_ASC, ECP_EDITION_DESC, EXPIRE_DATE_ASC, EXPIRE_DATE_DESC, HAS_METROX_ASC, HAS_METROX_DESC, HAS_REMOTE_BACKUP_ASC, HAS_REMOTE_BACKUP_DESC, ID_ASC, ID_DESC, LICENSE_TYPE_ASC, LICENSE_TYPE_DESC, MAX_CORE_NUM_ASC, MAX_CORE_NUM_DESC, MAX_PHYSICAL_DATA_CAPACITY_ASC, MAX_PHYSICAL_DATA_CAPACITY_DESC, ORIGINAL_CODE_ASC, ORIGINAL_CODE_DESC, PRODUCT_NAME_ASC, PRODUCT_NAME_DESC, SERIAL_ASC, SERIAL_DESC, SIGN_DATE_ASC, SIGN_DATE_DESC, SUBSCRIPTION_EXPIRE_DATE_ASC, SUBSCRIPTION_EXPIRE_DATE_DESC, SUBSCRIPTION_START_DATE_ASC, SUBSCRIPTION_START_DATE_DESC, VENDOR_ASC, VENDOR_DESC, VERSION_ASC, VERSION_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """EcpLicenseOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EcpLicenseOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EcpLicenseOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
