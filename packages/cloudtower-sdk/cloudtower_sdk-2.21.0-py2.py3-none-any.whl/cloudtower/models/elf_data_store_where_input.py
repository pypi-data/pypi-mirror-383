# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class ElfDataStoreWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[ElfDataStoreWhereInput]',
        '_not': 'list[ElfDataStoreWhereInput]',
        '_or': 'list[ElfDataStoreWhereInput]',
        'cluster': 'ClusterWhereInput',
        'description': 'str',
        'description_contains': 'str',
        'description_ends_with': 'str',
        'description_gt': 'str',
        'description_gte': 'str',
        'description_in': 'list[str]',
        'description_lt': 'str',
        'description_lte': 'str',
        'description_not': 'str',
        'description_not_contains': 'str',
        'description_not_ends_with': 'str',
        'description_not_in': 'list[str]',
        'description_not_starts_with': 'str',
        'description_starts_with': 'str',
        'external_use': 'bool',
        'external_use_not': 'bool',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'internal': 'bool',
        'internal_not': 'bool',
        'ip_whitelist': 'str',
        'ip_whitelist_contains': 'str',
        'ip_whitelist_ends_with': 'str',
        'ip_whitelist_gt': 'str',
        'ip_whitelist_gte': 'str',
        'ip_whitelist_in': 'list[str]',
        'ip_whitelist_lt': 'str',
        'ip_whitelist_lte': 'str',
        'ip_whitelist_not': 'str',
        'ip_whitelist_not_contains': 'str',
        'ip_whitelist_not_ends_with': 'str',
        'ip_whitelist_not_in': 'list[str]',
        'ip_whitelist_not_starts_with': 'str',
        'ip_whitelist_starts_with': 'str',
        'iscsi_target': 'IscsiTargetWhereInput',
        'local_id': 'str',
        'local_id_contains': 'str',
        'local_id_ends_with': 'str',
        'local_id_gt': 'str',
        'local_id_gte': 'str',
        'local_id_in': 'list[str]',
        'local_id_lt': 'str',
        'local_id_lte': 'str',
        'local_id_not': 'str',
        'local_id_not_contains': 'str',
        'local_id_not_ends_with': 'str',
        'local_id_not_in': 'list[str]',
        'local_id_not_starts_with': 'str',
        'local_id_starts_with': 'str',
        'name': 'str',
        'name_contains': 'str',
        'name_ends_with': 'str',
        'name_gt': 'str',
        'name_gte': 'str',
        'name_in': 'list[str]',
        'name_lt': 'str',
        'name_lte': 'str',
        'name_not': 'str',
        'name_not_contains': 'str',
        'name_not_ends_with': 'str',
        'name_not_in': 'list[str]',
        'name_not_starts_with': 'str',
        'name_starts_with': 'str',
        'nfs_export': 'NfsExportWhereInput',
        'nvmf_subsystem': 'NvmfSubsystemWhereInput',
        'replica_num': 'int',
        'replica_num_gt': 'int',
        'replica_num_gte': 'int',
        'replica_num_in': 'list[int]',
        'replica_num_lt': 'int',
        'replica_num_lte': 'int',
        'replica_num_not': 'int',
        'replica_num_not_in': 'list[int]',
        'thin_provision': 'bool',
        'thin_provision_not': 'bool',
        'type': 'ElfDataStoreType',
        'type_in': 'list[ElfDataStoreType]',
        'type_not': 'ElfDataStoreType',
        'type_not_in': 'list[ElfDataStoreType]'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'cluster': 'cluster',
        'description': 'description',
        'description_contains': 'description_contains',
        'description_ends_with': 'description_ends_with',
        'description_gt': 'description_gt',
        'description_gte': 'description_gte',
        'description_in': 'description_in',
        'description_lt': 'description_lt',
        'description_lte': 'description_lte',
        'description_not': 'description_not',
        'description_not_contains': 'description_not_contains',
        'description_not_ends_with': 'description_not_ends_with',
        'description_not_in': 'description_not_in',
        'description_not_starts_with': 'description_not_starts_with',
        'description_starts_with': 'description_starts_with',
        'external_use': 'external_use',
        'external_use_not': 'external_use_not',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'internal': 'internal',
        'internal_not': 'internal_not',
        'ip_whitelist': 'ip_whitelist',
        'ip_whitelist_contains': 'ip_whitelist_contains',
        'ip_whitelist_ends_with': 'ip_whitelist_ends_with',
        'ip_whitelist_gt': 'ip_whitelist_gt',
        'ip_whitelist_gte': 'ip_whitelist_gte',
        'ip_whitelist_in': 'ip_whitelist_in',
        'ip_whitelist_lt': 'ip_whitelist_lt',
        'ip_whitelist_lte': 'ip_whitelist_lte',
        'ip_whitelist_not': 'ip_whitelist_not',
        'ip_whitelist_not_contains': 'ip_whitelist_not_contains',
        'ip_whitelist_not_ends_with': 'ip_whitelist_not_ends_with',
        'ip_whitelist_not_in': 'ip_whitelist_not_in',
        'ip_whitelist_not_starts_with': 'ip_whitelist_not_starts_with',
        'ip_whitelist_starts_with': 'ip_whitelist_starts_with',
        'iscsi_target': 'iscsi_target',
        'local_id': 'local_id',
        'local_id_contains': 'local_id_contains',
        'local_id_ends_with': 'local_id_ends_with',
        'local_id_gt': 'local_id_gt',
        'local_id_gte': 'local_id_gte',
        'local_id_in': 'local_id_in',
        'local_id_lt': 'local_id_lt',
        'local_id_lte': 'local_id_lte',
        'local_id_not': 'local_id_not',
        'local_id_not_contains': 'local_id_not_contains',
        'local_id_not_ends_with': 'local_id_not_ends_with',
        'local_id_not_in': 'local_id_not_in',
        'local_id_not_starts_with': 'local_id_not_starts_with',
        'local_id_starts_with': 'local_id_starts_with',
        'name': 'name',
        'name_contains': 'name_contains',
        'name_ends_with': 'name_ends_with',
        'name_gt': 'name_gt',
        'name_gte': 'name_gte',
        'name_in': 'name_in',
        'name_lt': 'name_lt',
        'name_lte': 'name_lte',
        'name_not': 'name_not',
        'name_not_contains': 'name_not_contains',
        'name_not_ends_with': 'name_not_ends_with',
        'name_not_in': 'name_not_in',
        'name_not_starts_with': 'name_not_starts_with',
        'name_starts_with': 'name_starts_with',
        'nfs_export': 'nfs_export',
        'nvmf_subsystem': 'nvmf_subsystem',
        'replica_num': 'replica_num',
        'replica_num_gt': 'replica_num_gt',
        'replica_num_gte': 'replica_num_gte',
        'replica_num_in': 'replica_num_in',
        'replica_num_lt': 'replica_num_lt',
        'replica_num_lte': 'replica_num_lte',
        'replica_num_not': 'replica_num_not',
        'replica_num_not_in': 'replica_num_not_in',
        'thin_provision': 'thin_provision',
        'thin_provision_not': 'thin_provision_not',
        'type': 'type',
        'type_in': 'type_in',
        'type_not': 'type_not',
        'type_not_in': 'type_not_in'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """ElfDataStoreWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._cluster = None
        self._description = None
        self._description_contains = None
        self._description_ends_with = None
        self._description_gt = None
        self._description_gte = None
        self._description_in = None
        self._description_lt = None
        self._description_lte = None
        self._description_not = None
        self._description_not_contains = None
        self._description_not_ends_with = None
        self._description_not_in = None
        self._description_not_starts_with = None
        self._description_starts_with = None
        self._external_use = None
        self._external_use_not = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._internal = None
        self._internal_not = None
        self._ip_whitelist = None
        self._ip_whitelist_contains = None
        self._ip_whitelist_ends_with = None
        self._ip_whitelist_gt = None
        self._ip_whitelist_gte = None
        self._ip_whitelist_in = None
        self._ip_whitelist_lt = None
        self._ip_whitelist_lte = None
        self._ip_whitelist_not = None
        self._ip_whitelist_not_contains = None
        self._ip_whitelist_not_ends_with = None
        self._ip_whitelist_not_in = None
        self._ip_whitelist_not_starts_with = None
        self._ip_whitelist_starts_with = None
        self._iscsi_target = None
        self._local_id = None
        self._local_id_contains = None
        self._local_id_ends_with = None
        self._local_id_gt = None
        self._local_id_gte = None
        self._local_id_in = None
        self._local_id_lt = None
        self._local_id_lte = None
        self._local_id_not = None
        self._local_id_not_contains = None
        self._local_id_not_ends_with = None
        self._local_id_not_in = None
        self._local_id_not_starts_with = None
        self._local_id_starts_with = None
        self._name = None
        self._name_contains = None
        self._name_ends_with = None
        self._name_gt = None
        self._name_gte = None
        self._name_in = None
        self._name_lt = None
        self._name_lte = None
        self._name_not = None
        self._name_not_contains = None
        self._name_not_ends_with = None
        self._name_not_in = None
        self._name_not_starts_with = None
        self._name_starts_with = None
        self._nfs_export = None
        self._nvmf_subsystem = None
        self._replica_num = None
        self._replica_num_gt = None
        self._replica_num_gte = None
        self._replica_num_in = None
        self._replica_num_lt = None
        self._replica_num_lte = None
        self._replica_num_not = None
        self._replica_num_not_in = None
        self._thin_provision = None
        self._thin_provision_not = None
        self._type = None
        self._type_in = None
        self._type_not = None
        self._type_not_in = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.cluster = kwargs.get("cluster", None)
        self.description = kwargs.get("description", None)
        self.description_contains = kwargs.get("description_contains", None)
        self.description_ends_with = kwargs.get("description_ends_with", None)
        self.description_gt = kwargs.get("description_gt", None)
        self.description_gte = kwargs.get("description_gte", None)
        self.description_in = kwargs.get("description_in", None)
        self.description_lt = kwargs.get("description_lt", None)
        self.description_lte = kwargs.get("description_lte", None)
        self.description_not = kwargs.get("description_not", None)
        self.description_not_contains = kwargs.get("description_not_contains", None)
        self.description_not_ends_with = kwargs.get("description_not_ends_with", None)
        self.description_not_in = kwargs.get("description_not_in", None)
        self.description_not_starts_with = kwargs.get("description_not_starts_with", None)
        self.description_starts_with = kwargs.get("description_starts_with", None)
        self.external_use = kwargs.get("external_use", None)
        self.external_use_not = kwargs.get("external_use_not", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.internal = kwargs.get("internal", None)
        self.internal_not = kwargs.get("internal_not", None)
        self.ip_whitelist = kwargs.get("ip_whitelist", None)
        self.ip_whitelist_contains = kwargs.get("ip_whitelist_contains", None)
        self.ip_whitelist_ends_with = kwargs.get("ip_whitelist_ends_with", None)
        self.ip_whitelist_gt = kwargs.get("ip_whitelist_gt", None)
        self.ip_whitelist_gte = kwargs.get("ip_whitelist_gte", None)
        self.ip_whitelist_in = kwargs.get("ip_whitelist_in", None)
        self.ip_whitelist_lt = kwargs.get("ip_whitelist_lt", None)
        self.ip_whitelist_lte = kwargs.get("ip_whitelist_lte", None)
        self.ip_whitelist_not = kwargs.get("ip_whitelist_not", None)
        self.ip_whitelist_not_contains = kwargs.get("ip_whitelist_not_contains", None)
        self.ip_whitelist_not_ends_with = kwargs.get("ip_whitelist_not_ends_with", None)
        self.ip_whitelist_not_in = kwargs.get("ip_whitelist_not_in", None)
        self.ip_whitelist_not_starts_with = kwargs.get("ip_whitelist_not_starts_with", None)
        self.ip_whitelist_starts_with = kwargs.get("ip_whitelist_starts_with", None)
        self.iscsi_target = kwargs.get("iscsi_target", None)
        self.local_id = kwargs.get("local_id", None)
        self.local_id_contains = kwargs.get("local_id_contains", None)
        self.local_id_ends_with = kwargs.get("local_id_ends_with", None)
        self.local_id_gt = kwargs.get("local_id_gt", None)
        self.local_id_gte = kwargs.get("local_id_gte", None)
        self.local_id_in = kwargs.get("local_id_in", None)
        self.local_id_lt = kwargs.get("local_id_lt", None)
        self.local_id_lte = kwargs.get("local_id_lte", None)
        self.local_id_not = kwargs.get("local_id_not", None)
        self.local_id_not_contains = kwargs.get("local_id_not_contains", None)
        self.local_id_not_ends_with = kwargs.get("local_id_not_ends_with", None)
        self.local_id_not_in = kwargs.get("local_id_not_in", None)
        self.local_id_not_starts_with = kwargs.get("local_id_not_starts_with", None)
        self.local_id_starts_with = kwargs.get("local_id_starts_with", None)
        self.name = kwargs.get("name", None)
        self.name_contains = kwargs.get("name_contains", None)
        self.name_ends_with = kwargs.get("name_ends_with", None)
        self.name_gt = kwargs.get("name_gt", None)
        self.name_gte = kwargs.get("name_gte", None)
        self.name_in = kwargs.get("name_in", None)
        self.name_lt = kwargs.get("name_lt", None)
        self.name_lte = kwargs.get("name_lte", None)
        self.name_not = kwargs.get("name_not", None)
        self.name_not_contains = kwargs.get("name_not_contains", None)
        self.name_not_ends_with = kwargs.get("name_not_ends_with", None)
        self.name_not_in = kwargs.get("name_not_in", None)
        self.name_not_starts_with = kwargs.get("name_not_starts_with", None)
        self.name_starts_with = kwargs.get("name_starts_with", None)
        self.nfs_export = kwargs.get("nfs_export", None)
        self.nvmf_subsystem = kwargs.get("nvmf_subsystem", None)
        self.replica_num = kwargs.get("replica_num", None)
        self.replica_num_gt = kwargs.get("replica_num_gt", None)
        self.replica_num_gte = kwargs.get("replica_num_gte", None)
        self.replica_num_in = kwargs.get("replica_num_in", None)
        self.replica_num_lt = kwargs.get("replica_num_lt", None)
        self.replica_num_lte = kwargs.get("replica_num_lte", None)
        self.replica_num_not = kwargs.get("replica_num_not", None)
        self.replica_num_not_in = kwargs.get("replica_num_not_in", None)
        self.thin_provision = kwargs.get("thin_provision", None)
        self.thin_provision_not = kwargs.get("thin_provision_not", None)
        self.type = kwargs.get("type", None)
        self.type_in = kwargs.get("type_in", None)
        self.type_not = kwargs.get("type_not", None)
        self.type_not_in = kwargs.get("type_not_in", None)

    @property
    def _and(self):
        """Gets the _and of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The _and of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[ElfDataStoreWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this ElfDataStoreWhereInput.


        :param _and: The _and of this ElfDataStoreWhereInput.  # noqa: E501
        :type _and: list[ElfDataStoreWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The _not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[ElfDataStoreWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this ElfDataStoreWhereInput.


        :param _not: The _not of this ElfDataStoreWhereInput.  # noqa: E501
        :type _not: list[ElfDataStoreWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The _or of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[ElfDataStoreWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this ElfDataStoreWhereInput.


        :param _or: The _or of this ElfDataStoreWhereInput.  # noqa: E501
        :type _or: list[ElfDataStoreWhereInput]
        """

        self.__or = _or

    @property
    def cluster(self):
        """Gets the cluster of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The cluster of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: ClusterWhereInput
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ElfDataStoreWhereInput.


        :param cluster: The cluster of this ElfDataStoreWhereInput.  # noqa: E501
        :type cluster: ClusterWhereInput
        """

        self._cluster = cluster

    @property
    def description(self):
        """Gets the description of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ElfDataStoreWhereInput.


        :param description: The description of this ElfDataStoreWhereInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def description_contains(self):
        """Gets the description_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_contains

    @description_contains.setter
    def description_contains(self, description_contains):
        """Sets the description_contains of this ElfDataStoreWhereInput.


        :param description_contains: The description_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_contains: str
        """

        self._description_contains = description_contains

    @property
    def description_ends_with(self):
        """Gets the description_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_ends_with

    @description_ends_with.setter
    def description_ends_with(self, description_ends_with):
        """Sets the description_ends_with of this ElfDataStoreWhereInput.


        :param description_ends_with: The description_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_ends_with: str
        """

        self._description_ends_with = description_ends_with

    @property
    def description_gt(self):
        """Gets the description_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_gt

    @description_gt.setter
    def description_gt(self, description_gt):
        """Sets the description_gt of this ElfDataStoreWhereInput.


        :param description_gt: The description_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_gt: str
        """

        self._description_gt = description_gt

    @property
    def description_gte(self):
        """Gets the description_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_gte

    @description_gte.setter
    def description_gte(self, description_gte):
        """Sets the description_gte of this ElfDataStoreWhereInput.


        :param description_gte: The description_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_gte: str
        """

        self._description_gte = description_gte

    @property
    def description_in(self):
        """Gets the description_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._description_in

    @description_in.setter
    def description_in(self, description_in):
        """Sets the description_in of this ElfDataStoreWhereInput.


        :param description_in: The description_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_in: list[str]
        """

        self._description_in = description_in

    @property
    def description_lt(self):
        """Gets the description_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_lt

    @description_lt.setter
    def description_lt(self, description_lt):
        """Sets the description_lt of this ElfDataStoreWhereInput.


        :param description_lt: The description_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_lt: str
        """

        self._description_lt = description_lt

    @property
    def description_lte(self):
        """Gets the description_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_lte

    @description_lte.setter
    def description_lte(self, description_lte):
        """Sets the description_lte of this ElfDataStoreWhereInput.


        :param description_lte: The description_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_lte: str
        """

        self._description_lte = description_lte

    @property
    def description_not(self):
        """Gets the description_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_not

    @description_not.setter
    def description_not(self, description_not):
        """Sets the description_not of this ElfDataStoreWhereInput.


        :param description_not: The description_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_not: str
        """

        self._description_not = description_not

    @property
    def description_not_contains(self):
        """Gets the description_not_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_not_contains

    @description_not_contains.setter
    def description_not_contains(self, description_not_contains):
        """Sets the description_not_contains of this ElfDataStoreWhereInput.


        :param description_not_contains: The description_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_not_contains: str
        """

        self._description_not_contains = description_not_contains

    @property
    def description_not_ends_with(self):
        """Gets the description_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_not_ends_with

    @description_not_ends_with.setter
    def description_not_ends_with(self, description_not_ends_with):
        """Sets the description_not_ends_with of this ElfDataStoreWhereInput.


        :param description_not_ends_with: The description_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_not_ends_with: str
        """

        self._description_not_ends_with = description_not_ends_with

    @property
    def description_not_in(self):
        """Gets the description_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._description_not_in

    @description_not_in.setter
    def description_not_in(self, description_not_in):
        """Sets the description_not_in of this ElfDataStoreWhereInput.


        :param description_not_in: The description_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_not_in: list[str]
        """

        self._description_not_in = description_not_in

    @property
    def description_not_starts_with(self):
        """Gets the description_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_not_starts_with

    @description_not_starts_with.setter
    def description_not_starts_with(self, description_not_starts_with):
        """Sets the description_not_starts_with of this ElfDataStoreWhereInput.


        :param description_not_starts_with: The description_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_not_starts_with: str
        """

        self._description_not_starts_with = description_not_starts_with

    @property
    def description_starts_with(self):
        """Gets the description_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The description_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._description_starts_with

    @description_starts_with.setter
    def description_starts_with(self, description_starts_with):
        """Sets the description_starts_with of this ElfDataStoreWhereInput.


        :param description_starts_with: The description_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type description_starts_with: str
        """

        self._description_starts_with = description_starts_with

    @property
    def external_use(self):
        """Gets the external_use of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The external_use of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._external_use

    @external_use.setter
    def external_use(self, external_use):
        """Sets the external_use of this ElfDataStoreWhereInput.


        :param external_use: The external_use of this ElfDataStoreWhereInput.  # noqa: E501
        :type external_use: bool
        """

        self._external_use = external_use

    @property
    def external_use_not(self):
        """Gets the external_use_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The external_use_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._external_use_not

    @external_use_not.setter
    def external_use_not(self, external_use_not):
        """Sets the external_use_not of this ElfDataStoreWhereInput.


        :param external_use_not: The external_use_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type external_use_not: bool
        """

        self._external_use_not = external_use_not

    @property
    def id(self):
        """Gets the id of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElfDataStoreWhereInput.


        :param id: The id of this ElfDataStoreWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this ElfDataStoreWhereInput.


        :param id_contains: The id_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this ElfDataStoreWhereInput.


        :param id_ends_with: The id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this ElfDataStoreWhereInput.


        :param id_gt: The id_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this ElfDataStoreWhereInput.


        :param id_gte: The id_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this ElfDataStoreWhereInput.


        :param id_in: The id_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this ElfDataStoreWhereInput.


        :param id_lt: The id_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this ElfDataStoreWhereInput.


        :param id_lte: The id_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this ElfDataStoreWhereInput.


        :param id_not: The id_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this ElfDataStoreWhereInput.


        :param id_not_contains: The id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this ElfDataStoreWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this ElfDataStoreWhereInput.


        :param id_not_in: The id_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this ElfDataStoreWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this ElfDataStoreWhereInput.


        :param id_starts_with: The id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def internal(self):
        """Gets the internal of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The internal of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this ElfDataStoreWhereInput.


        :param internal: The internal of this ElfDataStoreWhereInput.  # noqa: E501
        :type internal: bool
        """

        self._internal = internal

    @property
    def internal_not(self):
        """Gets the internal_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The internal_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._internal_not

    @internal_not.setter
    def internal_not(self, internal_not):
        """Sets the internal_not of this ElfDataStoreWhereInput.


        :param internal_not: The internal_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type internal_not: bool
        """

        self._internal_not = internal_not

    @property
    def ip_whitelist(self):
        """Gets the ip_whitelist of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist

    @ip_whitelist.setter
    def ip_whitelist(self, ip_whitelist):
        """Sets the ip_whitelist of this ElfDataStoreWhereInput.


        :param ip_whitelist: The ip_whitelist of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist: str
        """

        self._ip_whitelist = ip_whitelist

    @property
    def ip_whitelist_contains(self):
        """Gets the ip_whitelist_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_contains

    @ip_whitelist_contains.setter
    def ip_whitelist_contains(self, ip_whitelist_contains):
        """Sets the ip_whitelist_contains of this ElfDataStoreWhereInput.


        :param ip_whitelist_contains: The ip_whitelist_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_contains: str
        """

        self._ip_whitelist_contains = ip_whitelist_contains

    @property
    def ip_whitelist_ends_with(self):
        """Gets the ip_whitelist_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_ends_with

    @ip_whitelist_ends_with.setter
    def ip_whitelist_ends_with(self, ip_whitelist_ends_with):
        """Sets the ip_whitelist_ends_with of this ElfDataStoreWhereInput.


        :param ip_whitelist_ends_with: The ip_whitelist_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_ends_with: str
        """

        self._ip_whitelist_ends_with = ip_whitelist_ends_with

    @property
    def ip_whitelist_gt(self):
        """Gets the ip_whitelist_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_gt

    @ip_whitelist_gt.setter
    def ip_whitelist_gt(self, ip_whitelist_gt):
        """Sets the ip_whitelist_gt of this ElfDataStoreWhereInput.


        :param ip_whitelist_gt: The ip_whitelist_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_gt: str
        """

        self._ip_whitelist_gt = ip_whitelist_gt

    @property
    def ip_whitelist_gte(self):
        """Gets the ip_whitelist_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_gte

    @ip_whitelist_gte.setter
    def ip_whitelist_gte(self, ip_whitelist_gte):
        """Sets the ip_whitelist_gte of this ElfDataStoreWhereInput.


        :param ip_whitelist_gte: The ip_whitelist_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_gte: str
        """

        self._ip_whitelist_gte = ip_whitelist_gte

    @property
    def ip_whitelist_in(self):
        """Gets the ip_whitelist_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_whitelist_in

    @ip_whitelist_in.setter
    def ip_whitelist_in(self, ip_whitelist_in):
        """Sets the ip_whitelist_in of this ElfDataStoreWhereInput.


        :param ip_whitelist_in: The ip_whitelist_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_in: list[str]
        """

        self._ip_whitelist_in = ip_whitelist_in

    @property
    def ip_whitelist_lt(self):
        """Gets the ip_whitelist_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_lt

    @ip_whitelist_lt.setter
    def ip_whitelist_lt(self, ip_whitelist_lt):
        """Sets the ip_whitelist_lt of this ElfDataStoreWhereInput.


        :param ip_whitelist_lt: The ip_whitelist_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_lt: str
        """

        self._ip_whitelist_lt = ip_whitelist_lt

    @property
    def ip_whitelist_lte(self):
        """Gets the ip_whitelist_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_lte

    @ip_whitelist_lte.setter
    def ip_whitelist_lte(self, ip_whitelist_lte):
        """Sets the ip_whitelist_lte of this ElfDataStoreWhereInput.


        :param ip_whitelist_lte: The ip_whitelist_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_lte: str
        """

        self._ip_whitelist_lte = ip_whitelist_lte

    @property
    def ip_whitelist_not(self):
        """Gets the ip_whitelist_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_not

    @ip_whitelist_not.setter
    def ip_whitelist_not(self, ip_whitelist_not):
        """Sets the ip_whitelist_not of this ElfDataStoreWhereInput.


        :param ip_whitelist_not: The ip_whitelist_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_not: str
        """

        self._ip_whitelist_not = ip_whitelist_not

    @property
    def ip_whitelist_not_contains(self):
        """Gets the ip_whitelist_not_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_not_contains

    @ip_whitelist_not_contains.setter
    def ip_whitelist_not_contains(self, ip_whitelist_not_contains):
        """Sets the ip_whitelist_not_contains of this ElfDataStoreWhereInput.


        :param ip_whitelist_not_contains: The ip_whitelist_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_not_contains: str
        """

        self._ip_whitelist_not_contains = ip_whitelist_not_contains

    @property
    def ip_whitelist_not_ends_with(self):
        """Gets the ip_whitelist_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_not_ends_with

    @ip_whitelist_not_ends_with.setter
    def ip_whitelist_not_ends_with(self, ip_whitelist_not_ends_with):
        """Sets the ip_whitelist_not_ends_with of this ElfDataStoreWhereInput.


        :param ip_whitelist_not_ends_with: The ip_whitelist_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_not_ends_with: str
        """

        self._ip_whitelist_not_ends_with = ip_whitelist_not_ends_with

    @property
    def ip_whitelist_not_in(self):
        """Gets the ip_whitelist_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_whitelist_not_in

    @ip_whitelist_not_in.setter
    def ip_whitelist_not_in(self, ip_whitelist_not_in):
        """Sets the ip_whitelist_not_in of this ElfDataStoreWhereInput.


        :param ip_whitelist_not_in: The ip_whitelist_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_not_in: list[str]
        """

        self._ip_whitelist_not_in = ip_whitelist_not_in

    @property
    def ip_whitelist_not_starts_with(self):
        """Gets the ip_whitelist_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_not_starts_with

    @ip_whitelist_not_starts_with.setter
    def ip_whitelist_not_starts_with(self, ip_whitelist_not_starts_with):
        """Sets the ip_whitelist_not_starts_with of this ElfDataStoreWhereInput.


        :param ip_whitelist_not_starts_with: The ip_whitelist_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_not_starts_with: str
        """

        self._ip_whitelist_not_starts_with = ip_whitelist_not_starts_with

    @property
    def ip_whitelist_starts_with(self):
        """Gets the ip_whitelist_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The ip_whitelist_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist_starts_with

    @ip_whitelist_starts_with.setter
    def ip_whitelist_starts_with(self, ip_whitelist_starts_with):
        """Sets the ip_whitelist_starts_with of this ElfDataStoreWhereInput.


        :param ip_whitelist_starts_with: The ip_whitelist_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type ip_whitelist_starts_with: str
        """

        self._ip_whitelist_starts_with = ip_whitelist_starts_with

    @property
    def iscsi_target(self):
        """Gets the iscsi_target of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The iscsi_target of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: IscsiTargetWhereInput
        """
        return self._iscsi_target

    @iscsi_target.setter
    def iscsi_target(self, iscsi_target):
        """Sets the iscsi_target of this ElfDataStoreWhereInput.


        :param iscsi_target: The iscsi_target of this ElfDataStoreWhereInput.  # noqa: E501
        :type iscsi_target: IscsiTargetWhereInput
        """

        self._iscsi_target = iscsi_target

    @property
    def local_id(self):
        """Gets the local_id of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this ElfDataStoreWhereInput.


        :param local_id: The local_id of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def local_id_contains(self):
        """Gets the local_id_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_contains

    @local_id_contains.setter
    def local_id_contains(self, local_id_contains):
        """Sets the local_id_contains of this ElfDataStoreWhereInput.


        :param local_id_contains: The local_id_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_contains: str
        """

        self._local_id_contains = local_id_contains

    @property
    def local_id_ends_with(self):
        """Gets the local_id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_ends_with

    @local_id_ends_with.setter
    def local_id_ends_with(self, local_id_ends_with):
        """Sets the local_id_ends_with of this ElfDataStoreWhereInput.


        :param local_id_ends_with: The local_id_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_ends_with: str
        """

        self._local_id_ends_with = local_id_ends_with

    @property
    def local_id_gt(self):
        """Gets the local_id_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gt

    @local_id_gt.setter
    def local_id_gt(self, local_id_gt):
        """Sets the local_id_gt of this ElfDataStoreWhereInput.


        :param local_id_gt: The local_id_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_gt: str
        """

        self._local_id_gt = local_id_gt

    @property
    def local_id_gte(self):
        """Gets the local_id_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_gte

    @local_id_gte.setter
    def local_id_gte(self, local_id_gte):
        """Sets the local_id_gte of this ElfDataStoreWhereInput.


        :param local_id_gte: The local_id_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_gte: str
        """

        self._local_id_gte = local_id_gte

    @property
    def local_id_in(self):
        """Gets the local_id_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_in

    @local_id_in.setter
    def local_id_in(self, local_id_in):
        """Sets the local_id_in of this ElfDataStoreWhereInput.


        :param local_id_in: The local_id_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_in: list[str]
        """

        self._local_id_in = local_id_in

    @property
    def local_id_lt(self):
        """Gets the local_id_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lt

    @local_id_lt.setter
    def local_id_lt(self, local_id_lt):
        """Sets the local_id_lt of this ElfDataStoreWhereInput.


        :param local_id_lt: The local_id_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_lt: str
        """

        self._local_id_lt = local_id_lt

    @property
    def local_id_lte(self):
        """Gets the local_id_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_lte

    @local_id_lte.setter
    def local_id_lte(self, local_id_lte):
        """Sets the local_id_lte of this ElfDataStoreWhereInput.


        :param local_id_lte: The local_id_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_lte: str
        """

        self._local_id_lte = local_id_lte

    @property
    def local_id_not(self):
        """Gets the local_id_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not

    @local_id_not.setter
    def local_id_not(self, local_id_not):
        """Sets the local_id_not of this ElfDataStoreWhereInput.


        :param local_id_not: The local_id_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_not: str
        """

        self._local_id_not = local_id_not

    @property
    def local_id_not_contains(self):
        """Gets the local_id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_contains

    @local_id_not_contains.setter
    def local_id_not_contains(self, local_id_not_contains):
        """Sets the local_id_not_contains of this ElfDataStoreWhereInput.


        :param local_id_not_contains: The local_id_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_not_contains: str
        """

        self._local_id_not_contains = local_id_not_contains

    @property
    def local_id_not_ends_with(self):
        """Gets the local_id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_ends_with

    @local_id_not_ends_with.setter
    def local_id_not_ends_with(self, local_id_not_ends_with):
        """Sets the local_id_not_ends_with of this ElfDataStoreWhereInput.


        :param local_id_not_ends_with: The local_id_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_not_ends_with: str
        """

        self._local_id_not_ends_with = local_id_not_ends_with

    @property
    def local_id_not_in(self):
        """Gets the local_id_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_id_not_in

    @local_id_not_in.setter
    def local_id_not_in(self, local_id_not_in):
        """Sets the local_id_not_in of this ElfDataStoreWhereInput.


        :param local_id_not_in: The local_id_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_not_in: list[str]
        """

        self._local_id_not_in = local_id_not_in

    @property
    def local_id_not_starts_with(self):
        """Gets the local_id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_not_starts_with

    @local_id_not_starts_with.setter
    def local_id_not_starts_with(self, local_id_not_starts_with):
        """Sets the local_id_not_starts_with of this ElfDataStoreWhereInput.


        :param local_id_not_starts_with: The local_id_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_not_starts_with: str
        """

        self._local_id_not_starts_with = local_id_not_starts_with

    @property
    def local_id_starts_with(self):
        """Gets the local_id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The local_id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._local_id_starts_with

    @local_id_starts_with.setter
    def local_id_starts_with(self, local_id_starts_with):
        """Sets the local_id_starts_with of this ElfDataStoreWhereInput.


        :param local_id_starts_with: The local_id_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type local_id_starts_with: str
        """

        self._local_id_starts_with = local_id_starts_with

    @property
    def name(self):
        """Gets the name of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElfDataStoreWhereInput.


        :param name: The name of this ElfDataStoreWhereInput.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def name_contains(self):
        """Gets the name_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_contains

    @name_contains.setter
    def name_contains(self, name_contains):
        """Sets the name_contains of this ElfDataStoreWhereInput.


        :param name_contains: The name_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_contains: str
        """

        self._name_contains = name_contains

    @property
    def name_ends_with(self):
        """Gets the name_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_ends_with

    @name_ends_with.setter
    def name_ends_with(self, name_ends_with):
        """Sets the name_ends_with of this ElfDataStoreWhereInput.


        :param name_ends_with: The name_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_ends_with: str
        """

        self._name_ends_with = name_ends_with

    @property
    def name_gt(self):
        """Gets the name_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_gt

    @name_gt.setter
    def name_gt(self, name_gt):
        """Sets the name_gt of this ElfDataStoreWhereInput.


        :param name_gt: The name_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_gt: str
        """

        self._name_gt = name_gt

    @property
    def name_gte(self):
        """Gets the name_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_gte

    @name_gte.setter
    def name_gte(self, name_gte):
        """Sets the name_gte of this ElfDataStoreWhereInput.


        :param name_gte: The name_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_gte: str
        """

        self._name_gte = name_gte

    @property
    def name_in(self):
        """Gets the name_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._name_in

    @name_in.setter
    def name_in(self, name_in):
        """Sets the name_in of this ElfDataStoreWhereInput.


        :param name_in: The name_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_in: list[str]
        """

        self._name_in = name_in

    @property
    def name_lt(self):
        """Gets the name_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_lt

    @name_lt.setter
    def name_lt(self, name_lt):
        """Sets the name_lt of this ElfDataStoreWhereInput.


        :param name_lt: The name_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_lt: str
        """

        self._name_lt = name_lt

    @property
    def name_lte(self):
        """Gets the name_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_lte

    @name_lte.setter
    def name_lte(self, name_lte):
        """Sets the name_lte of this ElfDataStoreWhereInput.


        :param name_lte: The name_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_lte: str
        """

        self._name_lte = name_lte

    @property
    def name_not(self):
        """Gets the name_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not

    @name_not.setter
    def name_not(self, name_not):
        """Sets the name_not of this ElfDataStoreWhereInput.


        :param name_not: The name_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_not: str
        """

        self._name_not = name_not

    @property
    def name_not_contains(self):
        """Gets the name_not_contains of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_contains

    @name_not_contains.setter
    def name_not_contains(self, name_not_contains):
        """Sets the name_not_contains of this ElfDataStoreWhereInput.


        :param name_not_contains: The name_not_contains of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_not_contains: str
        """

        self._name_not_contains = name_not_contains

    @property
    def name_not_ends_with(self):
        """Gets the name_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_ends_with

    @name_not_ends_with.setter
    def name_not_ends_with(self, name_not_ends_with):
        """Sets the name_not_ends_with of this ElfDataStoreWhereInput.


        :param name_not_ends_with: The name_not_ends_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_not_ends_with: str
        """

        self._name_not_ends_with = name_not_ends_with

    @property
    def name_not_in(self):
        """Gets the name_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._name_not_in

    @name_not_in.setter
    def name_not_in(self, name_not_in):
        """Sets the name_not_in of this ElfDataStoreWhereInput.


        :param name_not_in: The name_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_not_in: list[str]
        """

        self._name_not_in = name_not_in

    @property
    def name_not_starts_with(self):
        """Gets the name_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_not_starts_with

    @name_not_starts_with.setter
    def name_not_starts_with(self, name_not_starts_with):
        """Sets the name_not_starts_with of this ElfDataStoreWhereInput.


        :param name_not_starts_with: The name_not_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_not_starts_with: str
        """

        self._name_not_starts_with = name_not_starts_with

    @property
    def name_starts_with(self):
        """Gets the name_starts_with of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The name_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._name_starts_with

    @name_starts_with.setter
    def name_starts_with(self, name_starts_with):
        """Sets the name_starts_with of this ElfDataStoreWhereInput.


        :param name_starts_with: The name_starts_with of this ElfDataStoreWhereInput.  # noqa: E501
        :type name_starts_with: str
        """

        self._name_starts_with = name_starts_with

    @property
    def nfs_export(self):
        """Gets the nfs_export of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The nfs_export of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: NfsExportWhereInput
        """
        return self._nfs_export

    @nfs_export.setter
    def nfs_export(self, nfs_export):
        """Sets the nfs_export of this ElfDataStoreWhereInput.


        :param nfs_export: The nfs_export of this ElfDataStoreWhereInput.  # noqa: E501
        :type nfs_export: NfsExportWhereInput
        """

        self._nfs_export = nfs_export

    @property
    def nvmf_subsystem(self):
        """Gets the nvmf_subsystem of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The nvmf_subsystem of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: NvmfSubsystemWhereInput
        """
        return self._nvmf_subsystem

    @nvmf_subsystem.setter
    def nvmf_subsystem(self, nvmf_subsystem):
        """Sets the nvmf_subsystem of this ElfDataStoreWhereInput.


        :param nvmf_subsystem: The nvmf_subsystem of this ElfDataStoreWhereInput.  # noqa: E501
        :type nvmf_subsystem: NvmfSubsystemWhereInput
        """

        self._nvmf_subsystem = nvmf_subsystem

    @property
    def replica_num(self):
        """Gets the replica_num of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num

    @replica_num.setter
    def replica_num(self, replica_num):
        """Sets the replica_num of this ElfDataStoreWhereInput.


        :param replica_num: The replica_num of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num: int
        """

        self._replica_num = replica_num

    @property
    def replica_num_gt(self):
        """Gets the replica_num_gt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num_gt

    @replica_num_gt.setter
    def replica_num_gt(self, replica_num_gt):
        """Sets the replica_num_gt of this ElfDataStoreWhereInput.


        :param replica_num_gt: The replica_num_gt of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_gt: int
        """

        self._replica_num_gt = replica_num_gt

    @property
    def replica_num_gte(self):
        """Gets the replica_num_gte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num_gte

    @replica_num_gte.setter
    def replica_num_gte(self, replica_num_gte):
        """Sets the replica_num_gte of this ElfDataStoreWhereInput.


        :param replica_num_gte: The replica_num_gte of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_gte: int
        """

        self._replica_num_gte = replica_num_gte

    @property
    def replica_num_in(self):
        """Gets the replica_num_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._replica_num_in

    @replica_num_in.setter
    def replica_num_in(self, replica_num_in):
        """Sets the replica_num_in of this ElfDataStoreWhereInput.


        :param replica_num_in: The replica_num_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_in: list[int]
        """

        self._replica_num_in = replica_num_in

    @property
    def replica_num_lt(self):
        """Gets the replica_num_lt of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num_lt

    @replica_num_lt.setter
    def replica_num_lt(self, replica_num_lt):
        """Sets the replica_num_lt of this ElfDataStoreWhereInput.


        :param replica_num_lt: The replica_num_lt of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_lt: int
        """

        self._replica_num_lt = replica_num_lt

    @property
    def replica_num_lte(self):
        """Gets the replica_num_lte of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num_lte

    @replica_num_lte.setter
    def replica_num_lte(self, replica_num_lte):
        """Sets the replica_num_lte of this ElfDataStoreWhereInput.


        :param replica_num_lte: The replica_num_lte of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_lte: int
        """

        self._replica_num_lte = replica_num_lte

    @property
    def replica_num_not(self):
        """Gets the replica_num_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._replica_num_not

    @replica_num_not.setter
    def replica_num_not(self, replica_num_not):
        """Sets the replica_num_not of this ElfDataStoreWhereInput.


        :param replica_num_not: The replica_num_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_not: int
        """

        self._replica_num_not = replica_num_not

    @property
    def replica_num_not_in(self):
        """Gets the replica_num_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The replica_num_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._replica_num_not_in

    @replica_num_not_in.setter
    def replica_num_not_in(self, replica_num_not_in):
        """Sets the replica_num_not_in of this ElfDataStoreWhereInput.


        :param replica_num_not_in: The replica_num_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type replica_num_not_in: list[int]
        """

        self._replica_num_not_in = replica_num_not_in

    @property
    def thin_provision(self):
        """Gets the thin_provision of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The thin_provision of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provision

    @thin_provision.setter
    def thin_provision(self, thin_provision):
        """Sets the thin_provision of this ElfDataStoreWhereInput.


        :param thin_provision: The thin_provision of this ElfDataStoreWhereInput.  # noqa: E501
        :type thin_provision: bool
        """

        self._thin_provision = thin_provision

    @property
    def thin_provision_not(self):
        """Gets the thin_provision_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The thin_provision_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provision_not

    @thin_provision_not.setter
    def thin_provision_not(self, thin_provision_not):
        """Sets the thin_provision_not of this ElfDataStoreWhereInput.


        :param thin_provision_not: The thin_provision_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type thin_provision_not: bool
        """

        self._thin_provision_not = thin_provision_not

    @property
    def type(self):
        """Gets the type of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The type of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: ElfDataStoreType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ElfDataStoreWhereInput.


        :param type: The type of this ElfDataStoreWhereInput.  # noqa: E501
        :type type: ElfDataStoreType
        """

        self._type = type

    @property
    def type_in(self):
        """Gets the type_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The type_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[ElfDataStoreType]
        """
        return self._type_in

    @type_in.setter
    def type_in(self, type_in):
        """Sets the type_in of this ElfDataStoreWhereInput.


        :param type_in: The type_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type type_in: list[ElfDataStoreType]
        """

        self._type_in = type_in

    @property
    def type_not(self):
        """Gets the type_not of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The type_not of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: ElfDataStoreType
        """
        return self._type_not

    @type_not.setter
    def type_not(self, type_not):
        """Sets the type_not of this ElfDataStoreWhereInput.


        :param type_not: The type_not of this ElfDataStoreWhereInput.  # noqa: E501
        :type type_not: ElfDataStoreType
        """

        self._type_not = type_not

    @property
    def type_not_in(self):
        """Gets the type_not_in of this ElfDataStoreWhereInput.  # noqa: E501


        :return: The type_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :rtype: list[ElfDataStoreType]
        """
        return self._type_not_in

    @type_not_in.setter
    def type_not_in(self, type_not_in):
        """Sets the type_not_in of this ElfDataStoreWhereInput.


        :param type_not_in: The type_not_in of this ElfDataStoreWhereInput.  # noqa: E501
        :type type_not_in: list[ElfDataStoreType]
        """

        self._type_not_in = type_not_in

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElfDataStoreWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElfDataStoreWhereInput):
            return True

        return self.to_dict() != other.to_dict()
