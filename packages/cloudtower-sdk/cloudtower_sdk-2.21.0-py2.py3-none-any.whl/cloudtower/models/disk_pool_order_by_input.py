# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class DiskPoolOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CHUNK_ID_ASC = "chunk_id_ASC"
    CHUNK_ID_DESC = "chunk_id_DESC"
    CHUNK_INS_ID_ASC = "chunk_ins_id_ASC"
    CHUNK_INS_ID_DESC = "chunk_ins_id_DESC"
    DATA_SPACE_USAGE_ASC = "data_space_usage_ASC"
    DATA_SPACE_USAGE_DESC = "data_space_usage_DESC"
    DIRTY_CACHE_SPACE_ASC = "dirty_cache_space_ASC"
    DIRTY_CACHE_SPACE_DESC = "dirty_cache_space_DESC"
    DIRTY_CACHE_USAGE_ASC = "dirty_cache_usage_ASC"
    DIRTY_CACHE_USAGE_DESC = "dirty_cache_usage_DESC"
    FAILURE_CACHE_SPACE_ASC = "failure_cache_space_ASC"
    FAILURE_CACHE_SPACE_DESC = "failure_cache_space_DESC"
    FAILURE_DATA_SPACE_ASC = "failure_data_space_ASC"
    FAILURE_DATA_SPACE_DESC = "failure_data_space_DESC"
    HDD_DISK_COUNT_ASC = "hdd_disk_count_ASC"
    HDD_DISK_COUNT_DESC = "hdd_disk_count_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    NUMA_NODE_ASC = "numa_node_ASC"
    NUMA_NODE_DESC = "numa_node_DESC"
    NVME_SSD_DISK_COUNT_ASC = "nvme_ssd_disk_count_ASC"
    NVME_SSD_DISK_COUNT_DESC = "nvme_ssd_disk_count_DESC"
    PERF_ALLOCATED_DATA_SPACE_ASC = "perf_allocated_data_space_ASC"
    PERF_ALLOCATED_DATA_SPACE_DESC = "perf_allocated_data_space_DESC"
    PERF_FAILURE_DATA_SPACE_ASC = "perf_failure_data_space_ASC"
    PERF_FAILURE_DATA_SPACE_DESC = "perf_failure_data_space_DESC"
    PERF_TOTAL_DATA_CAPACITY_ASC = "perf_total_data_capacity_ASC"
    PERF_TOTAL_DATA_CAPACITY_DESC = "perf_total_data_capacity_DESC"
    PERF_USED_DATA_SPACE_ASC = "perf_used_data_space_ASC"
    PERF_USED_DATA_SPACE_DESC = "perf_used_data_space_DESC"
    PERF_VALID_DATA_SPACE_ASC = "perf_valid_data_space_ASC"
    PERF_VALID_DATA_SPACE_DESC = "perf_valid_data_space_DESC"
    PLANNED_PRIORITIZED_SPACE_ASC = "planned_prioritized_space_ASC"
    PLANNED_PRIORITIZED_SPACE_DESC = "planned_prioritized_space_DESC"
    PRIO_SPACE_PERCENTAGE_ASC = "prio_space_percentage_ASC"
    PRIO_SPACE_PERCENTAGE_DESC = "prio_space_percentage_DESC"
    SATA_OR_SAS_SSD_DISK_COUNT_ASC = "sata_or_sas_ssd_disk_count_ASC"
    SATA_OR_SAS_SSD_DISK_COUNT_DESC = "sata_or_sas_ssd_disk_count_DESC"
    STATUS_ASC = "status_ASC"
    STATUS_DESC = "status_DESC"
    TOTAL_CACHE_CAPACITY_ASC = "total_cache_capacity_ASC"
    TOTAL_CACHE_CAPACITY_DESC = "total_cache_capacity_DESC"
    TOTAL_DATA_CAPACITY_ASC = "total_data_capacity_ASC"
    TOTAL_DATA_CAPACITY_DESC = "total_data_capacity_DESC"
    USE_STATE_ASC = "use_state_ASC"
    USE_STATE_DESC = "use_state_DESC"
    USED_CACHE_SPACE_ASC = "used_cache_space_ASC"
    USED_CACHE_SPACE_DESC = "used_cache_space_DESC"
    USED_DATA_SPACE_ASC = "used_data_space_ASC"
    USED_DATA_SPACE_DESC = "used_data_space_DESC"
    VALID_CACHE_SPACE_ASC = "valid_cache_space_ASC"
    VALID_CACHE_SPACE_DESC = "valid_cache_space_DESC"
    VALID_FREE_CACHE_SPACE_ASC = "valid_free_cache_space_ASC"
    VALID_FREE_CACHE_SPACE_DESC = "valid_free_cache_space_DESC"

    allowable_values = [CHUNK_ID_ASC, CHUNK_ID_DESC, CHUNK_INS_ID_ASC, CHUNK_INS_ID_DESC, DATA_SPACE_USAGE_ASC, DATA_SPACE_USAGE_DESC, DIRTY_CACHE_SPACE_ASC, DIRTY_CACHE_SPACE_DESC, DIRTY_CACHE_USAGE_ASC, DIRTY_CACHE_USAGE_DESC, FAILURE_CACHE_SPACE_ASC, FAILURE_CACHE_SPACE_DESC, FAILURE_DATA_SPACE_ASC, FAILURE_DATA_SPACE_DESC, HDD_DISK_COUNT_ASC, HDD_DISK_COUNT_DESC, ID_ASC, ID_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, NUMA_NODE_ASC, NUMA_NODE_DESC, NVME_SSD_DISK_COUNT_ASC, NVME_SSD_DISK_COUNT_DESC, PERF_ALLOCATED_DATA_SPACE_ASC, PERF_ALLOCATED_DATA_SPACE_DESC, PERF_FAILURE_DATA_SPACE_ASC, PERF_FAILURE_DATA_SPACE_DESC, PERF_TOTAL_DATA_CAPACITY_ASC, PERF_TOTAL_DATA_CAPACITY_DESC, PERF_USED_DATA_SPACE_ASC, PERF_USED_DATA_SPACE_DESC, PERF_VALID_DATA_SPACE_ASC, PERF_VALID_DATA_SPACE_DESC, PLANNED_PRIORITIZED_SPACE_ASC, PLANNED_PRIORITIZED_SPACE_DESC, PRIO_SPACE_PERCENTAGE_ASC, PRIO_SPACE_PERCENTAGE_DESC, SATA_OR_SAS_SSD_DISK_COUNT_ASC, SATA_OR_SAS_SSD_DISK_COUNT_DESC, STATUS_ASC, STATUS_DESC, TOTAL_CACHE_CAPACITY_ASC, TOTAL_CACHE_CAPACITY_DESC, TOTAL_DATA_CAPACITY_ASC, TOTAL_DATA_CAPACITY_DESC, USE_STATE_ASC, USE_STATE_DESC, USED_CACHE_SPACE_ASC, USED_CACHE_SPACE_DESC, USED_DATA_SPACE_ASC, USED_DATA_SPACE_DESC, VALID_CACHE_SPACE_ASC, VALID_CACHE_SPACE_DESC, VALID_FREE_CACHE_SPACE_ASC, VALID_FREE_CACHE_SPACE_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """DiskPoolOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskPoolOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiskPoolOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
