# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class NodeTopo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brick_topo': 'NestedBrickTopo',
        'cluster': 'NestedCluster',
        'cluster_topo': 'NestedClusterTopo',
        'host': 'NestedHost',
        'id': 'str',
        'local_id': 'str',
        'name': 'str',
        'position': 'NestedPosition'
    }

    attribute_map = {
        'brick_topo': 'brick_topo',
        'cluster': 'cluster',
        'cluster_topo': 'cluster_topo',
        'host': 'host',
        'id': 'id',
        'local_id': 'local_id',
        'name': 'name',
        'position': 'position'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """NodeTopo - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._brick_topo = None
        self._cluster = None
        self._cluster_topo = None
        self._host = None
        self._id = None
        self._local_id = None
        self._name = None
        self._position = None
        self.discriminator = None

        self.brick_topo = kwargs.get("brick_topo", None)
        if "cluster" in kwargs:
            self.cluster = kwargs["cluster"]
        self.cluster_topo = kwargs.get("cluster_topo", None)
        if "host" in kwargs:
            self.host = kwargs["host"]
        if "id" in kwargs:
            self.id = kwargs["id"]
        if "local_id" in kwargs:
            self.local_id = kwargs["local_id"]
        if "name" in kwargs:
            self.name = kwargs["name"]
        if "position" in kwargs:
            self.position = kwargs["position"]

    @property
    def brick_topo(self):
        """Gets the brick_topo of this NodeTopo.  # noqa: E501


        :return: The brick_topo of this NodeTopo.  # noqa: E501
        :rtype: NestedBrickTopo
        """
        return self._brick_topo

    @brick_topo.setter
    def brick_topo(self, brick_topo):
        """Sets the brick_topo of this NodeTopo.


        :param brick_topo: The brick_topo of this NodeTopo.  # noqa: E501
        :type brick_topo: NestedBrickTopo
        """

        self._brick_topo = brick_topo

    @property
    def cluster(self):
        """Gets the cluster of this NodeTopo.  # noqa: E501


        :return: The cluster of this NodeTopo.  # noqa: E501
        :rtype: NestedCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this NodeTopo.


        :param cluster: The cluster of this NodeTopo.  # noqa: E501
        :type cluster: NestedCluster
        """
        if self.local_vars_configuration.client_side_validation and cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def cluster_topo(self):
        """Gets the cluster_topo of this NodeTopo.  # noqa: E501


        :return: The cluster_topo of this NodeTopo.  # noqa: E501
        :rtype: NestedClusterTopo
        """
        return self._cluster_topo

    @cluster_topo.setter
    def cluster_topo(self, cluster_topo):
        """Sets the cluster_topo of this NodeTopo.


        :param cluster_topo: The cluster_topo of this NodeTopo.  # noqa: E501
        :type cluster_topo: NestedClusterTopo
        """

        self._cluster_topo = cluster_topo

    @property
    def host(self):
        """Gets the host of this NodeTopo.  # noqa: E501


        :return: The host of this NodeTopo.  # noqa: E501
        :rtype: NestedHost
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this NodeTopo.


        :param host: The host of this NodeTopo.  # noqa: E501
        :type host: NestedHost
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def id(self):
        """Gets the id of this NodeTopo.  # noqa: E501


        :return: The id of this NodeTopo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeTopo.


        :param id: The id of this NodeTopo.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def local_id(self):
        """Gets the local_id of this NodeTopo.  # noqa: E501


        :return: The local_id of this NodeTopo.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this NodeTopo.


        :param local_id: The local_id of this NodeTopo.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def name(self):
        """Gets the name of this NodeTopo.  # noqa: E501


        :return: The name of this NodeTopo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeTopo.


        :param name: The name of this NodeTopo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def position(self):
        """Gets the position of this NodeTopo.  # noqa: E501


        :return: The position of this NodeTopo.  # noqa: E501
        :rtype: NestedPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NodeTopo.


        :param position: The position of this NodeTopo.  # noqa: E501
        :type position: NestedPosition
        """
        if self.local_vars_configuration.client_side_validation and position is None:  # noqa: E501
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeTopo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeTopo):
            return True

        return self.to_dict() != other.to_dict()
