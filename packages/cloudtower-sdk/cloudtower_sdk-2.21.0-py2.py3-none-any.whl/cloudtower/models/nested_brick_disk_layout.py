# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class NestedBrickDiskLayout(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column': 'int',
        'direction': 'Direction',
        'phase': 'BrickPhaseEnum',
        'row': 'int'
    }

    attribute_map = {
        'column': 'column',
        'direction': 'direction',
        'phase': 'phase',
        'row': 'row'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """NestedBrickDiskLayout - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._column = None
        self._direction = None
        self._phase = None
        self._row = None
        self.discriminator = None

        if "column" in kwargs:
            self.column = kwargs["column"]
        if "direction" in kwargs:
            self.direction = kwargs["direction"]
        if "phase" in kwargs:
            self.phase = kwargs["phase"]
        if "row" in kwargs:
            self.row = kwargs["row"]

    @property
    def column(self):
        """Gets the column of this NestedBrickDiskLayout.  # noqa: E501


        :return: The column of this NestedBrickDiskLayout.  # noqa: E501
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this NestedBrickDiskLayout.


        :param column: The column of this NestedBrickDiskLayout.  # noqa: E501
        :type column: int
        """
        if self.local_vars_configuration.client_side_validation and column is None:  # noqa: E501
            raise ValueError("Invalid value for `column`, must not be `None`")  # noqa: E501

        self._column = column

    @property
    def direction(self):
        """Gets the direction of this NestedBrickDiskLayout.  # noqa: E501


        :return: The direction of this NestedBrickDiskLayout.  # noqa: E501
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this NestedBrickDiskLayout.


        :param direction: The direction of this NestedBrickDiskLayout.  # noqa: E501
        :type direction: Direction
        """
        if self.local_vars_configuration.client_side_validation and direction is None:  # noqa: E501
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def phase(self):
        """Gets the phase of this NestedBrickDiskLayout.  # noqa: E501


        :return: The phase of this NestedBrickDiskLayout.  # noqa: E501
        :rtype: BrickPhaseEnum
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this NestedBrickDiskLayout.


        :param phase: The phase of this NestedBrickDiskLayout.  # noqa: E501
        :type phase: BrickPhaseEnum
        """
        if self.local_vars_configuration.client_side_validation and phase is None:  # noqa: E501
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501

        self._phase = phase

    @property
    def row(self):
        """Gets the row of this NestedBrickDiskLayout.  # noqa: E501


        :return: The row of this NestedBrickDiskLayout.  # noqa: E501
        :rtype: int
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this NestedBrickDiskLayout.


        :param row: The row of this NestedBrickDiskLayout.  # noqa: E501
        :type row: int
        """
        if self.local_vars_configuration.client_side_validation and row is None:  # noqa: E501
            raise ValueError("Invalid value for `row`, must not be `None`")  # noqa: E501

        self._row = row

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedBrickDiskLayout):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NestedBrickDiskLayout):
            return True

        return self.to_dict() != other.to_dict()
