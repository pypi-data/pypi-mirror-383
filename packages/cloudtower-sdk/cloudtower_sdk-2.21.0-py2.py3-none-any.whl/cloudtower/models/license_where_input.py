# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class LicenseWhereInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_and': 'list[LicenseWhereInput]',
        '_not': 'list[LicenseWhereInput]',
        '_or': 'list[LicenseWhereInput]',
        'expire_date': 'str',
        'expire_date_gt': 'str',
        'expire_date_gte': 'str',
        'expire_date_in': 'list[str]',
        'expire_date_lt': 'str',
        'expire_date_lte': 'str',
        'expire_date_not': 'str',
        'expire_date_not_in': 'list[str]',
        'id': 'str',
        'id_contains': 'str',
        'id_ends_with': 'str',
        'id_gt': 'str',
        'id_gte': 'str',
        'id_in': 'list[str]',
        'id_lt': 'str',
        'id_lte': 'str',
        'id_not': 'str',
        'id_not_contains': 'str',
        'id_not_ends_with': 'str',
        'id_not_in': 'list[str]',
        'id_not_starts_with': 'str',
        'id_starts_with': 'str',
        'license_serial': 'str',
        'license_serial_contains': 'str',
        'license_serial_ends_with': 'str',
        'license_serial_gt': 'str',
        'license_serial_gte': 'str',
        'license_serial_in': 'list[str]',
        'license_serial_lt': 'str',
        'license_serial_lte': 'str',
        'license_serial_not': 'str',
        'license_serial_not_contains': 'str',
        'license_serial_not_ends_with': 'str',
        'license_serial_not_in': 'list[str]',
        'license_serial_not_starts_with': 'str',
        'license_serial_starts_with': 'str',
        'maintenance_end_date': 'str',
        'maintenance_end_date_gt': 'str',
        'maintenance_end_date_gte': 'str',
        'maintenance_end_date_in': 'list[str]',
        'maintenance_end_date_lt': 'str',
        'maintenance_end_date_lte': 'str',
        'maintenance_end_date_not': 'str',
        'maintenance_end_date_not_in': 'list[str]',
        'maintenance_start_date': 'str',
        'maintenance_start_date_gt': 'str',
        'maintenance_start_date_gte': 'str',
        'maintenance_start_date_in': 'list[str]',
        'maintenance_start_date_lt': 'str',
        'maintenance_start_date_lte': 'str',
        'maintenance_start_date_not': 'str',
        'maintenance_start_date_not_in': 'list[str]',
        'max_chunk_num': 'int',
        'max_chunk_num_gt': 'int',
        'max_chunk_num_gte': 'int',
        'max_chunk_num_in': 'list[int]',
        'max_chunk_num_lt': 'int',
        'max_chunk_num_lte': 'int',
        'max_chunk_num_not': 'int',
        'max_chunk_num_not_in': 'list[int]',
        'max_cluster_num': 'int',
        'max_cluster_num_gt': 'int',
        'max_cluster_num_gte': 'int',
        'max_cluster_num_in': 'list[int]',
        'max_cluster_num_lt': 'int',
        'max_cluster_num_lte': 'int',
        'max_cluster_num_not': 'int',
        'max_cluster_num_not_in': 'list[int]',
        'sign_date': 'str',
        'sign_date_gt': 'str',
        'sign_date_gte': 'str',
        'sign_date_in': 'list[str]',
        'sign_date_lt': 'str',
        'sign_date_lte': 'str',
        'sign_date_not': 'str',
        'sign_date_not_in': 'list[str]',
        'software_edition': 'SoftwareEdition',
        'software_edition_in': 'list[SoftwareEdition]',
        'software_edition_not': 'SoftwareEdition',
        'software_edition_not_in': 'list[SoftwareEdition]',
        'type': 'LicenseType',
        'type_in': 'list[LicenseType]',
        'type_not': 'LicenseType',
        'type_not_in': 'list[LicenseType]'
    }

    attribute_map = {
        '_and': 'AND',
        '_not': 'NOT',
        '_or': 'OR',
        'expire_date': 'expire_date',
        'expire_date_gt': 'expire_date_gt',
        'expire_date_gte': 'expire_date_gte',
        'expire_date_in': 'expire_date_in',
        'expire_date_lt': 'expire_date_lt',
        'expire_date_lte': 'expire_date_lte',
        'expire_date_not': 'expire_date_not',
        'expire_date_not_in': 'expire_date_not_in',
        'id': 'id',
        'id_contains': 'id_contains',
        'id_ends_with': 'id_ends_with',
        'id_gt': 'id_gt',
        'id_gte': 'id_gte',
        'id_in': 'id_in',
        'id_lt': 'id_lt',
        'id_lte': 'id_lte',
        'id_not': 'id_not',
        'id_not_contains': 'id_not_contains',
        'id_not_ends_with': 'id_not_ends_with',
        'id_not_in': 'id_not_in',
        'id_not_starts_with': 'id_not_starts_with',
        'id_starts_with': 'id_starts_with',
        'license_serial': 'license_serial',
        'license_serial_contains': 'license_serial_contains',
        'license_serial_ends_with': 'license_serial_ends_with',
        'license_serial_gt': 'license_serial_gt',
        'license_serial_gte': 'license_serial_gte',
        'license_serial_in': 'license_serial_in',
        'license_serial_lt': 'license_serial_lt',
        'license_serial_lte': 'license_serial_lte',
        'license_serial_not': 'license_serial_not',
        'license_serial_not_contains': 'license_serial_not_contains',
        'license_serial_not_ends_with': 'license_serial_not_ends_with',
        'license_serial_not_in': 'license_serial_not_in',
        'license_serial_not_starts_with': 'license_serial_not_starts_with',
        'license_serial_starts_with': 'license_serial_starts_with',
        'maintenance_end_date': 'maintenance_end_date',
        'maintenance_end_date_gt': 'maintenance_end_date_gt',
        'maintenance_end_date_gte': 'maintenance_end_date_gte',
        'maintenance_end_date_in': 'maintenance_end_date_in',
        'maintenance_end_date_lt': 'maintenance_end_date_lt',
        'maintenance_end_date_lte': 'maintenance_end_date_lte',
        'maintenance_end_date_not': 'maintenance_end_date_not',
        'maintenance_end_date_not_in': 'maintenance_end_date_not_in',
        'maintenance_start_date': 'maintenance_start_date',
        'maintenance_start_date_gt': 'maintenance_start_date_gt',
        'maintenance_start_date_gte': 'maintenance_start_date_gte',
        'maintenance_start_date_in': 'maintenance_start_date_in',
        'maintenance_start_date_lt': 'maintenance_start_date_lt',
        'maintenance_start_date_lte': 'maintenance_start_date_lte',
        'maintenance_start_date_not': 'maintenance_start_date_not',
        'maintenance_start_date_not_in': 'maintenance_start_date_not_in',
        'max_chunk_num': 'max_chunk_num',
        'max_chunk_num_gt': 'max_chunk_num_gt',
        'max_chunk_num_gte': 'max_chunk_num_gte',
        'max_chunk_num_in': 'max_chunk_num_in',
        'max_chunk_num_lt': 'max_chunk_num_lt',
        'max_chunk_num_lte': 'max_chunk_num_lte',
        'max_chunk_num_not': 'max_chunk_num_not',
        'max_chunk_num_not_in': 'max_chunk_num_not_in',
        'max_cluster_num': 'max_cluster_num',
        'max_cluster_num_gt': 'max_cluster_num_gt',
        'max_cluster_num_gte': 'max_cluster_num_gte',
        'max_cluster_num_in': 'max_cluster_num_in',
        'max_cluster_num_lt': 'max_cluster_num_lt',
        'max_cluster_num_lte': 'max_cluster_num_lte',
        'max_cluster_num_not': 'max_cluster_num_not',
        'max_cluster_num_not_in': 'max_cluster_num_not_in',
        'sign_date': 'sign_date',
        'sign_date_gt': 'sign_date_gt',
        'sign_date_gte': 'sign_date_gte',
        'sign_date_in': 'sign_date_in',
        'sign_date_lt': 'sign_date_lt',
        'sign_date_lte': 'sign_date_lte',
        'sign_date_not': 'sign_date_not',
        'sign_date_not_in': 'sign_date_not_in',
        'software_edition': 'software_edition',
        'software_edition_in': 'software_edition_in',
        'software_edition_not': 'software_edition_not',
        'software_edition_not_in': 'software_edition_not_in',
        'type': 'type',
        'type_in': 'type_in',
        'type_not': 'type_not',
        'type_not_in': 'type_not_in'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """LicenseWhereInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self.__and = None
        self.__not = None
        self.__or = None
        self._expire_date = None
        self._expire_date_gt = None
        self._expire_date_gte = None
        self._expire_date_in = None
        self._expire_date_lt = None
        self._expire_date_lte = None
        self._expire_date_not = None
        self._expire_date_not_in = None
        self._id = None
        self._id_contains = None
        self._id_ends_with = None
        self._id_gt = None
        self._id_gte = None
        self._id_in = None
        self._id_lt = None
        self._id_lte = None
        self._id_not = None
        self._id_not_contains = None
        self._id_not_ends_with = None
        self._id_not_in = None
        self._id_not_starts_with = None
        self._id_starts_with = None
        self._license_serial = None
        self._license_serial_contains = None
        self._license_serial_ends_with = None
        self._license_serial_gt = None
        self._license_serial_gte = None
        self._license_serial_in = None
        self._license_serial_lt = None
        self._license_serial_lte = None
        self._license_serial_not = None
        self._license_serial_not_contains = None
        self._license_serial_not_ends_with = None
        self._license_serial_not_in = None
        self._license_serial_not_starts_with = None
        self._license_serial_starts_with = None
        self._maintenance_end_date = None
        self._maintenance_end_date_gt = None
        self._maintenance_end_date_gte = None
        self._maintenance_end_date_in = None
        self._maintenance_end_date_lt = None
        self._maintenance_end_date_lte = None
        self._maintenance_end_date_not = None
        self._maintenance_end_date_not_in = None
        self._maintenance_start_date = None
        self._maintenance_start_date_gt = None
        self._maintenance_start_date_gte = None
        self._maintenance_start_date_in = None
        self._maintenance_start_date_lt = None
        self._maintenance_start_date_lte = None
        self._maintenance_start_date_not = None
        self._maintenance_start_date_not_in = None
        self._max_chunk_num = None
        self._max_chunk_num_gt = None
        self._max_chunk_num_gte = None
        self._max_chunk_num_in = None
        self._max_chunk_num_lt = None
        self._max_chunk_num_lte = None
        self._max_chunk_num_not = None
        self._max_chunk_num_not_in = None
        self._max_cluster_num = None
        self._max_cluster_num_gt = None
        self._max_cluster_num_gte = None
        self._max_cluster_num_in = None
        self._max_cluster_num_lt = None
        self._max_cluster_num_lte = None
        self._max_cluster_num_not = None
        self._max_cluster_num_not_in = None
        self._sign_date = None
        self._sign_date_gt = None
        self._sign_date_gte = None
        self._sign_date_in = None
        self._sign_date_lt = None
        self._sign_date_lte = None
        self._sign_date_not = None
        self._sign_date_not_in = None
        self._software_edition = None
        self._software_edition_in = None
        self._software_edition_not = None
        self._software_edition_not_in = None
        self._type = None
        self._type_in = None
        self._type_not = None
        self._type_not_in = None
        self.discriminator = None

        self._and = kwargs.get("_and", None)
        self._not = kwargs.get("_not", None)
        self._or = kwargs.get("_or", None)
        self.expire_date = kwargs.get("expire_date", None)
        self.expire_date_gt = kwargs.get("expire_date_gt", None)
        self.expire_date_gte = kwargs.get("expire_date_gte", None)
        self.expire_date_in = kwargs.get("expire_date_in", None)
        self.expire_date_lt = kwargs.get("expire_date_lt", None)
        self.expire_date_lte = kwargs.get("expire_date_lte", None)
        self.expire_date_not = kwargs.get("expire_date_not", None)
        self.expire_date_not_in = kwargs.get("expire_date_not_in", None)
        self.id = kwargs.get("id", None)
        self.id_contains = kwargs.get("id_contains", None)
        self.id_ends_with = kwargs.get("id_ends_with", None)
        self.id_gt = kwargs.get("id_gt", None)
        self.id_gte = kwargs.get("id_gte", None)
        self.id_in = kwargs.get("id_in", None)
        self.id_lt = kwargs.get("id_lt", None)
        self.id_lte = kwargs.get("id_lte", None)
        self.id_not = kwargs.get("id_not", None)
        self.id_not_contains = kwargs.get("id_not_contains", None)
        self.id_not_ends_with = kwargs.get("id_not_ends_with", None)
        self.id_not_in = kwargs.get("id_not_in", None)
        self.id_not_starts_with = kwargs.get("id_not_starts_with", None)
        self.id_starts_with = kwargs.get("id_starts_with", None)
        self.license_serial = kwargs.get("license_serial", None)
        self.license_serial_contains = kwargs.get("license_serial_contains", None)
        self.license_serial_ends_with = kwargs.get("license_serial_ends_with", None)
        self.license_serial_gt = kwargs.get("license_serial_gt", None)
        self.license_serial_gte = kwargs.get("license_serial_gte", None)
        self.license_serial_in = kwargs.get("license_serial_in", None)
        self.license_serial_lt = kwargs.get("license_serial_lt", None)
        self.license_serial_lte = kwargs.get("license_serial_lte", None)
        self.license_serial_not = kwargs.get("license_serial_not", None)
        self.license_serial_not_contains = kwargs.get("license_serial_not_contains", None)
        self.license_serial_not_ends_with = kwargs.get("license_serial_not_ends_with", None)
        self.license_serial_not_in = kwargs.get("license_serial_not_in", None)
        self.license_serial_not_starts_with = kwargs.get("license_serial_not_starts_with", None)
        self.license_serial_starts_with = kwargs.get("license_serial_starts_with", None)
        self.maintenance_end_date = kwargs.get("maintenance_end_date", None)
        self.maintenance_end_date_gt = kwargs.get("maintenance_end_date_gt", None)
        self.maintenance_end_date_gte = kwargs.get("maintenance_end_date_gte", None)
        self.maintenance_end_date_in = kwargs.get("maintenance_end_date_in", None)
        self.maintenance_end_date_lt = kwargs.get("maintenance_end_date_lt", None)
        self.maintenance_end_date_lte = kwargs.get("maintenance_end_date_lte", None)
        self.maintenance_end_date_not = kwargs.get("maintenance_end_date_not", None)
        self.maintenance_end_date_not_in = kwargs.get("maintenance_end_date_not_in", None)
        self.maintenance_start_date = kwargs.get("maintenance_start_date", None)
        self.maintenance_start_date_gt = kwargs.get("maintenance_start_date_gt", None)
        self.maintenance_start_date_gte = kwargs.get("maintenance_start_date_gte", None)
        self.maintenance_start_date_in = kwargs.get("maintenance_start_date_in", None)
        self.maintenance_start_date_lt = kwargs.get("maintenance_start_date_lt", None)
        self.maintenance_start_date_lte = kwargs.get("maintenance_start_date_lte", None)
        self.maintenance_start_date_not = kwargs.get("maintenance_start_date_not", None)
        self.maintenance_start_date_not_in = kwargs.get("maintenance_start_date_not_in", None)
        self.max_chunk_num = kwargs.get("max_chunk_num", None)
        self.max_chunk_num_gt = kwargs.get("max_chunk_num_gt", None)
        self.max_chunk_num_gte = kwargs.get("max_chunk_num_gte", None)
        self.max_chunk_num_in = kwargs.get("max_chunk_num_in", None)
        self.max_chunk_num_lt = kwargs.get("max_chunk_num_lt", None)
        self.max_chunk_num_lte = kwargs.get("max_chunk_num_lte", None)
        self.max_chunk_num_not = kwargs.get("max_chunk_num_not", None)
        self.max_chunk_num_not_in = kwargs.get("max_chunk_num_not_in", None)
        self.max_cluster_num = kwargs.get("max_cluster_num", None)
        self.max_cluster_num_gt = kwargs.get("max_cluster_num_gt", None)
        self.max_cluster_num_gte = kwargs.get("max_cluster_num_gte", None)
        self.max_cluster_num_in = kwargs.get("max_cluster_num_in", None)
        self.max_cluster_num_lt = kwargs.get("max_cluster_num_lt", None)
        self.max_cluster_num_lte = kwargs.get("max_cluster_num_lte", None)
        self.max_cluster_num_not = kwargs.get("max_cluster_num_not", None)
        self.max_cluster_num_not_in = kwargs.get("max_cluster_num_not_in", None)
        self.sign_date = kwargs.get("sign_date", None)
        self.sign_date_gt = kwargs.get("sign_date_gt", None)
        self.sign_date_gte = kwargs.get("sign_date_gte", None)
        self.sign_date_in = kwargs.get("sign_date_in", None)
        self.sign_date_lt = kwargs.get("sign_date_lt", None)
        self.sign_date_lte = kwargs.get("sign_date_lte", None)
        self.sign_date_not = kwargs.get("sign_date_not", None)
        self.sign_date_not_in = kwargs.get("sign_date_not_in", None)
        self.software_edition = kwargs.get("software_edition", None)
        self.software_edition_in = kwargs.get("software_edition_in", None)
        self.software_edition_not = kwargs.get("software_edition_not", None)
        self.software_edition_not_in = kwargs.get("software_edition_not_in", None)
        self.type = kwargs.get("type", None)
        self.type_in = kwargs.get("type_in", None)
        self.type_not = kwargs.get("type_not", None)
        self.type_not_in = kwargs.get("type_not_in", None)

    @property
    def _and(self):
        """Gets the _and of this LicenseWhereInput.  # noqa: E501


        :return: The _and of this LicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseWhereInput]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this LicenseWhereInput.


        :param _and: The _and of this LicenseWhereInput.  # noqa: E501
        :type _and: list[LicenseWhereInput]
        """

        self.__and = _and

    @property
    def _not(self):
        """Gets the _not of this LicenseWhereInput.  # noqa: E501


        :return: The _not of this LicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseWhereInput]
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this LicenseWhereInput.


        :param _not: The _not of this LicenseWhereInput.  # noqa: E501
        :type _not: list[LicenseWhereInput]
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this LicenseWhereInput.  # noqa: E501


        :return: The _or of this LicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseWhereInput]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this LicenseWhereInput.


        :param _or: The _or of this LicenseWhereInput.  # noqa: E501
        :type _or: list[LicenseWhereInput]
        """

        self.__or = _or

    @property
    def expire_date(self):
        """Gets the expire_date of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this LicenseWhereInput.


        :param expire_date: The expire_date of this LicenseWhereInput.  # noqa: E501
        :type expire_date: str
        """

        self._expire_date = expire_date

    @property
    def expire_date_gt(self):
        """Gets the expire_date_gt of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gt

    @expire_date_gt.setter
    def expire_date_gt(self, expire_date_gt):
        """Sets the expire_date_gt of this LicenseWhereInput.


        :param expire_date_gt: The expire_date_gt of this LicenseWhereInput.  # noqa: E501
        :type expire_date_gt: str
        """

        self._expire_date_gt = expire_date_gt

    @property
    def expire_date_gte(self):
        """Gets the expire_date_gte of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_gte

    @expire_date_gte.setter
    def expire_date_gte(self, expire_date_gte):
        """Sets the expire_date_gte of this LicenseWhereInput.


        :param expire_date_gte: The expire_date_gte of this LicenseWhereInput.  # noqa: E501
        :type expire_date_gte: str
        """

        self._expire_date_gte = expire_date_gte

    @property
    def expire_date_in(self):
        """Gets the expire_date_in of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_in

    @expire_date_in.setter
    def expire_date_in(self, expire_date_in):
        """Sets the expire_date_in of this LicenseWhereInput.


        :param expire_date_in: The expire_date_in of this LicenseWhereInput.  # noqa: E501
        :type expire_date_in: list[str]
        """

        self._expire_date_in = expire_date_in

    @property
    def expire_date_lt(self):
        """Gets the expire_date_lt of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lt

    @expire_date_lt.setter
    def expire_date_lt(self, expire_date_lt):
        """Sets the expire_date_lt of this LicenseWhereInput.


        :param expire_date_lt: The expire_date_lt of this LicenseWhereInput.  # noqa: E501
        :type expire_date_lt: str
        """

        self._expire_date_lt = expire_date_lt

    @property
    def expire_date_lte(self):
        """Gets the expire_date_lte of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_lte

    @expire_date_lte.setter
    def expire_date_lte(self, expire_date_lte):
        """Sets the expire_date_lte of this LicenseWhereInput.


        :param expire_date_lte: The expire_date_lte of this LicenseWhereInput.  # noqa: E501
        :type expire_date_lte: str
        """

        self._expire_date_lte = expire_date_lte

    @property
    def expire_date_not(self):
        """Gets the expire_date_not of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._expire_date_not

    @expire_date_not.setter
    def expire_date_not(self, expire_date_not):
        """Sets the expire_date_not of this LicenseWhereInput.


        :param expire_date_not: The expire_date_not of this LicenseWhereInput.  # noqa: E501
        :type expire_date_not: str
        """

        self._expire_date_not = expire_date_not

    @property
    def expire_date_not_in(self):
        """Gets the expire_date_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The expire_date_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._expire_date_not_in

    @expire_date_not_in.setter
    def expire_date_not_in(self, expire_date_not_in):
        """Sets the expire_date_not_in of this LicenseWhereInput.


        :param expire_date_not_in: The expire_date_not_in of this LicenseWhereInput.  # noqa: E501
        :type expire_date_not_in: list[str]
        """

        self._expire_date_not_in = expire_date_not_in

    @property
    def id(self):
        """Gets the id of this LicenseWhereInput.  # noqa: E501


        :return: The id of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseWhereInput.


        :param id: The id of this LicenseWhereInput.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def id_contains(self):
        """Gets the id_contains of this LicenseWhereInput.  # noqa: E501


        :return: The id_contains of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_contains

    @id_contains.setter
    def id_contains(self, id_contains):
        """Sets the id_contains of this LicenseWhereInput.


        :param id_contains: The id_contains of this LicenseWhereInput.  # noqa: E501
        :type id_contains: str
        """

        self._id_contains = id_contains

    @property
    def id_ends_with(self):
        """Gets the id_ends_with of this LicenseWhereInput.  # noqa: E501


        :return: The id_ends_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_ends_with

    @id_ends_with.setter
    def id_ends_with(self, id_ends_with):
        """Sets the id_ends_with of this LicenseWhereInput.


        :param id_ends_with: The id_ends_with of this LicenseWhereInput.  # noqa: E501
        :type id_ends_with: str
        """

        self._id_ends_with = id_ends_with

    @property
    def id_gt(self):
        """Gets the id_gt of this LicenseWhereInput.  # noqa: E501


        :return: The id_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this LicenseWhereInput.


        :param id_gt: The id_gt of this LicenseWhereInput.  # noqa: E501
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this LicenseWhereInput.  # noqa: E501


        :return: The id_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this LicenseWhereInput.


        :param id_gte: The id_gte of this LicenseWhereInput.  # noqa: E501
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_in(self):
        """Gets the id_in of this LicenseWhereInput.  # noqa: E501


        :return: The id_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_in

    @id_in.setter
    def id_in(self, id_in):
        """Sets the id_in of this LicenseWhereInput.


        :param id_in: The id_in of this LicenseWhereInput.  # noqa: E501
        :type id_in: list[str]
        """

        self._id_in = id_in

    @property
    def id_lt(self):
        """Gets the id_lt of this LicenseWhereInput.  # noqa: E501


        :return: The id_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this LicenseWhereInput.


        :param id_lt: The id_lt of this LicenseWhereInput.  # noqa: E501
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this LicenseWhereInput.  # noqa: E501


        :return: The id_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this LicenseWhereInput.


        :param id_lte: The id_lte of this LicenseWhereInput.  # noqa: E501
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def id_not(self):
        """Gets the id_not of this LicenseWhereInput.  # noqa: E501


        :return: The id_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not

    @id_not.setter
    def id_not(self, id_not):
        """Sets the id_not of this LicenseWhereInput.


        :param id_not: The id_not of this LicenseWhereInput.  # noqa: E501
        :type id_not: str
        """

        self._id_not = id_not

    @property
    def id_not_contains(self):
        """Gets the id_not_contains of this LicenseWhereInput.  # noqa: E501


        :return: The id_not_contains of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_contains

    @id_not_contains.setter
    def id_not_contains(self, id_not_contains):
        """Sets the id_not_contains of this LicenseWhereInput.


        :param id_not_contains: The id_not_contains of this LicenseWhereInput.  # noqa: E501
        :type id_not_contains: str
        """

        self._id_not_contains = id_not_contains

    @property
    def id_not_ends_with(self):
        """Gets the id_not_ends_with of this LicenseWhereInput.  # noqa: E501


        :return: The id_not_ends_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_ends_with

    @id_not_ends_with.setter
    def id_not_ends_with(self, id_not_ends_with):
        """Sets the id_not_ends_with of this LicenseWhereInput.


        :param id_not_ends_with: The id_not_ends_with of this LicenseWhereInput.  # noqa: E501
        :type id_not_ends_with: str
        """

        self._id_not_ends_with = id_not_ends_with

    @property
    def id_not_in(self):
        """Gets the id_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The id_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_not_in

    @id_not_in.setter
    def id_not_in(self, id_not_in):
        """Sets the id_not_in of this LicenseWhereInput.


        :param id_not_in: The id_not_in of this LicenseWhereInput.  # noqa: E501
        :type id_not_in: list[str]
        """

        self._id_not_in = id_not_in

    @property
    def id_not_starts_with(self):
        """Gets the id_not_starts_with of this LicenseWhereInput.  # noqa: E501


        :return: The id_not_starts_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_not_starts_with

    @id_not_starts_with.setter
    def id_not_starts_with(self, id_not_starts_with):
        """Sets the id_not_starts_with of this LicenseWhereInput.


        :param id_not_starts_with: The id_not_starts_with of this LicenseWhereInput.  # noqa: E501
        :type id_not_starts_with: str
        """

        self._id_not_starts_with = id_not_starts_with

    @property
    def id_starts_with(self):
        """Gets the id_starts_with of this LicenseWhereInput.  # noqa: E501


        :return: The id_starts_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._id_starts_with

    @id_starts_with.setter
    def id_starts_with(self, id_starts_with):
        """Sets the id_starts_with of this LicenseWhereInput.


        :param id_starts_with: The id_starts_with of this LicenseWhereInput.  # noqa: E501
        :type id_starts_with: str
        """

        self._id_starts_with = id_starts_with

    @property
    def license_serial(self):
        """Gets the license_serial of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial

    @license_serial.setter
    def license_serial(self, license_serial):
        """Sets the license_serial of this LicenseWhereInput.


        :param license_serial: The license_serial of this LicenseWhereInput.  # noqa: E501
        :type license_serial: str
        """

        self._license_serial = license_serial

    @property
    def license_serial_contains(self):
        """Gets the license_serial_contains of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_contains of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_contains

    @license_serial_contains.setter
    def license_serial_contains(self, license_serial_contains):
        """Sets the license_serial_contains of this LicenseWhereInput.


        :param license_serial_contains: The license_serial_contains of this LicenseWhereInput.  # noqa: E501
        :type license_serial_contains: str
        """

        self._license_serial_contains = license_serial_contains

    @property
    def license_serial_ends_with(self):
        """Gets the license_serial_ends_with of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_ends_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_ends_with

    @license_serial_ends_with.setter
    def license_serial_ends_with(self, license_serial_ends_with):
        """Sets the license_serial_ends_with of this LicenseWhereInput.


        :param license_serial_ends_with: The license_serial_ends_with of this LicenseWhereInput.  # noqa: E501
        :type license_serial_ends_with: str
        """

        self._license_serial_ends_with = license_serial_ends_with

    @property
    def license_serial_gt(self):
        """Gets the license_serial_gt of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_gt

    @license_serial_gt.setter
    def license_serial_gt(self, license_serial_gt):
        """Sets the license_serial_gt of this LicenseWhereInput.


        :param license_serial_gt: The license_serial_gt of this LicenseWhereInput.  # noqa: E501
        :type license_serial_gt: str
        """

        self._license_serial_gt = license_serial_gt

    @property
    def license_serial_gte(self):
        """Gets the license_serial_gte of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_gte

    @license_serial_gte.setter
    def license_serial_gte(self, license_serial_gte):
        """Sets the license_serial_gte of this LicenseWhereInput.


        :param license_serial_gte: The license_serial_gte of this LicenseWhereInput.  # noqa: E501
        :type license_serial_gte: str
        """

        self._license_serial_gte = license_serial_gte

    @property
    def license_serial_in(self):
        """Gets the license_serial_in of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._license_serial_in

    @license_serial_in.setter
    def license_serial_in(self, license_serial_in):
        """Sets the license_serial_in of this LicenseWhereInput.


        :param license_serial_in: The license_serial_in of this LicenseWhereInput.  # noqa: E501
        :type license_serial_in: list[str]
        """

        self._license_serial_in = license_serial_in

    @property
    def license_serial_lt(self):
        """Gets the license_serial_lt of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_lt

    @license_serial_lt.setter
    def license_serial_lt(self, license_serial_lt):
        """Sets the license_serial_lt of this LicenseWhereInput.


        :param license_serial_lt: The license_serial_lt of this LicenseWhereInput.  # noqa: E501
        :type license_serial_lt: str
        """

        self._license_serial_lt = license_serial_lt

    @property
    def license_serial_lte(self):
        """Gets the license_serial_lte of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_lte

    @license_serial_lte.setter
    def license_serial_lte(self, license_serial_lte):
        """Sets the license_serial_lte of this LicenseWhereInput.


        :param license_serial_lte: The license_serial_lte of this LicenseWhereInput.  # noqa: E501
        :type license_serial_lte: str
        """

        self._license_serial_lte = license_serial_lte

    @property
    def license_serial_not(self):
        """Gets the license_serial_not of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_not

    @license_serial_not.setter
    def license_serial_not(self, license_serial_not):
        """Sets the license_serial_not of this LicenseWhereInput.


        :param license_serial_not: The license_serial_not of this LicenseWhereInput.  # noqa: E501
        :type license_serial_not: str
        """

        self._license_serial_not = license_serial_not

    @property
    def license_serial_not_contains(self):
        """Gets the license_serial_not_contains of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_not_contains of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_not_contains

    @license_serial_not_contains.setter
    def license_serial_not_contains(self, license_serial_not_contains):
        """Sets the license_serial_not_contains of this LicenseWhereInput.


        :param license_serial_not_contains: The license_serial_not_contains of this LicenseWhereInput.  # noqa: E501
        :type license_serial_not_contains: str
        """

        self._license_serial_not_contains = license_serial_not_contains

    @property
    def license_serial_not_ends_with(self):
        """Gets the license_serial_not_ends_with of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_not_ends_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_not_ends_with

    @license_serial_not_ends_with.setter
    def license_serial_not_ends_with(self, license_serial_not_ends_with):
        """Sets the license_serial_not_ends_with of this LicenseWhereInput.


        :param license_serial_not_ends_with: The license_serial_not_ends_with of this LicenseWhereInput.  # noqa: E501
        :type license_serial_not_ends_with: str
        """

        self._license_serial_not_ends_with = license_serial_not_ends_with

    @property
    def license_serial_not_in(self):
        """Gets the license_serial_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._license_serial_not_in

    @license_serial_not_in.setter
    def license_serial_not_in(self, license_serial_not_in):
        """Sets the license_serial_not_in of this LicenseWhereInput.


        :param license_serial_not_in: The license_serial_not_in of this LicenseWhereInput.  # noqa: E501
        :type license_serial_not_in: list[str]
        """

        self._license_serial_not_in = license_serial_not_in

    @property
    def license_serial_not_starts_with(self):
        """Gets the license_serial_not_starts_with of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_not_starts_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_not_starts_with

    @license_serial_not_starts_with.setter
    def license_serial_not_starts_with(self, license_serial_not_starts_with):
        """Sets the license_serial_not_starts_with of this LicenseWhereInput.


        :param license_serial_not_starts_with: The license_serial_not_starts_with of this LicenseWhereInput.  # noqa: E501
        :type license_serial_not_starts_with: str
        """

        self._license_serial_not_starts_with = license_serial_not_starts_with

    @property
    def license_serial_starts_with(self):
        """Gets the license_serial_starts_with of this LicenseWhereInput.  # noqa: E501


        :return: The license_serial_starts_with of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_starts_with

    @license_serial_starts_with.setter
    def license_serial_starts_with(self, license_serial_starts_with):
        """Sets the license_serial_starts_with of this LicenseWhereInput.


        :param license_serial_starts_with: The license_serial_starts_with of this LicenseWhereInput.  # noqa: E501
        :type license_serial_starts_with: str
        """

        self._license_serial_starts_with = license_serial_starts_with

    @property
    def maintenance_end_date(self):
        """Gets the maintenance_end_date of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date

    @maintenance_end_date.setter
    def maintenance_end_date(self, maintenance_end_date):
        """Sets the maintenance_end_date of this LicenseWhereInput.


        :param maintenance_end_date: The maintenance_end_date of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date: str
        """

        self._maintenance_end_date = maintenance_end_date

    @property
    def maintenance_end_date_gt(self):
        """Gets the maintenance_end_date_gt of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date_gt

    @maintenance_end_date_gt.setter
    def maintenance_end_date_gt(self, maintenance_end_date_gt):
        """Sets the maintenance_end_date_gt of this LicenseWhereInput.


        :param maintenance_end_date_gt: The maintenance_end_date_gt of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_gt: str
        """

        self._maintenance_end_date_gt = maintenance_end_date_gt

    @property
    def maintenance_end_date_gte(self):
        """Gets the maintenance_end_date_gte of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date_gte

    @maintenance_end_date_gte.setter
    def maintenance_end_date_gte(self, maintenance_end_date_gte):
        """Sets the maintenance_end_date_gte of this LicenseWhereInput.


        :param maintenance_end_date_gte: The maintenance_end_date_gte of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_gte: str
        """

        self._maintenance_end_date_gte = maintenance_end_date_gte

    @property
    def maintenance_end_date_in(self):
        """Gets the maintenance_end_date_in of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_end_date_in

    @maintenance_end_date_in.setter
    def maintenance_end_date_in(self, maintenance_end_date_in):
        """Sets the maintenance_end_date_in of this LicenseWhereInput.


        :param maintenance_end_date_in: The maintenance_end_date_in of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_in: list[str]
        """

        self._maintenance_end_date_in = maintenance_end_date_in

    @property
    def maintenance_end_date_lt(self):
        """Gets the maintenance_end_date_lt of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date_lt

    @maintenance_end_date_lt.setter
    def maintenance_end_date_lt(self, maintenance_end_date_lt):
        """Sets the maintenance_end_date_lt of this LicenseWhereInput.


        :param maintenance_end_date_lt: The maintenance_end_date_lt of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_lt: str
        """

        self._maintenance_end_date_lt = maintenance_end_date_lt

    @property
    def maintenance_end_date_lte(self):
        """Gets the maintenance_end_date_lte of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date_lte

    @maintenance_end_date_lte.setter
    def maintenance_end_date_lte(self, maintenance_end_date_lte):
        """Sets the maintenance_end_date_lte of this LicenseWhereInput.


        :param maintenance_end_date_lte: The maintenance_end_date_lte of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_lte: str
        """

        self._maintenance_end_date_lte = maintenance_end_date_lte

    @property
    def maintenance_end_date_not(self):
        """Gets the maintenance_end_date_not of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_end_date_not

    @maintenance_end_date_not.setter
    def maintenance_end_date_not(self, maintenance_end_date_not):
        """Sets the maintenance_end_date_not of this LicenseWhereInput.


        :param maintenance_end_date_not: The maintenance_end_date_not of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_not: str
        """

        self._maintenance_end_date_not = maintenance_end_date_not

    @property
    def maintenance_end_date_not_in(self):
        """Gets the maintenance_end_date_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_end_date_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_end_date_not_in

    @maintenance_end_date_not_in.setter
    def maintenance_end_date_not_in(self, maintenance_end_date_not_in):
        """Sets the maintenance_end_date_not_in of this LicenseWhereInput.


        :param maintenance_end_date_not_in: The maintenance_end_date_not_in of this LicenseWhereInput.  # noqa: E501
        :type maintenance_end_date_not_in: list[str]
        """

        self._maintenance_end_date_not_in = maintenance_end_date_not_in

    @property
    def maintenance_start_date(self):
        """Gets the maintenance_start_date of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date

    @maintenance_start_date.setter
    def maintenance_start_date(self, maintenance_start_date):
        """Sets the maintenance_start_date of this LicenseWhereInput.


        :param maintenance_start_date: The maintenance_start_date of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date: str
        """

        self._maintenance_start_date = maintenance_start_date

    @property
    def maintenance_start_date_gt(self):
        """Gets the maintenance_start_date_gt of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date_gt

    @maintenance_start_date_gt.setter
    def maintenance_start_date_gt(self, maintenance_start_date_gt):
        """Sets the maintenance_start_date_gt of this LicenseWhereInput.


        :param maintenance_start_date_gt: The maintenance_start_date_gt of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_gt: str
        """

        self._maintenance_start_date_gt = maintenance_start_date_gt

    @property
    def maintenance_start_date_gte(self):
        """Gets the maintenance_start_date_gte of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date_gte

    @maintenance_start_date_gte.setter
    def maintenance_start_date_gte(self, maintenance_start_date_gte):
        """Sets the maintenance_start_date_gte of this LicenseWhereInput.


        :param maintenance_start_date_gte: The maintenance_start_date_gte of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_gte: str
        """

        self._maintenance_start_date_gte = maintenance_start_date_gte

    @property
    def maintenance_start_date_in(self):
        """Gets the maintenance_start_date_in of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_start_date_in

    @maintenance_start_date_in.setter
    def maintenance_start_date_in(self, maintenance_start_date_in):
        """Sets the maintenance_start_date_in of this LicenseWhereInput.


        :param maintenance_start_date_in: The maintenance_start_date_in of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_in: list[str]
        """

        self._maintenance_start_date_in = maintenance_start_date_in

    @property
    def maintenance_start_date_lt(self):
        """Gets the maintenance_start_date_lt of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date_lt

    @maintenance_start_date_lt.setter
    def maintenance_start_date_lt(self, maintenance_start_date_lt):
        """Sets the maintenance_start_date_lt of this LicenseWhereInput.


        :param maintenance_start_date_lt: The maintenance_start_date_lt of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_lt: str
        """

        self._maintenance_start_date_lt = maintenance_start_date_lt

    @property
    def maintenance_start_date_lte(self):
        """Gets the maintenance_start_date_lte of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date_lte

    @maintenance_start_date_lte.setter
    def maintenance_start_date_lte(self, maintenance_start_date_lte):
        """Sets the maintenance_start_date_lte of this LicenseWhereInput.


        :param maintenance_start_date_lte: The maintenance_start_date_lte of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_lte: str
        """

        self._maintenance_start_date_lte = maintenance_start_date_lte

    @property
    def maintenance_start_date_not(self):
        """Gets the maintenance_start_date_not of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_start_date_not

    @maintenance_start_date_not.setter
    def maintenance_start_date_not(self, maintenance_start_date_not):
        """Sets the maintenance_start_date_not of this LicenseWhereInput.


        :param maintenance_start_date_not: The maintenance_start_date_not of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_not: str
        """

        self._maintenance_start_date_not = maintenance_start_date_not

    @property
    def maintenance_start_date_not_in(self):
        """Gets the maintenance_start_date_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The maintenance_start_date_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_start_date_not_in

    @maintenance_start_date_not_in.setter
    def maintenance_start_date_not_in(self, maintenance_start_date_not_in):
        """Sets the maintenance_start_date_not_in of this LicenseWhereInput.


        :param maintenance_start_date_not_in: The maintenance_start_date_not_in of this LicenseWhereInput.  # noqa: E501
        :type maintenance_start_date_not_in: list[str]
        """

        self._maintenance_start_date_not_in = maintenance_start_date_not_in

    @property
    def max_chunk_num(self):
        """Gets the max_chunk_num of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num

    @max_chunk_num.setter
    def max_chunk_num(self, max_chunk_num):
        """Sets the max_chunk_num of this LicenseWhereInput.


        :param max_chunk_num: The max_chunk_num of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num: int
        """

        self._max_chunk_num = max_chunk_num

    @property
    def max_chunk_num_gt(self):
        """Gets the max_chunk_num_gt of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num_gt

    @max_chunk_num_gt.setter
    def max_chunk_num_gt(self, max_chunk_num_gt):
        """Sets the max_chunk_num_gt of this LicenseWhereInput.


        :param max_chunk_num_gt: The max_chunk_num_gt of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_gt: int
        """

        self._max_chunk_num_gt = max_chunk_num_gt

    @property
    def max_chunk_num_gte(self):
        """Gets the max_chunk_num_gte of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num_gte

    @max_chunk_num_gte.setter
    def max_chunk_num_gte(self, max_chunk_num_gte):
        """Sets the max_chunk_num_gte of this LicenseWhereInput.


        :param max_chunk_num_gte: The max_chunk_num_gte of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_gte: int
        """

        self._max_chunk_num_gte = max_chunk_num_gte

    @property
    def max_chunk_num_in(self):
        """Gets the max_chunk_num_in of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_chunk_num_in

    @max_chunk_num_in.setter
    def max_chunk_num_in(self, max_chunk_num_in):
        """Sets the max_chunk_num_in of this LicenseWhereInput.


        :param max_chunk_num_in: The max_chunk_num_in of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_in: list[int]
        """

        self._max_chunk_num_in = max_chunk_num_in

    @property
    def max_chunk_num_lt(self):
        """Gets the max_chunk_num_lt of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num_lt

    @max_chunk_num_lt.setter
    def max_chunk_num_lt(self, max_chunk_num_lt):
        """Sets the max_chunk_num_lt of this LicenseWhereInput.


        :param max_chunk_num_lt: The max_chunk_num_lt of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_lt: int
        """

        self._max_chunk_num_lt = max_chunk_num_lt

    @property
    def max_chunk_num_lte(self):
        """Gets the max_chunk_num_lte of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num_lte

    @max_chunk_num_lte.setter
    def max_chunk_num_lte(self, max_chunk_num_lte):
        """Sets the max_chunk_num_lte of this LicenseWhereInput.


        :param max_chunk_num_lte: The max_chunk_num_lte of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_lte: int
        """

        self._max_chunk_num_lte = max_chunk_num_lte

    @property
    def max_chunk_num_not(self):
        """Gets the max_chunk_num_not of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_not of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_chunk_num_not

    @max_chunk_num_not.setter
    def max_chunk_num_not(self, max_chunk_num_not):
        """Sets the max_chunk_num_not of this LicenseWhereInput.


        :param max_chunk_num_not: The max_chunk_num_not of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_not: int
        """

        self._max_chunk_num_not = max_chunk_num_not

    @property
    def max_chunk_num_not_in(self):
        """Gets the max_chunk_num_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The max_chunk_num_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_chunk_num_not_in

    @max_chunk_num_not_in.setter
    def max_chunk_num_not_in(self, max_chunk_num_not_in):
        """Sets the max_chunk_num_not_in of this LicenseWhereInput.


        :param max_chunk_num_not_in: The max_chunk_num_not_in of this LicenseWhereInput.  # noqa: E501
        :type max_chunk_num_not_in: list[int]
        """

        self._max_chunk_num_not_in = max_chunk_num_not_in

    @property
    def max_cluster_num(self):
        """Gets the max_cluster_num of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num

    @max_cluster_num.setter
    def max_cluster_num(self, max_cluster_num):
        """Sets the max_cluster_num of this LicenseWhereInput.


        :param max_cluster_num: The max_cluster_num of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num: int
        """

        self._max_cluster_num = max_cluster_num

    @property
    def max_cluster_num_gt(self):
        """Gets the max_cluster_num_gt of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num_gt

    @max_cluster_num_gt.setter
    def max_cluster_num_gt(self, max_cluster_num_gt):
        """Sets the max_cluster_num_gt of this LicenseWhereInput.


        :param max_cluster_num_gt: The max_cluster_num_gt of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_gt: int
        """

        self._max_cluster_num_gt = max_cluster_num_gt

    @property
    def max_cluster_num_gte(self):
        """Gets the max_cluster_num_gte of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num_gte

    @max_cluster_num_gte.setter
    def max_cluster_num_gte(self, max_cluster_num_gte):
        """Sets the max_cluster_num_gte of this LicenseWhereInput.


        :param max_cluster_num_gte: The max_cluster_num_gte of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_gte: int
        """

        self._max_cluster_num_gte = max_cluster_num_gte

    @property
    def max_cluster_num_in(self):
        """Gets the max_cluster_num_in of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_cluster_num_in

    @max_cluster_num_in.setter
    def max_cluster_num_in(self, max_cluster_num_in):
        """Sets the max_cluster_num_in of this LicenseWhereInput.


        :param max_cluster_num_in: The max_cluster_num_in of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_in: list[int]
        """

        self._max_cluster_num_in = max_cluster_num_in

    @property
    def max_cluster_num_lt(self):
        """Gets the max_cluster_num_lt of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num_lt

    @max_cluster_num_lt.setter
    def max_cluster_num_lt(self, max_cluster_num_lt):
        """Sets the max_cluster_num_lt of this LicenseWhereInput.


        :param max_cluster_num_lt: The max_cluster_num_lt of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_lt: int
        """

        self._max_cluster_num_lt = max_cluster_num_lt

    @property
    def max_cluster_num_lte(self):
        """Gets the max_cluster_num_lte of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num_lte

    @max_cluster_num_lte.setter
    def max_cluster_num_lte(self, max_cluster_num_lte):
        """Sets the max_cluster_num_lte of this LicenseWhereInput.


        :param max_cluster_num_lte: The max_cluster_num_lte of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_lte: int
        """

        self._max_cluster_num_lte = max_cluster_num_lte

    @property
    def max_cluster_num_not(self):
        """Gets the max_cluster_num_not of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_not of this LicenseWhereInput.  # noqa: E501
        :rtype: int
        """
        return self._max_cluster_num_not

    @max_cluster_num_not.setter
    def max_cluster_num_not(self, max_cluster_num_not):
        """Sets the max_cluster_num_not of this LicenseWhereInput.


        :param max_cluster_num_not: The max_cluster_num_not of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_not: int
        """

        self._max_cluster_num_not = max_cluster_num_not

    @property
    def max_cluster_num_not_in(self):
        """Gets the max_cluster_num_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The max_cluster_num_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._max_cluster_num_not_in

    @max_cluster_num_not_in.setter
    def max_cluster_num_not_in(self, max_cluster_num_not_in):
        """Sets the max_cluster_num_not_in of this LicenseWhereInput.


        :param max_cluster_num_not_in: The max_cluster_num_not_in of this LicenseWhereInput.  # noqa: E501
        :type max_cluster_num_not_in: list[int]
        """

        self._max_cluster_num_not_in = max_cluster_num_not_in

    @property
    def sign_date(self):
        """Gets the sign_date of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date

    @sign_date.setter
    def sign_date(self, sign_date):
        """Sets the sign_date of this LicenseWhereInput.


        :param sign_date: The sign_date of this LicenseWhereInput.  # noqa: E501
        :type sign_date: str
        """

        self._sign_date = sign_date

    @property
    def sign_date_gt(self):
        """Gets the sign_date_gt of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_gt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gt

    @sign_date_gt.setter
    def sign_date_gt(self, sign_date_gt):
        """Sets the sign_date_gt of this LicenseWhereInput.


        :param sign_date_gt: The sign_date_gt of this LicenseWhereInput.  # noqa: E501
        :type sign_date_gt: str
        """

        self._sign_date_gt = sign_date_gt

    @property
    def sign_date_gte(self):
        """Gets the sign_date_gte of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_gte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_gte

    @sign_date_gte.setter
    def sign_date_gte(self, sign_date_gte):
        """Sets the sign_date_gte of this LicenseWhereInput.


        :param sign_date_gte: The sign_date_gte of this LicenseWhereInput.  # noqa: E501
        :type sign_date_gte: str
        """

        self._sign_date_gte = sign_date_gte

    @property
    def sign_date_in(self):
        """Gets the sign_date_in of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_in

    @sign_date_in.setter
    def sign_date_in(self, sign_date_in):
        """Sets the sign_date_in of this LicenseWhereInput.


        :param sign_date_in: The sign_date_in of this LicenseWhereInput.  # noqa: E501
        :type sign_date_in: list[str]
        """

        self._sign_date_in = sign_date_in

    @property
    def sign_date_lt(self):
        """Gets the sign_date_lt of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_lt of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lt

    @sign_date_lt.setter
    def sign_date_lt(self, sign_date_lt):
        """Sets the sign_date_lt of this LicenseWhereInput.


        :param sign_date_lt: The sign_date_lt of this LicenseWhereInput.  # noqa: E501
        :type sign_date_lt: str
        """

        self._sign_date_lt = sign_date_lt

    @property
    def sign_date_lte(self):
        """Gets the sign_date_lte of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_lte of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_lte

    @sign_date_lte.setter
    def sign_date_lte(self, sign_date_lte):
        """Sets the sign_date_lte of this LicenseWhereInput.


        :param sign_date_lte: The sign_date_lte of this LicenseWhereInput.  # noqa: E501
        :type sign_date_lte: str
        """

        self._sign_date_lte = sign_date_lte

    @property
    def sign_date_not(self):
        """Gets the sign_date_not of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_not of this LicenseWhereInput.  # noqa: E501
        :rtype: str
        """
        return self._sign_date_not

    @sign_date_not.setter
    def sign_date_not(self, sign_date_not):
        """Sets the sign_date_not of this LicenseWhereInput.


        :param sign_date_not: The sign_date_not of this LicenseWhereInput.  # noqa: E501
        :type sign_date_not: str
        """

        self._sign_date_not = sign_date_not

    @property
    def sign_date_not_in(self):
        """Gets the sign_date_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The sign_date_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_date_not_in

    @sign_date_not_in.setter
    def sign_date_not_in(self, sign_date_not_in):
        """Sets the sign_date_not_in of this LicenseWhereInput.


        :param sign_date_not_in: The sign_date_not_in of this LicenseWhereInput.  # noqa: E501
        :type sign_date_not_in: list[str]
        """

        self._sign_date_not_in = sign_date_not_in

    @property
    def software_edition(self):
        """Gets the software_edition of this LicenseWhereInput.  # noqa: E501


        :return: The software_edition of this LicenseWhereInput.  # noqa: E501
        :rtype: SoftwareEdition
        """
        return self._software_edition

    @software_edition.setter
    def software_edition(self, software_edition):
        """Sets the software_edition of this LicenseWhereInput.


        :param software_edition: The software_edition of this LicenseWhereInput.  # noqa: E501
        :type software_edition: SoftwareEdition
        """

        self._software_edition = software_edition

    @property
    def software_edition_in(self):
        """Gets the software_edition_in of this LicenseWhereInput.  # noqa: E501


        :return: The software_edition_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[SoftwareEdition]
        """
        return self._software_edition_in

    @software_edition_in.setter
    def software_edition_in(self, software_edition_in):
        """Sets the software_edition_in of this LicenseWhereInput.


        :param software_edition_in: The software_edition_in of this LicenseWhereInput.  # noqa: E501
        :type software_edition_in: list[SoftwareEdition]
        """

        self._software_edition_in = software_edition_in

    @property
    def software_edition_not(self):
        """Gets the software_edition_not of this LicenseWhereInput.  # noqa: E501


        :return: The software_edition_not of this LicenseWhereInput.  # noqa: E501
        :rtype: SoftwareEdition
        """
        return self._software_edition_not

    @software_edition_not.setter
    def software_edition_not(self, software_edition_not):
        """Sets the software_edition_not of this LicenseWhereInput.


        :param software_edition_not: The software_edition_not of this LicenseWhereInput.  # noqa: E501
        :type software_edition_not: SoftwareEdition
        """

        self._software_edition_not = software_edition_not

    @property
    def software_edition_not_in(self):
        """Gets the software_edition_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The software_edition_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[SoftwareEdition]
        """
        return self._software_edition_not_in

    @software_edition_not_in.setter
    def software_edition_not_in(self, software_edition_not_in):
        """Sets the software_edition_not_in of this LicenseWhereInput.


        :param software_edition_not_in: The software_edition_not_in of this LicenseWhereInput.  # noqa: E501
        :type software_edition_not_in: list[SoftwareEdition]
        """

        self._software_edition_not_in = software_edition_not_in

    @property
    def type(self):
        """Gets the type of this LicenseWhereInput.  # noqa: E501


        :return: The type of this LicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LicenseWhereInput.


        :param type: The type of this LicenseWhereInput.  # noqa: E501
        :type type: LicenseType
        """

        self._type = type

    @property
    def type_in(self):
        """Gets the type_in of this LicenseWhereInput.  # noqa: E501


        :return: The type_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._type_in

    @type_in.setter
    def type_in(self, type_in):
        """Sets the type_in of this LicenseWhereInput.


        :param type_in: The type_in of this LicenseWhereInput.  # noqa: E501
        :type type_in: list[LicenseType]
        """

        self._type_in = type_in

    @property
    def type_not(self):
        """Gets the type_not of this LicenseWhereInput.  # noqa: E501


        :return: The type_not of this LicenseWhereInput.  # noqa: E501
        :rtype: LicenseType
        """
        return self._type_not

    @type_not.setter
    def type_not(self, type_not):
        """Sets the type_not of this LicenseWhereInput.


        :param type_not: The type_not of this LicenseWhereInput.  # noqa: E501
        :type type_not: LicenseType
        """

        self._type_not = type_not

    @property
    def type_not_in(self):
        """Gets the type_not_in of this LicenseWhereInput.  # noqa: E501


        :return: The type_not_in of this LicenseWhereInput.  # noqa: E501
        :rtype: list[LicenseType]
        """
        return self._type_not_in

    @type_not_in.setter
    def type_not_in(self, type_not_in):
        """Sets the type_not_in of this LicenseWhereInput.


        :param type_not_in: The type_not_in of this LicenseWhereInput.  # noqa: E501
        :type type_not_in: list[LicenseType]
        """

        self._type_not_in = type_not_in

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseWhereInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseWhereInput):
            return True

        return self.to_dict() != other.to_dict()
