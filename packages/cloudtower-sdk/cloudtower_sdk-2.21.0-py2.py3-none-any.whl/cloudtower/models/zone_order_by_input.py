# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class ZoneOrderByInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    FAILURE_DATA_SPACE_ASC = "failure_data_space_ASC"
    FAILURE_DATA_SPACE_DESC = "failure_data_space_DESC"
    HOST_NUM_ASC = "host_num_ASC"
    HOST_NUM_DESC = "host_num_DESC"
    ID_ASC = "id_ASC"
    ID_DESC = "id_DESC"
    IS_PREFERRED_ASC = "is_preferred_ASC"
    IS_PREFERRED_DESC = "is_preferred_DESC"
    LOCAL_ID_ASC = "local_id_ASC"
    LOCAL_ID_DESC = "local_id_DESC"
    PROVISIONED_CPU_CORES_ASC = "provisioned_cpu_cores_ASC"
    PROVISIONED_CPU_CORES_DESC = "provisioned_cpu_cores_DESC"
    PROVISIONED_CPU_CORES_FOR_ACTIVE_VM_ASC = "provisioned_cpu_cores_for_active_vm_ASC"
    PROVISIONED_CPU_CORES_FOR_ACTIVE_VM_DESC = "provisioned_cpu_cores_for_active_vm_DESC"
    PROVISIONED_DATA_SPACE_ASC = "provisioned_data_space_ASC"
    PROVISIONED_DATA_SPACE_DESC = "provisioned_data_space_DESC"
    PROVISIONED_MEMORY_BYTES_ASC = "provisioned_memory_bytes_ASC"
    PROVISIONED_MEMORY_BYTES_DESC = "provisioned_memory_bytes_DESC"
    RUNNING_VM_NUM_ASC = "running_vm_num_ASC"
    RUNNING_VM_NUM_DESC = "running_vm_num_DESC"
    STOPPED_VM_NUM_ASC = "stopped_vm_num_ASC"
    STOPPED_VM_NUM_DESC = "stopped_vm_num_DESC"
    SUSPENDED_VM_NUM_ASC = "suspended_vm_num_ASC"
    SUSPENDED_VM_NUM_DESC = "suspended_vm_num_DESC"
    TOTAL_CACHE_CAPACITY_ASC = "total_cache_capacity_ASC"
    TOTAL_CACHE_CAPACITY_DESC = "total_cache_capacity_DESC"
    TOTAL_CPU_CORES_ASC = "total_cpu_cores_ASC"
    TOTAL_CPU_CORES_DESC = "total_cpu_cores_DESC"
    TOTAL_CPU_HZ_ASC = "total_cpu_hz_ASC"
    TOTAL_CPU_HZ_DESC = "total_cpu_hz_DESC"
    TOTAL_DATA_CAPACITY_ASC = "total_data_capacity_ASC"
    TOTAL_DATA_CAPACITY_DESC = "total_data_capacity_DESC"
    TOTAL_MEMORY_BYTES_ASC = "total_memory_bytes_ASC"
    TOTAL_MEMORY_BYTES_DESC = "total_memory_bytes_DESC"
    USED_DATA_SPACE_ASC = "used_data_space_ASC"
    USED_DATA_SPACE_DESC = "used_data_space_DESC"
    VALID_DATA_SPACE_ASC = "valid_data_space_ASC"
    VALID_DATA_SPACE_DESC = "valid_data_space_DESC"
    VM_NUM_ASC = "vm_num_ASC"
    VM_NUM_DESC = "vm_num_DESC"

    allowable_values = [FAILURE_DATA_SPACE_ASC, FAILURE_DATA_SPACE_DESC, HOST_NUM_ASC, HOST_NUM_DESC, ID_ASC, ID_DESC, IS_PREFERRED_ASC, IS_PREFERRED_DESC, LOCAL_ID_ASC, LOCAL_ID_DESC, PROVISIONED_CPU_CORES_ASC, PROVISIONED_CPU_CORES_DESC, PROVISIONED_CPU_CORES_FOR_ACTIVE_VM_ASC, PROVISIONED_CPU_CORES_FOR_ACTIVE_VM_DESC, PROVISIONED_DATA_SPACE_ASC, PROVISIONED_DATA_SPACE_DESC, PROVISIONED_MEMORY_BYTES_ASC, PROVISIONED_MEMORY_BYTES_DESC, RUNNING_VM_NUM_ASC, RUNNING_VM_NUM_DESC, STOPPED_VM_NUM_ASC, STOPPED_VM_NUM_DESC, SUSPENDED_VM_NUM_ASC, SUSPENDED_VM_NUM_DESC, TOTAL_CACHE_CAPACITY_ASC, TOTAL_CACHE_CAPACITY_DESC, TOTAL_CPU_CORES_ASC, TOTAL_CPU_CORES_DESC, TOTAL_CPU_HZ_ASC, TOTAL_CPU_HZ_DESC, TOTAL_DATA_CAPACITY_ASC, TOTAL_DATA_CAPACITY_DESC, TOTAL_MEMORY_BYTES_ASC, TOTAL_MEMORY_BYTES_DESC, USED_DATA_SPACE_ASC, USED_DATA_SPACE_DESC, VALID_DATA_SPACE_ASC, VALID_DATA_SPACE_DESC, VM_NUM_ASC, VM_NUM_DESC]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """ZoneOrderByInput - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneOrderByInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZoneOrderByInput):
            return True

        return self.to_dict() != other.to_dict()
