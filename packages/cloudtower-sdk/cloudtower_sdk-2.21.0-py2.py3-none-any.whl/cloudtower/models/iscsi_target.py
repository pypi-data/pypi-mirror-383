# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class IscsiTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bps': 'int',
        'bps_max': 'int',
        'bps_max_length': 'int',
        'bps_rd': 'int',
        'bps_rd_max': 'int',
        'bps_rd_max_length': 'int',
        'bps_wr': 'int',
        'bps_wr_max': 'int',
        'bps_wr_max_length': 'int',
        'business_host_groups': 'list[NestedBusinessHostGroup]',
        'business_hosts': 'list[NestedBusinessHost]',
        'chap_enabled': 'bool',
        'chap_name': 'str',
        'chap_secret': 'str',
        'cluster': 'NestedCluster',
        'configuration_adaptive': 'bool',
        'configuration_method': 'ConfigurationMethod',
        'description': 'str',
        'ec_k': 'int',
        'ec_m': 'int',
        'encrypt_method': 'EncryptMethod',
        'entity_async_status': 'EntityAsyncStatus',
        'external_use': 'bool',
        'id': 'str',
        'initiator_chaps': 'list[NestedInitiatorChap]',
        'internal': 'bool',
        'io_size': 'int',
        'iops': 'int',
        'iops_max': 'int',
        'iops_max_length': 'int',
        'iops_rd': 'int',
        'iops_rd_max': 'int',
        'iops_rd_max_length': 'int',
        'iops_wr': 'int',
        'iops_wr_max': 'int',
        'iops_wr_max_length': 'int',
        'ip_whitelist': 'str',
        'iqn_name': 'str',
        'iqn_whitelist': 'str',
        'iscsi_connections': 'list[NestedIscsiConnection]',
        'iscsi_luns_num': 'int',
        'labels': 'list[NestedLabel]',
        'local_id': 'str',
        'luns': 'list[NestedIscsiLun]',
        'name': 'str',
        'prioritized': 'bool',
        'replica_num': 'int',
        'resiliency_type': 'ResiliencyType',
        'stripe_num': 'int',
        'stripe_size': 'int',
        'thin_provision': 'bool'
    }

    attribute_map = {
        'bps': 'bps',
        'bps_max': 'bps_max',
        'bps_max_length': 'bps_max_length',
        'bps_rd': 'bps_rd',
        'bps_rd_max': 'bps_rd_max',
        'bps_rd_max_length': 'bps_rd_max_length',
        'bps_wr': 'bps_wr',
        'bps_wr_max': 'bps_wr_max',
        'bps_wr_max_length': 'bps_wr_max_length',
        'business_host_groups': 'business_host_groups',
        'business_hosts': 'business_hosts',
        'chap_enabled': 'chap_enabled',
        'chap_name': 'chap_name',
        'chap_secret': 'chap_secret',
        'cluster': 'cluster',
        'configuration_adaptive': 'configuration_adaptive',
        'configuration_method': 'configuration_method',
        'description': 'description',
        'ec_k': 'ec_k',
        'ec_m': 'ec_m',
        'encrypt_method': 'encrypt_method',
        'entity_async_status': 'entityAsyncStatus',
        'external_use': 'external_use',
        'id': 'id',
        'initiator_chaps': 'initiator_chaps',
        'internal': 'internal',
        'io_size': 'io_size',
        'iops': 'iops',
        'iops_max': 'iops_max',
        'iops_max_length': 'iops_max_length',
        'iops_rd': 'iops_rd',
        'iops_rd_max': 'iops_rd_max',
        'iops_rd_max_length': 'iops_rd_max_length',
        'iops_wr': 'iops_wr',
        'iops_wr_max': 'iops_wr_max',
        'iops_wr_max_length': 'iops_wr_max_length',
        'ip_whitelist': 'ip_whitelist',
        'iqn_name': 'iqn_name',
        'iqn_whitelist': 'iqn_whitelist',
        'iscsi_connections': 'iscsi_connections',
        'iscsi_luns_num': 'iscsi_luns_num',
        'labels': 'labels',
        'local_id': 'local_id',
        'luns': 'luns',
        'name': 'name',
        'prioritized': 'prioritized',
        'replica_num': 'replica_num',
        'resiliency_type': 'resiliency_type',
        'stripe_num': 'stripe_num',
        'stripe_size': 'stripe_size',
        'thin_provision': 'thin_provision'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """IscsiTarget - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._bps = None
        self._bps_max = None
        self._bps_max_length = None
        self._bps_rd = None
        self._bps_rd_max = None
        self._bps_rd_max_length = None
        self._bps_wr = None
        self._bps_wr_max = None
        self._bps_wr_max_length = None
        self._business_host_groups = None
        self._business_hosts = None
        self._chap_enabled = None
        self._chap_name = None
        self._chap_secret = None
        self._cluster = None
        self._configuration_adaptive = None
        self._configuration_method = None
        self._description = None
        self._ec_k = None
        self._ec_m = None
        self._encrypt_method = None
        self._entity_async_status = None
        self._external_use = None
        self._id = None
        self._initiator_chaps = None
        self._internal = None
        self._io_size = None
        self._iops = None
        self._iops_max = None
        self._iops_max_length = None
        self._iops_rd = None
        self._iops_rd_max = None
        self._iops_rd_max_length = None
        self._iops_wr = None
        self._iops_wr_max = None
        self._iops_wr_max_length = None
        self._ip_whitelist = None
        self._iqn_name = None
        self._iqn_whitelist = None
        self._iscsi_connections = None
        self._iscsi_luns_num = None
        self._labels = None
        self._local_id = None
        self._luns = None
        self._name = None
        self._prioritized = None
        self._replica_num = None
        self._resiliency_type = None
        self._stripe_num = None
        self._stripe_size = None
        self._thin_provision = None
        self.discriminator = None

        self.bps = kwargs.get("bps", None)
        self.bps_max = kwargs.get("bps_max", None)
        self.bps_max_length = kwargs.get("bps_max_length", None)
        self.bps_rd = kwargs.get("bps_rd", None)
        self.bps_rd_max = kwargs.get("bps_rd_max", None)
        self.bps_rd_max_length = kwargs.get("bps_rd_max_length", None)
        self.bps_wr = kwargs.get("bps_wr", None)
        self.bps_wr_max = kwargs.get("bps_wr_max", None)
        self.bps_wr_max_length = kwargs.get("bps_wr_max_length", None)
        self.business_host_groups = kwargs.get("business_host_groups", None)
        self.business_hosts = kwargs.get("business_hosts", None)
        if "chap_enabled" in kwargs:
            self.chap_enabled = kwargs["chap_enabled"]
        self.chap_name = kwargs.get("chap_name", None)
        self.chap_secret = kwargs.get("chap_secret", None)
        if "cluster" in kwargs:
            self.cluster = kwargs["cluster"]
        self.configuration_adaptive = kwargs.get("configuration_adaptive", None)
        self.configuration_method = kwargs.get("configuration_method", None)
        if "description" in kwargs:
            self.description = kwargs["description"]
        self.ec_k = kwargs.get("ec_k", None)
        self.ec_m = kwargs.get("ec_m", None)
        self.encrypt_method = kwargs.get("encrypt_method", None)
        self.entity_async_status = kwargs.get("entity_async_status", None)
        if "external_use" in kwargs:
            self.external_use = kwargs["external_use"]
        if "id" in kwargs:
            self.id = kwargs["id"]
        self.initiator_chaps = kwargs.get("initiator_chaps", None)
        if "internal" in kwargs:
            self.internal = kwargs["internal"]
        self.io_size = kwargs.get("io_size", None)
        self.iops = kwargs.get("iops", None)
        self.iops_max = kwargs.get("iops_max", None)
        self.iops_max_length = kwargs.get("iops_max_length", None)
        self.iops_rd = kwargs.get("iops_rd", None)
        self.iops_rd_max = kwargs.get("iops_rd_max", None)
        self.iops_rd_max_length = kwargs.get("iops_rd_max_length", None)
        self.iops_wr = kwargs.get("iops_wr", None)
        self.iops_wr_max = kwargs.get("iops_wr_max", None)
        self.iops_wr_max_length = kwargs.get("iops_wr_max_length", None)
        if "ip_whitelist" in kwargs:
            self.ip_whitelist = kwargs["ip_whitelist"]
        if "iqn_name" in kwargs:
            self.iqn_name = kwargs["iqn_name"]
        if "iqn_whitelist" in kwargs:
            self.iqn_whitelist = kwargs["iqn_whitelist"]
        self.iscsi_connections = kwargs.get("iscsi_connections", None)
        self.iscsi_luns_num = kwargs.get("iscsi_luns_num", None)
        self.labels = kwargs.get("labels", None)
        if "local_id" in kwargs:
            self.local_id = kwargs["local_id"]
        self.luns = kwargs.get("luns", None)
        if "name" in kwargs:
            self.name = kwargs["name"]
        self.prioritized = kwargs.get("prioritized", None)
        if "replica_num" in kwargs:
            self.replica_num = kwargs["replica_num"]
        self.resiliency_type = kwargs.get("resiliency_type", None)
        if "stripe_num" in kwargs:
            self.stripe_num = kwargs["stripe_num"]
        if "stripe_size" in kwargs:
            self.stripe_size = kwargs["stripe_size"]
        if "thin_provision" in kwargs:
            self.thin_provision = kwargs["thin_provision"]

    @property
    def bps(self):
        """Gets the bps of this IscsiTarget.  # noqa: E501


        :return: The bps of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps

    @bps.setter
    def bps(self, bps):
        """Sets the bps of this IscsiTarget.


        :param bps: The bps of this IscsiTarget.  # noqa: E501
        :type bps: int
        """

        self._bps = bps

    @property
    def bps_max(self):
        """Gets the bps_max of this IscsiTarget.  # noqa: E501


        :return: The bps_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_max

    @bps_max.setter
    def bps_max(self, bps_max):
        """Sets the bps_max of this IscsiTarget.


        :param bps_max: The bps_max of this IscsiTarget.  # noqa: E501
        :type bps_max: int
        """

        self._bps_max = bps_max

    @property
    def bps_max_length(self):
        """Gets the bps_max_length of this IscsiTarget.  # noqa: E501


        :return: The bps_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_max_length

    @bps_max_length.setter
    def bps_max_length(self, bps_max_length):
        """Sets the bps_max_length of this IscsiTarget.


        :param bps_max_length: The bps_max_length of this IscsiTarget.  # noqa: E501
        :type bps_max_length: int
        """

        self._bps_max_length = bps_max_length

    @property
    def bps_rd(self):
        """Gets the bps_rd of this IscsiTarget.  # noqa: E501


        :return: The bps_rd of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd

    @bps_rd.setter
    def bps_rd(self, bps_rd):
        """Sets the bps_rd of this IscsiTarget.


        :param bps_rd: The bps_rd of this IscsiTarget.  # noqa: E501
        :type bps_rd: int
        """

        self._bps_rd = bps_rd

    @property
    def bps_rd_max(self):
        """Gets the bps_rd_max of this IscsiTarget.  # noqa: E501


        :return: The bps_rd_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd_max

    @bps_rd_max.setter
    def bps_rd_max(self, bps_rd_max):
        """Sets the bps_rd_max of this IscsiTarget.


        :param bps_rd_max: The bps_rd_max of this IscsiTarget.  # noqa: E501
        :type bps_rd_max: int
        """

        self._bps_rd_max = bps_rd_max

    @property
    def bps_rd_max_length(self):
        """Gets the bps_rd_max_length of this IscsiTarget.  # noqa: E501


        :return: The bps_rd_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_rd_max_length

    @bps_rd_max_length.setter
    def bps_rd_max_length(self, bps_rd_max_length):
        """Sets the bps_rd_max_length of this IscsiTarget.


        :param bps_rd_max_length: The bps_rd_max_length of this IscsiTarget.  # noqa: E501
        :type bps_rd_max_length: int
        """

        self._bps_rd_max_length = bps_rd_max_length

    @property
    def bps_wr(self):
        """Gets the bps_wr of this IscsiTarget.  # noqa: E501


        :return: The bps_wr of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr

    @bps_wr.setter
    def bps_wr(self, bps_wr):
        """Sets the bps_wr of this IscsiTarget.


        :param bps_wr: The bps_wr of this IscsiTarget.  # noqa: E501
        :type bps_wr: int
        """

        self._bps_wr = bps_wr

    @property
    def bps_wr_max(self):
        """Gets the bps_wr_max of this IscsiTarget.  # noqa: E501


        :return: The bps_wr_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr_max

    @bps_wr_max.setter
    def bps_wr_max(self, bps_wr_max):
        """Sets the bps_wr_max of this IscsiTarget.


        :param bps_wr_max: The bps_wr_max of this IscsiTarget.  # noqa: E501
        :type bps_wr_max: int
        """

        self._bps_wr_max = bps_wr_max

    @property
    def bps_wr_max_length(self):
        """Gets the bps_wr_max_length of this IscsiTarget.  # noqa: E501


        :return: The bps_wr_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._bps_wr_max_length

    @bps_wr_max_length.setter
    def bps_wr_max_length(self, bps_wr_max_length):
        """Sets the bps_wr_max_length of this IscsiTarget.


        :param bps_wr_max_length: The bps_wr_max_length of this IscsiTarget.  # noqa: E501
        :type bps_wr_max_length: int
        """

        self._bps_wr_max_length = bps_wr_max_length

    @property
    def business_host_groups(self):
        """Gets the business_host_groups of this IscsiTarget.  # noqa: E501


        :return: The business_host_groups of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedBusinessHostGroup]
        """
        return self._business_host_groups

    @business_host_groups.setter
    def business_host_groups(self, business_host_groups):
        """Sets the business_host_groups of this IscsiTarget.


        :param business_host_groups: The business_host_groups of this IscsiTarget.  # noqa: E501
        :type business_host_groups: list[NestedBusinessHostGroup]
        """

        self._business_host_groups = business_host_groups

    @property
    def business_hosts(self):
        """Gets the business_hosts of this IscsiTarget.  # noqa: E501


        :return: The business_hosts of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedBusinessHost]
        """
        return self._business_hosts

    @business_hosts.setter
    def business_hosts(self, business_hosts):
        """Sets the business_hosts of this IscsiTarget.


        :param business_hosts: The business_hosts of this IscsiTarget.  # noqa: E501
        :type business_hosts: list[NestedBusinessHost]
        """

        self._business_hosts = business_hosts

    @property
    def chap_enabled(self):
        """Gets the chap_enabled of this IscsiTarget.  # noqa: E501


        :return: The chap_enabled of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._chap_enabled

    @chap_enabled.setter
    def chap_enabled(self, chap_enabled):
        """Sets the chap_enabled of this IscsiTarget.


        :param chap_enabled: The chap_enabled of this IscsiTarget.  # noqa: E501
        :type chap_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and chap_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `chap_enabled`, must not be `None`")  # noqa: E501

        self._chap_enabled = chap_enabled

    @property
    def chap_name(self):
        """Gets the chap_name of this IscsiTarget.  # noqa: E501


        :return: The chap_name of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._chap_name

    @chap_name.setter
    def chap_name(self, chap_name):
        """Sets the chap_name of this IscsiTarget.


        :param chap_name: The chap_name of this IscsiTarget.  # noqa: E501
        :type chap_name: str
        """

        self._chap_name = chap_name

    @property
    def chap_secret(self):
        """Gets the chap_secret of this IscsiTarget.  # noqa: E501


        :return: The chap_secret of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._chap_secret

    @chap_secret.setter
    def chap_secret(self, chap_secret):
        """Sets the chap_secret of this IscsiTarget.


        :param chap_secret: The chap_secret of this IscsiTarget.  # noqa: E501
        :type chap_secret: str
        """

        self._chap_secret = chap_secret

    @property
    def cluster(self):
        """Gets the cluster of this IscsiTarget.  # noqa: E501


        :return: The cluster of this IscsiTarget.  # noqa: E501
        :rtype: NestedCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this IscsiTarget.


        :param cluster: The cluster of this IscsiTarget.  # noqa: E501
        :type cluster: NestedCluster
        """
        if self.local_vars_configuration.client_side_validation and cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def configuration_adaptive(self):
        """Gets the configuration_adaptive of this IscsiTarget.  # noqa: E501


        :return: The configuration_adaptive of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._configuration_adaptive

    @configuration_adaptive.setter
    def configuration_adaptive(self, configuration_adaptive):
        """Sets the configuration_adaptive of this IscsiTarget.


        :param configuration_adaptive: The configuration_adaptive of this IscsiTarget.  # noqa: E501
        :type configuration_adaptive: bool
        """

        self._configuration_adaptive = configuration_adaptive

    @property
    def configuration_method(self):
        """Gets the configuration_method of this IscsiTarget.  # noqa: E501


        :return: The configuration_method of this IscsiTarget.  # noqa: E501
        :rtype: ConfigurationMethod
        """
        return self._configuration_method

    @configuration_method.setter
    def configuration_method(self, configuration_method):
        """Sets the configuration_method of this IscsiTarget.


        :param configuration_method: The configuration_method of this IscsiTarget.  # noqa: E501
        :type configuration_method: ConfigurationMethod
        """

        self._configuration_method = configuration_method

    @property
    def description(self):
        """Gets the description of this IscsiTarget.  # noqa: E501


        :return: The description of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IscsiTarget.


        :param description: The description of this IscsiTarget.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def ec_k(self):
        """Gets the ec_k of this IscsiTarget.  # noqa: E501


        :return: The ec_k of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._ec_k

    @ec_k.setter
    def ec_k(self, ec_k):
        """Sets the ec_k of this IscsiTarget.


        :param ec_k: The ec_k of this IscsiTarget.  # noqa: E501
        :type ec_k: int
        """

        self._ec_k = ec_k

    @property
    def ec_m(self):
        """Gets the ec_m of this IscsiTarget.  # noqa: E501


        :return: The ec_m of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._ec_m

    @ec_m.setter
    def ec_m(self, ec_m):
        """Sets the ec_m of this IscsiTarget.


        :param ec_m: The ec_m of this IscsiTarget.  # noqa: E501
        :type ec_m: int
        """

        self._ec_m = ec_m

    @property
    def encrypt_method(self):
        """Gets the encrypt_method of this IscsiTarget.  # noqa: E501


        :return: The encrypt_method of this IscsiTarget.  # noqa: E501
        :rtype: EncryptMethod
        """
        return self._encrypt_method

    @encrypt_method.setter
    def encrypt_method(self, encrypt_method):
        """Sets the encrypt_method of this IscsiTarget.


        :param encrypt_method: The encrypt_method of this IscsiTarget.  # noqa: E501
        :type encrypt_method: EncryptMethod
        """

        self._encrypt_method = encrypt_method

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this IscsiTarget.  # noqa: E501


        :return: The entity_async_status of this IscsiTarget.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this IscsiTarget.


        :param entity_async_status: The entity_async_status of this IscsiTarget.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def external_use(self):
        """Gets the external_use of this IscsiTarget.  # noqa: E501


        :return: The external_use of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._external_use

    @external_use.setter
    def external_use(self, external_use):
        """Sets the external_use of this IscsiTarget.


        :param external_use: The external_use of this IscsiTarget.  # noqa: E501
        :type external_use: bool
        """
        if self.local_vars_configuration.client_side_validation and external_use is None:  # noqa: E501
            raise ValueError("Invalid value for `external_use`, must not be `None`")  # noqa: E501

        self._external_use = external_use

    @property
    def id(self):
        """Gets the id of this IscsiTarget.  # noqa: E501


        :return: The id of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IscsiTarget.


        :param id: The id of this IscsiTarget.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def initiator_chaps(self):
        """Gets the initiator_chaps of this IscsiTarget.  # noqa: E501


        :return: The initiator_chaps of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedInitiatorChap]
        """
        return self._initiator_chaps

    @initiator_chaps.setter
    def initiator_chaps(self, initiator_chaps):
        """Sets the initiator_chaps of this IscsiTarget.


        :param initiator_chaps: The initiator_chaps of this IscsiTarget.  # noqa: E501
        :type initiator_chaps: list[NestedInitiatorChap]
        """

        self._initiator_chaps = initiator_chaps

    @property
    def internal(self):
        """Gets the internal of this IscsiTarget.  # noqa: E501


        :return: The internal of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this IscsiTarget.


        :param internal: The internal of this IscsiTarget.  # noqa: E501
        :type internal: bool
        """
        if self.local_vars_configuration.client_side_validation and internal is None:  # noqa: E501
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def io_size(self):
        """Gets the io_size of this IscsiTarget.  # noqa: E501


        :return: The io_size of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._io_size

    @io_size.setter
    def io_size(self, io_size):
        """Sets the io_size of this IscsiTarget.


        :param io_size: The io_size of this IscsiTarget.  # noqa: E501
        :type io_size: int
        """

        self._io_size = io_size

    @property
    def iops(self):
        """Gets the iops of this IscsiTarget.  # noqa: E501


        :return: The iops of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this IscsiTarget.


        :param iops: The iops of this IscsiTarget.  # noqa: E501
        :type iops: int
        """

        self._iops = iops

    @property
    def iops_max(self):
        """Gets the iops_max of this IscsiTarget.  # noqa: E501


        :return: The iops_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_max

    @iops_max.setter
    def iops_max(self, iops_max):
        """Sets the iops_max of this IscsiTarget.


        :param iops_max: The iops_max of this IscsiTarget.  # noqa: E501
        :type iops_max: int
        """

        self._iops_max = iops_max

    @property
    def iops_max_length(self):
        """Gets the iops_max_length of this IscsiTarget.  # noqa: E501


        :return: The iops_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_max_length

    @iops_max_length.setter
    def iops_max_length(self, iops_max_length):
        """Sets the iops_max_length of this IscsiTarget.


        :param iops_max_length: The iops_max_length of this IscsiTarget.  # noqa: E501
        :type iops_max_length: int
        """

        self._iops_max_length = iops_max_length

    @property
    def iops_rd(self):
        """Gets the iops_rd of this IscsiTarget.  # noqa: E501


        :return: The iops_rd of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd

    @iops_rd.setter
    def iops_rd(self, iops_rd):
        """Sets the iops_rd of this IscsiTarget.


        :param iops_rd: The iops_rd of this IscsiTarget.  # noqa: E501
        :type iops_rd: int
        """

        self._iops_rd = iops_rd

    @property
    def iops_rd_max(self):
        """Gets the iops_rd_max of this IscsiTarget.  # noqa: E501


        :return: The iops_rd_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd_max

    @iops_rd_max.setter
    def iops_rd_max(self, iops_rd_max):
        """Sets the iops_rd_max of this IscsiTarget.


        :param iops_rd_max: The iops_rd_max of this IscsiTarget.  # noqa: E501
        :type iops_rd_max: int
        """

        self._iops_rd_max = iops_rd_max

    @property
    def iops_rd_max_length(self):
        """Gets the iops_rd_max_length of this IscsiTarget.  # noqa: E501


        :return: The iops_rd_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_rd_max_length

    @iops_rd_max_length.setter
    def iops_rd_max_length(self, iops_rd_max_length):
        """Sets the iops_rd_max_length of this IscsiTarget.


        :param iops_rd_max_length: The iops_rd_max_length of this IscsiTarget.  # noqa: E501
        :type iops_rd_max_length: int
        """

        self._iops_rd_max_length = iops_rd_max_length

    @property
    def iops_wr(self):
        """Gets the iops_wr of this IscsiTarget.  # noqa: E501


        :return: The iops_wr of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr

    @iops_wr.setter
    def iops_wr(self, iops_wr):
        """Sets the iops_wr of this IscsiTarget.


        :param iops_wr: The iops_wr of this IscsiTarget.  # noqa: E501
        :type iops_wr: int
        """

        self._iops_wr = iops_wr

    @property
    def iops_wr_max(self):
        """Gets the iops_wr_max of this IscsiTarget.  # noqa: E501


        :return: The iops_wr_max of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr_max

    @iops_wr_max.setter
    def iops_wr_max(self, iops_wr_max):
        """Sets the iops_wr_max of this IscsiTarget.


        :param iops_wr_max: The iops_wr_max of this IscsiTarget.  # noqa: E501
        :type iops_wr_max: int
        """

        self._iops_wr_max = iops_wr_max

    @property
    def iops_wr_max_length(self):
        """Gets the iops_wr_max_length of this IscsiTarget.  # noqa: E501


        :return: The iops_wr_max_length of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iops_wr_max_length

    @iops_wr_max_length.setter
    def iops_wr_max_length(self, iops_wr_max_length):
        """Sets the iops_wr_max_length of this IscsiTarget.


        :param iops_wr_max_length: The iops_wr_max_length of this IscsiTarget.  # noqa: E501
        :type iops_wr_max_length: int
        """

        self._iops_wr_max_length = iops_wr_max_length

    @property
    def ip_whitelist(self):
        """Gets the ip_whitelist of this IscsiTarget.  # noqa: E501


        :return: The ip_whitelist of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._ip_whitelist

    @ip_whitelist.setter
    def ip_whitelist(self, ip_whitelist):
        """Sets the ip_whitelist of this IscsiTarget.


        :param ip_whitelist: The ip_whitelist of this IscsiTarget.  # noqa: E501
        :type ip_whitelist: str
        """
        if self.local_vars_configuration.client_side_validation and ip_whitelist is None:  # noqa: E501
            raise ValueError("Invalid value for `ip_whitelist`, must not be `None`")  # noqa: E501

        self._ip_whitelist = ip_whitelist

    @property
    def iqn_name(self):
        """Gets the iqn_name of this IscsiTarget.  # noqa: E501


        :return: The iqn_name of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._iqn_name

    @iqn_name.setter
    def iqn_name(self, iqn_name):
        """Sets the iqn_name of this IscsiTarget.


        :param iqn_name: The iqn_name of this IscsiTarget.  # noqa: E501
        :type iqn_name: str
        """
        if self.local_vars_configuration.client_side_validation and iqn_name is None:  # noqa: E501
            raise ValueError("Invalid value for `iqn_name`, must not be `None`")  # noqa: E501

        self._iqn_name = iqn_name

    @property
    def iqn_whitelist(self):
        """Gets the iqn_whitelist of this IscsiTarget.  # noqa: E501


        :return: The iqn_whitelist of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._iqn_whitelist

    @iqn_whitelist.setter
    def iqn_whitelist(self, iqn_whitelist):
        """Sets the iqn_whitelist of this IscsiTarget.


        :param iqn_whitelist: The iqn_whitelist of this IscsiTarget.  # noqa: E501
        :type iqn_whitelist: str
        """
        if self.local_vars_configuration.client_side_validation and iqn_whitelist is None:  # noqa: E501
            raise ValueError("Invalid value for `iqn_whitelist`, must not be `None`")  # noqa: E501

        self._iqn_whitelist = iqn_whitelist

    @property
    def iscsi_connections(self):
        """Gets the iscsi_connections of this IscsiTarget.  # noqa: E501


        :return: The iscsi_connections of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedIscsiConnection]
        """
        return self._iscsi_connections

    @iscsi_connections.setter
    def iscsi_connections(self, iscsi_connections):
        """Sets the iscsi_connections of this IscsiTarget.


        :param iscsi_connections: The iscsi_connections of this IscsiTarget.  # noqa: E501
        :type iscsi_connections: list[NestedIscsiConnection]
        """

        self._iscsi_connections = iscsi_connections

    @property
    def iscsi_luns_num(self):
        """Gets the iscsi_luns_num of this IscsiTarget.  # noqa: E501


        :return: The iscsi_luns_num of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._iscsi_luns_num

    @iscsi_luns_num.setter
    def iscsi_luns_num(self, iscsi_luns_num):
        """Sets the iscsi_luns_num of this IscsiTarget.


        :param iscsi_luns_num: The iscsi_luns_num of this IscsiTarget.  # noqa: E501
        :type iscsi_luns_num: int
        """

        self._iscsi_luns_num = iscsi_luns_num

    @property
    def labels(self):
        """Gets the labels of this IscsiTarget.  # noqa: E501


        :return: The labels of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IscsiTarget.


        :param labels: The labels of this IscsiTarget.  # noqa: E501
        :type labels: list[NestedLabel]
        """

        self._labels = labels

    @property
    def local_id(self):
        """Gets the local_id of this IscsiTarget.  # noqa: E501


        :return: The local_id of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this IscsiTarget.


        :param local_id: The local_id of this IscsiTarget.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def luns(self):
        """Gets the luns of this IscsiTarget.  # noqa: E501


        :return: The luns of this IscsiTarget.  # noqa: E501
        :rtype: list[NestedIscsiLun]
        """
        return self._luns

    @luns.setter
    def luns(self, luns):
        """Sets the luns of this IscsiTarget.


        :param luns: The luns of this IscsiTarget.  # noqa: E501
        :type luns: list[NestedIscsiLun]
        """

        self._luns = luns

    @property
    def name(self):
        """Gets the name of this IscsiTarget.  # noqa: E501


        :return: The name of this IscsiTarget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IscsiTarget.


        :param name: The name of this IscsiTarget.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def prioritized(self):
        """Gets the prioritized of this IscsiTarget.  # noqa: E501


        :return: The prioritized of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._prioritized

    @prioritized.setter
    def prioritized(self, prioritized):
        """Sets the prioritized of this IscsiTarget.


        :param prioritized: The prioritized of this IscsiTarget.  # noqa: E501
        :type prioritized: bool
        """

        self._prioritized = prioritized

    @property
    def replica_num(self):
        """Gets the replica_num of this IscsiTarget.  # noqa: E501


        :return: The replica_num of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._replica_num

    @replica_num.setter
    def replica_num(self, replica_num):
        """Sets the replica_num of this IscsiTarget.


        :param replica_num: The replica_num of this IscsiTarget.  # noqa: E501
        :type replica_num: int
        """
        if self.local_vars_configuration.client_side_validation and replica_num is None:  # noqa: E501
            raise ValueError("Invalid value for `replica_num`, must not be `None`")  # noqa: E501

        self._replica_num = replica_num

    @property
    def resiliency_type(self):
        """Gets the resiliency_type of this IscsiTarget.  # noqa: E501


        :return: The resiliency_type of this IscsiTarget.  # noqa: E501
        :rtype: ResiliencyType
        """
        return self._resiliency_type

    @resiliency_type.setter
    def resiliency_type(self, resiliency_type):
        """Sets the resiliency_type of this IscsiTarget.


        :param resiliency_type: The resiliency_type of this IscsiTarget.  # noqa: E501
        :type resiliency_type: ResiliencyType
        """

        self._resiliency_type = resiliency_type

    @property
    def stripe_num(self):
        """Gets the stripe_num of this IscsiTarget.  # noqa: E501


        :return: The stripe_num of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._stripe_num

    @stripe_num.setter
    def stripe_num(self, stripe_num):
        """Sets the stripe_num of this IscsiTarget.


        :param stripe_num: The stripe_num of this IscsiTarget.  # noqa: E501
        :type stripe_num: int
        """
        if self.local_vars_configuration.client_side_validation and stripe_num is None:  # noqa: E501
            raise ValueError("Invalid value for `stripe_num`, must not be `None`")  # noqa: E501

        self._stripe_num = stripe_num

    @property
    def stripe_size(self):
        """Gets the stripe_size of this IscsiTarget.  # noqa: E501


        :return: The stripe_size of this IscsiTarget.  # noqa: E501
        :rtype: int
        """
        return self._stripe_size

    @stripe_size.setter
    def stripe_size(self, stripe_size):
        """Sets the stripe_size of this IscsiTarget.


        :param stripe_size: The stripe_size of this IscsiTarget.  # noqa: E501
        :type stripe_size: int
        """
        if self.local_vars_configuration.client_side_validation and stripe_size is None:  # noqa: E501
            raise ValueError("Invalid value for `stripe_size`, must not be `None`")  # noqa: E501

        self._stripe_size = stripe_size

    @property
    def thin_provision(self):
        """Gets the thin_provision of this IscsiTarget.  # noqa: E501


        :return: The thin_provision of this IscsiTarget.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provision

    @thin_provision.setter
    def thin_provision(self, thin_provision):
        """Sets the thin_provision of this IscsiTarget.


        :param thin_provision: The thin_provision of this IscsiTarget.  # noqa: E501
        :type thin_provision: bool
        """
        if self.local_vars_configuration.client_side_validation and thin_provision is None:  # noqa: E501
            raise ValueError("Invalid value for `thin_provision`, must not be `None`")  # noqa: E501

        self._thin_provision = thin_provision

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IscsiTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IscsiTarget):
            return True

        return self.to_dict() != other.to_dict()
