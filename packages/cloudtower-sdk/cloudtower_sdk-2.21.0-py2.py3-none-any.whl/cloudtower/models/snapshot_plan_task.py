# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class SnapshotPlanTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster': 'NestedCluster',
        'end_time': 'str',
        'entity_async_status': 'EntityAsyncStatus',
        'id': 'str',
        'internal': 'bool',
        'local_id': 'str',
        'snapshot_group': 'NestedSnapshotGroup',
        'snapshot_plan': 'NestedSnapshotPlan',
        'start_time': 'str',
        'status': 'SnapshotPlanExecuteStatus',
        'type': 'SnapshotPlanTaskType'
    }

    attribute_map = {
        'cluster': 'cluster',
        'end_time': 'end_time',
        'entity_async_status': 'entityAsyncStatus',
        'id': 'id',
        'internal': 'internal',
        'local_id': 'local_id',
        'snapshot_group': 'snapshotGroup',
        'snapshot_plan': 'snapshotPlan',
        'start_time': 'start_time',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """SnapshotPlanTask - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._cluster = None
        self._end_time = None
        self._entity_async_status = None
        self._id = None
        self._internal = None
        self._local_id = None
        self._snapshot_group = None
        self._snapshot_plan = None
        self._start_time = None
        self._status = None
        self._type = None
        self.discriminator = None

        if "cluster" in kwargs:
            self.cluster = kwargs["cluster"]
        self.end_time = kwargs.get("end_time", None)
        self.entity_async_status = kwargs.get("entity_async_status", None)
        if "id" in kwargs:
            self.id = kwargs["id"]
        self.internal = kwargs.get("internal", None)
        if "local_id" in kwargs:
            self.local_id = kwargs["local_id"]
        self.snapshot_group = kwargs.get("snapshot_group", None)
        if "snapshot_plan" in kwargs:
            self.snapshot_plan = kwargs["snapshot_plan"]
        if "start_time" in kwargs:
            self.start_time = kwargs["start_time"]
        if "status" in kwargs:
            self.status = kwargs["status"]
        if "type" in kwargs:
            self.type = kwargs["type"]

    @property
    def cluster(self):
        """Gets the cluster of this SnapshotPlanTask.  # noqa: E501


        :return: The cluster of this SnapshotPlanTask.  # noqa: E501
        :rtype: NestedCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SnapshotPlanTask.


        :param cluster: The cluster of this SnapshotPlanTask.  # noqa: E501
        :type cluster: NestedCluster
        """
        if self.local_vars_configuration.client_side_validation and cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def end_time(self):
        """Gets the end_time of this SnapshotPlanTask.  # noqa: E501


        :return: The end_time of this SnapshotPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SnapshotPlanTask.


        :param end_time: The end_time of this SnapshotPlanTask.  # noqa: E501
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def entity_async_status(self):
        """Gets the entity_async_status of this SnapshotPlanTask.  # noqa: E501


        :return: The entity_async_status of this SnapshotPlanTask.  # noqa: E501
        :rtype: EntityAsyncStatus
        """
        return self._entity_async_status

    @entity_async_status.setter
    def entity_async_status(self, entity_async_status):
        """Sets the entity_async_status of this SnapshotPlanTask.


        :param entity_async_status: The entity_async_status of this SnapshotPlanTask.  # noqa: E501
        :type entity_async_status: EntityAsyncStatus
        """

        self._entity_async_status = entity_async_status

    @property
    def id(self):
        """Gets the id of this SnapshotPlanTask.  # noqa: E501


        :return: The id of this SnapshotPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotPlanTask.


        :param id: The id of this SnapshotPlanTask.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def internal(self):
        """Gets the internal of this SnapshotPlanTask.  # noqa: E501


        :return: The internal of this SnapshotPlanTask.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this SnapshotPlanTask.


        :param internal: The internal of this SnapshotPlanTask.  # noqa: E501
        :type internal: bool
        """

        self._internal = internal

    @property
    def local_id(self):
        """Gets the local_id of this SnapshotPlanTask.  # noqa: E501


        :return: The local_id of this SnapshotPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this SnapshotPlanTask.


        :param local_id: The local_id of this SnapshotPlanTask.  # noqa: E501
        :type local_id: str
        """
        if self.local_vars_configuration.client_side_validation and local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `local_id`, must not be `None`")  # noqa: E501

        self._local_id = local_id

    @property
    def snapshot_group(self):
        """Gets the snapshot_group of this SnapshotPlanTask.  # noqa: E501


        :return: The snapshot_group of this SnapshotPlanTask.  # noqa: E501
        :rtype: NestedSnapshotGroup
        """
        return self._snapshot_group

    @snapshot_group.setter
    def snapshot_group(self, snapshot_group):
        """Sets the snapshot_group of this SnapshotPlanTask.


        :param snapshot_group: The snapshot_group of this SnapshotPlanTask.  # noqa: E501
        :type snapshot_group: NestedSnapshotGroup
        """

        self._snapshot_group = snapshot_group

    @property
    def snapshot_plan(self):
        """Gets the snapshot_plan of this SnapshotPlanTask.  # noqa: E501


        :return: The snapshot_plan of this SnapshotPlanTask.  # noqa: E501
        :rtype: NestedSnapshotPlan
        """
        return self._snapshot_plan

    @snapshot_plan.setter
    def snapshot_plan(self, snapshot_plan):
        """Sets the snapshot_plan of this SnapshotPlanTask.


        :param snapshot_plan: The snapshot_plan of this SnapshotPlanTask.  # noqa: E501
        :type snapshot_plan: NestedSnapshotPlan
        """
        if self.local_vars_configuration.client_side_validation and snapshot_plan is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_plan`, must not be `None`")  # noqa: E501

        self._snapshot_plan = snapshot_plan

    @property
    def start_time(self):
        """Gets the start_time of this SnapshotPlanTask.  # noqa: E501


        :return: The start_time of this SnapshotPlanTask.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SnapshotPlanTask.


        :param start_time: The start_time of this SnapshotPlanTask.  # noqa: E501
        :type start_time: str
        """
        if self.local_vars_configuration.client_side_validation and start_time is None:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SnapshotPlanTask.  # noqa: E501


        :return: The status of this SnapshotPlanTask.  # noqa: E501
        :rtype: SnapshotPlanExecuteStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SnapshotPlanTask.


        :param status: The status of this SnapshotPlanTask.  # noqa: E501
        :type status: SnapshotPlanExecuteStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this SnapshotPlanTask.  # noqa: E501


        :return: The type of this SnapshotPlanTask.  # noqa: E501
        :rtype: SnapshotPlanTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SnapshotPlanTask.


        :param type: The type of this SnapshotPlanTask.  # noqa: E501
        :type type: SnapshotPlanTaskType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotPlanTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotPlanTask):
            return True

        return self.to_dict() != other.to_dict()
