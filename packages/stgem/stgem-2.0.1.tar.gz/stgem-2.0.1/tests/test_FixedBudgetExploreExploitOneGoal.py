import math

import numpy as np

from stgem.features import FeatureVector, Real
from stgem.limit import ExecutionCount
from stgem.monitor.stl import STLRobustness
from stgem.sut import SystemUnderTest
from stgem.testgenerator.ogan import OGAN
from stgem.testgenerator.random import RandomGenerator
from stgem.testsuitegenerator import run, ExploreExploitOneGoal


class Trigo(SystemUnderTest):
    def execute_test(self, input) -> float:
        x1 = input[0]
        x2 = input[1]
        x3 = input[2]
        result = 300 - 105 * (np.sin(x1) + np.sin(x2 * 2) + np.sin(x3 * 3))
        return result, {}

    def new_ifv(self) -> FeatureVector:
        return FeatureVector(features=[
            Real("x1", 0, 2 * math.pi),
            Real("x2", 0, 2 * math.pi),
            Real("x3", 0, 2 * math.pi)
        ])

    def from_ifv_to_testinput(self, input_fv):
        return [input_fv.x1, input_fv.x2, input_fv.x3]

    def new_ofv(self) -> FeatureVector:
        return FeatureVector(features=[
            Real("result", min_value=0, max_value=300, clip=True)
        ])

    def from_testouput_to_ofv(self, output):
        output_fv = self.new_ofv()
        output_fv.result = output
        return output_fv


def test_OGAN():
    monitor = STLRobustness("result > 0")
    tester = ExploreExploitOneGoal(
        sut=Trigo(),
        goal=lambda obj: monitor(obj, scale=True),
        limit=ExecutionCount(250),
        explore_generator=RandomGenerator(),
        exploit_generator=OGAN(),
        resources_for_exploration=0.2, resources_for_training=0.8
    )

    results = run(tester)
    print(results["robustness"][-10:])
    # assert results["objective"][250] < 0.2
