# Generated from stlLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,285,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,4,0,73,8,0,11,0,12,0,74,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,103,8,11,1,12,1,12,1,12,1,12,
        1,12,3,12,110,8,12,1,13,1,13,1,13,1,13,3,13,116,8,13,1,14,1,14,1,
        14,1,14,1,14,3,14,123,8,14,1,14,3,14,126,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,148,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,167,8,16,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,175,8,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        193,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,201,8,21,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,214,8,23,10,23,12,
        23,217,9,23,1,24,3,24,220,8,24,1,24,1,24,3,24,224,8,24,1,24,1,24,
        3,24,228,8,24,1,24,3,24,231,8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        27,3,27,240,8,27,1,27,1,27,1,28,1,28,5,28,246,8,28,10,28,12,28,249,
        9,28,1,28,4,28,252,8,28,11,28,12,28,253,3,28,256,8,28,1,29,1,29,
        1,30,1,30,1,30,3,30,263,8,30,1,30,1,30,3,30,267,8,30,1,31,1,31,1,
        32,4,32,272,8,32,11,32,12,32,273,1,33,1,33,1,33,1,33,1,33,1,34,4,
        34,282,8,34,11,34,12,34,283,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,
        59,0,61,0,63,0,65,0,67,0,69,0,1,0,8,3,0,9,10,13,13,32,32,2,0,33,
        33,126,126,2,0,60,60,62,62,2,0,48,57,95,95,2,0,69,69,101,101,1,0,
        49,57,1,0,48,57,2,0,65,90,97,122,310,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,1,72,1,0,0,0,3,78,1,0,0,0,5,80,1,0,0,0,7,82,1,0,0,0,9,84,1,
        0,0,0,11,86,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,92,1,0,0,0,19,
        94,1,0,0,0,21,96,1,0,0,0,23,102,1,0,0,0,25,109,1,0,0,0,27,115,1,
        0,0,0,29,122,1,0,0,0,31,147,1,0,0,0,33,166,1,0,0,0,35,174,1,0,0,
        0,37,176,1,0,0,0,39,180,1,0,0,0,41,192,1,0,0,0,43,200,1,0,0,0,45,
        202,1,0,0,0,47,206,1,0,0,0,49,230,1,0,0,0,51,232,1,0,0,0,53,234,
        1,0,0,0,55,236,1,0,0,0,57,255,1,0,0,0,59,257,1,0,0,0,61,266,1,0,
        0,0,63,268,1,0,0,0,65,271,1,0,0,0,67,275,1,0,0,0,69,281,1,0,0,0,
        71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,
        0,0,0,75,76,1,0,0,0,76,77,6,0,0,0,77,2,1,0,0,0,78,79,5,40,0,0,79,
        4,1,0,0,0,80,81,5,41,0,0,81,6,1,0,0,0,82,83,5,91,0,0,83,8,1,0,0,
        0,84,85,5,93,0,0,85,10,1,0,0,0,86,87,5,124,0,0,87,12,1,0,0,0,88,
        89,5,44,0,0,89,14,1,0,0,0,90,91,5,43,0,0,91,16,1,0,0,0,92,93,5,45,
        0,0,93,18,1,0,0,0,94,95,5,42,0,0,95,20,1,0,0,0,96,97,5,47,0,0,97,
        22,1,0,0,0,98,103,7,1,0,0,99,100,5,110,0,0,100,101,5,111,0,0,101,
        103,5,116,0,0,102,98,1,0,0,0,102,99,1,0,0,0,103,24,1,0,0,0,104,110,
        7,2,0,0,105,106,5,60,0,0,106,110,5,61,0,0,107,108,5,62,0,0,108,110,
        5,61,0,0,109,104,1,0,0,0,109,105,1,0,0,0,109,107,1,0,0,0,110,26,
        1,0,0,0,111,112,5,61,0,0,112,116,5,61,0,0,113,114,5,33,0,0,114,116,
        5,61,0,0,115,111,1,0,0,0,115,113,1,0,0,0,116,28,1,0,0,0,117,118,
        5,110,0,0,118,119,5,101,0,0,119,120,5,120,0,0,120,123,5,116,0,0,
        121,123,5,88,0,0,122,117,1,0,0,0,122,121,1,0,0,0,123,125,1,0,0,0,
        124,126,5,95,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,30,1,0,0,0,
        127,128,5,102,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,
        97,0,0,131,132,5,108,0,0,132,133,5,108,0,0,133,148,5,121,0,0,134,
        135,5,101,0,0,135,136,5,118,0,0,136,137,5,101,0,0,137,138,5,110,
        0,0,138,139,5,116,0,0,139,140,5,117,0,0,140,141,5,97,0,0,141,142,
        5,108,0,0,142,143,5,108,0,0,143,148,5,121,0,0,144,148,5,70,0,0,145,
        146,5,60,0,0,146,148,5,62,0,0,147,127,1,0,0,0,147,134,1,0,0,0,147,
        144,1,0,0,0,147,145,1,0,0,0,148,32,1,0,0,0,149,150,5,103,0,0,150,
        151,5,108,0,0,151,152,5,111,0,0,152,153,5,98,0,0,153,154,5,97,0,
        0,154,155,5,108,0,0,155,156,5,108,0,0,156,167,5,121,0,0,157,158,
        5,97,0,0,158,159,5,108,0,0,159,160,5,119,0,0,160,161,5,97,0,0,161,
        162,5,121,0,0,162,167,5,115,0,0,163,167,5,71,0,0,164,165,5,91,0,
        0,165,167,5,93,0,0,166,149,1,0,0,0,166,157,1,0,0,0,166,163,1,0,0,
        0,166,164,1,0,0,0,167,34,1,0,0,0,168,169,5,117,0,0,169,170,5,110,
        0,0,170,171,5,116,0,0,171,172,5,105,0,0,172,175,5,108,0,0,173,175,
        5,85,0,0,174,168,1,0,0,0,174,173,1,0,0,0,175,36,1,0,0,0,176,177,
        5,97,0,0,177,178,5,110,0,0,178,179,5,100,0,0,179,38,1,0,0,0,180,
        181,5,111,0,0,181,182,5,114,0,0,182,40,1,0,0,0,183,184,5,105,0,0,
        184,185,5,109,0,0,185,186,5,112,0,0,186,187,5,108,0,0,187,188,5,
        105,0,0,188,189,5,101,0,0,189,193,5,115,0,0,190,191,5,45,0,0,191,
        193,5,62,0,0,192,183,1,0,0,0,192,190,1,0,0,0,193,42,1,0,0,0,194,
        195,5,105,0,0,195,196,5,102,0,0,196,201,5,102,0,0,197,198,5,60,0,
        0,198,199,5,45,0,0,199,201,5,62,0,0,200,194,1,0,0,0,200,197,1,0,
        0,0,201,44,1,0,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,
        102,0,0,205,46,1,0,0,0,206,215,3,69,34,0,207,214,3,69,34,0,208,214,
        7,3,0,0,209,210,5,35,0,0,210,214,3,69,34,0,211,212,5,46,0,0,212,
        214,3,69,34,0,213,207,1,0,0,0,213,208,1,0,0,0,213,209,1,0,0,0,213,
        211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
        48,1,0,0,0,217,215,1,0,0,0,218,220,3,17,8,0,219,218,1,0,0,0,219,
        220,1,0,0,0,220,221,1,0,0,0,221,231,3,51,25,0,222,224,3,17,8,0,223,
        222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,231,3,53,26,0,226,
        228,3,17,8,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,
        231,3,55,27,0,230,219,1,0,0,0,230,223,1,0,0,0,230,227,1,0,0,0,231,
        50,1,0,0,0,232,233,3,57,28,0,233,52,1,0,0,0,234,235,3,61,30,0,235,
        54,1,0,0,0,236,237,3,61,30,0,237,239,7,4,0,0,238,240,3,17,8,0,239,
        238,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,3,57,28,0,242,
        56,1,0,0,0,243,247,3,59,29,0,244,246,3,63,31,0,245,244,1,0,0,0,246,
        249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,256,1,0,0,0,249,
        247,1,0,0,0,250,252,5,48,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,
        251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,243,1,0,0,0,255,
        251,1,0,0,0,256,58,1,0,0,0,257,258,7,5,0,0,258,60,1,0,0,0,259,260,
        3,65,32,0,260,262,5,46,0,0,261,263,3,65,32,0,262,261,1,0,0,0,262,
        263,1,0,0,0,263,267,1,0,0,0,264,265,5,46,0,0,265,267,3,65,32,0,266,
        259,1,0,0,0,266,264,1,0,0,0,267,62,1,0,0,0,268,269,7,6,0,0,269,64,
        1,0,0,0,270,272,7,6,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,
        1,0,0,0,273,274,1,0,0,0,274,66,1,0,0,0,275,276,5,86,0,0,276,277,
        5,97,0,0,277,278,5,114,0,0,278,279,5,95,0,0,279,68,1,0,0,0,280,282,
        7,7,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,
        1,0,0,0,284,70,1,0,0,0,26,0,74,102,109,115,122,125,147,166,174,192,
        200,213,215,219,223,227,230,239,247,253,255,262,266,273,283,1,6,
        0,0
    ]

class stlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    LPAREN = 2
    RPAREN = 3
    LBRACK = 4
    RBRACK = 5
    VBAR = 6
    COMMA = 7
    PLUS = 8
    MINUS = 9
    MULT = 10
    DIV = 11
    NEGATION = 12
    RELOP = 13
    EQUALITYOP = 14
    NEXTOP = 15
    FUTUREOP = 16
    GLOBALLYOP = 17
    UNTILOP = 18
    ANDOP = 19
    OROP = 20
    IMPLIESOP = 21
    EQUIVOP = 22
    INF = 23
    NAME = 24
    NUMBER = 25
    INT_NUMBER = 26
    FLOAT_NUMBER = 27
    SCIENTIFIC_NUMBER = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'|'", "','", "'+'", "'-'", "'*'", 
            "'/'", "'and'", "'or'", "'inf'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "VBAR", "COMMA", 
            "PLUS", "MINUS", "MULT", "DIV", "NEGATION", "RELOP", "EQUALITYOP", 
            "NEXTOP", "FUTUREOP", "GLOBALLYOP", "UNTILOP", "ANDOP", "OROP", 
            "IMPLIESOP", "EQUIVOP", "INF", "NAME", "NUMBER", "INT_NUMBER", 
            "FLOAT_NUMBER", "SCIENTIFIC_NUMBER" ]

    ruleNames = [ "WS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "VBAR", 
                  "COMMA", "PLUS", "MINUS", "MULT", "DIV", "NEGATION", "RELOP", 
                  "EQUALITYOP", "NEXTOP", "FUTUREOP", "GLOBALLYOP", "UNTILOP", 
                  "ANDOP", "OROP", "IMPLIESOP", "EQUIVOP", "INF", "NAME", 
                  "NUMBER", "INT_NUMBER", "FLOAT_NUMBER", "SCIENTIFIC_NUMBER", 
                  "DECIMAL_INTEGER", "NON_ZERO_DIGIT", "DECIMAL_FLOAT", 
                  "DIGIT", "DIGITS", "PREFIX", "LETTER" ]

    grammarFileName = "stlLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


