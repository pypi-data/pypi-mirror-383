name: Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check-version.outputs.tag != '' }}
      version: ${{ steps.check-version.outputs.tag || steps.dev-version.outputs.version }}
      tag: ${{ steps.check-version.outputs.tag }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.1
        with:
          version-command: |
            uv version --short

      - name: Bump version for developmental release
        id: dev-version
        if: ${{ ! steps.check-version.outputs.tag }}
        run: |
          uv version --bump patch
          current_version=$(uv version --short)
          dev_version="${current_version}.dev$(date +%s)"
          uv version $dev_version
          echo "version=$dev_version" >> $GITHUB_OUTPUT

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: needs.check-version.outputs.is_release == 'true'
    environment:
      name: pypi
      url: https://pypi.org/project/pynenc-redis/${{ needs.check-version.outputs.tag }}/
    permissions:
      id-token: write # For trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Publish package
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Add package link to job summary
        run: |
          echo "### ðŸ“¦ Package Published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version: \`${{ needs.check-version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [View on PyPI](https://pypi.org/project/pynenc-redis/${{ needs.check-version.outputs.tag }}/)" >> $GITHUB_STEP_SUMMARY

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: needs.check-version.outputs.is_release == 'false'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/pynenc-redis/${{ needs.check-version.outputs.version }}/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Publish package
        run: uv publish --index testpypi
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Add package link to job summary
        run: |
          echo "### ðŸ“¦ Package Published to TestPyPI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version: \`${{ needs.check-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [View on TestPyPI](https://test.pypi.org/project/pynenc-redis/${{ needs.check-version.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [check-version, publish-pypi]
    if: needs.check-version.outputs.is_release == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Publish release notes
        uses: release-drafter/release-drafter@v5.23.0
        with:
          publish: true
          tag: ${{ needs.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
