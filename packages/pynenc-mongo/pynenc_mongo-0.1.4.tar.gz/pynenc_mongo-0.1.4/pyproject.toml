[project]
name = "pynenc-mongo"
version = "0.1.4"
description = "MongoDB plugging for pynenc, a distributed task queue for Python."
authors = [{ name = "Luis Diaz", email = "code.luis.diaz@proton.me" }]
license = { text = "MIT License" }
readme = "README.md"
requires-python = ">=3.11.6,<4.0"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    "pynenc>=0.1.0rc101.dev109",
    "pymongo>=3.12.2,<3.13",
]

[tool.uv.sources]
pynenc = { index = "testpypi" }

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true


[project.urls]
Homepage = "https://pynenc.org"
Documentation = "https://docs.pynenc.org/plugins/mongo"
Repository = "https://github.com/pynenc/pynenc_mongo"

[project.entry-points."pynenc.plugins"]
mongo_builder = "pynenc_mongo.builder:MongoBuilderPlugin"
mongo_orchestrator = "pynenc_mongo.orchestrator.mongo_orchestrator"
mongo_state_backend = "pynenc_mongo.state_backend.mongo_state_backend"
mongo_broker = "pynenc_mongo.broker.mongo_broker"
mongo_arg_cache = "pynenc_mongo.arg_cache.mongo_arg_cache"
mongo_trigger = "pynenc_mongo.trigger.mongo_trigger"

[dependency-groups]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.25.3",
    "pytest-timeout>=2.2.0",
    "coverage[toml]>=7.2.6,<8.0",
    "mypy==1.7.0",
    "ruff>=0.14.0",
    "types-redis==4.6.0.2",
    "types-PyYAML==6.0.12.12",
    "pre-commit>=3.5.0",
    "types-requests>=2.32.0.20250602",
    "mongomock>=4.3.0",
    "testcontainers[mongodb]>=4.13.0",
]
tests = [
    "pynenc[tests]>=0.1.0rc101.dev109",
]
monitor = [
    "pynenc[monitor]>=0.1.0rc101.dev109",
]
docs = [
    "sphinx>=7.0",
    "myst-parser>=2",
    "furo>=2023",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.5.0",
    "sphinx-inline-tabs>=2023.4.21",
    "sphinx-autodoc2>=0.5.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pynenc_mongo"]

[tool.ruff]
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort # let ruff handle imports
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
lint.ignore = [
    "E501",  # Ignore line too long for comments and docstrings
    # "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    # "W191", # indentation contains tabs
    "UP037", # Remove quotes from type annotation
]


[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["F403"]

[tool.mypy]
files = ["pynenc_mongo"]
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = 'venv,env'
show_error_codes = true
pretty = true
allow_redefinition = true
no_implicit_optional = true
strict_equality = true

[tool.pytest.ini_options]
log_cli = true
filterwarnings = [
    "ignore:Running in a secondary thread. Signal handling will be skipped.:UserWarning",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning",
]
timeout = 30

[tool.coverage.run]
omit = [
    "tests/*",  # Exclude all files in the tests directory
]
relative_files = true # to combine coverage data from multiple processes

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if (typing\\.)?TYPE_CHECKING:",
    "^\\s*\\.\\.\\.\\s*$",  # ... ellipsis
    "if __name__ == .__main__.:",
]
