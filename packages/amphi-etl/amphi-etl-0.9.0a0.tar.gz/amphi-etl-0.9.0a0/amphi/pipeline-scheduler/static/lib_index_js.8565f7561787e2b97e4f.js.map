{"version":3,"file":"lib_index_js.8565f7561787e2b97e4f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA0B;AACO;AACyB;AACZ;AAC4C;AACpC;AACtD;AACA;AACA,QAAQ,OAAO,EAAE,4CAAU;AAC3B;AACA,0CAA0C,gEAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,oCAAoC,sCAAsC;AAC1E;AACA;AACA,gCAAgC;AAChC;AACA,yBAAyB,2EAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sCAAsC;AAC1E;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0CAA0C,wDAAW;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAe,CAAC,0DAAmB,UAAU,SAAS,wBAAwB;AAC9F,oBAAoB,0DAAmB,CAAC,gDAAc,IAAI;AAC1D;AACA;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B,wBAAwB,0DAAmB,UAAU,SAAS,qDAAqD;AACnH,4BAA4B,0DAAmB,WAAW,SAAS,iBAAiB;AACpF,gCAAgC,0DAAmB,CAAC,wCAAM,IAAI;AAC9D;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,sCAAsC;AACtG;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,uCAAuC;AACvC,4BAA4B,0DAAmB,WAAW,SAAS,oBAAoB;AACvF;AACA;AACA;AACA,oCAAoC,mDAAM,GAAG,iBAAiB;AAC9D,uDAAuD;AACvD;AACA;AACA,oCAAoC,+DAAU,GAAG,mBAAmB;AACpE;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uBAAuB,wDAAM;AAC7B;AACA;AACA,kBAAkB,wDAAM,iBAAiB,wDAAM,YAAY,iBAAiB;AAC5E,KAAK;AACL;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,gFAAgF,iBAAiB;AACjG,0CAA0C,oCAAoC;AAC9E;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;AC1OA;AACA;AACA;AACA;AAC+C;AACS;AACjD,4CAA4C,0DAA0D,IAAI;AACjH,qBAAqB,kEAAgB;AACrC,gBAAgB,yDAAM;AACtB;AACA;AACA;AACA,yBAAyB,qCAAqC,IAAI;AAClE,kCAAkC;AAClC,SAAS;AACT,qBAAqB,6BAA6B,IAAI;AACtD;AACA;AACA;AACA,2BAA2B,kEAAgB;AAC3C;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC5BoD;AACY;AACJ;AACG;AACA;AACxD,yBAAyB,8DAAO;AACvC;AACA,YAAY,yDAAkB;AAC9B,CAAC;AACM,uBAAuB,8DAAO;AACrC;AACA,YAAY,uDAAgB;AAC5B,CAAC;AACM,sBAAsB,8DAAO;AACpC;AACA,YAAY,2DAAe;AAC3B,CAAC;AACM,0BAA0B,8DAAO;AACxC;AACA,YAAY,uDAAmB;AAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBmE;AACZ;AACX;AACa;AACP;AAC6I;AACxJ;AACmH;AACjH;AAChB,CAAC;AAC+B,CAAC;AACP;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gDAAgD;AAChD,yBAAyB,kEAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0DAAgB;AACvD;AACA;AACA;AACA,wDAAwD,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,GAAG,KAAK,gBAAgB;AAC/D;AACA;AACA;AACA,iBAAiB,wDAAY,IAAI,YAAY;AAC7C;AACA;AACA;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,CAAC;AACD;AACA,mBAAmB,+CAA+C;AAClE,mBAAmB,sCAAI;AACvB,4CAA4C,+CAAQ;AACpD,oCAAoC,+CAAQ;AAC5C,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8BAA8B,wEAAoB;AAClD;AACA;AACA,aAAa;AACb;AACA,sCAAsC,kCAAkC;AACxE;AACA;AACA;AACA;AACA,YAAY,yCAAO;AACnB;AACA;AACA,YAAY,0DAAmB,CAAC,gDAAc,IAAI;AAClD;AACA;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","sources":["webpack://@amphi/pipeline-scheduler/./lib/BrowseFileDialog.js","webpack://@amphi/pipeline-scheduler/./lib/handler.js","webpack://@amphi/pipeline-scheduler/./lib/icons.js","webpack://@amphi/pipeline-scheduler/./lib/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, ConfigProvider, Typography } from 'antd';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { BreadCrumbs, DirListing, FilterFileBrowserModel } from '@jupyterlab/filebrowser';\nimport { Widget, PanelLayout } from '@lumino/widgets';\nconst BROWSE_FILE_CLASS = 'amphi-browseFileDialog';\nconst BROWSE_FILE_OPEN_CLASS = 'amphi-browseFileDialog-open';\nconst { Text } = Typography;\n/* ───────────────────────── breadcrumbs ───────────────────────── */\nclass BrowseFileDialogBreadcrumbs extends BreadCrumbs {\n    constructor(options) {\n        super(options);\n        this.model = options.model;\n        this.rootPath = options.rootPath;\n    }\n    onUpdateRequest(msg) {\n        super.onUpdateRequest(msg);\n        const contents = this.model.manager.services.contents;\n        const localPath = contents.localPath(this.model.path);\n        if (localPath && this.rootPath && localPath.indexOf(this.rootPath) === 0) {\n            const crumbs = document.querySelectorAll(`.${BROWSE_FILE_CLASS} .jp-BreadCrumbs > span[title]`);\n            crumbs.forEach(c => {\n                var _a;\n                const s = c;\n                if (s.title.indexOf((_a = this.rootPath) !== null && _a !== void 0 ? _a : '') === 0) {\n                    s.className = s.className.replace('amphi-BreadCrumbs-disabled', '').trim();\n                }\n                else if (s.className.indexOf('amphi-BreadCrumbs-disabled') === -1) {\n                    s.className += ' amphi-BreadCrumbs-disabled';\n                }\n            });\n        }\n    }\n}\n/* ─────────────────────── main widget ─────────────────────────── */\nclass BrowseFileDialog extends Widget {\n    constructor(props) {\n        var _a;\n        super(props);\n        this.switchWidget = null;\n        this.showAll = false;\n        /* filter definitions */\n        this.baseFilter = props.filter || (() => true);\n        // The extFilter checks file extensions\n        this.extFilter =\n            props.extensions && props.extensions.length\n                ? (m) => {\n                    if (m.type === 'directory')\n                        return true; // Always show directories\n                    const ext = `.${m.name.split('.').pop().toLowerCase()}`;\n                    return props.extensions.includes(ext);\n                }\n                : (() => true); // If no extensions are provided, show everything\n        // Initialize the model with the extension filter\n        this.model = new FilterFileBrowserModel({\n            manager: props.manager,\n            filter: BrowseFileDialog.boolToScore((m) => {\n                // Apply base filter first (user-provided filter)\n                if (!this.baseFilter(m))\n                    return false;\n                // Then apply extension filter if not showing all\n                if (!this.showAll && m.type !== 'directory') {\n                    const ext = `.${m.name.split('.').pop().toLowerCase()}`;\n                    return props.extensions && props.extensions.length ?\n                        props.extensions.includes(ext) : true;\n                }\n                return true;\n            })\n        });\n        const layout = (this.layout = new PanelLayout());\n        /* breadcrumbs */\n        this.breadCrumbs = new BrowseFileDialogBreadcrumbs({\n            model: this.model,\n            rootPath: props.rootPath\n        });\n        layout.addWidget(this.breadCrumbs);\n        /* toggle switch + label */\n        if (props.extensions && props.extensions.length) {\n            const container = document.createElement('div');\n            // Create a render function that can be called to update the UI\n            const renderSwitchUI = (showAllFiles) => {\n                ReactDOM.render(React.createElement(\"div\", { style: { marginBottom: '10px' } },\n                    React.createElement(ConfigProvider, { theme: {\n                            token: {\n                                // Seed Token\n                                colorPrimary: '#5F9B97',\n                            },\n                        } },\n                        React.createElement(\"div\", { style: { display: 'flex', alignItems: 'center', gap: '8px' } },\n                            React.createElement(\"span\", { style: { flexShrink: 0 } },\n                                React.createElement(Switch, { checked: showAllFiles, size: \"small\", style: {\n                                        width: '28px',\n                                        minWidth: '28px',\n                                        height: '16px',\n                                        lineHeight: '16px'\n                                    }, onChange: (checked) => {\n                                        this.showAll = checked;\n                                        // Update the filter based on the switch state\n                                        this.model.setFilter(BrowseFileDialog.boolToScore((m) => {\n                                            // Always apply base filter\n                                            if (!this.baseFilter(m))\n                                                return false;\n                                            // Apply extension filter only when showAll is false and it's a file\n                                            if (!checked && m.type !== 'directory') {\n                                                const ext = `.${m.name.split('.').pop().toLowerCase()}`;\n                                                return props.extensions && props.extensions.length ?\n                                                    props.extensions.includes(ext) : true;\n                                            }\n                                            return true;\n                                        }));\n                                        // Re-render with the new state\n                                        renderSwitchUI(checked);\n                                        void this.model.refresh();\n                                    } })),\n                            React.createElement(\"span\", { style: { fontSize: '14px' } }, showAllFiles ? \"Show all files\" : \"Only show relevant files\")))), container);\n            };\n            // Initial render\n            renderSwitchUI(this.showAll);\n            this.switchWidget = new Widget({ node: container });\n            layout.insertWidget(1, this.switchWidget); // directly under breadcrumbs\n        }\n        /* directory listing */\n        this.directoryListing = new DirListing({ model: this.model });\n        this.acceptFileOnDblClick = (_a = props.acceptFileOnDblClick) !== null && _a !== void 0 ? _a : true;\n        this.multiselect = !!props.multiselect;\n        this.includeDir = !!props.includeDir;\n        this.dirListingHandleEvent = this.directoryListing.handleEvent;\n        this.directoryListing.handleEvent = (e) => { this.handleEvent(e); };\n        layout.addWidget(this.directoryListing);\n    }\n    /* factory */\n    static async init(options) {\n        const dlg = new BrowseFileDialog({\n            manager: options.manager,\n            extensions: options.extensions,\n            filter: options.filter || (() => true),\n            multiselect: options.multiselect,\n            includeDir: options.includeDir,\n            rootPath: options.rootPath,\n            startPath: options.startPath,\n            acceptFileOnDblClick: options.acceptFileOnDblClick\n        });\n        if (options.startPath) {\n            if (!options.rootPath || options.startPath.indexOf(options.rootPath) === 0) {\n                await dlg.model.cd(options.startPath);\n            }\n        }\n        else if (options.rootPath) {\n            await dlg.model.cd(options.rootPath);\n        }\n        return dlg;\n    }\n    /* result */\n    getValue() {\n        const selected = [];\n        for (const item of this.directoryListing.selectedItems()) {\n            if (this.includeDir || item.type !== 'directory')\n                selected.push(item);\n        }\n        return selected;\n    }\n    /* event proxy */\n    handleEvent(event) {\n        var _a;\n        let modifierKey = false;\n        if (event instanceof MouseEvent || event instanceof KeyboardEvent) {\n            modifierKey = event.shiftKey || event.metaKey;\n        }\n        switch (event.type) {\n            case 'keydown':\n            case 'keyup':\n            case 'mousedown':\n            case 'mouseup':\n            case 'click':\n                if (this.multiselect || !modifierKey) {\n                    this.dirListingHandleEvent.call(this.directoryListing, event);\n                }\n                break;\n            case 'dblclick': {\n                const clicked = this.directoryListing.modelForClick(event);\n                if ((clicked === null || clicked === void 0 ? void 0 : clicked.type) === 'directory') {\n                    this.dirListingHandleEvent.call(this.directoryListing, event);\n                }\n                else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    if (this.acceptFileOnDblClick) {\n                        (_a = document.querySelector(`.${BROWSE_FILE_OPEN_CLASS} .jp-mod-accept`)) === null || _a === void 0 ? void 0 : _a.click();\n                    }\n                }\n                break;\n            }\n            default:\n                this.dirListingHandleEvent.call(this.directoryListing, event);\n                break;\n        }\n    }\n}\n/**\n * Helper function to convert a boolean predicate to a score function that the FileBrowserModel accepts\n */\nBrowseFileDialog.boolToScore = (pred) => (m) => (pred(m) ? {} : null);\n/* ───────────────────────── helper ───────────────────────────── */\nexport const showBrowseFileDialog = async (manager, options) => {\n    const body = await BrowseFileDialog.init({\n        manager,\n        extensions: options.extensions,\n        filter: options.filter,\n        multiselect: options.multiselect,\n        includeDir: options.includeDir,\n        rootPath: options.rootPath,\n        startPath: options.startPath,\n        acceptFileOnDblClick: Object.prototype.hasOwnProperty.call(options, 'acceptFileOnDblClick')\n            ? options.acceptFileOnDblClick\n            : true\n    });\n    const dialog = new Dialog({\n        title: 'Select a file',\n        body,\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Select' })]\n    });\n    dialog.addClass(BROWSE_FILE_CLASS);\n    document.body.className += ` ${BROWSE_FILE_OPEN_CLASS}`;\n    return dialog.launch().then(result => {\n        document.body.className = document.body.className\n            .replace(BROWSE_FILE_OPEN_CLASS, '')\n            .trim();\n        if (options.rootPath && result.button.accept && result.value.length) {\n            const root = options.rootPath.endsWith('/') ? options.rootPath : `${options.rootPath}/`;\n            result.value.forEach((v) => { v.path = v.path.replace(root, ''); });\n        }\n        return result;\n    });\n};\n","/* utils/requestScheduler.ts\n * Helper for making requests to the pipeline-scheduler endpoint\n * – Supports JSON requests with optional SSE streaming.\n */\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nexport async function requestScheduler(endpoint, { method = 'GET', body, stream = false, signal, init = {} } = {}) {\n    const settings = ServerConnection.makeSettings();\n    const url = URLExt.join(settings.baseUrl, 'pipeline-scheduler', endpoint);\n    const requestInit = {\n        method,\n        headers: {\n            ...(body ? { 'Content-Type': 'application/json' } : {}),\n            ...(init.headers || {})\n        },\n        ...(body ? { body: JSON.stringify(body) } : {}),\n        signal,\n        ...init\n    };\n    const response = await ServerConnection.makeRequest(url, requestInit, settings);\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, await response.text());\n    }\n    /* stream mode → return reader, caller parses SSE */\n    if (stream)\n        return response.body.getReader();\n    /* plain JSON reply */\n    return (await response.json());\n}\n","import { LabIcon } from '@jupyterlab/ui-components';\nimport databaseIconSvgStr from '../style/icons/database-24.svg';\nimport schemaIconSvgStr from '../style/icons/layout-24.svg';\nimport tableIconSvgStr from '../style/icons/hard-drive-24.svg';\nimport schedulerIconSvgStr from '../style/icons/scheduler.svg';\nexport const databaseIcon = new LabIcon({\n    name: 'amphi:database-browser-Icon',\n    svgstr: databaseIconSvgStr\n});\nexport const schemaIcon = new LabIcon({\n    name: 'amphi:schema-Icon',\n    svgstr: schemaIconSvgStr\n});\nexport const tableIcon = new LabIcon({\n    name: 'amphi:table-browser-icon',\n    svgstr: tableIconSvgStr\n});\nexport const schedulerIcon = new LabIcon({\n    name: 'amphi:scheduler-icon',\n    svgstr: schedulerIconSvgStr\n});\n","import { ICommandPalette, ReactWidget } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { requestScheduler } from './handler';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport React, { useState, useEffect } from 'react';\nimport { CalendarOutlined, ClockCircleOutlined, DeleteOutlined, EditOutlined, PlayCircleOutlined, PlusOutlined, ReloadOutlined, ScheduleOutlined, FolderOpenOutlined } from '@ant-design/icons';\nimport { schedulerIcon } from './icons';\nimport { Button, DatePicker, Empty, Form, Input, InputNumber, List, Modal, Radio, Select, Space, Spin, Tag, Tooltip, message, ConfigProvider } from 'antd';\nimport { createStyles } from 'antd-style';\nimport dayjs from 'dayjs'; // Import dayjs and Dayjs type\nimport { showBrowseFileDialog } from './BrowseFileDialog'; /* NEW */\nimport { Notification } from '@jupyterlab/apputils';\nfunction toHeaderRecord(h) {\n    if (!h)\n        return {};\n    if (h instanceof Headers) {\n        const obj = {};\n        h.forEach((v, k) => (obj[k] = v));\n        return obj;\n    }\n    if (Array.isArray(h))\n        return Object.fromEntries(h);\n    return { ...h };\n}\n/* ---------- API Client ---------- */\nclass SchedulerAPI {\n    static async makeRequest(endpoint, init = {}) {\n        const settings = ServerConnection.makeSettings();\n        const urlPatterns = ['pipeline-scheduler'];\n        let lastError = null;\n        for (const baseEndpoint of urlPatterns) {\n            try {\n                // take body out first so we can re-type it safely\n                const { body, ...rest } = init;\n                const requestInit = { ...rest };\n                // normalize headers to a plain object we can mutate\n                const headers = toHeaderRecord(rest.headers);\n                const method = (rest.method || 'GET').toUpperCase();\n                if (method !== 'GET' && body != null) {\n                    const isPlainObject = typeof body === 'object' &&\n                        !(body instanceof FormData) &&\n                        !(body instanceof URLSearchParams) &&\n                        !(body instanceof ArrayBuffer) &&\n                        !(body instanceof Blob);\n                    if (isPlainObject) {\n                        requestInit.body = JSON.stringify(body);\n                        headers['Content-Type'] = headers['Content-Type'] || 'application/json';\n                    }\n                    else {\n                        requestInit.body = body;\n                    }\n                }\n                requestInit.headers = headers;\n                const response = await requestScheduler(endpoint, requestInit);\n                return response;\n            }\n            catch (error) {\n                console.warn(`Failed to connect using ${baseEndpoint}:`, error);\n                lastError = error instanceof Error ? error : new Error(String(error));\n            }\n        }\n        throw lastError || new Error('Failed to connect to any API endpoint');\n    }\n    static listJobs() {\n        return this.makeRequest('jobs');\n    }\n    static getJob(id) {\n        return this.makeRequest(`jobs/${id}`);\n    }\n    static createJob(job) {\n        return this.makeRequest('jobs', {\n            method: 'POST',\n            body: job // This will be properly serialized by makeRequest\n        });\n    }\n    static deleteJob(id) {\n        return this.makeRequest(`jobs/${id}`, {\n            method: 'DELETE'\n        });\n    }\n    static runJob(id) {\n        // Server does not read a body here\n        return this.makeRequest(`run/${id}`, { method: 'POST' });\n    }\n}\n/* ---------- styles ---------- */\nconst useStyle = createStyles(({ token, css }) => ({\n    root: css `\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background: ${token.colorBgContainer};\n    color: ${token.colorText};\n  `,\n    header: css `\n    height: 52px;\n    border-bottom: 1px solid ${token.colorBorder};\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 12px 0 16px;\n  `,\n    headerTitle: css `\n    font-weight: 600;\n    font-size: 15px;\n  `,\n    content: css `\n    flex: 1;\n    overflow: auto;\n    padding: 16px;\n  `,\n    jobCard: css `\n    margin-bottom: 12px;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);\n  `,\n    jobMeta: css `\n    margin-bottom: 4px;\n    display: flex;\n    align-items: center;\n    color: ${token.colorTextSecondary};\n  `,\n    jobMetaIcon: css `\n    margin-right: 6px;\n  `,\n    actionsBar: css `\n    padding: 12px 16px;\n    border-top: 1px solid ${token.colorBorder};\n    display: flex;\n    justify-content: space-between;\n  `\n}));\n/* ---------- Components ---------- */\nconst JobForm = ({ docManager, onSubmit, onCancel, initialValues }) => {\n    const [form] = Form.useForm();\n    const [scheduleType, setScheduleType] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.schedule_type) || 'date');\n    const [dateType, setDateType] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.date_type) || 'once');\n    useEffect(() => {\n        if (initialValues) {\n            form.setFieldsValue(initialValues);\n            setScheduleType(initialValues.schedule_type || 'date');\n            setDateType(initialValues.date_type || 'once');\n        }\n    }, [initialValues, form]);\n    /* helper to launch the file-picker */\n    const pickPipelinePath = async () => {\n        try {\n            const res = await showBrowseFileDialog(docManager, {\n                extensions: ['.ampln', '.py'],\n                includeDir: false\n            });\n            if (res.button.accept && res.value.length) {\n                form.setFieldsValue({ pipeline_path: res.value[0].path });\n            }\n        }\n        catch (err) {\n            console.error('Browse file error:', err);\n            message.error('Failed to open file chooser');\n        }\n    };\n    return (React.createElement(ConfigProvider, { theme: {\n            token: {\n                colorPrimary: '#5F9B97',\n            },\n        } },\n        React.createElement(Form, { form: form, layout: \"vertical\", onFinish: onSubmit, initialValues: { schedule_type: 'date', date_type: 'once', ...initialValues } },\n            React.createElement(Form.Item, { name: \"id\", hidden: true },\n                React.createElement(Input, null)),\n            React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"name\", label: \"Task Name\", rules: [{ required: true, message: 'Please input a task name' }] },\n                React.createElement(Input, { placeholder: \"My Task Name\" })),\n            React.createElement(Form.Item, { style: { marginBottom: 16 }, label: \"Pipeline Path\", required: true },\n                React.createElement(Space.Compact, { style: { width: '100%' } },\n                    React.createElement(Form.Item, { name: \"pipeline_path\", noStyle: true, rules: [{ required: true, message: 'Please select a pipeline file' }] },\n                        React.createElement(Input, { readOnly: true, placeholder: \"Select a .ampln or .py file\" })),\n                    React.createElement(Button, { icon: React.createElement(FolderOpenOutlined, null), onClick: pickPipelinePath }))),\n            React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"schedule_type\", label: \"Schedule Type\" },\n                React.createElement(Radio.Group, { onChange: (e) => setScheduleType(e.target.value) },\n                    React.createElement(Radio, { value: \"date\" }, \"Date\"),\n                    React.createElement(Radio, { value: \"interval\" }, \"Interval\"),\n                    React.createElement(Radio, { value: \"cron\" }, \"Cron\"))),\n            scheduleType === 'date' && (React.createElement(React.Fragment, null,\n                React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"date_type\", label: \"Date Type\" },\n                    React.createElement(Select, { onChange: (value) => setDateType(value), style: { width: '100%' } },\n                        React.createElement(Select.Option, { value: \"once\" }, \"One-time\"),\n                        React.createElement(Select.Option, { value: \"daily\" }, \"Daily\"),\n                        React.createElement(Select.Option, { value: \"weekly\" }, \"Weekly\"),\n                        React.createElement(Select.Option, { value: \"monthly\" }, \"Monthly\"),\n                        React.createElement(Select.Option, { value: \"every_x_days\" }, \"Every X Days\"))),\n                dateType !== 'every_x_days' ? (React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"run_date\", label: dateType === 'once' ? 'Run Date & Time' : 'Start Date & Time', rules: [{ required: true, message: 'Please select a date and time' }] },\n                    React.createElement(DatePicker, { showTime: true, style: { width: '100%' } }))) : (React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"interval_days\", label: \"Interval (days)\", rules: [{ required: true, message: 'Please input a number of days' }] },\n                    React.createElement(InputNumber, { min: 1, style: { width: '100%' } }))))),\n            scheduleType === 'interval' && (React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"interval_seconds\", label: \"Interval (seconds)\", rules: [{ required: true, message: 'Please input an interval' }] },\n                React.createElement(InputNumber, { min: 1, style: { width: '100%' } }))),\n            scheduleType === 'cron' && (React.createElement(Form.Item, { style: { marginBottom: 16 }, name: \"cron_expression\", label: \"Cron Expression\", rules: [{ required: true, message: 'Please input a cron expression' }] },\n                React.createElement(Input, { placeholder: \"*/5 * * * *\" }))),\n            React.createElement(Form.Item, null,\n                React.createElement(Space, { style: { marginBottom: 16, width: '100%', justifyContent: 'flex-end' } },\n                    React.createElement(Button, { onClick: onCancel }, \"Cancel\"),\n                    React.createElement(Button, { type: \"primary\", htmlType: \"submit\" }, \"Submit\"))))));\n};\n/** getPythonCode – convert .ampln to Python */\nconst getPythonCode = async (path, commands, docManager) => {\n    console.log('Loaded path:', path);\n    // Ask for text; server may still return JSON for certain mimetypes\n    const file = await docManager.services.contents.get(path, {\n        content: true,\n        format: 'text'\n    });\n    console.log('Loaded file:', file);\n    if (file.content == null) {\n        console.error('File content is empty or null:', path);\n        throw new Error('Selected file is empty or could not be loaded');\n    }\n    if (path.endsWith('.ampln')) {\n        try {\n            const raw = file.content;\n            const jsonString = typeof raw === 'string'\n                ? raw\n                : JSON.stringify(raw);\n            // Many generators expect a string and will JSON.parse internally.\n            const code = (await commands.execute('pipeline-editor:generate-code', {\n                json: jsonString\n            }));\n            console.log('Generated Python code:', code);\n            if (!code)\n                throw new Error('Code generation failed');\n            return code;\n        }\n        catch (err) {\n            console.error('Error during code generation:', err);\n            throw err;\n        }\n    }\n    // .py and others: the server returns text, so just forward it\n    return file.content;\n};\nconst SchedulerPanel = ({ commands, docManager }) => {\n    const { styles } = useStyle();\n    const [jobs, setJobs] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [jobModalVisible, setJobModalVisible] = useState(false);\n    const [currentJob, setCurrentJob] = useState(null);\n    const fetchJobs = async () => {\n        setLoading(true);\n        try {\n            const data = await SchedulerAPI.listJobs();\n            setJobs(data.jobs || []);\n        }\n        catch (error) {\n            console.error('Error fetching jobs:', error);\n            Notification.error('Failed to fetch scheduled jobs');\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n        fetchJobs();\n        // Set up a refresh interval\n        const intervalId = setInterval(fetchJobs, 30000); // Refresh every 30 seconds\n        return () => clearInterval(intervalId);\n    }, []);\n    const handleCreateJob = () => {\n        setCurrentJob(null);\n        setJobModalVisible(true);\n    };\n    const handleEditJob = (job) => {\n        // Need to transform the job data to form values\n        const formValues = {\n            id: job.id,\n            name: job.name,\n            pipeline_path: job.pipeline_path,\n            schedule_type: job.schedule_type\n        };\n        if (job.schedule_type === 'date') {\n            formValues.date_type = job.date_type || 'once';\n            if (job.run_date) {\n                formValues.run_date = dayjs(job.run_date);\n            }\n            if (job.date_type === 'every_x_days') {\n                formValues.interval_days = job.interval_days;\n            }\n        }\n        if (job.schedule_type === 'interval') {\n            formValues.interval_seconds = job.interval_seconds;\n        }\n        if (job.schedule_type === 'cron') {\n            formValues.cron_expression = job.cron_expression;\n        }\n        setCurrentJob(formValues);\n        setJobModalVisible(true);\n    };\n    const handleDeleteJob = (jobId) => {\n        const promise = SchedulerAPI.deleteJob(jobId);\n        Notification.promise(promise, {\n            pending: { message: 'Deleting job…' },\n            success: { message: () => 'Job deleted successfully', options: { autoClose: 3000 } },\n            error: {\n                message: (err) => `Failed to delete job: ${err instanceof Error ? err.message : String(err)}`\n            }\n        });\n        promise.then(fetchJobs).catch(console.error);\n    };\n    const handleRunJob = async (jobId) => {\n        const job = jobs.find(j => j.id === jobId);\n        if (!job)\n            return;\n        const pythonCode = await getPythonCode(job.pipeline_path, commands, docManager);\n        const promise = SchedulerAPI.runJob(jobId).then(res => {\n            var _a;\n            if (!res.success)\n                throw new Error(res.error || 'Execution failed');\n            return (_a = res.output) !== null && _a !== void 0 ? _a : '';\n        });\n        Notification.promise(promise, {\n            pending: { message: 'Running pipeline…' },\n            success: { message: () => 'Pipeline executed successfully' },\n            error: {\n                message: (e) => `Pipeline execution failed: ${e instanceof Error ? e.message : String(e)}`\n            }\n        });\n    };\n    const handleFormSubmit = async (values) => {\n        try {\n            /* build payload for backend */\n            const formData = {\n                name: values.name,\n                schedule_type: values.schedule_type,\n                run_date: values.run_date ? values.run_date.toDate().toISOString() : undefined,\n                interval_seconds: values.interval_seconds,\n                cron_expression: values.cron_expression,\n                pipeline_path: values.pipeline_path // ALWAYS send the original path\n            };\n            // Add date_type if schedule_type is 'date'\n            if (values.schedule_type === 'date') {\n                formData.date_type = values.date_type || 'once';\n                if (values.date_type === 'every_x_days') {\n                    formData.interval_days = values.interval_days;\n                }\n            }\n            if (values.id)\n                formData.id = values.id;\n            /* .ampln → also send raw Python code */\n            if (values.pipeline_path.endsWith('.ampln')) {\n                formData.python_code = await getPythonCode(values.pipeline_path, commands, docManager);\n            }\n            await SchedulerAPI.createJob(formData);\n            Notification.success('Job created successfully');\n            setJobModalVisible(false);\n            fetchJobs();\n        }\n        catch (error) {\n            console.error('Error creating job:', error);\n            Notification.error('Failed to create job');\n        }\n    };\n    return (React.createElement(ConfigProvider, { theme: {\n            token: {\n                colorPrimary: '#5F9B97',\n            },\n        } },\n        React.createElement(\"div\", { className: styles.root },\n            React.createElement(\"div\", { className: styles.header },\n                React.createElement(Space, null,\n                    React.createElement(Button, { type: \"primary\", icon: React.createElement(PlusOutlined, null), onClick: handleCreateJob }, \"Task\"),\n                    React.createElement(Button, { icon: React.createElement(ReloadOutlined, null), onClick: fetchJobs }))),\n            React.createElement(\"div\", { className: styles.content }, loading ? (React.createElement(\"div\", { style: { textAlign: 'center', padding: '40px 0' } },\n                React.createElement(Spin, { size: \"large\" }))) : jobs.length === 0 ? (React.createElement(Empty, { description: \"No scheduled tasks yet\", image: Empty.PRESENTED_IMAGE_SIMPLE })) : (React.createElement(List, { itemLayout: \"vertical\", dataSource: jobs, renderItem: job => {\n                    const type = job.trigger.split('[')[0];\n                    return (React.createElement(List.Item, { key: job.id, actions: [\n                            React.createElement(Tooltip, { title: \"Run now\", key: \"run\" },\n                                React.createElement(Button, { type: \"text\", icon: React.createElement(PlayCircleOutlined, null), onClick: () => handleRunJob(job.id) })),\n                            React.createElement(Tooltip, { title: \"Edit\", key: \"edit\" },\n                                React.createElement(Button, { type: \"text\", icon: React.createElement(EditOutlined, null), onClick: () => handleEditJob(job) })),\n                            React.createElement(Tooltip, { title: \"Delete\", key: \"delete\" },\n                                React.createElement(Button, { type: \"text\", danger: true, icon: React.createElement(DeleteOutlined, null), onClick: () => handleDeleteJob(job.id) }))\n                        ] },\n                        React.createElement(List.Item.Meta, { title: React.createElement(Space, { wrap: true },\n                                React.createElement(\"span\", { style: { fontWeight: 600 } }, job.name),\n                                React.createElement(Tag, { icon: React.createElement(ClockCircleOutlined, null), color: \"default\" }, type)), description: React.createElement(\"div\", null,\n                                React.createElement(\"div\", { className: styles.jobMeta },\n                                    React.createElement(ScheduleOutlined, { className: styles.jobMetaIcon }),\n                                    React.createElement(\"span\", null,\n                                        \"Pipeline: \",\n                                        job.pipeline_path)),\n                                job.next_run_time && (React.createElement(\"div\", { className: styles.jobMeta },\n                                    React.createElement(CalendarOutlined, { className: styles.jobMetaIcon }),\n                                    React.createElement(\"span\", null,\n                                        \"Next: \",\n                                        dayjs(job.next_run_time).format('YYYY-MM-DD HH:mm:ss'))))) })));\n                } }))),\n            React.createElement(Modal, { title: currentJob ? 'Edit Task' : 'New Task', open: jobModalVisible, onCancel: () => setJobModalVisible(false), footer: null, destroyOnClose: true, width: 500 },\n                React.createElement(JobForm, { docManager: docManager, onSubmit: handleFormSubmit, onCancel: () => setJobModalVisible(false), initialValues: currentJob || undefined })))));\n};\n/* ---------- plugin ---------- */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'pipeline-scheduler:open';\n})(CommandIDs || (CommandIDs = {}));\nconst plugin = {\n    id: '@amphi/pipeline-scheduler:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, IDocumentManager],\n    activate: (app, palette, docManager) => {\n        const { commands, shell } = app;\n        commands.addCommand(CommandIDs.open, {\n            label: 'Pipeline Scheduler',\n            caption: 'Schedule Amphi pipelines',\n            execute: () => {\n                class SchedulerWidget extends ReactWidget {\n                    constructor() {\n                        super();\n                        this.id = 'amphi-pipeline-scheduler';\n                        this.title.caption = 'Pipeline Scheduler';\n                        this.title.icon = schedulerIcon;\n                        this.title.closable = true;\n                    }\n                    render() {\n                        return React.createElement(SchedulerPanel, { commands: commands, docManager: docManager });\n                    }\n                }\n                const widget = new SchedulerWidget();\n                if (!widget.isAttached)\n                    shell.add(widget, 'left');\n                shell.activateById(widget.id);\n            }\n        });\n        palette.addItem({ command: CommandIDs.open, category: 'Amphi' });\n        commands.execute(CommandIDs.open);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}