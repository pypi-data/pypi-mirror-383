# generated from JSON Schema

from __future__ import annotations

from datetime import date as date_aliased
from datetime import timedelta
from typing import Annotated, Any, ClassVar, Literal
from uuid import UUID

from pydantic import AnyUrl, Field, RootModel

from ..base import BaseFeature
from . import definitions


class Model(RootModel[Any]):
    root: Annotated[Any, Field(description="GML Anwendungsschema XPlanGML 6.0")]


class BPRichtungssektor(BaseFeature):
    """
    Spezifikation von Zusatzkontingenten Tag/Nacht der Lärmemission für einen Richtungssektor
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    winkelAnfang: Annotated[
        definitions.Angle,
        Field(
            description="Startwinkel des Emissionssektors",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "grad",
            },
        ),
    ]
    winkelEnde: Annotated[
        definitions.Angle,
        Field(
            description="Endwinkel des Emissionssektors",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "grad",
            },
        ),
    ]
    zkWertTag: Annotated[
        definitions.GenericMeasure,
        Field(
            description="Zusatzkontingent Tag",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "db",
            },
        ),
    ]
    zkWertNacht: Annotated[
        definitions.GenericMeasure,
        Field(
            description="Zusatzkontingent Nacht",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "db",
            },
        ),
    ]


class LPAdressatKomplex(BaseFeature):
    """
    Angaben zu Adressaten, an den sich das Ziel, das Erfordernis oder die Maßnahme richtet.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    adressatArt: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "4000",
            "5100",
            "5200",
            "5300",
            "5400",
            "5500",
            "6100",
            "6200",
            "6300",
            "6400",
            "6500",
            "7000",
            "8100",
            "8200",
            "8300",
            "9998",
            "9999",
        ],
        Field(
            description="Art des Adressaten, an den sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Naturschutz",
                        "alias": "Naturschutz",
                        "description": "Adressat Naturschutzverwaltung",
                    },
                    "2000": {
                        "name": "Bauleitplanung",
                        "alias": "Bauleitplanung",
                        "description": "Adressat Träger der Bauleitplanung",
                    },
                    "3000": {
                        "name": "Raumordnung",
                        "alias": "Raumordnung",
                        "description": "Adressat Landes- und Regionalplanung",
                    },
                    "4000": {
                        "name": "Flurneuordnung",
                        "alias": "Flurneuordnung",
                        "description": "Adressat Flurneuordnung",
                    },
                    "5100": {
                        "name": "Forstwirtschaft",
                        "alias": "Forstwirtschaft",
                        "description": "Adressat Forstwirtschaft.",
                    },
                    "5200": {
                        "name": "Landwirtschaft",
                        "alias": "Landwirtschaft",
                        "description": "Adressat Landwirtschaft. Bezieht sich in der Regel nicht auf einzelne Betriebe, sondern die Landwirtschaft im Allgemeinen.",
                    },
                    "5300": {
                        "name": "Wasserwirtschaft",
                        "alias": "Wasserwirtschaft",
                        "description": "Adressat Wasserwirtschaft.",
                    },
                    "5400": {
                        "name": "Fischereiwirtschaft",
                        "alias": "Fischereiwirtschaft",
                        "description": "Adressat Fischereiwirtschaft.",
                    },
                    "5500": {
                        "name": "Jagd",
                        "alias": "Jagd",
                        "description": "Adressat Jagd Ausübende und Jagdverbände.",
                    },
                    "6100": {
                        "name": "RohstoffgewinnungUndBergbau",
                        "alias": "Rohstoffgewinnung und Bergbau",
                        "description": "Adressat Rohstoffgewinnung/ Bergbau",
                    },
                    "6200": {
                        "name": "VerteidigungSicherungZivilbevoelkerung",
                        "alias": "Verteidigung, Sicherung der Zivilbevölkerung",
                        "description": "Adressat Verteidigung/Schutz der Zivilbevölkerung",
                    },
                    "6300": {
                        "name": "Verkehrsplanung",
                        "alias": "Verkehrsplanung",
                        "description": "Adressat Verkehrsplanung einschließlich Unterhaltung Verkehrswege",
                    },
                    "6400": {
                        "name": "Energiegewinnung",
                        "alias": "Energiegewinnung",
                        "description": "Adressat Energiegewinnung",
                    },
                    "6500": {
                        "name": "Abfallwirtschaft",
                        "alias": "Abfallwirtschaft",
                        "description": "Adressat Abfallwirtschaft",
                    },
                    "7000": {
                        "name": "Bodenschutz",
                        "alias": "Bodenschutz",
                        "description": "Adressat Bodenschutz",
                    },
                    "8100": {
                        "name": "KommunaleKoerperschaften",
                        "alias": "Kommunale Körperschaften",
                        "description": "Adressat Kommunale Körperschaften",
                    },
                    "8200": {
                        "name": "LandKreis",
                        "alias": "(Land-) Kreisverwaltung",
                        "description": "Adressat (Land-) Kreisverwaltung",
                    },
                    "8300": {
                        "name": "Land",
                        "alias": "Land",
                        "description": "Adressat Bundesland / Stadtstaat",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Adressat ist unbekannt (nur zur Übernahme von Altplänen)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Adressat gem. textlicher Angabe in AdressatText.",
                    },
                },
                "typename": "LP_AdressatArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    adressatText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu sonstigem Adressaten(adressatArt = 9999) oder ergänzende Information zu ausgewähltem anderen Adressaten.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBiologischeVielfaltTypKomplex(BaseFeature):
    """
    Angaben, auf welchen Bestandteil / Typus der Biologischen Vielfalt sich das Objekt bezieht:
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bioVielfaltTyp: Annotated[
        Literal["1000", "2000", "4000", "9999"],
        Field(
            description="Zeigt an, auf welchen Bestandteil der Biologischen Vielfalt sich das Objekt bezieht:",
            json_schema_extra={
                "enumDescription": {
                    "1000": {"name": "Art", "alias": "Art", "description": "Zielart"},
                    "2000": {
                        "name": "BiotopLebensraum",
                        "alias": "Biotop, Lebensraum",
                        "description": "Zielbiotop (Lebensraum)",
                    },
                    "4000": {
                        "name": "LebensstaetteArthabitat",
                        "alias": "Lebensstätte, Arthabitat",
                        "description": "Lebensstätte (Arthabitat)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Bestandteil Biologische Vielfalt (siehe bioVielfaltTypText)",
                    },
                },
                "typename": "LP_BioVfBestandteil",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    bioVielfaltTypText: Annotated[
        str | None,
        Field(
            description="Textliche Spezfizierung des Typs/Bestandteils der biologischen Vielfalt, wenn bioVielfaltTyp =  9999 („Sonstiger Bestandteil Biologische Vielfalt“), oder ergänzende Information zu anderen Typen der Biologischen Vielfalt",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBodenKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Boden, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bodenAuspraegung: Annotated[
        Literal[
            "1110",
            "1120",
            "1130",
            "2110",
            "2120",
            "2130",
            "2210",
            "2220",
            "2230",
            "2240",
            "3100",
            "4100",
            "4110",
            "4120",
            "5110",
            "5120",
            "5210",
            "6100",
            "6200",
            "9999",
        ],
        Field(
            description="Ausprägungen in Bezug auf Boden, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1110": {
                        "name": "Ablagerungen",
                        "alias": "Ablagerungen",
                        "description": "Ablagerungen",
                    },
                    "1120": {
                        "name": "Altablagerungsflaeche",
                        "alias": "Altablagerungsfläche",
                        "description": "Altablagerungsfläche",
                    },
                    "1130": {
                        "name": "Altlastenverdachtsflaeche",
                        "alias": "Altlastenverdachtsfläche",
                        "description": "Altlastenverdachtsfläche",
                    },
                    "2110": {
                        "name": "BodenFilterPufferfunktion",
                        "alias": "Boden Filter- und Pufferfunktion",
                        "description": "Boden mit Filter- und Pufferfunktion",
                    },
                    "2120": {
                        "name": "BodenHoheBodenfruchtbarkeit",
                        "alias": "Boden hohe Bodenfruchtbarkeit",
                        "description": "Boden mit hoher Bodenfruchtbarkeit",
                    },
                    "2130": {
                        "name": "BodenHoherFunktionglobalerKlimaschutz",
                        "alias": "Boden hoher funktionglobaler Klimaschutz",
                        "description": "Boden mit hoher Funktion für den globalen Klimaschutz",
                    },
                    "2210": {
                        "name": "BodenKulturgeschichtlicheBedeutung",
                        "alias": "Boden kulturgeschichtliche Bedeutung",
                        "description": "Boden mit kulturgeschichtlicher Bedeutung",
                    },
                    "2220": {
                        "name": "BodenNaturgeschichtlicheBedeutung",
                        "alias": "Boden naturgeschichtliche Bedeutung",
                        "description": "Boden mit naturgeschichtlicher Bedeutung",
                    },
                    "2230": {
                        "name": "BodenGeowissenschaftlicheBedeutung",
                        "alias": "Boden geowissenschaftliche Bedeutung",
                        "description": "Boden mit geowissenschaftlicher Bedeutung",
                    },
                    "2240": {
                        "name": "NatuerlicheBoedenExtremStandort",
                        "alias": "Natürliche Böden Extremstandort",
                        "description": "Natürliche Böden mit extremen Standorteigenschaften (nasse und feuchte Böden sowie Böden, die trocken und/oder nährstoffarm sind),",
                    },
                    "3100": {
                        "name": "ehemMilitaerischGenutzterStandort",
                        "alias": "Ehemaliger militärisch genutzter Standort",
                        "description": "Ehemals militärisch genutzter Standort",
                    },
                    "4100": {
                        "name": "Erosionsgefaehrdet",
                        "alias": "Erosionsgefährdet",
                        "description": "Erosionsgefährdete Fläche",
                    },
                    "4110": {
                        "name": "ErosionsgefaehrdetWind",
                        "alias": "Erosionsgefährdet Wind",
                        "description": "Erosionsgefährdete Fläche (Wind)",
                    },
                    "4120": {
                        "name": "ErosionsgefaehrdetWasser",
                        "alias": "Erosionsgefährdet Wasser",
                        "description": "Erosionsgefährdete Fläche (Wasser)",
                    },
                    "5110": {
                        "name": "Geotop",
                        "alias": "Geotop",
                        "description": "Geotop",
                    },
                    "5120": {
                        "name": "SelteneBodenform",
                        "alias": "Seltene Bodenform",
                        "description": "Seltene Bodenform",
                    },
                    "5210": {
                        "name": "NaturnaherBoden",
                        "alias": "Naturnaher Boden",
                        "description": "Naturnaher Boden",
                    },
                    "6100": {
                        "name": "BoedenHohesRetentionspotenzial",
                        "alias": "Böden hohes Retentionspotenzial",
                        "description": "Böden mit hohem Retentionspotenzial",
                    },
                    "6200": {
                        "name": "EntsiegelungWiederherstBodenfunktion",
                        "alias": "Entsiegelung oder Wiederherstellung Bodenfunktion",
                        "description": "Entsiegelung oder Wiederherstellung der natürlichen Bodenfunktionen",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Planungsgegenstand Schutzgut Boden (siehe bodenText)",
                    },
                },
                "typename": "LP_BodenAuspraegung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    bodenText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger Boden (bodenAuspraegung = 9999) oder ergänzende Information zu anderer ausgewählter Ausprägung des Planungsgegenstandes Boden.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPEingriffsregelungKomplex(BaseFeature):
    """
    Datentyp mit Angaben für eine komplexe Eingriffsregelung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    eRFlaechenArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"],
        Field(
            description="Differenzierung der Planungsaussagen mit Bezug zur Eingriffsregelung und der Bewältigung von Eingriffsfolgen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "PotenzielleFlaecheKompensation",
                        "alias": "Potenzielle Fläche Kompensation",
                        "description": "Potenzielle Fläche für Kompensation (nach §9 Abs. 3 Ziffer 4 lit. c BNatSchG)",
                    },
                    "2000": {
                        "name": "Flaechenpool",
                        "alias": "Flächenpool",
                        "description": "Flächenpool",
                    },
                    "3000": {
                        "name": "KompensationEinzelflaeche",
                        "alias": "Kompensation Einzelfläche",
                        "description": "Kompensation (Einzelfläche)",
                    },
                    "4000": {
                        "name": "Kompensationsverzeichnis",
                        "alias": "Kompensationsverzeichnis",
                        "description": "Kompensationsverzeichnis",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Typ von Kompensationsflächen/-Maßnahmen, siehe ERFlaechenArtText.",
                    },
                },
                "typename": "LP_ERFlaechenArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    eRFlaechenArtText: Annotated[
        str | None,
        Field(
            description="Textliche Differenzierung der Planungsaussagen mit Bezug zur Eingriffsregelung und der Bewältigung von Eingriffsfolgen, wenn ERFlaechenArt = 9999.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPErholungKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Erholung, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    erholungFunktionArt: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "2000",
            "2100",
            "2110",
            "2120",
            "2130",
            "2200",
            "2210",
            "2300",
            "2400",
            "2410",
            "2500",
            "2600",
            "2700",
            "2750",
            "2900",
            "3000",
            "3100",
            "3200",
            "3300",
            "3400",
            "4000",
            "4100",
            "4200",
            "4300",
            "5000",
            "5100",
            "5200",
            "5300",
            "5310",
            "6000",
            "6100",
            "6200",
            "7000",
            "7100",
            "7200",
            "9999",
        ],
        Field(
            description="Art der Erholungsfunktion oder -Infrastruktur, an die sich\r\n das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Gruenflaechen",
                        "alias": "Grünflächen",
                        "description": "Grünflächen allgemein",
                    },
                    "1100": {
                        "name": "ParkanlageGruenanlage",
                        "alias": "Parkanlage, Grünanlage",
                        "description": "Parkanlage / Grünanlage",
                    },
                    "1200": {
                        "name": "Dauerkleingaerten",
                        "alias": "Dauerkleingärten",
                        "description": "Dauerkleingarten",
                    },
                    "1300": {
                        "name": "Sportplatz",
                        "alias": "Sportplatz",
                        "description": "Sportplatz",
                    },
                    "1400": {
                        "name": "Spielplatz",
                        "alias": "Spielplatz",
                        "description": "Spielplatz",
                    },
                    "1500": {
                        "name": "BadeplatzFreibad",
                        "alias": "Badeplatz, Freibad",
                        "description": "Badeplatz, Freibad",
                    },
                    "1600": {
                        "name": "Liegewiese",
                        "alias": "Liegewiese",
                        "description": "Liegewiese",
                    },
                    "2000": {
                        "name": "Erholungsinfrastruktur",
                        "alias": "Erholungsinfrastruktur",
                        "description": "Erholungsinfrastruktur",
                    },
                    "2100": {
                        "name": "Schutzhuette",
                        "alias": "Schutzhütte",
                        "description": "Schutzhütte",
                    },
                    "2110": {
                        "name": "Rastplatz",
                        "alias": "Rastplatz",
                        "description": "Rastplatz",
                    },
                    "2120": {
                        "name": "Informationstafel",
                        "alias": "Informationstafel",
                        "description": "Informationstafel",
                    },
                    "2130": {
                        "name": "FeuerstelleGrillplatz",
                        "alias": "Feuerstelle, Grillplatz",
                        "description": "Feuerstelle, Grillplatz",
                    },
                    "2200": {
                        "name": "Aussichtsturm",
                        "alias": "Aussichtsturm",
                        "description": "Aussichtsturm",
                    },
                    "2210": {
                        "name": "Aussichtspunkt",
                        "alias": "Aussichtspunkt",
                        "description": "Aussichtspunkt",
                    },
                    "2300": {
                        "name": "Angelteich",
                        "alias": "Angelteich",
                        "description": "Angelteich",
                    },
                    "2400": {
                        "name": "Modellflugplatz",
                        "alias": "Modellflugplatz",
                        "description": "Modellflugplatz",
                    },
                    "2410": {
                        "name": "Gleitschirmplatz",
                        "alias": "Gleitschirmplatz",
                        "description": "Gleitschirmplatz",
                    },
                    "2500": {
                        "name": "WildgehegeSchaugatter",
                        "alias": "Wildgehege, Schaugatter",
                        "description": "Wildgehege, Schaugatter",
                    },
                    "2600": {
                        "name": "Parkplatz",
                        "alias": "Parkplatz",
                        "description": "Parkplatz",
                    },
                    "2700": {
                        "name": "ZeltplatzCampingplatz",
                        "alias": "Zeltplatz, Campingplatz",
                        "description": "Zeltplatz",
                    },
                    "2750": {
                        "name": "JugendzeltplatzEinzelcamp",
                        "alias": "Jugendzeltplatz, Einzelcamp",
                        "description": "Jugendzeltplatz, Jugendcamp",
                    },
                    "2900": {
                        "name": "ErholungsInfrastrukturBesBedeutung",
                        "alias": "Erholungs-Infrastruktur mit besonderer Bedeutung",
                        "description": "Erholungsinfrastruktur mit besonderer Bedeutung",
                    },
                    "3000": {
                        "name": "WandernAllgemein",
                        "alias": "Wandern allgemein",
                        "description": "Wandern allgemein",
                    },
                    "3100": {
                        "name": "Wanderweg",
                        "alias": "Wanderweg",
                        "description": "Wanderweg",
                    },
                    "3200": {
                        "name": "Lehrpfad",
                        "alias": "Lehrpfad",
                        "description": "Lehrpfad",
                    },
                    "3300": {
                        "name": "Reitweg",
                        "alias": "Reitweg",
                        "description": "Reitweg",
                    },
                    "3400": {
                        "name": "Radweg",
                        "alias": "Radweg",
                        "description": "Radweg",
                    },
                    "4000": {
                        "name": "Wintersport",
                        "alias": "Wintersport",
                        "description": "Wintersport allgemein",
                    },
                    "4100": {
                        "name": "Skiabfahrt",
                        "alias": "Skiabfahrt",
                        "description": "Skiabfahrt",
                    },
                    "4200": {
                        "name": "Skilanglaufloipe",
                        "alias": "Skilanglaufloipe",
                        "description": "Langlaufloipe",
                    },
                    "4300": {
                        "name": "RodelbahnBobbahn",
                        "alias": "Rodelbahn, Bobbahn",
                        "description": "Rodelbahn, Bobbahn",
                    },
                    "5000": {
                        "name": "WassersportSchifffahrt",
                        "alias": "Wassersport, Schifffahrt",
                        "description": "Wassersport allgemein",
                    },
                    "5100": {
                        "name": "Wasserwanderweg",
                        "alias": "Wasserwanderweg",
                        "description": "Wasserwanderweg",
                    },
                    "5200": {
                        "name": "Schifffahrtsroute",
                        "alias": "Schifffahrtsroute",
                        "description": "Schifffahrtsroute",
                    },
                    "5300": {
                        "name": "AnlegestelleMitMotorbooten",
                        "alias": "Anlegestelle mit Motorbooten",
                        "description": "Schiffsanlegestelle mit Motorbooten",
                    },
                    "5310": {
                        "name": "AnlegestelleOhneMotorboote",
                        "alias": "Anlegestelle ohne Motorboote",
                        "description": "Schiffsanlegestelle ohne Motorboote",
                    },
                    "6000": {
                        "name": "Seilbahn",
                        "alias": "Seilbahn",
                        "description": "Kabinenseilbahn",
                    },
                    "6100": {
                        "name": "SesselliftSchlepplift",
                        "alias": "Sessellift, Schlepplift",
                        "description": "Sessellift, Schlepplift",
                    },
                    "6200": {
                        "name": "Kabinenseilbahn",
                        "alias": "Kabinenseilbahn",
                        "description": "Kabinenseilbahn",
                    },
                    "7000": {
                        "name": "Bildungsstaette",
                        "alias": "Bildungsstätte",
                        "description": "Bildungsstätte",
                    },
                    "7100": {
                        "name": "Umweltbildungsstaette",
                        "alias": "Umweltbildungsstätte",
                        "description": "Umweltbildungsstätte",
                    },
                    "7200": {
                        "name": "Museum",
                        "alias": "Museum",
                        "description": "Museum",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges (siehe erholungFunktionText)",
                    },
                },
                "typename": "LP_ErholungFunktionen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    erholungFunktionText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger Planungsgegenstand Erholung oder ergänzende Information zu einer anderen ausgewählten Erholungsfunktion/Infrastruktur.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPKlimaKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Klima, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    klimaArt: Annotated[
        Literal["1000", "2000", "3100", "3200", "4100", "4200", "5000", "6000", "9999"],
        Field(
            description="Art des Planungsgegenstand für Klima, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "BioklimatischeFunktion",
                        "alias": "Bioklimatische Funktion",
                        "description": "Bioklimatische Funktion",
                    },
                    "2000": {
                        "name": "Luftleitbahn",
                        "alias": "Luftleitbahn",
                        "description": "Luftleitbahn",
                    },
                    "3100": {
                        "name": "Frischluftbahn",
                        "alias": "Frischluftbahn",
                        "description": "Frischluftbahn",
                    },
                    "3200": {
                        "name": "Frischluftentstehungsgebiet",
                        "alias": "Frischluftentstehungsgebiet",
                        "description": "Frischluftentstehungsgebiet",
                    },
                    "4100": {
                        "name": "Kaltluftbahn",
                        "alias": "Kaltluftbahn",
                        "description": "Kaltluftbahn",
                    },
                    "4200": {
                        "name": "Kaltluftentstehungsgebiet",
                        "alias": "Kaltluftentstehungsgebiet",
                        "description": "Kaltluftentstehungsgebiet",
                    },
                    "5000": {
                        "name": "Stadtklima",
                        "alias": "Stadtklima",
                        "description": "Stadtklima",
                    },
                    "6000": {
                        "name": "THGSenkenKlimaschutzflaechen",
                        "alias": "THG-Senken Klimaschutzflächen",
                        "description": "Treibhausgas-Senken (Klimaschutzflächen)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Planungsgegenstand Schutzgut Klima (siehe klimaText)",
                    },
                },
                "typename": "LP_KlimaArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    klimaText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger Planungsgegenstand Schutzgut Klima oder ergänzende Information zu ausgewählten Planungsgegenständen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPLandschaftsbildKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Landschaftsbild, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    landschaftsbildArt: Annotated[
        Literal[
            "1100",
            "1200",
            "1300",
            "1500",
            "1400",
            "1600",
            "2100",
            "2200",
            "3100",
            "3200",
            "4100",
            "4200",
            "5100",
            "5200",
            "6100",
            "6200",
            "7000",
            "7100",
            "7200",
            "7300",
            "8000",
            "9999",
        ],
        Field(
            description="Art des Planungsgegenstand für das Landschaftsbild, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1100": {
                        "name": "KircheKlosterKapelle",
                        "alias": "Kirche, Kloster, Kapelle",
                        "description": "Kirche/Kloster/Kapelle",
                    },
                    "1200": {
                        "name": "BurgSchloss",
                        "alias": "Burg, Schloss",
                        "description": "Burg/Schloss",
                    },
                    "1300": {"name": "Turm", "alias": "Turm", "description": "Turm"},
                    "1500": {
                        "name": "HistorischesOrtsbild",
                        "alias": "Historisches Ortsbild",
                        "description": "Historisches Ortsbild",
                    },
                    "1400": {"name": "Ruine", "alias": "Ruine", "description": "Ruine"},
                    "1600": {
                        "name": "kulturgeschichtlichWertvollerOrtsteil",
                        "alias": "Kulturgeschichtlich wertvoller Ortsteil",
                        "description": "kulturgeschichtlich wertvoller Ortsteil",
                    },
                    "2100": {
                        "name": "Aussichtspunkt",
                        "alias": "Aussichtspunkt",
                        "description": "Aussichtspunkt",
                    },
                    "2200": {
                        "name": "Aussichtsturm",
                        "alias": "Aussichtsturm",
                        "description": "Aussichtsturm",
                    },
                    "3100": {
                        "name": "landschaftsgerechteEinbindung",
                        "alias": "Landschaftsgerechte Einbindung",
                        "description": "landschaftsgerechte Einbindung von Bebauung und Infrastruktur",
                    },
                    "3200": {
                        "name": "LandschaftsgerechterSiedlungsrand",
                        "alias": "Landschaftsgerechter Siedlungsrand",
                        "description": "Landschaftsgerechter Siedlungsrand",
                    },
                    "4100": {
                        "name": "Strukturvielfalt",
                        "alias": "Strukturvielfalt",
                        "description": "Strukturvielfalt",
                    },
                    "4200": {
                        "name": "LandschaftHoheEigenart",
                        "alias": "Landschaft mit hoher Eigenart",
                        "description": "Landschaft mit hoher Eigenart",
                    },
                    "5100": {
                        "name": "Landschaftsachsen",
                        "alias": "Landschaftsachsen",
                        "description": "Landschaftsachsen, Sichtachsen",
                    },
                    "5200": {
                        "name": "Landschaftsraeume",
                        "alias": "Landschaftsräume",
                        "description": "Landschaftsräume",
                    },
                    "6100": {
                        "name": "HistorischeWaldinsel",
                        "alias": "Historische Waldinsel",
                        "description": "Historische Waldinsel",
                    },
                    "6200": {
                        "name": "Waldraender",
                        "alias": "Waldränder",
                        "description": "Waldränder",
                    },
                    "7000": {
                        "name": "Kulturlandschaft",
                        "alias": "Kulturlandschaft",
                        "description": "Kulturlandschaft",
                    },
                    "7100": {
                        "name": "HistorischeKulturlandschaft",
                        "alias": "Historische Kulturlandschaft",
                        "description": "Historische Kulturlandschaft",
                    },
                    "7200": {
                        "name": "Kulturlandschaftselement",
                        "alias": "Kulturlandschaftselement",
                        "description": "Kulturlandschaftselement",
                    },
                    "7300": {
                        "name": "Hohlweg",
                        "alias": "Hohlweg",
                        "description": "Hohlweg",
                    },
                    "8000": {
                        "name": "Gartendenkmal",
                        "alias": "Gartendenkmal",
                        "description": "Gartendenkmal",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Planungsgegenstand Schutzgut Landschaftsbild",
                    },
                },
                "typename": "LP_LandschaftsbildArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    landschaftsbildText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger Planungsgegenstand Schutzgut Landschaftsbild oder ergänzende Information zu anderem ausgewähltem Planungsgegenstand Landschaftsbild.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPLuftKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Luft, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    luftArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"],
        Field(
            description="Art des Planungsgegenstand für Luft, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Geruchsbelastung",
                        "alias": "Geruchsbelastung",
                        "description": "Geruchsbelastung",
                    },
                    "2000": {
                        "name": "Laermbelastung",
                        "alias": "Lärmbelastung",
                        "description": "Lärmbelastung",
                    },
                    "3000": {
                        "name": "lufthygienischeFktStofflBelastung",
                        "alias": "Lufthygienische Fkt., Stoffl. Belastung",
                        "description": "lufthygienische Funktion / Stoffliche Belastung",
                    },
                    "4000": {
                        "name": "Staubbelastung",
                        "alias": "Staubbelastung",
                        "description": "Staubbelastung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Planungsgegenstand Schutzgut Luft (siehe luftText)",
                    },
                },
                "typename": "LP_LuftArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    luftText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger Planungsgegenstand Schutzgut Luft oder ergänzende Information zu anderem ausgewähltem Planungsgegenstand Luft.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPNutzungseinschraenkungKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben zu Nutzungseinschränkungen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    hatNutzungseinschraenkung: Annotated[
        bool,
        Field(
            description="Zeigt an, ob eine Einschränkung bestimmter Nutzungen empfohlen/vorgeschlagen wird.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    nutzungseinschraenkungText: Annotated[
        str,
        Field(
            description="Textfeld, Erläuterung von Art und Umfang der empfohlenen/vorgeschlagenen Einschränkung bestimmter Nutzungen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class LPReferenzLPObjekt(BaseFeature):
    """
    Verweis auf einen anderen Planinhalt (LP-Objekt) dieses Plans, der mit diesem LP-Objekt in Verbindung steht.
    Dieses kennzeichnet ein zugehöriges Objekt im Landschaftsplan.
    (z.B. kann zum Beispiel ein ges. gesch. Biotop aus LP_SchutzBestimmterTeileVonNaturUndLandschaft ein Feature der Klasse LP_ZieleErfordernisseMassnahmen referenzieren, in dem die Angabe des Biotoptypen-Schlüssels nach BKompV und / oder Landeskartierschlüssel erfolgt.
    Oder ein Objekt der Klasse LP_BiotopverbundBiotopvernetzung referenziert ein Objekt der Klasse LP_ZieleErfordernisseMassnahmen, in dem die Arten oder Biotoptypen näher spezifiziert werden, die über das Biotopverbundelement vernetzt werden sollen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    beschreibung: Annotated[
        str | None,
        Field(
            description="Textliche Beschreibung der Beziehung zwischen diesem und dem referenzierten Landschaftsplanungs-Objekt.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    verbundenesLPObjekt: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf einen anderen Planinhalt, der mit diesem LP-Objekt in Verbindung steht.",
            json_schema_extra={
                "typename": [
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                ],
                "stereotype": "Association",
                "multiplicity": "1",
            },
        ),
    ]


class LPSchutzgutKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben zum Schutzgut/Schutzgütern, auf die sich die Ziele, Erfordernisse und Maßnahmen richten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    schutzgutArt: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "4000",
            "5000",
            "6000",
            "7000",
            "8000",
            "9000",
            "9998",
            "9999",
        ],
        Field(
            description="Schutzgüter von Naturschutz und Landschaftspflege, abgeleitet aus § 1 BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "AlleSchutzgueter",
                        "alias": "Alle Schutzgüter",
                        "description": "Alle Schutzgüter betreffend.",
                    },
                    "2000": {
                        "name": "ArtenLebensgemeinschaften",
                        "alias": "Arten und Lebensgemeinschaften",
                        "description": "Arten und Lebensgemeinschaften",
                    },
                    "3000": {
                        "name": "Biotope",
                        "alias": "Biotope",
                        "description": "Biotope",
                    },
                    "4000": {"name": "Boden", "alias": "Boden", "description": "Boden"},
                    "5000": {
                        "name": "Wasser",
                        "alias": "Wasser",
                        "description": "Wasser.",
                    },
                    "6000": {
                        "name": "Klima",
                        "alias": "Klima",
                        "description": "Klima.",
                    },
                    "7000": {"name": "Luft", "alias": "Luft", "description": "Luft."},
                    "8000": {
                        "name": "Landschaftsbild",
                        "alias": "Landschaftsbild",
                        "description": "Landschaftsbild.",
                    },
                    "9000": {
                        "name": "ErholungInNaturUndLandschaft",
                        "alias": "Erholung in Natur und Landschaft",
                        "description": "Erholung In Natur und Landschaft",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Schutzgut ist unbekannt (nur zur Übernahme von Altplänen)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Schutzgut gem. textlicher Angabe in schutzgutText",
                    },
                },
                "typename": "LP_SchutzgutArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    schutzgutText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu sonstigem Schutzgut (schutzgutArt = 9999) oder ergänzende Information zu ausgewähltem anderen Schutzgut.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPTypBioVerbundKomplex(BaseFeature):
    """
    Datentyp mit Angaben zu Typen des Biotopverbunds.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    flaechenTypBV: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Flächentyp des Biotopverbunds nach § 21 Abs. 3 BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Kernflaeche",
                        "alias": "Kernfläche",
                        "description": "Kernfläche",
                    },
                    "2000": {
                        "name": "Verbindungsfläche",
                        "alias": "Verbindungsfläche",
                        "description": "Verbindungsfläche",
                    },
                    "3000": {
                        "name": "Verbindungselement",
                        "alias": "Verbindungselement",
                        "description": "Verbindungselement",
                    },
                },
                "typename": "LP_FlaechenTypBV",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    flaechentypBVSpeziell: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000", "9999"] | None,
        Field(
            description="Differenzierung des speziellen Flächentyp des Biotopverbunds nach § 21 Abs. 3 BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verbindungsraeume",
                        "alias": "Verbindungsräume",
                        "description": "Verbindungsräume",
                    },
                    "2000": {
                        "name": "Verbundachse",
                        "alias": "Verbundachse",
                        "description": "Verbundachse",
                    },
                    "3000": {
                        "name": "Wildtierkorridor",
                        "alias": "Wildtierkorridor",
                        "description": "Wildtierkorridor",
                    },
                    "4000": {
                        "name": "Entwicklungsflaeche",
                        "alias": "Entwicklungsfläche",
                        "description": "Entwicklungsfläche",
                    },
                    "5000": {
                        "name": "Entwicklungsmassnahme",
                        "alias": "Entwicklungsmaßnahme",
                        "description": "Entwicklungsmaßnahme",
                    },
                    "6000": {
                        "name": "Vernetzungselement",
                        "alias": "Vernetzungselement",
                        "description": "Vernetzungselement",
                    },
                    "7000": {
                        "name": "Trittsteinbiotop",
                        "alias": "Trittsteinbiotop",
                        "description": "Trittsteinbiotop",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Biotopverbundelement.",
                    },
                },
                "typename": "LP_FlaechenTypBVSpeziell",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    flaechentypSpeziellText: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzungen zu flaechentypBVSpeziell.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPVorschlagIntegrationBLP(BaseFeature):
    """
    Datentyp zur Erfassung von Verweisen auf Objekte im Modellbereich Bauleitplanung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in den FNP/Bebauungsplan vorgeschlagen wird. Referenziert ein Objekt mit Angabe der Begründung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    begruendung: Annotated[
        str,
        Field(
            description="Begründung/Information der Landschaftsplanung, warum dieses Objekt zur Übernahme in die Bauleitplanung vorgeschlagen wird.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    refObjektBLP: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf ein Objekt im Modellbereich Bauleitplanung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in einen Bauleitplan vorgeschlagen wird.",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "multiplicity": "1",
            },
        ),
    ]


class LPVorschlagIntegrationBauleitplanung(BaseFeature):
    """
    Vorschlag zur Integration in die Bauleitplanung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    begruendung: Annotated[
        str,
        Field(
            description="Begründung, warum die Landschaftsplanung die Übernahme in die Bauleitplanung vorschlägt / empfiehlt / festsetzt.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    refObjektBauleitplanung: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf ein Objekt im Modellbereich Bauleitplanung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in einen Bauleitplan vorgeschlagen wird.",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "multiplicity": "1",
            },
        ),
    ]


class LPVorschlagIntegrationRO(BaseFeature):
    """
    Datentyp zur Erfassung von Verweisen auf Objekte im Modellbereich Raumordnung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in den Raumordnungsplan vorgeschlagen wird. Referenziert ein Objekt mit Angabe der Begründung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    begruendung: Annotated[
        str,
        Field(
            description="Begründung/Information der Landschaftsplanung, warum dieses Objekt zur Übernahme in die Raumordnung vorgeschlagen wird.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    refObjektRO: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf ein Objekt im Modellbereich Raumordnung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in den Raumordnungsplan vorgeschlagen wird.",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "multiplicity": "1",
            },
        ),
    ]


class LPVorschlagIntegrationRaumordnung(BaseFeature):
    """
    Vorschlag zur Integration in die Raumordnung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    begruendung: Annotated[
        str | None,
        Field(
            description="Begründung, warum die Landschaftsplanung die Übernahme in die Bauleitplanung vorschlägt / empfiehlt / festsetzt.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refObjektRaumordnung: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf ein Objekt im Modellbereich Raumordnung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in einen Raumordnungsplan vorgeschlagen wird.",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "multiplicity": "1",
            },
        ),
    ]


class LPWasserKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben in Bezug auf Planungsgegenstand Wasser, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet..
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    wasserAuspraegung: Annotated[
        Literal[
            "1100",
            "1200",
            "1300",
            "1310",
            "1320",
            "1400",
            "1500",
            "1600",
            "1700",
            "2100",
            "2200",
            "2300",
            "2400",
            "3100",
            "3200",
            "3300",
            "3400",
            "3500",
            "3600",
            "3700",
            "5100",
            "5200",
            "5300",
            "5400",
            "6100",
            "6200",
            "6300",
            "6400",
            "7100",
            "7200",
            "7300",
            "8100",
            "8200",
            "9999",
        ],
        Field(
            description="Ausprägungen in Bezug auf Planungsgegenstand Wasser, an die sich das Ziel, das Erfordernis oder die Maßnahme richtet.",
            json_schema_extra={
                "enumDescription": {
                    "1100": {
                        "name": "Hochwasserschutz",
                        "alias": "Hochwasserschutz",
                        "description": "Ziele, Erfordernisse oder Maßnahmen begründet durch Hochwasserschutz.",
                    },
                    "1200": {
                        "name": "Ueberschwemmungsgebiet",
                        "alias": "Überschwemmungsgebiet",
                        "description": "ZEM begründet mit Lage in Überschwemmungsgebiet. Das wasserrechtliche Gebiet selbst sollte in SO_Wasserrecht angelegt werden.",
                    },
                    "1300": {
                        "name": "Hochwasservorsorge",
                        "alias": "Hochwasservorsorge",
                        "description": "Hochwasservorsorge",
                    },
                    "1310": {
                        "name": "Retentionsraum",
                        "alias": "Retentionsraum",
                        "description": "Retentionsraum",
                    },
                    "1320": {
                        "name": "Polderflaeche",
                        "alias": "Polderfläche",
                        "description": "Polderfläche",
                    },
                    "1400": {
                        "name": "Deichrueckverlegung",
                        "alias": "Deichrückverlegung",
                        "description": "Deichrückverlegung",
                    },
                    "1500": {
                        "name": "Trinkwassergewinnung",
                        "alias": "Trinkwassergewinnung",
                        "description": "Ziele, Erfordernisse oder Maßnahmen begründet mit Lage in Trinkwassergewinnungsgebiet. Das wasserrechtliche Gebiet selbst sollte in SO_Wasserrecht angelegt werden.",
                    },
                    "1600": {
                        "name": "Trinkwasserschutz",
                        "alias": "Trinkwasserschutz",
                        "description": "Ziele, Erfordernisse oder Maßnahmen begründet mit Lage in Trinkwasserschutz-Einzugsgebiet. Das wasserrechtliche Gebiet selbst sollte in SO_Wasserrecht angelegt werden.",
                    },
                    "1700": {
                        "name": "Grundwasserneubildungsgebiet",
                        "alias": "Grundwasserneubildungsgebiet",
                        "description": "Ziele, Erfordernisse oder Maßnahmen begründet mit Lage in Grundwasserneubildungsgebiet. Das wasserrechtliche Gebiet selbst sollte in SO_Wasserrecht angelegt werden.",
                    },
                    "2100": {
                        "name": "LaengsdurchgaengigkeitGewaesser",
                        "alias": "Längsdurchgängigkeit Gewässer",
                        "description": "Längsdurchgängigkeit von Gewässern",
                    },
                    "2200": {
                        "name": "MindestwasserfuehrungGewaesser",
                        "alias": "Mindestwasserführung Gewässer",
                        "description": "Mindestwasserführung von Gewässern",
                    },
                    "2300": {
                        "name": "Drainage",
                        "alias": "Drainage",
                        "description": "Drainage",
                    },
                    "2400": {
                        "name": "Entwaesserungsgraben",
                        "alias": "Entwässerungsgraben",
                        "description": "Entwässerungsgraben",
                    },
                    "3100": {
                        "name": "NaturnaeheGewaesser",
                        "alias": "Naturnahe Gewässer",
                        "description": "Naturnähe von Gewässern",
                    },
                    "3200": {
                        "name": "NaturnaheUferbereiche",
                        "alias": "Naturnahe Uferbereiche",
                        "description": "Naturnahe Uferbereiche von Standgewässern/Fließgewässern",
                    },
                    "3300": {
                        "name": "OekologischeFunktionFliessgewaesser",
                        "alias": "Ökologische Funktion Fliessgewässer",
                        "description": "Ökologische Funktion Fließgewässer",
                    },
                    "3400": {
                        "name": "OekologischeFunktionQuellbereich",
                        "alias": "Ökologische Funktion Quellbereich",
                        "description": "Ökologische Funktion Quellbereich",
                    },
                    "3500": {
                        "name": "OekologischeFunktionStillgewaesser",
                        "alias": "Ökologische Funktion Stillgewässer",
                        "description": "Ökologische Funktion Stillgewässer",
                    },
                    "3600": {
                        "name": "Gewaesserstruktur",
                        "alias": "Gewässerstruktur",
                        "description": "Gewässerstruktur",
                    },
                    "3700": {
                        "name": "Gewaesserdynamik",
                        "alias": "Gewässerdynamik",
                        "description": "Gewässerdynamik",
                    },
                    "5100": {
                        "name": "Gewaesserrandstreifen",
                        "alias": "Gewässerrandstreifen",
                        "description": "Gewässerrandstreifen",
                    },
                    "5200": {
                        "name": "Gewaesserschutzstreifen",
                        "alias": "Gewässerschutzstreifen",
                        "description": "Gewässerschutzstreifen",
                    },
                    "5300": {
                        "name": "Pufferzone",
                        "alias": "Pufferzone",
                        "description": "Pufferzone",
                    },
                    "5400": {
                        "name": "Ufergehoelze",
                        "alias": "Ufergehölze",
                        "description": "Ufergehölze",
                    },
                    "6100": {
                        "name": "FischaufstiegsAbstiegsanlage",
                        "alias": "Fischaufstiegs- oder abstiegsanlage",
                        "description": "Fischaufstiegs- bzw. -abstiegsanlage",
                    },
                    "6200": {"name": "Wehr", "alias": "Wehr", "description": "Wehr"},
                    "6300": {
                        "name": "Verrohrung",
                        "alias": "Verrohrung",
                        "description": "Verrohrung",
                    },
                    "6400": {
                        "name": "Sohlstufe",
                        "alias": "Sohlstufe",
                        "description": "Sohlstufe",
                    },
                    "7100": {
                        "name": "Gewaesserguete",
                        "alias": "Gewässergüte",
                        "description": "Gewässergüte",
                    },
                    "7200": {
                        "name": "StoffeintraegeInGrundwasser",
                        "alias": "Stoffeinträge in Grundwasser",
                        "description": "Stoffeinträge in Grundwasser",
                    },
                    "7300": {
                        "name": "StoffeintraegeInOberflaechengewaesser",
                        "alias": "Stoffeinträge in Oberflächengewässer",
                        "description": "Stoffeinträge in Oberflächengewässer",
                    },
                    "8100": {
                        "name": "Versickerungsflaeche",
                        "alias": "Versickerungsfläche",
                        "description": "Versickerungsfläche",
                    },
                    "8200": {
                        "name": "Verlandungsbereiche",
                        "alias": "Verlandungsbereiche",
                        "description": "Verlandungsbereich",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Planungsgegenstand Schutzgut Wasser (siehe wasserText)",
                    },
                },
                "typename": "LP_WasserAuspraegung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    wasserText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiges (wasserAuspraegung = 9999) oder ergänzende Information zu anderer ausgewählter Ausprägung des Planungsgegenstandes Wasser.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOKomplexeFestlegungGewaesser(BaseFeature):
    """
    Spezifikation der Zweckbestimmung der Fläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "2000",
            "20000",
            "20001",
            "20002",
            "3000",
            "4000",
            "40000",
            "5000",
            "6000",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Gewaesser",
                        "alias": "Gewässer",
                        "description": "Allgemeines, bestehendes Gewässer",
                    },
                    "2000": {
                        "name": "FliessGewaesser",
                        "alias": "Fließgewässer",
                        "description": "Allgemeines Fließgewässer",
                    },
                    "20000": {
                        "name": "Gewaesser1Ordnung",
                        "alias": "Gewässer 1. Ordnung",
                        "description": "Bestehendes Gewässer 1. Ordnung",
                    },
                    "20001": {
                        "name": "Gewaesser2Ordnung",
                        "alias": "Gewässer 2. Ordnung",
                        "description": "Bestehendes Gewässer 2. Ordnung",
                    },
                    "20002": {
                        "name": "Gewaesser3Ordnung",
                        "alias": "Gewässer 3. Ordnung",
                        "description": "Bestehendes Gewässer 3. Ordnung",
                    },
                    "3000": {
                        "name": "StehendesGewaesser",
                        "alias": "Stehendes Gewässer",
                        "description": "Stehendes Gewässer",
                    },
                    "4000": {"name": "Hafen", "alias": "Hafen", "description": "Hafen"},
                    "40000": {
                        "name": "Sportboothafen",
                        "alias": "Sportboothafen",
                        "description": "Sportboothafen",
                    },
                    "5000": {
                        "name": "Wasserstrasse",
                        "alias": "Wasserstraße",
                        "description": "Wasserstraße",
                    },
                    "6000": {"name": "Kanal", "alias": "Kanal", "description": "Kanal"},
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges bestehendes Gewässer",
                    },
                },
                "typename": "SO_KlassifizGewaesser",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizGewaesser",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPDatumAttribut(BaseFeature):
    """
    Generische Attribute vom Datentyp "Datum"
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Generischen Attributs",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    wert: Annotated[
        date_aliased,
        Field(
            description="Attributwert",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "1",
            },
        ),
    ]


class XPDoubleAttribut(BaseFeature):
    """
    Generisches Attribut vom Datentyp "Double".
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Generischen Attributs",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    wert: Annotated[
        float,
        Field(
            description="Attributwert",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class XPGemeinde(BaseFeature):
    """
    Spezifikation einer für die Aufstellung des Plans zuständigen Gemeinde.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ags: Annotated[
        str | None,
        Field(
            description="Amtlicher Gemeindeschlüssel (früher Gemeinde-Kennziffer)",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rs: Annotated[
        str | None,
        Field(
            description="Regionalschlüssel",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gemeindeName: Annotated[
        str | None,
        Field(
            description="Name der Gemeinde.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ortsteilName: Annotated[
        str | None,
        Field(
            description="Name des Ortsteils",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPGesetzlicheGrundlage(BaseFeature):
    """
    Angeben zur Spezifikation der gesetzlichen Grundlage eines Planinhalts
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str | None,
        Field(
            description="Name / Titel des Gesetzes",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    datum: Annotated[
        date_aliased | None,
        Field(
            description="Bekanntmachungs-Datum des Gesetzes",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detail: Annotated[
        str | None,
        Field(
            description="Detaillierte Spezifikation der gesetzlichen Grundlage mit Angabe einer Paragraphennummer",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPHoehenangabe(BaseFeature):
    """
    Spezifikation einer Angabe zur vertikalen Höhe oder zu einem Bereich vertikaler Höhen. Es ist möglich, spezifische Höhenangaben (z.B. die First- oder Traufhöhe eines Gebäudes) vorzugeben oder einzuschränken, oder den Gültigkeitsbereich eines Planinhalts auf eine bestimmte Höhe (hZwingend) bzw. einen Höhenbereich (hMin - hMax) zu beschränken, was vor allem bei der höhenabhängigen Festsetzung einer überbaubaren Grundstücksfläche (BP_UeberbaubareGrundstuecksflaeche), einer Baulinie (BP_Baulinie) oder einer Baugrenze (BP_Baugrenze) relevant ist. In diesem Fall bleiben die Attribute bezugspunkt und abweichenderBezugspunkt unbelegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    abweichenderHoehenbezug: Annotated[
        str | None,
        Field(
            description='Textuelle Spezifikation des Höhenbezuges wenn das Attribut "hoehenbezug" nicht belegt ist.',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    hoehenbezug: Annotated[
        Literal["1000", "1100", "1200", "2000", "2500", "3000", "3500", "4000"] | None,
        Field(
            description="Art des Höhenbezuges.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "absolutNHN",
                        "alias": "Absolut NHN",
                        "token": "NHN",
                        "description": "Absolute Höhenangabe im Bezugssystem DHHN92 (Höhe über NHN)",
                    },
                    "1100": {
                        "name": "absolutNN",
                        "alias": "Absolut NN",
                        "token": "NN",
                        "description": "Absolute Höhenangabe im Bezugssystem NN",
                    },
                    "1200": {
                        "name": "absolutDHHN",
                        "alias": "Absolut DHHN",
                        "token": "DHHN",
                        "description": "Absolute Höhenangabe im Bezugssystem DHHN2016 (Höhe über Normalhöhen-Null (NHN) im DHHN2016)",
                    },
                    "2000": {
                        "name": "relativGelaendeoberkante",
                        "alias": "Relativ Gelände-Oberkante",
                        "token": "GelOK",
                        "description": "Höhenangabe relativ zur Geländeoberkante an der Position des Planinhalts.",
                    },
                    "2500": {
                        "name": "relativGehwegOberkante",
                        "alias": "Relativ Gehweg-Oberkante",
                        "token": "GehOK",
                        "description": "Höhenangabe relativ zur Gehweg-Oberkante an der Position des Planinhalts.",
                    },
                    "3000": {
                        "name": "relativBezugshoehe",
                        "alias": "Relativ Bezugshöhe",
                        "token": "Relativ",
                        "description": "Höhenangabe relativ zu der auf Planebene festgelegten absoluten Bezugshöhe (Attribut bezugshoehe von XP_Plan).",
                    },
                    "3500": {
                        "name": "relativStrasse",
                        "alias": "Relativ Straße",
                        "token": "Str",
                        "description": "Höhenangabe relativ zur Strassenmitte an der Position des Planinhalts",
                    },
                    "4000": {
                        "name": "relativEFH",
                        "alias": "Relativ Erdgeschoß-Fußbodenhöhe",
                        "token": "EFH",
                        "description": "Höhenangabe relativ zur Erdgeschoss-Fußbodenhöhe an Position des Planinhalts.",
                    },
                },
                "typename": "XP_ArtHoehenbezug",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichenderBezugspunkt: Annotated[
        str | None,
        Field(
            description='Textuelle Spezifikation eines Höhenbezugspunktes wenn das Attribut "bezugspunkt" nicht belegt ist.',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bezugspunkt: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "3500",
            "4000",
            "4500",
            "5000",
            "5500",
            "6000",
            "6500",
            "6600",
        ]
        | None,
        Field(
            description='Bestimmung des Bezugspunktes der Höhenangaben. Wenn weder dies Attribut noch das Attribut "abweichenderBezugspunkt" belegt sind, soll die Höhenangabe als vertikale Einschränkung des zugeordneten Planinhalts interpretiert werden.',
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "TH",
                        "alias": "Traufhöhe",
                        "token": "TH",
                        "description": "Traufhöhe als Höhenbezugspunkt",
                    },
                    "2000": {
                        "name": "FH",
                        "alias": "Firsthöhe",
                        "token": "FH",
                        "description": "Firsthöhe als Höhenbezugspunkt.",
                    },
                    "3000": {
                        "name": "OK",
                        "alias": "Oberkante",
                        "token": "OK",
                        "description": "Oberkante als Höhenbezugspunkt.",
                    },
                    "3500": {
                        "name": "LH",
                        "alias": "Lichte Höhe",
                        "token": "LH",
                        "description": "Lichte Höhe",
                    },
                    "4000": {
                        "name": "SH",
                        "alias": "Sockelhöhe",
                        "token": "SH",
                        "description": "Sockelhöhe",
                    },
                    "4500": {
                        "name": "EFH",
                        "alias": "Erdgeschoß-Fußbodenhöhe",
                        "token": "EFH",
                        "description": "Erdgeschoss Fußbodenhöhe",
                    },
                    "5000": {
                        "name": "HBA",
                        "alias": "Höhe baulicher Anlagen",
                        "token": "HA",
                        "description": "Höhe Baulicher Anlagen",
                    },
                    "5500": {
                        "name": "UK",
                        "alias": "Unterkante",
                        "token": "UK",
                        "description": "Unterkante",
                    },
                    "6000": {
                        "name": "GBH",
                        "alias": "Gebäudehöhe",
                        "token": "GH",
                        "description": "Gebäudehöhe",
                    },
                    "6500": {
                        "name": "WH",
                        "alias": "Wandhöhe",
                        "token": "WH",
                        "description": "Wandhöhe",
                    },
                    "6600": {
                        "name": "GOK",
                        "alias": "Geländeoberkante",
                        "token": "GOK",
                        "description": "Geländeoberkante",
                    },
                },
                "typename": "XP_ArtHoehenbezugspunkt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bezugspunktText: Annotated[
        str | None,
        Field(
            description='Das Attribut spezifiziert  oder ergänzt den Bezug des Höhenbezugspunktes (insbesondere der Traufhöhe), z. B. als "bergseitig, "talseitig", "straßenseitig" oder "gartenseitig".',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    hMin: Annotated[
        definitions.Length | None,
        Field(
            description='Minimal zulässige Höhe des Bezugspunktes (bezugspunkt) bei einer Bereichsangabe, bzw. untere Grenze des vertikalen Gültigkeitsbereiches eines Planinhalts, wenn "bezugspunkt" nicht belegt ist. In diesem Fall gilt: Ist  "hMax" nicht belegt, gilt die Festlegung ab der Höhe "hMin".',
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    hMax: Annotated[
        definitions.Length | None,
        Field(
            description='Maximal zulässige Höhe des Bezugspunktes (bezugspunkt) bei einer Bereichsangabe, bzw. obere Grenze des vertikalen Gültigkeitsbereiches eines Planinhalts, wenn "bezugspunkt" nicht belegt ist.  In diesem Fall gilt: Ist  "hMin" nicht belegt, gilt die Festlegung bis zur Höhe "hMax".',
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    hZwingend: Annotated[
        definitions.Length | None,
        Field(
            description="Zwingend einzuhaltende Höhe des Bezugspunktes (bezugspunkt) , bzw. Beschränkung der vertikalen Gültigkeitsbereiches eines Planinhalts auf eine bestimmte Höhe.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    h: Annotated[
        definitions.Length | None,
        Field(
            description="Maximal zulässige Höhe des Bezugspunktes (bezugspunkt) .",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None


class XPIntegerAttribut(BaseFeature):
    """
    Generische Attribute vom Datentyp "Integer".
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Generischen Attributs",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    wert: Annotated[
        int,
        Field(
            description="Attributwert",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class XPPlangeber(BaseFeature):
    """
    Spezifikation der Institution, die für den Plan verantwortlich ist.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Plangebers.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    kennziffer: Annotated[
        str | None,
        Field(
            description="Kennziffer des Plangebers.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPStringAttribut(BaseFeature):
    """
    Generisches Attribut vom Datentyp "CharacterString"
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Generischen Attributs",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    wert: Annotated[
        str,
        Field(
            description="Attributwert",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class XPURLAttribut(BaseFeature):
    """
    Generische Attribute vom Datentyp "URL"
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    name: Annotated[
        str,
        Field(
            description="Name des Generischen Attributs",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    wert: Annotated[
        AnyUrl,
        Field(
            description="Attributwert",
            json_schema_extra={
                "typename": "URI",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class XPVerbundenerPlan(BaseFeature):
    """
    Spezifikation eines anderen Plans, der mit dem Ausgangsplan oder Planbereich verbunden ist und diesen ändert bzw. von ihm geändert wird.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    planName: Annotated[
        str | None,
        Field(
            description='Name (Attribut "name" von XP_Plan) des verbundenen Plans.',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aenderungsArt: Annotated[
        Literal["1000", "10000", "10001", "10002", "2000", "3000"],
        Field(
            description="Spezifikation der Art der Änderungsbeziehung zwischen den verbundenen Plan- bzw. Planbereichs-Objekten.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aenderung",
                        "alias": "Änderung",
                        "description": "Einzelne Planinhalte im Planungsbereich werden durch neue Inhalte ersetzt, neue Inhalte werden ergänzt, bestehen Inhalte werden gestrichen oder bleiben erhalten.",
                    },
                    "10000": {
                        "name": "Ersetzung",
                        "alias": "Ersetzung",
                        "description": "Einzelne Planinhalte im Planungsbereich werden durch neue Inhalte ersetzt.",
                    },
                    "10001": {
                        "name": "Ergaenzung",
                        "alias": "Ergänzung",
                        "description": "Alle bestehenden Inhalte bleiben erhalten, und es werden neue Inhalte ergänzt.",
                    },
                    "10002": {
                        "name": "Streichung",
                        "alias": "Streichung",
                        "description": "Einzelne Planinhalte im Planungsbereich werden ersatzlos gestrichen.",
                    },
                    "2000": {
                        "name": "Aufhebung",
                        "alias": "Aufhebung",
                        "description": "Alle Inhalte des geänderten Plans im Geltungsbereich des ändernden Plans werden ersatzlos außer Kraft gesetzt.",
                    },
                    "3000": {
                        "name": "Ueberplanung",
                        "alias": "Überplanung",
                        "description": "Alle Inhalte des geänderten Plans im Geltungsbereich des ändernden Plans werden außer Kraft gesetzt und durch die neuen Inhalte ersetzt.",
                    },
                },
                "typename": "XP_Aenderungsarten",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    nummer: Annotated[
        str | None,
        Field(
            description='Nummer (Attribut "nummer" von XP_Plan) des verbundenen Plans',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aenderungsdatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, an dem die Änderung in Kraft getreten ist. Das Attribut muss mit dem Datum des Inkrafttretens des ändernden Plans konsistent sein.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    verbundenerPlan: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Referenz auf einen verbundenen Plan, der den aktuellen Plan oder Planbereich ändert oder von ihm geändert wird.",
            json_schema_extra={
                "typename": ["BP_Plan", "FP_Plan", "LP_Plan", "RP_Plan", "SO_Plan"],
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPVerbundenerPlanBereich(XPVerbundenerPlan):
    """
    Spezifikation eines anderen Planbereichs, der mit einem Ausgangsplan oder Ausgangsbereich verknüpft ist und diesen ändert bzw. von ihm geändert wird.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bereichNummer: Annotated[
        int | None,
        Field(
            description="Nummer (Attribut nummer von XP_Bereich) des verbundenen Planbereiches.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    verbundenerPlanBereich: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Referenz auf einen verbundenen Planbereich, der den aktuellen Plan oder Planbereich ändert oder von ihm geändert wird.",
            json_schema_extra={
                "typename": [
                    "BP_Bereich",
                    "FP_Bereich",
                    "LP_Bereich",
                    "RP_Bereich",
                    "SO_Bereich",
                ],
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPVerfahrensMerkmal(BaseFeature):
    """
    Vermerk eines am Planungsverfahren beteiligten Akteurs.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    vermerk: Annotated[
        str,
        Field(
            description="Inhalt des Vermerks.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    datum: Annotated[
        date_aliased,
        Field(
            description="Datum des Vermerks",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "1",
            },
        ),
    ]
    signatur: Annotated[
        str,
        Field(
            description="Unterschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    signiert: Annotated[
        bool,
        Field(
            description="Angabe, ob die Unterschrift erfolgt ist.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class XPWirksamkeitBedingung(BaseFeature):
    """
    Spezifikation von Bedingungen für die Wirksamkeit oder Unwirksamkeit einer Festsetzung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bedingung: Annotated[
        str | None,
        Field(
            description="Textlich formulierte Bedingung für die Wirksamkeit oder Unwirksamkeit einer Festsetzung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    datumAbsolut: Annotated[
        date_aliased | None,
        Field(
            description="Datum an dem eine Festsetzung wirksam oder unwirksam wird.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    datumRelativ: Annotated[
        timedelta | None,
        Field(
            description="Zeitspanne, nach der eine Festsetzung wirksam oder unwirksam wird, wenn die im Attribut bedingung spezifizierte Bedingung erfüllt ist.",
            json_schema_extra={
                "typename": "TM_Duration",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPDachgestaltung(BaseFeature):
    """
    Zusammenfassung von Parametern zur Festlegung der zulässigen Dachformen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    DNmin: Annotated[
        definitions.Angle | None,
        Field(
            description="Minimale Dachneigung bei  einer Bereichsangabe. Das Attribut DNmax muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    DNmax: Annotated[
        definitions.Angle | None,
        Field(
            description="Maximale Dachneigung bei  einer Bereichsangabe. Das Attribut DNmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    DN: Annotated[
        definitions.Angle | None,
        Field(
            description="Maximal zulässige Dachneigung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    DNzwingend: Annotated[
        definitions.Angle | None,
        Field(
            description="Zwingend vorgeschriebene Dachneigung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    dachform: Annotated[
        Literal[
            "1000",
            "2100",
            "2200",
            "3000",
            "3100",
            "3200",
            "3300",
            "3400",
            "3500",
            "3600",
            "3700",
            "3800",
            "3900",
            "4000",
            "4100",
            "5000",
            "9999",
        ]
        | None,
        Field(
            description="Erlaubte Dachform",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Flachdach",
                        "alias": "Flachdach",
                        "token": "FD",
                        "description": "Flachdach",
                    },
                    "2100": {
                        "name": "Pultdach",
                        "alias": "Pultdach",
                        "token": "PD",
                        "description": "Pultdach",
                    },
                    "2200": {
                        "name": "VersetztesPultdach",
                        "alias": "Versetztes Pultdach",
                        "token": "VPD",
                        "description": "Versetztes Pultdach",
                    },
                    "3000": {
                        "name": "GeneigtesDach",
                        "alias": "Geneigtes Dach",
                        "token": "GD",
                        "description": "Kein Flachdach",
                    },
                    "3100": {
                        "name": "Satteldach",
                        "alias": "Satteldach",
                        "token": "SD",
                        "description": "Satteldach",
                    },
                    "3200": {
                        "name": "Walmdach",
                        "alias": "Walmdach",
                        "token": "WD",
                        "description": "Walmdach",
                    },
                    "3300": {
                        "name": "Krueppelwalmdach",
                        "alias": "Krüppelwalmdach",
                        "token": "KWD",
                        "description": "Krüppelwalmdach",
                    },
                    "3400": {
                        "name": "Mansarddach",
                        "alias": "Mansarddach",
                        "token": "MD",
                        "description": "Mansardendach",
                    },
                    "3500": {
                        "name": "Zeltdach",
                        "alias": "Zeltdach",
                        "token": "ZD",
                        "description": "Zeltdach",
                    },
                    "3600": {
                        "name": "Kegeldach",
                        "alias": "Kegeldach",
                        "token": "KeD",
                        "description": "Kegeldach",
                    },
                    "3700": {
                        "name": "Kuppeldach",
                        "alias": "Kuppeldach",
                        "token": "KuD",
                        "description": "Kuppeldach",
                    },
                    "3800": {
                        "name": "Sheddach",
                        "alias": "Sheddach",
                        "token": "ShD",
                        "description": "Sheddach",
                    },
                    "3900": {
                        "name": "Bogendach",
                        "alias": "Bogendach",
                        "token": "BD",
                        "description": "Bogendach",
                    },
                    "4000": {
                        "name": "Turmdach",
                        "alias": "Turmdach",
                        "token": "TuD",
                        "description": "Turmdach",
                    },
                    "4100": {
                        "name": "Tonnendach",
                        "alias": "Tonnendach",
                        "token": "ToD",
                        "description": "Tonnendach",
                    },
                    "5000": {
                        "name": "Mischform",
                        "alias": "Gemischte Dachform",
                        "token": "GDF",
                        "description": "Gemischte Dachform",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstige Dachform",
                        "token": "SDF",
                        "description": "Sonstige Dachform",
                    },
                },
                "typename": "BP_Dachform",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detaillierteDachform: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Dachform.",
            json_schema_extra={
                "typename": "BP_DetailDachform",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    hoehenangabe: Annotated[
        XPHoehenangabe | None,
        Field(
            description="Beschränkung der Gebäudehöhe für die spezifizierte Dachform. Der hier spezifizierte Wert hat Priorität gegenüber einem über das Attribut hoehenangabe von XP_Objekt spezifizierten Wert.",
            json_schema_extra={
                "typename": "XP_Hoehenangabe",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPEmissionskontingentLaerm(BaseFeature):
    """
    Lärmemissionskontingent eines Teilgebietes
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    pegelTyp: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Typ der durch ekwertTag und ekwertNacht festgesetzten Schallleistungspegel",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "LEK",
                        "alias": "Emissionskontingent Lärm",
                        "description": "Emissionskontingent",
                    },
                    "2000": {
                        "name": "IFSP",
                        "alias": "Immissionswirksamer, flächenbezogener Schallleistungspegel",
                        "description": "Immissionswirksamer, flächenbezogener Schallleistungspegel",
                    },
                    "3000": {
                        "name": "FSP",
                        "alias": "Flächenbezogener Schallleistungspegel",
                        "description": "Flächenbezogener Schallleistungspegel",
                    },
                },
                "typename": "BP_SchallleistungspegelTypen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    berechnungsgrundlage: Annotated[
        Literal["1000", "2000", "3000", "4000"],
        Field(
            description="Technische Grundlage für die Berechnung der Schallleistungspegel",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "DIN45691",
                        "alias": "DIN45691",
                        "description": 'Berechnung  nach DIN 45691 "Geräuschkontingentierung"',
                    },
                    "2000": {
                        "name": "DIN18005",
                        "alias": "DIN18005",
                        "description": 'Berechnung nach DIN 18005 "Schallschutz im Städtebau"',
                    },
                    "3000": {
                        "name": "VDI2714",
                        "alias": "VDI2714",
                        "description": 'Berechnung nach VDI 2714 "Schallausbreitung im Freien"',
                    },
                    "4000": {
                        "name": "ISO9613_2",
                        "alias": "ISO9613_2",
                        "description": 'Berechnung nach DIN ISO 9613-2 "Dämpfung des Schalls bei der Ausbreitung im Freien - Teil 2"',
                    },
                },
                "typename": "BP_SchallleistungspegelBerechnungsgrundlage",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    berechnungsgrundlageDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, an dem die zur Berechnung benutzte Vorschrift (Attribut berechnungsgrundlage) herausgegeben oder aktualisiert wurde.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ekwertTag: Annotated[
        definitions.GenericMeasure,
        Field(
            description="Emissionskontingent/Schallleistungspegel Tag in db",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "db",
            },
        ),
    ]
    ekwertNacht: Annotated[
        definitions.GenericMeasure,
        Field(
            description="Emissionskontingent/Schallleistungspegel Nacht in db.",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "1",
                "uom": "db",
            },
        ),
    ]
    erlaeuterung: Annotated[
        str | None,
        Field(
            description="Nähere Erläuterung der Berechnungsmethode.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPEmissionskontingentLaermGebiet(BPEmissionskontingentLaerm):
    """
    Lärmemissionskontingent eines Teilgebietes, das einem bestimmten Immissionsgebiet außerhalb des Geltungsbereiches des BPlans zugeordnet ist (Anhang A4 von DIN 45691).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gebietsbezeichnung: Annotated[
        str,
        Field(
            description="Bezeichnung des Immissionsgebietes",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class BPKomplexeSondernutzung(BaseFeature):
    """
    Spezifikation einer Sondernutzung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "16000",
            "16001",
            "16002",
            "1650",
            "1700",
            "1800",
            "1900",
            "2000",
            "2100",
            "2200",
            "2300",
            "23000",
            "2400",
            "2500",
            "2600",
            "2700",
            "2720",
            "2800",
            "2900",
            "9999",
        ],
        Field(
            description="Allgemeine Festlegung der Sondernutzung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Wochenendhausgebiet",
                        "alias": "Wochenendhausgebiet",
                        "token": "WHG",
                        "description": "Wochenendhausgebiet",
                    },
                    "1100": {
                        "name": "Ferienhausgebiet",
                        "alias": "Ferienhausgebiet",
                        "token": "FHG",
                        "description": "Ferienhausgebiet",
                    },
                    "1200": {
                        "name": "Campingplatzgebiet",
                        "alias": "Campingplatzgebiet",
                        "token": "CPG",
                        "description": "Campingplatzgebiet",
                    },
                    "1300": {
                        "name": "Kurgebiet",
                        "alias": "Kurgebiet",
                        "token": "Kur",
                        "description": "Kurgebiet",
                    },
                    "1400": {
                        "name": "SonstSondergebietErholung",
                        "alias": "Sonstiges Sondergebiet Erholung",
                        "token": "SSE",
                        "description": "Sonstiges Sondergebiet für Erholung",
                    },
                    "1500": {
                        "name": "Einzelhandelsgebiet",
                        "alias": "Einzelhandelsgebiet",
                        "token": "EHG",
                        "description": "Einzelhandelsgebiet",
                    },
                    "1600": {
                        "name": "GrossflaechigerEinzelhandel",
                        "alias": "Großflächiger Einzelhandel",
                        "token": "GEH",
                        "description": "Gebiet für großflächigen Einzelhandel",
                    },
                    "16000": {
                        "name": "Ladengebiet",
                        "alias": "Ladengebiet",
                        "token": "LG",
                        "description": "Ladengebiet",
                    },
                    "16001": {
                        "name": "Einkaufszentrum",
                        "alias": "Einkaufszentrum",
                        "token": "EKZ",
                        "description": "Einkaufszentrum",
                    },
                    "16002": {
                        "name": "SonstGrossflEinzelhandel",
                        "alias": "Sonstiger großflächiger Einzelhandel",
                        "token": "SGEH",
                        "description": "Sonstiges Gebiet für großflächigen Einzelhandel",
                    },
                    "1650": {
                        "name": "SondergebietGrosshandel",
                        "alias": "Sondergebiet Großhandel",
                        "token": "SGH",
                        "description": "Großhandelsgebiet",
                    },
                    "1700": {
                        "name": "Verkehrsuebungsplatz",
                        "alias": "Verkehrsübungsplatz",
                        "token": "VÜP",
                        "description": "Verkehrsübungsplatz",
                    },
                    "1800": {
                        "name": "Hafengebiet",
                        "alias": "Hafengebiet",
                        "token": "Hafen",
                        "description": "Hafengebiet",
                    },
                    "1900": {
                        "name": "SondergebietErneuerbareEnergie",
                        "alias": "Sondergebiet Erneuerbare Energie",
                        "token": "EE",
                        "description": "Sondergebiet für Erneuerbare Energien",
                    },
                    "2000": {
                        "name": "SondergebietMilitaer",
                        "alias": "Sondergebiet Militär",
                        "token": "Militär",
                        "description": "Militärisches Sondergebiet",
                    },
                    "2100": {
                        "name": "SondergebietLandwirtschaft",
                        "alias": "Sondergebiet Landwirtschaft",
                        "token": "LW",
                        "description": "Sondergebiet Landwirtschaft",
                    },
                    "2200": {
                        "name": "SondergebietSport",
                        "alias": "Sondergebiet Sport",
                        "token": "Sport",
                        "description": "Sondergebiet Sport",
                    },
                    "2300": {
                        "name": "SondergebietGesundheitSoziales",
                        "alias": "Sondergebiet Gesundheit und Soziales",
                        "token": "GS",
                        "description": "Sondergebiet für Gesundheit und Soziales",
                    },
                    "23000": {
                        "name": "Klinikgebiet",
                        "alias": "Klinikgebiet",
                        "token": "Klinik",
                        "description": "Klinikgebiet",
                    },
                    "2400": {
                        "name": "Golfplatz",
                        "alias": "Golfplatz",
                        "token": "Golf",
                        "description": "Golfplatz",
                    },
                    "2500": {
                        "name": "SondergebietKultur",
                        "alias": "Sondergebiet Kultur",
                        "token": "Kultur",
                        "description": "Sondergebiet für Kultur",
                    },
                    "2600": {
                        "name": "SondergebietTourismus",
                        "alias": "Sondergebiet Tourismus",
                        "token": "Tour",
                        "description": "Sondergebiet Tourismus",
                    },
                    "2700": {
                        "name": "SondergebietBueroUndVerwaltung",
                        "alias": "Sondergebiet Büro und Verwaltung",
                        "token": "BV",
                        "description": "Sondergebiet für Büros und Verwaltung",
                    },
                    "2720": {
                        "name": "SondergebietJustiz",
                        "alias": "Sondergebiet Justiz",
                        "token": "Justiz",
                        "description": "Sondergebiet für Einrichtungen der Justiz",
                    },
                    "2800": {
                        "name": "SondergebietHochschuleForschung",
                        "alias": "Sondergebiet Hochschule und Forschung",
                        "token": "HSF",
                        "description": "Sondergebiet Hochschule",
                    },
                    "2900": {
                        "name": "SondergebietMesse",
                        "alias": "Sondergebiet Messe",
                        "token": "Messe",
                        "description": "Sondergebiet für Messe",
                    },
                    "9999": {
                        "name": "SondergebietAndereNutzungen",
                        "alias": "Sondergebiet andere Nutzungen",
                        "token": "AN",
                        "description": "Sonstiges Sondergebiet",
                    },
                },
                "typename": "XP_Sondernutzungen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Sondernutzung, die die allgemeine Sondernutzung näher detailliert.",
            json_schema_extra={
                "typename": "BP_DetailSondernutzung",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    nutzungText: Annotated[
        str | None,
        Field(
            description="Textliche Spezifikation der Sondernutzung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestGemeinbedarf(BaseFeature):
    """
    Spezifikation der Zweckbestimmung der Fläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "1200",
            "12000",
            "12001",
            "12002",
            "12003",
            "1400",
            "14000",
            "14001",
            "14002",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16005",
            "1800",
            "18000",
            "2000",
            "20000",
            "20001",
            "2200",
            "22000",
            "22001",
            "2400",
            "24000",
            "24001",
            "24002",
            "2600",
            "26000",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OeffentlicheVerwaltung",
                        "alias": "Öffentliche Verwaltung",
                        "description": "Einrichtungen und Anlagen für öffentliche Verwaltung",
                    },
                    "10000": {
                        "name": "KommunaleEinrichtung",
                        "alias": "Kommunale Einrichtung",
                        "description": "Kommunale Einrichtung wie z. B. Rathaus, Gesundheitsamt, Gesundheitsfürsorgestelle, Gartenbauamt, Gartenarbeitsstützpunkt, Fuhrpark.",
                    },
                    "10001": {
                        "name": "BetriebOeffentlZweckbestimmung",
                        "alias": "Betrieb öffentlicher Zweckbestimmung",
                        "description": "Betrieb mit öffentlicher Zweckbestimmung wie z.B. ein Stadtreinigungsbetrieb, Autobusbetriebshof, Omnibusbahnhof.",
                    },
                    "10002": {
                        "name": "AnlageBundLand",
                        "alias": "Anlage Bund oder Land",
                        "description": "Eine Anlage des Bundes oder eines Bundeslandes wie z. B.  Arbeitsamt, Autobahnmeisterei, Brückenmeisterei, Patentamt, Wasserbauhof, Finanzamt.",
                    },
                    "1200": {
                        "name": "BildungForschung",
                        "alias": "Bildung und Forschung",
                        "description": "Einrichtungen und Anlagen für Bildung und Forschung",
                    },
                    "12000": {
                        "name": "Schule",
                        "alias": "Schule",
                        "description": "Schulische Einrichtung. Darunter fallen u. a. Allgemeinbildende Schule, Oberstufenzentrum, Sonderschule, Fachschule, Volkshochschule,\r\nKonservatorium.",
                    },
                    "12001": {
                        "name": "Hochschule",
                        "alias": "Hochschule",
                        "description": "Hochschule, Fachhochschule, Berufsakademie, o. Ä.",
                    },
                    "12002": {
                        "name": "BerufsbildendeSchule",
                        "alias": "Berufsbildende Schule",
                        "description": "Berufsbildende Schule",
                    },
                    "12003": {
                        "name": "Forschungseinrichtung",
                        "alias": "Forschungseinrichtung",
                        "description": "Forschungseinrichtung, Forschungsinstitut.",
                    },
                    "1400": {
                        "name": "Kirche",
                        "alias": "Kirche",
                        "description": "Religiöse Einrichtung",
                    },
                    "14000": {
                        "name": "Sakralgebaeude",
                        "alias": "Sakralgebäude",
                        "description": "Religiösen Zwecken dienendes Gebäude wie z. B. Kirche, \r\nKapelle, Moschee, Synagoge, Gebetssaal.",
                    },
                    "14001": {
                        "name": "KirchlicheVerwaltung",
                        "alias": "Kirchliche Verwaltung",
                        "description": "Religiöses Verwaltungsgebäude, z. B. Pfarramt, Bischöfliches Ordinariat, Konsistorium.",
                    },
                    "14002": {
                        "name": "Kirchengemeinde",
                        "alias": "Kirchengemeinde",
                        "description": "Religiöse Gemeinde- oder Versammlungseinrichtung, z. B. Gemeindehaus, Gemeindezentrum.",
                    },
                    "1600": {
                        "name": "Sozial",
                        "alias": "Sozial",
                        "description": "Einrichtungen und Anlagen für soziale Zwecke.",
                    },
                    "16000": {
                        "name": "EinrichtungKinder",
                        "alias": "Einrichtung Kinder",
                        "description": "Soziale Einrichtung für Kinder, wie z. B. Kinderheim, Kindertagesstätte, Kindergarten.",
                    },
                    "16001": {
                        "name": "EinrichtungJugendliche",
                        "alias": "Einrichtung Jugendliche",
                        "description": "Soziale Einrichtung für Jugendliche, wie z. B. Jugendfreizeitheim/-stätte, Jugendgästehaus, Jugendherberge, Jugendheim.",
                    },
                    "16002": {
                        "name": "EinrichtungFamilienErwachsene",
                        "alias": "Einrichtung Familien und Erwachsene",
                        "description": "Soziale Einrichtung für Familien und Erwachsene, wie z. B. Bildungszentrum, Volkshochschule, Kleinkinderfürsorgestelle, Säuglingsfürsorgestelle, Nachbarschaftsheim.",
                    },
                    "16003": {
                        "name": "EinrichtungSenioren",
                        "alias": "Einrichtung Senioren",
                        "description": "Soziale Einrichtung für Senioren, wie z. B. Alten-/Seniorentagesstätte, Alten-/Seniorenheim, Alten-/Seniorenwohnheim, Altersheim.",
                    },
                    "16005": {
                        "name": "EinrichtungBehinderte",
                        "alias": "Einrichtung Behinderte",
                        "description": "Soziale Einrichtung für Menschen mit Beeinträchtigung, wie z. B. Behindertentagesstätte, Behindertenwohnheim, Behindertenwerkstatt",
                    },
                    "1800": {
                        "name": "Gesundheit",
                        "alias": "Gesundheit",
                        "description": "Einrichtungen und Anlagen für gesundheitliche Zwecke.",
                    },
                    "18000": {
                        "name": "Krankenhaus",
                        "alias": "Krankenhaus",
                        "description": "Krankenhaus oder vergleichbare Einrichtung (z. B. Klinik, Hospital, Krankenheim, Heil- und Pflegeanstalt),",
                    },
                    "2000": {
                        "name": "Kultur",
                        "alias": "Kultur",
                        "description": "Einrichtungen und Anlagen für kulturelle Zwecke.",
                    },
                    "20000": {
                        "name": "MusikTheater",
                        "alias": "Musik und Theater",
                        "description": "Kulturelle Einrichtung aus dem Bereich Musik oder Theater (z. B. Theater, Konzerthaus, Musikhalle, Oper).",
                    },
                    "20001": {
                        "name": "Bildung",
                        "alias": "Bildung",
                        "description": "Kulturelle Einrichtung mit Bildungsfunktion ( z. B. Museum, Bibliothek, Bücherei, Stadtbücherei, Volksbücherei).",
                    },
                    "2200": {
                        "name": "Sport",
                        "alias": "Sport",
                        "description": "Einrichtungen und Anlagen für sportliche Zwecke.",
                    },
                    "22000": {
                        "name": "Bad",
                        "alias": "Bad",
                        "description": "Schwimmbad, Freibad, Hallenbad, Schwimmhalle o. Ä..",
                    },
                    "22001": {
                        "name": "SportplatzSporthalle",
                        "alias": "Sportplatz oder Sporthalle",
                        "description": "Sportplatz, Sporthalle, Tennishalle o. Ä.",
                    },
                    "2400": {
                        "name": "SicherheitOrdnung",
                        "alias": "Sicherheit und Ordnung",
                        "description": "Einrichtungen und Anlagen für Sicherheit und Ordnung.",
                    },
                    "24000": {
                        "name": "Feuerwehr",
                        "alias": "Feuerwehr",
                        "description": "Einrichtung oder Anlage der Feuerwehr.",
                    },
                    "24001": {
                        "name": "Schutzbauwerk",
                        "alias": "Schutzbauwerk",
                        "description": "Schutzbauwerk",
                    },
                    "24002": {
                        "name": "Justiz",
                        "alias": "Justiz",
                        "description": "Einrichtung der Justiz, wie z. B. Justizvollzug, Gericht, Haftanstalt.",
                    },
                    "2600": {
                        "name": "Infrastruktur",
                        "alias": "Infrastruktur",
                        "description": "Einrichtungen und Anlagen der Infrastruktur.",
                    },
                    "26000": {
                        "name": "Post",
                        "alias": "Post",
                        "description": "Einrichtung der Post.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Einrichtungen und Anlagen, die keiner anderen Kategorie zuzuordnen sind.",
                    },
                },
                "typename": "XP_ZweckbestimmungGemeinbedarf",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestGemeinbedarf",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestGemeinschaftsanlagen(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Gemeinschaftsanlage
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "3100",
            "3200",
            "3300",
            "3400",
            "3500",
            "3600",
            "3700",
            "3800",
            "3900",
            "4000",
            "4100",
            "4200",
            "4300",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Gemeinschaftsstellplaetze",
                        "alias": "Gemeinschaftsstellplätze",
                        "description": "Gemeinschaftliche Stellplätze",
                    },
                    "2000": {
                        "name": "Gemeinschaftsgaragen",
                        "alias": "Gemeinschaftsgaragen",
                        "description": "Gemeinschaftsgaragen",
                    },
                    "3000": {
                        "name": "Spielplatz",
                        "alias": "Spielplatz",
                        "description": "Spielplatz",
                    },
                    "3100": {
                        "name": "Carport",
                        "alias": "Carport",
                        "description": "Carport",
                    },
                    "3200": {
                        "name": "GemeinschaftsTiefgarage",
                        "alias": "Gemeinschafts-Tiefgarage",
                        "description": "Gemeinschafts-Tiefgarage",
                    },
                    "3300": {
                        "name": "Nebengebaeude",
                        "alias": "Nebengebäude",
                        "description": "Nebengebäude",
                    },
                    "3400": {
                        "name": "AbfallSammelanlagen",
                        "alias": "Abfallsammelanlagen",
                        "description": "Abfall-Sammelanlagen",
                    },
                    "3500": {
                        "name": "EnergieVerteilungsanlagen",
                        "alias": "Energieverteilungsanlagen",
                        "description": "Energie-Verteilungsanlagen",
                    },
                    "3600": {
                        "name": "AbfallWertstoffbehaelter",
                        "alias": "Abfallwertstoffbehälter",
                        "description": "Abfall-Wertstoffbehälter",
                    },
                    "3700": {
                        "name": "Freizeiteinrichtungen",
                        "alias": "Freizeiteinrichtungen",
                        "description": "Freizeiteinrichtungen",
                    },
                    "3800": {
                        "name": "Laermschutzanlagen",
                        "alias": "Lärmschutzanlagen",
                        "description": "Lärmschutz-Anlagen",
                    },
                    "3900": {
                        "name": "AbwasserRegenwasser",
                        "alias": "Abwasser und Regenwasser",
                        "description": "Anlagen für Abwasser oder Regenwasser",
                    },
                    "4000": {
                        "name": "Ausgleichsmassnahmen",
                        "alias": "Ausgleichsmaßnahmen",
                        "description": "Fläche für Ausgleichsmaßnahmen",
                    },
                    "4100": {
                        "name": "Fahrradstellplaetze",
                        "alias": "Fahrradstellplätze",
                        "description": "Fahrrad Stellplätze",
                    },
                    "4200": {
                        "name": "Gemeinschaftsdachgaerten",
                        "alias": "Gemeinschaftsdachgärten",
                        "description": "Gemeinschaftlich genutzter Dachgarten",
                    },
                    "4300": {
                        "name": "GemeinschaftlichNutzbareDachflaechen",
                        "alias": "Gemeinschaftlich nutzbare Dachflächen",
                        "description": "Gemeinschaftlich nutzbare Dachflächen.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zweckbestimmung",
                    },
                },
                "typename": "BP_ZweckbestimmungGemeinschaftsanlagen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codelist definierte detailliertere Festlegung der Zweckbestimmung.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestGemeinschaftsanlagen",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestGruen(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Grünfläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "10003",
            "1200",
            "12000",
            "1400",
            "14000",
            "14001",
            "14002",
            "14003",
            "14004",
            "14005",
            "14006",
            "1600",
            "16000",
            "16001",
            "1800",
            "18000",
            "2000",
            "2200",
            "22000",
            "22001",
            "2400",
            "24000",
            "24001",
            "24003",
            "24004",
            "24005",
            "24006",
            "2600",
            "2700",
            "9999",
            "99990",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Parkanlage",
                        "alias": "Parkanlage",
                        "description": "Parkanlage; auch: Erholungsgrün, Grünanlage, Naherholung.",
                    },
                    "10000": {
                        "name": "ParkanlageHistorisch",
                        "alias": "Historische Parkanlage",
                        "description": "Historische Parkanlage",
                    },
                    "10001": {
                        "name": "ParkanlageNaturnah",
                        "alias": "Naturnahe Parkanlage",
                        "description": "Naturnahe Parkanlage",
                    },
                    "10002": {
                        "name": "ParkanlageWaldcharakter",
                        "alias": "Parkanlage mit Waldcharakter",
                        "description": "Parkanlage mit Waldcharakter",
                    },
                    "10003": {
                        "name": "NaturnaheUferParkanlage",
                        "alias": "Naturnahe Ufer-Parkanlage",
                        "description": "Ufernahe Parkanlage",
                    },
                    "1200": {
                        "name": "Dauerkleingarten",
                        "alias": "Dauerkleingarten",
                        "description": "Dauerkleingarten; auch: Gartenfläche, Hofgärten, Gartenland.",
                    },
                    "12000": {
                        "name": "ErholungsGaerten",
                        "alias": "Erholungsgärten",
                        "description": "Erholungsgarten",
                    },
                    "1400": {
                        "name": "Sportplatz",
                        "alias": "Sportplatz",
                        "description": "Sportplatz",
                    },
                    "14000": {
                        "name": "Reitsportanlage",
                        "alias": "Reitsportanlage",
                        "description": "Reitsportanlage",
                    },
                    "14001": {
                        "name": "Hundesportanlage",
                        "alias": "Hundesportanlage",
                        "description": "Hundesportanlage",
                    },
                    "14002": {
                        "name": "Wassersportanlage",
                        "alias": "Wassersportanlage",
                        "description": "Wassersportanlage",
                    },
                    "14003": {
                        "name": "Schiessstand",
                        "alias": "Schießstand",
                        "description": "Schießstand",
                    },
                    "14004": {
                        "name": "Golfplatz",
                        "alias": "Golfplatz",
                        "description": "Golfplatz",
                    },
                    "14005": {
                        "name": "Skisport",
                        "alias": "Skisport",
                        "description": "Anlage für Skisport",
                    },
                    "14006": {
                        "name": "Tennisanlage",
                        "alias": "Tennisanlage",
                        "description": "Tennisanlage",
                    },
                    "1600": {
                        "name": "Spielplatz",
                        "alias": "Spielplatz",
                        "description": "Spielplatz",
                    },
                    "16000": {
                        "name": "Bolzplatz",
                        "alias": "Bolzplatz",
                        "description": "Bolzplatz",
                    },
                    "16001": {
                        "name": "Abenteuerspielplatz",
                        "alias": "Abenteuerspielplatz",
                        "description": "Abenteuerspielplatz",
                    },
                    "1800": {
                        "name": "Zeltplatz",
                        "alias": "Zeltplatz",
                        "description": "Zeltplatz",
                    },
                    "18000": {
                        "name": "Campingplatz",
                        "alias": "Campingplatz",
                        "description": "Campingplatz",
                    },
                    "2000": {
                        "name": "Badeplatz",
                        "alias": "Badeplatz",
                        "description": "Badeplatz, auch Schwimmbad, Liegewiese.",
                    },
                    "2200": {
                        "name": "FreizeitErholung",
                        "alias": "Freizeit und Erholung",
                        "description": "Anlage für Freizeit und Erholung.",
                    },
                    "22000": {
                        "name": "Kleintierhaltung",
                        "alias": "Kleintierhaltung",
                        "description": "Anlage für Kleintierhaltung",
                    },
                    "22001": {
                        "name": "Festplatz",
                        "alias": "Festplatz",
                        "description": "Festplatz",
                    },
                    "2400": {
                        "name": "SpezGruenflaeche",
                        "alias": "Spezielle Grünfläche",
                        "description": "Spezielle Grünfläche",
                    },
                    "24000": {
                        "name": "StrassenbegleitGruen",
                        "alias": "Straßenbegleitgrün",
                        "description": "Straßenbegleitgrün",
                    },
                    "24001": {
                        "name": "BoeschungsFlaeche",
                        "alias": "Böschungsfläche",
                        "description": "Böschungsfläche",
                    },
                    "24003": {
                        "name": "Uferschutzstreifen",
                        "alias": "Uferschutzstreifen",
                        "description": "Uferstreifen",
                    },
                    "24004": {
                        "name": "Abschirmgruen",
                        "alias": "Abschirmgrün",
                        "description": "Abschirmgrün",
                    },
                    "24005": {
                        "name": "UmweltbildungsparkSchaugatter",
                        "alias": "Umweltbildungspark, Schaugatter",
                        "description": "Umweltbildungspark, Schaugatter",
                    },
                    "24006": {
                        "name": "RuhenderVerkehr",
                        "alias": "Ruhender Verkehr",
                        "description": "Fläche für den ruhenden Verkehr.",
                    },
                    "2600": {
                        "name": "Friedhof",
                        "alias": "Friedhof",
                        "description": "Friedhof",
                    },
                    "2700": {
                        "name": "Naturerfahrungsraum",
                        "alias": "Naturerfahrungsraum",
                        "description": "Naturerfahrungsräume sollen insbesondere Kindern und Jugendlichen die Möglichkeit geben, in ihrem direkten Umfeld Natur vorzufinden, um eigenständig Erfahrung mit Pflanzen und Tieren sammeln zu können.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zweckbestimmung, falls keine der aufgeführten Klassifikationen anwendbar ist.",
                    },
                    "99990": {
                        "name": "Gaertnerei",
                        "alias": "Gärtnerei",
                        "description": "Gärtnerei",
                    },
                },
                "typename": "XP_ZweckbestimmungGruen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestGruenFlaeche",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestLandwirtschaft(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Fläche für die Landwirtschaft.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "9999"],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "LandwirtschaftAllgemein",
                        "alias": "Landwirtschaft allgemein",
                        "description": "Allgemeine Landwirtschaft",
                    },
                    "1100": {
                        "name": "Ackerbau",
                        "alias": "Ackerbau",
                        "description": "Ackerbau",
                    },
                    "1200": {
                        "name": "WiesenWeidewirtschaft",
                        "alias": "Wiesen, Weidewirtschaft",
                        "description": "Wiesen- und Weidewirtschaft",
                    },
                    "1300": {
                        "name": "GartenbaulicheErzeugung",
                        "alias": "Gartenbauliche Erzeugung",
                        "description": "Gartenbauliche Erzeugung",
                    },
                    "1400": {
                        "name": "Obstbau",
                        "alias": "Obstbau",
                        "description": "Obstbau",
                    },
                    "1500": {
                        "name": "Weinbau",
                        "alias": "Weinbau",
                        "description": "Weinbau",
                    },
                    "1600": {
                        "name": "Imkerei",
                        "alias": "Imkerei",
                        "description": "Imkerei",
                    },
                    "1700": {
                        "name": "Binnenfischerei",
                        "alias": "Binnenfischerei",
                        "description": "Binnenfischerei",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "XP_ZweckbestimmungLandwirtschaft",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestLandwirtschaft",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestNebenanlagen(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Nebenanlage.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "3100",
            "3200",
            "3300",
            "3400",
            "3500",
            "3600",
            "3700",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Stellplaetze",
                        "alias": "Stellplätze",
                        "description": "Stellplätze",
                    },
                    "2000": {
                        "name": "Garagen",
                        "alias": "Garagen",
                        "description": "Garagen",
                    },
                    "3000": {
                        "name": "Spielplatz",
                        "alias": "Spielplatz",
                        "description": "Spielplatz",
                    },
                    "3100": {
                        "name": "Carport",
                        "alias": "Carport",
                        "description": "Carport",
                    },
                    "3200": {
                        "name": "Tiefgarage",
                        "alias": "Tiefgarage",
                        "description": "Tiefgarage",
                    },
                    "3300": {
                        "name": "Nebengebaeude",
                        "alias": "Nebengebäude",
                        "description": "Nebengebäude",
                    },
                    "3400": {
                        "name": "AbfallSammelanlagen",
                        "alias": "Abfallsammelanlagen",
                        "description": "Sammelanlagen für Abfall.",
                    },
                    "3500": {
                        "name": "EnergieVerteilungsanlagen",
                        "alias": "Energieverteilungsanlagen",
                        "description": "Energie-Verteilungsanlagen",
                    },
                    "3600": {
                        "name": "AbfallWertstoffbehaelter",
                        "alias": "Abfallwertstoffbehälter",
                        "description": "Abfall-Wertstoffbehälter",
                    },
                    "3700": {
                        "name": "Fahrradstellplaetze",
                        "alias": "Fahrradstellplätze",
                        "description": "Fahrrad Stellplätze",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zweckbestimmung",
                    },
                },
                "typename": "BP_ZweckbestimmungNebenanlagen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Festlegung der Zweckbestimmung.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestNebenanlagen",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestSpielSportanlage(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Spiel- und Sportanlage.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal["1000", "2000", "3000", "9999"],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Sportanlage",
                        "alias": "Sportanlage",
                        "description": "Sportanlage",
                    },
                    "2000": {
                        "name": "Spielanlage",
                        "alias": "Spielanlage",
                        "description": "Spielanlage",
                    },
                    "3000": {
                        "name": "SpielSportanlage",
                        "alias": "Spiel- und Sportanlage",
                        "description": "Spiel- und/oder Sportanlage.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "XP_ZweckbestimmungSpielSportanlage",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestSpielSportanlage",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestVerEntsorgung(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Fläche für Ver- oder Entsorgung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "10003",
            "10004",
            "10005",
            "10006",
            "10007",
            "10008",
            "10009",
            "100010",
            "100011",
            "100012",
            "100013",
            "1200",
            "12000",
            "12001",
            "12002",
            "12003",
            "12004",
            "12005",
            "1300",
            "13000",
            "13001",
            "13002",
            "13003",
            "1400",
            "14000",
            "14001",
            "14002",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16004",
            "16005",
            "1800",
            "18000",
            "18001",
            "18002",
            "18003",
            "18004",
            "18006",
            "2000",
            "20000",
            "20001",
            "2200",
            "22000",
            "22001",
            "22002",
            "22003",
            "2400",
            "24000",
            "24001",
            "24002",
            "24003",
            "24004",
            "24005",
            "2600",
            "26000",
            "26001",
            "26002",
            "2800",
            "3000",
            "9999",
            "99990",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Elektrizitaet",
                        "alias": "Elektrizität",
                        "description": "Elektrizität allgemein",
                    },
                    "10000": {
                        "name": "Hochspannungsleitung",
                        "alias": "Hochspannungsleitung",
                        "description": "Hochspannungsleitung",
                    },
                    "10001": {
                        "name": "TrafostationUmspannwerk",
                        "alias": "Trafostation, Umspannwerk",
                        "description": "Trafostation, auch Umspannwerk",
                    },
                    "10002": {
                        "name": "Solarkraftwerk",
                        "alias": "Solarkraftwerk",
                        "description": "Solarkraftwerk",
                    },
                    "10003": {
                        "name": "Windkraftwerk",
                        "alias": "Windkraftwerk",
                        "description": "Windkraftwerk, Windenergieanlage, Windrad.",
                    },
                    "10004": {
                        "name": "Geothermiekraftwerk",
                        "alias": "Geothermiekraftwerk",
                        "description": "Geothermie Kraftwerk",
                    },
                    "10005": {
                        "name": "Elektrizitaetswerk",
                        "alias": "Elektrizitätswerk",
                        "description": "Elektrizitätswerk allgemein",
                    },
                    "10006": {
                        "name": "Wasserkraftwerk",
                        "alias": "Wasserkraftwerk",
                        "description": "Wasserkraftwerk",
                    },
                    "10007": {
                        "name": "BiomasseKraftwerk",
                        "alias": "Biomassekraftwerk",
                        "description": "Biomasse-Kraftwerk",
                    },
                    "10008": {
                        "name": "Kabelleitung",
                        "alias": "Kabelleitung",
                        "description": "Kabelleitung",
                    },
                    "10009": {
                        "name": "Niederspannungsleitung",
                        "alias": "Niederspannungsleitung",
                        "description": "Niederspannungsleitung",
                    },
                    "100010": {
                        "name": "Leitungsmast",
                        "alias": "Leitungsmast",
                        "description": "Leitungsmast",
                    },
                    "100011": {
                        "name": "Kernkraftwerk",
                        "alias": "Kernkraftwerk",
                        "description": "Kernkraftwerk",
                    },
                    "100012": {
                        "name": "Kohlekraftwerk",
                        "alias": "Kohlekraftwerk",
                        "description": "Kohlekraftwerk",
                    },
                    "100013": {
                        "name": "Gaskraftwerk",
                        "alias": "Gaskraftwerk",
                        "description": "Gaskraftwerk",
                    },
                    "1200": {
                        "name": "Gas",
                        "alias": "Gas",
                        "description": "Gas allgemein",
                    },
                    "12000": {
                        "name": "Ferngasleitung",
                        "alias": "Ferngasleitung",
                        "description": "Ferngasleitung",
                    },
                    "12001": {
                        "name": "Gaswerk",
                        "alias": "Gaswerk",
                        "description": "Gaswerk",
                    },
                    "12002": {
                        "name": "Gasbehaelter",
                        "alias": "Gasbehälter",
                        "description": "Gasbehälter",
                    },
                    "12003": {
                        "name": "Gasdruckregler",
                        "alias": "Gasdruckregler",
                        "description": "Gasdruckregler",
                    },
                    "12004": {
                        "name": "Gasstation",
                        "alias": "Gasstation",
                        "description": "Gasstation",
                    },
                    "12005": {
                        "name": "Gasleitung",
                        "alias": "Gasleitung",
                        "description": "Gasleitung",
                    },
                    "1300": {
                        "name": "Erdoel",
                        "alias": "Erdöl",
                        "description": "Erdöl allgemein",
                    },
                    "13000": {
                        "name": "Erdoelleitung",
                        "alias": "Erdölleitung",
                        "description": "Erdölleitung",
                    },
                    "13001": {
                        "name": "Bohrstelle",
                        "alias": "Bohrstelle",
                        "description": "Bohrstelle",
                    },
                    "13002": {
                        "name": "Erdoelpumpstation",
                        "alias": "Erdölpumpstation",
                        "description": "Erdölpumpstation",
                    },
                    "13003": {
                        "name": "Oeltank",
                        "alias": "Öltank",
                        "description": "Öltank",
                    },
                    "1400": {
                        "name": "Waermeversorgung",
                        "alias": "Wärmeversorgung",
                        "description": "Wärmeversorgung allgemein",
                    },
                    "14000": {
                        "name": "Blockheizkraftwerk",
                        "alias": "Blockheizkraftwerk",
                        "description": "Blockheizkraftwerk",
                    },
                    "14001": {
                        "name": "Fernwaermeleitung",
                        "alias": "Fernwärmeleitung",
                        "description": "Fernwärmeleitung",
                    },
                    "14002": {
                        "name": "Fernheizwerk",
                        "alias": "Fernheizwerk",
                        "description": "Fernheizwerk",
                    },
                    "1600": {
                        "name": "Wasser",
                        "alias": "Wasser",
                        "description": "Trink- und Brauchwasser allgemein",
                    },
                    "16000": {
                        "name": "Wasserwerk",
                        "alias": "Wasserwerk",
                        "description": "Wasserwerk",
                    },
                    "16001": {
                        "name": "Wasserleitung",
                        "alias": "Wasserleitung",
                        "description": "Trinkwasserleitung",
                    },
                    "16002": {
                        "name": "Wasserspeicher",
                        "alias": "Wasserspeicher",
                        "description": "Wasserspeicher",
                    },
                    "16003": {
                        "name": "Brunnen",
                        "alias": "Brunnen",
                        "description": "Brunnen",
                    },
                    "16004": {
                        "name": "Pumpwerk",
                        "alias": "Pumpwerk",
                        "description": "Pumpwerk",
                    },
                    "16005": {
                        "name": "Quelle",
                        "alias": "Quelle",
                        "description": "Quelle",
                    },
                    "1800": {
                        "name": "Abwasser",
                        "alias": "Abwasser",
                        "description": "Abwasser allgemein",
                    },
                    "18000": {
                        "name": "Abwasserleitung",
                        "alias": "Abwasserleitung",
                        "description": "Abwasserleitung",
                    },
                    "18001": {
                        "name": "Abwasserrueckhaltebecken",
                        "alias": "Abwasserrückhaltebecken",
                        "description": "Abwasserrückhaltebecken",
                    },
                    "18002": {
                        "name": "Abwasserpumpwerk",
                        "alias": "Abwasserpumpwerk",
                        "description": "Abwasserpumpwerk, auch Abwasserhebeanlage",
                    },
                    "18003": {
                        "name": "Klaeranlage",
                        "alias": "Kläranlage",
                        "description": "Kläranlage",
                    },
                    "18004": {
                        "name": "AnlageKlaerschlamm",
                        "alias": "Anlage Klärschlamm",
                        "description": "Anlage zur Speicherung oder Behandlung von Klärschlamm.",
                    },
                    "18006": {
                        "name": "SalzOderSoleleitungen",
                        "alias": "Salz- oder Soleleitungen",
                        "description": "Salz- oder Sole-Leitungen",
                    },
                    "2000": {
                        "name": "Regenwasser",
                        "alias": "Regenwasser",
                        "description": "Regenwasser allgemein",
                    },
                    "20000": {
                        "name": "RegenwasserRueckhaltebecken",
                        "alias": "Regenwasserrückhaltebecken",
                        "description": "Regenwasser Rückhaltebecken",
                    },
                    "20001": {
                        "name": "Niederschlagswasserleitung",
                        "alias": "Niederschlagswasserleitung",
                        "description": "Niederschlagswasser-Leitung",
                    },
                    "2200": {
                        "name": "Abfallentsorgung",
                        "alias": "Abfallentsorgung",
                        "description": "Abfallentsorgung allgemein",
                    },
                    "22000": {
                        "name": "Muellumladestation",
                        "alias": "Müllumladestation",
                        "description": "Müll-Umladestation",
                    },
                    "22001": {
                        "name": "Muellbeseitigungsanlage",
                        "alias": "Müllbeseitigungsanlage",
                        "description": "Müllbeseitigungsanlage",
                    },
                    "22002": {
                        "name": "Muellsortieranlage",
                        "alias": "Müllsortieranlage",
                        "description": "Müllsortieranlage",
                    },
                    "22003": {
                        "name": "Recyclinghof",
                        "alias": "Recyclinghof",
                        "description": "Recyclinghof",
                    },
                    "2400": {
                        "name": "Ablagerung",
                        "alias": "Ablagerung",
                        "description": "Ablagerung allgemein",
                    },
                    "24000": {
                        "name": "Erdaushubdeponie",
                        "alias": "Erdaushubdeponie",
                        "description": "Erdaushub-Deponie",
                    },
                    "24001": {
                        "name": "Bauschuttdeponie",
                        "alias": "Bauschuttdeponie",
                        "description": "Bauschutt-Deponie",
                    },
                    "24002": {
                        "name": "Hausmuelldeponie",
                        "alias": "Hausmülldeponie",
                        "description": "Hausmüll-Deponie",
                    },
                    "24003": {
                        "name": "Sondermuelldeponie",
                        "alias": "Sondermülldeponie",
                        "description": "Sondermüll-Deponie",
                    },
                    "24004": {
                        "name": "StillgelegteDeponie",
                        "alias": "Stillgelegte Deponie",
                        "description": "Stillgelegte Deponie",
                    },
                    "24005": {
                        "name": "RekultivierteDeponie",
                        "alias": "Rekultivierte Deponie",
                        "description": "Rekultivierte Deponie",
                    },
                    "2600": {
                        "name": "Telekommunikation",
                        "alias": "Telekommunikation",
                        "description": "Telekommunikation allgemein",
                    },
                    "26000": {
                        "name": "Fernmeldeanlage",
                        "alias": "Fernmeldeanlage",
                        "description": "Fernmeldeanlage",
                    },
                    "26001": {
                        "name": "Mobilfunkanlage",
                        "alias": "Mobilfunkanlage",
                        "description": "Mobilfunkanlage",
                    },
                    "26002": {
                        "name": "Fernmeldekabel",
                        "alias": "Fernmeldekabel",
                        "description": "Fernmeldekabel",
                    },
                    "2800": {
                        "name": "ErneuerbareEnergien",
                        "alias": "Erneuerbare Energien",
                        "description": "Erneuerbare Energien allgemein",
                    },
                    "3000": {
                        "name": "KraftWaermeKopplung",
                        "alias": "Kraft-Wärme-Kopplung",
                        "description": "Fläche oder Anlage für Kraft-Wärme Kopplung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige, durch keinen anderen Code abbildbare Ver- oder Entsorgungsfläche bzw. -Anlage.",
                    },
                    "99990": {
                        "name": "Produktenleitung",
                        "alias": "Produktenleitung",
                        "description": "Produktenleitung",
                    },
                },
                "typename": "XP_ZweckbestimmungVerEntsorgung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestVerEntsorgung",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKomplexeZweckbestWald(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Waldfläche.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "1200",
            "1400",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16004",
            "1700",
            "1800",
            "1900",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Naturwald",
                        "alias": "Naturwald",
                        "description": "Naturwald",
                    },
                    "10000": {
                        "name": "Waldschutzgebiet",
                        "alias": "Waldschutzgebiet",
                        "description": "Waldschutzgebiet",
                    },
                    "1200": {
                        "name": "Nutzwald",
                        "alias": "Nutzwald",
                        "description": "Nutzwald",
                    },
                    "1400": {
                        "name": "Erholungswald",
                        "alias": "Erholungswald",
                        "description": "Erholungswald",
                    },
                    "1600": {
                        "name": "Schutzwald",
                        "alias": "Schutzwald",
                        "description": "Schutzwald",
                    },
                    "16000": {
                        "name": "Bodenschutzwald",
                        "alias": "Bodenschutzwald",
                        "description": "Bodenschutzwald",
                    },
                    "16001": {
                        "name": "Biotopschutzwald",
                        "alias": "Biotopschutzwald",
                        "description": "Biotopschutzwald",
                    },
                    "16002": {
                        "name": "NaturnaherWald",
                        "alias": "Naturnaher Wald",
                        "description": "Naturnaher Wald",
                    },
                    "16003": {
                        "name": "SchutzwaldSchaedlicheUmwelteinwirkungen",
                        "alias": "Schutzwald schädliche Umwelteinwirkungen",
                        "description": "Wald zum Schutz vor schädlichen Umwelteinwirkungen",
                    },
                    "16004": {
                        "name": "Schonwald",
                        "alias": "Schonwald",
                        "description": "Schonwald",
                    },
                    "1700": {
                        "name": "Bannwald",
                        "alias": "Bannwald",
                        "description": "Bannwald",
                    },
                    "1800": {
                        "name": "FlaecheForstwirtschaft",
                        "alias": "Fläche Forstwirtschaft",
                        "description": "Fläche für die Forstwirtschaft.",
                    },
                    "1900": {
                        "name": "ImmissionsgeschaedigterWald",
                        "alias": "Immissionsgeschädigter Wald",
                        "description": "Immissionsgeschädigter Wald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstigr Wald",
                    },
                },
                "typename": "XP_ZweckbestimmungWald",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "BP_DetailZweckbestWaldFlaeche",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeSondernutzung(BaseFeature):
    """
    Spezifikation einer Sondernutzung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "16000",
            "16001",
            "16002",
            "1650",
            "1700",
            "1800",
            "1900",
            "2000",
            "2100",
            "2200",
            "2300",
            "23000",
            "2400",
            "2500",
            "2600",
            "2700",
            "2720",
            "2800",
            "2900",
            "9999",
        ],
        Field(
            description="Allgemeine Festlegung der Sondernutzung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Wochenendhausgebiet",
                        "alias": "Wochenendhausgebiet",
                        "token": "WHG",
                        "description": "Wochenendhausgebiet",
                    },
                    "1100": {
                        "name": "Ferienhausgebiet",
                        "alias": "Ferienhausgebiet",
                        "token": "FHG",
                        "description": "Ferienhausgebiet",
                    },
                    "1200": {
                        "name": "Campingplatzgebiet",
                        "alias": "Campingplatzgebiet",
                        "token": "CPG",
                        "description": "Campingplatzgebiet",
                    },
                    "1300": {
                        "name": "Kurgebiet",
                        "alias": "Kurgebiet",
                        "token": "Kur",
                        "description": "Kurgebiet",
                    },
                    "1400": {
                        "name": "SonstSondergebietErholung",
                        "alias": "Sonstiges Sondergebiet Erholung",
                        "token": "SSE",
                        "description": "Sonstiges Sondergebiet für Erholung",
                    },
                    "1500": {
                        "name": "Einzelhandelsgebiet",
                        "alias": "Einzelhandelsgebiet",
                        "token": "EHG",
                        "description": "Einzelhandelsgebiet",
                    },
                    "1600": {
                        "name": "GrossflaechigerEinzelhandel",
                        "alias": "Großflächiger Einzelhandel",
                        "token": "GEH",
                        "description": "Gebiet für großflächigen Einzelhandel",
                    },
                    "16000": {
                        "name": "Ladengebiet",
                        "alias": "Ladengebiet",
                        "token": "LG",
                        "description": "Ladengebiet",
                    },
                    "16001": {
                        "name": "Einkaufszentrum",
                        "alias": "Einkaufszentrum",
                        "token": "EKZ",
                        "description": "Einkaufszentrum",
                    },
                    "16002": {
                        "name": "SonstGrossflEinzelhandel",
                        "alias": "Sonstiger großflächiger Einzelhandel",
                        "token": "SGEH",
                        "description": "Sonstiges Gebiet für großflächigen Einzelhandel",
                    },
                    "1650": {
                        "name": "SondergebietGrosshandel",
                        "alias": "Sondergebiet Großhandel",
                        "token": "SGH",
                        "description": "Großhandelsgebiet",
                    },
                    "1700": {
                        "name": "Verkehrsuebungsplatz",
                        "alias": "Verkehrsübungsplatz",
                        "token": "VÜP",
                        "description": "Verkehrsübungsplatz",
                    },
                    "1800": {
                        "name": "Hafengebiet",
                        "alias": "Hafengebiet",
                        "token": "Hafen",
                        "description": "Hafengebiet",
                    },
                    "1900": {
                        "name": "SondergebietErneuerbareEnergie",
                        "alias": "Sondergebiet Erneuerbare Energie",
                        "token": "EE",
                        "description": "Sondergebiet für Erneuerbare Energien",
                    },
                    "2000": {
                        "name": "SondergebietMilitaer",
                        "alias": "Sondergebiet Militär",
                        "token": "Militär",
                        "description": "Militärisches Sondergebiet",
                    },
                    "2100": {
                        "name": "SondergebietLandwirtschaft",
                        "alias": "Sondergebiet Landwirtschaft",
                        "token": "LW",
                        "description": "Sondergebiet Landwirtschaft",
                    },
                    "2200": {
                        "name": "SondergebietSport",
                        "alias": "Sondergebiet Sport",
                        "token": "Sport",
                        "description": "Sondergebiet Sport",
                    },
                    "2300": {
                        "name": "SondergebietGesundheitSoziales",
                        "alias": "Sondergebiet Gesundheit und Soziales",
                        "token": "GS",
                        "description": "Sondergebiet für Gesundheit und Soziales",
                    },
                    "23000": {
                        "name": "Klinikgebiet",
                        "alias": "Klinikgebiet",
                        "token": "Klinik",
                        "description": "Klinikgebiet",
                    },
                    "2400": {
                        "name": "Golfplatz",
                        "alias": "Golfplatz",
                        "token": "Golf",
                        "description": "Golfplatz",
                    },
                    "2500": {
                        "name": "SondergebietKultur",
                        "alias": "Sondergebiet Kultur",
                        "token": "Kultur",
                        "description": "Sondergebiet für Kultur",
                    },
                    "2600": {
                        "name": "SondergebietTourismus",
                        "alias": "Sondergebiet Tourismus",
                        "token": "Tour",
                        "description": "Sondergebiet Tourismus",
                    },
                    "2700": {
                        "name": "SondergebietBueroUndVerwaltung",
                        "alias": "Sondergebiet Büro und Verwaltung",
                        "token": "BV",
                        "description": "Sondergebiet für Büros und Verwaltung",
                    },
                    "2720": {
                        "name": "SondergebietJustiz",
                        "alias": "Sondergebiet Justiz",
                        "token": "Justiz",
                        "description": "Sondergebiet für Einrichtungen der Justiz",
                    },
                    "2800": {
                        "name": "SondergebietHochschuleForschung",
                        "alias": "Sondergebiet Hochschule und Forschung",
                        "token": "HSF",
                        "description": "Sondergebiet Hochschule",
                    },
                    "2900": {
                        "name": "SondergebietMesse",
                        "alias": "Sondergebiet Messe",
                        "token": "Messe",
                        "description": "Sondergebiet für Messe",
                    },
                    "9999": {
                        "name": "SondergebietAndereNutzungen",
                        "alias": "Sondergebiet andere Nutzungen",
                        "token": "AN",
                        "description": "Sonstiges Sondergebiet",
                    },
                },
                "typename": "XP_Sondernutzungen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Sondernutzung, die die allgemeine Sondernutzung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailSondernutzung",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    nutzungText: Annotated[
        str | None,
        Field(
            description="Textliche Spezifikation der Sondernutzung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestGemeinbedarf(BaseFeature):
    """
    Spezifikation der Zweckbestimmung der Fläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "1200",
            "12000",
            "12001",
            "12002",
            "12003",
            "1400",
            "14000",
            "14001",
            "14002",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16005",
            "1800",
            "18000",
            "2000",
            "20000",
            "20001",
            "2200",
            "22000",
            "22001",
            "2400",
            "24000",
            "24001",
            "24002",
            "2600",
            "26000",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OeffentlicheVerwaltung",
                        "alias": "Öffentliche Verwaltung",
                        "description": "Einrichtungen und Anlagen für öffentliche Verwaltung",
                    },
                    "10000": {
                        "name": "KommunaleEinrichtung",
                        "alias": "Kommunale Einrichtung",
                        "description": "Kommunale Einrichtung wie z. B. Rathaus, Gesundheitsamt, Gesundheitsfürsorgestelle, Gartenbauamt, Gartenarbeitsstützpunkt, Fuhrpark.",
                    },
                    "10001": {
                        "name": "BetriebOeffentlZweckbestimmung",
                        "alias": "Betrieb öffentlicher Zweckbestimmung",
                        "description": "Betrieb mit öffentlicher Zweckbestimmung wie z.B. ein Stadtreinigungsbetrieb, Autobusbetriebshof, Omnibusbahnhof.",
                    },
                    "10002": {
                        "name": "AnlageBundLand",
                        "alias": "Anlage Bund oder Land",
                        "description": "Eine Anlage des Bundes oder eines Bundeslandes wie z. B.  Arbeitsamt, Autobahnmeisterei, Brückenmeisterei, Patentamt, Wasserbauhof, Finanzamt.",
                    },
                    "1200": {
                        "name": "BildungForschung",
                        "alias": "Bildung und Forschung",
                        "description": "Einrichtungen und Anlagen für Bildung und Forschung",
                    },
                    "12000": {
                        "name": "Schule",
                        "alias": "Schule",
                        "description": "Schulische Einrichtung. Darunter fallen u. a. Allgemeinbildende Schule, Oberstufenzentrum, Sonderschule, Fachschule, Volkshochschule,\r\nKonservatorium.",
                    },
                    "12001": {
                        "name": "Hochschule",
                        "alias": "Hochschule",
                        "description": "Hochschule, Fachhochschule, Berufsakademie, o. Ä.",
                    },
                    "12002": {
                        "name": "BerufsbildendeSchule",
                        "alias": "Berufsbildende Schule",
                        "description": "Berufsbildende Schule",
                    },
                    "12003": {
                        "name": "Forschungseinrichtung",
                        "alias": "Forschungseinrichtung",
                        "description": "Forschungseinrichtung, Forschungsinstitut.",
                    },
                    "1400": {
                        "name": "Kirche",
                        "alias": "Kirche",
                        "description": "Religiöse Einrichtung",
                    },
                    "14000": {
                        "name": "Sakralgebaeude",
                        "alias": "Sakralgebäude",
                        "description": "Religiösen Zwecken dienendes Gebäude wie z. B. Kirche, \r\nKapelle, Moschee, Synagoge, Gebetssaal.",
                    },
                    "14001": {
                        "name": "KirchlicheVerwaltung",
                        "alias": "Kirchliche Verwaltung",
                        "description": "Religiöses Verwaltungsgebäude, z. B. Pfarramt, Bischöfliches Ordinariat, Konsistorium.",
                    },
                    "14002": {
                        "name": "Kirchengemeinde",
                        "alias": "Kirchengemeinde",
                        "description": "Religiöse Gemeinde- oder Versammlungseinrichtung, z. B. Gemeindehaus, Gemeindezentrum.",
                    },
                    "1600": {
                        "name": "Sozial",
                        "alias": "Sozial",
                        "description": "Einrichtungen und Anlagen für soziale Zwecke.",
                    },
                    "16000": {
                        "name": "EinrichtungKinder",
                        "alias": "Einrichtung Kinder",
                        "description": "Soziale Einrichtung für Kinder, wie z. B. Kinderheim, Kindertagesstätte, Kindergarten.",
                    },
                    "16001": {
                        "name": "EinrichtungJugendliche",
                        "alias": "Einrichtung Jugendliche",
                        "description": "Soziale Einrichtung für Jugendliche, wie z. B. Jugendfreizeitheim/-stätte, Jugendgästehaus, Jugendherberge, Jugendheim.",
                    },
                    "16002": {
                        "name": "EinrichtungFamilienErwachsene",
                        "alias": "Einrichtung Familien und Erwachsene",
                        "description": "Soziale Einrichtung für Familien und Erwachsene, wie z. B. Bildungszentrum, Volkshochschule, Kleinkinderfürsorgestelle, Säuglingsfürsorgestelle, Nachbarschaftsheim.",
                    },
                    "16003": {
                        "name": "EinrichtungSenioren",
                        "alias": "Einrichtung Senioren",
                        "description": "Soziale Einrichtung für Senioren, wie z. B. Alten-/Seniorentagesstätte, Alten-/Seniorenheim, Alten-/Seniorenwohnheim, Altersheim.",
                    },
                    "16005": {
                        "name": "EinrichtungBehinderte",
                        "alias": "Einrichtung Behinderte",
                        "description": "Soziale Einrichtung für Menschen mit Beeinträchtigung, wie z. B. Behindertentagesstätte, Behindertenwohnheim, Behindertenwerkstatt",
                    },
                    "1800": {
                        "name": "Gesundheit",
                        "alias": "Gesundheit",
                        "description": "Einrichtungen und Anlagen für gesundheitliche Zwecke.",
                    },
                    "18000": {
                        "name": "Krankenhaus",
                        "alias": "Krankenhaus",
                        "description": "Krankenhaus oder vergleichbare Einrichtung (z. B. Klinik, Hospital, Krankenheim, Heil- und Pflegeanstalt),",
                    },
                    "2000": {
                        "name": "Kultur",
                        "alias": "Kultur",
                        "description": "Einrichtungen und Anlagen für kulturelle Zwecke.",
                    },
                    "20000": {
                        "name": "MusikTheater",
                        "alias": "Musik und Theater",
                        "description": "Kulturelle Einrichtung aus dem Bereich Musik oder Theater (z. B. Theater, Konzerthaus, Musikhalle, Oper).",
                    },
                    "20001": {
                        "name": "Bildung",
                        "alias": "Bildung",
                        "description": "Kulturelle Einrichtung mit Bildungsfunktion ( z. B. Museum, Bibliothek, Bücherei, Stadtbücherei, Volksbücherei).",
                    },
                    "2200": {
                        "name": "Sport",
                        "alias": "Sport",
                        "description": "Einrichtungen und Anlagen für sportliche Zwecke.",
                    },
                    "22000": {
                        "name": "Bad",
                        "alias": "Bad",
                        "description": "Schwimmbad, Freibad, Hallenbad, Schwimmhalle o. Ä..",
                    },
                    "22001": {
                        "name": "SportplatzSporthalle",
                        "alias": "Sportplatz oder Sporthalle",
                        "description": "Sportplatz, Sporthalle, Tennishalle o. Ä.",
                    },
                    "2400": {
                        "name": "SicherheitOrdnung",
                        "alias": "Sicherheit und Ordnung",
                        "description": "Einrichtungen und Anlagen für Sicherheit und Ordnung.",
                    },
                    "24000": {
                        "name": "Feuerwehr",
                        "alias": "Feuerwehr",
                        "description": "Einrichtung oder Anlage der Feuerwehr.",
                    },
                    "24001": {
                        "name": "Schutzbauwerk",
                        "alias": "Schutzbauwerk",
                        "description": "Schutzbauwerk",
                    },
                    "24002": {
                        "name": "Justiz",
                        "alias": "Justiz",
                        "description": "Einrichtung der Justiz, wie z. B. Justizvollzug, Gericht, Haftanstalt.",
                    },
                    "2600": {
                        "name": "Infrastruktur",
                        "alias": "Infrastruktur",
                        "description": "Einrichtungen und Anlagen der Infrastruktur.",
                    },
                    "26000": {
                        "name": "Post",
                        "alias": "Post",
                        "description": "Einrichtung der Post.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Einrichtungen und Anlagen, die keiner anderen Kategorie zuzuordnen sind.",
                    },
                },
                "typename": "XP_ZweckbestimmungGemeinbedarf",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestGemeinbedarf",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestGruen(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Grünfläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "10003",
            "1200",
            "12000",
            "1400",
            "14000",
            "14001",
            "14002",
            "14003",
            "14004",
            "14005",
            "14006",
            "1600",
            "16000",
            "16001",
            "1800",
            "18000",
            "2000",
            "2200",
            "22000",
            "22001",
            "2400",
            "24000",
            "24001",
            "24003",
            "24004",
            "24005",
            "24006",
            "2600",
            "2700",
            "9999",
            "99990",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Parkanlage",
                        "alias": "Parkanlage",
                        "description": "Parkanlage; auch: Erholungsgrün, Grünanlage, Naherholung.",
                    },
                    "10000": {
                        "name": "ParkanlageHistorisch",
                        "alias": "Historische Parkanlage",
                        "description": "Historische Parkanlage",
                    },
                    "10001": {
                        "name": "ParkanlageNaturnah",
                        "alias": "Naturnahe Parkanlage",
                        "description": "Naturnahe Parkanlage",
                    },
                    "10002": {
                        "name": "ParkanlageWaldcharakter",
                        "alias": "Parkanlage mit Waldcharakter",
                        "description": "Parkanlage mit Waldcharakter",
                    },
                    "10003": {
                        "name": "NaturnaheUferParkanlage",
                        "alias": "Naturnahe Ufer-Parkanlage",
                        "description": "Ufernahe Parkanlage",
                    },
                    "1200": {
                        "name": "Dauerkleingarten",
                        "alias": "Dauerkleingarten",
                        "description": "Dauerkleingarten; auch: Gartenfläche, Hofgärten, Gartenland.",
                    },
                    "12000": {
                        "name": "ErholungsGaerten",
                        "alias": "Erholungsgärten",
                        "description": "Erholungsgarten",
                    },
                    "1400": {
                        "name": "Sportplatz",
                        "alias": "Sportplatz",
                        "description": "Sportplatz",
                    },
                    "14000": {
                        "name": "Reitsportanlage",
                        "alias": "Reitsportanlage",
                        "description": "Reitsportanlage",
                    },
                    "14001": {
                        "name": "Hundesportanlage",
                        "alias": "Hundesportanlage",
                        "description": "Hundesportanlage",
                    },
                    "14002": {
                        "name": "Wassersportanlage",
                        "alias": "Wassersportanlage",
                        "description": "Wassersportanlage",
                    },
                    "14003": {
                        "name": "Schiessstand",
                        "alias": "Schießstand",
                        "description": "Schießstand",
                    },
                    "14004": {
                        "name": "Golfplatz",
                        "alias": "Golfplatz",
                        "description": "Golfplatz",
                    },
                    "14005": {
                        "name": "Skisport",
                        "alias": "Skisport",
                        "description": "Anlage für Skisport",
                    },
                    "14006": {
                        "name": "Tennisanlage",
                        "alias": "Tennisanlage",
                        "description": "Tennisanlage",
                    },
                    "1600": {
                        "name": "Spielplatz",
                        "alias": "Spielplatz",
                        "description": "Spielplatz",
                    },
                    "16000": {
                        "name": "Bolzplatz",
                        "alias": "Bolzplatz",
                        "description": "Bolzplatz",
                    },
                    "16001": {
                        "name": "Abenteuerspielplatz",
                        "alias": "Abenteuerspielplatz",
                        "description": "Abenteuerspielplatz",
                    },
                    "1800": {
                        "name": "Zeltplatz",
                        "alias": "Zeltplatz",
                        "description": "Zeltplatz",
                    },
                    "18000": {
                        "name": "Campingplatz",
                        "alias": "Campingplatz",
                        "description": "Campingplatz",
                    },
                    "2000": {
                        "name": "Badeplatz",
                        "alias": "Badeplatz",
                        "description": "Badeplatz, auch Schwimmbad, Liegewiese.",
                    },
                    "2200": {
                        "name": "FreizeitErholung",
                        "alias": "Freizeit und Erholung",
                        "description": "Anlage für Freizeit und Erholung.",
                    },
                    "22000": {
                        "name": "Kleintierhaltung",
                        "alias": "Kleintierhaltung",
                        "description": "Anlage für Kleintierhaltung",
                    },
                    "22001": {
                        "name": "Festplatz",
                        "alias": "Festplatz",
                        "description": "Festplatz",
                    },
                    "2400": {
                        "name": "SpezGruenflaeche",
                        "alias": "Spezielle Grünfläche",
                        "description": "Spezielle Grünfläche",
                    },
                    "24000": {
                        "name": "StrassenbegleitGruen",
                        "alias": "Straßenbegleitgrün",
                        "description": "Straßenbegleitgrün",
                    },
                    "24001": {
                        "name": "BoeschungsFlaeche",
                        "alias": "Böschungsfläche",
                        "description": "Böschungsfläche",
                    },
                    "24003": {
                        "name": "Uferschutzstreifen",
                        "alias": "Uferschutzstreifen",
                        "description": "Uferstreifen",
                    },
                    "24004": {
                        "name": "Abschirmgruen",
                        "alias": "Abschirmgrün",
                        "description": "Abschirmgrün",
                    },
                    "24005": {
                        "name": "UmweltbildungsparkSchaugatter",
                        "alias": "Umweltbildungspark, Schaugatter",
                        "description": "Umweltbildungspark, Schaugatter",
                    },
                    "24006": {
                        "name": "RuhenderVerkehr",
                        "alias": "Ruhender Verkehr",
                        "description": "Fläche für den ruhenden Verkehr.",
                    },
                    "2600": {
                        "name": "Friedhof",
                        "alias": "Friedhof",
                        "description": "Friedhof",
                    },
                    "2700": {
                        "name": "Naturerfahrungsraum",
                        "alias": "Naturerfahrungsraum",
                        "description": "Naturerfahrungsräume sollen insbesondere Kindern und Jugendlichen die Möglichkeit geben, in ihrem direkten Umfeld Natur vorzufinden, um eigenständig Erfahrung mit Pflanzen und Tieren sammeln zu können.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zweckbestimmung, falls keine der aufgeführten Klassifikationen anwendbar ist.",
                    },
                    "99990": {
                        "name": "Gaertnerei",
                        "alias": "Gärtnerei",
                        "description": "Gärtnerei",
                    },
                },
                "typename": "XP_ZweckbestimmungGruen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestGruen",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestLandwirtschaft(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Fläche für die Landwirtschaft.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "9999"],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "LandwirtschaftAllgemein",
                        "alias": "Landwirtschaft allgemein",
                        "description": "Allgemeine Landwirtschaft",
                    },
                    "1100": {
                        "name": "Ackerbau",
                        "alias": "Ackerbau",
                        "description": "Ackerbau",
                    },
                    "1200": {
                        "name": "WiesenWeidewirtschaft",
                        "alias": "Wiesen, Weidewirtschaft",
                        "description": "Wiesen- und Weidewirtschaft",
                    },
                    "1300": {
                        "name": "GartenbaulicheErzeugung",
                        "alias": "Gartenbauliche Erzeugung",
                        "description": "Gartenbauliche Erzeugung",
                    },
                    "1400": {
                        "name": "Obstbau",
                        "alias": "Obstbau",
                        "description": "Obstbau",
                    },
                    "1500": {
                        "name": "Weinbau",
                        "alias": "Weinbau",
                        "description": "Weinbau",
                    },
                    "1600": {
                        "name": "Imkerei",
                        "alias": "Imkerei",
                        "description": "Imkerei",
                    },
                    "1700": {
                        "name": "Binnenfischerei",
                        "alias": "Binnenfischerei",
                        "description": "Binnenfischerei",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "XP_ZweckbestimmungLandwirtschaft",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestLandwirtschaftsFlaeche",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestSpielSportanlage(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Spiel- und Sportanlage.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal["1000", "2000", "3000", "9999"],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Sportanlage",
                        "alias": "Sportanlage",
                        "description": "Sportanlage",
                    },
                    "2000": {
                        "name": "Spielanlage",
                        "alias": "Spielanlage",
                        "description": "Spielanlage",
                    },
                    "3000": {
                        "name": "SpielSportanlage",
                        "alias": "Spiel- und Sportanlage",
                        "description": "Spiel- und/oder Sportanlage.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "XP_ZweckbestimmungSpielSportanlage",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestSpielSportanlage",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestVerEntsorgung(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Fläche für Ver- oder Entsorgung
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "10003",
            "10004",
            "10005",
            "10006",
            "10007",
            "10008",
            "10009",
            "100010",
            "100011",
            "100012",
            "100013",
            "1200",
            "12000",
            "12001",
            "12002",
            "12003",
            "12004",
            "12005",
            "1300",
            "13000",
            "13001",
            "13002",
            "13003",
            "1400",
            "14000",
            "14001",
            "14002",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16004",
            "16005",
            "1800",
            "18000",
            "18001",
            "18002",
            "18003",
            "18004",
            "18006",
            "2000",
            "20000",
            "20001",
            "2200",
            "22000",
            "22001",
            "22002",
            "22003",
            "2400",
            "24000",
            "24001",
            "24002",
            "24003",
            "24004",
            "24005",
            "2600",
            "26000",
            "26001",
            "26002",
            "2800",
            "3000",
            "9999",
            "99990",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Elektrizitaet",
                        "alias": "Elektrizität",
                        "description": "Elektrizität allgemein",
                    },
                    "10000": {
                        "name": "Hochspannungsleitung",
                        "alias": "Hochspannungsleitung",
                        "description": "Hochspannungsleitung",
                    },
                    "10001": {
                        "name": "TrafostationUmspannwerk",
                        "alias": "Trafostation, Umspannwerk",
                        "description": "Trafostation, auch Umspannwerk",
                    },
                    "10002": {
                        "name": "Solarkraftwerk",
                        "alias": "Solarkraftwerk",
                        "description": "Solarkraftwerk",
                    },
                    "10003": {
                        "name": "Windkraftwerk",
                        "alias": "Windkraftwerk",
                        "description": "Windkraftwerk, Windenergieanlage, Windrad.",
                    },
                    "10004": {
                        "name": "Geothermiekraftwerk",
                        "alias": "Geothermiekraftwerk",
                        "description": "Geothermie Kraftwerk",
                    },
                    "10005": {
                        "name": "Elektrizitaetswerk",
                        "alias": "Elektrizitätswerk",
                        "description": "Elektrizitätswerk allgemein",
                    },
                    "10006": {
                        "name": "Wasserkraftwerk",
                        "alias": "Wasserkraftwerk",
                        "description": "Wasserkraftwerk",
                    },
                    "10007": {
                        "name": "BiomasseKraftwerk",
                        "alias": "Biomassekraftwerk",
                        "description": "Biomasse-Kraftwerk",
                    },
                    "10008": {
                        "name": "Kabelleitung",
                        "alias": "Kabelleitung",
                        "description": "Kabelleitung",
                    },
                    "10009": {
                        "name": "Niederspannungsleitung",
                        "alias": "Niederspannungsleitung",
                        "description": "Niederspannungsleitung",
                    },
                    "100010": {
                        "name": "Leitungsmast",
                        "alias": "Leitungsmast",
                        "description": "Leitungsmast",
                    },
                    "100011": {
                        "name": "Kernkraftwerk",
                        "alias": "Kernkraftwerk",
                        "description": "Kernkraftwerk",
                    },
                    "100012": {
                        "name": "Kohlekraftwerk",
                        "alias": "Kohlekraftwerk",
                        "description": "Kohlekraftwerk",
                    },
                    "100013": {
                        "name": "Gaskraftwerk",
                        "alias": "Gaskraftwerk",
                        "description": "Gaskraftwerk",
                    },
                    "1200": {
                        "name": "Gas",
                        "alias": "Gas",
                        "description": "Gas allgemein",
                    },
                    "12000": {
                        "name": "Ferngasleitung",
                        "alias": "Ferngasleitung",
                        "description": "Ferngasleitung",
                    },
                    "12001": {
                        "name": "Gaswerk",
                        "alias": "Gaswerk",
                        "description": "Gaswerk",
                    },
                    "12002": {
                        "name": "Gasbehaelter",
                        "alias": "Gasbehälter",
                        "description": "Gasbehälter",
                    },
                    "12003": {
                        "name": "Gasdruckregler",
                        "alias": "Gasdruckregler",
                        "description": "Gasdruckregler",
                    },
                    "12004": {
                        "name": "Gasstation",
                        "alias": "Gasstation",
                        "description": "Gasstation",
                    },
                    "12005": {
                        "name": "Gasleitung",
                        "alias": "Gasleitung",
                        "description": "Gasleitung",
                    },
                    "1300": {
                        "name": "Erdoel",
                        "alias": "Erdöl",
                        "description": "Erdöl allgemein",
                    },
                    "13000": {
                        "name": "Erdoelleitung",
                        "alias": "Erdölleitung",
                        "description": "Erdölleitung",
                    },
                    "13001": {
                        "name": "Bohrstelle",
                        "alias": "Bohrstelle",
                        "description": "Bohrstelle",
                    },
                    "13002": {
                        "name": "Erdoelpumpstation",
                        "alias": "Erdölpumpstation",
                        "description": "Erdölpumpstation",
                    },
                    "13003": {
                        "name": "Oeltank",
                        "alias": "Öltank",
                        "description": "Öltank",
                    },
                    "1400": {
                        "name": "Waermeversorgung",
                        "alias": "Wärmeversorgung",
                        "description": "Wärmeversorgung allgemein",
                    },
                    "14000": {
                        "name": "Blockheizkraftwerk",
                        "alias": "Blockheizkraftwerk",
                        "description": "Blockheizkraftwerk",
                    },
                    "14001": {
                        "name": "Fernwaermeleitung",
                        "alias": "Fernwärmeleitung",
                        "description": "Fernwärmeleitung",
                    },
                    "14002": {
                        "name": "Fernheizwerk",
                        "alias": "Fernheizwerk",
                        "description": "Fernheizwerk",
                    },
                    "1600": {
                        "name": "Wasser",
                        "alias": "Wasser",
                        "description": "Trink- und Brauchwasser allgemein",
                    },
                    "16000": {
                        "name": "Wasserwerk",
                        "alias": "Wasserwerk",
                        "description": "Wasserwerk",
                    },
                    "16001": {
                        "name": "Wasserleitung",
                        "alias": "Wasserleitung",
                        "description": "Trinkwasserleitung",
                    },
                    "16002": {
                        "name": "Wasserspeicher",
                        "alias": "Wasserspeicher",
                        "description": "Wasserspeicher",
                    },
                    "16003": {
                        "name": "Brunnen",
                        "alias": "Brunnen",
                        "description": "Brunnen",
                    },
                    "16004": {
                        "name": "Pumpwerk",
                        "alias": "Pumpwerk",
                        "description": "Pumpwerk",
                    },
                    "16005": {
                        "name": "Quelle",
                        "alias": "Quelle",
                        "description": "Quelle",
                    },
                    "1800": {
                        "name": "Abwasser",
                        "alias": "Abwasser",
                        "description": "Abwasser allgemein",
                    },
                    "18000": {
                        "name": "Abwasserleitung",
                        "alias": "Abwasserleitung",
                        "description": "Abwasserleitung",
                    },
                    "18001": {
                        "name": "Abwasserrueckhaltebecken",
                        "alias": "Abwasserrückhaltebecken",
                        "description": "Abwasserrückhaltebecken",
                    },
                    "18002": {
                        "name": "Abwasserpumpwerk",
                        "alias": "Abwasserpumpwerk",
                        "description": "Abwasserpumpwerk, auch Abwasserhebeanlage",
                    },
                    "18003": {
                        "name": "Klaeranlage",
                        "alias": "Kläranlage",
                        "description": "Kläranlage",
                    },
                    "18004": {
                        "name": "AnlageKlaerschlamm",
                        "alias": "Anlage Klärschlamm",
                        "description": "Anlage zur Speicherung oder Behandlung von Klärschlamm.",
                    },
                    "18006": {
                        "name": "SalzOderSoleleitungen",
                        "alias": "Salz- oder Soleleitungen",
                        "description": "Salz- oder Sole-Leitungen",
                    },
                    "2000": {
                        "name": "Regenwasser",
                        "alias": "Regenwasser",
                        "description": "Regenwasser allgemein",
                    },
                    "20000": {
                        "name": "RegenwasserRueckhaltebecken",
                        "alias": "Regenwasserrückhaltebecken",
                        "description": "Regenwasser Rückhaltebecken",
                    },
                    "20001": {
                        "name": "Niederschlagswasserleitung",
                        "alias": "Niederschlagswasserleitung",
                        "description": "Niederschlagswasser-Leitung",
                    },
                    "2200": {
                        "name": "Abfallentsorgung",
                        "alias": "Abfallentsorgung",
                        "description": "Abfallentsorgung allgemein",
                    },
                    "22000": {
                        "name": "Muellumladestation",
                        "alias": "Müllumladestation",
                        "description": "Müll-Umladestation",
                    },
                    "22001": {
                        "name": "Muellbeseitigungsanlage",
                        "alias": "Müllbeseitigungsanlage",
                        "description": "Müllbeseitigungsanlage",
                    },
                    "22002": {
                        "name": "Muellsortieranlage",
                        "alias": "Müllsortieranlage",
                        "description": "Müllsortieranlage",
                    },
                    "22003": {
                        "name": "Recyclinghof",
                        "alias": "Recyclinghof",
                        "description": "Recyclinghof",
                    },
                    "2400": {
                        "name": "Ablagerung",
                        "alias": "Ablagerung",
                        "description": "Ablagerung allgemein",
                    },
                    "24000": {
                        "name": "Erdaushubdeponie",
                        "alias": "Erdaushubdeponie",
                        "description": "Erdaushub-Deponie",
                    },
                    "24001": {
                        "name": "Bauschuttdeponie",
                        "alias": "Bauschuttdeponie",
                        "description": "Bauschutt-Deponie",
                    },
                    "24002": {
                        "name": "Hausmuelldeponie",
                        "alias": "Hausmülldeponie",
                        "description": "Hausmüll-Deponie",
                    },
                    "24003": {
                        "name": "Sondermuelldeponie",
                        "alias": "Sondermülldeponie",
                        "description": "Sondermüll-Deponie",
                    },
                    "24004": {
                        "name": "StillgelegteDeponie",
                        "alias": "Stillgelegte Deponie",
                        "description": "Stillgelegte Deponie",
                    },
                    "24005": {
                        "name": "RekultivierteDeponie",
                        "alias": "Rekultivierte Deponie",
                        "description": "Rekultivierte Deponie",
                    },
                    "2600": {
                        "name": "Telekommunikation",
                        "alias": "Telekommunikation",
                        "description": "Telekommunikation allgemein",
                    },
                    "26000": {
                        "name": "Fernmeldeanlage",
                        "alias": "Fernmeldeanlage",
                        "description": "Fernmeldeanlage",
                    },
                    "26001": {
                        "name": "Mobilfunkanlage",
                        "alias": "Mobilfunkanlage",
                        "description": "Mobilfunkanlage",
                    },
                    "26002": {
                        "name": "Fernmeldekabel",
                        "alias": "Fernmeldekabel",
                        "description": "Fernmeldekabel",
                    },
                    "2800": {
                        "name": "ErneuerbareEnergien",
                        "alias": "Erneuerbare Energien",
                        "description": "Erneuerbare Energien allgemein",
                    },
                    "3000": {
                        "name": "KraftWaermeKopplung",
                        "alias": "Kraft-Wärme-Kopplung",
                        "description": "Fläche oder Anlage für Kraft-Wärme Kopplung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige, durch keinen anderen Code abbildbare Ver- oder Entsorgungsfläche bzw. -Anlage.",
                    },
                    "99990": {
                        "name": "Produktenleitung",
                        "alias": "Produktenleitung",
                        "description": "Produktenleitung",
                    },
                },
                "typename": "XP_ZweckbestimmungVerEntsorgung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestVerEntsorgung",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKomplexeZweckbestWald(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Waldfläche.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "10000",
            "1200",
            "1400",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16004",
            "1700",
            "1800",
            "1900",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Naturwald",
                        "alias": "Naturwald",
                        "description": "Naturwald",
                    },
                    "10000": {
                        "name": "Waldschutzgebiet",
                        "alias": "Waldschutzgebiet",
                        "description": "Waldschutzgebiet",
                    },
                    "1200": {
                        "name": "Nutzwald",
                        "alias": "Nutzwald",
                        "description": "Nutzwald",
                    },
                    "1400": {
                        "name": "Erholungswald",
                        "alias": "Erholungswald",
                        "description": "Erholungswald",
                    },
                    "1600": {
                        "name": "Schutzwald",
                        "alias": "Schutzwald",
                        "description": "Schutzwald",
                    },
                    "16000": {
                        "name": "Bodenschutzwald",
                        "alias": "Bodenschutzwald",
                        "description": "Bodenschutzwald",
                    },
                    "16001": {
                        "name": "Biotopschutzwald",
                        "alias": "Biotopschutzwald",
                        "description": "Biotopschutzwald",
                    },
                    "16002": {
                        "name": "NaturnaherWald",
                        "alias": "Naturnaher Wald",
                        "description": "Naturnaher Wald",
                    },
                    "16003": {
                        "name": "SchutzwaldSchaedlicheUmwelteinwirkungen",
                        "alias": "Schutzwald schädliche Umwelteinwirkungen",
                        "description": "Wald zum Schutz vor schädlichen Umwelteinwirkungen",
                    },
                    "16004": {
                        "name": "Schonwald",
                        "alias": "Schonwald",
                        "description": "Schonwald",
                    },
                    "1700": {
                        "name": "Bannwald",
                        "alias": "Bannwald",
                        "description": "Bannwald",
                    },
                    "1800": {
                        "name": "FlaecheForstwirtschaft",
                        "alias": "Fläche Forstwirtschaft",
                        "description": "Fläche für die Forstwirtschaft.",
                    },
                    "1900": {
                        "name": "ImmissionsgeschaedigterWald",
                        "alias": "Immissionsgeschädigter Wald",
                        "description": "Immissionsgeschädigter Wald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstigr Wald",
                    },
                },
                "typename": "XP_ZweckbestimmungWald",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung näher detaillieren.",
            json_schema_extra={
                "typename": "FP_DetailZweckbestWaldFlaeche",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBioVfBiotoptypKomplex(BaseFeature):
    """
    Komplexes Attribut mit mindestens einer Angabe des Biotoptypen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bioVfBiotoptyp_BKompV: Annotated[
        AnyUrl | None,
        Field(
            description="Biotoptypen-Katalog der Bundeskompensationsverordnung (Anlage 2 (zu § 5 Absatz 1 BKompV )",
            json_schema_extra={
                "typename": "LP_BioVfBiotoptyp_BKompV",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfBiotoptyp_LandesKS: Annotated[
        AnyUrl | None,
        Field(
            description="Biotoptyp gem. eines Landeskartierschlüssels",
            json_schema_extra={
                "typename": "LP_BioVfBiotoptyp_LandesKS",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVf_FFH_LRT: Annotated[
        AnyUrl | None,
        Field(
            description="FFH-Lebensraumtypen gem. Anhang I der Fauna Flora Habitatrichtlinie",
            json_schema_extra={
                "typename": "LP_BioVf_FFH_LRT",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfBiotoptyp_Text: Annotated[
        str | None,
        Field(
            description="Textliche Angabe zum Biotoptypen; alternativ oder zusätzlich zur Auswahl eines über Codelisten bereitgestellten Kartierschlüssels von Bund, Land oder FFH-LRT.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBioVfPflanzenArtKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben zum Planungsgegenstand Biologische Vielfalt / Pflanzen
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bioVfPflanzenArtName: Annotated[
        str | None,
        Field(
            description="Textliche Angabe zur Pflanzen-Art, botanisch oder Trivialnamen",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfPflanzenSystematik: Annotated[
        Literal["1000", "2000", "3000", "9999"],
        Field(
            description="Gibt systematische Einordnung einer Pflanzenart an:",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Gefaesspflanze",
                        "alias": "Gefäßpflanze",
                        "description": "Gefäßpflanze",
                    },
                    "2000": {
                        "name": "MooseFlechten",
                        "alias": "Moose und Flechten",
                        "description": "Moose/Flechten",
                    },
                    "3000": {"name": "Pilze", "alias": "Pilze", "description": "Pilze"},
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Systematik (siehe bioVfPflanzenSystematikText)",
                    },
                },
                "typename": "LP_BioVfPflanzenArtSystematik",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    bioVfPflanzenSystematikText: Annotated[
        str | None,
        Field(
            description="Textliche Erläuterung zu sonstiger PflanzenartenSystematik (wenn bioVfPflanzenSystematik= 9999) oder ergänzende Information zu einer anderen Systematischen Einordnung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfPflanzenRechtlicherSchutz: Annotated[
        list[Literal["1000", "2000", "3000", "9999"]] | None,
        Field(
            description="Rechtliche Grundlage für den Schutz einer Pflanzenart an.",
            json_schema_extra={
                "typename": "LP_BioVfPflanzenArtRechtlicherSchutz",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "AnhangIV_FFH_RL",
                        "alias": "Anhang IV FFH RL",
                        "description": "Art nach Anhang IV FFH-RL",
                    },
                    "2000": {
                        "name": "Anlage1_BArtSchV",
                        "alias": "Anlage 1 BArtSchV",
                        "description": "Art nach Anlage 1 BArtSchV",
                    },
                    "3000": {
                        "name": "Verantwortungsart",
                        "alias": "Verantwortungsart",
                        "description": "Verantwortungsart (gem. § 54 Abs. 1 Nr. 2 BNatSchG oder Landesnaturschutzgesetz)",
                    },
                    "9999": {
                        "name": "Sonstige",
                        "alias": "Sonstige",
                        "description": "Sonstige rechtliche Grundlage (siehe bioVfPflanzenRechtlicherSchutzText)",
                    },
                },
            },
        ),
    ] = None
    bioVfPflanzenRechtlicherSchutzText: Annotated[
        str | None,
        Field(
            description="Textliche Erläuterung zu sonstigem Rechtlichen Schutz (bioVfPflanzenRechtlicherSchutz = 9999) oder ergänzende Information zu ausgewähltem rechtlichem Schutz.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBioVfTiereArtKomplex(BaseFeature):
    """
    Komplexes Attribut mit Angaben zum Planungsgegenstand Biologische Vielfalt / Tiere
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bioVfTierArtName: Annotated[
        str | None,
        Field(
            description="Textliche Angabe zur Tierart; alternativ oder zusätzlich auch bioVfTierArtSystematik",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfTiereSystematik: Annotated[
        Literal[
            "1100",
            "1120",
            "1110",
            "1200",
            "1210",
            "1220",
            "1230",
            "1240",
            "1300",
            "1310",
            "1311",
            "1312",
            "1320",
            "1330",
            "1331",
            "1340",
            "1400",
            "2100",
            "2110",
            "2120",
            "2200",
            "2300",
            "2400",
            "3000",
            "3110",
            "3120",
            "3130",
            "3140",
            "3150",
            "3200",
            "4100",
            "9999",
        ],
        Field(
            description="Gibt systematische Einordnung einer Tierart an",
            json_schema_extra={
                "enumDescription": {
                    "1100": {
                        "name": "GrossSaeuger",
                        "alias": "Großsäuger",
                        "description": "Großsäuger",
                    },
                    "1120": {"name": "Wolf", "alias": "Wolf", "description": "Wolf"},
                    "1110": {"name": "Luchs", "alias": "Luchs", "description": "Luchs"},
                    "1200": {
                        "name": "Mittelsaeuger",
                        "alias": "Mittelsäuger",
                        "description": "Mittelsäuger",
                    },
                    "1210": {
                        "name": "Wildkatze",
                        "alias": "Wildkatze",
                        "description": "Wildkatze",
                    },
                    "1220": {
                        "name": "Fischotter",
                        "alias": "Fischotter",
                        "description": "Fischotter",
                    },
                    "1230": {"name": "Biber", "alias": "Biber", "description": "Biber"},
                    "1240": {
                        "name": "Marder",
                        "alias": "Marder",
                        "description": "Marder",
                    },
                    "1300": {
                        "name": "Kleinsaeuger",
                        "alias": "Kleinsäuger",
                        "description": "Kleinsäuger",
                    },
                    "1310": {
                        "name": "KleinsaeugerNagetiere",
                        "alias": "Kleinsäuger, Nagetiere",
                        "description": "Kleinsäuger, Nagetiere",
                    },
                    "1311": {
                        "name": "Feldhamster",
                        "alias": "Feldhamster",
                        "description": "Feldhamster",
                    },
                    "1312": {
                        "name": "Maeuse",
                        "alias": "Mäuse",
                        "description": "Mäuse",
                    },
                    "1320": {
                        "name": "KleinsaeugerHasenartige",
                        "alias": "Kleinsäuger Hasenartige",
                        "description": "Kleinsäuger (Hasenartige)",
                    },
                    "1330": {
                        "name": "KleinsaeugerInsektenfresser",
                        "alias": "Kleinsäuger Insektenfresser",
                        "description": "Kleinsäuger (Insektenfresser)",
                    },
                    "1331": {
                        "name": "Spitzmaeuse",
                        "alias": "Spitzmäuse",
                        "description": "Spitzmäuse",
                    },
                    "1340": {
                        "name": "KleinsaeugerFledermaeuse",
                        "alias": "Kleinsäuger Fledermäuse",
                        "description": "Kleinsäuger (Fledermäuse)",
                    },
                    "1400": {
                        "name": "Meeressaeuger",
                        "alias": "Meeressäuger",
                        "description": "Meeressäuger",
                    },
                    "2100": {
                        "name": "Voegel",
                        "alias": "Vögel",
                        "description": "Vögel",
                    },
                    "2110": {
                        "name": "ZugVoegel",
                        "alias": "Zugvögel",
                        "description": "Zugvögel",
                    },
                    "2120": {
                        "name": "BrutVoegel",
                        "alias": "Brutvögel",
                        "description": "Brutvögel",
                    },
                    "2200": {
                        "name": "Reptilien",
                        "alias": "Reptilien",
                        "description": "Reptilien",
                    },
                    "2300": {
                        "name": "Amphibien",
                        "alias": "Amphibien",
                        "description": "Amphibien",
                    },
                    "2400": {
                        "name": "Fische",
                        "alias": "Fische",
                        "description": "Fische",
                    },
                    "3000": {
                        "name": "Gliederfuesser",
                        "alias": "Gliederfüßer",
                        "description": "Gliederfuesser",
                    },
                    "3110": {
                        "name": "Libellen",
                        "alias": "Libellen",
                        "description": "Libellen",
                    },
                    "3120": {
                        "name": "Tagfalter",
                        "alias": "Tagfalter",
                        "description": "Tagfalter",
                    },
                    "3130": {
                        "name": "Kaefer",
                        "alias": "Käfer",
                        "description": "Käfer",
                    },
                    "3140": {
                        "name": "Heuschrecken",
                        "alias": "Heuschrecken",
                        "description": "Heuschrecken",
                    },
                    "3150": {
                        "name": "Spinnen",
                        "alias": "Spinnen",
                        "description": "Spinnen",
                    },
                    "3200": {
                        "name": "Krebstiere",
                        "alias": "Krebstiere",
                        "description": "Krebstiere",
                    },
                    "4100": {
                        "name": "Mollusken",
                        "alias": "Mollusken",
                        "description": "Mollusken",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige (siehe bioVfTiereSystematikText)",
                    },
                },
                "typename": "LP_BioVfTiereArtSystematik",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    bioVfTiereSystematikText: Annotated[
        str | None,
        Field(
            description="Textliche Erläuterung zu sonstiger Tierartensystematik (bioVfTiereSystematik= 9999) oder ergänzende Information zu ausgewählter Gruppe.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfTierArtRechtlicherSchutz: Annotated[
        list[Literal["1000", "2000", "3000", "5000", "9999"]] | None,
        Field(
            description="Rechtliche Grundlage für den Schutz einer Tierart an.",
            json_schema_extra={
                "typename": "LP_BioVfTierArtRechtlicherSchutz",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "ArtAnhangIV_FFH_RL",
                        "alias": "Art Anhang IV  FFH RL",
                        "description": "Art nach Anhang IV FFH-RL",
                    },
                    "2000": {
                        "name": "ArtAnhang_I_Art4_Abs2_VS_RL",
                        "alias": "Art Anhang I Art4 Abs2 VS RL",
                        "description": "Art nach Anhang I/ Art. 4 Abs. 2 Vogelschutz-Richtlinie",
                    },
                    "3000": {
                        "name": "ArtAnlage1_BArtSchV",
                        "alias": "Art Anlage 1 BArt Sch V",
                        "description": "Art nach Anlage 1 BArtSchV",
                    },
                    "5000": {
                        "name": "Verantwortungsart",
                        "alias": "Verantwortungsart",
                        "description": "Verantwortungsart (gem. § 54 Abs. 1 Nr. 2 BNatSchG oder Landesnaturschutzgesetz)",
                    },
                    "9999": {
                        "name": "Sonstige",
                        "alias": "Sonstige",
                        "description": "Sonstige rechtliche Grundlage (siehe bioVfTierArtRechtlicherSchutzText)",
                    },
                },
            },
        ),
    ] = None
    bioVfTierArtRechtlicherSchutzText: Annotated[
        str | None,
        Field(
            description="Textliche Erläuterung zu sonstigem rechtlichen Schutz (bioVfTierArtRechtlicherSchutz = 9999) oder ergänzende Information zu ausgewähltem Rechtlichem Schutz.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfTierArtHabitatanforderung: Annotated[
        Literal["1000", "2000", "9999"] | None,
        Field(
            description="Gibt besondere Habitatanforderungen einer Tierart an.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "GrosserHabitatsAnspruch",
                        "alias": "Großer Habitats-Anspruch",
                        "description": "Art mit (sehr) großem Habitatsanforderungen",
                    },
                    "2000": {
                        "name": "Gebaeudebewohnend",
                        "alias": "Gebäudebewohnend",
                        "description": "Gebäudebewohnende Art",
                    },
                    "9999": {
                        "name": "Sonstige",
                        "alias": "Sonstige",
                        "description": "Sonstige Habitatanforderungen (siehe bioBioVfTierArtHabitatanforderungText)",
                    },
                },
                "typename": "LP_BioVfTierArtHabitatanforderung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVfTierArtHabitatanforderungText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstige Habitatanforderungen oder ergänzende Information zu ausgewählten Habitatanforderungen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPBiologischeVielfaltKomplex(BaseFeature):
    """
    Angaben zum Planungsgegenstand „Biologische Vielfalt“
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bioVielfaltTypus: Annotated[
        LPBiologischeVielfaltTypKomplex,
        Field(
            description="Zeigt an, auf welchen Bestandteil der Biologischen Vielfalt sich das Objekt bezieht",
            json_schema_extra={
                "typename": "LP_BiologischeVielfaltTypKomplex",
                "stereotype": "DataType",
                "multiplicity": "1",
            },
        ),
    ]
    bioVfPflanzenArt: Annotated[
        list[LPBioVfPflanzenArtKomplex] | None,
        Field(
            description="Angaben zu Planzenarten als Bestandteil der biologischen Vielfalt.",
            json_schema_extra={
                "typename": "LP_BioVfPflanzenArtKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    bioVfTierArt: Annotated[
        list[LPBioVfTiereArtKomplex] | None,
        Field(
            description="Angaben zu Tierarten als Bestandteil der biologischen Vielfalt.",
            json_schema_extra={
                "typename": "LP_BioVfTiereArtKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    bioVfArtFFHAnhangII: Annotated[
        bool,
        Field(
            description="Gibt an, ob Nachweise für Tier- und Pflanzenarten von gemeinschaftlichem Interesse kartiert wurden, für deren Erhaltung besondere Schutzgebiete ausgewiesen werden müssen (gemäß Anhang II der FFH-RL).",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    bioVfBiotoptyp: Annotated[
        list[LPBioVfBiotoptypKomplex] | None,
        Field(
            description="Angaben zum Biotoptyp",
            json_schema_extra={
                "typename": "LP_BioVfBiotoptypKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class LPSPEKomplex(BaseFeature):
    """
    Angaben zur Differenzierung der Schutz-, Pflege und Entwicklungsziele von Naturschutz und Landschaftspflege.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    schutzPflegeEntwicklungTyp: Annotated[
        list[
            Literal[
                "1100", "1200", "2000", "3000", "3500", "5100", "5200", "5300", "9999"
            ]
        ],
        Field(
            description="Differenzierung der Ziele, der Erfordernisse oder der Maßnahmen von Naturschutz und Landschaftspflege.",
            json_schema_extra={
                "typename": "LP_SchutzPflegeEntwicklung",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1100": {
                        "name": "Schutz",
                        "alias": "Schutz",
                        "description": "Schutz bzw. Erhalt von Natur und Landschaft",
                    },
                    "1200": {
                        "name": "Pflege",
                        "alias": "Pflege",
                        "description": "Pflege von Natur und Landschaft",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung von Natur und Landschaft",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Anlage bzw. Schaffung von neuen Strukturen und Funktionen (z.B. Anlage einer Hecke)",
                    },
                    "3500": {
                        "name": "Wiederherstellung",
                        "alias": "Wiederherstellung",
                        "description": "Wiederherstellung von ehemals vorhandenen Strukturen und Funktionen",
                    },
                    "5100": {
                        "name": "Vermeidung",
                        "alias": "Vermeidung",
                        "description": "Vermeidung von Beeinträchtigungen von Natur und Landschaft",
                    },
                    "5200": {
                        "name": "Minderung",
                        "alias": "Minderung",
                        "description": "Minderung von Beeinträchtigungen von Natur und Landschaft",
                    },
                    "5300": {
                        "name": "Beseitigung",
                        "alias": "Beseitigung",
                        "description": "Beseitigung von Beeinträchtigungen von Natur und Landschaft",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel (siehe schutzPflegeEntwicklungText)",
                    },
                },
            },
            min_length=1,
        ),
    ]
    schutzPflegeEntwicklungText: Annotated[
        str | None,
        Field(
            description="Textfeld, Erläuterung sonstigem Ziel Schutz, Pflege und Entwicklung oder ergänzende Information zu ausgewählten Differenzierungen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPZielDimNatSchLaPflKomplex(BaseFeature):
    """
    Zieldimension von Naturschutz und Landschaftspflege; Teilziele des Naturschutzes und der Landschaftspflege gemäß § 1 Abs. 1 Ziffern 1. bis 3. BNatSchG
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zielDimensionTyp: Annotated[
        Literal["1000", "2000", "3000", "9998", "9999"],
        Field(
            description="Teilziele des Naturschutzes und der Landschaftspflege gemäß § 1 Abs. 1 Ziffern 1. bis 3. BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzBiologischeVielfalt",
                        "alias": "Schutz biologische Vielfalt",
                        "description": "Schutz der biologischen Vielfalt gemäß § 1 Abs. 1 Ziffer 1 BNatSchG.",
                    },
                    "2000": {
                        "name": "SchutzNaturhaushalt",
                        "alias": "Schutz Naturhaushalt",
                        "description": "Schutz des Naturhaushaltes gemäß § 1 Abs. 1 Ziffer 2 BNatSchG.",
                    },
                    "3000": {
                        "name": "SchutzLandschaftsbildErholungsvorsorge",
                        "alias": "Schutz Landschaftsbild, Erholungsvorsorge",
                        "description": "Schutz des Landschaftsbildes sowie Erholungsvorsorge gemäß § 1 Abs. 1 Ziffer 3 BNatSchG.",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannte Zieldimension / Teilziel von Naturschutz und Landschaftspflege (zur Übernahme von Altplänen)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Teilziel  gem. textlicher Angabe in teilZielText.",
                    },
                },
                "typename": "LP_ZielDimensionTyp",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    zielDimensionText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu sonstigem Teilziel (teilZielArt = 9999) oder ergänzende Information zu ausgewähltem Teilziel.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOKomplexeZweckbestStrassenverkehr(BaseFeature):
    """
    Spezifikation der Zweckbestimmung einer Fläche oder Anlage für den Strassenverkehr
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemein: Annotated[
        Literal[
            "1000",
            "1200",
            "1400",
            "14000",
            "14001",
            "14002",
            "14003",
            "14004",
            "14005",
            "14006",
            "14007",
            "14008",
            "14009",
            "140010",
            "140011",
            "140012",
            "140013",
            "14014",
            "14015",
            "1600",
            "16000",
            "16001",
            "16002",
            "16003",
            "16004",
            "16005",
            "16006",
            "3400",
            "3500",
            "9999",
        ],
        Field(
            description="Allgemeine Zweckbestimmung der Fläche oder Anlage",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "AutobahnUndAehnlich",
                        "alias": "Autobahn oder ähnlich",
                        "description": "Autobahn oder autobahnähnliche Straße.",
                    },
                    "1200": {
                        "name": "Hauptverkehrsstrasse",
                        "alias": "Hauptverkehrsstraße",
                        "description": "Sonstige örtliche oder überörtliche Hauptverkehrsstraße bzw. Weg.",
                    },
                    "1400": {
                        "name": "SonstigerVerkehrswegAnlage",
                        "alias": "Sonstiger Verkehrsweg oder Anlage",
                        "description": 'Sonstiger Verkehrsweg oder Anlage. Planinhalte nach § 5.3 PlanZV ("Überörtliche Wege und örtliche Hauptwege") werden ebenfalls auf diesen Enumerationswert abgebildet.',
                    },
                    "14000": {
                        "name": "VerkehrsberuhigterBereich",
                        "alias": "Verkehrsberuhigter Bereich",
                        "description": "Bereich einer Verkehrsfläche, der der Verkehrsberuhigung in geschlossenen Ortschaften dient.",
                    },
                    "14001": {
                        "name": "Platz",
                        "alias": "Platz",
                        "description": "Platz",
                    },
                    "14002": {
                        "name": "Fussgaengerbereich",
                        "alias": "Fußgängerbereich",
                        "description": "Fußgängerbereich",
                    },
                    "14003": {
                        "name": "RadGehweg",
                        "alias": "Rad- und Gehweg",
                        "description": "Rad- und Fußweg",
                    },
                    "14004": {
                        "name": "Radweg",
                        "alias": "Radweg",
                        "description": "Radweg",
                    },
                    "14005": {
                        "name": "Gehweg",
                        "alias": "Gehweg",
                        "description": "Fußweg",
                    },
                    "14006": {
                        "name": "Wanderweg",
                        "alias": "Wanderweg",
                        "description": "Wanderweg",
                    },
                    "14007": {
                        "name": "ReitKutschweg",
                        "alias": "Reit- und Kutschweg",
                        "description": "Reit- und Kutschweg",
                    },
                    "14008": {
                        "name": "Rastanlage",
                        "alias": "Rastanlage",
                        "description": "Rastanlage",
                    },
                    "14009": {
                        "name": "Busbahnhof",
                        "alias": "Busbahnhof",
                        "description": "Busbahnhof, auch zentraler Omnibusbahnhof (ZOB)",
                    },
                    "140010": {
                        "name": "UeberfuehrenderVerkehrsweg",
                        "alias": "Überführender Verkehrsweg",
                        "description": "Brückenbereich, hier: Überführender Verkehrsweg.",
                    },
                    "140011": {
                        "name": "UnterfuehrenderVerkehrsweg",
                        "alias": "Unterführender Verkehrsweg",
                        "description": "Brückenbereich, hier: Unterführender Verkehrsweg.",
                    },
                    "140012": {
                        "name": "Wirtschaftsweg",
                        "alias": "Wirtschaftsweg",
                        "description": "Wege, die überwiegend land- und forstwirtschaftlichen Zwecken dienen und keine überörtliche Bedeutung haben",
                    },
                    "140013": {
                        "name": "LandwirtschaftlicherVerkehr",
                        "alias": "Landwirtschaftlicher Verkehr",
                        "description": "Landwirtschaftlicher Verkehr",
                    },
                    "14014": {
                        "name": "Anschlussflaeche",
                        "alias": "Anschlussfläche",
                        "description": "Anschlussfläche",
                    },
                    "14015": {
                        "name": "Verkehrsgruen",
                        "alias": "Verkehrsgrün",
                        "description": "Verkehrsgrün",
                    },
                    "1600": {
                        "name": "RuhenderVerkehr",
                        "alias": "Ruhender Verkehr",
                        "description": "Fläche oder Anlage für den ruhenden Verkehr",
                    },
                    "16000": {
                        "name": "Parkplatz",
                        "alias": "Parkplatz",
                        "description": "Parkplatz, Parkfläche",
                    },
                    "16001": {
                        "name": "FahrradAbstellplatz",
                        "alias": "Fahrrad-Abstellplatz",
                        "description": "Abstellplatz für Fahräder",
                    },
                    "16002": {
                        "name": "P_RAnlage",
                        "alias": "P+R Anlage",
                        "description": "Park-and-Ride Anlagen sind Parkanlagen, die in der Nähe von Haltestellen des öffentlichen Nahverkehrs (ÖPNV) für Pkw, teilweise auch Motorräder und Busse, zur Verfügung gestellt werden.",
                    },
                    "16003": {
                        "name": "B_RAnlage",
                        "alias": "B+R Anlage",
                        "description": "Bike-and-Ride Anlagen sind Radabstellanlagen, die in der Nähe von Haltestellen des öffentlichen Nahverkehrs (ÖPNV) zur Verfügung gestellt werden.",
                    },
                    "16004": {
                        "name": "Parkhaus",
                        "alias": "Parkhaus",
                        "description": "Parkhaus",
                    },
                    "16005": {
                        "name": "CarSharing",
                        "alias": "Car Sharing",
                        "description": "Anlage für die organisierte gemeinschaftliche Nutzung von Automobilen.",
                    },
                    "16006": {
                        "name": "BikeSharing",
                        "alias": "Bike Sharing",
                        "description": "Anlage für die organisierte gemeinschaftliche Nutzung von Fahrrädern.",
                    },
                    "3400": {
                        "name": "Mischverkehrsflaeche",
                        "alias": "Mischverkehrsfläche",
                        "description": "Mischverkehrsfläche, oder „Shared Space“, „Begegnungszone“, ist eine Verkehrsfläche, auf der eine möglichst gemeinsame Nutzung des Straßenraumes und eine Gleichberechtigung aller Verkehrsteilnehmerinnen und Verkehrsteilnehmer angestrebt wird.",
                    },
                    "3500": {
                        "name": "Ladestation",
                        "alias": "Ladestation",
                        "description": "Flächen für Ladeinfrastruktur elektrisch betriebener Fahrzeuge .",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zweckbestimmung",
                    },
                },
                "typename": "SO_ZweckbestimmungStrassenverkehr",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    detail: Annotated[
        list[AnyUrl] | None,
        Field(
            description="ber eine Codeliste definierte Zweckbestimmungen, die die allgemeine Zweckbestimmung nher detaillieren.",
            json_schema_extra={
                "typename": "SO_DetailZweckbestStrassenverkehr",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    textlicheErgaenzung: Annotated[
        str | None,
        Field(
            description="Textliche Ergänzung der spezifizierten Zweckbestimmung(en)",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Aufschrift",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPAbstraktesPraesentationsobjekt(BaseFeature):
    """
    Abstrakte Basisklasse für alle Präsentationsobjekte. Die Attribute entsprechen dem ALKIS-Objekt AP_GPO, wobei das Attribut "signaturnummer" in stylesheetId umbenannt wurde. Bei freien Präsentationsobjekten ist die Relation "dientZurDarstellungVon" unbelegt, bei gebundenen Präsentationsobjekten zeigt die Relation auf ein von XP_Objekt abgeleitetes Fachobjekt.
    Freie Präsentationsobjekte dürfen ausschließlich zur graphischen Annotation eines Plans verwendet werden
    Gebundene Präsentationsobjekte mit Raumbezug dienen ausschließlich dazu, Attributwerte des verbundenen Fachobjekts im Plan darzustellen. Die Namen der darzustellenden Fachobjekt-Attribute werden über das Attribut "art" unter Verwendung der XPath-Syntax spezifiziert.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    stylesheetId: Annotated[
        AnyUrl | None,
        Field(
            description='Das Attribut "stylesheetId" zeigt auf ein extern definiertes Stylesheet, das Parameter zur Visualisierung von Flächen, Linien, Punkten und Texten enthält. Jedem Stylesheet ist weiterhin eine Darstellungspriorität zugeordnet. Außerdem kann ein Stylesheet logische Elemente enthalten,  die die Visualisierung abhängig machen vom Wert des durch "art" definierten Attributes des Fachobjektes, das durch die Relation "dientZurDarstellungVon" referiert wird.',
            json_schema_extra={
                "typename": "XP_StylesheetListe",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    darstellungsprioritaet: Annotated[
        int | None,
        Field(
            description="Enthält die Darstellungspriorität für Elemente der Signatur. Eine vom Standardwert abweichende Priorität wird über dieses Attribut definiert und nicht über eine neue Signatur.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    art: Annotated[
        list[str] | None,
        Field(
            description='"art" gibt die Namen der Attribute an, die mit dem Präsentationsobjekt dargestellt werden sollen. Dabei ist beim Verweis auf die Attribute des Fachobjekts die XPath-Syntax zu verwenden. Die Pfadangabe ist relativ zu dem Objekt, auf das die Relation dientZurDarstellungVon zeigt.Der XPath-Ausdruck muss auswertbar sein, was insbes. die Verwendung qualifizierten Attributnamen (incl. Namespace-Kürzel xplan) erfordert. Wenn das zugehörige Attribut oder Sub-Attribut des Fachobjekts mehrfach belegt ist, muss die []-Syntax zur Spezifikation des zugehörigen Instanz-Attributs benutzt werden. \r\n\r\nDas Attribut \'art\' darf nur bei "Freien Präsentationsobjekten" (dientZurDarstellungVon = NULL) nicht belegt sein.',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    gehoertZuBereich: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Referenz auf den Bereich, zu dem das Präsentationsobjekt gehört.",
            json_schema_extra={
                "typename": [
                    "BP_Bereich",
                    "FP_Bereich",
                    "LP_Bereich",
                    "RP_Bereich",
                    "SO_Bereich",
                ],
                "stereotype": "Association",
                "reverseProperty": "praesentationsobjekt",
                "sourceOrTarget": "source",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    dientZurDarstellungVon: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Verweis auf das Fachobjekt, deren Plandarstellung durch das Präsentationsobjekt unterstützt werden soll.",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "reverseProperty": "wirdDargestelltDurch",
                "sourceOrTarget": "source",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class XPExterneReferenz(BaseFeature):
    """
    Verweis auf ein extern gespeichertes Dokument oder einen extern gespeicherten, georeferenzierten Plan.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    georefURL: Annotated[
        AnyUrl | None,
        Field(
            description="Referenz auf eine Georeferenzierungs-Datei. Das Attribut ist nur relevant bei Verweisen auf georeferenzierte Rasterbilder. Wenn der XPlanGML Datensatz und das referierte Dokument in einem hierarchischen Ordnersystem gespeichert sind, kann die URI auch einen relativen Pfad vom XPlanGML-Datensatz zum Dokument enthalten.",
            json_schema_extra={
                "typename": "URI",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    art: Annotated[
        Literal["Dokument", "PlanMitGeoreferenz"] | None,
        Field(
            description="Typisierung der referierten Dokumente: Beliebiges Dokument oder georeferenzierter Plan.",
            json_schema_extra={
                "enumDescription": {
                    "Dokument": {
                        "name": "Dokument",
                        "alias": "Dokument",
                        "description": "Referenz auf ein Dokument.",
                    },
                    "PlanMitGeoreferenz": {
                        "name": "PlanMitGeoreferenz",
                        "alias": "Plan mit Georeferenz",
                        "description": "Referenz auf einen georeferenzierten Plan.",
                    },
                },
                "typename": "XP_ExterneReferenzArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    referenzName: Annotated[
        str,
        Field(
            description='Name bzw. Titel des referierten Dokuments. Der Standardname ist "Unbekannt".',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    referenzURL: Annotated[
        AnyUrl,
        Field(
            description="URI des referierten Dokuments, über den auf das Dokument lesend zugegriffen werden kann. Wenn der XPlanGML Datensatz und das referierte Dokument in einem hierarchischen Ordnersystem gespeichert sind, kann die URI auch einen relativen Pfad vom XPlanGML-Datensatz zum Dokument enthalten. \r\nStandardmäßig wird der Wert des Attributes referenzName verwendet.",
            json_schema_extra={
                "typename": "URI",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    referenzMimeType: Annotated[
        AnyUrl | None,
        Field(
            description="Mime-Type des referierten Dokuments",
            json_schema_extra={
                "typename": "XP_MimeTypes",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    beschreibung: Annotated[
        str | None,
        Field(
            description="Beschreibung des referierten Dokuments",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    datum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des referierten Dokuments",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPFPO(XPAbstraktesPraesentationsobjekt):
    """
    Flächenförmiges Präsentationsobjekt. Entspricht der ALKIS Objektklasse AP_FPO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Polygon | definitions.MultiPolygon,
        Field(
            description="Zur Plandarstellung benutzte Flächengeometrie.",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class XPLPO(XPAbstraktesPraesentationsobjekt):
    """
    Linienförmiges Präsentationsobjekt. Entspricht der ALKIS Objektklasse AP_LPO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Line | definitions.MultiLine,
        Field(
            description="Zur Plandarstellung benutzte Liniengeometrie.",
            json_schema_extra={
                "typename": "XP_Liniengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class XPPPO(XPAbstraktesPraesentationsobjekt):
    """
    Punktförmiges Präsentationsobjekt. Entspricht der ALKIS-Objektklasse AP_PPO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point | definitions.MultiPoint,
        Field(
            description="Position des zur Visualisierung benutzten  Textes oder Symbols,",
            json_schema_extra={
                "typename": "XP_Punktgeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    drehwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Winkel um den der Text oder die Signatur mit punktförmiger Bezugsgeometrie aus der Horizontalen gedreht ist, Angabe in Grad. Zählweise im mathematisch positiven Sinn (von Ost über Nord nach West und Süd).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    skalierung: Annotated[
        float | None,
        Field(
            description="Skalierungsfaktor für Symbole.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = 1.0
    hat: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Die Relation ermöglicht es, einem punktförmigen Präsentationsobjekt ein linienförmiges Präsentationsobjekt zuzuweisen. Einziger bekannter Anwendungsfall ist der Zuordnungspfeil eines Symbols oder einer Nutzungsschablone.",
            json_schema_extra={
                "typename": "XP_LPO",
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPPraesentationsobjekt(XPAbstraktesPraesentationsobjekt):
    """
    Entspricht der ALKIS-Objektklasse AP_Darstellung mit dem Unterschied, dass auf das Attribut "positionierungssregel" verzichtet wurde.  Die Klasse darf nur als gebundenes Präsentationsobjekt verwendet werden. Die Standard-Darstellung des verbundenen Fachobjekts wird dann durch die über stylesheetId spezifizierte Darstellung ersetzt. Die Umsetzung dieses Konzeptes ist der Implementierung überlassen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class XPSPEMassnahmenDaten(BaseFeature):
    """
    Spezifikation der Attribute für einer Schutz-, Pflege- oder Entwicklungsmaßnahme.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    klassifizMassnahme: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "1700",
            "1800",
            "1900",
            "2000",
            "2100",
            "2200",
            "2300",
            "2400",
            "9999",
        ]
        | None,
        Field(
            description="Klassifikation der Maßnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "ArtenreicherGehoelzbestand",
                        "alias": "Artenreicher Gehölzbestand",
                        "description": "Artenreicher Gehölzbestand ist aus unterschiedlichen, standortgerechten Gehölzarten aufgebaut und weist einen Strauchanteil auf.",
                    },
                    "1100": {
                        "name": "NaturnaherWald",
                        "alias": "Naturnaher Wald",
                        "description": "Naturnahe Wälder zeichnen sich durch eine standortgemäße Gehölzzusammensetzung unterschiedlicher Altersstufen, durch eine Schichtung der Gehölze (z.B. Strauchschicht, sich überlagernder erster Baumschicht in 10-15 m Höhe und zweiter Baumschicht in 20-25 m Höhe) sowie durch eine in der Regeln artenreiche Krautschicht aus. Kennzeichnend sind zudem das gleichzeitige Nebeneinander von aufwachsenden Gehölzen, Altbäumen und Lichtungen in kleinräumigen Wechsel sowie ein gewisser Totholzanteil.",
                    },
                    "1200": {
                        "name": "ExtensivesGruenland",
                        "alias": "Extensives Grünland",
                        "description": "Gegenüber einer intensiven Nutzung sind bei extensiver Grünlandnutzung sowohl Beweidungsintensitäten als auch der Düngereinsatz deutlich geringer. Als Folge finden eine Reihe von eher konkurrenzschwachen, oft auch trittempflindlichen Pflanzenarten Möglichkeiten, sich neben den in der Regel sehr robusten, wuchskräftigen, jedoch sehr nährstoffbedürftigen Pflanzen intensiver Wirtschaftsflächen zu behaupten.  Dadurch kommt es zur Ausprägung von standortbedingt unterschiedlichen Grünlandgesellschaften mit deutlichen höheren Artenzahlen (größere Vielfalt).",
                    },
                    "1300": {
                        "name": "Feuchtgruenland",
                        "alias": "Feuchtgrünland",
                        "description": "Artenreiches Feuchtgrünland entwickelt sich bei extensiver Bewirtschaftung auf feuchten bis wechselnassen Standorten. Die geringe Tragfähigkeit des vielfach anstehenden Niedermoorbodens erschwert den Einsatz von Maschinen, so dass die Flächen vorwiegend beweidet bzw. erst spät im Jahr gemäht werden.",
                    },
                    "1400": {
                        "name": "Obstwiese",
                        "alias": "Obstwiese",
                        "description": "Obstwiesen umfassen mittel- oder hochstämmige, großkronige Obstbäume auf beweidetem (Obstweide) oder gemähtem (Obstwiese) Grünland. Im Optimalfall setzt sich der aufgelockerte Baumbestand aus verschiedenen, möglichst alten, regional-typischen Kultursorten zusammen.",
                    },
                    "1500": {
                        "name": "NaturnaherUferbereich",
                        "alias": "Naturnaher Uferbereich",
                        "description": "Naturahne Uferbereiche umfassen unterschiedlich zusammengesetzte Röhrichte und Hochstaudenrieder oder Seggen-Gesellschaften sowie Ufergehölze, die sich vorwiegend aus strauch- oder baumförmigen Weiden, Erlen oder Eschen zusammensetzen.",
                    },
                    "1600": {
                        "name": "Roehrichtzone",
                        "alias": "Röhrichtzone",
                        "description": "Im flachen Wasser oder auf nassen Böden bilden sich hochwüchsige, oft artenarme Bestände aus überwiegend windblütigen Röhrichtarten aus. Natürliche Bestände finden sich im Uferbereich von Still- und Fließgewässern.",
                    },
                    "1700": {
                        "name": "Ackerrandstreifen",
                        "alias": "Ackerrandstreifen",
                        "description": "Ackerrandstreifen sind breite Streifen im Randbereich eines konventionell oder ökologisch genutzten Ackerschlages.",
                    },
                    "1800": {
                        "name": "Ackerbrache",
                        "alias": "Ackerbrache",
                        "description": "Als Ackerbrachflächen werden solche Biotope angesprochen, die seit kurzer Zeit aus der Nutzung herausgenommen worden sind. Sie entstehen, indem Ackerflächen mindestens eine Vegetationsperiode nicht mehr bewirtschaftet werden.",
                    },
                    "1900": {
                        "name": "Gruenlandbrache",
                        "alias": "Grünlandbrache",
                        "description": "Als Grünlandbrachen werden solche Biotope angesprochen, die seit kurzer Zeit aus der Nutzung herausgenommen worden sind. Sie entstehen, indem Grünland mindestens eine Vegetationsperiode nicht mehr bewirtschaftet wird.",
                    },
                    "2000": {
                        "name": "Sukzessionsflaeche",
                        "alias": "Sukzessionsfläche",
                        "description": "Sukzessionsflächen umfassen dauerhaft ungenutzte, der natürlichen Entwicklung überlassene Vegetationsbestände auf trockenen bis feuchten Standorten.",
                    },
                    "2100": {
                        "name": "Hochstaudenflur",
                        "alias": "Hochstaudenflur",
                        "description": "Hochwüchsige, zumeist artenreiche Staudenfluren feuchter bis nasser Standorte entwickeln sich in der Regel auf Feuchtgrünland-Brachen, an gehölzfreien Uferstreifen oder an anderen zeitweilig gestörten Standorten mit hohen Grundwasserständen.",
                    },
                    "2200": {
                        "name": "Trockenrasen",
                        "alias": "Trockenrasen",
                        "description": "Trockenrasen sind durch zumindest zeitweilige extreme Trockenheit (Regelwasser versickert rasch) sowie durch Nährstoffarmut charakterisiert, die nur Arten mit speziell angepassten Lebensstrategien Entwicklungsmöglichkeiten bieten.",
                    },
                    "2300": {
                        "name": "Heide",
                        "alias": "Heide",
                        "description": "Heiden sind Zwergstrauchgesellschaften auf nährstoffarmen, sauren, trockenen (Calluna-Heide) oder feuchten (Erica-Heide) Standorten. Im Binnenland haben sie in der Regel nach Entwaldung (Abholzung) und langer Übernutzung (Beweidung) primär nährstoffarmer Standorte entwickelt.",
                    },
                    "2400": {
                        "name": "Moor",
                        "alias": "Moor",
                        "description": "Moore, Sümpfe, Röhrichte, Großseggenrieder, seggen- und binsenreiche Nasswiesen, Quellbereiche, Binnenlandsalzstellen.“ gem. §30 Abs. 2 Nr. 2 BNatSchG.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "XP_SPEMassnahmenTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahmeText: Annotated[
        str | None,
        Field(
            description="Durchzuführende Maßnahme als freier Text.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahmeKuerzel: Annotated[
        str | None,
        Field(
            description="Kürzel der durchzuführenden Maßnahme.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPSpezExterneReferenz(XPExterneReferenz):
    """
    Ergänzung des Datentyps XP_ExterneReferenz um ein Attribut zur semantischen Beschreibung des referierten Dokuments.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "1010",
            "1020",
            "1030",
            "1040",
            "1050",
            "1060",
            "1065",
            "1070",
            "1080",
            "1090",
            "2000",
            "2100",
            "2200",
            "2300",
            "2400",
            "2500",
            "2600",
            "2700",
            "2800",
            "2900",
            "3000",
            "3100",
            "4000",
            "5000",
            "6000",
            "9998",
            "9999",
        ],
        Field(
            description="Typ / Inhalt des referierten Dokuments oder Rasterplans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Beschreibung",
                        "alias": "Beschreibung",
                        "description": "Beschreibung eines Plans",
                    },
                    "1010": {
                        "name": "Begruendung",
                        "alias": "Begründung",
                        "description": "Begründung eines Plans",
                    },
                    "1020": {
                        "name": "Legende",
                        "alias": "Legende",
                        "description": "Plan-Legende",
                    },
                    "1030": {
                        "name": "Rechtsplan",
                        "alias": "Rechtsplan",
                        "description": "Elektronische Version des rechtsverbindlichen Plans",
                    },
                    "1040": {
                        "name": "Plangrundlage",
                        "alias": "Plangrundlage",
                        "description": "Elektronische Version der Plangrundlage, z.B. ein katasterplan",
                    },
                    "1050": {
                        "name": "Umweltbericht",
                        "alias": "Umweltbericht",
                        "description": "Umweltbericht - Ergebnis der Umweltprüfung bzgl. der Umweltbelange",
                    },
                    "1060": {
                        "name": "Satzung",
                        "alias": "Satzung",
                        "description": "Satzung",
                    },
                    "1065": {
                        "name": "Verordnung",
                        "alias": "Verordnung",
                        "description": "Elektronische Version des Verordnungstextes",
                    },
                    "1070": {
                        "name": "Karte",
                        "alias": "Karte",
                        "description": "Referenz auf eine Karte, die in Bezug zum Plan steht",
                    },
                    "1080": {
                        "name": "Erlaeuterung",
                        "alias": "Erläuterung",
                        "description": "Erläuterungsbericht",
                    },
                    "1090": {
                        "name": "ZusammenfassendeErklaerung",
                        "alias": "Zusammenfassende Erklärung",
                        "description": "Zusammenfassende Erklärung zum Bebauungsplan gemäß BauGB",
                    },
                    "2000": {
                        "name": "Koordinatenliste",
                        "alias": "Koordinatenliste",
                        "description": "Koordinaten-Liste",
                    },
                    "2100": {
                        "name": "Grundstuecksverzeichnis",
                        "alias": "Grundstücksverzeichnis",
                        "description": "Grundstücksverzeichnis",
                    },
                    "2200": {
                        "name": "Pflanzliste",
                        "alias": "Pflanzliste",
                        "description": "Pflanzliste",
                    },
                    "2300": {
                        "name": "Gruenordnungsplan",
                        "alias": "Grünordnungsplan",
                        "description": "Grünordnungsplan",
                    },
                    "2400": {
                        "name": "Erschliessungsvertrag",
                        "alias": "Erschliessungsvertrag",
                        "description": "Erschließungsvertrag",
                    },
                    "2500": {
                        "name": "Durchfuehrungsvertrag",
                        "alias": "Durchführungsvertrag",
                        "description": "Durchführungsvertrag",
                    },
                    "2600": {
                        "name": "StaedtebaulicherVertrag",
                        "alias": "Städtebaulicher Vertrag",
                        "description": "Elektronische Version eines städtebaulichen Vertrages",
                    },
                    "2700": {
                        "name": "UmweltbezogeneStellungnahmen",
                        "alias": "Umweltbezogene Stellungnahmen",
                        "description": "Elektronisches Dokument mit umweltbezogenen Stellungnahmen.",
                    },
                    "2800": {
                        "name": "Beschluss",
                        "alias": "Beschluss",
                        "description": "Dokument mit dem Beschluss des Gemeinderats zur öffentlichen Auslegung.",
                    },
                    "2900": {
                        "name": "VorhabenUndErschliessungsplan",
                        "alias": "Vorhaben Und Erschließungsplan",
                        "description": "Referenz auf einen Vorhaben- und Erschließungsplan nach §7 BauBG-MaßnahmenG von 1993",
                    },
                    "3000": {
                        "name": "MetadatenPlan",
                        "alias": "Metadaten des Plans",
                        "description": "Referenz auf den Metadatensatz des Plans",
                    },
                    "3100": {
                        "name": "StaedtebaulEntwicklungskonzeptInnenentwicklung",
                        "alias": "Städtebauliches Entwicklungskonzept Innenentwicklung",
                        "description": "Städtebauliches Entwicklungskonzept zur Stärkung der Innenentwicklung",
                    },
                    "4000": {
                        "name": "Genehmigung",
                        "alias": "Genehmigung",
                        "description": "Referenz auf ein Dokument mit dem Text der Genehmigung",
                    },
                    "5000": {
                        "name": "Bekanntmachung",
                        "alias": "Bekanntmachung",
                        "description": "Referenz auf den Bekanntmachungs-Text",
                    },
                    "6000": {
                        "name": "Schutzgebietsverordnung",
                        "alias": "Schutzgebietsverordnung",
                        "description": "Rechtliche Grundlage für die Ausweisung und das Management eines Schutzgebietes.",
                    },
                    "9998": {
                        "name": "Rechtsverbindlich",
                        "alias": "Rechtsverbindlich",
                        "description": "Sonstiges rechtsverbindliches Dokument",
                    },
                    "9999": {
                        "name": "Informell",
                        "alias": "Informell",
                        "description": "Sonstiges nicht-rechtsverbindliches Dokument",
                    },
                },
                "typename": "XP_ExterneReferenzTyp",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]


class XPTPO(XPAbstraktesPraesentationsobjekt):
    """
    Abstrakte Oberklasse für textliche Präsentationsobjekte. Entspricht der ALKIS Objektklasse AP_TPO
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    schriftinhalt: Annotated[
        str | None,
        Field(
            description="Schriftinhalt; enthält den darzustellenden Text.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    fontSperrung: Annotated[
        float | None,
        Field(
            description="Die Zeichensperrung steuert den zusätzlichen Raum, der zwischen 2 aufeinanderfolgende Zeichenkörper geschoben wird. Er ist ein Faktor, der mit der angegebenen Zeichenhöhe multipliziert wird, um den einzufügenden Zusatzabstand zu erhalten. Mit der Abhängigkeit von der Zeichenhöhe wird erreicht, dass das Schriftbild unabhängig von der Zeichenhöhe gleich wirkt. Der Defaultwert ist 0.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = 0.0
    skalierung: Annotated[
        float | None,
        Field(
            description="Skalierungsfaktor der Schriftgröße, bezogen auf die von der interpretierenden Software festgelegte Standardschrift",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = 1.0
    horizontaleAusrichtung: Annotated[
        Literal["linksbündig", "rechtsbündig", "zentrisch"] | None,
        Field(
            description="Gibt die Ausrichtung des Textes bezüglich der Textgeometrie an.\r\nlinksbündig: Der Text beginnt an der Punktgeometrie bzw. am Anfangspunkt der Liniengeometrie.\r\nrechtsbündig: Der Text endet an der Punktgeometrie bzw. am Endpunkt der Liniengeometrie\r\nzentrisch: Der Text erstreckt sich von der Punktgeometrie gleich weit nach links und rechts bzw. steht auf der Mitte der Standlinie.",
            json_schema_extra={
                "enumDescription": {
                    "linksbündig": {
                        "name": "linksbündig",
                        "alias": "Linksbündig",
                        "description": "Text linksbündig am Textpunkt bzw. am ersten Punkt der Linie.",
                    },
                    "rechtsbündig": {
                        "name": "rechtsbündig",
                        "alias": "Rechtsbündig",
                        "description": "Text rechtsbündig am Textpunkt bzw. am letzten Punkt der Linie.",
                    },
                    "zentrisch": {
                        "name": "zentrisch",
                        "alias": "Zentrisch",
                        "description": "Text zentriert am Textpunkt bzw. in der Mitte der Textstandlinie.",
                    },
                },
                "typename": "XP_HorizontaleAusrichtung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vertikaleAusrichtung: Annotated[
        Literal["Basis", "Mitte", "Oben"] | None,
        Field(
            description="Die vertikale Ausrichtung eines Textes gibt an, ob die Bezugsgeometrie die Basis (Grundlinie) des Textes, die Mitte oder obere Buchstabenbegrenzung betrifft.",
            json_schema_extra={
                "enumDescription": {
                    "Basis": {
                        "name": "Basis",
                        "alias": "Basis",
                        "description": "Textgeometrie bezieht sich auf die Basis- bzw. Grundlinie der Buchstaben.",
                    },
                    "Mitte": {
                        "name": "Mitte",
                        "alias": "Mitte",
                        "description": "Textgeometrie bezieht sich auf die Mittellinie der Buchstaben.",
                    },
                    "Oben": {
                        "name": "Oben",
                        "alias": "Oben",
                        "description": "Textgeometrie bezieht sich auf die Oberlinie der Großbuchstaben.",
                    },
                },
                "typename": "XP_VertikaleAusrichtung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    hat: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Die Relation ermöglicht es, einem textlichen Präsentationsobjekt ein linienförmiges Präsentationsobjekt zuzuweisen. Einziger bekannter Anwendungsfall ist der Zuordnungspfeil eines Symbols oder einer Nutzungsschablone.",
            json_schema_extra={
                "typename": "XP_LPO",
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPTextAbschnitt(BaseFeature):
    """
    Ein Abschnitt der textlich formulierten Inhalte  des Plans.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    schluessel: Annotated[
        str | None,
        Field(
            description="Schlüssel zur Referenzierung des Abschnitts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gesetzlicheGrundlage: Annotated[
        str | None,
        Field(
            description="Gesetzliche Grundlage des Text-Abschnittes",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    text: Annotated[
        str | None,
        Field(
            description="Inhalt eines Abschnitts der textlichen Planinhalte",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein externes Dokument das den zugehörigen Textabschnitt enthält.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtscharakter: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "4000",
            "4100",
            "4200",
            "4300",
            "4400",
            "4500",
            "4600",
            "4700",
            "5000",
            "5100",
            "5200",
            "5300",
            "6000",
            "7000",
            "8000",
            "9998",
            "9999",
        ],
        Field(
            description="Rechtscharakter des textlich formulierten Planinhalts",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "FestsetzungBPlan",
                        "alias": "Festsetzung BPlan",
                        "description": "Festsetzung in einem Bebauungsplan",
                    },
                    "2000": {
                        "name": "NachrichtlicheUebernahme",
                        "alias": "Nachrichtliche Übernahme",
                        "description": "Nachrichtliche Übernahme aus anderen Planwerken.",
                    },
                    "3000": {
                        "name": "DarstellungFPlan",
                        "alias": "Darstellung FPlan",
                        "description": "Darstellung im Flächennutzungsplan",
                    },
                    "4000": {
                        "name": "ZielDerRaumordnung",
                        "alias": "Ziel der Raumordnung",
                        "description": "Ziel der Raumordnung. Verbindliche räumliche und sachliche Festlegung zur Entwicklung, Ordnung und Sicherung des Raumes.",
                    },
                    "4100": {
                        "name": "GrundsatzDerRaumordnung",
                        "alias": "Grundsatz der Raumordnung",
                        "description": "Grundsätze der Raumordnung sind nach §3 Abs. Aussagen zur Entwicklung, Ordnung und Sicherung des Raums als Vorgaben für nachfolgende Abwägungs- oder Ermessensentscheidungen. Grundsätze der Raumordnung können durch Gesetz oder Festlegungen in einem Raumordnungsplan (§7 Abs. 1 und 2, ROG) aufgestellt werden.",
                    },
                    "4200": {
                        "name": "NachrichtlicheUebernahmeZiel",
                        "alias": "Nachrichtliche Übernahme Ziel",
                        "description": "Nachrichtliche Übernahme Ziel der Raumordnung.",
                    },
                    "4300": {
                        "name": "NachrichtlicheUebernahmeGrundsatz",
                        "alias": "Nachrichtliche Übernahme Grundsatz",
                        "description": "Nachrichtliche Übernahme Grundsatz der Raumordnung.",
                    },
                    "4400": {
                        "name": "NurInformationsgehaltRPlan",
                        "alias": "Nur Informationsgehalt RPlan",
                        "description": "Nur Informationsgehalt im Raumordnungsplan.",
                    },
                    "4500": {
                        "name": "TextlichesZielRaumordnung",
                        "alias": "Textliches Ziel Raumordnung",
                        "description": "Textlich formuliertes Ziel der Raumordnung.",
                    },
                    "4600": {
                        "name": "ZielUndGrundsatzRaumordnung",
                        "alias": "Ziel und Grundsatz Raumordnung",
                        "description": "Ziel und Grundsatz der Raumordnung.",
                    },
                    "4700": {
                        "name": "VorschlagRaumordnung",
                        "alias": "Vorschlag Raumordnung",
                        "description": "Vorschlag für die Raumordnung",
                    },
                    "5000": {
                        "name": "FestsetzungImLP",
                        "alias": "Festsetzung im LP",
                        "description": "Festsetzung im Landschaftsplan bzw. Grünordnungsplan, der als eigenständige Satzung beschlossen wird (z.B. in NRW und den Stadtstaaten).",
                    },
                    "5100": {
                        "name": "GeplanteFestsetzungImLP",
                        "alias": "Geplante Festsetzung im LP",
                        "description": "Geplante Festsetzung im Landschaftsplan bzw. Grünordnungsplan, der als eigenständige Satzung beschlossen wird (z.B. in NRW und den Stadtstaaten)",
                    },
                    "5200": {
                        "name": "DarstellungKennzeichnungImLP",
                        "alias": "Darstellung oder Kennzeichnung im LP",
                        "description": "Darstellungen und Kennzeichnungen im Landschaftsplan",
                    },
                    "5300": {
                        "name": "LandschaftsplanungsInhaltZurBeruecksichtigung",
                        "alias": "Landschaftsplanungs-Inhalt zur Berücksichtigung",
                        "description": "Die Inhalte der Landschaftsplanung sind in allen Planungen und Verwaltungsverfahren zu berücksichtigen, deren Entscheidungen sich auf Natur und Landschaft auswirken können. (§ 9 Abs. 5 i.V. Abs. 1 BNatSchG).",
                    },
                    "6000": {
                        "name": "Hinweis",
                        "alias": "Hinweis",
                        "description": "Hinweis nach BauGB",
                    },
                    "7000": {
                        "name": "Kennzeichnung",
                        "alias": "Kennzeichnung",
                        "description": "Kennzeichnung von Flächen nach §9 Absatz 5 BauGB. Kennzeichnungen sind keine rechtsverbindlichen Festsetzungen, sondern Hinweise auf Besonderheiten (insbesondere der Baugrundverhältnisse), deren Kenntnis für das Verständnis des Bebauungsplans und seiner Festsetzungen wie auch für die Vorbereitung und Genehmigung von Vorhaben notwendig sind.",
                    },
                    "8000": {
                        "name": "Vermerk",
                        "alias": "Vermerk",
                        "description": "Vermerk nach § 5 BauGB",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannter Rechtscharakter",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Rechtscharakter",
                    },
                },
                "typename": "XP_Rechtscharakter",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]


class BPVeraenderungssperreDaten(BaseFeature):
    """
    Spezifikation der Daten für eine Veränderungssperre
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    startDatum: Annotated[
        date_aliased,
        Field(
            description="Datum, ab dem die Veränderungssperre gilt",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "1",
            },
        ),
    ]
    endDatum: Annotated[
        date_aliased,
        Field(
            description="Enddatum der Veränderungssperre",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "1",
            },
        ),
    ]
    verlaengerung: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Gibt an, ob die Veränderungssperre bereits ein- oder zweimal verlängert wurde",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Keine",
                        "alias": "Keine",
                        "description": "Veränderungssperre wurde noch nicht verlängert.",
                    },
                    "2000": {
                        "name": "ErsteVerlaengerung",
                        "alias": "Erste Verlängerung",
                        "description": "Veränderungssperre wurde einmal verlängert.",
                    },
                    "3000": {
                        "name": "ZweiteVerlaengerung",
                        "alias": "Zweite Verlängerung",
                        "description": "Veränderungssperre wurde zweimal verlängert.",
                    },
                },
                "typename": "BP_VerlaengerungVeraenderungssperre",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    beschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Beschlussdatum der Veränderungssperre",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refBeschluss: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf das Dokument des Veränderungssperre-Beschlusses.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPBegruendungAbschnitt(BaseFeature):
    """
    Ein Abschnitt der Begründung des Plans.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    schluessel: Annotated[
        str | None,
        Field(
            description="Schlüssel zur Referenzierung des Abschnitts von einem Fachobjekt aus.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    text: Annotated[
        str | None,
        Field(
            description="Inhalt eines Abschnitts der Begründung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein externes Dokument das den Begründungs-Abschnitt enthält.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class XPBereich(BaseFeature):
    """
    Abstrakte Oberklasse für die Modellierung von Bereichen. Ein Bereich fasst die Inhalte eines Plans nach bestimmten Kriterien zusammen.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    nummer: Annotated[
        int,
        Field(
            description="Nummer des Bereichs. Bereichsnummern beginnen standardmäßig mit 0.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    name: Annotated[
        str | None,
        Field(
            description="Bezeichnung des Bereiches",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bedeutung: Annotated[
        Literal["1600", "1800", "2000", "3000", "9999"] | None,
        Field(
            description="Spezifikation der semantischen Bedeutung eines Bereiches.",
            json_schema_extra={
                "enumDescription": {
                    "1600": {
                        "name": "Teilbereich",
                        "alias": "Teilbereich",
                        "description": "Räumliche oder sachliche Aufteilung der Planinhalte.",
                    },
                    "1800": {
                        "name": "Kompensationsbereich",
                        "alias": "Kompensationsbereich",
                        "description": "Aggregation von Objekten außerhalb des Geltungsbereiches gemäß Eingriffsregelung.",
                    },
                    "2000": {
                        "name": "InformationenAusserhalbGeltungsbereich",
                        "alias": "Informationen außerhalb des Geltungsbereichs",
                        "description": "Informationen und zeichnerische Darstellungen, die außerhalb des Geltungsbereichs liegen",
                    },
                    "3000": {
                        "name": "AnderesVerfahren",
                        "alias": "Anderes Verfahren",
                        "description": "Ein Bereich, in dem der Plan nach einer anderen Verfahrensart als im übrigen Geltungsbereich aufgestellt wurde.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": 'Bereich, für den keine der aufgeführten Bedeutungen zutreffend ist. In dem Fall kann die Bedeutung über das Textattribut "detaillierteBedeutung" angegeben werden.',
                    },
                },
                "typename": "XP_BedeutungenBereich",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detaillierteBedeutung: Annotated[
        str | None,
        Field(
            description='Detaillierte Erklärung der semantischen Bedeutung eines Bereiches, in Ergänzung des Attributs "bedeutung".',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    erstellungsMassstab: Annotated[
        int | None,
        Field(
            description="Der bei der Erstellung der Inhalte des Bereichs benutzte Kartenmaßstab. Wenn dieses Attribut nicht spezifiziert ist, gilt für den Bereich der auf Planebene (XP_Plan) spezifizierte Maßstab.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geltungsbereich: Annotated[
        definitions.Polygon | definitions.MultiPolygon | None,
        Field(
            description="Räumliche Abgrenzung des Bereiches.",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refScan: Annotated[
        list[XPExterneReferenz] | None,
        Field(
            description='Referenz auf einen georeferenzierte Rasterplan, der die Inhalte des Bereichs wiedergibt. Das über refScan referierte Rasterbild zeigt einen Plan, dessen Geltungsbereich durch den Geltungsbereich des Bereiches (Attribut geltungsbereich von XP_Bereich) oder, wenn geltungsbereich nicht belegt ist, den Geltungsbereich des Gesamtplans (Attribut raeumlicherGeltungsbereich von XP_Plan) definiert ist. \r\n\r\nIm Standard sind nur georeferenzierte Rasterpläne zugelassen. Die über refScan referierte externe Referenz muss deshalb entweder von der Art "PlanMitGeoreferenz" sein oder die URL eines Geodienstes enthalten.',
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    planinhalt: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Verweis auf einen Planinhalt des Bereichs",
            json_schema_extra={
                "typename": [
                    "BP_AbgrabungsFlaeche",
                    "BP_AbstandsFlaeche",
                    "BP_AbstandsMass",
                    "BP_AbweichungVonBaugrenze",
                    "BP_AbweichungVonUeberbaubarerGrundstuecksFlaeche",
                    "BP_AnpflanzungBindungErhaltung",
                    "BP_AufschuettungsFlaeche",
                    "BP_AusgleichsFlaeche",
                    "BP_AusgleichsMassnahme",
                    "BP_BauGrenze",
                    "BP_BauLinie",
                    "BP_BaugebietsTeilFlaeche",
                    "BP_BereichOhneEinAusfahrtLinie",
                    "BP_BesondererNutzungszweckFlaeche",
                    "BP_EinfahrtPunkt",
                    "BP_EinfahrtsbereichLinie",
                    "BP_EingriffsBereich",
                    "BP_FestsetzungNachLandesrecht",
                    "BP_FlaecheOhneFestsetzung",
                    "BP_FoerderungsFlaeche",
                    "BP_FreiFlaeche",
                    "BP_GebaeudeFlaeche",
                    "BP_GebaeudeStellung",
                    "BP_GemeinbedarfsFlaeche",
                    "BP_GemeinschaftsanlagenFlaeche",
                    "BP_GemeinschaftsanlagenZuordnung",
                    "BP_GenerischesObjekt",
                    "BP_GruenFlaeche",
                    "BP_HoehenMass",
                    "BP_Immissionsschutz",
                    "BP_KennzeichnungsFlaeche",
                    "BP_KleintierhaltungFlaeche",
                    "BP_LandwirtschaftsFlaeche",
                    "BP_NebenanlagenAusschlussFlaeche",
                    "BP_NebenanlagenFlaeche",
                    "BP_NichtUeberbaubareGrundstuecksflaeche",
                    "BP_NutzungsartenGrenze",
                    "BP_PersGruppenBestimmteFlaeche",
                    "BP_RegelungVergnuegungsstaetten",
                    "BP_RichtungssektorGrenze",
                    "BP_SchutzPflegeEntwicklungsFlaeche",
                    "BP_SchutzPflegeEntwicklungsMassnahme",
                    "BP_SpezielleBauweise",
                    "BP_SpielSportanlagenFlaeche",
                    "BP_StrassenbegrenzungsLinie",
                    "BP_Strassenkoerper",
                    "BP_TechnischeMassnahmenFlaeche",
                    "BP_TextAbschnittFlaeche",
                    "BP_UeberbaubareGrundstuecksFlaeche",
                    "BP_UnverbindlicheVormerkung",
                    "BP_VerEntsorgung",
                    "BP_Veraenderungssperre",
                    "BP_WaldFlaeche",
                    "BP_Wegerecht",
                    "BP_WohngebaeudeFlaeche",
                    "BP_ZentralerVersorgungsbereich",
                    "BP_ZusatzkontingentLaerm",
                    "BP_ZusatzkontingentLaermFlaeche",
                    "FP_Abgrabung",
                    "FP_AnpassungKlimawandel",
                    "FP_Aufschuettung",
                    "FP_AusgleichsFlaeche",
                    "FP_BebauungsFlaeche",
                    "FP_DarstellungNachLandesrecht",
                    "FP_FlaecheOhneDarstellung",
                    "FP_Gemeinbedarf",
                    "FP_GenerischesObjekt",
                    "FP_Gruen",
                    "FP_KeineZentrAbwasserBeseitigungFlaeche",
                    "FP_Kennzeichnung",
                    "FP_Landwirtschaft",
                    "FP_Nutzungsbeschraenkung",
                    "FP_PrivilegiertesVorhaben",
                    "FP_SchutzPflegeEntwicklung",
                    "FP_SpielSportanlage",
                    "FP_TextAbschnittFlaeche",
                    "FP_UnverbindlicheVormerkung",
                    "FP_VerEntsorgung",
                    "FP_VorbehalteFlaeche",
                    "FP_WaldFlaeche",
                    "FP_ZentralerVersorgungsbereich",
                    "LP_BiotopverbundBiotopvernetzung",
                    "LP_Eingriffsregelung",
                    "LP_GenerischesObjekt",
                    "LP_SchutzBestimmterTeileVonNaturUndLandschaft",
                    "LP_TextAbschnittObjekt",
                    "LP_ZieleErfordernisseMassnahmen",
                    "RP_Achse",
                    "RP_Bodenschutz",
                    "RP_Einzelhandel",
                    "RP_Energieversorgung",
                    "RP_Entsorgung",
                    "RP_Erholung",
                    "RP_ErneuerbareEnergie",
                    "RP_Forstwirtschaft",
                    "RP_Freiraum",
                    "RP_Funktionszuweisung",
                    "RP_GenerischesObjekt",
                    "RP_Gewaesser",
                    "RP_Grenze",
                    "RP_GruenzugGruenzaesur",
                    "RP_Hochwasserschutz",
                    "RP_IndustrieGewerbe",
                    "RP_Klimaschutz",
                    "RP_Kommunikation",
                    "RP_Kulturlandschaft",
                    "RP_LaermschutzBauschutz",
                    "RP_Landwirtschaft",
                    "RP_Luftverkehr",
                    "RP_NaturLandschaft",
                    "RP_NaturschutzrechtlichesSchutzgebiet",
                    "RP_Planungsraum",
                    "RP_RadwegWanderweg",
                    "RP_Raumkategorie",
                    "RP_Rohstoff",
                    "RP_Schienenverkehr",
                    "RP_Siedlung",
                    "RP_SonstVerkehr",
                    "RP_SonstigeInfrastruktur",
                    "RP_SonstigerFreiraumschutz",
                    "RP_SonstigerSiedlungsbereich",
                    "RP_SozialeInfrastruktur",
                    "RP_Sperrgebiet",
                    "RP_Sportanlage",
                    "RP_Strassenverkehr",
                    "RP_Verkehr",
                    "RP_Wasserschutz",
                    "RP_Wasserverkehr",
                    "RP_Wasserwirtschaft",
                    "RP_WohnenSiedlung",
                    "RP_ZentralerOrt",
                    "SO_Baubeschraenkung",
                    "SO_Bodenschutzrecht",
                    "SO_Denkmalschutzrecht",
                    "SO_Forstrecht",
                    "SO_Gebiet",
                    "SO_Gelaendemorphologie",
                    "SO_Gewaesser",
                    "SO_Grenze",
                    "SO_Linienobjekt",
                    "SO_Luftverkehrsrecht",
                    "SO_Objekt",
                    "SO_Schienenverkehrsrecht",
                    "SO_SchutzgebietWasserrecht",
                    "SO_Sichtflaeche",
                    "SO_SonstigesRecht",
                    "SO_Strassenverkehr",
                    "SO_TextAbschnittFlaeche",
                    "SO_Wasserrecht",
                    "SO_Wasserwirtschaft",
                ],
                "stereotype": "Association",
                "reverseProperty": "gehoertZuBereich",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    praesentationsobjekt: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf ein Präsentationsbereich, das zum Bereich gehört.",
            json_schema_extra={
                "typename": [
                    "XP_FPO",
                    "XP_LPO",
                    "XP_LTO",
                    "XP_Nutzungsschablone",
                    "XP_PPO",
                    "XP_PTO",
                    "XP_Praesentationsobjekt",
                ],
                "stereotype": "Association",
                "reverseProperty": "gehoertZuBereich",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aendertPlan: Annotated[
        list[XPVerbundenerPlan] | None,
        Field(
            description="Verweis auf einen anderen Plan, der durch den vorliegenden Planbereich geändert wird.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlan",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wurdeGeaendertVonPlan: Annotated[
        list[XPVerbundenerPlan] | None,
        Field(
            description="Verweis auf einen anderen Plan, durch den der vorliegende Planbereich geändert wurde.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlan",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aendertPlanBereich: Annotated[
        list[XPVerbundenerPlanBereich] | None,
        Field(
            description="Verweis auf einen Planbereich eines anderen Plans, der durch den vorliegenden Planbereich geändert wird.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlanBereich",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wurdeGeaendertVonPlanBereich: Annotated[
        list[XPVerbundenerPlanBereich] | None,
        Field(
            description="Verweis auf einen Planbereich eines anderen Plan, durch den der vorliegende Planbereich geändert wurde.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlanBereich",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    texte: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf einen textlich formulierten Planinhalt.",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class XPLTO(XPTPO):
    """
    Textförmiges Präsentationsobjekt mit linienförmiger Textgeometrie. Entspricht der ALKIS-Objektklasse AP_LTO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Line | definitions.MultiLine,
        Field(
            description="Linienführung des Textes",
            json_schema_extra={
                "typename": "XP_Liniengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class XPObjekt(BaseFeature):
    """
    Abstrakte Oberklasse für alle XPlanung-Fachobjekte. Die Attribute dieser Klasse werden über den Vererbungs-Mechanismus an alle Fachobjekte weitergegeben.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    uuid: Annotated[
        str | None,
        Field(
            description="Eindeutiger Identifier des Objektes.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    text: Annotated[
        str | None,
        Field(
            description="Beliebiger Text",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstand: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Angabe, ob der Planinhalt bereits besteht, geplant ist, oder zukünftig wegfallen soll. \r\nDas Attribut sollte nur verwendet werden, wenn es für die planerische Aussage notwendig ist. Eine generelle Belegung für jedes Objekt ist nicht hilfreich.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Geplant",
                        "alias": "Geplant",
                        "description": "Der Planinhalt bezieht sich auf eine Planung",
                    },
                    "2000": {
                        "name": "Bestehend",
                        "alias": "Bestehend",
                        "description": "Der Planinhalt stellt den aktuellen Zustand dar.",
                    },
                    "3000": {
                        "name": "Fortfallend",
                        "alias": "Fortfallend",
                        "description": "Der Planinhalt beschreibt einen zukünftig fortfallenden Zustand.",
                    },
                },
                "typename": "XP_Rechtsstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gesetzlicheGrundlage: Annotated[
        XPGesetzlicheGrundlage | None,
        Field(
            description="Angabe der gesetzlichen Grundlage des Planinhalts.",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gliederung1: Annotated[
        str | None,
        Field(
            description="Die „gliederung1“ beinhaltet bei einer Nummerierung der Baugebietsteilfläche oder Baufläche die Gliederungszahl, unter Umständen zusätzlich ein Kürzel für eingeschränkte Nutzungen, z.B. gliederung1=2 bei WA 2, gliederung1=-E 3 bei GE-E 3; bei einer überlagernde Festlegung beinhaltet „gliederung1“ ein Kürzel und eine Gliederungszahl, z.B. gliederung1 = AP 1 bei AP 1.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gliederung2: Annotated[
        str | None,
        Field(
            description="Die `gliederung2` kommt bei weitergehenden, besonderen Festsetzungen für Texteinschriebe mit Zahlen-, Buchstabencodes oder Paragrafenbezügen im Plan zum Einsatz. Beispiele: (A), (A, B, G) oder Zone 1.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ebene: Annotated[
        int | None,
        Field(
            description="Zuordnung des Objektes zu einer vertikalen Ebene. Der Standard-Ebene 0 sind Objekte auf der Erdoberfläche zugeordnet. Nur unter diesen Objekten wird der Flächenschluss hergestellt. Bei Plan-Objekten, die im wesentlichen unterhalb der Erdoberfläche liegen  (z.B. Tunnel), ist ebene < 0. Bei  Objekten, die im wesentlichen oberhalb der Erdoberfläche liegen (z.B. Festsetzungen auf Brücken), ist ebene > 0. Zwischen Objekten auf Ebene 0 und einer Ebene <> 0 muss nicht unbedingt eine (vollständige) physikalische Trennung bestehen.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = 0
    hatGenerAttribut: Annotated[
        list[
            XPDatumAttribut
            | XPDoubleAttribut
            | XPIntegerAttribut
            | XPStringAttribut
            | XPURLAttribut
        ]
        | None,
        Field(
            description="Erweiterung des definierten Attributsatzes eines Objektes durch generische Attribute.",
            json_schema_extra={
                "typename": [
                    "XP_DatumAttribut",
                    "XP_DoubleAttribut",
                    "XP_IntegerAttribut",
                    "XP_StringAttribut",
                    "XP_URLAttribut",
                ],
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    hoehenangabe: Annotated[
        list[XPHoehenangabe] | None,
        Field(
            description="Angaben zur vertikalen Lage und Höhe eines Planinhalts.",
            json_schema_extra={
                "typename": "XP_Hoehenangabe",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    externeReferenz: Annotated[
        list[XPSpezExterneReferenz] | None,
        Field(
            description="Referenz auf ein Dokument oder einen georeferenzierten Rasterplan.",
            json_schema_extra={
                "typename": "XP_SpezExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    gehoertZuBereich: Annotated[
        AnyUrl | UUID,
        Field(
            description="Verweis auf den Bereich, zu dem der Planinhalt gehört. Diese Relation sollte immer belegt werden. In Version 6.0 wird sie in eine Pflicht-Relation umgewandelt werden.",
            json_schema_extra={
                "typename": [
                    "BP_Bereich",
                    "FP_Bereich",
                    "LP_Bereich",
                    "RP_Bereich",
                    "SO_Bereich",
                ],
                "stereotype": "Association",
                "reverseProperty": "planinhalt",
                "sourceOrTarget": "source",
                "multiplicity": "1",
            },
        ),
    ]
    wirdDargestelltDurch: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Verweis auf ein Präsentationsobjekt, das die Plandarstellung des Fachobjektes unterstützen soll.",
            json_schema_extra={
                "typename": [
                    "XP_FPO",
                    "XP_LPO",
                    "XP_LTO",
                    "XP_Nutzungsschablone",
                    "XP_PPO",
                    "XP_PTO",
                    "XP_Praesentationsobjekt",
                ],
                "stereotype": "Association",
                "reverseProperty": "dientZurDarstellungVon",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    refBegruendungInhalt: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz eines raumbezogenen Fachobjektes auf Teile der Begründung.",
            json_schema_extra={
                "typename": "XP_BegruendungAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    startBedingung: Annotated[
        XPWirksamkeitBedingung | None,
        Field(
            description="Notwendige Bedingung für die Wirksamkeit eines Planinhalts.",
            json_schema_extra={
                "typename": "XP_WirksamkeitBedingung",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    endeBedingung: Annotated[
        XPWirksamkeitBedingung | None,
        Field(
            description="Notwendige Bedingung für das Ende der Wirksamkeit eines Planinhalts.",
            json_schema_extra={
                "typename": "XP_WirksamkeitBedingung",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufschrift: Annotated[
        str | None,
        Field(
            description="Spezifischer Text zur Beschriftung von Planinhalten",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtscharakter: Annotated[
        Literal[
            "1000",
            "2000",
            "3000",
            "4000",
            "4100",
            "4200",
            "4300",
            "4400",
            "4500",
            "4600",
            "4700",
            "5000",
            "5100",
            "5200",
            "5300",
            "6000",
            "7000",
            "8000",
            "9998",
            "9999",
        ],
        Field(
            description="Rechtliche Charakterisierung eines Planinhalts",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "FestsetzungBPlan",
                        "alias": "Festsetzung BPlan",
                        "description": "Festsetzung in einem Bebauungsplan",
                    },
                    "2000": {
                        "name": "NachrichtlicheUebernahme",
                        "alias": "Nachrichtliche Übernahme",
                        "description": "Nachrichtliche Übernahme aus anderen Planwerken.",
                    },
                    "3000": {
                        "name": "DarstellungFPlan",
                        "alias": "Darstellung FPlan",
                        "description": "Darstellung im Flächennutzungsplan",
                    },
                    "4000": {
                        "name": "ZielDerRaumordnung",
                        "alias": "Ziel der Raumordnung",
                        "description": "Ziel der Raumordnung. Verbindliche räumliche und sachliche Festlegung zur Entwicklung, Ordnung und Sicherung des Raumes.",
                    },
                    "4100": {
                        "name": "GrundsatzDerRaumordnung",
                        "alias": "Grundsatz der Raumordnung",
                        "description": "Grundsätze der Raumordnung sind nach §3 Abs. Aussagen zur Entwicklung, Ordnung und Sicherung des Raums als Vorgaben für nachfolgende Abwägungs- oder Ermessensentscheidungen. Grundsätze der Raumordnung können durch Gesetz oder Festlegungen in einem Raumordnungsplan (§7 Abs. 1 und 2, ROG) aufgestellt werden.",
                    },
                    "4200": {
                        "name": "NachrichtlicheUebernahmeZiel",
                        "alias": "Nachrichtliche Übernahme Ziel",
                        "description": "Nachrichtliche Übernahme Ziel der Raumordnung.",
                    },
                    "4300": {
                        "name": "NachrichtlicheUebernahmeGrundsatz",
                        "alias": "Nachrichtliche Übernahme Grundsatz",
                        "description": "Nachrichtliche Übernahme Grundsatz der Raumordnung.",
                    },
                    "4400": {
                        "name": "NurInformationsgehaltRPlan",
                        "alias": "Nur Informationsgehalt RPlan",
                        "description": "Nur Informationsgehalt im Raumordnungsplan.",
                    },
                    "4500": {
                        "name": "TextlichesZielRaumordnung",
                        "alias": "Textliches Ziel Raumordnung",
                        "description": "Textlich formuliertes Ziel der Raumordnung.",
                    },
                    "4600": {
                        "name": "ZielUndGrundsatzRaumordnung",
                        "alias": "Ziel und Grundsatz Raumordnung",
                        "description": "Ziel und Grundsatz der Raumordnung.",
                    },
                    "4700": {
                        "name": "VorschlagRaumordnung",
                        "alias": "Vorschlag Raumordnung",
                        "description": "Vorschlag für die Raumordnung",
                    },
                    "5000": {
                        "name": "FestsetzungImLP",
                        "alias": "Festsetzung im LP",
                        "description": "Festsetzung im Landschaftsplan bzw. Grünordnungsplan, der als eigenständige Satzung beschlossen wird (z.B. in NRW und den Stadtstaaten).",
                    },
                    "5100": {
                        "name": "GeplanteFestsetzungImLP",
                        "alias": "Geplante Festsetzung im LP",
                        "description": "Geplante Festsetzung im Landschaftsplan bzw. Grünordnungsplan, der als eigenständige Satzung beschlossen wird (z.B. in NRW und den Stadtstaaten)",
                    },
                    "5200": {
                        "name": "DarstellungKennzeichnungImLP",
                        "alias": "Darstellung oder Kennzeichnung im LP",
                        "description": "Darstellungen und Kennzeichnungen im Landschaftsplan",
                    },
                    "5300": {
                        "name": "LandschaftsplanungsInhaltZurBeruecksichtigung",
                        "alias": "Landschaftsplanungs-Inhalt zur Berücksichtigung",
                        "description": "Die Inhalte der Landschaftsplanung sind in allen Planungen und Verwaltungsverfahren zu berücksichtigen, deren Entscheidungen sich auf Natur und Landschaft auswirken können. (§ 9 Abs. 5 i.V. Abs. 1 BNatSchG).",
                    },
                    "6000": {
                        "name": "Hinweis",
                        "alias": "Hinweis",
                        "description": "Hinweis nach BauGB",
                    },
                    "7000": {
                        "name": "Kennzeichnung",
                        "alias": "Kennzeichnung",
                        "description": "Kennzeichnung von Flächen nach §9 Absatz 5 BauGB. Kennzeichnungen sind keine rechtsverbindlichen Festsetzungen, sondern Hinweise auf Besonderheiten (insbesondere der Baugrundverhältnisse), deren Kenntnis für das Verständnis des Bebauungsplans und seiner Festsetzungen wie auch für die Vorbereitung und Genehmigung von Vorhaben notwendig sind.",
                    },
                    "8000": {
                        "name": "Vermerk",
                        "alias": "Vermerk",
                        "description": "Vermerk nach § 5 BauGB",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannter Rechtscharakter",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Rechtscharakter",
                    },
                },
                "typename": "XP_Rechtscharakter",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    refTextInhalt: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz eines raumbezogenen Fachobjektes auf textuell formulierte Planinhalte.",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class XPPTO(XPTPO):
    """
    Textförmiges Präsentationsobjekt mit punktförmiger Festlegung der Textposition. Entspricht der ALKIS-Objektklasse AP_PTO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point | definitions.MultiPoint,
        Field(
            description="Position des Textes",
            json_schema_extra={
                "typename": "XP_Punktgeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    drehwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Winkel um den der Text oder die Signatur mit punktförmiger Bezugsgeometrie aus der Horizontalen gedreht ist, Angabe in Grad. Zählweise im mathematisch positiven Sinn (von Ost über Nord nach West und Süd).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class XPPlan(BaseFeature):
    """
    Abstrakte Oberklasse für alle Klassen raumbezogener Pläne.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    id: str | None = None
    name: Annotated[
        str,
        Field(
            description="Name des Plans.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    nummer: Annotated[
        str | None,
        Field(
            description="Nummer des Plans.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    internalId: Annotated[
        str | None,
        Field(
            description="Interner Identifikator des Plans.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    beschreibung: Annotated[
        str | None,
        Field(
            description="Kommentierende Beschreibung des Plans.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    kommentar: Annotated[
        str | None,
        Field(
            description="Beliebiger Kommentar zum Plan.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    technHerstellDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, an dem der Plan technisch ausgefertigt wurde.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    genehmigungsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der Genehmigung des Plans",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    untergangsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, an dem der Plan (z.B. durch Ratsbeschluss oder Gerichtsurteil) aufgehoben oder für nichtig erklärt wurde.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aendertPlan: Annotated[
        list[XPVerbundenerPlan] | None,
        Field(
            description="Verweis auf einen anderen Plan, der durch den vorliegenden Plan geändert wird.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlan",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wurdeGeaendertVonPlan: Annotated[
        list[XPVerbundenerPlan] | None,
        Field(
            description="Verweis auf einen anderen Plan, durch den der vorliegende Plan geändert wurde.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlan",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aendertPlanBereich: Annotated[
        list[XPVerbundenerPlanBereich] | None,
        Field(
            description="Verweis auf einen Planbereich eines anderen Plans, der durch den vorliegenden Plan geändert wird.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlanBereich",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wurdeGeaendertVonPlanBereich: Annotated[
        list[XPVerbundenerPlanBereich] | None,
        Field(
            description="Verweis auf einen Planbereich eines anderen Plan, durch den der vorliegende Plan geändert wurde.\r\n\r\nDies Konzept befindet sich noch in der Erprobung. Es wird in nachfolgenden Versionen des Standards voraussichtlich geändert oder erweitert.",
            json_schema_extra={
                "typename": "XP_VerbundenerPlanBereich",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    erstellungsMassstab: Annotated[
        int | None,
        Field(
            description="Der bei der Erstellung des Plans benutzte Kartenmaßstab.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bezugshoehe: Annotated[
        definitions.Length | None,
        Field(
            description="Standard Bezugshöhe (absolut NhN) für relative Höhenangaben von Planinhalten.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    hoehenbezug: Annotated[
        str | None,
        Field(
            description="Bei Höhenangaben im Plan standardmäßig verwendeter Höhenbezug (z.B. Höhe über NN).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    technischerPlanersteller: Annotated[
        str | None,
        Field(
            description="Bezeichnung der Institution oder Firma, die den Plan technisch erstellt hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    raeumlicherGeltungsbereich: Annotated[
        definitions.Polygon | definitions.MultiPolygon,
        Field(
            description="Grenze des räumlichen Geltungsbereiches des Plans.",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    verfahrensMerkmale: Annotated[
        list[XPVerfahrensMerkmal] | None,
        Field(
            description="Vermerke der am Planungsverfahren beteiligten Akteure.",
            json_schema_extra={
                "typename": "XP_VerfahrensMerkmal",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    hatGenerAttribut: Annotated[
        list[
            XPDatumAttribut
            | XPDoubleAttribut
            | XPIntegerAttribut
            | XPStringAttribut
            | XPURLAttribut
        ]
        | None,
        Field(
            description="Erweiterung der vorgegebenen Attribute durch generische Attribute.",
            json_schema_extra={
                "typename": [
                    "XP_DatumAttribut",
                    "XP_DoubleAttribut",
                    "XP_IntegerAttribut",
                    "XP_StringAttribut",
                    "XP_URLAttribut",
                ],
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    externeReferenz: Annotated[
        list[XPSpezExterneReferenz] | None,
        Field(
            description="Referenz auf ein Dokument, einen Datenbankeintrag oder einen georeferenzierten Rasterplan.",
            json_schema_extra={
                "typename": "XP_SpezExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    texte: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf einen textlich formulierten Planinhalt.",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    begruendungsTexte: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf einen Abschnitt der Begründung. Diese Relation darf nicht verwendet werden, wenn die Begründung als Gesamt-Dokument referiert werden soll. In diesem Fall sollte über das Attribut externeReferenz eine Objekt XP_SpezExterneReferent mit typ=1010 (Begruendung) verwendet werden.",
            json_schema_extra={
                "typename": "XP_BegruendungAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPBereich(XPBereich):
    """
    Diese Klasse modelliert einen Bereich eines Bebauungsplans, z.B. einen räumlichen oder sachlichen Teilbereich.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    verfahren: Annotated[
        Literal["1000", "2000", "3000", "4000"] | None,
        Field(
            description="Verfahrensart der BPlan-Aufstellung oder -Änderung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Normal",
                        "alias": "Normal",
                        "description": "Normales BPlan Verfahren.",
                    },
                    "2000": {
                        "name": "Parag13",
                        "alias": "Paragraph 13",
                        "description": "BPlan Verfahren nach Paragraph 13 BauGB.",
                    },
                    "3000": {
                        "name": "Parag13a",
                        "alias": "Paragraph 13a",
                        "description": "BPlan Verfahren nach Paragraph 13a BauGB.",
                    },
                    "4000": {
                        "name": "Parag13b",
                        "alias": "Paragraph 13b",
                        "description": "BPlan Verfahren nach Paragraph 13b BauGB.",
                    },
                },
                "typename": "BP_Verfahren",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gehoertZuPlan: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz eines Bereichs eines Bebauungsplans auf das zugehörige Plan-Objekt.",
            json_schema_extra={
                "typename": "BP_Plan",
                "stereotype": "Association",
                "reverseProperty": "bereich",
                "sourceOrTarget": "source",
                "multiplicity": "1",
            },
        ),
    ]


class BPObjekt(XPObjekt):
    """
    Basisklasse für alle raumbezogenen Festsetzungen,  Hinweise, Vermerke und Kennzeichnungen eines Bebauungsplans.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    wirdAusgeglichenDurchFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf Ausgleichsfläche, die den Eingriff ausgleicht.",
            json_schema_extra={
                "typename": "BP_AusgleichsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchABE: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Anpflanzungs-, Bindungs- oder Erhaltungsmaßnahme, durch die ein Eingriff ausgeglichen wird.",
            json_schema_extra={
                "typename": "BP_AnpflanzungBindungErhaltung",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchSPEMassnahme: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-, Pflege- oder Entwicklungsmaßnahme, durch die ein Eingriff ausgeglichen wird.",
            json_schema_extra={
                "typename": "BP_SchutzPflegeEntwicklungsMassnahme",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchSPEFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-, Pflege- oder Entwicklungs-Fläche, die den Eingriff ausgleicht.",
            json_schema_extra={
                "typename": "BP_SchutzPflegeEntwicklungsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchMassnahme: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Verweis auf eine  Ausgleichsmaßnahme, die einen vorgenommenen Eingriff ausgleicht.",
            json_schema_extra={
                "typename": "BP_AusgleichsMassnahme",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    laermkontingent: Annotated[
        BPEmissionskontingentLaerm | None,
        Field(
            description="Festsetzung eines Lärmemissionskontingent",
            json_schema_extra={
                "typename": "BP_EmissionskontingentLaerm",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    laermkontingentGebiet: Annotated[
        list[BPEmissionskontingentLaermGebiet] | None,
        Field(
            description="Festsetzung von Lärmemissionskontingenten nach DIN 45691, die einzelnen Immissionsgebieten zugeordnet sind",
            json_schema_extra={
                "typename": "BP_EmissionskontingentLaermGebiet",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zusatzkontingent: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Festsetzung von Zusatzkontingenten für die Lärmemission, die einzelnen Richtungssektoren zugeordnet sind. Die einzelnen Richtungssektoren werden parametrisch definiert.",
            json_schema_extra={
                "typename": "BP_ZusatzkontingentLaerm",
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zusatzkontingentFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Festsetzung von Zusatzkontingenten für die Lärmemission, die einzelnen Richtungssektoren zugeordnet sind. Die einzelnen Richtungssektoren werden durch explizite Flächen definiert.",
            json_schema_extra={
                "typename": "BP_ZusatzkontingentLaermFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    richtungssektorGrenze: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Zuordnung einer Richtungssektor-Grenze für die Festlegung zusätzlicher Lärmkontingente",
            json_schema_extra={
                "typename": "BP_RichtungssektorGrenze",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPPlan(XPPlan):
    """
    Die Klasse modelliert einen Bebauungsplan
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gemeinde: Annotated[
        list[XPGemeinde],
        Field(
            description="Die für den Plan zuständige Gemeinde.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    planaufstellendeGemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Die für die ursprüngliche Planaufstellung zuständige Gemeinde, falls diese nicht unter dem Attribut gemeinde aufgeführt ist. Dies kann z.B. nach Gemeindefusionen der Fall sein.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    plangeber: Annotated[
        XPPlangeber | None,
        Field(
            description="Für den Plan verantwortliche Stelle.",
            json_schema_extra={
                "typename": "XP_Plangeber",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planArt: Annotated[
        list[
            Literal[
                "1000",
                "10000",
                "10001",
                "10002",
                "3000",
                "3100",
                "4000",
                "40000",
                "40001",
                "40002",
                "5000",
                "7000",
                "9999",
            ]
        ],
        Field(
            description="Typ des vorliegenden Bebauungsplans.",
            json_schema_extra={
                "typename": "BP_PlanArt",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "BPlan",
                        "alias": "BPlan",
                        "description": "Planwerk der verbindlichen Bauleitplanung auf kommunaler Ebene",
                    },
                    "10000": {
                        "name": "EinfacherBPlan",
                        "alias": "Einfacher BPlan",
                        "description": "Einfacher BPlan, §30 Abs. 3 BauGB.",
                    },
                    "10001": {
                        "name": "QualifizierterBPlan",
                        "alias": "Qualifizierter BPlan",
                        "description": "Qualifizierter BPlan nach §30 Abs. 1 BauGB.",
                    },
                    "10002": {
                        "name": "BebauungsplanZurWohnraumversorgung",
                        "alias": "Bebauungsplan zur Wohnraumversorgung",
                        "description": "Bebauungsplan zur Wohnraumversorgung für im Zusammenhang bebaute Ortsteile (§ 34) nach §9 Absatz 2d BauGB",
                    },
                    "3000": {
                        "name": "VorhabenbezogenerBPlan",
                        "alias": "Vorhabenbezogener BPlan",
                        "description": "Vorhabenbezogener Bebauungsplan nach §12 BauGB",
                    },
                    "3100": {
                        "name": "VorhabenUndErschliessungsplan",
                        "alias": "Vorhaben- und Erschließungsplan",
                        "description": "Satzung über Vorhaben- und Erschließungsplan gemäß §7 Maßnahmengesetz (BauGB-MaßnahmenG) von 1993",
                    },
                    "4000": {
                        "name": "InnenbereichsSatzung",
                        "alias": "Innenbereichs-Satzung",
                        "description": "Kommunale Satzung gemäß §34 BauGB",
                    },
                    "40000": {
                        "name": "KlarstellungsSatzung",
                        "alias": "Klarstellungs-Satzung",
                        "description": "Klarstellungssatzung nach  § 34 Abs.4 Nr.1 BauGB.",
                    },
                    "40001": {
                        "name": "EntwicklungsSatzung",
                        "alias": "Entwicklungs-Satzung",
                        "description": "Entwicklungssatzung nach  § 34 Abs.4 Nr. 2 BauGB.",
                    },
                    "40002": {
                        "name": "ErgaenzungsSatzung",
                        "alias": "Ergänzungs-Satzung",
                        "description": "Ergänzungssatzung nach  § 34 Abs.4 Nr. 3 BauGB.",
                    },
                    "5000": {
                        "name": "AussenbereichsSatzung",
                        "alias": "Außenbereichs-Satzung",
                        "description": "Außenbereichssatzung nach § 35 Abs. 6 BauGB.",
                    },
                    "7000": {
                        "name": "OertlicheBauvorschrift",
                        "alias": "Örtliche Bauvorschrift",
                        "description": "Örtliche Bauvorschrift.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Planart.",
                    },
                },
            },
            min_length=1,
        ),
    ]
    sonstPlanArt: Annotated[
        AnyUrl | None,
        Field(
            description='Über eine Codeliste spezifizierte  "Sonstige Planart", wenn das Attribut "planArt" den Wert 9999 (Sonstiges) hat.',
            json_schema_extra={
                "typename": "BP_SonstPlanArt",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstand: Annotated[
        Literal[
            "1000",
            "2000",
            "2100",
            "2200",
            "2250",
            "2300",
            "2400",
            "3000",
            "4000",
            "4500",
            "45000",
            "45001",
            "5000",
            "50000",
            "50001",
        ]
        | None,
        Field(
            description="Aktueller Rechtsstand des Plans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aufstellungsbeschluss",
                        "alias": "Aufstellungsbeschluss",
                        "description": "Ein Aufstellungsbeschluss der Gemeinde liegt vor.",
                    },
                    "2000": {
                        "name": "ImVerfahren",
                        "alias": "Im Verfahren",
                        "description": "Der Plan ist im Verfahren",
                    },
                    "2100": {
                        "name": "FruehzeitigeBehoerdenBeteiligung",
                        "alias": "Frühzeitige Behördenbeteiligung",
                        "description": "Die frühzeitige Beteiligung der Behörden (§4 Abs. 1 BauGB) wird durchgeführt.",
                    },
                    "2200": {
                        "name": "FruehzeitigeOeffentlichkeitsBeteiligung",
                        "alias": "Frühzeitige Öffentlichkeitsbeteiligung",
                        "description": "Die frühzeitige Beteiligung der Öffentlichkeit (§3 Abs. 1 BauGB), bzw. bei einem Verfahren nach  §13a BauGB die Unterrichtung der Öffentlichkeit (§13a Abs. 3 BauGB)  wird durchgeführt.",
                    },
                    "2250": {
                        "name": "Entwurfsbeschluss",
                        "alias": "Entwurfsbeschluss",
                        "description": "Ein Entwurfsbeschluss liegt vor",
                    },
                    "2300": {
                        "name": "BehoerdenBeteiligung",
                        "alias": "Behördenbeteiligung",
                        "description": "Die Beteiligung der Behörden wird durchgeführt  (§4 Abs. 2 BauGB).",
                    },
                    "2400": {
                        "name": "OeffentlicheAuslegung",
                        "alias": "Öffentliche Auslegung",
                        "description": "Der Plan wird öffentlich ausgelegt (§3 Abs. 2 BauGB).",
                    },
                    "3000": {
                        "name": "Satzung",
                        "alias": "Satzung",
                        "description": "Die Satzung wurde durch Beschluss der Gemeinde verabschiedet.",
                    },
                    "4000": {
                        "name": "InKraftGetreten",
                        "alias": "In Kraft getreten",
                        "description": "Der Plan ist in Kraft getreten.",
                    },
                    "4500": {
                        "name": "TeilweiseUntergegangen",
                        "alias": "Teilweise untergegangen",
                        "description": "Der Plan ist, z. B. durch einen Gerichtsbeschluss oder neuen Plan, teilweise untergegangen.",
                    },
                    "45000": {
                        "name": "TeilweiseAufgehoben",
                        "alias": "Teilweise aufgehoben",
                        "description": "Der Plan wurde durch ein förmliches Verfahren teilweise aufgehoben",
                    },
                    "45001": {
                        "name": "TeilweiseAusserKraft",
                        "alias": "Teilweise außer Kraft",
                        "description": "Der Plan ist ohne förmliches Verfahren, z.B. durch Überplanung, teilweise außer Kraft getreten",
                    },
                    "5000": {
                        "name": "Untergegangen",
                        "alias": "Untergegangen",
                        "description": "Der Plan wurde außer Kraft gesetzt.",
                    },
                    "50000": {
                        "name": "Aufgehoben",
                        "alias": "Aufgehoben",
                        "description": "Der Plan wurde durch ein förmliches Verfahren aufgehoben.",
                    },
                    "50001": {
                        "name": "AusserKraft",
                        "alias": "Außer Kraft",
                        "description": "Der Plan ist ohne förmliches Verfahren, z.B. durch Überplanung, außer Kraft getreten",
                    },
                },
                "typename": "BP_Rechtsstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    status: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierter aktueller Status des Plans.",
            json_schema_extra={
                "typename": "BP_Status",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aenderungenBisDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der berücksichtigten Plan-Änderungen.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufstellungsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Aufstellungsbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    veraenderungssperre: Annotated[
        BPVeraenderungssperreDaten | None,
        Field(
            description="Spezifiziert die Daten einer Veränderungssperre, die für den gesamten Geltungsbereich des Plans gilt.",
            json_schema_extra={
                "typename": "BP_VeraenderungssperreDaten",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    auslegungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum des Auslegungs-Zeitraums. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    auslegungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum des Auslegungs-Zeitraums. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    satzungsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Satzungsbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsverordnungsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der Rechtsverordnung.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    inkrafttretensDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Inkrafttretens.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ausfertigungsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der Ausfertigung.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    staedtebaulicherVertrag: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob es zum Plan einen städtebaulichen Vertrag gibt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    erschliessungsVertrag: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob es für den Plan einen Erschließungsvertrag gibt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    durchfuehrungsVertrag: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob für das Planungsgebiet einen Durchführungsvertrag (Kombination aus Städtebaulichen Vertrag und Erschließungsvertrag) gibt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    gruenordnungsplan: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob für den Plan ein zugehöriger Grünordnungsplan existiert.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    versionBauNVO: Annotated[
        XPGesetzlicheGrundlage | None,
        Field(
            description="Spezifikation der dem Gesamtplan zugrunde liegenden Version der BauNVO",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBauGB: Annotated[
        XPGesetzlicheGrundlage | None,
        Field(
            description="Spezifikation der dem Gesamtplan zugrunde liegenden Version des BauGB",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionSonstRechtsgrundlage: Annotated[
        list[XPGesetzlicheGrundlage] | None,
        Field(
            description="Spezifikation sonstiger Rechtsgrundlagen des gesamten Plans",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    bereich: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz eines Bebauungsplans auf einen Bereich",
            json_schema_extra={
                "typename": "BP_Bereich",
                "stereotype": "Association",
                "reverseProperty": "gehoertZuPlan",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPPunktobjekt(BPObjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit punktförmigem Raumbezug (Einzelpunkt oder Punktmenge).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point | definitions.MultiPoint,
        Field(
            description="Punktförmiger Raumbezug (Einzelpunkt oder Punktmenge).",
            json_schema_extra={
                "typename": "XP_Punktgeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Punktobjektes als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class BPZusatzkontingentLaerm(BPPunktobjekt):
    """
    Parametrische Spezifikation von zusätzlichen Lärmemissionskontingenten für einzelne Richtungssektoren (DIN 45691, Anhang 2).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bezeichnung: Annotated[
        str | None,
        Field(
            description="Bezeichnung des Kontingentes",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    richtungssektor: Annotated[
        list[BPRichtungssektor] | None,
        Field(
            description="Spezifikation der Richtungssektoren",
            json_schema_extra={
                "typename": "BP_Richtungssektor",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class FPBereich(XPBereich):
    """
    Diese Klasse modelliert einen Bereich eines Flächennutzungsplans.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gehoertZuPlan: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf den Flächennutzungsplan, zu dem das Bereichsobjekt gehört.",
            json_schema_extra={
                "typename": "FP_Plan",
                "stereotype": "Association",
                "reverseProperty": "bereich",
                "sourceOrTarget": "target",
                "multiplicity": "1",
            },
        ),
    ]


class FPObjekt(XPObjekt):
    """
    Basisklasse für alle Fachobjekte des Flächennutzungsplans.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    spezifischePraegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte spezifische bauliche Prägung einer Darstellung.",
            json_schema_extra={
                "typename": "FP_SpezifischePraegungTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vonGenehmigungAusgenommen: Annotated[
        bool | None,
        Field(
            description="Angabe, ob Teile des Flächennutzungsplans nach §6 Abs. 3 BauGB von der Genehmigung ausgenommen sind",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    wirdAusgeglichenDurchFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Ausgleichsfläche, die den Eingriff ausgleicht.",
            json_schema_extra={
                "typename": "FP_AusgleichsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchSPE: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-,Pflege- oder Entwicklungsmaßnahme, die den Eingriff ausgleicht.",
            json_schema_extra={
                "typename": "FP_SchutzPflegeEntwicklung",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class FPPlan(XPPlan):
    """
    Klasse zur Modellierung eines gesamten Flächennutzungsplans.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gemeinde: Annotated[
        list[XPGemeinde],
        Field(
            description="Zuständige Gemeinde",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    planaufstellendeGemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Die für die ursprüngliche Planaufstellung zuständige Gemeinde, falls diese nicht unter dem Attribut gemeinde aufgeführt ist. Dies kann z.B. nach Gemeindefusionen der Fall sein.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    plangeber: Annotated[
        XPPlangeber | None,
        Field(
            description="Für die Planung zuständige Institution",
            json_schema_extra={
                "typename": "XP_Plangeber",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "9999"],
        Field(
            description="Typ des FPlans",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "FPlan",
                        "alias": "FPlan",
                        "description": "Flächennutzungsplan nach § 5 BauGB.",
                    },
                    "2000": {
                        "name": "GemeinsamerFPlan",
                        "alias": "Gemeinsamer FPlan",
                        "description": "Gemeinsamer Flächennutzungsplan nach § 204 BauGB",
                    },
                    "3000": {
                        "name": "RegFPlan",
                        "alias": "Regionaler FPlan",
                        "description": "Regionaler Flächennutzungsplan, der zugleich die Funktion eines Regionalplans als auch eines gemeinsamen Flächennutzungsplans nach § 204 BauGB erfüllt",
                    },
                    "4000": {
                        "name": "FPlanRegPlan",
                        "alias": "FPlan und Regionalplan",
                        "description": "Flächennutzungsplan mit regionalplanerischen Festlegungen (nur in HH, HB, B).",
                    },
                    "5000": {
                        "name": "SachlicherTeilplan",
                        "alias": "Sachlicher Teilplan",
                        "description": "Sachlicher Teilflächennutzungsplan nach §5 Abs. 2b BauGB.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Flächennutzungsplan",
                    },
                },
                "typename": "FP_PlanArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    sonstPlanArt: Annotated[
        AnyUrl | None,
        Field(
            description='Sonstiger Typ des FPlans bei "planArt" == 9999.',
            json_schema_extra={
                "typename": "FP_SonstPlanArt",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sachgebiet: Annotated[
        str | None,
        Field(
            description="Sachgebiet eines Teilflächennutzungsplans.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    verfahren: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Verfahren nach dem ein FPlan aufgestellt oder geändert wird.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Normal",
                        "alias": "Normal",
                        "description": "Normales FPlan Verfahren.",
                    },
                    "2000": {
                        "name": "Parag13",
                        "alias": "Paragraph 13",
                        "description": "FPlan Verfahren nach Parag 13 BauGB.",
                    },
                },
                "typename": "FP_Verfahren",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstand: Annotated[
        Literal[
            "1000",
            "2000",
            "2100",
            "2200",
            "2250",
            "2300",
            "2400",
            "3000",
            "4000",
            "5000",
            "50000",
            "50001",
        ]
        | None,
        Field(
            description="Aktueller Rechtsstand des Plans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aufstellungsbeschluss",
                        "alias": "Aufstellungsbeschluss",
                        "description": "Der Aufstellungsbeschluss liegt vor.",
                    },
                    "2000": {
                        "name": "ImVerfahren",
                        "alias": "Im Verfahren",
                        "description": "Der Plan ist in Verfahren",
                    },
                    "2100": {
                        "name": "FruehzeitigeBehoerdenBeteiligung",
                        "alias": "Frühzeitige Behördenbeteiligung",
                        "description": "Die frühzeitige Beteiligung der Behörden ( §4 Abs. 1 BauGB) wird durchgeführt.",
                    },
                    "2200": {
                        "name": "FruehzeitigeOeffentlichkeitsBeteiligung",
                        "alias": "Frühzeitige Öffentlichkeitsbeteiligung",
                        "description": "Die frühzeitige Beteiligung der Öffentlichkeit (§3 Abs. 1 BauGB) wird durchgeführt.",
                    },
                    "2250": {
                        "name": "Entwurfsbeschluss",
                        "alias": "Entwurfsbeschluss",
                        "description": "Ein Entwurfsbeschluss liegt vor",
                    },
                    "2300": {
                        "name": "BehoerdenBeteiligung",
                        "alias": "Behördenbeteiligung",
                        "description": "Die Beteiligung der Behörden wird durchgeführt  (§4 Abs. 2 BauGB).",
                    },
                    "2400": {
                        "name": "OeffentlicheAuslegung",
                        "alias": "Öffentliche Auslegung",
                        "description": "Der Plan wird öffentlich ausgelegt ( §3 Abs. 2 BauGB).",
                    },
                    "3000": {
                        "name": "Plan",
                        "alias": "Plan",
                        "description": "Der Plan ist technisch erstellt worden.",
                    },
                    "4000": {
                        "name": "Wirksamkeit",
                        "alias": "Wirksamkeit",
                        "description": "Der Plan ist rechtswirksam.",
                    },
                    "5000": {
                        "name": "Untergegangen",
                        "alias": "Untergegangen",
                        "description": "Der Plan wurde außer Kraft gesetzt",
                    },
                    "50000": {
                        "name": "Aufgehoben",
                        "alias": "Aufgehoben",
                        "description": "Der Plan wurde durch ein förmliches Verfahren aufgehoben",
                    },
                    "50001": {
                        "name": "AusserKraft",
                        "alias": "Außer Kraft",
                        "description": "Der Plan ist ohne förmliches Verfahren z.B. durch Überplanung außer Kraft getreten",
                    },
                },
                "typename": "FP_Rechtsstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    status: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierter Status des Plans.",
            json_schema_extra={
                "typename": "FP_Status",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufstellungsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Plan-Aufstellungsbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    auslegungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    auslegungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung  können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aenderungenBisDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, bis zu dem Änderungen des Plans berücksichtigt wurden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    entwurfsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Entwurfsbeschlusses",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Planbeschlusses",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    wirksamkeitsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der Wirksamkeit",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBauNVO: Annotated[
        XPGesetzlicheGrundlage | None,
        Field(
            description="Spezifikation der dem Gesamtplan zugrunde liegenden Version der BauNVO",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBauGB: Annotated[
        XPGesetzlicheGrundlage | None,
        Field(
            description="Spezifikation der dem Gesamtplan zugrunde liegenden Version des BauGB",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionSonstRechtsgrundlage: Annotated[
        list[XPGesetzlicheGrundlage] | None,
        Field(
            description="Spezifikation sonstiger Rechtsgrundlagen des Gesamtplans",
            json_schema_extra={
                "typename": "XP_GesetzlicheGrundlage",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    bereich: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf einen Bereich des Flächennutzungsplans",
            json_schema_extra={
                "typename": "FP_Bereich",
                "stereotype": "Association",
                "reverseProperty": "gehoertZuPlan",
                "sourceOrTarget": "source",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class FPPunktobjekt(FPObjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit punktförmigem Raumbezug (Einzelpunkt oder Punktmenge).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point | definitions.MultiPoint,
        Field(
            description="Punktförmiger Raumbezug (Einzelpunkt oder Punktmenge).",
            json_schema_extra={
                "typename": "XP_Punktgeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Punktobjektes als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class LPBereich(XPBereich):
    """
    Die Klasse modelliert einen Planbereich mit landschaftsplanerischen Darstellungen bzw. Festsetzungen sowie gutachterliche Aussagen der Landschaftsplanung.
    LP_Bereich kann z.B. ein eigenes Kartenblatt, einen Teilplan, eine Detail- oder Übersichtskarte darstellen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gehoertZuPlan: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf den Landschaftsplan, zu dem der Bereich gehört.",
            json_schema_extra={
                "typename": "LP_Plan",
                "stereotype": "Association",
                "reverseProperty": "bereich",
                "sourceOrTarget": "source",
                "multiplicity": "1",
            },
        ),
    ]


class LPObjekt(XPObjekt):
    """
    Basisklasse für alle spezifischen Inhalte eines Landschaftsplans.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    raumkonkretisierung: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "9998"],
        Field(
            description="Beschreibung der räumlichen Schärfe des geometrischen Objekts, d.h. wie konkret die Geometrie in Attribut position die tatsächliche räumliche Gestalt des Planinhalts darstellt.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Scharf",
                        "alias": "Scharf",
                        "description": "Scharf abgegrenzte Fläche bzw. eine im Erfassungsmaßstab des Plans sinnvollerweise als Linien- oder Punktobjekt erfassbare scharfe Geometrie.",
                    },
                    "2000": {
                        "name": "Suchraum",
                        "alias": "Suchraum",
                        "description": "Suchraum (die Maßnahme/Planung bzw. bezieht sich auf Teilbereiche innerhalb der Gesamtfläche)",
                    },
                    "3000": {
                        "name": "Unscharf",
                        "alias": "Unscharf",
                        "description": "Fließende Grenzen, mit Übergangsbereichen.",
                    },
                    "4000": {
                        "name": "Position",
                        "alias": "Position",
                        "description": "Markierung durch eine vereinfachte Geometrie ohne konkrete Festlegung der tatsächlichen räumlichen Ausdehnung; meist als Geometrietyp Punkt oder Linie); für diese Stelle liegt eine Information vor, die genaue räumliche Ausdehnung über diese Geometrie hinaus ist unklar.",
                    },
                    "5000": {
                        "name": "Raumunkonkret",
                        "alias": "Raumunkonkret",
                        "description": "Raumunkonkret (keine räumlich belastbaren oder nur textliche Informationen zum gemeinten Raum, z.B. „naturfern verbaute Teilabschnitte der Bäche und Fließgewässer im Plangebiet“); möglicherweise  ganz ohne Darstellung in der Planzeichnung.",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannt (keine Einordnung möglich, z.B. zur Übernahme von Alt-Plänen, in denen der Grad der Raumkonkretisierung erkennbar / nicht mehr recherchierbar ist.)",
                    },
                },
                "typename": "LP_Raumkonkretisierung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    rechtsCharText: Annotated[
        str | None,
        Field(
            description="Textliche Konkretisierung der rechtlichen Charakterisierung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vorschlagIntegrationBLP: Annotated[
        list[LPVorschlagIntegrationBauleitplanung] | None,
        Field(
            description="Verweis auf ein Objekt im Modellbereich Bauleitplanung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in den FNP/Bebauungsplan vorgeschlagen wird. Referenziert ein Objekt mit Angabe der Begründung.",
            json_schema_extra={
                "typename": "LP_VorschlagIntegrationBauleitplanung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    vorschlagIntegrationRO: Annotated[
        list[LPVorschlagIntegrationRaumordnung] | None,
        Field(
            description="Verweis auf ein Objekt im Modellbereich Raumordnung, das von der Landschaftsplanung als Kopiervorlage zur Übernahme in den Raumordnungsplan vorgeschlagen wird. Referenziert ein Objekt mit Angabe der Begründung.",
            json_schema_extra={
                "typename": "LP_VorschlagIntegrationRaumordnung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    referenziertLPObjekt: Annotated[
        list[LPReferenzLPObjekt] | None,
        Field(
            description="Angaben zu einem anderen LP-Planinhalt, der mit diesem LP-Objekt in Verbindung steht.",
            json_schema_extra={
                "typename": "LP_ReferenzLPObjekt",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdReferenziertVon: Annotated[
        list[LPReferenzLPObjekt] | None,
        Field(
            description="Rückwärtsreferenz zu einem LP- Objekt, das dieses LP-Objekt referenziert.",
            json_schema_extra={
                "typename": "LP_ReferenzLPObjekt",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class LPPlan(XPPlan):
    """
    Die Klasse modelliert ein Planwerk mit landschaftsplanerischen gutachterlichen Aussagen, Darstellungen bzw. Festsetzungen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bundesland: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "1700",
            "1800",
            "1900",
            "2000",
            "2100",
            "2200",
            "2300",
            "2400",
            "2500",
            "3000",
        ],
        Field(
            description="Zuständiges Bundesland",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "BB",
                        "alias": "Brandenburg",
                        "description": "Brandenburg",
                    },
                    "1100": {"name": "BE", "alias": "Berlin", "description": "Berlin"},
                    "1200": {
                        "name": "BW",
                        "alias": "Baden-Württemberg",
                        "description": "Baden-Württemberg",
                    },
                    "1300": {"name": "BY", "alias": "Bayern", "description": "Bayern"},
                    "1400": {
                        "name": "HB",
                        "alias": "Hansestadt Bremen",
                        "description": "Bremen",
                    },
                    "1500": {"name": "HE", "alias": "Hessen", "description": "Hessen"},
                    "1600": {
                        "name": "HH",
                        "alias": "Hansestadt Hamburg",
                        "description": "Hamburg",
                    },
                    "1700": {
                        "name": "MV",
                        "alias": "Mecklenburg-Vorpommern",
                        "description": "Mecklenburg-Vorpommern",
                    },
                    "1800": {
                        "name": "NI",
                        "alias": "Niedersachsen",
                        "description": "Niedersachsen",
                    },
                    "1900": {
                        "name": "NW",
                        "alias": "Nordrhein-Westfalen",
                        "description": "Nordrhein-Westfalen",
                    },
                    "2000": {
                        "name": "RP",
                        "alias": "Rheinland-Pfalz",
                        "description": "Rheinland-Pfalz",
                    },
                    "2100": {
                        "name": "SH",
                        "alias": "Schleswig-Holstein",
                        "description": "Schleswig-Holstein",
                    },
                    "2200": {
                        "name": "SL",
                        "alias": "Saarland",
                        "description": "Saarland",
                    },
                    "2300": {
                        "name": "SN",
                        "alias": "Sachsen",
                        "description": "Sachsen",
                    },
                    "2400": {
                        "name": "ST",
                        "alias": "Sachsen-Anhalt",
                        "description": "Sachsen-Anhalt",
                    },
                    "2500": {
                        "name": "TH",
                        "alias": "Thüringen",
                        "description": "Thüringen",
                    },
                    "3000": {
                        "name": "Bund",
                        "alias": "Bundesrepublik Deutschland",
                        "description": "Der Bund.",
                    },
                },
                "typename": "XP_Bundeslaender",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    rechtlicheAussenwirkung: Annotated[
        bool,
        Field(
            description="Gibt an, ob der Plan eine rechtliche Außenwirkung hat.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    planArt: Annotated[
        list[Literal["1000", "2000", "3000", "4000", "9999"]],
        Field(
            description="Typ des vorliegenden Landschaftsplans.",
            json_schema_extra={
                "typename": "LP_PlanArt",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "Landschaftsprogramm",
                        "alias": "Landschaftsprogramm",
                        "description": "Überörtliche konkretisierte Ziele, Erfordernisse und Maßnahmen des Naturschutzes und der Landschaftspflege auf räumlicher Ebene eines Bundeslandes",
                    },
                    "2000": {
                        "name": "Landschaftsrahmenplan",
                        "alias": "Landschaftsrahmenplan",
                        "description": "Überörtliche konkretisierte Ziele, Erfordernisse und Maßnahmen des Naturschutzes und der Landschaftspflege für räumliche Teilbereiche eines Bundeslandes, z.B. eines (Land-)Kreises.",
                    },
                    "3000": {
                        "name": "Landschaftsplan",
                        "alias": "Landschaftsplan",
                        "description": "Planwerk mit konkretisierten Zielen, Erfordernissen und Maßnahmen des Naturschutzes und der Landschaftspflege auf gesamtstädtischer räumlicher Ebene",
                    },
                    "4000": {
                        "name": "Gruenordnungsplan",
                        "alias": "Grünordnungsplan",
                        "description": "Die für die örtliche Ebene konkretisierten Ziele, Erfordernisse und Maßnahmen des Naturschutzes und der Landschaftspflege werden für Teile eines Gemeindegebiets in Grünordnungsplänen dargestellt. (§ 11, Abs .1  BNatSchG)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Planart",
                    },
                },
            },
            min_length=1,
        ),
    ]
    sonstPlanArt: Annotated[
        AnyUrl | None,
        Field(
            description='Spezifikation einer "Sonstigen Planart", wenn kein Plantyp aus der Enumeration LP_PlanArt zutreffend ist. Das Attribut "planArt" muss in diesem Fall der Wert 9999 haben.',
            json_schema_extra={
                "typename": "LP_SonstPlanArt",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Die für diesen Plan zuständige Gemeinde.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    planaufstellendeGemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Die für die ursprüngliche Planaufstellung zuständige Gemeinde, falls diese nicht unter dem Attribut gemeinde aufgeführt ist. Dies kann z.B. nach Gemeindefusionen der Fall sein.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    plangeber: Annotated[
        XPPlangeber | None,
        Field(
            description="Für die Planung zuständige Institution falls von der Gemeinde abweichend, z.B. ein Planungsverband.",
            json_schema_extra={
                "typename": "XP_Plangeber",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstand: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000"] | None,
        Field(
            description="Rechtsstand des Plans",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aufstellungsbeschluss",
                        "alias": "Aufstellungsbeschluss",
                        "description": "Der Aufstellungsbeschluss wurde getroffen.",
                    },
                    "2000": {
                        "name": "Entwurf",
                        "alias": "Entwurf",
                        "description": "Eine vorläufige Planfassung/Vorentwurf liegt vor.",
                    },
                    "3000": {
                        "name": "Plan",
                        "alias": "Plan",
                        "description": "Der Plan ist technisch erstellt, aber noch nicht rechtwirksam bzw. noch nicht gutachterlich wirksam.",
                    },
                    "4000": {
                        "name": "Wirksamkeit",
                        "alias": "Wirksamkeit",
                        "description": "Der Plan ist wirksam einschließlich einer gutachterlichen Wirksamkeit.",
                    },
                    "5000": {
                        "name": "Untergegangen",
                        "alias": "Untergegangen",
                        "description": "Der Plan ist nicht mehr rechtswirksam, \r\nwurde aufgehoben oder außerkraftgesetzt.",
                    },
                    "6000": {
                        "name": "InFortschreibung",
                        "alias": "In Fortschreibung",
                        "description": "Der Plan befindet sich in Fortschreibung (Landschaftsplanung).",
                    },
                },
                "typename": "LP_Rechtsstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufstellungsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Aufstellungsbeschlusses",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    auslegungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    auslegungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    tOeBbeteiligungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der ÖB-Trägerbeteiligung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    tOeBbeteiligungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der ÖB-Trägerbeteiligung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    oeffentlichkeitsBetStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der Öffentlichkeitsbeteiligung. Bei mehrfacher öffentlicher Beteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    oeffentlichkeitsBetEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der Öffentlichkeitsbeteiligung. Bei mehrfacher öffentlicher Beteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aenderungenBisDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, bis zu dem Planänderungen berücksichtigt wurden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    entwurfsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Entwurfsbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Planbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    inkrafttretenDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Inkrafttretens.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    veroeffentlichungsDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum der Veröffentlichung des Plans.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstVerfahrensDatum: Annotated[
        date_aliased | None,
        Field(
            description="Sonstiges Verfahrens-Datum (Verfahrens-Art siehe sonstVerfahrensText)",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstVerfahrensText: Annotated[
        str | None,
        Field(
            description="Textliche Präzisierung des sonstigen Verfahrens gem. Attribut sonstVerfahrensDatum",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    startBedingungen: Annotated[
        str | None,
        Field(
            description="Beschreibt Bedingung(en),  ab wann ein Plan wirksam ist.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    endeBedingungen: Annotated[
        str | None,
        Field(
            description="Beschreibt Bedingung(en), bis wann ein Plan wirksam ist.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bereich: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf die Bereiche des Landschaftsplans (einzelne Kartenblätter, Detailkarten, Übersichtskarten etc.).",
            json_schema_extra={
                "typename": "LP_Bereich",
                "stereotype": "Association",
                "reverseProperty": "gehoertZuPlan",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class RPBereich(XPBereich):
    """
    Die Klasse RP_Bereich modelliert einen Bereich eines Raumordnungsplans. Bereiche strukturieren Pläne räumlich und inhaltlich.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    versionBROG: Annotated[
        date_aliased | None,
        Field(
            description="Bekanntmachungs-Datum der zugrunde liegenden Version des ROG.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBROGText: Annotated[
        str | None,
        Field(
            description="Titel der zugrunde liegenden Version des Bundesraumordnungsgesetzes.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionLPLG: Annotated[
        date_aliased | None,
        Field(
            description="Bekanntmachungs-Datum des zugrunde liegenden Landesplanungsgesetzes.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionLPLGText: Annotated[
        str | None,
        Field(
            description="Titel des zugrunde liegenden Landesplanungsgesetzes.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geltungsmassstab: Annotated[
        int | None,
        Field(
            description="(Rechtlicher) Geltungsmaßstab des Bereichs.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gehoertZuPlan: Annotated[
        AnyUrl | UUID,
        Field(
            description="Relation auf den zugehörigen Plan",
            json_schema_extra={
                "typename": "RP_Plan",
                "stereotype": "Association",
                "reverseProperty": "bereich",
                "sourceOrTarget": "source",
                "multiplicity": "1",
            },
        ),
    ]


class RPObjekt(XPObjekt):
    """
    RP_Objekt ist die Basisklasse für alle spezifischen Festlegungen eines Raumordnungsplans. Sie selbst ist abstrakt, d.h. sie wird selbst nicht als eigenes Objekt verwendet, sondern vererbt nur ihre Attribute an spezielle Klassen.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    konkretisierung: Annotated[
        str | None,
        Field(
            description="Konkretisierung des Rechtscharakters.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gebietsTyp: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1100",
                "1101",
                "1200",
                "1300",
                "1400",
                "1500",
                "1501",
                "1600",
                "1700",
                "1800",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Gebietstyp eines Objekts.",
            json_schema_extra={
                "typename": "RP_GebietsTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Vorranggebiet",
                        "alias": "Vorranggebiet",
                        "description": "Vorranggebiete sind für bestimmte raumbedeutsame Funktionen oder Nutzungen vorgesehen. In ihnen sind andere raumbedeutsame Nutzungen ausgeschlossen, soweit diese mit den vorrangigen Funktionen, Nutzungen oder Zielen der Raumordnung nicht vereinbar sind.",
                    },
                    "1001": {
                        "name": "Vorrangstandort",
                        "alias": "Vorrangstandort",
                        "description": "Vorrangstandort.",
                    },
                    "1100": {
                        "name": "Vorbehaltsgebiet",
                        "alias": "Vorbehaltsgebiet",
                        "description": "Vorbehaltsgebiete sind Gebiete, in denen bestimmten raumbedeutsamen Funktionen oder Nutzungen bei der Abwägung mit konkurrierenden raumbedeutsamen Nutzungen besonderes Gewicht begemessen werden soll. Vorbehaltsgebiete besitzen den Charakter von Grundsätzen der Raumordnung.",
                    },
                    "1101": {
                        "name": "Vorbehaltsstandort",
                        "alias": "Vorbehaltsstandort",
                        "description": "Vorbehaltsstandort.",
                    },
                    "1200": {
                        "name": "Eignungsgebiet",
                        "alias": "Eignungsgebiet",
                        "description": "Eignungsgebiete steuern raumbedeutsame Maßnahmen im bauplanungsrechtlichen Außenbereich. Diese Maßnahmen sind außerhalb dieser Gebiete regelmäßig ausgeschlossen, z.B. die Planung und Einrichtung von Windkraftanlagen. \r\nEignungsgebiete haben den Charakter von Zielen der Raumordnung.",
                    },
                    "1300": {
                        "name": "VorrangUndEignungsgebiet",
                        "alias": "Vorrang- und Eignungsgebiet",
                        "description": "Vorrang und Eignungsgebiet.",
                    },
                    "1400": {
                        "name": "Ausschlussgebiet",
                        "alias": "Ausschlussgebiet",
                        "description": "Ausschlussgebiet.",
                    },
                    "1500": {
                        "name": "Vorsorgegebiet",
                        "alias": "Vorsorgegebiet",
                        "description": "Vorsorgegebiet.",
                    },
                    "1501": {
                        "name": "Vorsorgestandort",
                        "alias": "Vorsorgestandort",
                        "description": "Vorsorgestandort.",
                    },
                    "1600": {
                        "name": "Vorzugsraum",
                        "alias": "Vorzugsraum",
                        "description": "Vorzugsraum.",
                    },
                    "1700": {
                        "name": "Potenzialgebiet",
                        "alias": "Potenzialgebiet",
                        "description": "Potenzialgebiet.",
                    },
                    "1800": {
                        "name": "Schwerpunktraum",
                        "alias": "Schwerpunktraum",
                        "description": "Schwerpunktraum.",
                    },
                    "9999": {
                        "name": "SonstigesGebiet",
                        "alias": "Sonstiges Gebiet",
                        "description": "Sonstiges Gebiet.",
                    },
                },
            },
        ),
    ] = None
    kuestenmeer: Annotated[
        bool | None,
        Field(
            description="Zeigt an, ob das Objekt im Küstenmeer liegt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    bedeutsamkeit: Annotated[
        list[
            Literal[
                "1000", "2000", "3000", "4000", "5000", "6000", "7000", "8000", "9000"
            ]
        ]
        | None,
        Field(
            description="Bedeutsamkeit eines Objekts.",
            json_schema_extra={
                "typename": "RP_Bedeutsamkeit",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Regional",
                        "alias": "Regional",
                        "description": "Regional Bedeutsam.",
                    },
                    "2000": {
                        "name": "Ueberregional",
                        "alias": "Überregional",
                        "description": "Überregional Bedeutsam.",
                    },
                    "3000": {
                        "name": "Grossraeumig",
                        "alias": "Großräumig",
                        "description": "Großräumig Bedeutsam.",
                    },
                    "4000": {
                        "name": "Landesweit",
                        "alias": "Landesweit",
                        "description": "Landesweit Bedeutsam.",
                    },
                    "5000": {
                        "name": "Bundesweit",
                        "alias": "Bundesweit",
                        "description": "Bundesweit Bedeutsam.",
                    },
                    "6000": {
                        "name": "Europaeisch",
                        "alias": "Europäisch",
                        "description": "Europäisch Bedeutsam.",
                    },
                    "7000": {
                        "name": "International",
                        "alias": "International",
                        "description": "International Bedeutsam.",
                    },
                    "8000": {
                        "name": "Flaechenerschliessend",
                        "alias": "Flächenerschließend",
                        "description": "Flächenerschließend Bedeutsam.",
                    },
                    "9000": {
                        "name": "Herausragend",
                        "alias": "Herausragend",
                        "description": "Herausragend Bedeutsam.",
                    },
                },
            },
        ),
    ] = None
    istZweckbindung: Annotated[
        bool | None,
        Field(
            description="Zeigt an, ob es sich bei diesem Objekt um eine Zweckbindung handelt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPPlan(XPPlan):
    """
    Die Klasse RP_Plan modelliert einen Raumordnungsplan.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bundesland: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1900",
                "2000",
                "2100",
                "2200",
                "2300",
                "2400",
                "2500",
                "3000",
            ]
        ],
        Field(
            description="Zuständige Bundesländer für den Plan.",
            json_schema_extra={
                "typename": "XP_Bundeslaender",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "BB",
                        "alias": "Brandenburg",
                        "description": "Brandenburg",
                    },
                    "1100": {"name": "BE", "alias": "Berlin", "description": "Berlin"},
                    "1200": {
                        "name": "BW",
                        "alias": "Baden-Württemberg",
                        "description": "Baden-Württemberg",
                    },
                    "1300": {"name": "BY", "alias": "Bayern", "description": "Bayern"},
                    "1400": {
                        "name": "HB",
                        "alias": "Hansestadt Bremen",
                        "description": "Bremen",
                    },
                    "1500": {"name": "HE", "alias": "Hessen", "description": "Hessen"},
                    "1600": {
                        "name": "HH",
                        "alias": "Hansestadt Hamburg",
                        "description": "Hamburg",
                    },
                    "1700": {
                        "name": "MV",
                        "alias": "Mecklenburg-Vorpommern",
                        "description": "Mecklenburg-Vorpommern",
                    },
                    "1800": {
                        "name": "NI",
                        "alias": "Niedersachsen",
                        "description": "Niedersachsen",
                    },
                    "1900": {
                        "name": "NW",
                        "alias": "Nordrhein-Westfalen",
                        "description": "Nordrhein-Westfalen",
                    },
                    "2000": {
                        "name": "RP",
                        "alias": "Rheinland-Pfalz",
                        "description": "Rheinland-Pfalz",
                    },
                    "2100": {
                        "name": "SH",
                        "alias": "Schleswig-Holstein",
                        "description": "Schleswig-Holstein",
                    },
                    "2200": {
                        "name": "SL",
                        "alias": "Saarland",
                        "description": "Saarland",
                    },
                    "2300": {
                        "name": "SN",
                        "alias": "Sachsen",
                        "description": "Sachsen",
                    },
                    "2400": {
                        "name": "ST",
                        "alias": "Sachsen-Anhalt",
                        "description": "Sachsen-Anhalt",
                    },
                    "2500": {
                        "name": "TH",
                        "alias": "Thüringen",
                        "description": "Thüringen",
                    },
                    "3000": {
                        "name": "Bund",
                        "alias": "Bundesrepublik Deutschland",
                        "description": "Der Bund.",
                    },
                },
            },
            min_length=1,
        ),
    ]
    planArt: Annotated[
        Literal["1000", "2000", "2001", "3000", "4000", "5000", "5001", "6000", "9999"],
        Field(
            description="Art des Raumordnungsplans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Regionalplan",
                        "alias": "Regionalplan",
                        "description": "Regionalplan.",
                    },
                    "2000": {
                        "name": "SachlicherTeilplanRegionalebene",
                        "alias": "Sachlicher Teilplan Regionalebene",
                        "description": "Sachlicher Teilplan auf der räumlichen Ebene einer Region",
                    },
                    "2001": {
                        "name": "SachlicherTeilplanLandesebene",
                        "alias": "Sachlicher Teilplan Landesebene",
                        "description": "Sachlicher Teilplan auf räumlicher Ebene eines Bundeslandes",
                    },
                    "3000": {
                        "name": "Braunkohlenplan",
                        "alias": "Braunkohlenplan",
                        "description": "Braunkohlenplan.",
                    },
                    "4000": {
                        "name": "LandesweiterRaumordnungsplan",
                        "alias": "Landesweiter Raumordnungsplan",
                        "description": "Landesweiter Raumordnungsplan auf räumlicher Ebene eines Bundeslandes",
                    },
                    "5000": {
                        "name": "StandortkonzeptBund",
                        "alias": "Standortkonzept Bund",
                        "description": "Raumordnungsplan für das Bundesgebiet mit übergreifenden Standortkonzepten für Seehäfen, Binnenhäfen sowie Flughäfen gem. §17 Abs. 2 ROG.",
                    },
                    "5001": {
                        "name": "AWZPlan",
                        "alias": "AWZ-Plan",
                        "description": "Plan des Bundes für den Gesamtraum und die ausschließliche Wirtschaftszone (AWZ).",
                    },
                    "6000": {
                        "name": "RaeumlicherTeilplan",
                        "alias": "Räumlicher Teilplan",
                        "description": "Räumlicher Teilplan auf regionaler Ebene",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Planwerk der Raumordnung auf Bundesebene, Landesebene oder regionaler Ebene.",
                    },
                },
                "typename": "RP_Art",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    sonstPlanArt: Annotated[
        AnyUrl | None,
        Field(
            description="Spezifikation einer weiteren Planart (CodeList) bei planArt == 9999.",
            json_schema_extra={
                "typename": "RP_SonstPlanArt",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planungsregion: Annotated[
        int | None,
        Field(
            description="Kennziffer der Planungsregion.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    teilabschnitt: Annotated[
        int | None,
        Field(
            description="Kennziffer des Teilabschnittes.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstand: Annotated[
        Literal[
            "1000",
            "2000",
            "2001",
            "2002",
            "2003",
            "2004",
            "3000",
            "4000",
            "5000",
            "5500",
            "6000",
            "7000",
        ]
        | None,
        Field(
            description="Rechtsstand des Plans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aufstellungsbeschluss",
                        "alias": "Aufstellungsbeschluss",
                        "description": "Aufstellungsbeschluss.",
                    },
                    "2000": {
                        "name": "Entwurf",
                        "alias": "Entwurf",
                        "description": "Entwurf.",
                    },
                    "2001": {
                        "name": "EntwurfGenehmigt",
                        "alias": "Entwurf genehmigt",
                        "description": "Entwurf genehmigt.",
                    },
                    "2002": {
                        "name": "EntwurfGeaendert",
                        "alias": "Entwurf geändert",
                        "description": "Entwurf geändert.",
                    },
                    "2003": {
                        "name": "EntwurfAufgegeben",
                        "alias": "Entwurf aufgegeben",
                        "description": "Entwurf aufgegeben.",
                    },
                    "2004": {
                        "name": "EntwurfRuht",
                        "alias": "Entwurf ruht",
                        "description": "Entwurf ruht.",
                    },
                    "3000": {"name": "Plan", "alias": "Plan", "description": "Plan."},
                    "4000": {
                        "name": "Inkraftgetreten",
                        "alias": "In Kraft getreten",
                        "description": "Inkraftgetreten.",
                    },
                    "5000": {
                        "name": "AllgemeinePlanungsabsicht",
                        "alias": "Allgemeine Planungsabsicht",
                        "description": "Allgemeine Planungsabsicht.",
                    },
                    "5500": {
                        "name": "TeilweiseAusserKraft",
                        "alias": "Teilweise außer Kraft",
                        "description": "Der Plan ist teilweise außer Kraft getreten",
                    },
                    "6000": {
                        "name": "AusserKraft",
                        "alias": "Außer Kraft",
                        "description": "Außer Kraft.",
                    },
                    "7000": {
                        "name": "PlanUngueltig",
                        "alias": "Plan ungültig",
                        "description": "Plan ungültig.",
                    },
                },
                "typename": "RP_Rechtsstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    status: Annotated[
        AnyUrl | None,
        Field(
            description="Status des Plans, definiert über eine CodeList.",
            json_schema_extra={
                "typename": "RP_Status",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufstellungsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Aufstellungsbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    auslegungStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    auslegungEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der öffentlichen Auslegung. Bei mehrfacher öffentlicher Auslegung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsStartDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="Start-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traegerbeteiligungsEndDatum: Annotated[
        list[date_aliased] | None,
        Field(
            description="End-Datum der Trägerbeteiligung. Bei mehrfacher Trägerbeteiligung können mehrere Datumsangaben spezifiziert werden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    aenderungenBisDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum, bis zu dem Planänderungen berücksichtigt wurden.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    entwurfsbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Entwurfsbeschlusses",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    planbeschlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Planbeschlusses.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    datumDesInkrafttretens: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Inkrafttretens des Plans.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    verfahren: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000"] | None,
        Field(
            description="Verfahrensstatus des Plans.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aenderung",
                        "alias": "Änderung",
                        "description": "Änderung.",
                    },
                    "2000": {
                        "name": "Teilfortschreibung",
                        "alias": "Teilfortschreibung",
                        "description": "Teilfortschreibung.",
                    },
                    "3000": {
                        "name": "Neuaufstellung",
                        "alias": "Neuaufstellung",
                        "description": "Neuaufstellung.",
                    },
                    "4000": {
                        "name": "Gesamtfortschreibung",
                        "alias": "Gesamtfortschreibung",
                        "description": "Gesamtfortschreibung.",
                    },
                    "5000": {
                        "name": "Aktualisierung",
                        "alias": "Aktualisierung",
                        "description": "Aktualisierung.",
                    },
                    "6000": {
                        "name": "Neubekanntmachung",
                        "alias": "Neubekanntmachung",
                        "description": "Mit der Neubekanntmachung wird eine authentische amtliche Gesamtfassung des geltenden Plans veröffentlicht, in der alle vorherigen, förmlich beschlossenen und verkündeten Änderungen inhaltlich unverändert einbezogen sind. Nur offensichtliche Unrichtigkeiten wie Schreibfehler dürfen berichtigt werden. Es handelt sich nicht um eine neue Planung oder neue Normsetzung.",
                    },
                },
                "typename": "RP_Verfahren",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    amtlicherSchluessel: Annotated[
        str | None,
        Field(
            description="Amtlicher Schlüssel eines Plans auf Basis des  AGS-Schlüssels (Amtlicher Gemeindeschlüssel).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    genehmigungsbehoerde: Annotated[
        str | None,
        Field(
            description="Zuständige Genehmigungsbehörde",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bereich: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Relation auf einen Bereich",
            json_schema_extra={
                "typename": "RP_Bereich",
                "stereotype": "Association",
                "reverseProperty": "gehoertZuPlan",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class SOBereich(XPBereich):
    """
    Bereich eines sonstigen raumbezogenen Plans.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gehoertZuPlan: Annotated[
        AnyUrl | UUID,
        Field(
            description="Referenz auf den Plan, zu dem der Bereich gehört",
            json_schema_extra={
                "typename": "SO_Plan",
                "stereotype": "Association",
                "reverseProperty": "bereich",
                "sourceOrTarget": "source",
                "multiplicity": "1",
            },
        ),
    ]


class SOObjekt(XPObjekt):
    """
    Basisklasse für die Inhalte sonstiger raumbezogener Planwerke ,von Klassen zur Modellierung nachrichtlicher Übernahmen, sowie Planart-übergreifende Planinhalte.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    sonstRechtscharakter: Annotated[
        AnyUrl | None,
        Field(
            description='Klassifizierung des Rechtscharakters wenn das Attribut "rechtscharakter" den Wert "Sonstiges" (9999)  hat.',
            json_schema_extra={
                "typename": "SO_SonstRechtscharakter",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vonGenehmigungAusgenommen: Annotated[
        bool | None,
        Field(
            description="Angabe, ob Teile des Flächennutzungsplans nach §6 Abs. 3 BauGB von der Genehmigung ausgenommen sind. Dies Attribut darf nur verwendet werden, wenn das Objekt Bestandteil eines Flächennutzungsplans ist (gehoertZuBereich zeogt auf ein FP_Bereich Objekt).",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    wirdAusgeglichenDurchFPFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Ausgleichsfläche im Flächennutzungsplan, die den Eingriff ausgleicht. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Flächennutzungsplans ist (gehoertZuBereich zeigt auf ein FP_Bereich Objekt).",
            json_schema_extra={
                "typename": "FP_AusgleichsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchFPSPE: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-,Pflege- oder Entwicklungsmaßnahme im Flächennutzungsplan, die den Eingriff ausgleicht.Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Flächennutzungsplans ist (gehoertZuBereich zeigt auf ein FP_Bereich Objekt).",
            json_schema_extra={
                "typename": "FP_SchutzPflegeEntwicklung",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchBPFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf Ausgleichsfläche im Bebauungsplan, die einen Eingriff ausgleicht. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist (gehoertZuBereich zeigt auf ein BP_Bereich Objekt).",
            json_schema_extra={
                "typename": "BP_AusgleichsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchBPABE: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Anpflanzungs-, Bindungs- oder Erhaltungsmaßnahme im Bebauungsplan, durch die ein Eingriff ausgeglichen wird. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist (gehoertZuBereich zeigt auf ein BP_Bereich Objekt).",
            json_schema_extra={
                "typename": "BP_AnpflanzungBindungErhaltung",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchBPSPEMassnahme: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-, Pflege- oder Entwicklungsmaßnahme im Bebauungsplan, durch die ein Eingriff ausgeglichen wird. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist (gehoertZuBereich zeigt auf ein BP_Bereich Objekt).",
            json_schema_extra={
                "typename": "BP_SchutzPflegeEntwicklungsMassnahme",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchBPSPEFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Schutz-, Pflege- oder Entwicklungs-Fläche im Bebauungsplan, die den Eingriff ausgleicht. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist (gehoertZuBereich zeigt auf ein BP_Bereich Objekt).",
            json_schema_extra={
                "typename": "BP_SchutzPflegeEntwicklungsFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wirdAusgeglichenDurchBPMassnahme: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Verweis auf eine  Ausgleichsmaßnahme im Bebauungsplan, die einen vorgenommenen Eingriff ausgleicht. Die Referenz darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist (gehoertZuBereich zeigt auf ein BP_Bereich Objekt).",
            json_schema_extra={
                "typename": "BP_AusgleichsMassnahme",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    laermkontingent: Annotated[
        BPEmissionskontingentLaerm | None,
        Field(
            description="Festsetzung eines Lärmemissionskontingent. Das Attribut darf nur verwendet werden, wenn das Objekt Bestandteil eines Bebauungsplans ist.",
            json_schema_extra={
                "typename": "BP_EmissionskontingentLaerm",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    laermkontingentGebiet: Annotated[
        list[BPEmissionskontingentLaermGebiet] | None,
        Field(
            description="Festsetzung von Lärmemissionskontingenten nach DIN 45691, die einzelnen Immissionsgebieten zugeordnet sind. Das Attribut darf nur verwendet werden, wenn das Objekt das Objekt Bestandteil eines Bebauungsplans ist.",
            json_schema_extra={
                "typename": "BP_EmissionskontingentLaermGebiet",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zusatzkontingent: Annotated[
        AnyUrl | UUID | None,
        Field(
            description="Festsetzung von Zusatzkontingenten für die Lärmemission, die einzelnen Richtungssektoren zugeordnet sind. Die einzelnen Richtungssektoren werden parametrisch definiert. Die Relation darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist.",
            json_schema_extra={
                "typename": "BP_ZusatzkontingentLaerm",
                "stereotype": "Association",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zusatzkontingentFlaeche: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Festsetzung von Zusatzkontingenten für die Lärmemission, die einzelnen Richtungssektoren zugeordnet sind. Die einzelnen Richtungssektoren werden durch explizite Flächen definiert.Die Relation darf nur verwendet werden, wenn das referierende Bestandteil eines Bebauungsplans ist.",
            json_schema_extra={
                "typename": "BP_ZusatzkontingentLaermFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    richtungssektorGrenze: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Zuordnung einer Richtungssektor-Grenze für die Festlegung zusätzlicher Lärmkontingente. Die Relation darf nur verwendet werden, wenn das referierende Objekt Bestandteil eines Bebauungsplans ist.",
            json_schema_extra={
                "typename": "BP_RichtungssektorGrenze",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class SOPlan(XPPlan):
    """
    Klasse für sonstige, z. B. länderspezifische raumbezogene Planwerke.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Zuständige Gemeinde",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    planaufstellendeGemeinde: Annotated[
        list[XPGemeinde] | None,
        Field(
            description="Die für die ursprüngliche Planaufstellung zuständige Gemeinde, falls diese nicht unter dem Attribut gemeinde aufgeführt ist. Dies kann z.B. nach Gemeindefusionen der Fall sein.",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    planArt: Annotated[
        AnyUrl,
        Field(
            description="Über eine Codeliste definierter Typ des Plans.",
            json_schema_extra={
                "typename": "SO_PlanArt",
                "stereotype": "Codelist",
                "multiplicity": "1",
            },
        ),
    ]
    plangeber: Annotated[
        XPPlangeber | None,
        Field(
            description="Für den Plan zuständige Stelle.",
            json_schema_extra={
                "typename": "XP_Plangeber",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBauGBDatum: Annotated[
        date_aliased | None,
        Field(
            description="Bekanntmachungs-Datum der zugrunde liegenden Version des BauGB.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionBauGBText: Annotated[
        str | None,
        Field(
            description="Textliche Spezifikation der zugrunde liegenden Version des BauGB.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionSonstRechtsgrundlageDatum: Annotated[
        date_aliased | None,
        Field(
            description="Bekanntmachungs-Datum einer zugrunde liegenden anderen Rechtsgrundlage als das BauGB.",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    versionSonstRechtsgrundlageText: Annotated[
        str | None,
        Field(
            description="Textliche Spezifikation einer zugrunde liegenden anderen Rechtsgrundlage als das  BauGB.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bereich: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf einen Bereich des sonstigen raumbezogenen Plans.",
            json_schema_extra={
                "typename": "SO_Bereich",
                "stereotype": "Association",
                "reverseProperty": "gehoertZuPlan",
                "sourceOrTarget": "target",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class SOPunktobjekt(SOObjekt):
    """
    Basisklasse für Objekte mit punktförmigem Raumbezug (Einzelpunkt oder Punktmenge).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point | definitions.MultiPoint,
        Field(
            description="Punktförmiger Raumbezug (Einzelpunkt oder Punktmenge).",
            json_schema_extra={
                "typename": "XP_Punktgeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Punktobjektes als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class XPNutzungsschablone(XPPTO):
    """
    Modelliert eine Nutzungsschablone. Die darzustellenden Attributwerte werden zeilenweise in die Nutzungsschablone geschrieben.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    spaltenAnz: Annotated[
        int,
        Field(
            description="Anzahl der Spalten in der Nutzungsschablone",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    zeilenAnz: Annotated[
        int,
        Field(
            description="Anzahl der Zeilen in der Nutzungsschablone",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class BPEinfahrtPunkt(BPPunktobjekt):
    """
    Punktförmig abgebildete Einfahrt (§9 Abs. 1 Nr. 11 und Abs. 6 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Typ der Einfahrt",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einfahrt",
                        "alias": "Einfahrt",
                        "description": "Nur Einfahrt möglich",
                    },
                    "2000": {
                        "name": "Ausfahrt",
                        "alias": "Ausfahrt",
                        "description": "Nur Ausfahrt möglich",
                    },
                    "3000": {
                        "name": "EinAusfahrt",
                        "alias": "Ein- und Ausfahrt",
                        "description": "Ein- und Ausfahrt möglich",
                    },
                },
                "typename": "BP_EinfahrtTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPFlaechenobjekt(BPObjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit flächenhaftem Raumbezug. Die von BP_Flaechenobjekt abgeleiteten Fachobjekte können sowohl als Flächenschlussobjekte als auch als Überlagerungsobjekte auftreten.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Polygon | definitions.MultiPolygon,
        Field(
            description="Flächenhafter Raumbezug des Objektes (Eine Einzelfläche oder eine Menge von Flächen, die sich nicht überlappen dürfen).",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool,
        Field(
            description="Zeigt an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll. Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Bebauungsplans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class BPFlaechenschlussobjekt(BPFlaechenobjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit flächenhaftem Raumbezug, die auf Ebene 0 immer Flächenschlussobjekte sind.
    Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Bebauungsplans vollständig.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPFreiFlaeche(BPFlaechenobjekt):
    """
    Umgrenzung der Flächen, die von der Bebauung freizuhalten sind, und ihre Nutzung (§ 9 Abs. 1 Nr. 10 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    nutzung: Annotated[
        str | None,
        Field(
            description="Festgesetzte Nutzung der Freifläche.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPGemeinbedarfsFlaeche(BPFlaechenschlussobjekt):
    """
    Einrichtungen und Anlagen zur Versorgung mit Gütern und Dienstleistungen des öffentlichen und privaten Bereichs, hier Flächen für den Gemeindebedarf (§9, Abs. 1, Nr.5 und Abs. 6 BauGB). Das gleiche Attribut darf nicht gleichzeitig in BP_GemeinbedarfsFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    dachgestaltung: Annotated[
        list[BPDachgestaltung] | None,
        Field(
            description="Parameter zur Einschränkung der zulässigen Dachformen.",
            json_schema_extra={
                "typename": "BP_Dachgestaltung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    FR: Annotated[
        definitions.Angle | None,
        Field(
            description="Vorgeschriebene Firstrichtung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestGemeinbedarf] | None,
        Field(
            description="Zweckbestimmung der festgesetzten Fläche",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestGemeinbedarf",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    bauweise: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bauweise  (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OffeneBauweise",
                        "alias": "Offene Bauweise",
                        "token": "o",
                        "description": "Offene Bauweise",
                    },
                    "2000": {
                        "name": "GeschlosseneBauweise",
                        "alias": "Geschlossene Bauweise",
                        "token": "g",
                        "description": "Geschlossene Bauweise",
                    },
                    "3000": {
                        "name": "AbweichendeBauweise",
                        "alias": "Abweichende Bauweise",
                        "token": "a",
                        "description": "Abweichende Bauweise",
                    },
                },
                "typename": "BP_Bauweise",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweiseText: Annotated[
        str | None,
        Field(
            description="Textuelle Präzisierung oder Ergänzung der durch bauweise spezifizierten Bauweise.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichendeBauweise: Annotated[
        AnyUrl | None,
        Field(
            description='Nähere Bezeichnung einer "Abweichenden Bauweise" ("bauweise" == 3000).',
            json_schema_extra={
                "typename": "BP_AbweichendeBauweise",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungsArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000"] | None,
        Field(
            description="Detaillierte Festsetzung der Bauweise (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhaeuser",
                        "alias": "Einzelhäuser",
                        "token": "E",
                        "description": "Nur Einzelhäuser zulässig.",
                    },
                    "2000": {
                        "name": "Doppelhaeuser",
                        "alias": "Doppelhäuser",
                        "token": "D",
                        "description": "Nur Doppelhäuser zulässig.",
                    },
                    "3000": {
                        "name": "Hausgruppen",
                        "alias": "Hausgruppen",
                        "token": "H",
                        "description": "Nur Hausgruppen zulässig.",
                    },
                    "4000": {
                        "name": "EinzelDoppelhaeuser",
                        "alias": "Einzel- und Doppelhäuser",
                        "token": "ED",
                        "description": "Nur Einzel- oder Doppelhäuser zulässig.",
                    },
                    "5000": {
                        "name": "EinzelhaeuserHausgruppen",
                        "alias": "Einzelhäuser Hausgruppen",
                        "token": "EH",
                        "description": "Nur Einzelhäuser oder Hausgruppen zulässig.",
                    },
                    "6000": {
                        "name": "DoppelhaeuserHausgruppen",
                        "alias": "Doppelhäuser und Hausgruppen",
                        "token": "DH",
                        "description": "Nur Doppelhäuser oder Hausgruppen zulässig.",
                    },
                    "7000": {
                        "name": "Reihenhaeuser",
                        "alias": "Reihenhäuser",
                        "token": "Rh",
                        "description": "Nur Reihenhäuser zulässig.",
                    },
                },
                "typename": "BP_BebauungsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    traeger: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000"] | None,
        Field(
            description="Trägerschaft einer Gemeinbedarfs-Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "EinrichtungBund",
                        "alias": "Einrichtung Bund",
                        "description": "Einrichtung des Bundes",
                    },
                    "2000": {
                        "name": "EinrichtungLand",
                        "alias": "Einrichtung Land",
                        "description": "Einrichtung eines Bundeslandes",
                    },
                    "3000": {
                        "name": "EinrichtungKreis",
                        "alias": "Einrichtung Kreis",
                        "description": "Einrichtung eines Landkreises",
                    },
                    "4000": {
                        "name": "KommunaleEinrichtung",
                        "alias": "Kommunale Einrichtung",
                        "description": "Kommunaler Träger",
                    },
                    "5000": {
                        "name": "ReligioeserTraeger",
                        "alias": "Religiöser Träger",
                        "description": "Träger ist eine Religionsgemeinschaft",
                    },
                    "6000": {
                        "name": "SonstTraeger",
                        "alias": "Sonstiger Träger",
                        "description": "Sonstiger, z.B. privater Träger",
                    },
                },
                "typename": "XP_Traegerschaft",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten der Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPGeometrieobjekt(BPObjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit variablem Raumbezug. Das bedeutet, die abgeleiteten Objekte können kontextabhängig mit Punkt-, Linien- oder Flächengeometrie gebildet. Die Aggregation von Punkten, Linien oder Flächen ist zulässig, nicht aber die Mischung von Punkt-, Linien- und Flächengeometrie.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point
        | definitions.MultiPoint
        | definitions.Line
        | definitions.MultiLine
        | definitions.Polygon
        | definitions.MultiPolygon,
        Field(
            description="Raumbezug - Entweder punktförmig, linienförmig oder flächenhaft, gemischte Geometrie ist nicht zugelassen.",
            json_schema_extra={
                "typename": "XP_VariableGeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool | None,
        Field(
            description="Zeigt bei flächenhaftem Raumbezug an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll.\r\nFlächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Bebauungsplans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    flussrichtung: Annotated[
        bool | None,
        Field(
            description='Das Attribut ist nur relevant, wenn ein Geometrieobjekt einen linienhaften Raumbezug hat. Ist es mit dem Wert true belegt, wird damit ausgedrückt, dass der Linie eine Flussrichtung  in Digitalisierungsrichtung, bei Attributwert "false" gegen die Digitalisierungsrichtung zugeordnet ist. In diesem Fall darf bei Im- und Export die Digitalisierungsreihenfolge der Stützpunkte nicht geändert werden. Wie eine definierte Flussrichtung  zu interpretieren oder bei einer Plandarstellung zu visualisieren ist, bleibt der Implementierung überlassen.\r\nIst der Attributwert false oder das Attribut nicht belegt, ist die Digitalisierungsreihenfolge der Stützpunkte irrelevant.',
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Objektes bei punktförmigem Raumbezug als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class BPGruenFlaeche(BPFlaechenschlussobjekt):
    """
    Festsetzungen von öffentlichen und privaten Grünflächen (§ 9, Abs. 1, Nr. 15 BauGB). Das gleiche Attribut darf nicht gleichzeitig in BP_GruenFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestGruen] | None,
        Field(
            description="Zweckbestimmung der Grünfläche",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestGruen",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    nutzungsform: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Nutzungsform der festgesetzten Fläche.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Privat",
                        "alias": "Privat",
                        "token": "p",
                        "description": "Private Nutzung",
                    },
                    "2000": {
                        "name": "Oeffentlich",
                        "alias": "Öffentlich",
                        "token": "ö",
                        "description": "Öffentliche Nutzung",
                    },
                },
                "typename": "XP_Nutzungsform",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten einer Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPHoehenMass(BPGeometrieobjekt):
    """
    Festsetzungen nach §9 Abs. 1 Nr. 1 BauGB für übereinanderliegende Geschosse und Ebenen und sonstige Teile baulicher Anlagen (§9 Abs.3 BauGB), sowie Hinweise auf Geländehöhen. Die Höhenwerte werden über das Attribut hoehenangabe der Basisklasse XP_Objekt spezifiziert.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPImmissionsschutz(BPGeometrieobjekt):
    """
    Festsetzung einer von der Bebauung freizuhaltenden Schutzfläche und ihre Nutzung, sowie einer Fläche für besondere Anlagen und Vorkehrungen zum Schutz vor schädlichen Umwelteinwirkungen und sonstigen Gefahren im Sinne des Bundes-Immissionsschutzgesetzes sowie die zum Schutz vor solchen Einwirkungen oder zur Vermeidung oder Minderung solcher Einwirkungen zu treffenden baulichen und sonstigen technischen Vorkehrungen (§9, Abs. 1, Nr. 24 BauGB).
    Die Klasse wird innbesondere benutzt, um 5 db Lärmpegelbereiche gemäß DIN-4109:2016-1, oder alternativ Maßgebliche (1 db) Außenlärmpegelbereiche gemäß  DIN 4109-1: 2018-01 festzusetzen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    nutzung: Annotated[
        str | None,
        Field(
            description="Festgesetzte Nutzung einer Schutzfläche",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    laermpegelbereich: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700"] | None,
        Field(
            description="Festlegung der erforderlichen Luftschalldämmung von Außenbauteilen nach DIN-4109:2016-1.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "I",
                        "alias": "I",
                        "description": "Lärmpegelbereich I nach  DIN 4109.",
                    },
                    "1100": {
                        "name": "II",
                        "alias": "II",
                        "description": "Lärmpegelbereich II nach  DIN 4109.",
                    },
                    "1200": {
                        "name": "III",
                        "alias": "III",
                        "description": "Lärmpegelbereich III nach  DIN 4109.",
                    },
                    "1300": {
                        "name": "IV",
                        "alias": "IV",
                        "description": "Lärmpegelbereich IV nach  DIN 4109.",
                    },
                    "1400": {
                        "name": "V",
                        "alias": "V",
                        "description": "Lärmpegelbereich V nach  DIN 4109.",
                    },
                    "1500": {
                        "name": "VI",
                        "alias": "VI",
                        "description": "Lärmpegelbereich VI nach  DIN 4109.",
                    },
                    "1600": {
                        "name": "VII",
                        "alias": "VII",
                        "description": "Lärmpegelbereich VII nach  DIN 4109.",
                    },
                    "1700": {
                        "name": "SpefizBereich",
                        "alias": "Spezifizierung Bereich",
                        "description": "Spezifizierung eines Lärmpegelbereiches über das Codelist-Attribut sonstLaermpegelbereich",
                    },
                },
                "typename": "BP_Laermpegelbereich",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstLaermpegelbereich: Annotated[
        AnyUrl | None,
        Field(
            description="Spezifikation eines nicht in der DIN-4109:2016-1 spezifizierten Lärmpegelbereiches über eine Codeliste. Dies Attribut darf nur verwendet werden, wenn laermpegelbereich den Wert 1700 hat oder unbelegt ist.",
            json_schema_extra={
                "typename": "BP_SonstLaermpegelbereich",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massgeblAussenLaermpegelTag: Annotated[
        definitions.GenericMeasure | None,
        Field(
            description="Maßgeblicher Außenlärmpegel (in db) nach DIN 4109-1: 2018-01 für den Tag.",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "db",
            },
        ),
    ] = None
    massgeblAussenLaermpegelNacht: Annotated[
        definitions.GenericMeasure | None,
        Field(
            description="Maßgeblicher Außenlärmpegel (in db) nach DIN 4109-1: 2018-01 für die Nacht.",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "db",
            },
        ),
    ] = None
    typ: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Differenzierung der Immissionsschutz-Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Schutzflaeche",
                        "alias": "Schutzfläche",
                        "description": "Von der Bebauung freizuhaltende Schutzfläche nach §9 Abs. 1 Nr. 24 BauGB",
                    },
                    "2000": {
                        "name": "BesondereAnlagenVorkehrungen",
                        "alias": "Besondere Anlagen oder Vorkehrungen",
                        "description": "Fläche für besondere Anlagen und Vorkehrungen zum Schutz vor schädlichen Umwelteinwirkungen nach §9 Abs. 1 Nr. 24 oder §5 Abs.2 Nr.6 BauGB",
                    },
                },
                "typename": "XP_ImmissionsschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    technVorkehrung: Annotated[
        Literal["1000", "10000", "10001", "10002", "9999"] | None,
        Field(
            description="Klassifizierung der auf der Fläche zu treffenden baulichen oder sonstigen technischen Vorkehrungen",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Laermschutzvorkehrung",
                        "alias": "Lärmschutzvorkehrung",
                        "description": "Allgemeine Lärmschutzvorkehrung",
                    },
                    "10000": {
                        "name": "FassadenMitSchallschutzmassnahmen",
                        "alias": "Fassaden mit Schallschutzmaßnahmen",
                        "description": "Fassaden mit Schallschutzmaßnahmen",
                    },
                    "10001": {
                        "name": "Laermschutzwand",
                        "alias": "Lärmschutzwand",
                        "description": "Lärmschutzwand",
                    },
                    "10002": {
                        "name": "Laermschutzwall",
                        "alias": "Lärmschutzwall",
                        "description": "Lärmschutzwall",
                    },
                    "9999": {
                        "name": "SonstigeVorkehrung",
                        "alias": "Sonstige Vorkehrung",
                        "description": "Sonstige Vorkehrung zum Immissionsschutz",
                    },
                },
                "typename": "XP_TechnVorkehrungenImmissionsschutz",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detaillierteTechnVorkehrung: Annotated[
        AnyUrl | None,
        Field(
            description="Detaillierte Klassifizierung der auf der Fläche zu treffenden baulichen oder sonstigen technischen Vorkehrungen",
            json_schema_extra={
                "typename": "XP_DetailTechnVorkehrungImmissionsschutz",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKennzeichnungsFlaeche(BPFlaechenobjekt):
    """
    Flächen für Kennzeichnungen gemäß §9 Abs. 5 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[
            Literal[
                "1000", "2000", "3000", "4000", "5000", "6000", "7000", "8000", "9999"
            ]
        ]
        | None,
        Field(
            description="Zweckbestimmung der Kennzeichnungs-Fläche.",
            json_schema_extra={
                "typename": "XP_ZweckbestimmungKennzeichnung",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Naturgewalten",
                        "alias": "Naturgewalten",
                        "description": "Flächen, bei deren Bebauung besondere bauliche Sicherungsmanahmen gegen Naturgewalten erforderlich sind (§5 Abs. 3 Nr. 1 und §9 Abs.5 Nr.1 BauGB ).",
                    },
                    "2000": {
                        "name": "Abbauflaeche",
                        "alias": "Abbaufläche",
                        "description": "Flächen, die für den Abbau von Mineralien bestimmt sind (§5 Abs. 3 Nr. 2 und §9 Abs. 5 Nr. 2 BauGB).",
                    },
                    "3000": {
                        "name": "AeussereEinwirkungen",
                        "alias": "Äußere Einwirkungen",
                        "description": "Flächen, bei deren Bebauung besondere bauliche Sicherungsmanahmen gegen äußere Einwirkungen erforderlich sind (§5 Abs. 3 Nr. 1 und §9 Abs. 5 Nr. 1  BauGB ).",
                    },
                    "4000": {
                        "name": "SchadstoffBelastBoden",
                        "alias": "Schadstoffbelasteter Boden",
                        "description": "Für bauliche Nutzung vorgesehene Flächen, deren Böden erheblich mit umweltgefährdenden Stoffen belastet sind (§5 Abs. 3 Nr. 3 und §9 Abs. 5 Nr. 3 BauGB).",
                    },
                    "5000": {
                        "name": "LaermBelastung",
                        "alias": "Lärmbelastung",
                        "description": "Für bauliche Nutzung vorgesehene Flächen, die erheblicher Lärmbelastung ausgesetzt sind.",
                    },
                    "6000": {
                        "name": "Bergbau",
                        "alias": "Bergbau",
                        "description": "Flächen, unter denen der Bergbau umgeht  (§5, Abs. 3, Nr. 2 und §9, Abs. 5, Nr. 2. BauGB).",
                    },
                    "7000": {
                        "name": "Bodenordnung",
                        "alias": "Bodenordnung",
                        "description": "Für Bodenordnungsmanahmen vorgesehene Gebiete, \r\nz.B. Gebiete für Umlegungen oder Flurbereinigung",
                    },
                    "8000": {
                        "name": "Vorhabensgebiet",
                        "alias": "Vorhabensgebiet",
                        "description": "Räumlich besonders gekennzeichnetes Vorhabengebiets, das kleiner als der Geltungsbereich ist, innerhalb eines vorhabenbezogenen BPlans.",
                    },
                    "9999": {
                        "name": "AndereGesetzlVorschriften",
                        "alias": "Andere gesetzliche Vorschriften",
                        "description": "Kennzeichnung nach anderen gesetzlichen Vorschriften.",
                    },
                },
            },
        ),
    ] = None
    istVerdachtsflaeche: Annotated[
        bool | None,
        Field(
            description="Legt fest, ob eine Altlast-Verdachtsfläche vorliegt",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    nummer: Annotated[
        str | None,
        Field(
            description="Nummer im Altlastkataster",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPKleintierhaltungFlaeche(BPFlaechenschlussobjekt):
    """
    Fläche für die Errichtung von Anlagen für die Kleintierhaltung wie Ausstellungs- und Zuchtanlagen, Zwinger, Koppeln und dergleichen (§ 9 Abs. 1 Nr. 19 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPLandwirtschaftsFlaeche(BPFlaechenschlussobjekt):
    """
    Festsetzungen für die Landwirtschaft  (§ 9, Abs. 1, Nr. 18a BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestLandwirtschaft] | None,
        Field(
            description="Zweckbestimmungen der Ausweisung.",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestLandwirtschaft",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPLinienobjekt(BPObjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit linienförmigem Raumbezug (Eine einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen zusammengesetzt sein kann, oder eine Menge derartiger Kurven).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Line | definitions.MultiLine,
        Field(
            description="Linienförmiger Raumbezug (Einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen aufgebaut ist, oder eine Menge derartiger Kurven),",
            json_schema_extra={
                "typename": "XP_Liniengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class BPNutzungsartenGrenze(BPLinienobjekt):
    """
    Abgrenzung unterschiedlicher Nutzung, z.B. von Baugebieten wenn diese nach PlanzVO in der gleichen Farbe dargestellt werden, oder Abgrenzung unterschiedlicher Nutzungsmaße innerhalb eines Baugebiets ("Knödellinie", § 1 Abs. 4, § 16 Abs. 5 BauNVO).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "9999"] | None,
        Field(
            description="Typ der Abgrenzung. Wenn das Attribut nicht belegt ist, ist die Abgrenzung eine Nutzungsarten-Grenze (Schlüsselnummer 1000).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Nutzungsartengrenze",
                        "alias": "Nutzungsartengrenze",
                        "description": "Nutzungsarten-Grenze zur Abgrenzung von Baugebieten mit unterschiedlicher Art oder unterschiedlichem Maß der baulichen Nutzung.",
                    },
                    "2000": {
                        "name": "UnterschiedlicheHoehen",
                        "alias": "Unterschiedliche Höhen",
                        "description": "Abgrenzung von Bereichen mit unterschiedlichen Festsetzungen zur Gebäudehöhe und/oder Zahl der Vollgeschosse.",
                    },
                    "9999": {
                        "name": "SonstigeAbgrenzung",
                        "alias": "Sonstige Abgrenzung",
                        "description": "Sonstige Abgrenzung",
                    },
                },
                "typename": "BP_AbgrenzungenTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailTyp: Annotated[
        AnyUrl | None,
        Field(
            description="Detaillierter Typ der Abgrenzung, wenn das Attribut typ den Wert 9999 (Sonstige Abgrenzung) hat.",
            json_schema_extra={
                "typename": "BP_DetailAbgrenzungenTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPRichtungssektorGrenze(BPLinienobjekt):
    """
    Linienhafte Repräsentation einer Richtungssektor-Grenze
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    winkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Richtungswinkel der Sektorengrenze",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class BPSchutzPflegeEntwicklungsFlaeche(BPFlaechenobjekt):
    """
    Umgrenzung von Flächen für Maßnahmen zum Schutz, zur Pflege und zur Entwicklung von Natur und Landschaft (§9 Abs. 1 Nr. 20 und Abs. 4 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der auf der Fläche durchzuführenden Maßnahmen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Attribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Durchzuführende Maßnahme.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    istAusgleich: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob die Fläche zum Ausgleich von Eingriffen genutzt wird.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    refMassnahmenText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein Dokument zur Beschreibung der durchzuführenden Maßnahmen.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refLandschaftsplan: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf den Landschaftsplan",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPSchutzPflegeEntwicklungsMassnahme(BPGeometrieobjekt):
    """
    Maßnahmen zum Schutz, zur Pflege und zur Entwicklung von Natur und Landschaft (§9 Abs. 1 Nr. 20 und Abs. 4 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der Maßnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Aztribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Durchzuführende Maßnahme.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    istAusgleich: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob die Maßnahme zum Ausgleich von Eingriffen genutzt wird.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    refMassnahmenText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein Dokument, das die durchzuführenden Maßnahmen beschreibt.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refLandschaftsplan: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf den Landschaftsplan.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPSpielSportanlagenFlaeche(BPFlaechenschlussobjekt):
    """
    Einrichtungen und Anlagen zur Versorgung mit Gütern und Dienstleistungen des öffentlichen und privaten Bereichs, hier Flächen für Sport- und Spielanlagen (§9, Abs. 1, Nr. 5 und Abs. 6 BauGB). Das gleiche Attribut darf nicht gleichzeitig in BP_SpielSportanlagenFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestSpielSportanlage] | None,
        Field(
            description="Zweckbestimmung der festgesetzten Fläche.",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestSpielSportanlage",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten einer Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPStrassenbegrenzungsLinie(BPLinienobjekt):
    """
    Straßenbegrenzungslinie (§ 9 Abs. 1 Nr. 11 und Abs. 6 BauGB) .
    Durch die Digitalisierungsreihenfolge der Linienstützpunkte muss sichergestellt sein, dass die abzugrenzende Straßenfläche relativ zur Laufrichtung auf der linken Seite liegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bautiefe: Annotated[
        definitions.Length | None,
        Field(
            description="Minimaler Abstand der Bebauung von der Straßenbegrenzungslinie.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None


class BPStrassenkoerper(BPGeometrieobjekt):
    """
    Flächen für Aufschüttungen, Abgrabungen und Stützmauern, soweit sie zur Herstellung des Straßenkörpers erforderlich sind (§9, Abs. 1, Nr. 26 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Notwendige Maßnahme zur Herstellung des Straßenkörpers.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Aufschuettung",
                        "alias": "Aufschüttung",
                        "description": "Aufschüttung",
                    },
                    "2000": {
                        "name": "Abgrabung",
                        "alias": "Abgrabung",
                        "description": "Abgrabung",
                    },
                    "3000": {
                        "name": "Stuetzmauer",
                        "alias": "Stützmauer",
                        "description": "Stützmauer",
                    },
                },
                "typename": "BP_StrassenkoerperHerstellung",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]


class BPUeberlagerungsobjekt(BPFlaechenobjekt):
    """
    Basisklasse für alle Objekte eines Bebauungsplans mit flächenhaftem Raumbezug, die immer Überlagerungsobjekte sind.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPUnverbindlicheVormerkung(BPGeometrieobjekt):
    """
    Unverbindliche Vormerkung späterer Planungsabsichten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    vormerkung: Annotated[
        str | None,
        Field(
            description="Text der Vormerkung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPVerEntsorgung(BPGeometrieobjekt):
    """
    Flächen und Leitungen für Versorgungsanlagen, für die Abfallentsorgung und Abwasserbeseitigung sowie für Ablagerungen (§9 Abs. 1, Nr. 12, 14 und Abs. 6 BauGB). Das gleiche Attribut darf nicht gleichzeitig in BP_VerEntsorgung und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestVerEntsorgung] | None,
        Field(
            description="Zweckbestimmung der Festsetzung..",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestVerEntsorgung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten der Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPVeraenderungssperre(BPUeberlagerungsobjekt):
    """
    Ausweisung einer Veränderungssperre, die nicht den gesamten Geltungsbereich des Plans umfasst.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    daten: Annotated[
        BPVeraenderungssperreDaten,
        Field(
            description="Daten der Veränderungssperre",
            json_schema_extra={
                "typename": "BP_VeraenderungssperreDaten",
                "stereotype": "DataType",
                "multiplicity": "1",
            },
        ),
    ]


class BPWaldFlaeche(BPFlaechenschlussobjekt):
    """
    Festsetzung von Waldflächen  (§ 9, Abs. 1, Nr. 18b BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestWald] | None,
        Field(
            description="Funktion der Waldfläche",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestWald",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    eigentumsart: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "12000",
            "12001",
            "2000",
            "20000",
            "20001",
            "3000",
            "9999",
        ]
        | None,
        Field(
            description="Festlegung der Eigentumsart des Waldes",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OeffentlicherWald",
                        "alias": "Öffentlicher Wald",
                        "description": "Öffentlicher Wald allgemein",
                    },
                    "1100": {
                        "name": "Staatswald",
                        "alias": "Staatswald",
                        "description": "Staatswald",
                    },
                    "1200": {
                        "name": "Koerperschaftswald",
                        "alias": "Körperschaftswald",
                        "description": "Körperschaftswald",
                    },
                    "12000": {
                        "name": "Kommunalwald",
                        "alias": "Kommunalwald",
                        "description": "Kommunalwald",
                    },
                    "12001": {
                        "name": "Stiftungswald",
                        "alias": "Stiftungswald",
                        "description": "Stiftungswald",
                    },
                    "2000": {
                        "name": "Privatwald",
                        "alias": "Privatwald",
                        "description": "Privatwald allgemein",
                    },
                    "20000": {
                        "name": "Gemeinschaftswald",
                        "alias": "Gemeinschaftswald",
                        "description": "Gemeinschaftswald",
                    },
                    "20001": {
                        "name": "Genossenschaftswald",
                        "alias": "Genossenschaftswald",
                        "description": "Genossenschaftswald",
                    },
                    "3000": {
                        "name": "Kirchenwald",
                        "alias": "Kirchenwald",
                        "description": "Kirchenwald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Wald",
                    },
                },
                "typename": "XP_EigentumsartWald",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    betreten: Annotated[
        list[Literal["1000", "2000", "3000", "4000"]] | None,
        Field(
            description="Festlegung zusätzlicher, normalerweise nicht-gestatteter Aktivitäten, die in dem Wald ausgeführt werden dürfen, nach §14 Abs. 2 Bundeswaldgesetz.",
            json_schema_extra={
                "typename": "XP_WaldbetretungTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Radfahren",
                        "alias": "Radfahren",
                        "description": "Radfahren",
                    },
                    "2000": {
                        "name": "Reiten",
                        "alias": "Reiten",
                        "description": "Reiten",
                    },
                    "3000": {
                        "name": "Fahren",
                        "alias": "Fahren",
                        "description": "Fahren",
                    },
                    "4000": {
                        "name": "Hundesport",
                        "alias": "Hundesport",
                        "description": "Hundesport",
                    },
                },
            },
        ),
    ] = None


class BPWegerecht(BPGeometrieobjekt):
    """
    Festsetzung von Flächen, die mit Geh-, Fahr-, und Leitungsrechten zugunsten der Allgemeinheit, eines Erschließungsträgers, oder eines beschränkten Personenkreises belastet sind  (§ 9 Abs. 1 Nr. 21 und Abs. 6 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[Literal["1000", "2000", "2500", "4000", "9999"]] | None,
        Field(
            description="Typ des Wegerechts",
            json_schema_extra={
                "typename": "BP_WegerechtTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Gehrecht",
                        "alias": "Gehrecht",
                        "description": "Gehrecht",
                    },
                    "2000": {
                        "name": "Fahrrecht",
                        "alias": "Fahrrecht",
                        "description": "Fahrrecht",
                    },
                    "2500": {
                        "name": "Radfahrrecht",
                        "alias": "Radfahrrecht",
                        "description": "Radfahrrecht",
                    },
                    "4000": {
                        "name": "Leitungsrecht",
                        "alias": "Leitungsrecht",
                        "description": "Leitungsrecht",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Nutzungsrecht",
                    },
                },
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Inhaber der Rechte.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    thema: Annotated[
        str | None,
        Field(
            description="Beschreibung des Rechtes.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    breite: Annotated[
        definitions.Length | None,
        Field(
            description="Breite des Wegerechts bei linienförmiger Ausweisung der Geometrie.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    istSchmal: Annotated[
        bool | None,
        Field(
            description='Gibt an, ob es sich um eine "schmale Fläche" handelt  gem. Planzeichen 15.5 der PlanZV handelt.',
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPWohngebaeudeFlaeche(BPFlaechenschlussobjekt):
    """
    Fläche für die Errichtung von Wohngebäuden in einem Bebauungsplan zur Wohnraumversorgung gemäß §9 Absatz 2d BauGB. Das Maß der baulichen Nutzung sowie Festsetzungen zur Bauweise oder Grenzbebauung können innerhalb einer BP_WohngebaeudeFlaeche unterschiedlich sein (BP_UeberbaubareGrundstueckeFlaeche). Das gleiche Attribut darf nicht gleichzeitig in BP_WohngebaeudeFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    dachgestaltung: Annotated[
        list[BPDachgestaltung] | None,
        Field(
            description="Parameter zur Einschränkung der zulässigen Dachformen.",
            json_schema_extra={
                "typename": "BP_Dachgestaltung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    FR: Annotated[
        definitions.Angle | None,
        Field(
            description="Vorgeschriebene Firstrichtung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    abweichungText: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Texliche Beschreibung der abweichenden Bauweise.",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wohnnutzungEGStrasse: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 1 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden \r\nim Erdgeschoss an der Straßenseite eine Wohnnutzung nicht oder nur ausnahmsweise zulässig ist.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zulaessig",
                        "alias": "Zulässig",
                        "description": "Generelle Zulässigkeit",
                    },
                    "2000": {
                        "name": "NichtZulaessig",
                        "alias": "Nicht zulässig",
                        "description": "Generelle Nicht-Zulässigkeit.",
                    },
                    "3000": {
                        "name": "AusnahmsweiseZulaessig",
                        "alias": "Ausnahmsweise zulässig",
                        "description": "Ausnahmsweise Zulässigkeit",
                    },
                },
                "typename": "BP_Zulaessigkeit",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZWohn: Annotated[
        int | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 1 bzw. nach  §6a Abs. (4) Nr. 2 BauNVO: Für besondere Wohngebiete und  urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden oberhalb eines im Bebauungsplan bestimmten Geschosses nur Wohnungen zulässig sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFAntWohnen: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFWohnen: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFAntGewerbe: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFGewerbe: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    VF: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung der maximal zulässigen Verkaufsfläche in einem Sondergebiet",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    typ: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Festlegung der zu errichtenden Gebäude gemäß  §9 Absatz 2d Nr. 1 - 3 BauGB",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "WohnGebaeude",
                        "alias": "Wohngebäude",
                        "description": "Flächen, auf denen Wohngebäude errichtet werden dürfen",
                    },
                    "2000": {
                        "name": "GebaeudeFoerderung",
                        "alias": "Gebäude Förderung",
                        "description": "Flächen, auf denen nur Gebäude errichtet werden dürfen, bei denen einzelne oder alle Wohnungen die baulichen Voraussetzungen für eine Förderung mit Mitteln der sozialen Wohnraumförderung erfüllen",
                    },
                    "3000": {
                        "name": "GebaeudeStaedtebaulicherVertrag",
                        "alias": "Gebäude Städtebaulicher Vertrag",
                        "description": "Flächen, auf denen nur Gebäude errichtet werden dürfen, bei denen sich ein Vorhabenträger hinsichtlich einzelner oder aller Wohnungen in einem städtebaulichen Vertrag verpflichtet, zum Zeitpunkt des Vertragsschlusses geltende Förderbedingungen der sozialen Wohnraumförderung, insbesondere die Mietpreisbindung, einzuhalten und die Einhaltung dieser Verpflichtung in geeigneter Weise sichergestellt wird",
                    },
                },
                "typename": "BP_TypWohngebaeudeFlaeche",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    abweichungBauNVO: Annotated[
        Literal["1000", "2000", "3000", "9999"] | None,
        Field(
            description="Art der zulässigen Abweichung von der BauNVO.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "EinschraenkungNutzung",
                        "alias": "Einschränkung Nutzung",
                        "description": "Einschränkung einer generell erlaubten Nutzung.",
                    },
                    "2000": {
                        "name": "AusschlussNutzung",
                        "alias": "Ausschluss Nutzung",
                        "description": "Ausschluss einer generell erlaubten Nutzung.",
                    },
                    "3000": {
                        "name": "AusweitungNutzung",
                        "alias": "Ausweitung Nutzung",
                        "description": "Eine nur ausnahmsweise zulässige Nutzung wird generell zulässig.",
                    },
                    "9999": {
                        "name": "SonstAbweichung",
                        "alias": "Sonstige Abweichung",
                        "description": "Sonstige Abweichung.",
                    },
                },
                "typename": "XP_AbweichungBauNVOTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweise: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bauweise  ( §9 Absatz 2d  BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OffeneBauweise",
                        "alias": "Offene Bauweise",
                        "token": "o",
                        "description": "Offene Bauweise",
                    },
                    "2000": {
                        "name": "GeschlosseneBauweise",
                        "alias": "Geschlossene Bauweise",
                        "token": "g",
                        "description": "Geschlossene Bauweise",
                    },
                    "3000": {
                        "name": "AbweichendeBauweise",
                        "alias": "Abweichende Bauweise",
                        "token": "a",
                        "description": "Abweichende Bauweise",
                    },
                },
                "typename": "BP_Bauweise",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweiseText: Annotated[
        str | None,
        Field(
            description="Textuelle Präzisierung oder Ergänzung der durch bauweise spezifizierten Bauweise.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichendeBauweise: Annotated[
        AnyUrl | None,
        Field(
            description='Nähere Bezeichnung einer "Abweichenden Bauweise" ("bauweise" == 3000).',
            json_schema_extra={
                "typename": "BP_AbweichendeBauweise",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vertikaleDifferenzierung: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob eine vertikale Differenzierung der Gebäude vorgeschrieben ist.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    bebauungsArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000"] | None,
        Field(
            description="Detaillierte Festsetzung der Bauweise (§9, Abs. 1, Nr. 2d BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhaeuser",
                        "alias": "Einzelhäuser",
                        "token": "E",
                        "description": "Nur Einzelhäuser zulässig.",
                    },
                    "2000": {
                        "name": "Doppelhaeuser",
                        "alias": "Doppelhäuser",
                        "token": "D",
                        "description": "Nur Doppelhäuser zulässig.",
                    },
                    "3000": {
                        "name": "Hausgruppen",
                        "alias": "Hausgruppen",
                        "token": "H",
                        "description": "Nur Hausgruppen zulässig.",
                    },
                    "4000": {
                        "name": "EinzelDoppelhaeuser",
                        "alias": "Einzel- und Doppelhäuser",
                        "token": "ED",
                        "description": "Nur Einzel- oder Doppelhäuser zulässig.",
                    },
                    "5000": {
                        "name": "EinzelhaeuserHausgruppen",
                        "alias": "Einzelhäuser Hausgruppen",
                        "token": "EH",
                        "description": "Nur Einzelhäuser oder Hausgruppen zulässig.",
                    },
                    "6000": {
                        "name": "DoppelhaeuserHausgruppen",
                        "alias": "Doppelhäuser und Hausgruppen",
                        "token": "DH",
                        "description": "Nur Doppelhäuser oder Hausgruppen zulässig.",
                    },
                    "7000": {
                        "name": "Reihenhaeuser",
                        "alias": "Reihenhäuser",
                        "token": "Rh",
                        "description": "Nur Reihenhäuser zulässig.",
                    },
                },
                "typename": "BP_BebauungsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungVordereGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der vorderen Grundstücksgrenze (§9, Abs. 1, Nr. 2d BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungRueckwaertigeGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der rückwärtigen Grundstücksgrenze (§9, Abs. 1, Nr. 2d BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungSeitlicheGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der seitlichen Grundstücksgrenze (§9, Abs. 1, Nr. 2d BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refGebaeudequerschnitt: Annotated[
        list[XPExterneReferenz] | None,
        Field(
            description="Referenz auf ein Dokument mit vorgeschriebenen Gebäudequerschnitten.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten einer Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPZentralerVersorgungsbereich(BPUeberlagerungsobjekt):
    """
    Zentraler Versorgungsbereich gem. § 9 Abs. 2a BauGB
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPZusatzkontingentLaermFlaeche(BPUeberlagerungsobjekt):
    """
    Flächenhafte Spezifikation von zusätzlichen Lärmemissionskontingenten für einzelne Richtungssektoren (DIN 45691, Anhang 2).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bezeichnung: Annotated[
        str | None,
        Field(
            description="Bezeichnung des Kontingentes",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    richtungssektor: Annotated[
        BPRichtungssektor,
        Field(
            description="Spezifikation des zugehörigen Richtungssektors",
            json_schema_extra={
                "typename": "BP_Richtungssektor",
                "stereotype": "DataType",
                "multiplicity": "1",
            },
        ),
    ]


class FPFlaechenobjekt(FPObjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit flächenhaftem Raumbezug (eine Einzelfläche oder eine Menge von Flächen, die sich nicht überlappen dürfen).  Die von FP_Flaechenobjekt abgeleiteten Fachobjekte können sowohl als Flächenschlussobjekte als auch als Überlagerungsobjekte auftreten.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Polygon | definitions.MultiPolygon,
        Field(
            description="Flächenhafter Raumbezug des Objektes (Eine Einzelfläche oder eine Menge von Flächen, die sich nicht überlappen dürfen).",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool,
        Field(
            description="Zeigt an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll. Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Flächennutzungsplans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class FPFlaechenschlussobjekt(FPFlaechenobjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit flächenhaftem Raumbezug, die auf Ebene 0 immer Flächenschlussobjekte sind.
    Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Flächennutzungsplans vollständig.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class FPGeometrieobjekt(FPObjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit variablem Raumbezug. Ein konkretes Objekt muss entweder punktförmigen, linienförmigen oder flächenhaften Raumbezug haben, gemischte Geometrie ist nicht zugelassen.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point
        | definitions.MultiPoint
        | definitions.Line
        | definitions.MultiLine
        | definitions.Polygon
        | definitions.MultiPolygon,
        Field(
            description="Raumbezug - Entweder punktförmig, linienförmig oder flächenhaft, gemischte Geometrie ist nicht zugelassen.",
            json_schema_extra={
                "typename": "XP_VariableGeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool | None,
        Field(
            description="Zeigt bei flächenhaftem Raumbezug an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll.\r\nFlächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des Flächennutzungsplans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    flussrichtung: Annotated[
        bool | None,
        Field(
            description="Das Attribut ist nur relevant, wenn ein Geometrieobjekt einen linienhaften Raumbezug hat. Ist es mit dem Wert true belegt, wird damit ausgedrückt, dass der Linie eine Flussrichtung  in Digitalisierungsrichtung zugeordnet ist. In diesem Fall darf bei Im- und Export die Digitalisierungsreihenfolge der Stützpunkte nicht geändert werden. Wie eine definierte Flussrichtung  zu interpretieren oder bei einer Plandarstellung zu visualisieren ist, bleibt der Implementierung überlassen.\r\nIst der Attributwert false oder das Attribut nicht belegt, ist die Digitalisierungsreihenfolge der Stützpunkte irrelevant.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Objektes bei punkförmigem Raumbezug als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class FPGruen(FPGeometrieobjekt):
    """
    Darstellung einer Grünfläche nach § 5, Abs. 2, Nr. 5 BauGB,
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestGruen] | None,
        Field(
            description="Zweckbestimmung der Grünfläche.",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestGruen",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    nutzungsform: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Nutzungsform der Grünfläche.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Privat",
                        "alias": "Privat",
                        "token": "p",
                        "description": "Private Nutzung",
                    },
                    "2000": {
                        "name": "Oeffentlich",
                        "alias": "Öffentlich",
                        "token": "ö",
                        "description": "Öffentliche Nutzung",
                    },
                },
                "typename": "XP_Nutzungsform",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Begünstigter der Ausweisung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPKeineZentrAbwasserBeseitigungFlaeche(FPFlaechenobjekt):
    """
    Baufläche, für die eine zentrale Abwasserbeseitigung nicht vorgesehen ist (§ 5, Abs. 2, Nr. 1 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class FPKennzeichnung(FPGeometrieobjekt):
    """
    Kennzeichnung gemäß §5 Abs. 3 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[
            Literal[
                "1000", "2000", "3000", "4000", "5000", "6000", "7000", "8000", "9999"
            ]
        ]
        | None,
        Field(
            description="Zweckbestimmung der Kennzeichnung.",
            json_schema_extra={
                "typename": "XP_ZweckbestimmungKennzeichnung",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Naturgewalten",
                        "alias": "Naturgewalten",
                        "description": "Flächen, bei deren Bebauung besondere bauliche Sicherungsmanahmen gegen Naturgewalten erforderlich sind (§5 Abs. 3 Nr. 1 und §9 Abs.5 Nr.1 BauGB ).",
                    },
                    "2000": {
                        "name": "Abbauflaeche",
                        "alias": "Abbaufläche",
                        "description": "Flächen, die für den Abbau von Mineralien bestimmt sind (§5 Abs. 3 Nr. 2 und §9 Abs. 5 Nr. 2 BauGB).",
                    },
                    "3000": {
                        "name": "AeussereEinwirkungen",
                        "alias": "Äußere Einwirkungen",
                        "description": "Flächen, bei deren Bebauung besondere bauliche Sicherungsmanahmen gegen äußere Einwirkungen erforderlich sind (§5 Abs. 3 Nr. 1 und §9 Abs. 5 Nr. 1  BauGB ).",
                    },
                    "4000": {
                        "name": "SchadstoffBelastBoden",
                        "alias": "Schadstoffbelasteter Boden",
                        "description": "Für bauliche Nutzung vorgesehene Flächen, deren Böden erheblich mit umweltgefährdenden Stoffen belastet sind (§5 Abs. 3 Nr. 3 und §9 Abs. 5 Nr. 3 BauGB).",
                    },
                    "5000": {
                        "name": "LaermBelastung",
                        "alias": "Lärmbelastung",
                        "description": "Für bauliche Nutzung vorgesehene Flächen, die erheblicher Lärmbelastung ausgesetzt sind.",
                    },
                    "6000": {
                        "name": "Bergbau",
                        "alias": "Bergbau",
                        "description": "Flächen, unter denen der Bergbau umgeht  (§5, Abs. 3, Nr. 2 und §9, Abs. 5, Nr. 2. BauGB).",
                    },
                    "7000": {
                        "name": "Bodenordnung",
                        "alias": "Bodenordnung",
                        "description": "Für Bodenordnungsmanahmen vorgesehene Gebiete, \r\nz.B. Gebiete für Umlegungen oder Flurbereinigung",
                    },
                    "8000": {
                        "name": "Vorhabensgebiet",
                        "alias": "Vorhabensgebiet",
                        "description": "Räumlich besonders gekennzeichnetes Vorhabengebiets, das kleiner als der Geltungsbereich ist, innerhalb eines vorhabenbezogenen BPlans.",
                    },
                    "9999": {
                        "name": "AndereGesetzlVorschriften",
                        "alias": "Andere gesetzliche Vorschriften",
                        "description": "Kennzeichnung nach anderen gesetzlichen Vorschriften.",
                    },
                },
            },
        ),
    ] = None
    istVerdachtsflaeche: Annotated[
        bool | None,
        Field(
            description="Legt fest, ob eine Altlast-Verdachtsfläche vorliegt",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Nummer in einem Altlastkataster",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPLandwirtschaft(FPGeometrieobjekt):
    """
    Darstellung einer Landwirtschaftsfläche nach §5, Abs. 2, Nr. 9a.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestLandwirtschaft] | None,
        Field(
            description="Zweckbestimmungen der Ausweisung",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestLandwirtschaft",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class FPLinienobjekt(FPObjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit linienförmigem Raumbezug (eine einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen zusammengesetzt sein kann, oder eine Menge derartiger Kurven).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Line | definitions.MultiLine,
        Field(
            description="Linienförmiger Raumbezug (Einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen aufgebaut ist, oder eine Menge derartiger Kurven).",
            json_schema_extra={
                "typename": "XP_Liniengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class FPNutzungsbeschraenkung(FPGeometrieobjekt):
    """
    Umgrenzungen von Flächen für Nutzungsbeschränkungen oder für Vorkehrungen zum Schutz gegen schädliche Umwelteinwirkungen im Sinne des Bundes-Immissionsschutzgesetzes (§ 5, Abs. 2, Nr. 6 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    nutzung: Annotated[
        str | None,
        Field(
            description="Festgesetzte Nutzung der Fläche",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    typ: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Differenzierung der Fläche gemäß BauGB",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Schutzflaeche",
                        "alias": "Schutzfläche",
                        "description": "Von der Bebauung freizuhaltende Schutzfläche nach §9 Abs. 1 Nr. 24 BauGB",
                    },
                    "2000": {
                        "name": "BesondereAnlagenVorkehrungen",
                        "alias": "Besondere Anlagen oder Vorkehrungen",
                        "description": "Fläche für besondere Anlagen und Vorkehrungen zum Schutz vor schädlichen Umwelteinwirkungen nach §9 Abs. 1 Nr. 24 oder §5 Abs.2 Nr.6 BauGB",
                    },
                },
                "typename": "XP_ImmissionsschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    technVorkehrung: Annotated[
        Literal["1000", "10000", "10001", "10002", "9999"] | None,
        Field(
            description="Klassifizierung der auf der Fläche zu treffenden baulichen oder sonstigen technischen Vorkehrungen",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Laermschutzvorkehrung",
                        "alias": "Lärmschutzvorkehrung",
                        "description": "Allgemeine Lärmschutzvorkehrung",
                    },
                    "10000": {
                        "name": "FassadenMitSchallschutzmassnahmen",
                        "alias": "Fassaden mit Schallschutzmaßnahmen",
                        "description": "Fassaden mit Schallschutzmaßnahmen",
                    },
                    "10001": {
                        "name": "Laermschutzwand",
                        "alias": "Lärmschutzwand",
                        "description": "Lärmschutzwand",
                    },
                    "10002": {
                        "name": "Laermschutzwall",
                        "alias": "Lärmschutzwall",
                        "description": "Lärmschutzwall",
                    },
                    "9999": {
                        "name": "SonstigeVorkehrung",
                        "alias": "Sonstige Vorkehrung",
                        "description": "Sonstige Vorkehrung zum Immissionsschutz",
                    },
                },
                "typename": "XP_TechnVorkehrungenImmissionsschutz",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detaillierteTechnVorkehrung: Annotated[
        AnyUrl | None,
        Field(
            description="Detaillierte Klassifizierung der auf der Fläche zu treffenden baulichen oder sonstigen technischen Vorkehrungen.",
            json_schema_extra={
                "typename": "XP_DetailTechnVorkehrungImmissionsschutz",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPPrivilegiertesVorhaben(FPGeometrieobjekt):
    """
    Standorte für privilegierte Außenbereichsvorhaben und für sonstige Anlagen in Außenbereichen gem. § 35 Abs. 1 und 2 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[
            Literal[
                "1000",
                "10000",
                "10001",
                "10002",
                "10003",
                "10004",
                "1200",
                "12000",
                "12001",
                "12002",
                "12003",
                "12004",
                "12005",
                "1400",
                "1600",
                "16000",
                "16001",
                "16002",
                "1800",
                "18000",
                "18001",
                "18002",
                "18003",
                "2000",
                "20000",
                "20001",
                "9999",
                "99990",
                "99991",
            ]
        ]
        | None,
        Field(
            description="Zweckbestimmungen des Vorhabens.",
            json_schema_extra={
                "typename": "FP_ZweckbestimmungPrivilegiertesVorhaben",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "LandForstwirtschaft",
                        "alias": "Land- und Forstwirtschaft",
                        "description": 'Allgemeines Vorhaben nach §35 Abs. 1 Nr. 1 oder 2 BauGB: Vorhaben, dass "einem land- oder forstwirtschaftlichen Betrieb dient und nur einen untergeordneten Teil der Betriebsfläche einnimmt", oder "einem Betrieb der gartenbaulichen Erzeugung dient".',
                    },
                    "10000": {
                        "name": "Aussiedlerhof",
                        "alias": "Aussiedlerhof",
                        "description": "Aussiedlerhof",
                    },
                    "10001": {
                        "name": "Altenteil",
                        "alias": "Altenteil",
                        "description": "Altenteil",
                    },
                    "10002": {
                        "name": "Reiterhof",
                        "alias": "Reiterhof",
                        "description": "Reiterhof",
                    },
                    "10003": {
                        "name": "Gartenbaubetrieb",
                        "alias": "Gartenbaubetrieb",
                        "description": "Gartenbaubetrieb",
                    },
                    "10004": {
                        "name": "Baumschule",
                        "alias": "Baumschule",
                        "description": "Baumschule",
                    },
                    "1200": {
                        "name": "OeffentlicheVersorgung",
                        "alias": "Öffentliche Versorgung",
                        "description": 'Allgemeines Vorhaben nach § 35 Abs. 1 Nr. 3 BauBG: Vorhaben dass "der öffentlichen Versorgung mit Elektrizität, Gas,\r\nTelekommunikationsdienstleistungen, Wärme und Wasser, der Abwasserwirtschaft" ... dient.',
                    },
                    "12000": {
                        "name": "Wasser",
                        "alias": "Wasser",
                        "description": "Öffentliche Wasserversorgung",
                    },
                    "12001": {
                        "name": "Gas",
                        "alias": "Gas",
                        "description": "Gasversorgung",
                    },
                    "12002": {
                        "name": "Waerme",
                        "alias": "Wärme",
                        "description": "Versorgung mit Fernwärme",
                    },
                    "12003": {
                        "name": "Elektrizitaet",
                        "alias": "Elektrizität",
                        "description": "Versorgung mit Elektrizität.",
                    },
                    "12004": {
                        "name": "Telekommunikation",
                        "alias": "Telekommunikation",
                        "description": "Versorgung mit Telekommunikations-Dienstleistungen.",
                    },
                    "12005": {
                        "name": "Abwasser",
                        "alias": "Abwasser",
                        "description": "Abwasser Entsorgung",
                    },
                    "1400": {
                        "name": "OrtsgebundenerGewerbebetrieb",
                        "alias": "Ortsgebundener Gewerbebetrieb",
                        "description": 'Vorhaben nach §35 Abs. 1 Nr. 3 BauGB: Vorhaben das ...."einem ortsgebundenen gewerblichen Betrieb dient".',
                    },
                    "1600": {
                        "name": "BesonderesVorhaben",
                        "alias": "Besonderes Vorhaben",
                        "description": 'Vorhaben nach §35 Abs. 1 Nr. 4 BauGB: Vorhaben, dass "wegen seiner besonderen Anforderungen an die Umgebung, wegen seiner nachteiligen Wirkung auf die Umgebung oder wegen seiner besonderen Zweckbestimmung nur im Außenbereich ausgeführt werden soll".',
                    },
                    "16000": {
                        "name": "BesondereUmgebungsAnforderung",
                        "alias": "Besondere Umgebungs-Anforderung",
                        "description": "Vorhaben dass wegen seiner besonderen Anforderungen an die Umgebung nur im Außenbereich durchgeführt werden soll.",
                    },
                    "16001": {
                        "name": "NachteiligeUmgebungsWirkung",
                        "alias": "Nachteilige Umgebungs-Wirkung",
                        "description": "Vorhaben dass wegen seiner nachteiligen Wirkung auf die Umgebung nur im Außenbereich durchgeführt werden soll.",
                    },
                    "16002": {
                        "name": "BesondereZweckbestimmung",
                        "alias": "Besondere Zweckbestimmung",
                        "description": "Vorhaben dass wegen seiner besonderen Zweckbestimmung nur im Außenbereich durchgeführt werden soll.",
                    },
                    "1800": {
                        "name": "ErneuerbareEnergien",
                        "alias": "Erneuerbare Energien",
                        "description": 'Allgemeine Vorhaben nach §35 Abs. 1 Nr. 4 BauGB: Vorhaben, dass "wegen seiner besonderen Anforderungen an die Umgebung, wegen seiner nachteiligen Wirkung auf die Umgebung oder wegen seiner besonderen Zweckbestimmung nur im Außenbereich ausgeführt werden soll".',
                    },
                    "18000": {
                        "name": "Windenergie",
                        "alias": "Windenergie",
                        "description": "Vorhaben zur Erforschung, Entwicklung oder Nutzung der Windenergie.",
                    },
                    "18001": {
                        "name": "Wasserenergie",
                        "alias": "Wasserenergie",
                        "description": "Vorhaben zur Erforschung, Entwicklung oder Nutzung der Wasserenergie.",
                    },
                    "18002": {
                        "name": "Solarenergie",
                        "alias": "Solarenergie",
                        "description": "Vorhaben zur Erforschung, Entwicklung oder Nutzung der Solarenergie.",
                    },
                    "18003": {
                        "name": "Biomasse",
                        "alias": "Biomasse",
                        "description": "Vorhaben zur energetischen Nutzung der Biomasse.",
                    },
                    "2000": {
                        "name": "Kernenergie",
                        "alias": "Kernenergie",
                        "description": 'Vorhaben nach §35 Abs. 1 Nr. 7 BauGB: Vorhaben das "der Erforschung, Entwicklung oder Nutzung der Kernenergie zu friedlichen Zwecken oder der Entsorgung radioaktiver Abfälle dient".',
                    },
                    "20000": {
                        "name": "NutzungKernerergie",
                        "alias": "Nutzung Kernenergie",
                        "description": "Vorhaben der Erforschung, Entwicklung oder Nutzung der Kernenergie zu friedlichen Zwecken.",
                    },
                    "20001": {
                        "name": "EntsorgungRadioaktiveAbfaelle",
                        "alias": "Entsorgung radioaktiver Abfälle",
                        "description": "Vorhaben zur Entsorgung radioaktiver Abfälle.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Vorhaben im Aussenbereich nach §35 Abs. 2 BauGB.",
                    },
                    "99990": {
                        "name": "StandortEinzelhof",
                        "alias": "Standort Einzelhof",
                        "description": "Einzelhof",
                    },
                    "99991": {
                        "name": "BebauteFlaecheAussenbereich",
                        "alias": "Bebaute Fläche Außenbereich",
                        "description": "Bebaute Fläche im Außenbereich",
                    },
                },
            },
        ),
    ] = None
    vorhaben: Annotated[
        str | None,
        Field(
            description="Nähere Beschreibung des Vorhabens.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPSchutzPflegeEntwicklung(FPGeometrieobjekt):
    """
    Umgrenzung von Flächen für Maßnahmen zum Schutz, zur Pflege und zur Entwicklung von Natur und Landschaft (§5 Abs. 2, Nr. 10 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der Maßnahmen",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Attribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Durchzuführende Maßnahme.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    istAusgleich: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob die Maßnahme zum Ausgleich eines Eingriffs benutzt wird.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class FPSpielSportanlage(FPGeometrieobjekt):
    """
    Darstellung von Flächen für Spiel- und Sportanlagen nach §5,  Abs. 2, Nr. 2 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestSpielSportanlage] | None,
        Field(
            description="Allgemeine Zweckbestimmung der Fläche.",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestSpielSportanlage",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Bebünstigter der Ausweisung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPUeberlagerungsobjekt(FPFlaechenobjekt):
    """
    Basisklasse für alle Objekte eines Flächennutzungsplans mit flächenhaftem Raumbezug, die immer Überlagerungsobjekte sind.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class FPUnverbindlicheVormerkung(FPGeometrieobjekt):
    """
    Unverbindliche Vormerkung späterer Planungsabsichten
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    vormerkung: Annotated[
        str | None,
        Field(
            description="Text der Vormerkung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPVerEntsorgung(FPGeometrieobjekt):
    """
    Flächen für Versorgungsanlagen, für die Abfallentsorgung und Abwasserbeseitigung sowie für Ablagerungen (§5, Abs. 2, Nr. 4 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestVerEntsorgung] | None,
        Field(
            description="Zweckbestimmung der Fläche.",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestVerEntsorgung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten der Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPVorbehalteFlaeche(FPFlaechenobjekt):
    """
    Flächen auf denen bestimmte Vorbehalte wirksam sind.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    vorbehalt: Annotated[
        str | None,
        Field(
            description="Textliche Formulierung des Vorbehalts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPWaldFlaeche(FPFlaechenschlussobjekt):
    """
    Darstellung von Waldflächen nach §5, Abs. 2, Nr. 9b,
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestWald] | None,
        Field(
            description="Funktion der Waldfläche.",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestWald",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    eigentumsart: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "12000",
            "12001",
            "2000",
            "20000",
            "20001",
            "3000",
            "9999",
        ]
        | None,
        Field(
            description="Festlegung der Eigentumsart des Waldes",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OeffentlicherWald",
                        "alias": "Öffentlicher Wald",
                        "description": "Öffentlicher Wald allgemein",
                    },
                    "1100": {
                        "name": "Staatswald",
                        "alias": "Staatswald",
                        "description": "Staatswald",
                    },
                    "1200": {
                        "name": "Koerperschaftswald",
                        "alias": "Körperschaftswald",
                        "description": "Körperschaftswald",
                    },
                    "12000": {
                        "name": "Kommunalwald",
                        "alias": "Kommunalwald",
                        "description": "Kommunalwald",
                    },
                    "12001": {
                        "name": "Stiftungswald",
                        "alias": "Stiftungswald",
                        "description": "Stiftungswald",
                    },
                    "2000": {
                        "name": "Privatwald",
                        "alias": "Privatwald",
                        "description": "Privatwald allgemein",
                    },
                    "20000": {
                        "name": "Gemeinschaftswald",
                        "alias": "Gemeinschaftswald",
                        "description": "Gemeinschaftswald",
                    },
                    "20001": {
                        "name": "Genossenschaftswald",
                        "alias": "Genossenschaftswald",
                        "description": "Genossenschaftswald",
                    },
                    "3000": {
                        "name": "Kirchenwald",
                        "alias": "Kirchenwald",
                        "description": "Kirchenwald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Wald",
                    },
                },
                "typename": "XP_EigentumsartWald",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    betreten: Annotated[
        list[Literal["1000", "2000", "3000", "4000"]] | None,
        Field(
            description="Festlegung zusätzlicher, normalerweise nicht-gestatteter Aktivitäten, die in dem Wald ausgeführt werden dürfen, nach §14 Abs. 2 Bundeswaldgesetz.",
            json_schema_extra={
                "typename": "XP_WaldbetretungTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Radfahren",
                        "alias": "Radfahren",
                        "description": "Radfahren",
                    },
                    "2000": {
                        "name": "Reiten",
                        "alias": "Reiten",
                        "description": "Reiten",
                    },
                    "3000": {
                        "name": "Fahren",
                        "alias": "Fahren",
                        "description": "Fahren",
                    },
                    "4000": {
                        "name": "Hundesport",
                        "alias": "Hundesport",
                        "description": "Hundesport",
                    },
                },
            },
        ),
    ] = None


class FPZentralerVersorgungsbereich(FPUeberlagerungsobjekt):
    """
    Darstellung nach § 5 Abs. 2 Nr. 2d (Ausstattung des Gemeindegebietes mit zentralen Versorgungsbereichen).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    auspraegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte Ausprägung eines zentralen Versorgungsbereiches.",
            json_schema_extra={
                "typename": "FP_ZentralerVersorgungsbereichAuspraegung",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPGeometrieobjekt(LPObjekt):
    """
    Basisklasse für alle Objekte eines Landschaftsplans mit variablem Raumbezug. Ein konkretes Objekt muss entweder punktförmigen, linienförmigen oder flächenhaften Raumbezug haben, gemischte Geometrie ist nicht zugelassen.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point
        | definitions.MultiPoint
        | definitions.Line
        | definitions.MultiLine
        | definitions.Polygon
        | definitions.MultiPolygon,
        Field(
            description="Raumbezug - Entweder punktförmig, linienförmig oder flächenhaft, gemischte Geometrie ist nicht zugelassen.",
            json_schema_extra={
                "typename": "XP_VariableGeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool | None,
        Field(
            description="Zeigt bei flächenhaftem Raumbezug an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll. Das Attribut ist nur relevant, wenn das Objekt in einem Planwerk mit Flächenschluss verwendet wird. Ansonsten sollte das Attribut nicht belegt oder mit dem Wert false belegt werden.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    flussrichtung: Annotated[
        bool | None,
        Field(
            description="Das Attribut ist nur relevant, wenn ein Geometrieobjekt einen linienhaften Raumbezug hat. Ist es mit dem Wert true belegt, wird damit ausgedrückt, dass der Linie eine Flussrichtung  in Digitalisierungsrichtung zugeordnet ist. In diesem Fall darf bei Im- und Export die Digitalisierungsreihenfolge der Stützpunkte nicht geändert werden. Wie eine definierte Flussrichtung  zu interpretieren oder bei einer Plandarstellung zu visualisieren ist, bleibt der Implementierung überlassen.\r\nIst der Attributwert false oder das Attribut nicht belegt, ist die Digitalisierungsreihenfolge der Stützpunkte irrelevant.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Objektes bei punkförmigem Raumbezug als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class LPSchutzBestimmterTeileVonNaturUndLandschaft(LPGeometrieobjekt):
    """
    Schutzgebietskategorien gemäß Kapitel 4 BNatSchG „Schutz bestimmter Teile von Natur und Landschaft“.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "1700",
            "1800",
            "18000",
            "18001",
            "2000",
            "9999",
        ],
        Field(
            description="Kategorien der Schutzgebiete und sonstigen geschützten Bestandteilen von Natur und Landschaft nach Kap. 4 Bundesnaturschutzgesetz (BNatSchG) und Landes-Naturschutzgesetzen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Naturschutzgebiet",
                        "alias": "Naturschutzgebiet",
                        "description": "Naturschutzgebiet gemäß §23 BNatSchG.",
                    },
                    "1100": {
                        "name": "Nationalpark",
                        "alias": "Nationalpark",
                        "description": "Nationalpark gemäß §24 BNatSchG",
                    },
                    "1200": {
                        "name": "Biosphaerenreservat",
                        "alias": "Biosphärenreservat",
                        "description": "Biosphärenreservat gemäß §25 BNatSchG.",
                    },
                    "1300": {
                        "name": "Landschaftsschutzgebiet",
                        "alias": "Landschaftsschutzgebiet",
                        "description": "Landschaftsschutzgebiet gemäß §26 BNatSchG.",
                    },
                    "1400": {
                        "name": "Naturpark",
                        "alias": "Naturpark",
                        "description": "Naturpark gemäß §27 BNatSchG.",
                    },
                    "1500": {
                        "name": "Naturdenkmal",
                        "alias": "Naturdenkmal",
                        "description": "Naturdenkmal gemäß §28 BNatSchG.",
                    },
                    "1600": {
                        "name": "GeschuetzterLandschaftsBestandteil",
                        "alias": "Geschützter Landschaftsbestandteil",
                        "description": "Geschützter Bestandteil der Landschaft gemäß §29 BNatSchG.",
                    },
                    "1700": {
                        "name": "GesetzlichGeschuetztesBiotop",
                        "alias": "Gesetzlich geschütztes Biotop",
                        "description": "Gesetzlich geschützte Biotope gemäß §30 BNatSchG.",
                    },
                    "1800": {
                        "name": "Natura2000",
                        "alias": "Natura 2000",
                        "description": 'Schutzgebiet nach Europäischem Recht. Dies umfasst das "Gebiet Gemeinschaftlicher Bedeutung" (FFH-Gebiet) und das "Europäische Vogelschutzgebiet"',
                    },
                    "18000": {
                        "name": "GebietGemeinschaftlicherBedeutung",
                        "alias": "Gebiet gemeinschaftlicher Bedeutung",
                        "description": "Gebiete von gemeinschaftlicher Bedeutung",
                    },
                    "18001": {
                        "name": "EuropaeischesVogelschutzgebiet",
                        "alias": "Europäisches Vogelschutzgebiet",
                        "description": "Europäische Vogelschutzgebiete",
                    },
                    "2000": {
                        "name": "NationalesNaturmonument",
                        "alias": "Nationales Naturmonument",
                        "description": "Nationales Naturmonument gemäß §24 Abs. (4)  BNatSchG.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Schutzgebietskategorie (z.B. geschützte Parkanlagen), siehe artDerFestlegungText.",
                    },
                },
                "typename": "LP_KlassifizierungNaturschutzrecht",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    artDerFestlegungText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstige Schutzgebietskategorie oder ergänzende Information zu ausgewählten Schutzgebietskategorien.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstandSchG: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "9999"],
        Field(
            description="Rechtsstand des Schutzgebiets oder des geschützten Bestandteils von Natur und Landschaft.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Geplant",
                        "alias": "Geplant",
                        "description": "Schutzgebiet geplant.",
                    },
                    "2000": {
                        "name": "Bestehend",
                        "alias": "Bestehend",
                        "description": "Das Schutzgebiet besteht.",
                    },
                    "3000": {
                        "name": "Fortfallend",
                        "alias": "Fortfallend",
                        "description": "Schutzgebiet fortfallend, untergegangen oder aufgehoben.",
                    },
                    "4000": {
                        "name": "Eignung",
                        "alias": "Eignung",
                        "description": "Als Schutzgebiet geeignet.",
                    },
                    "5000": {
                        "name": "Erweiterung",
                        "alias": "Erweiterung",
                        "description": "Erweiterung eines bestehenden Schutzgebiets.",
                    },
                    "6000": {
                        "name": "Qualifizierung",
                        "alias": "Qualifizierung",
                        "description": "Qualifizierung eines Schutzgebietes  (z.B. Änderung der Schutzgebietsverordnung, Änderung der Schutzgebietskategorie usw.)",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Rechtsstand (siehe rechtsstandSchGText).",
                    },
                },
                "typename": "LP_RechtsstandSchutzGeb",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    rechtsstandSchGText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstigem Rechtsstand (wenn rechtsstandSchG = 9999) oder ergänzende Information zu ausgewähltem Rechtsstand.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description='Name des Schutzgebietes, z.B. "Leineaue zwischen Ruthe und Koldingen".',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description='Schutzgebietsnummer, eindeutiges Kennzeichen des Gebiets, z.B. "NSG HA 203".',
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gesetzlGeschBiotop: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "9999"] | None,
        Field(
            description="Angabe einer gesetzlich geschützten Biotoptypen-Art gemäß §30 Abs. 2 Ziffern 1-6 BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "GewaesserBiotope",
                        "alias": "Gewässerbiotope",
                        "description": "Natürliche oder naturnahe Bereiche fließender und stehender Binnengewässer einschließlich ihrer Ufer und der dazugehörigen uferbegleitenden natürlichen oder naturnahen Vegetation sowie ihrer natürlichen oder naturnahen Verlandungsbereiche, Altarme und regelmäßig überschwemmten Bereiche (gemäß §30 Abs. 2 Ziffern 1 BNatSchG).",
                    },
                    "2000": {
                        "name": "FeuchtNassBiotope",
                        "alias": "Feucht- und Nassbiotope",
                        "description": "Moore, Sümpfe, Röhrichte, Großseggenrieder, seggen- und binsenreiche Nasswiesen, Quellbereiche, Binnenlandsalzstellen (gemäß §30 Abs. 2 Ziffern 2 BNatSchG).",
                    },
                    "3000": {
                        "name": "TrockenBiotope",
                        "alias": "Trockenbiotope",
                        "description": "Offene Binnendünen, offene natürliche Block-, Schutt- und Geröllhalden, Lehm- und Lösswände, Zwergstrauch-, Ginster- und Wacholderheiden, Borstgrasrasen, Trockenrasen, Schwermetallrasen, Wälder und Gebüsche trockenwarmer Standorte (gemäß §30 Abs. 2 Ziffern 3 BNatSchG).",
                    },
                    "4000": {
                        "name": "WaldBiotope",
                        "alias": "Waldbiotope",
                        "description": "Bruch-, Sumpf- und Auenwälder, Schlucht-, Blockhalden- und Hangschuttwälder, subalpine Lärchen- und Lärchen-Arvenwälder (gemäß §30 Abs. 2 Ziffern 4 BNatSchG).",
                    },
                    "5000": {
                        "name": "FelsenAlpinBiotope",
                        "alias": "Felsen, alpine Biotope",
                        "description": "Offene Felsbildungen, Höhlen sowie naturnahe Stollen, alpine Rasen sowie Schneetälchen und Krummholzgebüsche (gemäß §30 Abs. 2 Ziffern 5 BNatSchG).",
                    },
                    "6000": {
                        "name": "KuestenBiotope",
                        "alias": "Küstenbiotope",
                        "description": "Fels- und Steilküsten, Küstendünen und Strandwälle, Strandseen, Boddengewässer mit Verlandungsbereichen, Salzwiesen und Wattflächen im Küstenbereich, Seegraswiesen und sonstige marine Makrophytenbestände, Riffe, sublitorale Sandbänke, Schlickgründe mit bohrender Bodenmegafauna sowie artenreiche Kies-, Grobsand- und Schilfgründe im Meeres- und Küstenbereich (gemäß §30 Abs. 2 Ziffern 6 BNatSchG).",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige gesetzlich geschützte Biotope, siehe gesetzlGeschBiotopText und / oder detailGesetzlGeschBiotopLR.",
                    },
                },
                "typename": "LP_GesGeschBiotopTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gesetzlGeschBiotopText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstige gesetzlich geschützte Biotope (wenn gesetzlichGeschuetztBiotop = 9999) oder ergänzende Information zu anderem ausgewählten gesetzlich geschütztem Biotoptyp.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailGesetzlGeschBiotopLR: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte weitere gesetzlich geschützte Biotope z.B. nach Landesrecht.",
            json_schema_extra={
                "typename": "LP_DetailGesetzlGeschBiotopLR",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    schutzzone: Annotated[
        Literal["1000", "1100", "1200", "2000", "2100", "2200", "2300", "9999"] | None,
        Field(
            description="Angabe der Schutzzone für zonierte Schutzgebiete, insbesondere Biosphärenreservate und Nationalparke.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Schutzzone_1",
                        "alias": "Schutzzone 1",
                        "description": "Schutzzone 1",
                    },
                    "1100": {
                        "name": "Schutzzone_2",
                        "alias": "Schutzzone 2",
                        "description": "Schutzzone 2",
                    },
                    "1200": {
                        "name": "Schutzzone_3",
                        "alias": "Schutzzone 3",
                        "description": "Schutzzone 3",
                    },
                    "2000": {
                        "name": "Kernzone",
                        "alias": "Kernzone",
                        "description": "Kernzone",
                    },
                    "2100": {
                        "name": "Pflegezone",
                        "alias": "Pflegezone",
                        "description": "Pflegezone",
                    },
                    "2200": {
                        "name": "Entwicklungszone",
                        "alias": "Entwicklungszone",
                        "description": "Entwicklungszone",
                    },
                    "2300": {
                        "name": "Regenerationszone",
                        "alias": "Regenerationszone",
                        "description": "Regenerationszone",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Zone, siehe schutzZoneText.",
                    },
                },
                "typename": "LP_SchutzzonenNaturschutzrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    schutzzonenText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstige Schutzzone (Konformitätsregel, wenn schutzzone = 9999, dann Belegung Pflicht oder ergänzende Information zu ausgewählten Schutzzonen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPTextAbschnittObjekt(LPGeometrieobjekt):
    """
    Bereich, in dem bestimmte textliche Festsetzungen gültig sind, die über die Relation "refTextInhalt" (Basisklasse XP_Objekt) spezifiziert werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class LPZieleErfordernisseMassnahmen(LPGeometrieobjekt):
    """
    Ziele, Erfordernisse und Maßnahmen für Naturschutz und Landschaftspflege gem. Kapitel 2 BNatSchG.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zieleErfordernisseMassnahmen: Annotated[
        list[Literal["1000", "2000", "3000"]],
        Field(
            description="Zeigt an, ob es sich bei dem Objekt um ein Ziel, ein Erfordernis und/oder um eine Maßnahme gemäß Kapitel 2 BNatSchG handelt.",
            json_schema_extra={
                "typename": "LP_ZEMTyp",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "Ziel",
                        "alias": "Ziel",
                        "description": "Zeigt an, dasses sich bei dem Objekt um ein für den Planungsraum konkretisiertes Ziel gemäß Kapitel 2 BNatSchG handelt.",
                    },
                    "2000": {
                        "name": "Erfordernis",
                        "alias": "Erfordernis",
                        "description": "Zeigt an, ob es sich bei dem Objekt um ein Erfordernis zur Verwirklichung der konkretisierten Ziele gemäß Kapitel 2 BNatSchG handelt. Erfordernisse sind Anforderungen an andere Fachplanungen und Landnutzungen (u. a. Wasserwirtschaft, Land- und Forstwirtschaft). Sie beschreiben, „welche planerischen oder praktischen Aktivitäten von anderen Planungsträgern im Rahmen ihres Mitwirkungsauftrages bei der Erfüllung der Ziele des Naturschutzes und der Landschaftspflege erwartet werden“ (§ 9 Abs. 3 und 5 BNatSchG).",
                    },
                    "3000": {
                        "name": "Massnahme",
                        "alias": "Maßnahme",
                        "description": "Zeigt an, ob es sich bei dem Objekt um eine Maßnahme zur Verwirklichung der konkretisierten Ziele gemäß Kapitel 2 BNatSchG handelt.",
                    },
                },
            },
            min_length=1,
        ),
    ]
    schutzgut: Annotated[
        list[LPSchutzgutKomplex],
        Field(
            description="Angaben zum Schutzgut / zu den Schutzgütern.",
            json_schema_extra={
                "typename": "LP_SchutzgutKomplex",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    zielDimNatSchLaPfl: Annotated[
        list[LPZielDimNatSchLaPflKomplex],
        Field(
            description="Zieldimension von Naturschutz und Landschaftspflege; Teilziele des Naturschutzes und der Landschaftspflege gemäß § 1 Abs. 1 Ziffern 1. bis 3. BNatSchG",
            json_schema_extra={
                "typename": "LP_ZielDimNatSchLaPflKomplex",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    adressat: Annotated[
        list[LPAdressatKomplex],
        Field(
            description="Adressat(en), an den oder die sich die Aussage der Landschaftsplanung richtet.",
            json_schema_extra={
                "typename": "LP_AdressatKomplex",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    schutzPflegeEntwicklung: Annotated[
        list[LPSPEKomplex],
        Field(
            description="Differenzierung Schutz-, Pflege und Entwicklungsziele von Naturschutz und Landschaftspflege.",
            json_schema_extra={
                "typename": "LP_SPEKomplex",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    biologischeVielfalt: Annotated[
        list[LPBiologischeVielfaltKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand „Biologische Vielfalt“",
            json_schema_extra={
                "typename": "LP_BiologischeVielfaltKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    boden: Annotated[
        list[LPBodenKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Boden",
            json_schema_extra={
                "typename": "LP_BodenKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wasser: Annotated[
        list[LPWasserKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Wasser",
            json_schema_extra={
                "typename": "LP_WasserKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    klima: Annotated[
        list[LPKlimaKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Klima",
            json_schema_extra={
                "typename": "LP_KlimaKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    luft: Annotated[
        list[LPLuftKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Luft",
            json_schema_extra={
                "typename": "LP_LuftKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    landschaftsbild: Annotated[
        list[LPLandschaftsbildKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Landschaftsbild",
            json_schema_extra={
                "typename": "LP_LandschaftsbildKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    erholung: Annotated[
        list[LPErholungKomplex] | None,
        Field(
            description="Angaben zum Planungsgegenstand Erholung in Natur und Landschaft.",
            json_schema_extra={
                "typename": "LP_ErholungKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    freiraeume: Annotated[
        list[str] | None,
        Field(
            description="Textliche Erläuterung zum Planungsgegenstand Freiräume.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    foerdermoeglichkeit: Annotated[
        list[str] | None,
        Field(
            description="Textliche Nennung von Fördermöglichkeiten für Maßnahmen.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    nutzungseinschraenkung: Annotated[
        list[LPNutzungseinschraenkungKomplex] | None,
        Field(
            description="Angaben zu Nutzungseinschränkungen.",
            json_schema_extra={
                "typename": "LP_NutzungseinschraenkungKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class RPGeometrieobjekt(RPObjekt):
    """
    Basisklasse für alle Objekte eines Raumordnungsplans mit variablem Raumbezug. Ein konkretes Objekt muss entweder punktförmigen, linienförmigen oder flächenhaften Raumbezug haben, gemischte Geometrie ist nicht zugelassen. RP_Geometrieobjekt selbst ist abstrakt.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point
        | definitions.MultiPoint
        | definitions.Line
        | definitions.MultiLine
        | definitions.Polygon
        | definitions.MultiPolygon,
        Field(
            description="Variabler Raumbezug.",
            json_schema_extra={
                "typename": "XP_VariableGeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool | None,
        Field(
            description="Zeigt an, ob für das Objekt Flächenschluss vorliegt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    flussrichtung: Annotated[
        bool | None,
        Field(
            description="Das Attribut ist nur relevant, wenn ein Geometrieobjekt einen linienhaften Raumbezug hat. Ist es mit dem Wert true belegt, wird damit ausgedrückt, dass der Linie eine Flussrichtung  in Digitalisierungsrichtung zugeordnet ist. In diesem Fall darf bei Im- und Export die Digitalisierungsreihenfolge der Stützpunkte nicht geändert werden. Wie eine definierte Flussrichtung  zu interpretieren oder bei einer Plandarstellung zu visualisieren ist, bleibt der Implementierung überlassen.\r\nIst der Attributwert false oder das Attribut nicht belegt, ist die Digitalisierungsreihenfolge der Stützpunkte irrelevant.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Objektes bei punktförmigem Raumbezug als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West).",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class RPGrenze(RPGeometrieobjekt):
    """
    Grenzen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1250",
                "1300",
                "1400",
                "1450",
                "1500",
                "1510",
                "1550",
                "1600",
                "2000",
                "2100",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Typ der Grenze",
            json_schema_extra={
                "typename": "XP_GrenzeTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Bundesgrenze",
                        "alias": "Bundesgrenze",
                        "description": "Bundesgrenze",
                    },
                    "1100": {
                        "name": "Landesgrenze",
                        "alias": "Landesgrenze",
                        "description": "Grenze eines Bundeslandes",
                    },
                    "1200": {
                        "name": "Regierungsbezirksgrenze",
                        "alias": "Regierungsbezirksgrenze",
                        "description": "Grenze eines Regierungsbezirks",
                    },
                    "1250": {
                        "name": "Bezirksgrenze",
                        "alias": "Bezirksgrenze",
                        "description": "Grenze eines Bezirks.",
                    },
                    "1300": {
                        "name": "Kreisgrenze",
                        "alias": "Kreisgrenze",
                        "description": "Grenze eines Kreises.",
                    },
                    "1400": {
                        "name": "Gemeindegrenze",
                        "alias": "Gemeindegrenze",
                        "description": "Grenze einer Gemeinde.",
                    },
                    "1450": {
                        "name": "Verbandsgemeindegrenze",
                        "alias": "Verbandsgemeindegrenze",
                        "description": "Grenze einer Verbandsgemeinde",
                    },
                    "1500": {
                        "name": "Samtgemeindegrenze",
                        "alias": "Samtgemeindegrenze",
                        "description": "Grenze einer Samtgemeinde",
                    },
                    "1510": {
                        "name": "Mitgliedsgemeindegrenze",
                        "alias": "Mitgliedsgemeindegrenze",
                        "description": "Mitgliedsgemeindegrenze",
                    },
                    "1550": {
                        "name": "Amtsgrenze",
                        "alias": "Amtsgrenze",
                        "description": "Amtsgrenze",
                    },
                    "1600": {
                        "name": "Stadtteilgrenze",
                        "alias": "Stadtteilgrenze",
                        "description": "Stadtteilgrenze",
                    },
                    "2000": {
                        "name": "VorgeschlageneGrundstuecksgrenze",
                        "alias": "Vorgeschlagene Grundstücksgrenze",
                        "description": "Hinweis auf eine vorgeschlagene Grundstücksgrenze im BPlan.",
                    },
                    "2100": {
                        "name": "GrenzeBestehenderBebauungsplan",
                        "alias": "Grenze bestehender Bebauungsplan",
                        "description": "Hinweis auf den Geltungsbereich eines bestehenden BPlan.",
                    },
                    "9999": {
                        "name": "SonstGrenze",
                        "alias": "Sonstige Grenze",
                        "description": "Sonstige Grenze",
                    },
                },
            },
        ),
    ] = None
    spezifischerTyp: Annotated[
        Literal["1000", "1001", "2000", "3000", "4000", "5000", "6000", "7000", "8000"]
        | None,
        Field(
            description="Spezifischer Typ der Grenze",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zwoelfmeilenzone",
                        "alias": "Zwölfmeilenzone",
                        "description": "Grenze der Zwölf-Seemeilen-Zone, in der Küstenstaaten das Recht haben, ihre Hoheitsgewässer auf bis zu 12 Seemeilen auszudehnen (nach Seerechtsübereinkommen der UN vom 10. Dezember 1982).",
                    },
                    "1001": {
                        "name": "BegrenzungDesKuestenmeeres",
                        "alias": "Begrenzung des Küstenmeeres",
                        "description": "Begrenzung des Küstenmeeres.",
                    },
                    "2000": {
                        "name": "VerlaufUmstritten",
                        "alias": "Verlauf umstritten",
                        "description": "Grenze mit umstrittenem Verlauf, beispielsweise zwischen Deutschland und den Niederlanden im Ems-Ästuar.",
                    },
                    "3000": {
                        "name": "GrenzeDtAusschlWirtschaftszone",
                        "alias": "Grenze Deutsche Ausschl. Wirtschaftszone (AWZ)",
                        "description": "Grenze der Deutschen Ausschließlichen Wirtschaftszone (AWZ).",
                    },
                    "4000": {
                        "name": "MittlereTideHochwasserlinie",
                        "alias": "Mittlere Tide, Hochwasserlinie",
                        "description": "Maß von Küstenlinien bei langjährig gemitteltem Küstenhochwasser.",
                    },
                    "5000": {
                        "name": "PlanungsregionsgrenzeRegion",
                        "alias": "Planungsregionsgrenze Region",
                        "description": "Grenze einer regionalen Planungsregion (z.B. Grenze eines Regionalplans).",
                    },
                    "6000": {
                        "name": "PlanungsregionsgrenzeLand",
                        "alias": "Planungsregionsgrenze Land",
                        "description": "Grenze einer landesweiten Planungsregion (z.B. Grenze eines Landesentwicklungsplans).",
                    },
                    "7000": {
                        "name": "GrenzeBraunkohlenplan",
                        "alias": "Grenze Braunkohlenplan",
                        "description": "Grenze eines Braunkohlenplans.",
                    },
                    "8000": {
                        "name": "Grenzuebergangsstelle",
                        "alias": "Grenzübergangsstelle",
                        "description": "Grenzübergangsstelle",
                    },
                },
                "typename": "RP_SpezifischeGrenzeTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstTyp: Annotated[
        AnyUrl | None,
        Field(
            description="Erweiterter Typ.",
            json_schema_extra={
                "typename": "RP_SonstGrenzeTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPKommunikation(RPGeometrieobjekt):
    """
    Infrastruktur zur Telekommunikation, digitale Infrastruktur oder Kommunikationsinfrastruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "2001", "2002", "9999"] | None,
        Field(
            description="Klassifikation von Kommunikations-Infrastruktur.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Richtfunkstrecke",
                        "alias": "Richtfunkstrecke",
                        "description": "Richtfunkstrecke.",
                    },
                    "2000": {
                        "name": "Fernmeldeanlage",
                        "alias": "Fernmeldeanlage",
                        "description": "Fernmeldeanlage.",
                    },
                    "2001": {
                        "name": "SendeEmpfangsstation",
                        "alias": "Sende- und/oder Empfangsstation",
                        "description": "Sende- und/oder Empfangsstation.",
                    },
                    "2002": {
                        "name": "TonFernsehsender",
                        "alias": "Radio- und/oder Fernsehsender",
                        "description": "Ton- und/oder Fernsehsender.",
                    },
                    "9999": {
                        "name": "SonstigeKommunikation",
                        "alias": "Sonstige Kommunikation",
                        "description": "Sonstige Kommunikationstypen.",
                    },
                },
                "typename": "RP_KommunikationTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPLaermschutzBauschutz(RPGeometrieobjekt):
    """
    Infrastruktur zum Lärmschutz und/oder Bauschutz.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "1001", "2000", "3000", "4000", "5000", "9999"] | None,
        Field(
            description="Klassifikation von Lärmschutztypen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Laermbereich",
                        "alias": "Lärmbereich",
                        "description": "Lärmbereich.",
                    },
                    "1001": {
                        "name": "Laermschutzbereich",
                        "alias": "Lärmschutzbereich",
                        "description": "Lärmschutzbereich",
                    },
                    "2000": {
                        "name": "Siedlungsbeschraenkungsbereich",
                        "alias": "Siedlungsbeschränkungsbereich",
                        "description": "Siedlungsbeschränkungsbereich.",
                    },
                    "3000": {
                        "name": "ZoneA",
                        "alias": "Zone A",
                        "description": "Zone A.",
                    },
                    "4000": {
                        "name": "ZoneB",
                        "alias": "Zone B",
                        "description": "Zone B.",
                    },
                    "5000": {
                        "name": "ZoneC",
                        "alias": "Zone C",
                        "description": "Zone C.",
                    },
                    "9999": {
                        "name": "SonstigerLaermschutzBauschutz",
                        "alias": "Sonstiger Lärmschutz oder Bauschutz",
                        "description": "Sonstiger Lärmschutz oder Bauschutz.",
                    },
                },
                "typename": "RP_LaermschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPPlanungsraum(RPGeometrieobjekt):
    """
    Modelliert einen allgemeinen Planungsraum.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    planungsraumBeschreibung: Annotated[
        str | None,
        Field(
            description="Textliche Beschreibung eines Planungsrauminhalts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPRaumkategorie(RPGeometrieobjekt):
    """
    Raumkategorien sind nach bestimmten Kriterien abgegrenze Gebiete, in denen vergleichbare Strukturen bestehen und in denen die Raumordnung gleichartige Ziele verfolgt. Kriterien können z.B. siedlungsstrukturell, qualitativ oder potentialorientiert sein.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    besondererTyp: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Klassifikation verschiedener besonderer Raumkategorien.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Grenzgebiet",
                        "alias": "Grenzgebiet",
                        "description": "Grenzgebiete.",
                    },
                    "2000": {
                        "name": "Bergbaufolgelandschaft",
                        "alias": "Bergbaufolgelandschaft",
                        "description": "Bergbaufolgelandschaft.",
                    },
                    "3000": {
                        "name": "Braunkohlenfolgelandschaft",
                        "alias": "Braunkohlenfolgelandschaft",
                        "description": "Braunkohlenfolgelandschaften.",
                    },
                },
                "typename": "RP_BesondereRaumkategorieTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1100",
                "1101",
                "1102",
                "1103",
                "1104",
                "1105",
                "1106",
                "1200",
                "1201",
                "1202",
                "1203",
                "1300",
                "1301",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1900",
                "2000",
                "2100",
                "2200",
                "2300",
                "2400",
                "2500",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation verschiedener Raumkategorien.",
            json_schema_extra={
                "typename": "RP_RaumkategorieTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Ordnungsraum",
                        "alias": "Ordnungsraum",
                        "description": "Ordnungsraum. Von der Ministerkonferenz für Raumordnung nach einheitlichen Abgrenzungskritierien definierter Strukturraum. Besteht aus Verdichtungsraum und der Randzone des Verdichtungsraums.",
                    },
                    "1001": {
                        "name": "OrdnungsraumTourismusErholung",
                        "alias": "Ordnungsraum Tourismus und Erholung",
                        "description": "Ordnungsraum in Bezug auf Tourismus und Erholung.",
                    },
                    "1100": {
                        "name": "Verdichtungsraum",
                        "alias": "Verdichtungsraum",
                        "description": "Verdichtungsraum mit höherer Dichte an Siedlungen und Infrastruktur.",
                    },
                    "1101": {
                        "name": "KernzoneVerdichtungsraum",
                        "alias": "Kernzone Verdichtungsraum",
                        "description": "Kernzone des Verdichtungsraums.",
                    },
                    "1102": {
                        "name": "RandzoneVerdichtungsraum",
                        "alias": "Randzone Verdichtungsraum",
                        "description": "Randzone des Verdichtungsraums.",
                    },
                    "1103": {
                        "name": "Ballungskernzone",
                        "alias": "Ballungskernzone",
                        "description": "Ballungskernzone.",
                    },
                    "1104": {
                        "name": "Ballungsrandzone",
                        "alias": "Ballungsrandzone",
                        "description": "Ballungsrandzone.",
                    },
                    "1105": {
                        "name": "HochverdichteterRaum",
                        "alias": "Hochverdichteter Raum",
                        "description": "Hochverdichteter Raum",
                    },
                    "1106": {
                        "name": "StadtUmlandBereichVerdichtungsraum",
                        "alias": "Stadt-Umland-Bereich Verdichtungsraum",
                        "description": "Stadt-Umland-Bereich im Verdichtungsraum",
                    },
                    "1200": {
                        "name": "LaendlicherRaum",
                        "alias": "Ländlicher Raum",
                        "description": "Ländlicher Raum.",
                    },
                    "1201": {
                        "name": "VerdichteterBereichImLaendlichenRaum",
                        "alias": "Verdichteter Bereich im ländlichen Raum",
                        "description": "Verdichteter Bereich im ländlichen Raum.",
                    },
                    "1202": {
                        "name": "Gestaltungsraum",
                        "alias": "Gestaltungsraum",
                        "description": "Gestaltungsraum.",
                    },
                    "1203": {
                        "name": "LaendlicherGestaltungsraum",
                        "alias": "Ländlicher Gestaltungsraum",
                        "description": "Ländlicher Gestaltungsraum.",
                    },
                    "1300": {
                        "name": "StadtUmlandRaum",
                        "alias": "Stadt-Umland-Raum",
                        "description": "Stadt-Umland-Raum",
                    },
                    "1301": {
                        "name": "StadtUmlandBereichLaendlicherRaum",
                        "alias": "Stad-Umland-Bereich ländlicher Raum",
                        "description": "Stadt-Umland-Bereich im ländlichen Raum.",
                    },
                    "1400": {
                        "name": "AbgrenzungOrdnungsraum",
                        "alias": "Abgrenzung Ordnungsraum",
                        "description": "Abgrenzung eines Ordnungsraums.",
                    },
                    "1500": {
                        "name": "DuennbesiedeltesAbgelegenesGebiet",
                        "alias": "Dünnbesiedeltes abgelegenes Gebiet",
                        "description": "Dünnbesiedeltes, abgelegenes Gebiet.",
                    },
                    "1600": {
                        "name": "Umkreis10KM",
                        "alias": "Umkreis 10 km",
                        "description": "Umkreis von zehn Kilometern.",
                    },
                    "1700": {
                        "name": "RaumMitBesonderemHandlungsbedarf",
                        "alias": "Raum mit besonderem Handlungsbedarf",
                        "description": "Raum mit besonderem Handlungsbedarf, zum Beispiel vor dem Hintergrund des demographischen Wandels.",
                    },
                    "1800": {
                        "name": "Funktionsraum",
                        "alias": "Funktionsraum",
                        "description": "Funktionsraum.",
                    },
                    "1900": {
                        "name": "GrenzeWirtschaftsraum",
                        "alias": "Grenze Wirtschaftsraum",
                        "description": "Grenze eines Wirtschaftsraums.",
                    },
                    "2000": {
                        "name": "Funktionsschwerpunkt",
                        "alias": "Funktionsschwerpunkt",
                        "description": "Funktionsschwerpunkt.",
                    },
                    "2100": {
                        "name": "Grundversorgung",
                        "alias": "Grundversorgung",
                        "description": "Grundversorgung-Raumkategorie",
                    },
                    "2200": {
                        "name": "Alpengebiet",
                        "alias": "Alpengebiet",
                        "description": "Alpengebiet-Raumkategorie.",
                    },
                    "2300": {
                        "name": "RaeumeMitGuenstigenEntwicklungsvoraussetzungen",
                        "alias": "Räume mit günstigen Entwicklungsvoraussetzungen",
                        "description": "Räume mit günstigen Entwicklungsaufgaben.",
                    },
                    "2400": {
                        "name": "RaeumeMitAusgeglichenenEntwicklungspotenzialen",
                        "alias": "Räume mit ausgeglichenen Entwicklungspotenzialen",
                        "description": "Raeume mit ausgeglichenen Entwicklungsvoraussetzungen.",
                    },
                    "2500": {
                        "name": "RaeumeMitBesonderenEntwicklungsaufgaben",
                        "alias": "Räume mit besonderen Entwicklungsaufgaben",
                        "description": "Räume mit besonderen Entwicklungspotentialen.",
                    },
                    "9999": {
                        "name": "SonstigeRaumkategorie",
                        "alias": "Sonstige Raumkategorie",
                        "description": "Sonstige Raumkategorien",
                    },
                },
            },
        ),
    ] = None


class RPSiedlung(RPGeometrieobjekt):
    """
    Allgemeines Siedlungsobjekt. Dieses vererbt an mehrere Spezialisierungen, ist aber selbst nicht abstrakt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bauhoehenbeschraenkung: Annotated[
        int | None,
        Field(
            description="Assoziierte Bauhöhenbeschränkung.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    istSiedlungsbeschraenkung: Annotated[
        bool | None,
        Field(
            description="Abfrage, ob der FeatureType eine Siedlungsbeschränkung ist.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPSonstigeInfrastruktur(RPGeometrieobjekt):
    """
    Sonstige Infrastruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class RPSonstigerSiedlungsbereich(RPSiedlung):
    """
    Sonstiger Siedlungsbereich.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class RPSozialeInfrastruktur(RPGeometrieobjekt):
    """
    Soziale Infrastruktur ist ein (unpräziser) Sammelbegriff für Einrichtungen, Leistungen und Dienste in den Kommunen, distinkt von Verkehr, Energieversorgung und Entsorgung. Sie umfasst u.a. Bildung, Gesundheit, Sozialeinrichtungen, Kultureinrichtungen und Einrichtungen der öffentlichen Verwaltung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[Literal["1000", "2000", "3000", "3001", "4000", "4001", "5000", "9999"]]
        | None,
        Field(
            description="Klassifikation von Sozialer Infrastruktur.",
            json_schema_extra={
                "typename": "RP_SozialeInfrastrukturTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Kultur",
                        "alias": "Kultur",
                        "description": "Kulturbezogene Infrastruktur.",
                    },
                    "2000": {
                        "name": "Sozialeinrichtung",
                        "alias": "Sozialeinrichtung",
                        "description": "Sozialeinrichtung.",
                    },
                    "3000": {
                        "name": "Gesundheit",
                        "alias": "Gesundheit",
                        "description": "Gesundheitsinfrastruktur.",
                    },
                    "3001": {
                        "name": "Krankenhaus",
                        "alias": "Krankenhaus",
                        "description": "Krankenhaus.",
                    },
                    "4000": {
                        "name": "BildungForschung",
                        "alias": "Bildung und Forschung",
                        "description": "Bildungs- und/oder Forschungsinfrastruktur.",
                    },
                    "4001": {
                        "name": "Hochschule",
                        "alias": "Hochschule",
                        "description": "Hochschule.",
                    },
                    "5000": {
                        "name": "Polizei",
                        "alias": "Polizei",
                        "description": "Polizeiliche Infrastruktur",
                    },
                    "9999": {
                        "name": "SonstigeSozialeInfrastruktur",
                        "alias": "Sonstige soziale Infrastruktur",
                        "description": "Sonstige Soziale Infrastruktur.",
                    },
                },
            },
        ),
    ] = None


class RPSperrgebiet(RPGeometrieobjekt):
    """
    Sperrgebiet, Gelände oder Areal, das für die Zivilbevölkerung überhaupt nicht oder zeitweise nicht zugänglich ist.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000", "4000", "4001", "5000", "6000", "9999"] | None,
        Field(
            description="Klassifikation verschiedener Sperrgebiettypen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verteidigung",
                        "alias": "Verteidigung",
                        "description": "Verteidigung.",
                    },
                    "2000": {
                        "name": "SondergebietBund",
                        "alias": "Sondergebiet Bund",
                        "description": "Sondergebiet Bund.",
                    },
                    "3000": {
                        "name": "Warngebiet",
                        "alias": "Warngebiet",
                        "description": "Warngebiet.",
                    },
                    "4000": {
                        "name": "MilitaerischeEinrichtung",
                        "alias": "Militärische Einrichtung",
                        "description": "Militärische Einrichtung.",
                    },
                    "4001": {
                        "name": "GrosseMilitaerischeAnlage",
                        "alias": "Große militärische Anlage",
                        "description": "Große militärische Anlage.",
                    },
                    "5000": {
                        "name": "MilitaerischeLiegenschaft",
                        "alias": "Militärische Liegenschaft",
                        "description": "Militärische Liegenschaft.",
                    },
                    "6000": {
                        "name": "Konversionsflaeche",
                        "alias": "Konversionsfläche",
                        "description": "Konversionsfläche.",
                    },
                    "9999": {
                        "name": "SonstigesSperrgebiet",
                        "alias": "Sonstiges Sperrgebiet",
                        "description": "Sonstige Sperrgebiete.",
                    },
                },
                "typename": "RP_SperrgebietTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPVerkehr(RPGeometrieobjekt):
    """
    Enthält allgemeine Verkehrs-Infrastruktur, die auch multiple Typen (etwa Straße und Schiene) beinhalten kann. Die Klasse selbst vererbt an spezialisierte Verkehrsarten, ist aber nicht abstrakt (d.h. sie kann selbst auch verwendet werden).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    allgemeinerTyp: Annotated[
        list[Literal["1000", "2000", "3000", "4000", "9999"]] | None,
        Field(
            description="Allgemeine Klassifikation der Verkehrs-Arten.",
            json_schema_extra={
                "typename": "RP_VerkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Schienenverkehr",
                        "alias": "Schienenverkehr",
                        "description": "Schienenverkehr.",
                    },
                    "2000": {
                        "name": "Strassenverkehr",
                        "alias": "Straßenverkehr",
                        "description": "Straßenverkehr.",
                    },
                    "3000": {
                        "name": "Luftverkehr",
                        "alias": "Luftverkehr",
                        "description": "Luftverkehr.",
                    },
                    "4000": {
                        "name": "Wasserverkehr",
                        "alias": "Wasserverkehr",
                        "description": "Wasserverkehr.",
                    },
                    "9999": {
                        "name": "SonstigerVerkehr",
                        "alias": "Sonstiger Verkehr",
                        "description": "Sonstiger Verkehr.",
                    },
                },
            },
        ),
    ] = None
    status: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Verkehrsstati.",
            json_schema_extra={
                "typename": "RP_VerkehrStatus",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Ausbau",
                        "alias": "Ausbau",
                        "description": "Ausbau.",
                    },
                    "1001": {
                        "name": "LinienfuehrungOffen",
                        "alias": "Linienführung Offen",
                        "description": "Linienführung offen.",
                    },
                    "2000": {
                        "name": "Sicherung",
                        "alias": "Sicherung",
                        "description": "Sicherung.",
                    },
                    "3000": {
                        "name": "Neubau",
                        "alias": "Neubau",
                        "description": "Neubau.",
                    },
                    "4000": {
                        "name": "ImBau",
                        "alias": "Im Bau",
                        "description": "Im Bau befindliche Verkehrsinfrastruktur.",
                    },
                    "5000": {
                        "name": "VorhPlanfestgestLinienbestGrobtrasse",
                        "alias": "Vorh. planfestgestellte linienbestimmte Grobtrasse",
                        "description": "Vorhandene planfestgestellte linienbestimmte Grobtrasse.",
                    },
                    "6000": {
                        "name": "BedarfsplanmassnahmeOhneRaeumlFestlegung",
                        "alias": "Bedarfsplanmaßnahme ohne räuml. Festlegung",
                        "description": "Bedarfsplanmassnahme ohne räumliche Festlegung.",
                    },
                    "7000": {
                        "name": "Korridor",
                        "alias": "Korridor",
                        "description": "Korridor.",
                    },
                    "8000": {
                        "name": "Verlegung",
                        "alias": "Verlegung",
                        "description": "Verlegung.",
                    },
                    "9999": {
                        "name": "SonstigerVerkehrStatus",
                        "alias": "Sonstiger Verkehr Status",
                        "description": "Sonstiger Verkehrsstatus.",
                    },
                },
            },
        ),
    ] = None
    bezeichnung: Annotated[
        str | None,
        Field(
            description="Bezeichnung eines Verkehrstyps.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPWasserverkehr(RPVerkehr):
    """
    Wasserverkehr-Infrastruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "1003",
                "1004",
                "2000",
                "3000",
                "4000",
                "4001",
                "4002",
                "4003",
                "5000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Wasserverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_WasserverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Hafen",
                        "alias": "Hafen",
                        "description": "Hafen.",
                    },
                    "1001": {
                        "name": "Seehafen",
                        "alias": "Seehafen",
                        "description": "Seehafen.",
                    },
                    "1002": {
                        "name": "Binnenhafen",
                        "alias": "Binnenhafen",
                        "description": "Binnenhafen.",
                    },
                    "1003": {
                        "name": "Sportboothafen",
                        "alias": "Sportboothafen",
                        "description": "Sportboothafen.",
                    },
                    "1004": {
                        "name": "Laende",
                        "alias": "Lände",
                        "description": "Lände.",
                    },
                    "2000": {
                        "name": "Umschlagplatz",
                        "alias": "Umschlagplatz",
                        "description": "Umschlagplatz.",
                    },
                    "3000": {
                        "name": "SchleuseHebewerk",
                        "alias": "Schleuse, Hebewerk",
                        "description": "Schleuse und/oder Hebewerk.",
                    },
                    "4000": {
                        "name": "Schifffahrt",
                        "alias": "Schifffahrt",
                        "description": "Schifffahrt.",
                    },
                    "4001": {
                        "name": "WichtigerSchifffahrtsweg",
                        "alias": "Wichtiger Schifffahrtsweg",
                        "description": "Wichtiger Schifffahrtsweg.",
                    },
                    "4002": {
                        "name": "SonstigerSchifffahrtsweg",
                        "alias": "Sonstiger Schifffahrtsweg",
                        "description": "Sonstiger Schifffahrtsweg.",
                    },
                    "4003": {
                        "name": "Wasserstrasse",
                        "alias": "Wasserstraße",
                        "description": "Wasserstraße.",
                    },
                    "5000": {
                        "name": "Reede",
                        "alias": "Reede",
                        "description": "Reede.",
                    },
                    "9999": {
                        "name": "SonstigerWasserverkehr",
                        "alias": "Sonstiger Wasserverkehr",
                        "description": "Sonstiger Wasserverkehr.",
                    },
                },
            },
        ),
    ] = None


class RPWasserwirtschaft(RPGeometrieobjekt):
    """
    Wasserwirtschaft beinhaltet die zielbewusste Ordnung aller menschlichen Einwirkungen auf das ober- und unterirdische Wasser. Im Datenschema werden Gewässer, Wasserschutz, Hochwasserschutz und Wasserverkehr in gesonderten Klassen gehalten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "8100",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Anlagen und Einrichtungen der Wasserwirtschaft",
            json_schema_extra={
                "typename": "RP_WasserwirtschaftTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Wasserleitung",
                        "alias": "Wasserleitung",
                        "description": "Wasserleitung.",
                    },
                    "2000": {
                        "name": "Wasserwerk",
                        "alias": "Wasserwerk",
                        "description": "Wasserwerk.",
                    },
                    "3000": {
                        "name": "StaudammDeich",
                        "alias": "Staudamm, Deich",
                        "description": "Staudamm und/oder Deich.",
                    },
                    "4000": {
                        "name": "Speicherbecken",
                        "alias": "Speicherbecken",
                        "description": "Speicherbecken.",
                    },
                    "5000": {
                        "name": "Rueckhaltebecken",
                        "alias": "Rückhaltebecken",
                        "description": "Rückhaltebecken.",
                    },
                    "6000": {
                        "name": "Talsperre",
                        "alias": "Talsperre",
                        "description": "Talsperre.",
                    },
                    "7000": {
                        "name": "PumpwerkSchoepfwerk",
                        "alias": "Pumpwerk, Schöpfwerk",
                        "description": "Pumpwerk und/oder Schöpfwerk.",
                    },
                    "8000": {
                        "name": "Zuwaesserungskanal",
                        "alias": "Zuwässerungskanal",
                        "description": "Ein Entwässerungskanal, der gleichzeitig auch der Zuwässerung landwirtschaftlicher Flächen speziell zur Viehkehrung, als Viehtränke und zur Spülung des Systems dient.",
                    },
                    "8100": {
                        "name": "Entwaesserungskanal",
                        "alias": "Entwässerungskanal",
                        "description": "Künstlich angelegtes bzw. ausgebautes Netz von Wasserläufen (Tiefs), welche die Entwässerung des Binnenlandes über Sielbauwerke bzw. Schöpfbauwerke übernehmen, zum Teil auch mit der Funktion der Zwischenspeicherung des Niederschlagswassers.",
                    },
                    "9999": {
                        "name": "SonstigeWasserwirtschaft",
                        "alias": "Sonstige Wasserwirtschaft",
                        "description": "Sonstige Wasserwirtschaft.",
                    },
                },
            },
        ),
    ] = None


class RPWohnenSiedlung(RPSiedlung):
    """
    Wohn- und Siedlungsstruktur und -funktionen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "3001",
                "3002",
                "3003",
                "3004",
                "4000",
                "5000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Wohnen- und Siedlungstypen.",
            json_schema_extra={
                "typename": "RP_WohnenSiedlungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Wohnen",
                        "alias": "Wohnen",
                        "description": "Wohnen",
                    },
                    "2000": {
                        "name": "Baugebietsgrenze",
                        "alias": "Baugebietsgrenze",
                        "description": "Baugebietsgrenze.",
                    },
                    "3000": {
                        "name": "Siedlungsgebiet",
                        "alias": "Siedlungsgebiet",
                        "description": "Siedlungsgebiet.",
                    },
                    "3001": {
                        "name": "Siedlungsschwerpunkt",
                        "alias": "Siedlungsschwerpunkt",
                        "description": "Siedlungsschwerpunkt.",
                    },
                    "3002": {
                        "name": "Siedlungsentwicklung",
                        "alias": "Siedlungsentwicklung",
                        "description": "Siedlungsentwicklung.",
                    },
                    "3003": {
                        "name": "Siedlungsbeschraenkung",
                        "alias": "Siedlungsbeschränkung",
                        "description": "Siedlungsbeschränkung.",
                    },
                    "3004": {
                        "name": "Siedlungsnutzung",
                        "alias": "Siedlungsnutzung",
                        "description": "Sonstige WohnenSiedlungstypen.",
                    },
                    "4000": {
                        "name": "SicherungEntwicklungWohnstaetten",
                        "alias": "Sicherung Entwicklung Wohnstätten",
                        "description": "Sicherung der Entwicklung von Wohnstätten",
                    },
                    "5000": {
                        "name": "AllgemeinerSiedlungsbereichASB",
                        "alias": "Allgemeiner Siedlungsbereich ASB",
                        "description": "Allgemeiner Siedlungsbereich",
                    },
                    "9999": {
                        "name": "SonstigeWohnenSiedlung",
                        "alias": "Sonstige Wohnen Siedlung",
                        "description": "Sonstiges",
                    },
                },
            },
        ),
    ] = None


class RPZentralerOrt(RPGeometrieobjekt):
    """
    Zentrale Orte übernehmen die Versorgung ihrer Einwohner sowie Versorgungs- und Entwicklungsfunktionen für den Einzugsbereich des Zentralen Ortes. Das zentralörtliche System ist hierarchisch gegliedert.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1500",
                "2000",
                "2500",
                "3000",
                "3001",
                "3500",
                "4000",
                "5000",
                "6000",
                "6001",
                "7000",
                "8000",
                "9000",
                "9999",
            ]
        ],
        Field(
            description="Klassifikation von Zentralen Orten.",
            json_schema_extra={
                "typename": "RP_ZentralerOrtTypen",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "Oberzentrum",
                        "alias": "Oberzentrum",
                        "description": "Oberzentrum.",
                    },
                    "1001": {
                        "name": "GemeinsamesOberzentrum",
                        "alias": "Gemeinsames Oberzentrum",
                        "description": "Gemeinsames Oberzentrum.",
                    },
                    "1500": {
                        "name": "Oberbereich",
                        "alias": "Oberbereich",
                        "description": "Oberbereich.",
                    },
                    "2000": {
                        "name": "Mittelzentrum",
                        "alias": "Mittelzentrum",
                        "description": "Mittelzentrum.",
                    },
                    "2500": {
                        "name": "Mittelbereich",
                        "alias": "Mittelbereich",
                        "description": "Mittelbereich.",
                    },
                    "3000": {
                        "name": "Grundzentrum",
                        "alias": "Grundzentrum",
                        "description": "Grundzentrum",
                    },
                    "3001": {
                        "name": "Unterzentrum",
                        "alias": "Unterzentrum",
                        "description": "Unterzentrum.",
                    },
                    "3500": {
                        "name": "Nahbereich",
                        "alias": "Nahbereich",
                        "description": "Nahbereich.",
                    },
                    "4000": {
                        "name": "Kleinzentrum",
                        "alias": "Kleinzentrum",
                        "description": "Kleinzentrum.",
                    },
                    "5000": {
                        "name": "LaendlicherZentralort",
                        "alias": "Ländlicher Zentralort",
                        "description": "Ländlicher Zentralort.",
                    },
                    "6000": {
                        "name": "Stadtrandkern1Ordnung",
                        "alias": "Stadtrandkern 1. Ordnung",
                        "description": "Stadtrandkern 1. Ordnung",
                    },
                    "6001": {
                        "name": "Stadtrandkern2Ordnung",
                        "alias": "Stadtrandkern 2. Ordnung",
                        "description": "Stadtrandkern 2. Ordnung",
                    },
                    "7000": {
                        "name": "VersorgungskernSiedlungskern",
                        "alias": "Versorgungskern, Siedlungskern",
                        "description": "Versorgungskern und/oder Siedlungskern",
                    },
                    "8000": {
                        "name": "ZentralesSiedlungsgebiet",
                        "alias": "Zentrales Siedlungsgebiet",
                        "description": "Zentrales Siedlungsgebiet.",
                    },
                    "9000": {
                        "name": "Metropole",
                        "alias": "Metropole",
                        "description": "Metropole.",
                    },
                    "9999": {
                        "name": "SonstigerZentralerOrt",
                        "alias": "Sonstiger Zentraler Ort",
                        "description": "Sonstiger Zentraler Ort.",
                    },
                },
            },
            min_length=1,
        ),
    ]
    sonstigerTyp: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1101",
                "1102",
                "1200",
                "1300",
                "1301",
                "1302",
                "1400",
                "1500",
                "1501",
                "1600",
                "1700",
                "1800",
                "1900",
                "2000",
                "2100",
                "2101",
                "2200",
            ]
        ]
        | None,
        Field(
            description="Sonstige Klassifikation von Zentralen Orten.",
            json_schema_extra={
                "typename": "RP_ZentralerOrtSonstigeTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Doppelzentrum",
                        "alias": "Doppelzentrum",
                        "description": "Doppelzentrum.",
                    },
                    "1100": {
                        "name": "Funktionsteilig",
                        "alias": "Funktionsteilig",
                        "description": "Funktionsteiliger Zentraler Ort.",
                    },
                    "1101": {
                        "name": "MitOberzentralerTeilfunktion",
                        "alias": "Mit oberzentraler Teilfunktion",
                        "description": "Zentraler Ort mit oberzentraler Teilfunktion.",
                    },
                    "1102": {
                        "name": "MitMittelzentralerTeilfunktion",
                        "alias": "Mit mittelzentraler Teilfunktion",
                        "description": "Zentraler Ort mit mittelzentraler Teilfunktion.",
                    },
                    "1200": {
                        "name": "ImVerbund",
                        "alias": "Im Verbund",
                        "description": "Zentraler Ort im Verbund.",
                    },
                    "1300": {
                        "name": "Kooperierend",
                        "alias": "Kooperierend",
                        "description": "Kooperierender Zentraler Ort.",
                    },
                    "1301": {
                        "name": "KooperierendFreiwillig",
                        "alias": "Kooperierend Freiwillig",
                        "description": "Freiwillig kooperierender Zentraler Ort.",
                    },
                    "1302": {
                        "name": "KooperierendVerpflichtend",
                        "alias": "Kooperierend Verpflichtend",
                        "description": "Verpflichtend kooperierender Zentraler Ort.",
                    },
                    "1400": {
                        "name": "ImVerdichtungsraum",
                        "alias": "Im Verdichtungsraum",
                        "description": "Zentraler Ort im Verdichtungsraum.",
                    },
                    "1500": {
                        "name": "SiedlungsGrundnetz",
                        "alias": "Siedlungsgrundnetz",
                        "description": "Siedlungsgrundnetz.",
                    },
                    "1501": {
                        "name": "SiedlungsErgaenzungsnetz",
                        "alias": "Siedlungsergänzungsnetz",
                        "description": "Siedlungsergänzungsnetz.",
                    },
                    "1600": {
                        "name": "Entwicklungsschwerpunkt",
                        "alias": "Entwicklungsschwerpunkt",
                        "description": "Entwicklungsschwerpunkt.",
                    },
                    "1700": {
                        "name": "Ueberschneidungsbereich",
                        "alias": "Überschneidungsbereich",
                        "description": "Überschneidungsbereich.",
                    },
                    "1800": {
                        "name": "Ergaenzungsfunktion",
                        "alias": "Ergänzungsfunktion",
                        "description": "Zentraler Ort mit Ergänzungsfunktion.",
                    },
                    "1900": {
                        "name": "Nachbar",
                        "alias": "Nachbar",
                        "description": "Zentraler Ort in Nachbarregionen oder Ländern.",
                    },
                    "2000": {
                        "name": "MoeglichesZentrum",
                        "alias": "Mögliches Zentrum",
                        "description": 'Mögliches Zentrum, zum Beispiel "mögliches Mittelzentrum".',
                    },
                    "2100": {
                        "name": "FunktionsraumEindeutigeAusrichtung",
                        "alias": "Funktionsraum mit eindeutiger Ausrichtung",
                        "description": "Funktionsraum, eindeutige Ausrichtung.",
                    },
                    "2101": {
                        "name": "FunktionsraumBilateraleAusrichtung",
                        "alias": "Funktionsraum mit bilateraler Ausrichtung",
                        "description": "Funktionsraum, bilaterale Ausrichtung.",
                    },
                    "2200": {
                        "name": "Kongruenzraum",
                        "alias": "Kongruenzraum",
                        "description": "Der Kongruenzraum ist ein Bezugsraum zur Anwendung des \r\nKongruenzgebots. Der Kongruenzraum beschreibt den Raum im Umfeld eines Zentralen Ortes, den Einzelhandelsgroßprojekte, die im Zentralen Ort angesiedelt werden sollen oder bereits bestehen, im Wesentlichen versorgen sollen.",
                    },
                },
            },
        ),
    ] = None


class SOFlaechenobjekt(SOObjekt):
    """
    Basisklasse für alle Objekte mit flächenhaftem Raumbezug (eine Einzelfläche oder eine Menge von Flächen, die sich nicht überlappen dürfen).
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Polygon | definitions.MultiPolygon,
        Field(
            description="Flächenhafter Raumbezug des Objektes (Eine Einzelfläche oder eine Menge von Flächen, die sich nicht überlappen dürfen).",
            json_schema_extra={
                "typename": "XP_Flaechengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool,
        Field(
            description="Zeigt an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll. Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des sonstigen raumbezogenen Plans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]


class SOGebiet(SOFlaechenobjekt):
    """
    Umgrenzung eines sonstigen Gebietes nach BauGB
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gemeinde: Annotated[
        XPGemeinde | None,
        Field(
            description="Zuständige Gemeinde",
            json_schema_extra={
                "typename": "XP_Gemeinde",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gebietsArt: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "1700",
            "17000",
            "17001",
            "17002",
            "2300",
            "2400",
            "2500",
            "9999",
        ]
        | None,
        Field(
            description="Klassifikation des Gebietes nach BauGB.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Umlegungsgebiet",
                        "alias": "Umlegungsgebiet",
                        "description": "Umlegungsgebiet (§ 45 ff BauGB).",
                    },
                    "1100": {
                        "name": "StaedtebaulicheSanierung",
                        "alias": "Städtebauliche Sanierung",
                        "description": "Gebiet nach § 136 ff BauGB",
                    },
                    "1200": {
                        "name": "StaedtebaulicheEntwicklungsmassnahme",
                        "alias": "Städtebauliche Entwicklungsmaßnahme",
                        "description": "Gebiet nach § 165 ff BauGB",
                    },
                    "1300": {
                        "name": "Stadtumbaugebiet",
                        "alias": "Stadtumbaugebiet",
                        "description": "Gebiet nach § 171 a-d BauGB",
                    },
                    "1400": {
                        "name": "SozialeStadt",
                        "alias": "Soziale Stadt",
                        "description": "Gebiet nach § 171 e BauGB",
                    },
                    "1500": {
                        "name": "BusinessImprovementDistrict",
                        "alias": "Business Improvement District",
                        "description": "Gebiet nach §171 f BauGB",
                    },
                    "1600": {
                        "name": "HousingImprovementDistrict",
                        "alias": "Housing Improvement District",
                        "description": "Gebiet nach §171 f BauGB",
                    },
                    "1700": {
                        "name": "Erhaltungsgebiet",
                        "alias": "Erhaltungsgebiet",
                        "description": "Allgemeines Erhaltungsgebiet nach §172 BauGB",
                    },
                    "17000": {
                        "name": "ErhaltungsgebietStaedtebaulicheGestalt",
                        "alias": "Erhaltungsgebiet Städtebauliche Gestalt",
                        "description": "Gebiet einer Satzung/Verordnung nach § 172 Abs. 1.1 BauGB",
                    },
                    "17001": {
                        "name": "ErhaltungsgebietWohnbevoelkerung",
                        "alias": "Erhaltungsgebiet Wohnbevölkerung",
                        "description": "Gebiet einer Satzung/Verordnung nach § 172 Abs. 1.2 BauGB",
                    },
                    "17002": {
                        "name": "ErhaltungsgebietUmstrukturierung",
                        "alias": "Erhaltungsgebiet Umstrukturierung",
                        "description": "Gebiet einer Satzung/Verordnung nach § 172 Abs. 1.3 BauGB",
                    },
                    "2300": {
                        "name": "StaedtebaulEntwicklungskonzeptInnenentwicklung",
                        "alias": "Städtebauliches Entwicklungskonzept Innenentwicklung",
                        "description": "Städtebauliches Entwicklungskonzept zur Stärkung der Innenentwicklung",
                    },
                    "2400": {
                        "name": "GebietMitAngespanntemWohnungsmarkt",
                        "alias": "Gebiet mit angespanntem Wohnungsmarkt",
                        "description": "Gebiet mit einem angespannten Wohnungsmarkt",
                    },
                    "2500": {
                        "name": "GenehmigungWohnungseigentum",
                        "alias": "Genehmigung Wohnungseigentum",
                        "description": "Gebiet mit angespanntem Wohnungsmarkt, in dem die Begründung oder Teilung von Wohnungseigentum oder Teileigentum der Genehmigung bedarf.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Gebietstyp",
                    },
                },
                "typename": "SO_GebietsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstGebietsArt: Annotated[
        AnyUrl | None,
        Field(
            description='Über eine Codeliste definierte Klassifikation einer nicht auf dem BauGB beruhenden, z.B. länderspezifischen Gebietsausweisung. In dem Fall muss das Attribut "gebietsArt" den Wert 9999 (Sonstiges) haben.',
            json_schema_extra={
                "typename": "SO_SonstGebietsArt",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtsstandGebiet: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "9999"] | None,
        Field(
            description="Rechtsstand der Gebietsausweisung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "VorbereitendeUntersuchung",
                        "alias": "Vorbereitende Untersuchung",
                        "description": "Vorbereitende Untersuchung",
                    },
                    "2000": {
                        "name": "Aufstellung",
                        "alias": "Aufstellung",
                        "description": "Aufstellung",
                    },
                    "3000": {
                        "name": "Festlegung",
                        "alias": "Festlegung",
                        "description": "Festlegung",
                    },
                    "4000": {
                        "name": "Abgeschlossen",
                        "alias": "Abgeschlossen",
                        "description": "Abgeschlossen",
                    },
                    "5000": {
                        "name": "Verstetigung",
                        "alias": "Verstetigung",
                        "description": "Verstetigung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges",
                    },
                },
                "typename": "SO_RechtsstandGebietTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstRechtsstandGebiet: Annotated[
        AnyUrl | None,
        Field(
            description='Über eine Codeliste definierter sonstiger Rechtsstand der Gebietsausweisung, der nicht durch die Liste SO_RechtsstandGebietTyp wiedergegeben werden kann. Das Attribut "rechtsstandGebiet" muss in diesem Fall den Wert 9999 (Sonstiges) haben.',
            json_schema_extra={
                "typename": "SO_SonstRechtsstandGebietTyp",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    aufstellungsbeschhlussDatum: Annotated[
        date_aliased | None,
        Field(
            description="Datum des Aufstellungsbeschlusses",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    durchfuehrungStartDatum: Annotated[
        date_aliased | None,
        Field(
            description="Start-Datum der Durchführung",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    durchfuehrungEndDatum: Annotated[
        date_aliased | None,
        Field(
            description="End-Datum der Durchführung",
            json_schema_extra={
                "typename": "Date",
                "stereotype": "Temporal",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    traegerMassnahme: Annotated[
        str | None,
        Field(
            description="Maßnahmen-Träger",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOGeometrieobjekt(SOObjekt):
    """
    Basisklasse für alle Objekte mit variablem Raumbezug. Ein konkretes Objekt muss entweder punktförmigen, linienförmigen oder flächenhaften Raumbezug haben, gemischte Geometrie ist nicht zugelassen.
    """

    abstract: ClassVar[bool] = True
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Point
        | definitions.MultiPoint
        | definitions.Line
        | definitions.MultiLine
        | definitions.Polygon
        | definitions.MultiPolygon,
        Field(
            description="Raumbezug - Entweder punktförmig, linienförmig oder flächenhaft, gemischte Geometrie ist nicht zugelassen.",
            json_schema_extra={
                "typename": "XP_VariableGeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]
    flaechenschluss: Annotated[
        bool | None,
        Field(
            description="Zeigt bei flächenhaftem Raumbezug an, ob das Objekt als Flächenschlussobjekt oder Überlagerungsobjekt gebildet werden soll. Flächenschlussobjekte dürfen sich nicht überlappen, sondern nur an den Flächenrändern berühren, wobei die jeweiligen Stützpunkte der Randkurven übereinander liegen müssen. Die Vereinigung der Flächenschlussobjekte überdeckt den Geltungsbereich des sonstigen raumbezogenen Plans vollständig.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    flussrichtung: Annotated[
        bool | None,
        Field(
            description="Das Attribut ist nur relevant, wenn ein Geometrieobjekt einen linienhaften Raumbezug hat. Ist es mit dem Wert true belegt, wird damit ausgedrückt, dass der Linie eine Flussrichtung  in Digitalisierungsrichtung zugeordnet ist. In diesem Fall darf bei Im- und Export die Digitalisierungsreihenfolge der Stützpunkte nicht geändert werden. Wie eine definierte Flussrichtung  zu interpretieren oder bei einer Plandarstellung zu visualisieren ist, bleibt der Implementierung überlassen.\r\nIst der Attributwert false oder das Attribut nicht belegt, ist die Digitalisierungsreihenfolge der Stützpunkte irrelevant.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nordwinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Orientierung des Objektes bei punktförmigem Raumbezug als Winkel gegen die Nordrichtung. Zählweise im geographischen Sinn (von Nord über Ost nach Süd und West)",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class SOGewaesser(SOGeometrieobjekt):
    """
    Planartübergreifende Klasse zur Abbildung von Gewässern
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        list[SOKomplexeFestlegungGewaesser] | None,
        Field(
            description="Klassifizierung des Gewässers",
            json_schema_extra={
                "typename": "SO_KomplexeFestlegungGewaesser",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung dees Gewässers",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer des Gewässers.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOLinienobjekt(SOObjekt):
    """
    Basisklasse für Objekte mit linienförmigem Raumbezug (eine einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen zusammengesetzt sein kann, oder eine Menge derartiger Kurven).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    position: Annotated[
        definitions.Line | definitions.MultiLine,
        Field(
            description="Linienförmiger Raumbezug (Einzelne zusammenhängende Kurve, die aus Linienstücken und Kreisbögen aufgebaut ist, oder eine Menge derartiger Kurven),",
            json_schema_extra={
                "typename": "XP_Liniengeometrie",
                "stereotype": "Geometry",
                "multiplicity": "1",
            },
        ),
    ]


class SOLuftverkehrsrecht(SOGeometrieobjekt):
    """
    Festlegung nach Luftverkehrsrecht.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "5200", "5400", "6000", "9999"]
        | None,
        Field(
            description="Rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Flughafen",
                        "alias": "Flughafen",
                        "description": "Flughafen",
                    },
                    "2000": {
                        "name": "Landeplatz",
                        "alias": "Landeplatz",
                        "description": "Landeplatz",
                    },
                    "3000": {
                        "name": "Segelfluggelaende",
                        "alias": "Segelfluggelände",
                        "description": "Segelfluggelände",
                    },
                    "4000": {
                        "name": "HubschrauberLandeplatz",
                        "alias": "Hubschrauberlandeplatz",
                        "description": "Hubschrauber Landeplatz",
                    },
                    "5000": {
                        "name": "Ballonstartplatz",
                        "alias": "Ballonstartplatz",
                        "description": "Ballon Startplatz",
                    },
                    "5200": {
                        "name": "Haengegleiter",
                        "alias": "Hängegleiter",
                        "description": "Startplatz für Hängegleiter",
                    },
                    "5400": {
                        "name": "Gleitsegler",
                        "alias": "Gleitsegler",
                        "description": "Startplatz für Gleitsegler",
                    },
                    "6000": {
                        "name": "Laermschutzbereich",
                        "alias": "Lärmschutzbereich",
                        "description": "Lärmschutzbereich nach LuftVG",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Klassifizierung nach Luftverkehrsrecht.",
                    },
                },
                "typename": "SO_KlassifizNachLuftverkehrsrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachLuftverkehrsrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    laermschutzzone: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Lärmschutzzone nach LuftVG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "TagZone1",
                        "alias": "Tag-Zone 1",
                        "description": "Tag-Zone 1",
                    },
                    "2000": {
                        "name": "TagZone2",
                        "alias": "Tag-Zone 2",
                        "description": "Tag-Zone 2",
                    },
                    "3000": {
                        "name": "Nacht",
                        "alias": "Nacht",
                        "description": "Nacht-Zone",
                    },
                },
                "typename": "SO_LaermschutzzoneTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOSchienenverkehrsrecht(SOGeometrieobjekt):
    """
    Festlegung nach Schienenverkehrsrecht.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal[
            "1000",
            "10000",
            "10001",
            "10002",
            "10003",
            "1200",
            "12000",
            "12001",
            "12002",
            "12003",
            "12004",
            "12005",
            "1400",
            "14000",
            "14001",
            "14002",
            "14003",
            "9999",
        ]
        | None,
        Field(
            description="Rechtliche Klassifizierung der Festlegung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Bahnanlage",
                        "alias": "Bahnanlage",
                        "description": "Bahnanlage allgemein",
                    },
                    "10000": {
                        "name": "DB_Bahnanlage",
                        "alias": "DB-Bahnanlage",
                        "description": "Bahnanlage der DB",
                    },
                    "10001": {
                        "name": "Personenbahnhof",
                        "alias": "Personenbahnhof",
                        "description": "Personenbahnhof",
                    },
                    "10002": {
                        "name": "Fernbahnhof",
                        "alias": "Fernbahnhof",
                        "description": "Fernbahnhof",
                    },
                    "10003": {
                        "name": "Gueterbahnhof",
                        "alias": "Güterbahnhof",
                        "description": "Güterbahnhof",
                    },
                    "1200": {
                        "name": "Bahnlinie",
                        "alias": "Bahnlinie",
                        "description": "Bahnlinie allgemein",
                    },
                    "12000": {
                        "name": "Personenbahnlinie",
                        "alias": "Personenbahnlinie",
                        "description": "Personenbahnlinie",
                    },
                    "12001": {
                        "name": "Regionalbahn",
                        "alias": "Regionalbahn",
                        "description": "Regionalbahn",
                    },
                    "12002": {
                        "name": "Kleinbahn",
                        "alias": "Kleinbahn",
                        "description": "Kleinbahn",
                    },
                    "12003": {
                        "name": "Gueterbahnlinie",
                        "alias": "Güterbahnlinie",
                        "description": "Güterbahnlinie",
                    },
                    "12004": {
                        "name": "WerksHafenbahn",
                        "alias": "Werks- oder Hafenbahn",
                        "description": "Werks- oder Hafenbahnlinie.",
                    },
                    "12005": {
                        "name": "Seilbahn",
                        "alias": "Seilbahn",
                        "description": "Seilbahn",
                    },
                    "1400": {
                        "name": "OEPNV",
                        "alias": "Öffentlicher Personennahverkehr",
                        "description": "Schienengebundener ÖPNV allgemein.",
                    },
                    "14000": {
                        "name": "Strassenbahn",
                        "alias": "Straßenbahn",
                        "description": "Straßenbahn",
                    },
                    "14001": {
                        "name": "UBahn",
                        "alias": "U-Bahn",
                        "description": "U-Bahn",
                    },
                    "14002": {
                        "name": "SBahn",
                        "alias": "S-Bahn",
                        "description": "S-Bahn",
                    },
                    "14003": {
                        "name": "OEPNV_Haltestelle",
                        "alias": "ÖPNV-Haltestelle",
                        "description": "Haltestelle im ÖPNV",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Klassifizierung nach Schienenverkehrsrecht.",
                    },
                },
                "typename": "SO_KlassifizNachSchienenverkehrsrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachSchienenverkehrsrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOSchutzgebietWasserrecht(SOGeometrieobjekt):
    """
    Schutzgebiet nach WasserSchutzGesetz (WSG) bzw. HeilQuellenSchutzGesetz (HQSG).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "10000", "10001", "2000", "9999"] | None,
        Field(
            description="Klassifizierung des Schutzgebietes",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Wasserschutzgebiet",
                        "alias": "Wasserschutzgebiet",
                        "description": "Wasserschutzgebiet",
                    },
                    "10000": {
                        "name": "QuellGrundwasserSchutzgebiet",
                        "alias": "Quell- und Grundwasser-Schutzgebiet",
                        "description": "Ausgewiesenes Schutzgebiet für Quell- und Grundwasser",
                    },
                    "10001": {
                        "name": "OberflaechengewaesserSchutzgebiet",
                        "alias": "Oberflächengewässer-Schutzgebiet",
                        "description": "Ausgewiesenes Schutzgebiet für Oberflächengewässer",
                    },
                    "2000": {
                        "name": "Heilquellenschutzgebiet",
                        "alias": "Heilquellen-Schutzgebiet",
                        "description": "Heilquellen Schutzgebiet",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Schutzgebiet nach Wasserrecht.",
                    },
                },
                "typename": "SO_KlassifizSchutzgebietWasserrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codelieste definierte detailliertere Klassifizierung",
            json_schema_extra={
                "typename": "SO_DetailKlassifizSchutzgebietWasserrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zone: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500"] | None,
        Field(
            description="Klassifizierung der Schutzzone",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zone_1",
                        "alias": "Zone 1",
                        "description": "Zone 1",
                    },
                    "1100": {
                        "name": "Zone_2",
                        "alias": "Zone 2",
                        "description": "Zone 2",
                    },
                    "1200": {
                        "name": "Zone_3",
                        "alias": "Zone 3",
                        "description": "Zone 3",
                    },
                    "1300": {
                        "name": "Zone_3a",
                        "alias": "Zone 3a",
                        "description": "Zone 3a e(xistiert nur bei Wasserschutzgebieten).",
                    },
                    "1400": {
                        "name": "Zone_3b",
                        "alias": "Zone 3b",
                        "description": "Zone 3b (existiert nur bei Wasserschutzgebieten).",
                    },
                    "1500": {
                        "name": "Zone_4",
                        "alias": "Zone 4",
                        "description": "Zone 4 e(xistiert nur bei Heilquellen).",
                    },
                },
                "typename": "SO_SchutzzonenWasserrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung des Gebiets",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer des Gebiets.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOSichtflaeche(SOFlaechenobjekt):
    """
    Flächenhafte Festlegung einer Sichtfläche bzw. eines Sichtdreiecks
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    art: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description='Klassifikation der Einmündung einer untergeordneten auf eine übergeordnete Straße gemäß den "Richtlinien für die Anlage von Stadtstraßen" (TAST 06)',
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Haltesichtweite",
                        "alias": "Haltesichtweite",
                        "description": "Haltesichtweite",
                    },
                    "2000": {
                        "name": "Anfahrsichtfeld",
                        "alias": "Anfahrsichtfeld",
                        "description": "Anfahrsichtfeld",
                    },
                    "3000": {
                        "name": "Annaeherungssichtfeld",
                        "alias": "Annäherungssichtfeld",
                        "description": "Annäherungssichtfeld",
                    },
                    "4000": {
                        "name": "Ueberquerung",
                        "alias": "Überquerung",
                        "description": "Sichtfeld an Überquerungsstellen",
                    },
                    "9999": {
                        "name": "SonstigeSichtflaeche",
                        "alias": "Sonstige Sichtfläche",
                        "description": "Sonstige Sichtfläche",
                    },
                },
                "typename": "SO_SichtflaecheArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    knotenpunkt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "9999"] | None,
        Field(
            description="Klassifikation des Knotenpunktes, dem die Sichtfläche zugeordnet ist",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "AnlgStr-AnlgWeg",
                        "alias": "Anliegerstraße - Anliegerweg",
                        "description": "Knotenpunkt Anliegerstraße - Anliegerweg",
                    },
                    "2000": {
                        "name": "AnlgStr-AnlgStr",
                        "alias": "Anliegerstraße - Anliegerstraße",
                        "description": "Knotenpunkt Anliegerstraße - Anliegerstraße",
                    },
                    "3000": {
                        "name": "SammelStr-AnlgStr",
                        "alias": "Sammelstraße - Anliegerstraße",
                        "description": "Knotenpunkt Sammelstraße - Anliegerstraße",
                    },
                    "4000": {
                        "name": "HauptSammelStr",
                        "alias": "Haupt-Sammelstraße",
                        "description": "Knotenpunkt mit einer Haupt-Sammelstraße",
                    },
                    "5000": {
                        "name": "HauptVerkStrAngeb",
                        "alias": "Angebaute Hauptverkehrsstraße",
                        "description": "Knotenpunkt mit einer angebaute Hauptverkehrsstraße (Bebauung parallel zur Straße ist vorhanden)",
                    },
                    "6000": {
                        "name": "HauptVerkStrNichtAngeb",
                        "alias": "Nicht angebaute Hauptverkehrsstraße",
                        "description": "Knotenpunkt mit einer nicht angebaute Hauptverkehrsstraße (Keine Bebauung parallel zur Straße )",
                    },
                    "9999": {
                        "name": "SonstigerKnotenpunkt",
                        "alias": "Sonstiger Knotenpunkt",
                        "description": "Sonstiger Knotenpunkt",
                    },
                },
                "typename": "SO_SichtflaecheKnotenpunktTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geschwindigkeit: Annotated[
        definitions.GenericMeasure | None,
        Field(
            description="Zulässige Geschwindigkeit in der übergeordneten Straße, im km/h",
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "kmh",
            },
        ),
    ] = None
    schenkellaenge: Annotated[
        definitions.Length | None,
        Field(
            description="Schenkellänge des Sichtdreiecks gemäß RAST 06",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None


class SOSonstigesRecht(SOGeometrieobjekt):
    """
    Sonstige Festlegung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    artDerFestlegung: Annotated[
        Literal["1100", "1300", "1400", "1500", "1600", "1700", "1800", "9999"] | None,
        Field(
            description="Rechtliche Klassifizierung der Festlegung",
            json_schema_extra={
                "enumDescription": {
                    "1100": {
                        "name": "Berggesetz",
                        "alias": "Berggesetz",
                        "description": "Beschränkung nach Berggesetz",
                    },
                    "1300": {
                        "name": "Truppenuebungsplatz",
                        "alias": "Truppenübungsplatz",
                        "description": "Truppenübungsplatz",
                    },
                    "1400": {
                        "name": "VermessungsKatasterrecht",
                        "alias": "Vermessungs- und Katasterrecht",
                        "description": "Beschränkungen nach Vermessungs- und Katasterrecht",
                    },
                    "1500": {
                        "name": "Rekultivierungsflaeche",
                        "alias": "Rekultivierungsfläche",
                        "description": "Zu rekultivierende Fläche",
                    },
                    "1600": {
                        "name": "Renaturierungsflaeche",
                        "alias": "Renaturierungsfläche",
                        "description": "Zu renaturierende Fläche",
                    },
                    "1700": {
                        "name": "Laermschutzbereich",
                        "alias": "Lärmschutzbereich",
                        "description": "Lärmschutzbereich nach anderen gesetzlichen Regelungen als dem Luftverkehrsrecht.",
                    },
                    "1800": {
                        "name": "SchutzzoneLeitungstrasse",
                        "alias": "Schutzzone Leitungstrasse",
                        "description": "Schutzzone um eine Leitungstrasse nach Bundes-Immissionsschutzgesetz.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Klassifizierung",
                    },
                },
                "typename": "SO_KlassifizNachSonstigemRecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachSonstigemRecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOStrassenverkehr(SOGeometrieobjekt):
    """
    Verkehrsfläche besonderer Zweckbestimmung (§ 9 Abs. 1 Nr. 11 und Abs. 6 BauGB), Darstellung von Flächen für den überörtlichen Verkehr und für die örtlichen Hauptverkehrszüge ( §5, Abs. 2, Nr. 3 BauGB) sowie Festlegung nach Straßenverkehrsrecht. Das gleiche Attribut darf nicht gleichzeitig in SO_Strassenverkehr und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    artDerFestlegung: Annotated[
        list[SOKomplexeZweckbestStrassenverkehr] | None,
        Field(
            description="Zweckbestimmung der Straßenverkehrsfläche oder Anlage",
            json_schema_extra={
                "typename": "SO_KomplexeZweckbestStrassenverkehr",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    einteilung: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "9999"] | None,
        Field(
            description="Straßeneinteilung nach Bundes-Fernstraßengesetz",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Bundesautobahn",
                        "alias": "Bundesautobahn",
                        "description": "Bundesautobahn",
                    },
                    "1100": {
                        "name": "Bundesstrasse",
                        "alias": "Bundesstraße",
                        "description": "Bundesstraße",
                    },
                    "1200": {
                        "name": "LandesStaatsstrasse",
                        "alias": "Landes- oder Staatsstraße",
                        "description": "Landes- oder Staatsstraße",
                    },
                    "1300": {
                        "name": "Kreisstrasse",
                        "alias": "Kreisstraße",
                        "description": "Kreisstraße",
                    },
                    "1400": {
                        "name": "Gemeindestrasse",
                        "alias": "Gemeindestraße",
                        "description": "Gemeindestraße",
                    },
                    "9999": {
                        "name": "SonstOeffentlStrasse",
                        "alias": "Sonstige öffentliche Straße",
                        "description": "Sonstige öffentliche Straße",
                    },
                },
                "typename": "SO_StrassenEinteilung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    istOrtsdurchfahrt: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob es sich um eine Ortsdurchfahrt handelt",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nutzungsform: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Nutzungsform der Fläche / Anlage",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Privat",
                        "alias": "Privat",
                        "token": "p",
                        "description": "Private Nutzung",
                    },
                    "2000": {
                        "name": "Oeffentlich",
                        "alias": "Öffentlich",
                        "token": "ö",
                        "description": "Öffentliche Nutzung",
                    },
                },
                "typename": "XP_Nutzungsform",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Begünstigter der Ausweisung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    hatDarstellungMitBesondZweckbest: Annotated[
        bool,
        Field(
            description='Bei true wird ein flächenhaftes Planobjekt gemäß § 6.3 PlanZV dargestellt ("Verkehrsflächen besonderer Zweckbestimmung"), und bei false gemäß § 6.1 PlanZV ("Straßenverkehrsflächen").',
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "1",
            },
        ),
    ]
    begrenzungslinie: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Linie, die die Straßenverkehrsfläche begrenzt.",
            json_schema_extra={
                "typename": "BP_StrassenbegrenzungsLinie",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class SOTextAbschnittFlaeche(SOFlaechenobjekt):
    """
    Bereich, in dem bestimmte textlich spezifizierte Planinhalte gültig sind, die über die Relation "refTextInhalt" (Basisklasse XP_Objekt) spezifiziert werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class SOWasserrecht(SOGeometrieobjekt):
    """
    Festlegung nach Wasserhaushaltsgesetz (WHG)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["2000", "20000", "20001", "20002", "3000", "4000", "5000", "9999"]
        | None,
        Field(
            description="Rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "enumDescription": {
                    "2000": {
                        "name": "Ueberschwemmungsgebiet",
                        "alias": "Überschwemmungsgebiet",
                        "description": "Allgemeines Überschwemmungsgebiet nach WHG",
                    },
                    "20000": {
                        "name": "FestgesetztesUeberschwemmungsgebiet",
                        "alias": "Festgesetztes Überschwemmungsgebiet",
                        "description": "Überschwemmungsgebiet nach §76 Abs.2 WHG",
                    },
                    "20001": {
                        "name": "NochNichtFestgesetztesUeberschwemmungsgebiet",
                        "alias": "Noch nicht festgesetztes Überschwemmungsgebiet",
                        "description": "N Noch nicht festgesetztes Überschwemmungsgebiet, das vorläufig gesichert ist nach. § 76 Abs. 3 WHG",
                    },
                    "20002": {
                        "name": "UeberschwemmGefaehrdetesGebiet",
                        "alias": "Überschwemmungsgefährdetes Gebiet",
                        "description": "Überschwemmungsgefährdetes Gebiet nach §31c des vor dem 1.3.2010 gültigen WHG",
                    },
                    "3000": {
                        "name": "Risikogebiet",
                        "alias": "Risikogebiet",
                        "description": "Risikogebiet nach § 76 Abs. 3 WHG",
                    },
                    "4000": {
                        "name": "RisikogebietAusserhUeberschwemmgebiet",
                        "alias": "Risikogebiet außerhalb Überschwemmungsgebiet",
                        "description": "Risikogebiet außerhalb von Überschwemmungsgebieten  nach. § 78b Abs. 1 WHG",
                    },
                    "5000": {
                        "name": "Hochwasserentstehungsgebiet",
                        "alias": "Hochwasserentstehungsgebiet",
                        "description": "Hochwasserentstehungsgebiet nach § 78d Abs. 1 WHG",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Klassifizierung nach Wasserrecht.",
                    },
                },
                "typename": "SO_KlassifizNachWasserrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachWasserrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    istNatuerlichesUberschwemmungsgebiet: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob es sich bei der Fläche um ein natürliches Überschwemmungsgebiet handelt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOWasserwirtschaft(SOGeometrieobjekt):
    """
    Flächen für die Wasserwirtschaft, sowie Flächen für Hochwasserschutzanlagen und für die Regelung des Wasserabflusses (§9 Abs. 1 Nr. 16a und 16b BauGB, §5 Abs. 2 Nr. 7 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500", "9999"] | None,
        Field(
            description="Klassifizierung der Festlegung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "HochwasserRueckhaltebecken",
                        "alias": "Hochwasser-Rückhaltebecken",
                        "description": "Hochwasser-Rückhaltebecken",
                    },
                    "1100": {
                        "name": "Ueberschwemmgebiet",
                        "alias": "Überschwemmungsgebiet",
                        "description": "Überschwemmungsgefährdetes Gebiet nach §31c des vor dem 1.10.2010 gültigen WHG",
                    },
                    "1200": {
                        "name": "Versickerungsflaeche",
                        "alias": "Versickerungsfläche",
                        "description": "Versickerungsfläche",
                    },
                    "1300": {
                        "name": "Entwaesserungsgraben",
                        "alias": "Entwässerungsgraben",
                        "description": "Entwässerungsgraben",
                    },
                    "1400": {"name": "Deich", "alias": "Deich", "description": "Deich"},
                    "1500": {
                        "name": "RegenRueckhaltebecken",
                        "alias": "Regen-Rückhaltebecken",
                        "description": "Regen-Rückhaltebecken",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Wasserwirtschaftsfläche, sofern keiner der anderen Codes zutreffend ist.",
                    },
                },
                "typename": "SO_KlassifizWasserwirtschaft",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizWasserwirtschaft",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPAbgrabungsFlaeche(BPFlaechenobjekt):
    """
    Flächen für Aufschüttungen, Abgrabungen oder für die Gewinnung von Bodenschätzen (§9, Abs. 1, Nr. 17 BauGB)). Hier: Flächen für Abgrabungen und die Gewinnung von Bodenschätzen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    abbaugut: Annotated[
        str | None,
        Field(
            description="Bezeichnung des Abbauguts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPAbstandsFlaeche(BPUeberlagerungsobjekt):
    """
    Festsetzung eines vom Bauordnungsrecht abweichenden Maßes der Tiefe der Abstandsfläche gemäß § 9 Abs 1. Nr. 2a BauGB
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    tiefe: Annotated[
        definitions.Length | None,
        Field(
            description="Absolute Angabe der Tiefe.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None


class BPAbstandsMass(BPLinienobjekt):
    """
    Darstellung von Maßpfeilen oder Maßkreisen in BPlänen, um eine eindeutige Vermassung einzelner Festsetzungen zu erreichen.

    Bei Masspfeilen (typ == 1000) darf das Geometrie-Attribut position nur eine einfache Linien (gml:LineString mit 2 Punkten) enthalten.
    Bei Maßkreisen (typ == 2000) darf position nur einen einfachen Kreisbogen (gml:Curve mit genau einem gml:Arc enthalten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Typ der Massangabe (Maßpfeil oder Maßkreis).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Masspfeil",
                        "alias": "Maßpfeil",
                        "description": "Das Objekt definiert einen Maßpfeil",
                    },
                    "2000": {
                        "name": "Masskreis",
                        "alias": "Maßkreis",
                        "description": "Das Objekt definiert einen Maßkreis",
                    },
                },
                "typename": "BP_AbstandsMassTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    wert: Annotated[
        definitions.GenericMeasure | None,
        Field(
            description='Wertangabe des Abstandsmaßes. Bei Maßpfeilen (typ == 1000) enthält das Attribut die Länge des Maßpfeilen (uom = "m"), bei Maßkreisen den von startWinkel und endWinkel eingeschlossenen Winkel (uom = "grad").',
            json_schema_extra={
                "typename": "Measure",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "tbd",
            },
        ),
    ] = None
    startWinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Startwinkel für die Plandarstellung des Abstandsmaßes (nur relevant für Maßkreise). Die Winkelwerte beziehen sich auf den Rechtswert (Ost-Richtung)",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    endWinkel: Annotated[
        definitions.Angle | None,
        Field(
            description="Endwinkel für die Planarstellung des Abstandsmaßes (nur relevant für Maßkreise). Die Winkelwerte beziehen sich auf den Rechtswert (Ost-Richtung)",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None


class BPAbweichungVonBaugrenze(BPLinienobjekt):
    """
    Linienhafte Festlegung des Umfangs der Abweichung von der Baugrenze (§23 Abs. 3 Satz 3 BauNVO).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPAbweichungVonUeberbaubarerGrundstuecksFlaeche(BPUeberlagerungsobjekt):
    """
    Flächenhafte Festlegung des Umfangs der Abweichung von der überbaubaren Grundstücksfläche (§23 Abs. 3 Satz 3 BauNVO).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPAnpflanzungBindungErhaltung(BPGeometrieobjekt):
    """
    Festsetzung des Anpflanzens von Bäumen, Sträuchern und sonstigen Bepflanzungen;
    Festsetzung von Bindungen für Bepflanzungen und für die Erhaltung von Bäumen, Sträuchern und sonstigen Bepflanzungen sowie von Gewässern;  (§9 Abs. 1 Nr. 25 und Abs. 4 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    massnahme: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Art der Maßnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "BindungErhaltung",
                        "alias": "Bindung und Erhaltung",
                        "description": "Bindungen für Bepflanzungen und für die Erhaltung von Bäumen, Sträuchern und sonstigen Bepflanzungen sowie von Gewässern. Dies entspricht dem Planzeichen 13.2.2 der PlanzV 1990.",
                    },
                    "2000": {
                        "name": "Anpflanzung",
                        "alias": "Anpflanzung",
                        "description": "Anpflanzung von Bäumen, Sträuchern oder sonstigen Bepflanzungen. Dies entspricht dem Planzeichen 13.2.1 der PlanzV 1990.",
                    },
                    "3000": {
                        "name": "AnpflanzungBindungErhaltung",
                        "alias": "Anpflanzung, Bindung und Erhaltung",
                        "description": "Anpflanzen von Bäumen, Sträuchern und sonstigen Bepflanzungen, sowie Bindungen für Bepflanzungen und für die Erhaltung von Bäumen, Sträuchern und sonstigen Bepflanzungen sowie von Gewässern",
                    },
                },
                "typename": "XP_ABEMassnahmenTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    gegenstand: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "2000",
                "2050",
                "2100",
                "2200",
                "3000",
                "4000",
                "5000",
                "6000",
            ]
        ]
        | None,
        Field(
            description="Gegenstand der Maßnahme.",
            json_schema_extra={
                "typename": "XP_AnpflanzungBindungErhaltungsGegenstand",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Baeume",
                        "alias": "Bäume",
                        "description": "Bäume",
                    },
                    "1100": {
                        "name": "Kopfbaeume",
                        "alias": "Kopfbäume",
                        "description": "Kopfbäume",
                    },
                    "1200": {
                        "name": "Baumreihe",
                        "alias": "Baumreihe",
                        "description": "Baumreihe",
                    },
                    "2000": {
                        "name": "Straeucher",
                        "alias": "Sträucher",
                        "description": "Sträucher",
                    },
                    "2050": {
                        "name": "BaeumeUndStraeucher",
                        "alias": "Bäume und Sträucher",
                        "description": "Bäume und Sträucher",
                    },
                    "2100": {"name": "Hecke", "alias": "Hecke", "description": "Hecke"},
                    "2200": {"name": "Knick", "alias": "Knick", "description": "Knick"},
                    "3000": {
                        "name": "SonstBepflanzung",
                        "alias": "Sonstige Bepflanzung",
                        "description": "Sonstige Bepflanzung",
                    },
                    "4000": {
                        "name": "Gewaesser",
                        "alias": "Gewässer",
                        "description": "Gewässer (nur Erhaltung)",
                    },
                    "5000": {
                        "name": "Fassadenbegruenung",
                        "alias": "Fassadenbegrünung",
                        "description": "Fassadenbegrünung",
                    },
                    "6000": {
                        "name": "Dachbegruenung",
                        "alias": "Dachbegrünung",
                        "description": "Dachbegrünung",
                    },
                },
            },
        ),
    ] = None
    kronendurchmesser: Annotated[
        definitions.Length | None,
        Field(
            description="Durchmesser der Baumkrone bei zu erhaltenden Bäumen.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    pflanztiefe: Annotated[
        definitions.Length | None,
        Field(
            description="Pflanztiefe",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    istAusgleich: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob die Fläche oder Maßnahme zum Ausgleich von Eingriffen genutzt wird.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    pflanzenArt: Annotated[
        str | None,
        Field(
            description="Textliche Spezifikation einer Pflanzenart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    mindesthoehe: Annotated[
        definitions.Length | None,
        Field(
            description="Mindesthöhe des Gegenstands der Festsetzung",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    anzahl: Annotated[
        int | None,
        Field(
            description="Anzahl der anzupflanzenden Objekte",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPAufschuettungsFlaeche(BPFlaechenobjekt):
    """
    Flächen für Aufschüttungen, Abgrabungen oder für die Gewinnung von Bodenschätzen (§ 9 Abs. 1 Nr. 17 und Abs. 6 BauGB). Hier: Flächen für Aufschüttungen
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    aufschuettungsmaterial: Annotated[
        str | None,
        Field(
            description="Bezeichnung des aufgeschütteten Materials",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPAusgleichsFlaeche(BPFlaechenobjekt):
    """
    Festsetzung einer Fläche zum Ausgleich im Sinne des § 1a Abs.3 und §9 Abs. 1a BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der Ausgleichsmaßnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Attribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Auf der Fläche durchzuführende Maßnahmen.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    refMassnahmenText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein Dokument, das die durchzuführenden Maßnahmen beschreibt.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refLandschaftsplan: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf den Landschaftsplan.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPAusgleichsMassnahme(BPGeometrieobjekt):
    """
    Festsetzung einer Einzelmaßnahme zum Ausgleich im Sinne des § 1a Abs.3 und §9 Abs. 1a BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der Ausgleichsmaßnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Attribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Durchzuführende Ausgleichsmaßnahme.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    refMassnahmenText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein Dokument, das die durchzuführenden Maßnahmen beschreibt.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refLandschaftsplan: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf den Landschaftsplan.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPBauGrenze(BPLinienobjekt):
    """
    Festsetzung einer Baugrenze (§9 Abs. 1 Nr. 2 BauGB, §22 und 23 BauNVO). Über die Attribute geschossMin und geschossMax kann die Festsetzung auf einen Bereich von Geschossen beschränkt werden. Wenn eine Einschränkung der Festsetzung durch expliziter Höhenangaben erfolgen soll, ist dazu die Oberklassen-Relation hoehenangabe auf den komplexen Datentyp XP_Hoehenangabe zu verwenden.
    Durch die Digitalisierungsreihenfolge der Linienstützpunkte muss sichergestellt sein, dass die überbaute Fläche (BP_UeberbaubareGrundstuecksFlaeche) relativ zur Laufrichtung auf der linken Seite liegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bautiefe: Annotated[
        definitions.Length | None,
        Field(
            description="Angabe einer Bautiefe.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    geschossMin: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Festsetzung die Nummer des Geschosses an, ab den die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse bis einschl. "geschossMax".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geschossMax: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Festsetzung die Nummer des Geschosses an, bis zu der die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse ab einschl. "geschossMin".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPBauLinie(BPLinienobjekt):
    """
    Festsetzung einer Baulinie (§9 Abs. 1 Nr. 2 BauGB, §22 und 23 BauNVO). Über die Attribute geschossMin und geschossMax kann die Festsetzung auf einen Bereich von Geschossen beschränkt werden. Wenn eine Einschränkung der Festsetzung durch explizite Höhenangaben erfolgen soll, ist dazu die Oberklassen-Relation hoehenangabe auf den komplexen Datentyp XP_Hoehenangabe zu verwenden.
    Durch die Digitalisierungsreihenfolge der Linienstützpunkte muss sichergestellt sein, dass die überbaute Fläche (BP_UeberbaubareGrundstuecksFlaeche) relativ zur Laufrichtung auf der linken Seite liegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    bautiefe: Annotated[
        definitions.Length | None,
        Field(
            description="Angabe einer Bautiefe.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    geschossMin: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Festsetzung die Nummer des Geschosses an, ab den die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse bis einschl. "geschossMax".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geschossMax: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Feststzung die Nummer des Geschosses an, bis zu der die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse ab einschl. "geschossMin".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPBaugebietsTeilFlaeche(BPFlaechenschlussobjekt):
    """
    Teil eines Baugebiets mit einheitlicher Art der baulichen Nutzung. Das Maß der baulichen Nutzung sowie Festsetzungen zur Bauweise oder Grenzbebauung können innerhalb einer BP_BaugebietsTeilFlaeche unterschiedlich sein (BP_UeberbaubareGrundstueckeFlaeche). Dabei darf das gleiche Attribut nicht gleichzeitig in BP_BaugebietsTeilFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    dachgestaltung: Annotated[
        list[BPDachgestaltung] | None,
        Field(
            description="Parameter zur Einschränkung der zulässigen Dachformen.",
            json_schema_extra={
                "typename": "BP_Dachgestaltung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    FR: Annotated[
        definitions.Angle | None,
        Field(
            description="Vorgeschriebene Firstrichtung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    abweichungText: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Textliche Beschreibung der abweichenden Bauweise",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wohnnutzungEGStrasse: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 1 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden \r\nim Erdgeschoss an der Straßenseite eine Wohnnutzung nicht oder nur ausnahmsweise zulässig ist.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zulaessig",
                        "alias": "Zulässig",
                        "description": "Generelle Zulässigkeit",
                    },
                    "2000": {
                        "name": "NichtZulaessig",
                        "alias": "Nicht zulässig",
                        "description": "Generelle Nicht-Zulässigkeit.",
                    },
                    "3000": {
                        "name": "AusnahmsweiseZulaessig",
                        "alias": "Ausnahmsweise zulässig",
                        "description": "Ausnahmsweise Zulässigkeit",
                    },
                },
                "typename": "BP_Zulaessigkeit",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZWohn: Annotated[
        int | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 1 bzw. nach  §6a Abs. (4) Nr. 2 BauNVO: Für besondere Wohngebiete und  urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden oberhalb eines im Bebauungsplan bestimmten Geschosses nur Wohnungen zulässig sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFAntWohnen: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFWohnen: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFAntGewerbe: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFGewerbe: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    VF: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung der maximal zulässigen Verkaufsfläche in einem Sondergebiet",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    allgArtDerBaulNutzung: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Spezifikation der allgemeinen Art der baulichen Nutzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "WohnBauflaeche",
                        "alias": "Wohnbaufläche",
                        "token": "W",
                        "description": "Wohnbaufläche nach §1 Abs. (1) BauNVO",
                    },
                    "2000": {
                        "name": "GemischteBauflaeche",
                        "alias": "Gemischte Baufläche",
                        "token": "M",
                        "description": "Gemischte Baufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "3000": {
                        "name": "GewerblicheBauflaeche",
                        "alias": "Gewerbliche Baufläche",
                        "token": "G",
                        "description": "Gewerbliche Baufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "4000": {
                        "name": "SonderBauflaeche",
                        "alias": "Sonderbaufläche",
                        "token": "S",
                        "description": "Sonderbaufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "9999": {
                        "name": "SonstigeBauflaeche",
                        "alias": "Sonstige Baufläche",
                        "token": "B",
                        "description": "Sonstige Baufläche",
                    },
                },
                "typename": "XP_AllgArtDerBaulNutzung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    besondereArtDerBaulNutzung: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1450",
            "1500",
            "1550",
            "1600",
            "1700",
            "1800",
            "2000",
            "2100",
            "3000",
            "4000",
            "9999",
        ]
        | None,
        Field(
            description="Festsetzung der Art der baulichen Nutzung (§9, Abs. 1, Nr. 1 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Kleinsiedlungsgebiet",
                        "alias": "Kleinsiedlungsgebiet",
                        "token": "WS",
                        "description": "Kleinsiedlungsgebiet nach § 2 BauNVO.",
                    },
                    "1100": {
                        "name": "ReinesWohngebiet",
                        "alias": "Reines Wohngebiet",
                        "token": "WR",
                        "description": "Reines Wohngebiet nach § 3 BauNVO.",
                    },
                    "1200": {
                        "name": "AllgWohngebiet",
                        "alias": "Allgemeines Wohngebiet",
                        "token": "WA",
                        "description": "Allgemeines Wohngebiet nach § 4 BauNVO.",
                    },
                    "1300": {
                        "name": "BesonderesWohngebiet",
                        "alias": "Besonderes Wohngebiet",
                        "token": "WB",
                        "description": "Gebiet zur Erhaltung und Entwicklung der Wohnnutzung (Besonderes Wohngebiet) nach § 4a BauNVO.",
                    },
                    "1400": {
                        "name": "Dorfgebiet",
                        "alias": "Dorfgebiet",
                        "token": "MD",
                        "description": "Dorfgebiet nach § 5 BauNVO.",
                    },
                    "1450": {
                        "name": "DoerflichesWohngebiet",
                        "alias": "Dörfliches Wohngebiet",
                        "token": "MDW",
                        "description": "Dörfliches Wohngebiet nach §5a BauNVO",
                    },
                    "1500": {
                        "name": "Mischgebiet",
                        "alias": "Mischgebiet",
                        "token": "MI",
                        "description": "Mischgebiet nach § 6 BauNVO.",
                    },
                    "1550": {
                        "name": "UrbanesGebiet",
                        "alias": "Urbanes Gebiet",
                        "token": "MU",
                        "description": "Urbanes Gebiet nach § 6a BauNVO",
                    },
                    "1600": {
                        "name": "Kerngebiet",
                        "alias": "Kerngebiet",
                        "token": "MK",
                        "description": "Kerngebiet nach § 7 BauNVO.",
                    },
                    "1700": {
                        "name": "Gewerbegebiet",
                        "alias": "Gewerbegebiet",
                        "token": "GE",
                        "description": "Gewerbegebiet nach § 8 BauNVO.",
                    },
                    "1800": {
                        "name": "Industriegebiet",
                        "alias": "Industriegebiet",
                        "token": "GI",
                        "description": "Industriegebiet nach § 9 BauNVO.",
                    },
                    "2000": {
                        "name": "SondergebietErholung",
                        "alias": "Sondergebiet Erholung",
                        "token": "SO ERHOL",
                        "description": "Sondergebiet, das der Erholung dient nach § 10 BauNVO von 1977 und 1990.",
                    },
                    "2100": {
                        "name": "SondergebietSonst",
                        "alias": "Sonstiges Sondergebiet",
                        "token": "SO Sonst",
                        "description": "Sonstiges Sondergebiet nach§ 11 BauNVO 1977 und 1990; z.B. Klinikgebiet",
                    },
                    "3000": {
                        "name": "Wochenendhausgebiet",
                        "alias": "Wochenendhausgebiet",
                        "token": "SO WOCH",
                        "description": "Wochenendhausgebiet nach §10 der BauNVO von 1962 und 1968",
                    },
                    "4000": {
                        "name": "Sondergebiet",
                        "alias": "Sondergebiet",
                        "token": "SO",
                        "description": "Sondergebiet nach §11der BauNVO von 1962 und 1968",
                    },
                    "9999": {
                        "name": "SonstigesGebiet",
                        "alias": "Sonstiges Gebiet",
                        "token": "SG",
                        "description": "Sonstiges Gebiet",
                    },
                },
                "typename": "XP_BesondereArtDerBaulNutzung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sondernutzung: Annotated[
        list[BPKomplexeSondernutzung] | None,
        Field(
            description="Differenziert Sondernutzungen nach §10 und §11 der BauNVO von 1977 und 1990. Das Attribut wird nur benutzt, wenn besondereArtDerBaulNutzung unbelegt ist oder einen der Werte 2000 bzw. 2100 hat.",
            json_schema_extra={
                "typename": "BP_KomplexeSondernutzung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    detaillierteArtDerBaulNutzung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Nutzungsart, mit der die allgemeine und/oder besondere Art der baulichen Nutzung weiter detailliert werden können.",
            json_schema_extra={
                "typename": "BP_DetailArtDerBaulNutzung",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichungBauNVO: Annotated[
        Literal["1000", "2000", "3000", "9999"] | None,
        Field(
            description="Art der zulässigen Abweichung von der BauNVO.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "EinschraenkungNutzung",
                        "alias": "Einschränkung Nutzung",
                        "description": "Einschränkung einer generell erlaubten Nutzung.",
                    },
                    "2000": {
                        "name": "AusschlussNutzung",
                        "alias": "Ausschluss Nutzung",
                        "description": "Ausschluss einer generell erlaubten Nutzung.",
                    },
                    "3000": {
                        "name": "AusweitungNutzung",
                        "alias": "Ausweitung Nutzung",
                        "description": "Eine nur ausnahmsweise zulässige Nutzung wird generell zulässig.",
                    },
                    "9999": {
                        "name": "SonstAbweichung",
                        "alias": "Sonstige Abweichung",
                        "description": "Sonstige Abweichung.",
                    },
                },
                "typename": "XP_AbweichungBauNVOTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweise: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bauweise  (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OffeneBauweise",
                        "alias": "Offene Bauweise",
                        "token": "o",
                        "description": "Offene Bauweise",
                    },
                    "2000": {
                        "name": "GeschlosseneBauweise",
                        "alias": "Geschlossene Bauweise",
                        "token": "g",
                        "description": "Geschlossene Bauweise",
                    },
                    "3000": {
                        "name": "AbweichendeBauweise",
                        "alias": "Abweichende Bauweise",
                        "token": "a",
                        "description": "Abweichende Bauweise",
                    },
                },
                "typename": "BP_Bauweise",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweiseText: Annotated[
        str | None,
        Field(
            description="Textuelle Präzisierung oder Ergänzung der durch bauweise spezifizierten Bauweise.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichendeBauweise: Annotated[
        AnyUrl | None,
        Field(
            description='Nähere Bezeichnung einer "Abweichenden Bauweise" ("bauweise" == 3000).',
            json_schema_extra={
                "typename": "BP_AbweichendeBauweise",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vertikaleDifferenzierung: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob eine vertikale Differenzierung der Gebäude vorgeschrieben ist.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    bebauungsArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000"] | None,
        Field(
            description="Detaillierte Festsetzung der Bauweise (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhaeuser",
                        "alias": "Einzelhäuser",
                        "token": "E",
                        "description": "Nur Einzelhäuser zulässig.",
                    },
                    "2000": {
                        "name": "Doppelhaeuser",
                        "alias": "Doppelhäuser",
                        "token": "D",
                        "description": "Nur Doppelhäuser zulässig.",
                    },
                    "3000": {
                        "name": "Hausgruppen",
                        "alias": "Hausgruppen",
                        "token": "H",
                        "description": "Nur Hausgruppen zulässig.",
                    },
                    "4000": {
                        "name": "EinzelDoppelhaeuser",
                        "alias": "Einzel- und Doppelhäuser",
                        "token": "ED",
                        "description": "Nur Einzel- oder Doppelhäuser zulässig.",
                    },
                    "5000": {
                        "name": "EinzelhaeuserHausgruppen",
                        "alias": "Einzelhäuser Hausgruppen",
                        "token": "EH",
                        "description": "Nur Einzelhäuser oder Hausgruppen zulässig.",
                    },
                    "6000": {
                        "name": "DoppelhaeuserHausgruppen",
                        "alias": "Doppelhäuser und Hausgruppen",
                        "token": "DH",
                        "description": "Nur Doppelhäuser oder Hausgruppen zulässig.",
                    },
                    "7000": {
                        "name": "Reihenhaeuser",
                        "alias": "Reihenhäuser",
                        "token": "Rh",
                        "description": "Nur Reihenhäuser zulässig.",
                    },
                },
                "typename": "BP_BebauungsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungVordereGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der vorderen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungRueckwaertigeGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der rückwärtigen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungSeitlicheGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der seitlichen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refGebaeudequerschnitt: Annotated[
        list[XPExterneReferenz] | None,
        Field(
            description="Referenz auf ein Dokument mit vorgeschriebenen Gebäudequerschnitten.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten einer Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPBereichOhneEinAusfahrtLinie(BPLinienobjekt):
    """
    Bereich ohne Ein- und Ausfahrt (§ 9 Abs. 1 Nr. 11 und Abs. 6 BauGB).
    Durch die Digitalisierungsreihenfolge der Linienstützpunkte muss sichergestellt sein, dass der angrenzende Bereich ohne Ein- und Ausfahrt relativ zur Laufrichtung auf der linken Seite liegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Typ des Bereiches ohne Ein- und Ausfahrt",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "KeineEinfahrt",
                        "alias": "Keine Einfahrt",
                        "description": "Bereich ohne Einfahrt",
                    },
                    "2000": {
                        "name": "KeineAusfahrt",
                        "alias": "Keine Ausfahrt",
                        "description": "Bereich ohne Ausfahrt",
                    },
                    "3000": {
                        "name": "KeineEinAusfahrt",
                        "alias": "Keine Ein- oder Ausfahrt",
                        "description": "Bereich ohne Ein- und Ausfahrt.",
                    },
                },
                "typename": "BP_BereichOhneEinAusfahrtTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPBesondererNutzungszweckFlaeche(BPFlaechenobjekt):
    """
    Festsetzung einer Fläche mit besonderem Nutzungszweck, der durch besondere städtebauliche Gründe erfordert wird (§9 Abs. 1 Nr. 9 BauGB.). Das gleiche Attribut darf nicht gleichzeitig in BP_BesondererNutzungszweckFlaeche und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    dachgestaltung: Annotated[
        list[BPDachgestaltung] | None,
        Field(
            description="Parameter zur Einschränkung der zulässigen Dachformen.",
            json_schema_extra={
                "typename": "BP_Dachgestaltung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    FR: Annotated[
        definitions.Angle | None,
        Field(
            description="Vorgeschriebene Firstrichtung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    zweckbestimmung: Annotated[
        str | None,
        Field(
            description="Angabe des besonderen Nutzungszwecks.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweise: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bauweise  (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OffeneBauweise",
                        "alias": "Offene Bauweise",
                        "token": "o",
                        "description": "Offene Bauweise",
                    },
                    "2000": {
                        "name": "GeschlosseneBauweise",
                        "alias": "Geschlossene Bauweise",
                        "token": "g",
                        "description": "Geschlossene Bauweise",
                    },
                    "3000": {
                        "name": "AbweichendeBauweise",
                        "alias": "Abweichende Bauweise",
                        "token": "a",
                        "description": "Abweichende Bauweise",
                    },
                },
                "typename": "BP_Bauweise",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweiseText: Annotated[
        str | None,
        Field(
            description="Textuelle Präzisierung oder Ergänzung der durch bauweise spezifizierten Bauweise.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichendeBauweise: Annotated[
        AnyUrl | None,
        Field(
            description='Nähere Bezeichnung einer "Abweichenden Bauweise" ("bauweise" == 3000).',
            json_schema_extra={
                "typename": "BP_AbweichendeBauweise",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungsArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000"] | None,
        Field(
            description="Detaillierte Festsetzung der Bauweise (§9, Abs. 1, Nr. 2 BauGB).",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhaeuser",
                        "alias": "Einzelhäuser",
                        "token": "E",
                        "description": "Nur Einzelhäuser zulässig.",
                    },
                    "2000": {
                        "name": "Doppelhaeuser",
                        "alias": "Doppelhäuser",
                        "token": "D",
                        "description": "Nur Doppelhäuser zulässig.",
                    },
                    "3000": {
                        "name": "Hausgruppen",
                        "alias": "Hausgruppen",
                        "token": "H",
                        "description": "Nur Hausgruppen zulässig.",
                    },
                    "4000": {
                        "name": "EinzelDoppelhaeuser",
                        "alias": "Einzel- und Doppelhäuser",
                        "token": "ED",
                        "description": "Nur Einzel- oder Doppelhäuser zulässig.",
                    },
                    "5000": {
                        "name": "EinzelhaeuserHausgruppen",
                        "alias": "Einzelhäuser Hausgruppen",
                        "token": "EH",
                        "description": "Nur Einzelhäuser oder Hausgruppen zulässig.",
                    },
                    "6000": {
                        "name": "DoppelhaeuserHausgruppen",
                        "alias": "Doppelhäuser und Hausgruppen",
                        "token": "DH",
                        "description": "Nur Doppelhäuser oder Hausgruppen zulässig.",
                    },
                    "7000": {
                        "name": "Reihenhaeuser",
                        "alias": "Reihenhäuser",
                        "token": "Rh",
                        "description": "Nur Reihenhäuser zulässig.",
                    },
                },
                "typename": "BP_BebauungsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPEinfahrtsbereichLinie(BPLinienobjekt):
    """
    Linienhaft modellierter Einfahrtsbereich (§9 Abs. 1 Nr. 11 und Abs. 6 BauGB).
    Durch die Digitalisierungsreihenfolge der Linienstützpunkte muss sichergestellt sein, dass die  angrenzende Einfahrt relativ zur Laufrichtung auf der linken Seite liegt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Typ der Einfahrt",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einfahrt",
                        "alias": "Einfahrt",
                        "description": "Nur Einfahrt möglich",
                    },
                    "2000": {
                        "name": "Ausfahrt",
                        "alias": "Ausfahrt",
                        "description": "Nur Ausfahrt möglich",
                    },
                    "3000": {
                        "name": "EinAusfahrt",
                        "alias": "Ein- und Ausfahrt",
                        "description": "Ein- und Ausfahrt möglich",
                    },
                },
                "typename": "BP_EinfahrtTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPEingriffsBereich(BPUeberlagerungsobjekt):
    """
    Bestimmt einen Bereich, in dem ein Eingriff nach dem Naturschutzrecht zugelassen wird, der durch geeignete Flächen oder Maßnahmen ausgeglichen werden muss.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPFestsetzungNachLandesrecht(BPGeometrieobjekt):
    """
    Festsetzung nach § 9 Nr. (4) BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    kurzbeschreibung: Annotated[
        str | None,
        Field(
            description="Kurzbeschreibung der Festsetzung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPFlaecheOhneFestsetzung(BPFlaechenschlussobjekt):
    """
    Fläche, für die keine geplante Nutzung angegeben werden kann
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPFoerderungsFlaeche(BPUeberlagerungsobjekt):
    """
    Fläche, auf der ganz oder teilweise nur Wohngebäude, die mit Mitteln der sozialen Wohnraumförderung gefördert werden könnten, errichtet werden dürfen (§9, Abs. 1, Nr. 7 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPGebaeudeFlaeche(BPUeberlagerungsobjekt):
    """
    Grundrissfläche eines existierenden Gebäudes
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPGebaeudeStellung(BPLinienobjekt):
    """
    Gestaltungs-Festsetzung der Firstrichtung, oder Dach-Ausrichtung, beruhend auf Landesrecht, gemäß §9 Abs. 4 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Angabe, auf welche Art und Weise die Stellung des Gebäudes spezifiziert wird.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Firstrichtung",
                        "alias": "Firstrichtung",
                        "description": "Spezifikation der Firstlinie",
                    },
                    "2000": {
                        "name": "Dachneigungsrichtung",
                        "alias": "Dachneigungsrichtung",
                        "description": "Spezifikation einer gerichteten Linie von der Dachtraufe zum Dachfirst.",
                    },
                    "3000": {
                        "name": "StellungBaulAnlagen",
                        "alias": "Stellung baulicher Anlagen",
                        "description": "Der Code wird nur verwendet, wenn bei den geplanten Gebäuden keine eindeutige Firstrichtung identifizierbar ist. Die spezifizierte Linie gibt in diesem Fall die räumliche Ausrichtung des Haupt-Baukörpers an.",
                    },
                },
                "typename": "BP_GebaeudeStellungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]


class BPGemeinschaftsanlagenFlaeche(BPUeberlagerungsobjekt):
    """
    Fläche für Gemeinschaftsanlagen für bestimmte räumliche Bereiche wie Kinderspielplätze, Freizeiteinrichtungen, Stellplätze und Garagen (§ 9 Abs. 1 Nr. 22 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestGemeinschaftsanlagen] | None,
        Field(
            description="Zweckbestimmung der Fläche",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestGemeinschaftsanlagen",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von Garagen-Geschossen",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    eigentuemer: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Relation auf die Baugebietsfläche, zu der die Gemeinschaftsanlagen-Fläche gehört.",
            json_schema_extra={
                "typename": "BP_BaugebietsTeilFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPGemeinschaftsanlagenZuordnung(BPGeometrieobjekt):
    """
    Zuordnung von Gemeinschaftsanlagen zu Grundstücken.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zuordnung: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Relation auf die zugeordneten Gemeinschaftsanlagen-Flächen, die außerhalb des Baugebiets liegen.",
            json_schema_extra={
                "typename": "BP_GemeinschaftsanlagenFlaeche",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPGenerischesObjekt(BPGeometrieobjekt):
    """
    Klasse zur Modellierung aller Inhalte des Bebauungsplans,die durch keine andere spezifische XPlanung Klasse repräsentiert werden können.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine CodeList definierte Zweckbestimmung des Objektes.",
            json_schema_extra={
                "typename": "BP_ZweckbestimmungGenerischeObjekte",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPNebenanlagenAusschlussFlaeche(BPUeberlagerungsobjekt):
    """
    Festsetzung einer Fläche für die Einschränkung oder den Ausschluss von Nebenanlagen nach §14 Absatz 1 Satz 3 BauNVO.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Art des Ausschlusses.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einschraenkung",
                        "alias": "Einschränkung",
                        "description": "Die Errichtung bestimmter Nebenanlagen ist eingeschränkt.",
                    },
                    "2000": {
                        "name": "Ausschluss",
                        "alias": "Ausschluss",
                        "description": "Die Errichtung bestimmter Nebenanlagen ist ausgeschlossen.",
                    },
                },
                "typename": "BP_NebenanlagenAusschlussTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichungText: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Textliche Beschreibung der Einschränkung oder des Ausschlusses.",
            json_schema_extra={
                "typename": "XP_TextAbschnitt",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPNebenanlagenFlaeche(BPUeberlagerungsobjekt):
    """
    Fläche für Nebenanlagen, die auf Grund anderer Vorschriften für die Nutzung von Grundstücken erforderlich sind, wie Spiel-, Freizeit- und Erholungsflächen sowie die Fläche für Stellplätze und Garagen mit ihren Einfahrten (§9 Abs. 1 Nr. 4 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[BPKomplexeZweckbestNebenanlagen] | None,
        Field(
            description="Zweckbestimmung der Nebenanlagen-Fläche",
            json_schema_extra={
                "typename": "BP_KomplexeZweckbestNebenanlagen",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl der Garagengeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPNichtUeberbaubareGrundstuecksflaeche(BPUeberlagerungsobjekt):
    """
    Festlegung der nicht-überbaubaren Grundstücksfläche
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    nutzung: Annotated[
        AnyUrl | None,
        Field(
            description="Zulässige Nutzung der Fläche",
            json_schema_extra={
                "typename": "BP_NutzungNichtUeberbaubGrundstFlaeche",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPPersGruppenBestimmteFlaeche(BPUeberlagerungsobjekt):
    """
    Fläche, auf denen ganz oder teilweise nur Wohngebäude errichtet werden dürfen, die für Personengruppen mit besonderem Wohnbedarf bestimmt sind (§9, Abs. 1, Nr. 8 BauGB)
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPRegelungVergnuegungsstaetten(BPUeberlagerungsobjekt):
    """
    Festsetzung nach §9 Abs. 2b BauGB (Zulässigkeit von Vergnügungsstätten).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zulaessigkeit: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Zulässigkeit von Vergnügungsstätten.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zulaessig",
                        "alias": "Zulässig",
                        "description": "Generelle Zulässigkeit",
                    },
                    "2000": {
                        "name": "NichtZulaessig",
                        "alias": "Nicht zulässig",
                        "description": "Generelle Nicht-Zulässigkeit.",
                    },
                    "3000": {
                        "name": "AusnahmsweiseZulaessig",
                        "alias": "Ausnahmsweise zulässig",
                        "description": "Ausnahmsweise Zulässigkeit",
                    },
                },
                "typename": "BP_Zulaessigkeit",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPSpezielleBauweise(BPUeberlagerungsobjekt):
    """
    Festsetzung der speziellen Bauweise / baulichen Besonderheit eines Gebäudes oder Bauwerks.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1500",
            "1600",
            "1700",
            "1800",
            "9999",
        ]
        | None,
        Field(
            description="Typ der speziellen Bauweise.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Durchfahrt",
                        "alias": "Durchfahrt",
                        "description": "Durchfahrt",
                    },
                    "1100": {
                        "name": "Durchgang",
                        "alias": "Durchgang",
                        "description": "Durchgang",
                    },
                    "1200": {
                        "name": "DurchfahrtDurchgang",
                        "alias": "Durchfahrt oder Durchgang",
                        "description": "Durchfahrt oder Durchgang",
                    },
                    "1300": {
                        "name": "Auskragung",
                        "alias": "Auskragung",
                        "description": "Auskragung",
                    },
                    "1400": {
                        "name": "Arkade",
                        "alias": "Arkade",
                        "description": "Arkade",
                    },
                    "1500": {
                        "name": "Luftgeschoss",
                        "alias": "Luftgeschoss",
                        "description": "Luftgeschoss",
                    },
                    "1600": {
                        "name": "Bruecke",
                        "alias": "Brücke",
                        "description": "Brücke",
                    },
                    "1700": {
                        "name": "Tunnel",
                        "alias": "Tunnel",
                        "description": "Tunnel",
                    },
                    "1800": {"name": "Rampe", "alias": "Rampe", "description": "Rampe"},
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige spezielle Bauweise.",
                    },
                },
                "typename": "BP_SpezielleBauweiseTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstTyp: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierter Typ der speziellen Bauweise, wenn typ den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "BP_SpezielleBauweiseSonstTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    wegerecht: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Relation auf Angaben zu Wegerechten.",
            json_schema_extra={
                "typename": "BP_Wegerecht",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class BPTechnischeMassnahmenFlaeche(BPUeberlagerungsobjekt):
    """
    Fläche für technische oder bauliche Maßnahmen nach § 9, Abs. 1, Nr. 23 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        Literal["1000", "2000", "3000"],
        Field(
            description="Klassifikation der durchzuführenden Maßnahmen nach §9, Abs. 1, Nr. 23 BauGB.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Luftreinhaltung",
                        "alias": "Luftreinhaltung",
                        "description": "Gebiete, in denen zum Schutz vor schädlichen Umwelteinwirkungen im Sinne des Bundes-Immissionsschutzgesetzes bestimmte Luft-verunreinigende Stoffe nicht oder nur beschränkt verwendet werden dürfen (§9, Abs. 1, Nr. 23a BauGB).",
                    },
                    "2000": {
                        "name": "NutzungErneurerbarerEnergien",
                        "alias": "Nutzung Erneuerbarer Energien",
                        "description": "Gebiete in denen bei der Errichtung von Gebäuden bestimmte bauliche Maßnahmen für den Einsatz erneuerbarer Energien wie insbesondere Solarenergie getroffen werden müssen (§9, Abs. 1, Nr. 23b BauGB).",
                    },
                    "3000": {
                        "name": "MinderungStoerfallfolgen",
                        "alias": "Minderung Störfallfolgen",
                        "description": "Gebiete, in denen bei der Errichtung von nach Art, Maß oder Nutzungsintensität zu bestimmenden Gebäuden oder sonstigen baulichen Anlagen in der Nachbarschaft von Betriebsbereichen nach § 3 Absatz 5a des Bundes-Immissionsschutzgesetzes bestimmte bauliche und sonstige technische Maßnahmen, die der Vermeidung oder Minderung der Folgen von Störfällen dienen, getroffen werden müssen (§9, Abs. 1, Nr. 23c BauGB).",
                    },
                },
                "typename": "BP_ZweckbestimmungenTMF",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    technischeMassnahme: Annotated[
        str | None,
        Field(
            description="Beschreibung der Maßnahme",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class BPTextAbschnittFlaeche(BPUeberlagerungsobjekt):
    """
    Bereich, in dem bestimmte Textliche Festsetzungen gültig sind, die über die Relation "refTextInhalt" (Basisklasse XP_Objekt) spezifiziert werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class BPUeberbaubareGrundstuecksFlaeche(BPUeberlagerungsobjekt):
    """
    Festsetzung der überbaubaren Grundstücksfläche (§9, Abs. 1, Nr. 2 BauGB). Über die Attribute geschossMin und geschossMax kann die Festsetzung auf einen Bereich von Geschossen beschränkt werden. Wenn eine Einschränkung der Festsetzung durch expliziter Höhenangaben erfolgen soll, ist dazu die Oberklassen-Relation hoehenangabe auf den komplexen Datentyp XP_Hoehenangabe zu verwenden. Das gleiche Attribut darf nicht gleichzeitig in einem Flächenschlussobjekt und einem überlagernden Objekt BP_UeberbaubareGrundstuecksFlaeche belegt werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    dachgestaltung: Annotated[
        list[BPDachgestaltung] | None,
        Field(
            description="Parameter zur Einschränkung der zulässigen Dachformen.",
            json_schema_extra={
                "typename": "BP_Dachgestaltung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    FR: Annotated[
        definitions.Angle | None,
        Field(
            description="Vorgeschriebene Firstrichtung",
            json_schema_extra={
                "typename": "Angle",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "grad",
            },
        ),
    ] = None
    MaxZahlWohnungen: Annotated[
        int | None,
        Field(
            description="Höchstzulässige Zahl der Wohnungen in Wohngebäuden",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MinGRWohneinheit: Annotated[
        definitions.Area | None,
        Field(
            description="Minimale Größe eines Grundstücks pro Wohneinheit",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmin: Annotated[
        definitions.Area | None,
        Field(
            description="Mindestmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Fmax: Annotated[
        definitions.Area | None,
        Field(
            description="Höchstmaß für die Größe (Fläche) eines Baugrundstücks.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Bmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Breite von Baugrundstücken",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Bmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Breite von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmin: Annotated[
        definitions.Length | None,
        Field(
            description="Minimale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    Tmax: Annotated[
        definitions.Length | None,
        Field(
            description="Maximale Tiefe von Baugrundstücken.",
            json_schema_extra={
                "typename": "Length",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Geschossflächenzahl .",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl bei einer Bereichsangabe. Das Attribut GFZmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZ_Ausn: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Geschossflächenzahl als Ausnahme.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Geschossfläche",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche bei einer Bereichsabgabe. Das Attribut GFmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GF_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Geschossfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumassenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BM: Annotated[
        definitions.Volume | None,
        Field(
            description="Maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    BM_Ausn: Annotated[
        definitions.Volume | None,
        Field(
            description="Ausnahmsweise maximal zulässige Baumasse.",
            json_schema_extra={
                "typename": "Volume",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m3",
            },
        ),
    ] = None
    GRZmin: Annotated[
        float | None,
        Field(
            description="Minimal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZmax: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl bei einer Bereichsangabe.  Das Attribut GRZmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Maximal zulässige Grundflächenzahl",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ_Ausn: Annotated[
        float | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundflächenzahl.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRmin: Annotated[
        definitions.Area | None,
        Field(
            description="Minimal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GRmax: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche bei einer Bereichsangabe. Das Attribut GRmin muss ebenfalls spezifiziert werden.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR: Annotated[
        definitions.Area | None,
        Field(
            description="Maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GR_Ausn: Annotated[
        definitions.Area | None,
        Field(
            description="Ausnahmsweise maximal zulässige Grundfläche.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    Zmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der oberirdischen Vollgeschosse bei einer Bereichsangabe. Das Attribut Zmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Zzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z: Annotated[
        int | None,
        Field(
            description="Maximalzahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der oberirdischen Vollgeschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Staffel: Annotated[
        int | None,
        Field(
            description="Maximale Anzahl von oberirdisch zurückgesetzten Vollgeschossen als zusätzliche Staffelgeschosse",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    Z_Dach: Annotated[
        int | None,
        Field(
            description="Maximalzahl der zusätzlich erlaubten Dachgeschosse, die gleichzeitig Vollgeschosse sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmin: Annotated[
        int | None,
        Field(
            description="Minimal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUmax: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse bei einer Bereichsangabe. Das Attribut ZUmin muss ebenfalls belegt sein.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZUzwingend: Annotated[
        int | None,
        Field(
            description="Zwingend vorgeschriebene Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU: Annotated[
        int | None,
        Field(
            description="Maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZU_Ausn: Annotated[
        int | None,
        Field(
            description="Ausnahmsweise maximal zulässige Zahl der unterirdischen Geschosse.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    MZspezial: Annotated[
        list[str] | None,
        Field(
            description="Textuelle Spezifikation von speziellen Maßzahlen, wie z.B. einer GRZ in Abhängigkeit von der Bebauungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    wohnnutzungEGStrasse: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 1 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden \r\nim Erdgeschoss an der Straßenseite eine Wohnnutzung nicht oder nur ausnahmsweise zulässig ist.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zulaessig",
                        "alias": "Zulässig",
                        "description": "Generelle Zulässigkeit",
                    },
                    "2000": {
                        "name": "NichtZulaessig",
                        "alias": "Nicht zulässig",
                        "description": "Generelle Nicht-Zulässigkeit.",
                    },
                    "3000": {
                        "name": "AusnahmsweiseZulaessig",
                        "alias": "Ausnahmsweise zulässig",
                        "description": "Ausnahmsweise Zulässigkeit",
                    },
                },
                "typename": "BP_Zulaessigkeit",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    ZWohn: Annotated[
        int | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 1 bzw. nach  §6a Abs. (4) Nr. 2 BauNVO: Für besondere Wohngebiete und  urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass in Gebäuden oberhalb eines im Bebauungsplan bestimmten Geschosses nur Wohnungen zulässig sind.",
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFAntWohnen: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFWohnen: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §4a Abs. (4) Nr. 2 bzw. §6a Abs. (4) Nr. 3 BauNVO: Für besondere Wohngebiete und urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für Wohnungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    GFAntGewerbe: Annotated[
        definitions.Scale | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden ein im Bebauungsplan bestimmter Anteil der zulässigen \r\nGeschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Scale",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "vH",
            },
        ),
    ] = None
    GFGewerbe: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung nach §6a Abs. (4) Nr. 4 BauNVO: Für urbane Gebiete oder Teile solcher Gebiete kann festgesetzt werden, dass \r\nin Gebäuden eine im Bebauungsplan bestimmte Größe der Geschossfläche für gewerbliche Nutzungen zu verwenden ist.",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    VF: Annotated[
        definitions.Area | None,
        Field(
            description="Festsetzung der maximal zulässigen Verkaufsfläche in einem Sondergebiet",
            json_schema_extra={
                "typename": "Area",
                "stereotype": "Measure",
                "multiplicity": "0..1",
                "uom": "m2",
            },
        ),
    ] = None
    bauweise: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bauweise  (§9, Abs. 1, Nr. 2 BauGB).\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OffeneBauweise",
                        "alias": "Offene Bauweise",
                        "token": "o",
                        "description": "Offene Bauweise",
                    },
                    "2000": {
                        "name": "GeschlosseneBauweise",
                        "alias": "Geschlossene Bauweise",
                        "token": "g",
                        "description": "Geschlossene Bauweise",
                    },
                    "3000": {
                        "name": "AbweichendeBauweise",
                        "alias": "Abweichende Bauweise",
                        "token": "a",
                        "description": "Abweichende Bauweise",
                    },
                },
                "typename": "BP_Bauweise",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bauweiseText: Annotated[
        str | None,
        Field(
            description="Textuelle Präzisierung oder Ergänzung der durch bauweise spezifizierten Bauweise.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichendeBauweise: Annotated[
        AnyUrl | None,
        Field(
            description='Nähere Bezeichnung einer "Abweichenden Bauweise" ("bauweise == 3000").\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung',
            json_schema_extra={
                "typename": "BP_AbweichendeBauweise",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    vertikaleDifferenzierung: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob eine vertikale Differenzierung der Gebäude vorgeschrieben ist.\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    bebauungsArt: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000"] | None,
        Field(
            description="Detaillierte Festsetzung der Bauweise (§9, Abs. 1, Nr. 2 BauGB).\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhaeuser",
                        "alias": "Einzelhäuser",
                        "token": "E",
                        "description": "Nur Einzelhäuser zulässig.",
                    },
                    "2000": {
                        "name": "Doppelhaeuser",
                        "alias": "Doppelhäuser",
                        "token": "D",
                        "description": "Nur Doppelhäuser zulässig.",
                    },
                    "3000": {
                        "name": "Hausgruppen",
                        "alias": "Hausgruppen",
                        "token": "H",
                        "description": "Nur Hausgruppen zulässig.",
                    },
                    "4000": {
                        "name": "EinzelDoppelhaeuser",
                        "alias": "Einzel- und Doppelhäuser",
                        "token": "ED",
                        "description": "Nur Einzel- oder Doppelhäuser zulässig.",
                    },
                    "5000": {
                        "name": "EinzelhaeuserHausgruppen",
                        "alias": "Einzelhäuser Hausgruppen",
                        "token": "EH",
                        "description": "Nur Einzelhäuser oder Hausgruppen zulässig.",
                    },
                    "6000": {
                        "name": "DoppelhaeuserHausgruppen",
                        "alias": "Doppelhäuser und Hausgruppen",
                        "token": "DH",
                        "description": "Nur Doppelhäuser oder Hausgruppen zulässig.",
                    },
                    "7000": {
                        "name": "Reihenhaeuser",
                        "alias": "Reihenhäuser",
                        "token": "Rh",
                        "description": "Nur Reihenhäuser zulässig.",
                    },
                },
                "typename": "BP_BebauungsArt",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungVordereGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der vorderen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungRueckwaertigeGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der rückwärtigen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bebauungSeitlicheGrenze: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Festsetzung der Bebauung der seitlichen Grundstücksgrenze (§9, Abs. 1, Nr. 2 BauGB).\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Verboten",
                        "alias": "Verboten",
                        "description": "Eine Bebauung der Grenze ist verboten.",
                    },
                    "2000": {
                        "name": "Erlaubt",
                        "alias": "Erlaubt",
                        "description": "Eine Bebauung der Grenze ist erlaubt.",
                    },
                    "3000": {
                        "name": "Erzwungen",
                        "alias": "Erzwungen",
                        "description": "Eine Bebauung der Grenze ist vorgeschrieben.",
                    },
                },
                "typename": "BP_GrenzBebauung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refGebaeudequerschnitt: Annotated[
        list[XPExterneReferenz] | None,
        Field(
            description="Referenz auf ein Dokument mit vorgeschriebenen Gebäudequerschnitten.\r\nDieser Wert hat Priorität gegenüber einer im umschließenden Baugebiet (BP_BaugebietsTeilFlaeche) getroffenen Festsetzung.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    baugrenze: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Baugrenze, die auf der Randkurve der Fläche verläuft.",
            json_schema_extra={
                "typename": "BP_BauGrenze",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    baulinie: Annotated[
        list[AnyUrl | UUID] | None,
        Field(
            description="Referenz auf eine Baulinie, die auf der Randkurve der Fläche verläuft.",
            json_schema_extra={
                "typename": "BP_BauLinie",
                "stereotype": "Association",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    geschossMin: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Festsetzung die Nummer des Geschosses an, ab den die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse bis einschl. "geschossMax".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    geschossMax: Annotated[
        int | None,
        Field(
            description='Gibt bei geschossweiser Festsetzung die Nummer des Geschosses an, bis zu der die Festsetzung gilt. Wenn das Attribut nicht belegt ist, gilt die Festsetzung für alle Geschosse ab einschl. "geschossMin".',
            json_schema_extra={
                "typename": "Integer",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPAbgrabung(FPGeometrieobjekt):
    """
    Flächen für Aufschüttungen, Abgrabungen oder für die Gewinnung von Bodenschätzen (§5, Abs. 2, Nr. 8 BauGB). Hier: Flächen für Abgrabungen und die Gewinnung von Bodenschätzen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    abbaugut: Annotated[
        str | None,
        Field(
            description="Bezeichnung des Abbauguts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPAnpassungKlimawandel(FPGeometrieobjekt):
    """
    Anlagen, Einrichtungen und sonstige Maßnahmen, die der Anpassung an den Klimawandel dienen nach §5 Abs.2 Nr.2c BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    massnahme: Annotated[
        Literal["1000", "10000", "10001", "10002", "9999"] | None,
        Field(
            description="Klassifikation der Massnahme",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "ErhaltFreiflaechen",
                        "alias": "Erhalt Freiflächen",
                        "description": "Erhalt vegetationsbestandener Freiflächen",
                    },
                    "10000": {
                        "name": "ErhaltPrivGruen",
                        "alias": "Erhalt private Grünflächen",
                        "description": "Erhalt privater Grünflächen",
                    },
                    "10001": {
                        "name": "ErhaltOeffentlGruen",
                        "alias": "Erhalt öffentliche Grünflächen",
                        "description": "Erhalt öffentlicher Grünflächen",
                    },
                    "10002": {
                        "name": "ErhaltKaltluftschneise",
                        "alias": "Erhalt Kaltluftschneise",
                        "description": "Erhalt einer Kaltluftschneise",
                    },
                    "9999": {
                        "name": "SonstMassnahme",
                        "alias": "Sonstige Maßnahme",
                        "description": "Sonstige Massnahme",
                    },
                },
                "typename": "FP_MassnahmeKlimawandelTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailMassnahme: Annotated[
        AnyUrl | None,
        Field(
            description="Detaillierung der durch das Attribut massnahme festgelegten Maßnahme über eine Codeliste.",
            json_schema_extra={
                "typename": "FP_DetailMassnahmeKlimawandel",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPAufschuettung(FPGeometrieobjekt):
    """
    Flächen für Aufschüttungen, Abgrabungen oder für die Gewinnung von Bodenschätzen (§5, Abs. 2, Nr. 8 BauGB). Hier: Flächen für Aufschüttungen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    aufschuettungsmaterial: Annotated[
        str | None,
        Field(
            description="Bezeichnung des aufgeschütteten Materials",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPAusgleichsFlaeche(FPFlaechenobjekt):
    """
    Flächen und Maßnahmen zum Ausgleich gemäß § 5, Abs. 2a  BauBG.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    ziel: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Ziel der auf der Fläche durchzuführenden Maßnahmen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchutzPflege",
                        "alias": "Schutz und Pflege",
                        "description": "Schutz und Pflege",
                    },
                    "2000": {
                        "name": "Entwicklung",
                        "alias": "Entwicklung",
                        "description": "Entwicklung",
                    },
                    "3000": {
                        "name": "Anlage",
                        "alias": "Anlage",
                        "description": "Neu-Anlage",
                    },
                    "4000": {
                        "name": "SchutzPflegeEntwicklung",
                        "alias": "Schutz, Pflege und Entwicklung",
                        "description": "Schutz, Pflege und Entwicklung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges Ziel",
                    },
                },
                "typename": "XP_SPEZiele",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstZiel: Annotated[
        str | None,
        Field(
            description="Textlich formuliertes Ziel, wenn das Attribut ziel den Wert 9999 (Sonstiges) hat.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    massnahme: Annotated[
        list[XPSPEMassnahmenDaten] | None,
        Field(
            description="Auf der Fläche durchzuführende Maßnahme.",
            json_schema_extra={
                "typename": "XP_SPEMassnahmenDaten",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    refMassnahmenText: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf ein Dokument in dem die Massnahmen beschrieben werden.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    refLandschaftsplan: Annotated[
        XPExterneReferenz | None,
        Field(
            description="Referenz auf den Landschaftsplan.",
            json_schema_extra={
                "typename": "XP_ExterneReferenz",
                "stereotype": "DataType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPBebauungsFlaeche(FPFlaechenschlussobjekt):
    """
    Darstellung einer für die Bebauung vorgesehenen Fläche (§ 5, Abs. 2, Nr. 1 BauGB).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    GFZ: Annotated[
        float | None,
        Field(
            description="Angabe einer maximalen Geschossflächenzahl als Maß der baulichen Nutzung.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmin: Annotated[
        float | None,
        Field(
            description="Minimale Geschossflächenzahl bei einer Bereichsangabe (GFZmax muss ebenfalls spezifiziert werden).",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZmax: Annotated[
        float | None,
        Field(
            description="Maximale Geschossflächenzahl bei einer Bereichsangabe (GFZmin muss ebenfalls spezifiziert werden).",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GFZdurchschnittlich: Annotated[
        float | None,
        Field(
            description="Durchschnittliche GFZ im Baugebiet",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    BMZ: Annotated[
        float | None,
        Field(
            description="Angabe einer maximalen Baumassenzahl als Maß der baulichen Nutzung.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    GRZ: Annotated[
        float | None,
        Field(
            description="Angabe einer maximalen Grundflächenzahl als Maß der baulichen Nutzung.",
            json_schema_extra={
                "typename": "Decimal",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    allgArtDerBaulNutzung: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Angabe der allgemeinen Art der baulichen Nutzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "WohnBauflaeche",
                        "alias": "Wohnbaufläche",
                        "token": "W",
                        "description": "Wohnbaufläche nach §1 Abs. (1) BauNVO",
                    },
                    "2000": {
                        "name": "GemischteBauflaeche",
                        "alias": "Gemischte Baufläche",
                        "token": "M",
                        "description": "Gemischte Baufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "3000": {
                        "name": "GewerblicheBauflaeche",
                        "alias": "Gewerbliche Baufläche",
                        "token": "G",
                        "description": "Gewerbliche Baufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "4000": {
                        "name": "SonderBauflaeche",
                        "alias": "Sonderbaufläche",
                        "token": "S",
                        "description": "Sonderbaufläche nach §1 Abs. (1) BauNVO.",
                    },
                    "9999": {
                        "name": "SonstigeBauflaeche",
                        "alias": "Sonstige Baufläche",
                        "token": "B",
                        "description": "Sonstige Baufläche",
                    },
                },
                "typename": "XP_AllgArtDerBaulNutzung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    besondereArtDerBaulNutzung: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1300",
            "1400",
            "1450",
            "1500",
            "1550",
            "1600",
            "1700",
            "1800",
            "2000",
            "2100",
            "3000",
            "4000",
            "9999",
        ]
        | None,
        Field(
            description="Angabe der besonderen Art der baulichen Nutzung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Kleinsiedlungsgebiet",
                        "alias": "Kleinsiedlungsgebiet",
                        "token": "WS",
                        "description": "Kleinsiedlungsgebiet nach § 2 BauNVO.",
                    },
                    "1100": {
                        "name": "ReinesWohngebiet",
                        "alias": "Reines Wohngebiet",
                        "token": "WR",
                        "description": "Reines Wohngebiet nach § 3 BauNVO.",
                    },
                    "1200": {
                        "name": "AllgWohngebiet",
                        "alias": "Allgemeines Wohngebiet",
                        "token": "WA",
                        "description": "Allgemeines Wohngebiet nach § 4 BauNVO.",
                    },
                    "1300": {
                        "name": "BesonderesWohngebiet",
                        "alias": "Besonderes Wohngebiet",
                        "token": "WB",
                        "description": "Gebiet zur Erhaltung und Entwicklung der Wohnnutzung (Besonderes Wohngebiet) nach § 4a BauNVO.",
                    },
                    "1400": {
                        "name": "Dorfgebiet",
                        "alias": "Dorfgebiet",
                        "token": "MD",
                        "description": "Dorfgebiet nach § 5 BauNVO.",
                    },
                    "1450": {
                        "name": "DoerflichesWohngebiet",
                        "alias": "Dörfliches Wohngebiet",
                        "token": "MDW",
                        "description": "Dörfliches Wohngebiet nach §5a BauNVO",
                    },
                    "1500": {
                        "name": "Mischgebiet",
                        "alias": "Mischgebiet",
                        "token": "MI",
                        "description": "Mischgebiet nach § 6 BauNVO.",
                    },
                    "1550": {
                        "name": "UrbanesGebiet",
                        "alias": "Urbanes Gebiet",
                        "token": "MU",
                        "description": "Urbanes Gebiet nach § 6a BauNVO",
                    },
                    "1600": {
                        "name": "Kerngebiet",
                        "alias": "Kerngebiet",
                        "token": "MK",
                        "description": "Kerngebiet nach § 7 BauNVO.",
                    },
                    "1700": {
                        "name": "Gewerbegebiet",
                        "alias": "Gewerbegebiet",
                        "token": "GE",
                        "description": "Gewerbegebiet nach § 8 BauNVO.",
                    },
                    "1800": {
                        "name": "Industriegebiet",
                        "alias": "Industriegebiet",
                        "token": "GI",
                        "description": "Industriegebiet nach § 9 BauNVO.",
                    },
                    "2000": {
                        "name": "SondergebietErholung",
                        "alias": "Sondergebiet Erholung",
                        "token": "SO ERHOL",
                        "description": "Sondergebiet, das der Erholung dient nach § 10 BauNVO von 1977 und 1990.",
                    },
                    "2100": {
                        "name": "SondergebietSonst",
                        "alias": "Sonstiges Sondergebiet",
                        "token": "SO Sonst",
                        "description": "Sonstiges Sondergebiet nach§ 11 BauNVO 1977 und 1990; z.B. Klinikgebiet",
                    },
                    "3000": {
                        "name": "Wochenendhausgebiet",
                        "alias": "Wochenendhausgebiet",
                        "token": "SO WOCH",
                        "description": "Wochenendhausgebiet nach §10 der BauNVO von 1962 und 1968",
                    },
                    "4000": {
                        "name": "Sondergebiet",
                        "alias": "Sondergebiet",
                        "token": "SO",
                        "description": "Sondergebiet nach §11der BauNVO von 1962 und 1968",
                    },
                    "9999": {
                        "name": "SonstigesGebiet",
                        "alias": "Sonstiges Gebiet",
                        "token": "SG",
                        "description": "Sonstiges Gebiet",
                    },
                },
                "typename": "XP_BesondereArtDerBaulNutzung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sondernutzung: Annotated[
        list[FPKomplexeSondernutzung] | None,
        Field(
            description="Differenziert Sondernutzungen nach §10 und §11 der BauNVO von 1977 und 1990. Das Attribut wird nur benutzt, wenn besondereArtDerBaulNutzung unbelegt ist oder einen der Werte 2000 bzw. 2100 hat",
            json_schema_extra={
                "typename": "FP_KomplexeSondernutzung",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    detaillierteArtDerBaulNutzung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Art der baulichen Nutzung, mit der die allgemeine und/oder besondere Art der baulichen Nutzung näher detailliert werden",
            json_schema_extra={
                "typename": "FP_DetailArtDerBaulNutzung",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    abweichungBauNVO: Annotated[
        Literal["1000", "2000", "3000", "9999"] | None,
        Field(
            description="Art der zulässigen Abweichung von der BauNVO.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "EinschraenkungNutzung",
                        "alias": "Einschränkung Nutzung",
                        "description": "Einschränkung einer generell erlaubten Nutzung.",
                    },
                    "2000": {
                        "name": "AusschlussNutzung",
                        "alias": "Ausschluss Nutzung",
                        "description": "Ausschluss einer generell erlaubten Nutzung.",
                    },
                    "3000": {
                        "name": "AusweitungNutzung",
                        "alias": "Ausweitung Nutzung",
                        "description": "Eine nur ausnahmsweise zulässige Nutzung wird generell zulässig.",
                    },
                    "9999": {
                        "name": "SonstAbweichung",
                        "alias": "Sonstige Abweichung",
                        "description": "Sonstige Abweichung.",
                    },
                },
                "typename": "XP_AbweichungBauNVOTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPDarstellungNachLandesrecht(FPGeometrieobjekt):
    """
    Inhalt des Flächennutzungsplans, der auf einer spezifischen Rechtsverordnung eines Bundeslandes beruht.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    detailZweckbestimmung: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte detaillierte Zweckbestimmung der Planinhalts-",
            json_schema_extra={
                "typename": "FP_DetailZweckbestimmungNachLandesrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    kurzbeschreibung: Annotated[
        str | None,
        Field(
            description="Textuelle Beschreibung des Planinhalts.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPFlaecheOhneDarstellung(FPFlaechenschlussobjekt):
    """
    Fläche, für die keine geplante Nutzung angegben werden kann
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class FPGemeinbedarf(FPGeometrieobjekt):
    """
    Darstellung von Flächen für den Gemeinbedarf nach § 5,  Abs. 2, Nr. 2 BauGB.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[FPKomplexeZweckbestGemeinbedarf] | None,
        Field(
            description="Zweckbestimmung der Fläche",
            json_schema_extra={
                "typename": "FP_KomplexeZweckbestGemeinbedarf",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    traeger: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000"] | None,
        Field(
            description="Trägerschaft einer Gemeinbedarfs-Fläche",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "EinrichtungBund",
                        "alias": "Einrichtung Bund",
                        "description": "Einrichtung des Bundes",
                    },
                    "2000": {
                        "name": "EinrichtungLand",
                        "alias": "Einrichtung Land",
                        "description": "Einrichtung eines Bundeslandes",
                    },
                    "3000": {
                        "name": "EinrichtungKreis",
                        "alias": "Einrichtung Kreis",
                        "description": "Einrichtung eines Landkreises",
                    },
                    "4000": {
                        "name": "KommunaleEinrichtung",
                        "alias": "Kommunale Einrichtung",
                        "description": "Kommunaler Träger",
                    },
                    "5000": {
                        "name": "ReligioeserTraeger",
                        "alias": "Religiöser Träger",
                        "description": "Träger ist eine Religionsgemeinschaft",
                    },
                    "6000": {
                        "name": "SonstTraeger",
                        "alias": "Sonstiger Träger",
                        "description": "Sonstiger, z.B. privater Träger",
                    },
                },
                "typename": "XP_Traegerschaft",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zugunstenVon: Annotated[
        str | None,
        Field(
            description="Angabe des Begünstigten der Ausweisung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class FPGenerischesObjekt(FPGeometrieobjekt):
    """
    Klasse zur Modellierung aller Inhalte des FPlans, die durch keine spezifische XPlanung-Klasse repräsentiert werden können.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmung des Generischen Objekts.",
            json_schema_extra={
                "typename": "FP_ZweckbestimmungGenerischeObjekte",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class FPTextAbschnittFlaeche(FPUeberlagerungsobjekt):
    """
    Bereich, in dem bestimmte Textliche Darstellungen gültig sind, die über die Relation "refTextInhalt" (Basisklasse XP_Objekt) spezifiziert werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class LPBiotopverbundBiotopvernetzung(LPGeometrieobjekt):
    """
    Flächen und Elemente für Biotopverbund und Biotopvernetzung.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    planungsEbene: Annotated[
        list[Literal["1000", "2000"]] | None,
        Field(
            description="Nutzungsregelung (Klassifikation).",
            json_schema_extra={
                "typename": "LP_PlanungsEbene",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Biotopverbund",
                        "alias": "Biotopverbund",
                        "description": "Biotopvernetzung auf Landesebene nach § 21 Abs. 1-5 BNatSchG",
                    },
                    "2000": {
                        "name": "Biotopvernetzung",
                        "alias": "Biotopvernetzung",
                        "description": "Biotopvernetzung auf regionaler Ebene nach § 21 Abs. 6 BNatschG",
                    },
                },
            },
        ),
    ] = None
    typBioVerbund: Annotated[
        list[LPTypBioVerbundKomplex] | None,
        Field(
            description="Angaben zum Typen des Biotopverbundelementes",
            json_schema_extra={
                "typename": "LP_TypBioVerbundKomplex",
                "stereotype": "DataType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    rechtlicheSicherung: Annotated[
        Literal["1000", "2000", "3000", "9999"] | None,
        Field(
            description="Rechtliche Sicherung für Flächen des Biotopverbunds und der Biotopvernetzung nach § 21 Abs. 4 BNatSchG.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Schutzerklaerung",
                        "alias": "Schutzerklärung",
                        "description": "Schutzerklärung",
                    },
                    "2000": {
                        "name": "PlanungsrechtlicheFestlegung",
                        "alias": "Planungsrechtliche Festlegung",
                        "description": "Planungsrechtliche Festlegung",
                    },
                    "3000": {
                        "name": "VertraglicheRegelung",
                        "alias": "Vertragliche Regelung",
                        "description": "Vertragliche Regelung",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige rechtliche Sicherung (siehe rechtlicheSicherungText)",
                    },
                },
                "typename": "LP_RechtlicheSicherung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtlicheSicherungText: Annotated[
        str | None,
        Field(
            description="Erläuterung zu Sonstiger rechtlicher Sicherung in rechtlicheSicherung oder ergänzende Information zur ausgewählten rechtlichen Sicherungsart.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVerbundsystemArt: Annotated[
        Literal["1000", "2000", "3000", "4000"],
        Field(
            description="Zeigt die Art des Verbundsystems an.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Allgemein",
                        "alias": "Allgemein",
                        "description": "Allgemein",
                    },
                    "2000": {
                        "name": "OffenlandHalboffenland",
                        "alias": "Offenland, Halboffenland",
                        "description": "Offenland inkl. Halboffenland",
                    },
                    "3000": {"name": "Wald", "alias": "Wald", "description": "Wald"},
                    "4000": {
                        "name": "Gewaesser",
                        "alias": "Gewässer",
                        "description": "Gewässer",
                    },
                },
                "typename": "LP_BioVerbundsystemArt",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    bioVStandortFeuchte: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Zeigt die Ausprägung der Standortverhältnisse des Verbundsystems im Hinblick auf Feuchtigkeit an.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Feucht",
                        "alias": "Feucht",
                        "description": "Feuchte Standortverhältnisse",
                    },
                    "2000": {
                        "name": "Mittel",
                        "alias": "Mittel",
                        "description": "Mittelfeuchte Standortverhältnisse",
                    },
                    "3000": {
                        "name": "Trocken",
                        "alias": "Trocken",
                        "description": "Trockene Standortverhältnisse",
                    },
                },
                "typename": "LP_BioVStandortFeuchte",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bioVerbundsystemText: Annotated[
        str | None,
        Field(
            description="Textliche ergänzende Informationen zu Art und Ausprägung der Standortverhältnisse des Verbundsystems.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    foerdermoeglichkeit: Annotated[
        list[str] | None,
        Field(
            description="Nennung von Fördermöglichkeiten für den Biotopverbund oder die Biotopvernetzung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class LPEingriffsregelung(LPGeometrieobjekt):
    """
    Planungsaussagen mit Bezug zur Eingriffsregelung und der Bewältigung von Eingriffsfolgen.
    Flächen und Maßnahmen zum Ausgleich von Eingriffen im Sinne des § 8 und 8a BNatSchG (in Verbindung mit § 1a BauGB, Ausgleichs- und Ersatzmaßnahmen).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    eingriffsregelungFlaechenTyp: Annotated[
        list[LPEingriffsregelungKomplex],
        Field(
            description="Angaben zum Flächentyp in Bezug auf Eingriffsregelung",
            json_schema_extra={
                "typename": "LP_EingriffsregelungKomplex",
                "stereotype": "DataType",
                "multiplicity": "1..*",
            },
            min_length=1,
        ),
    ]
    umsetzungsstand: Annotated[
        Literal["1000", "2000", "9998"],
        Field(
            description="Zeigt an, ob eine bereit umgesetzte oder angerechnete Kompensationsfläche oder -Maßnahme nachrichtlich übernommen oder für neue Kompensationsmaßenahmen vorgeschlagen wird.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "NachrichtlichUmgesetztAngerechnet",
                        "alias": "Nachrichtlich umgesetzt oder angerechnet",
                        "description": "Nachrichtliche Übernahme von Kompensationsflächen und -maßnahmen aus vorliegenden Planwerken, die bereits umgesetzt oder angerechnet wurden.",
                    },
                    "2000": {
                        "name": "Vorschlag",
                        "alias": "Vorschlag",
                        "description": "Vorschlag von Kompensationsflächen und -maßnahmen.",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannter Umsetzungsstand (bei Übernahme von Altdaten).",
                    },
                },
                "typename": "LP_Umsetzungsstand",
                "stereotype": "Enumeration",
                "multiplicity": "1",
            },
        ),
    ]
    massnahmentyp: Annotated[
        list[Literal["1000", "2000", "3000", "4000", "9998"]],
        Field(
            description="Differenziert in nationalrechtliche und unionsrechtliche Kompensationsmaßnahmen.",
            json_schema_extra={
                "typename": "LP_MassnahmenTyp",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "Kompensationsmassnahme",
                        "alias": "Kompensationsmaßnahme",
                        "description": "Kompensationsmaßnahme nach nationalem Recht.",
                    },
                    "2000": {
                        "name": "MassnahmeCEF",
                        "alias": "Massnahme CEF",
                        "description": "Maßnahme des strengen Artenschutzes zur dauerhaften Sicherung der ökologischen Funktion im Rahmen der SAP (engl. Continuous Ecological Functionality-measures).",
                    },
                    "3000": {
                        "name": "MassnahmeFCS",
                        "alias": "Massnahme FCS",
                        "description": "Maßnahme des strengen Artenschutzes zur Sicherung des Erhaltungszustandes im Rahmen der SAP (engl. Favorable Conservation Status).",
                    },
                    "4000": {
                        "name": "MassnahmeKohaerenzsicherung",
                        "alias": "Maßnahme Kohärenzsicherung",
                        "description": "Maßnahme zur Kohärenzsicherung im Rahmen der FFH-Verträglichkeitsprüfung.",
                    },
                    "9998": {
                        "name": "Unbekannt",
                        "alias": "Unbekannt",
                        "description": "Unbekannter Typ von Kompensationsflächen/-Maßnahmen (zur Übernahme von Altdaten)",
                    },
                },
            },
            min_length=1,
        ),
    ]
    kompensationText: Annotated[
        str | None,
        Field(
            description="Ergänzende Informationen zur Kompensation.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class LPGenerischesObjekt(LPGeometrieobjekt):
    """
    Klasse zur Modellierung aller Inhalte des Landschaftsplans, die durch keine spezifische XPlanung-Klasse repräsentiert werden können.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    zweckbestimmung: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine Codeliste definierte Zweckbestimmung des Generischen Objektes.",
            json_schema_extra={
                "typename": "LP_ZweckbestimmungGenerischeObjekte",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class RPAchse(RPGeometrieobjekt):
    """
    Achsen bündeln i.d.R. Verkehrs- und Versorgungsinfrastruktur und enthalten eine relativ dichte Folge von Siedlungskonzentrationen und Zentralen Orten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "3001",
                "3002",
                "3003",
                "4000",
                "5000",
                "6000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation verschiedener Achsen.",
            json_schema_extra={
                "typename": "RP_AchsenTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Achse",
                        "alias": "Achse",
                        "description": "Achsen.",
                    },
                    "2000": {
                        "name": "Siedlungsachse",
                        "alias": "Siedlungsachse",
                        "description": "Siedlungsachsen sind Achsen in Verdichtungsräumen, oft entlang von Strecken des öffentlichen Nahverkehrs.",
                    },
                    "3000": {
                        "name": "Entwicklungsachse",
                        "alias": "Entwicklungsachse",
                        "description": "Entwicklungsachse.",
                    },
                    "3001": {
                        "name": "Landesentwicklungsachse",
                        "alias": "Landesentwicklungsachse",
                        "description": "Landesentwicklungsachse.",
                    },
                    "3002": {
                        "name": "Verbindungsachse",
                        "alias": "Verbindungsachse",
                        "description": "Verbindungsachsen sind durch Verkehrsbeziehungen zwischen zentralen Orten verschiedener Stufen gekennzeichnet.",
                    },
                    "3003": {
                        "name": "Entwicklungskorridor",
                        "alias": "Entwicklungskorridor",
                        "description": "Entwicklungskorridor.",
                    },
                    "4000": {
                        "name": "AbgrenzungEntwicklungsEntlastungsorte",
                        "alias": "Abgrenzung Entwicklungs- und Entlastungsorte",
                        "description": "Abgrenzung von Entwicklungs- und Entlastungsorten.",
                    },
                    "5000": {
                        "name": "Achsengrundrichtung",
                        "alias": "Achsengrundrichtung",
                        "description": "Achsengrundrichtung.",
                    },
                    "6000": {
                        "name": "AuessererAchsenSchwerpunkt",
                        "alias": "Äußerer Achsenschwerpunkt",
                        "description": "Äußerer Achsenschwerpunkt.",
                    },
                    "9999": {
                        "name": "SonstigeAchse",
                        "alias": "Sonstige Achse",
                        "description": "Sonstige Achse.",
                    },
                },
            },
        ),
    ] = None


class RPEinzelhandel(RPSiedlung):
    """
    Einzelhandelsstruktur und -funktionen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Einzelhandelstypen.",
            json_schema_extra={
                "typename": "RP_EinzelhandelTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Einzelhandel",
                        "alias": "Einzelhandel",
                        "description": "Einzelhandel.",
                    },
                    "2000": {
                        "name": "ZentralerVersorgungsbereich",
                        "alias": "Zentraler Versorgungsbereich",
                        "description": "Zentraler Versorgungsbereich.",
                    },
                    "3000": {
                        "name": "ZentralerEinkaufsbereich",
                        "alias": "Zentraler Einkaufsbereich",
                        "description": "Zentraler Einkaufsbereich.",
                    },
                    "4000": {
                        "name": "ZentrenrelevantesGrossprojekt",
                        "alias": "Zentrenrelevantes Großprojekt",
                        "description": "Zentrenrelevantes Großprojekt.",
                    },
                    "5000": {
                        "name": "NichtzentrenrelevantesGrossprojekt",
                        "alias": "Nichtzentrenrelevantes Großprojekt",
                        "description": "Nichtzentrenrelevantes Großprojekt.",
                    },
                    "6000": {
                        "name": "GrossflaechigerEinzelhandel",
                        "alias": "Großflächiger Einzelhandel",
                        "description": "Großflächiger Einzelhandel.",
                    },
                    "7000": {
                        "name": "Fachmarktstandort",
                        "alias": "Fachmarktstandort",
                        "description": "Fachmarktstandort.",
                    },
                    "8000": {
                        "name": "Ergaenzungsstandort",
                        "alias": "Ergänzungsstandort",
                        "description": "Ergänzungsstandort.",
                    },
                    "9000": {
                        "name": "StaedtischerKernbereich",
                        "alias": "Städtischer Kernbereich",
                        "description": "Städtischer Kernbereich.",
                    },
                    "9999": {
                        "name": "SonstigerEinzelhandel",
                        "alias": "Sonstiger Einzelhandel",
                        "description": "Sonstiger Einzelhandel.",
                    },
                },
            },
        ),
    ] = None


class RPEnergieversorgung(RPGeometrieobjekt):
    """
    Infrastruktur zur Energieversorgung. Beinhaltet Energieerzeugung und die Belieferung von Verbrauchern mit Nutzenergie. Erneuerbare Energie wie Windkraft wird im Normalfall auf die Klasse RP_ErneuerbareEnergie im Unterpaket Freiraumstruktur zugeordnet. Je nach Kontext kann aber auch eine Zuordnung auf RP_Energieversorgung stattfinden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "2000",
                "2001",
                "3000",
                "3001",
                "3002",
                "4000",
                "4001",
                "4002",
                "5000",
                "6000",
                "7000",
                "8000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Energieversorgungs-Einrichtungen.",
            json_schema_extra={
                "typename": "RP_EnergieversorgungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Leitungstrasse",
                        "alias": "Leitungstrasse",
                        "description": "Leitungstrasse.",
                    },
                    "1001": {
                        "name": "Hochspannungsleitung",
                        "alias": "Hochspannungsleitung",
                        "description": "Hochspannungsleitung.",
                    },
                    "1002": {
                        "name": "KabeltrasseNetzanbindung",
                        "alias": "Kabeltrasse, Netzanbindung",
                        "description": "Kabeltrasse-Netzanbindung.",
                    },
                    "2000": {
                        "name": "Pipeline",
                        "alias": "Pipeline",
                        "description": "Pipeline.",
                    },
                    "2001": {
                        "name": "Uebergabestation",
                        "alias": "Übergabestation",
                        "description": "Übergabestation.",
                    },
                    "3000": {
                        "name": "Kraftwerk",
                        "alias": "Kraftwerk",
                        "description": "Kraftwerk.",
                    },
                    "3001": {
                        "name": "Grosskraftwerk",
                        "alias": "Grosskraftwerk",
                        "description": "Großkraftwerk.",
                    },
                    "3002": {
                        "name": "Energiegewinnung",
                        "alias": "Energiegewinnung",
                        "description": "Energiegewinnung.",
                    },
                    "4000": {
                        "name": "Energiespeicherung",
                        "alias": "Energiespeicherung",
                        "description": "Energiespeicherung.",
                    },
                    "4001": {
                        "name": "VerstetigungSpeicherung",
                        "alias": "Verstetigung Speicherung",
                        "description": "Verstetigung-Speicherung.",
                    },
                    "4002": {
                        "name": "Untergrundspeicher",
                        "alias": "Untergrundspeicher",
                        "description": "Untergrundspeicher.",
                    },
                    "5000": {
                        "name": "Umspannwerk",
                        "alias": "Umspannwerk",
                        "description": "Umspannwerk.",
                    },
                    "6000": {
                        "name": "Raffinerie",
                        "alias": "Raffinerie",
                        "description": "Raffinerie.",
                    },
                    "7000": {
                        "name": "Leitungsabbau",
                        "alias": "Leitungsabbau",
                        "description": "Leitungsabbau.",
                    },
                    "8000": {
                        "name": "Korridor",
                        "alias": "Korridor",
                        "description": "Korridor",
                    },
                    "9999": {
                        "name": "SonstigeEnergieversorgung",
                        "alias": "Sonstige Energieversorgung",
                        "description": "Sonstige Energieversorgung.",
                    },
                },
            },
        ),
    ] = None
    primaerenergieTyp: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "2001",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "9001",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von der mit der Infrastruktur in Beziehung stehenden Primärenergie.",
            json_schema_extra={
                "typename": "RP_PrimaerenergieTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Erdoel",
                        "alias": "Erdöl",
                        "description": "Erdöl.",
                    },
                    "2000": {"name": "Gas", "alias": "Gas", "description": "Gas."},
                    "2001": {
                        "name": "Ferngas",
                        "alias": "Ferngas",
                        "description": "Ferngas.",
                    },
                    "3000": {
                        "name": "Fernwaerme",
                        "alias": "Fernwärme",
                        "description": "Fernwärme.",
                    },
                    "4000": {
                        "name": "Kraftstoff",
                        "alias": "Kraftstoff",
                        "description": "Kraftstoff.",
                    },
                    "5000": {
                        "name": "Kohle",
                        "alias": "Kohle",
                        "description": "Kohle.",
                    },
                    "6000": {
                        "name": "Wasser",
                        "alias": "Wasser",
                        "description": "Wasser.",
                    },
                    "7000": {
                        "name": "Kernenergie",
                        "alias": "Kernenergie",
                        "description": "Kernenergie.",
                    },
                    "8000": {
                        "name": "Reststoffverwertung",
                        "alias": "Reststoffverwertung",
                        "description": "Reststoffverwertung.",
                    },
                    "9000": {
                        "name": "ErneuerbareEnergie",
                        "alias": "Erneuerbare Energie",
                        "description": "Erneuerbare Energie.",
                    },
                    "9001": {
                        "name": "Windenergie",
                        "alias": "Windenergie",
                        "description": "Windenergie.",
                    },
                    "9999": {
                        "name": "SonstigePrimaerenergie",
                        "alias": "Sonstige Primärenergie",
                        "description": "Sonstige Primärenergie.",
                    },
                },
            },
        ),
    ] = None
    spannung: Annotated[
        Literal["1000", "2000", "3000", "4000"] | None,
        Field(
            description="Klassifikation von Spannungen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "110KV",
                        "alias": "110 KV",
                        "description": "110 Kilovolt.",
                    },
                    "2000": {
                        "name": "220KV",
                        "alias": "220 KV",
                        "description": "220 Kilovolt.",
                    },
                    "3000": {
                        "name": "330KV",
                        "alias": "330 KV",
                        "description": "330 Kilovolt.",
                    },
                    "4000": {
                        "name": "380KV",
                        "alias": "380 KV",
                        "description": "380 Kilovolt.",
                    },
                },
                "typename": "RP_SpannungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPEntsorgung(RPGeometrieobjekt):
    """
    Entsorgungs-Infrastruktur Beinhaltet Abfallentsorgung und Abwasserentsorgung.
    Abfälle sind Gegenstände, Stoffe oder Rückstände, deren sich der Besitzer entledigen will. Sie können verwertet oder beseitigt werden.
    Abwasser beinhaltet durch häuslichen, gewerblichen, landwirtschaftlichen oder sonstigen Gebrauch verunreinigtes Wasser sowie abfließendes Niederschlagswasser bzw. in die Kanalisation fließendes Wasser.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typAE: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1101",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Abfallentsorgung-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_AbfallentsorgungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "BeseitigungEntsorgung",
                        "alias": "Beseitigung, Entsorgung",
                        "description": "Beseitung beziehungsweise Entsorgung von Abfall.",
                    },
                    "1100": {
                        "name": "Abfallbeseitigungsanlage",
                        "alias": "Abfallbeseitigungsanlage",
                        "description": "Abfallbeseitigungsanlage",
                    },
                    "1101": {
                        "name": "ZentraleAbfallbeseitigungsanlage",
                        "alias": "Zentrale Abfallbeseitigungsanlage",
                        "description": "Zentrale Abfallbeseitungsanlage.",
                    },
                    "1200": {
                        "name": "Deponie",
                        "alias": "Deponie",
                        "description": "Deponie.",
                    },
                    "1300": {
                        "name": "Untertageeinlagerung",
                        "alias": "Untertageeinlagerung",
                        "description": "Untertageeinlagerung von Abfall.",
                    },
                    "1400": {
                        "name": "Behandlung",
                        "alias": "Behandlung",
                        "description": "Behandlung von Abfall.",
                    },
                    "1500": {
                        "name": "Kompostierung",
                        "alias": "Kompostierung",
                        "description": "Kompostierung von Abfall.",
                    },
                    "1600": {
                        "name": "Verbrennung",
                        "alias": "Verbrennung",
                        "description": "Verbrennung von Abfall.",
                    },
                    "1700": {
                        "name": "Umladestation",
                        "alias": "Umladestation",
                        "description": "Umladestation.",
                    },
                    "1800": {
                        "name": "Standortsicherung",
                        "alias": "Standortsicherung",
                        "description": "Standortsicherung.",
                    },
                    "9999": {
                        "name": "SonstigeAbfallentsorgung",
                        "alias": "Sonstige Abfallentsorgung",
                        "description": "Sonstige Abfallentsorgung.",
                    },
                },
            },
        ),
    ] = None
    abfallTyp: Annotated[
        list[Literal["1000", "2000", "3000", "4000", "5000", "9999"]] | None,
        Field(
            description="Klassifikation von mit der Entsorgungsinfrastruktur in Beziehung stehenden Abfalltypen",
            json_schema_extra={
                "typename": "RP_AbfallTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Siedlungsabfall",
                        "alias": "Siedlungsabfall",
                        "description": "Siedlungsabfall.",
                    },
                    "2000": {
                        "name": "Mineralstoffabfall",
                        "alias": "Mineralstoffabfall",
                        "description": "Mineralstoffabfall.",
                    },
                    "3000": {
                        "name": "Industrieabfall",
                        "alias": "Industrieabfall",
                        "description": "Industrieabfall.",
                    },
                    "4000": {
                        "name": "Sonderabfall",
                        "alias": "Sonderabfall",
                        "description": "Sonderabfall.",
                    },
                    "5000": {
                        "name": "RadioaktiverAbfall",
                        "alias": "Radioaktiver Abfall",
                        "description": "Radioaktiver Abfall.",
                    },
                    "9999": {
                        "name": "SonstigerAbfall",
                        "alias": "Sonstiger Abfall",
                        "description": "Sonstiger Abfall.",
                    },
                },
            },
        ),
    ] = None
    typAW: Annotated[
        list[Literal["1000", "1001", "1002", "2000", "3000", "4000", "9999"]] | None,
        Field(
            description="Klassifikation von Abwasser-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_AbwasserTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Klaeranlage",
                        "alias": "Kläranlage",
                        "description": "Kläranlage.",
                    },
                    "1001": {
                        "name": "ZentraleKlaeranlage",
                        "alias": "Zentrale Kläranlage",
                        "description": "Zentrale Kläranlage.",
                    },
                    "1002": {
                        "name": "Grossklaerwerk",
                        "alias": "Grossklärwerk",
                        "description": "Großklärwerk.",
                    },
                    "2000": {
                        "name": "Hauptwasserableitung",
                        "alias": "Hauptwasserableitung",
                        "description": "Hauptwasserableitung.",
                    },
                    "3000": {
                        "name": "Abwasserverwertungsflaeche",
                        "alias": "Abwasserverwertungsfläche",
                        "description": "Abwasserverwertungsfläche.",
                    },
                    "4000": {
                        "name": "Abwasserbehandlungsanlage",
                        "alias": "Abwasserbehandlungsanlage",
                        "description": "Abwasserbehandlungsanlage.",
                    },
                    "9999": {
                        "name": "SonstigeAbwasserinfrastruktur",
                        "alias": "Sonstige Abwasserinfrastruktur",
                        "description": "Sonstige Abwasserinfrastruktur.",
                    },
                },
            },
        ),
    ] = None
    istAufschuettungAblagerung: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob die Entsorgung in Form einer Aufschüttung oder Ablagerung erfolgt",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPFreiraum(RPGeometrieobjekt):
    """
    Allgemeines Freiraumobjekt.
    Freiräume sind naturnahem Zustand, oder beinhalten Nutzungsformen, die mit seinen ökologischen Grundfunktionen überwiegend verträglich sind (z.B. Land- oder Forstwirtschaft). Freiraum ist somit ein Gegenbegriff zur Siedlungsstruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    istAusgleichsgebiet: Annotated[
        bool | None,
        Field(
            description="Zeigt an, ob das Objekt ein Ausgleichsgebiet ist.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    imVerbund: Annotated[
        bool | None,
        Field(
            description="Zeigt an, ob das Objekt in einem (Freiraum-)Verbund liegt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPFunktionszuweisung(RPGeometrieobjekt):
    """
    Gebiets- und Gemeindefunktionen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "9999",
            ]
        ],
        Field(
            description="Klassifikation des Gebietes nach Bundesraumordnungsgesetz.",
            json_schema_extra={
                "typename": "RP_FunktionszuweisungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "1..*",
                "enumDescription": {
                    "1000": {
                        "name": "Wohnen",
                        "alias": "Wohnen",
                        "description": "Wohnfunktion.",
                    },
                    "2000": {
                        "name": "Arbeit",
                        "alias": "Arbeit",
                        "description": "Arbeitsfunktion.",
                    },
                    "3000": {
                        "name": "GewerbeDienstleistung",
                        "alias": "Gewerbe und Dienstleistung",
                        "description": "Gewerbe- und/oder Dienstleistungsfunktion.",
                    },
                    "4000": {
                        "name": "Einzelhandel",
                        "alias": "Einzelhandel",
                        "description": "Einzelhandelsfunktion.",
                    },
                    "5000": {
                        "name": "Landwirtschaft",
                        "alias": "Landwirtschaft",
                        "description": "Landwirtschaftliche Funktion.",
                    },
                    "6000": {
                        "name": "ErholungFremdenverkehr",
                        "alias": "Erholung, Fremdenverkehr",
                        "description": "Erholungs-, Fremdenverkehrs- und/oder Tourismusfunktion.",
                    },
                    "7000": {
                        "name": "Verteidigung",
                        "alias": "Verteidigung",
                        "description": "Verteidigungsfunktion.",
                    },
                    "8000": {
                        "name": "UeberoertlicheVersorgungsfunktionLaendlicherRaum",
                        "alias": "Überörtliche Versorgungsfunktion ländlicher Raum",
                        "description": "Überörtliche Versorgungsfunktion.",
                    },
                    "9000": {
                        "name": "LaendlicheSiedlung",
                        "alias": "Ländliche Siedlung",
                        "description": "Ländliche Siedlung",
                    },
                    "9999": {
                        "name": "SonstigeFunktion",
                        "alias": "Sonstige Funktion",
                        "description": "Sonstige Funktion.",
                    },
                },
            },
            min_length=1,
        ),
    ]
    bezeichnung: Annotated[
        str | None,
        Field(
            description="Bezeichnung und/oder Erörterung einer Gebietsfunktion.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPGenerischesObjekt(RPGeometrieobjekt):
    """
    Klasse zur Modellierung aller Inhalte des Raumordnungsplans, die durch keine andere Klasse des RPlan-Fachschemas dargestellt werden können.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[AnyUrl] | None,
        Field(
            description="Über eine CodeList definierte Zweckbestimmung der Festlegung.",
            json_schema_extra={
                "typename": "RP_GenerischesObjektTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..*",
            },
        ),
    ] = None


class RPGewaesser(RPFreiraum):
    """
    Gewässer, die nicht andersweitig erfasst werden, zum Beispiel Flüsse oder Seen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    gewaesserTyp: Annotated[
        str | None,
        Field(
            description="Spezifiziert den Typ des Gewässers.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPGruenzugGruenzaesur(RPFreiraum):
    """
    Grünzüge und kleinräumigere Grünzäsuren sind Ordnungsinstrumente zur Freiraumsicherung. Teilweise werden Grünzüge auch Trenngrün genannt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[Literal["1000", "2000", "3000"]] | None,
        Field(
            description="Klassifikation von Zäsurtypen.",
            json_schema_extra={
                "typename": "RP_ZaesurTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Gruenzug",
                        "alias": "Grünzug",
                        "description": "Grünzug.",
                    },
                    "2000": {
                        "name": "Gruenzaesur",
                        "alias": "Grünzäsur",
                        "description": "Grünzäsur.",
                    },
                    "3000": {
                        "name": "Siedlungszaesur",
                        "alias": "Siedlungszäsur",
                        "description": "Siedlungszäsur.",
                    },
                },
            },
        ),
    ] = None


class RPHochwasserschutz(RPFreiraum):
    """
    Die Klasse RP_Hochwasserschutz enthält Hochwasserschutz und vorbeugenden Hochwasserschutz.
    Hochwasserschutz und vorbeugender Hochwasserschutz beinhaltet den Schutz von Siedlungen, Nutz- und Verkehrsflächen vor Überschwemmungen. Im Binnenland besteht der Hochwasserschutz vor allem in der Sicherung und Rückgewinnung von Auen, Wasserrückhalteflächen (Retentionsflächen) und überschwemmungsgefährdeten Bereichen. An der Nord- und Ostsee erfolgt der Schutz vor Sturmfluten hauptsächlich durch Deiche und Siele (Küstenschutz).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1100",
                "1101",
                "1102",
                "1200",
                "1300",
                "1301",
                "1302",
                "1303",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1801",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Hochwasserschutztypen.",
            json_schema_extra={
                "typename": "RP_HochwasserschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Hochwasserschutz",
                        "alias": "Hochwasserschutz",
                        "description": "Hochwasserschutz.",
                    },
                    "1001": {
                        "name": "TechnischerHochwasserschutz",
                        "alias": "Technischer Hochwasserschutz",
                        "description": "Technischer Hochwasserschutz.",
                    },
                    "1100": {
                        "name": "Hochwasserrueckhaltebecken",
                        "alias": "Hochwasserrückhaltebecken",
                        "description": "Hochwasserrückhaltebecken.",
                    },
                    "1101": {
                        "name": "HochwasserrueckhaltebeckenPolder",
                        "alias": "Hochwasserrückhaltebecken: Polder",
                        "description": "Hochwasserrückhaltebecken: Polder.",
                    },
                    "1102": {
                        "name": "HochwasserrueckhaltebeckenBauwerk",
                        "alias": "Hochwasserrückhaltebecken: Bauwerk",
                        "description": "Hochwasserrückhaltebecken: Bauwerk.",
                    },
                    "1200": {
                        "name": "RisikobereichHochwasser",
                        "alias": "Risikobereich Hochwasser",
                        "description": "Risikobereich Hochwasser.",
                    },
                    "1300": {
                        "name": "Kuestenhochwasserschutz",
                        "alias": "Küstenhochwasserschutz",
                        "description": "Küstenhochwasserschutz.",
                    },
                    "1301": {
                        "name": "Deich",
                        "alias": "Deich",
                        "description": "Deich.",
                    },
                    "1302": {
                        "name": "Deichrueckverlegung",
                        "alias": "Deichrückverlegung",
                        "description": "Deichrückverlegung.",
                    },
                    "1303": {
                        "name": "DeichgeschuetztesGebiet",
                        "alias": "Deichgeschütztes Gebiet",
                        "description": "Deichgeschütztes Gebiet",
                    },
                    "1400": {
                        "name": "Sperrwerk",
                        "alias": "Sperrwerk",
                        "description": "Sperrwerk.",
                    },
                    "1500": {
                        "name": "HochwGefaehrdeteKuestenniederung",
                        "alias": "Hochwassergefährdete Küstenniederung",
                        "description": "Hochwassergefährdete Küstenniederung.",
                    },
                    "1600": {
                        "name": "Ueberschwemmungsgebiet",
                        "alias": "Überschwemmungsgebiet",
                        "description": "Überschwemmungsgebiet.",
                    },
                    "1700": {
                        "name": "UeberschwemmungsgefaehrdeterBereich",
                        "alias": "Überschwemmungsgefährdeter Bereich",
                        "description": "Überschwemmungsgefährdeter Bereich.",
                    },
                    "1800": {
                        "name": "Retentionsraum",
                        "alias": "Retentionsraum",
                        "description": "Retentionsraum.",
                    },
                    "1801": {
                        "name": "PotenziellerRetentionsraum",
                        "alias": "Potenzieller Retentionsraum",
                        "description": "Potenzieller Retentionsraum.",
                    },
                    "9999": {
                        "name": "SonstigerHochwasserschutz",
                        "alias": "Sonstiger Hochwasserschutz",
                        "description": "Sonstiger Hochwasserschutz.",
                    },
                },
            },
        ),
    ] = None


class RPIndustrieGewerbe(RPSiedlung):
    """
    Industrie- und Gewerbestrukturen und -funktionen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "2000",
                "2001",
                "2002",
                "2003",
                "3000",
                "3001",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Industrie- und Gewerbetypen.",
            json_schema_extra={
                "typename": "RP_IndustrieGewerbeTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Industrie",
                        "alias": "Industrie",
                        "description": "Industrie.",
                    },
                    "1001": {
                        "name": "IndustrielleAnlage",
                        "alias": "Industrielle Anlage",
                        "description": "Industrielle Anlage.",
                    },
                    "2000": {
                        "name": "Gewerbe",
                        "alias": "Gewerbe",
                        "description": "Gewerbe",
                    },
                    "2001": {
                        "name": "GewerblicherBereich",
                        "alias": "Gewerblicher Bereich",
                        "description": "Gewerblicher Bereich.",
                    },
                    "2002": {
                        "name": "Gewerbepark",
                        "alias": "Gewerbepark",
                        "description": "Gewerbepark.",
                    },
                    "2003": {
                        "name": "DienstleistungGewerbeZentrum",
                        "alias": "Dienstleistungs- oder Gewerbezentrum",
                        "description": "Dienstleistungs- oder Gewerbezentrum",
                    },
                    "3000": {
                        "name": "GewerbeIndustrie",
                        "alias": "Gewerbe und Industrie",
                        "description": "Gewerbe-Industrie.",
                    },
                    "3001": {
                        "name": "BedeutsamerEntwicklungsstandortGewerbeIndustrie",
                        "alias": "Bedeutsamer Entwicklungsstandort Gewerbe und Industrie",
                        "description": "Bedeutsamer Entwicklungsstandort von Gewerbe-Industrie.",
                    },
                    "4000": {
                        "name": "SicherungEntwicklungArbeitsstaetten",
                        "alias": "Sicherung Entwicklung Arbeitsstätten",
                        "description": "Sicherung und Entwicklung von Arbeitsstätten.",
                    },
                    "5000": {
                        "name": "FlaechenintensivesGrossvorhaben",
                        "alias": "Flächenintensives Grossvorhaben",
                        "description": "Flächenintensives Großvorhaben.",
                    },
                    "6000": {
                        "name": "BetriebsanlageBergbau",
                        "alias": "Betriebsanlage Bergbau",
                        "description": "Betriebsanlage des Bergbaus.",
                    },
                    "7000": {
                        "name": "HafenorientierteWirtschaftlicheAnlage",
                        "alias": "Hafenorientierte wirtschaftliche Anlage",
                        "description": "Hafenorientierte wirtschaftliche Anlage.",
                    },
                    "8000": {
                        "name": "TankRastanlage",
                        "alias": "Tank- und Rastanlage",
                        "description": "Tankanlagen und Rastanlagen.",
                    },
                    "9000": {
                        "name": "BereichFuerGewerblicheUndIndustrielleNutzungGIB",
                        "alias": "Bereich für gewerbliche und industrielle Nutzung (GIB)",
                        "description": "Sonstige Typen von Industrie und Gewerbe.",
                    },
                    "9999": {
                        "name": "SonstigeIndustrieGewerbe",
                        "alias": "Sonstige Industrie und Gewerbe",
                        "description": "Sonstiges",
                    },
                },
            },
        ),
    ] = None


class RPKlimaschutz(RPFreiraum):
    """
    (Siedlungs-) Klimaschutz. Beinhaltet zum Beispiel auch Kalt- und Frischluftschneisen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[Literal["1000", "2000", "3000", "9999"]] | None,
        Field(
            description="Klassifikation von Lufttypen.",
            json_schema_extra={
                "typename": "RP_KlimaschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Kaltluft",
                        "alias": "Kaltluft",
                        "description": "Kaltluft.",
                    },
                    "2000": {
                        "name": "Frischluft",
                        "alias": "Frischluft",
                        "description": "Frischluft.",
                    },
                    "3000": {
                        "name": "BesondereKlimaschutzfunktion",
                        "alias": "Besondere Klimaschutzfunktion",
                        "description": "Besondere Klimaschutzfunktion",
                    },
                    "9999": {
                        "name": "SonstigeLufttypen",
                        "alias": "Sonstige Lufttypen",
                        "description": "Sonstige Lufttypen.",
                    },
                },
            },
        ),
    ] = None


class RPKulturlandschaft(RPFreiraum):
    """
    Landschaftsbereich mit überwiegend anthropogenen Ökosystemen (historisch geprägt und gewachsen). Sie sind nach §2, Nr. 5 des ROG mit ihren Kultur- und Naturdenkmälern zu erhalten und zu entwickeln.
    Beinhaltet unter anderem die Begriffe Kulturlandschaft, kulturelle Sachgüter und Welterbestätten.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Klassifikation von Kulturlandschaftstypen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "KulturellesSachgut",
                        "alias": "Kulturelles Sachgut",
                        "description": "Kulturelles Sachgut.",
                    },
                    "2000": {
                        "name": "Welterbe",
                        "alias": "Welterbe",
                        "description": 'Welterbe. Von der UNESCO verliehener Titel an Stätten mit außergewöhnlichem, universellem Wert, die als "Teile des Kultur- und Naturerbes von außergewöhnlicher Bedeutung sind und daher als Bestandteil des Welterbes der ganzen Menschheit erhalten werden müssen" (Präambel der Welterbekonvention von 1972)',
                    },
                    "3000": {
                        "name": "KulturerbeLandschaft",
                        "alias": "Kulturerbe Landschaft",
                        "description": "Landschaftliches Kulturerbe.",
                    },
                    "4000": {
                        "name": "KulturDenkmalpflege",
                        "alias": "Kulturdenkmalpflege",
                        "description": "Pflege von Kulturdenkmälern",
                    },
                    "9999": {
                        "name": "SonstigeKulturlandschaftTypen",
                        "alias": "Sonstige Kulturlandschaft Typen",
                        "description": "Sonstige Kulturlandschafttypen.",
                    },
                },
                "typename": "RP_KulturlandschaftTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPLandwirtschaft(RPFreiraum):
    """
    Landwirtschaft, hauptsächlich im ländlichen Raum angesiedelt, erfüllt für die Gesellschaft wichtige Funktionen in der Produktion- und Versorgung mit Lebensmitteln, für Freizeit und Freiraum oder zur Biodiversität.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "1001",
            "2000",
            "3000",
            "4000",
            "5000",
            "6000",
            "7000",
            "8000",
            "9999",
        ]
        | None,
        Field(
            description="Klassifikation von Landwirtschaftstypen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "LandwirtschaftlicheNutzung",
                        "alias": "Landwirtschaftliche Nutzung",
                        "description": "Allgemeine Landwirtschaftliche Nutzung.",
                    },
                    "1001": {
                        "name": "KernzoneLandwirtschaft",
                        "alias": "Kernzone Landwirtschaft",
                        "description": "Kernzone Landwirtschaft.",
                    },
                    "2000": {
                        "name": "IntensivLandwirtschaft",
                        "alias": "Intensive Landwirtschaft",
                        "description": "Intensive Landwirtschaft.",
                    },
                    "3000": {
                        "name": "Fischerei",
                        "alias": "Fischerei",
                        "description": "Fischerei.",
                    },
                    "4000": {
                        "name": "Weinbau",
                        "alias": "Weinbau",
                        "description": "Weinbau.",
                    },
                    "5000": {
                        "name": "AufGrundHohenErtragspotenzials",
                        "alias": "Auf Grund hohen Ertragspotenzials",
                        "description": "Landwirtschaft auf Grund hohen Ertragspotenzials.",
                    },
                    "6000": {
                        "name": "AufGrundBesondererFunktionen",
                        "alias": "Auf Grund besonderer Funktionen",
                        "description": "Landwirtschaft auf Grund besonderer Funktionen.",
                    },
                    "7000": {
                        "name": "Gruenlandbewirtschaftung",
                        "alias": "Grünlandbewirtschaftung",
                        "description": "Grünlandbewirtschaftung.",
                    },
                    "8000": {
                        "name": "Sonderkultur",
                        "alias": "Sonderkultur",
                        "description": "Sonderkuluren",
                    },
                    "9999": {
                        "name": "SonstigeLandwirtschaft",
                        "alias": "Sonstige Landwirtschaft",
                        "description": "Sonstige Landwirtschaft",
                    },
                },
                "typename": "RP_LandwirtschaftTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPLuftverkehr(RPVerkehr):
    """
    Luftverkehr-Infrastruktur ist Infrastruktur, die  im Zusammenhang mit der Beförderung von Personen, Gepäck, Fracht und Post mit staatlich zugelassenen Luftfahrzeugen, besonders Flugzeugen steht.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "1003",
                "1004",
                "1005",
                "2000",
                "2001",
                "2002",
                "2003",
                "3000",
                "4000",
                "5000",
                "5001",
                "5002",
                "5003",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Luftverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_LuftverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Flughafen",
                        "alias": "Flughafen",
                        "description": "Flughafen.",
                    },
                    "1001": {
                        "name": "Verkehrsflughafen",
                        "alias": "Verkehrsflughafen",
                        "description": "Verkehrsflughafen.",
                    },
                    "1002": {
                        "name": "Regionalflughafen",
                        "alias": "Regionalflughafen",
                        "description": "Regionalflughafen.",
                    },
                    "1003": {
                        "name": "InternationalerFlughafen",
                        "alias": "Internationaler Flughafen",
                        "description": "Internationaler Flughafen.",
                    },
                    "1004": {
                        "name": "InternationalerVerkehrsflughafen",
                        "alias": "Internationaler Verkehrsflughafen",
                        "description": "Internationaler Verkehrsflughafen.",
                    },
                    "1005": {
                        "name": "Flughafenentwicklung",
                        "alias": "Flughafenentwicklung",
                        "description": "Flughafenentwicklung.",
                    },
                    "2000": {
                        "name": "Flugplatz",
                        "alias": "Flugplatz",
                        "description": "Flugplatz.",
                    },
                    "2001": {
                        "name": "Regionalflugplatz",
                        "alias": "Regionalflugplatz",
                        "description": "Regionalflugplatz.",
                    },
                    "2002": {
                        "name": "Segelflugplatz",
                        "alias": "Segelflugplatz",
                        "description": "Segelflugplatz.",
                    },
                    "2003": {
                        "name": "SonstigerFlugplatz",
                        "alias": "Sonstiger Flugplatz",
                        "description": "Sonstiger Flugplatz.",
                    },
                    "3000": {
                        "name": "Bauschutzbereich",
                        "alias": "Bauschutzbereich",
                        "description": "Bauschutzbereich.",
                    },
                    "4000": {
                        "name": "Militaerflughafen",
                        "alias": "Militärflughafen",
                        "description": "Militärflughafen.",
                    },
                    "5000": {
                        "name": "Landeplatz",
                        "alias": "Landeplatz",
                        "description": "Landeplatz.",
                    },
                    "5001": {
                        "name": "Verkehrslandeplatz",
                        "alias": "Verkehrslandeplatz",
                        "description": "Verkehrslandeplatz.",
                    },
                    "5002": {
                        "name": "Hubschrauberlandeplatz",
                        "alias": "Hubschrauberlandeplatz",
                        "description": "Hubschrauberlandeplatz.",
                    },
                    "5003": {
                        "name": "Landebahn",
                        "alias": "Landebahn",
                        "description": "Landebahn.",
                    },
                    "9999": {
                        "name": "SonstigerLuftverkehr",
                        "alias": "Sonstiger Luftverkehr",
                        "description": "Sonstiger Luftverkehr.",
                    },
                },
            },
        ),
    ] = None


class RPNaturLandschaft(RPFreiraum):
    """
    Naturlandschaften sind von umitellbaren menschlichen Aktivitäten weitestgehend unbeeinflusst gebliebene Landschaft.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1101",
                "1200",
                "1300",
                "1301",
                "1400",
                "1500",
                "1501",
                "1600",
                "1700",
                "1701",
                "1702",
                "1703",
                "1704",
                "1705",
                "1706",
                "1707",
                "1708",
                "1800",
                "1900",
                "2000",
                "2100",
                "2200",
                "2300",
                "2400",
                "2500",
                "2600",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Naturschutz, Landschaftsschutz und Naturlandschafttypen.",
            json_schema_extra={
                "typename": "RP_NaturLandschaftTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "NaturLandschaft",
                        "alias": "Naturlandschaft",
                        "description": "NaturLandschaft.",
                    },
                    "1100": {
                        "name": "NaturschutzLandschaftspflege",
                        "alias": "Naturschutz und Landschaftspflege",
                        "description": "Naturschutz und Landschaftspflege.",
                    },
                    "1101": {
                        "name": "NaturschutzLandschaftspflegeAufGewaessern",
                        "alias": "Naturschutz und Landschaftspflege auf Gewässern",
                        "description": "Naturschutz und Landschaftspflege auf Gewässern.",
                    },
                    "1200": {
                        "name": "Flurdurchgruenung",
                        "alias": "Flurdurchgrünung",
                        "description": "Flurdurchgrünung.",
                    },
                    "1300": {
                        "name": "UnzerschnitteneRaeume",
                        "alias": "Unzerschnittene Räume",
                        "description": "Unzerschnittene Räume.",
                    },
                    "1301": {
                        "name": "UnzerschnitteneVerkehrsarmeRaeume",
                        "alias": "Unzerschnittene verkehrsarme Räume",
                        "description": "Unzerschnittene verkehrsarme Räume.",
                    },
                    "1400": {
                        "name": "Feuchtgebiet",
                        "alias": "Feuchtgebiet",
                        "description": "Feuchtgebiet.",
                    },
                    "1500": {
                        "name": "OekologischesVerbundssystem",
                        "alias": "Ökologisches Verbundssystem",
                        "description": "Ökologisches Verbundssystem.",
                    },
                    "1501": {
                        "name": "OekologischerRaum",
                        "alias": "Ökologischer Raum",
                        "description": "Ökologischer Raum.",
                    },
                    "1600": {
                        "name": "VerbesserungLandschaftsstrukturNaturhaushalt",
                        "alias": "Verbesserung Landschaftsstruktur und Naturhaushalt",
                        "description": "Verbesserung der Landschaftsstruktur und des Naturhaushalts.",
                    },
                    "1700": {
                        "name": "Biotop",
                        "alias": "Biotop",
                        "description": "Biotop.",
                    },
                    "1701": {
                        "name": "Biotopverbund",
                        "alias": "Biotopverbund",
                        "description": "Biotopverbund.",
                    },
                    "1702": {
                        "name": "Biotopverbundachse",
                        "alias": "Biotopverbundachse",
                        "description": "Biotopverbundsachse.",
                    },
                    "1703": {
                        "name": "ArtenBiotopschutz",
                        "alias": "Arten-Biotopschutz",
                        "description": "Arten- und/oder Biotopschutz.",
                    },
                    "1704": {
                        "name": "Regionalpark",
                        "alias": "Regionalpark",
                        "description": "Regionalpark.",
                    },
                    "1705": {
                        "name": "Waldlebensraum",
                        "alias": "Waldlebensraum",
                        "description": "Teil eines Biotop(verbund)s von Waldlebensräumen",
                    },
                    "1706": {
                        "name": "Feuchtlebensraum",
                        "alias": "Feuchtlebensraum",
                        "description": "Teil eines Biotop(verbund)s von Feuchtlebensräumen (insbesondere Auen) mit dem angrenzenden Bereich des Grünlandes",
                    },
                    "1707": {
                        "name": "Trockenlebensraum",
                        "alias": "Trockenlebensraum",
                        "description": "Teil eines Biotop(verbunds) von Trockenlebensräumen",
                    },
                    "1708": {
                        "name": "LebensraumLaenderuebergreifendeVernetzung",
                        "alias": "Lebensraum länderübergreifende Vernetzung",
                        "description": "Länderübergreifender Teil eines Biotop(verbund)s",
                    },
                    "1800": {
                        "name": "KompensationEntwicklung",
                        "alias": "Kompensation Entwicklung",
                        "description": "Kompensation für Entwicklung.",
                    },
                    "1900": {
                        "name": "GruenlandBewirtschaftungPflegeEntwicklung",
                        "alias": "Grünland-Bewirtschaftung, -Pflege und -Entwicklung",
                        "description": "Grünlandbewirtschaftung, -pflege und -entwicklung.",
                    },
                    "2000": {
                        "name": "Landschaftsstruktur",
                        "alias": "Landschaftsstruktur",
                        "description": "Landschaftsstruktur.",
                    },
                    "2100": {
                        "name": "LandschaftErholung",
                        "alias": "Landschaft für Erholung",
                        "description": "Landschaftsgebiet für Erholung.",
                    },
                    "2200": {
                        "name": "Landschaftspraegend",
                        "alias": "Landschaftsprägend",
                        "description": "Landschaftsprägend.",
                    },
                    "2300": {
                        "name": "SchutzDerNatur",
                        "alias": "Schutz der Natur",
                        "description": "Schutz der Natur.",
                    },
                    "2400": {
                        "name": "SchutzDesLandschaftsbildes",
                        "alias": "Schutz des Landschaftsbildes",
                        "description": "Schutz des Landschaftsbildes.",
                    },
                    "2500": {
                        "name": "Alpenpark",
                        "alias": "Alpenpark",
                        "description": "Alpenpark.",
                    },
                    "2600": {
                        "name": "Freiraumfunktionen",
                        "alias": "Freiraumfunktionen",
                        "description": 'Vorranggebiet Freiraumfunktionen gemäß Planzeichenkatalog "Planzeichen in der Regionalplanung“ vom niedersächsischem Landkreistag.',
                    },
                    "9999": {
                        "name": "SonstigerNaturLandschaftSchutz",
                        "alias": "Sonstiger Natur- und Landschaftsschutz",
                        "description": "Sonstiger NaturLandschaftsschutz.",
                    },
                },
            },
        ),
    ] = None


class RPNaturschutzrechtlichesSchutzgebiet(RPFreiraum):
    """
    Schutzgebiet nach Bundes-Naturschutzgesetz.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "18000",
                "18001",
                "2000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation des Naturschutzgebietes.",
            json_schema_extra={
                "typename": "LP_KlassifizierungNaturschutzrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Naturschutzgebiet",
                        "alias": "Naturschutzgebiet",
                        "description": "Naturschutzgebiet gemäß §23 BNatSchG.",
                    },
                    "1100": {
                        "name": "Nationalpark",
                        "alias": "Nationalpark",
                        "description": "Nationalpark gemäß §24 BNatSchG",
                    },
                    "1200": {
                        "name": "Biosphaerenreservat",
                        "alias": "Biosphärenreservat",
                        "description": "Biosphärenreservat gemäß §25 BNatSchG.",
                    },
                    "1300": {
                        "name": "Landschaftsschutzgebiet",
                        "alias": "Landschaftsschutzgebiet",
                        "description": "Landschaftsschutzgebiet gemäß §26 BNatSchG.",
                    },
                    "1400": {
                        "name": "Naturpark",
                        "alias": "Naturpark",
                        "description": "Naturpark gemäß §27 BNatSchG.",
                    },
                    "1500": {
                        "name": "Naturdenkmal",
                        "alias": "Naturdenkmal",
                        "description": "Naturdenkmal gemäß §28 BNatSchG.",
                    },
                    "1600": {
                        "name": "GeschuetzterLandschaftsBestandteil",
                        "alias": "Geschützter Landschaftsbestandteil",
                        "description": "Geschützter Bestandteil der Landschaft gemäß §29 BNatSchG.",
                    },
                    "1700": {
                        "name": "GesetzlichGeschuetztesBiotop",
                        "alias": "Gesetzlich geschütztes Biotop",
                        "description": "Gesetzlich geschützte Biotope gemäß §30 BNatSchG.",
                    },
                    "1800": {
                        "name": "Natura2000",
                        "alias": "Natura 2000",
                        "description": 'Schutzgebiet nach Europäischem Recht. Dies umfasst das "Gebiet Gemeinschaftlicher Bedeutung" (FFH-Gebiet) und das "Europäische Vogelschutzgebiet"',
                    },
                    "18000": {
                        "name": "GebietGemeinschaftlicherBedeutung",
                        "alias": "Gebiet gemeinschaftlicher Bedeutung",
                        "description": "Gebiete von gemeinschaftlicher Bedeutung",
                    },
                    "18001": {
                        "name": "EuropaeischesVogelschutzgebiet",
                        "alias": "Europäisches Vogelschutzgebiet",
                        "description": "Europäische Vogelschutzgebiete",
                    },
                    "2000": {
                        "name": "NationalesNaturmonument",
                        "alias": "Nationales Naturmonument",
                        "description": "Nationales Naturmonument gemäß §24 Abs. (4)  BNatSchG.",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Schutzgebietskategorie (z.B. geschützte Parkanlagen), siehe artDerFestlegungText.",
                    },
                },
            },
        ),
    ] = None
    istKernzone: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob es sich um eine Kernzone handelt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPRadwegWanderweg(RPFreiraum):
    """
    Radwege und Wanderwege. Straßenbegleitend oder selbstständig geführt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[Literal["1000", "1001", "2000", "2001", "3000", "4000", "9999"]] | None,
        Field(
            description="Klassifikation von Radwegen und Wanderwegen.",
            json_schema_extra={
                "typename": "RP_RadwegWanderwegTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Wanderweg",
                        "alias": "Wanderweg",
                        "description": "Wanderweg.",
                    },
                    "1001": {
                        "name": "Fernwanderweg",
                        "alias": "Fernwanderweg",
                        "description": "Fernwanderweg.",
                    },
                    "2000": {
                        "name": "Radwandern",
                        "alias": "Radwandern",
                        "description": "Radwandern.",
                    },
                    "2001": {
                        "name": "Fernradweg",
                        "alias": "Fernradweg",
                        "description": "Fernradweg.",
                    },
                    "3000": {
                        "name": "Reiten",
                        "alias": "Reiten",
                        "description": "Reiten.",
                    },
                    "4000": {
                        "name": "Wasserwandern",
                        "alias": "Wasserwandern",
                        "description": "Wasserwandern.",
                    },
                    "9999": {
                        "name": "SonstigerWanderweg",
                        "alias": "Sonstiger Wanderweg",
                        "description": "Sonstiger Wanderweg.",
                    },
                },
            },
        ),
    ] = None


class RPRohstoff(RPFreiraum):
    """
    Rohstoff, inklusive Rohstoffprospektion, Rohstoffsicherung, Rohstoffabbau, Bergbau und Bergbaufolgelandschaft.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    rohstoffTyp: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1900",
                "2000",
                "2100",
                "2200",
                "2300",
                "2400",
                "2500",
                "2600",
                "2700",
                "2800",
                "2900",
                "3000",
                "3100",
                "3200",
                "3300",
                "3400",
                "3500",
                "3600",
                "3700",
                "3800",
                "3900",
                "4000",
                "4100",
                "4200",
                "4300",
                "4400",
                "4500",
                "4600",
                "4700",
                "4800",
                "4900",
                "5000",
                "5100",
                "5200",
                "5300",
                "5400",
                "5500",
                "5600",
                "5700",
                "5800",
                "5900",
                "6000",
                "6100",
                "6200",
                "6300",
                "6400",
                "6500",
                "6600",
                "6700",
                "6800",
                "6900",
                "7000",
                "7100",
                "7200",
                "7300",
                "7400",
                "7500",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Abgebauter Rohstoff.",
            json_schema_extra={
                "typename": "RP_RohstoffTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Anhydritstein",
                        "alias": "Anhydritstein",
                        "description": "Anhydritstein.",
                    },
                    "1100": {
                        "name": "Baryt",
                        "alias": "Baryt",
                        "description": "Baryt.",
                    },
                    "1200": {
                        "name": "BasaltDiabas",
                        "alias": "Basalt, Diabas",
                        "description": "BasaltDiabas.",
                    },
                    "1300": {
                        "name": "Bentonit",
                        "alias": "Bentonit",
                        "description": "Bentonit.",
                    },
                    "1400": {
                        "name": "Blaehton",
                        "alias": "Blähton",
                        "description": "Blaehton.",
                    },
                    "1500": {
                        "name": "Braunkohle",
                        "alias": "Braunkohle",
                        "description": "Braunkohle.",
                    },
                    "1600": {
                        "name": "Buntsandstein",
                        "alias": "Buntsandstein",
                        "description": "Buntsandstein.",
                    },
                    "1700": {
                        "name": "Dekostein",
                        "alias": "Dekostein",
                        "description": "Dekostein",
                    },
                    "1800": {
                        "name": "Diorit",
                        "alias": "Diorit",
                        "description": "Diorit.",
                    },
                    "1900": {
                        "name": "Dolomitstein",
                        "alias": "Dolomitstein",
                        "description": "Dolomitstein.",
                    },
                    "2000": {
                        "name": "Erdgas",
                        "alias": "Erdgas",
                        "description": "Erdgas.",
                    },
                    "2100": {
                        "name": "Erdoel",
                        "alias": "Erdöl",
                        "description": "Erdöl.",
                    },
                    "2200": {"name": "Erz", "alias": "Erz", "description": "Erz."},
                    "2300": {
                        "name": "Feldspat",
                        "alias": "Feldspat",
                        "description": "Feldspat.",
                    },
                    "2400": {
                        "name": "Festgestein",
                        "alias": "Festgestein",
                        "description": "Festgestein.",
                    },
                    "2500": {
                        "name": "Flussspat",
                        "alias": "Flussspat",
                        "description": "Flussspat.",
                    },
                    "2600": {
                        "name": "Gangquarz",
                        "alias": "Gangquarz",
                        "description": "Gangquarz.",
                    },
                    "2700": {
                        "name": "Gipsstein",
                        "alias": "Gipsstein",
                        "description": "Gipsstein.",
                    },
                    "2800": {
                        "name": "Gneis",
                        "alias": "Gneis",
                        "description": "Gneis.",
                    },
                    "2900": {
                        "name": "Granit",
                        "alias": "Granit",
                        "description": "Granit.",
                    },
                    "3000": {
                        "name": "Grauwacke",
                        "alias": "Grauwacke",
                        "description": "Grauwacke.",
                    },
                    "3100": {
                        "name": "Hartgestein",
                        "alias": "Hartgestein",
                        "description": "Hartgestein",
                    },
                    "3200": {
                        "name": "KalkKalktuffKreide",
                        "alias": "Kalk, Kalktuff, Kreide",
                        "description": "KalkKalktuffKreide.",
                    },
                    "3300": {
                        "name": "Kalkmergelstein",
                        "alias": "Kalkmergelstein",
                        "description": "Kalkmergelstein.",
                    },
                    "3400": {
                        "name": "Kalkstein",
                        "alias": "Kalkstein",
                        "description": "Kalkstein.",
                    },
                    "3500": {
                        "name": "Kaolin",
                        "alias": "Kaolin",
                        "description": "Kaolin.",
                    },
                    "3600": {
                        "name": "Karbonatgestein",
                        "alias": "Karbonatgestein",
                        "description": "Karbonatgestein.",
                    },
                    "3700": {"name": "Kies", "alias": "Kies", "description": "Kies."},
                    "3800": {
                        "name": "Kieselgur",
                        "alias": "Kieselgur",
                        "description": "Kieselgur.",
                    },
                    "3900": {
                        "name": "KieshaltigerSand",
                        "alias": "Kieshaltiger Sand",
                        "description": "KieshaltigerSand.",
                    },
                    "4000": {
                        "name": "KiesSand",
                        "alias": "Kies, Sand",
                        "description": "KiesSand.",
                    },
                    "4100": {"name": "Klei", "alias": "Klei", "description": "Klei."},
                    "4200": {
                        "name": "Kristallin",
                        "alias": "Kristallin",
                        "description": "Kristallin.",
                    },
                    "4300": {
                        "name": "Kupfer",
                        "alias": "Kupfer",
                        "description": "Kupfer.",
                    },
                    "4400": {"name": "Lehm", "alias": "Lehm", "description": "Lehm."},
                    "4500": {
                        "name": "Marmor",
                        "alias": "Marmor",
                        "description": "Marmor.",
                    },
                    "4600": {
                        "name": "Mergel",
                        "alias": "Mergel",
                        "description": "Mergel.",
                    },
                    "4700": {
                        "name": "Mergelstein",
                        "alias": "Mergelstein",
                        "description": "Mergelstein.",
                    },
                    "4800": {
                        "name": "MikrogranitGranitporphyr",
                        "alias": "Mikrogranit, Granitporphyr",
                        "description": "MikrogranitGranitporphyr.",
                    },
                    "4900": {
                        "name": "Monzonit",
                        "alias": "Monzonit",
                        "description": "Monzonit.",
                    },
                    "5000": {
                        "name": "Muschelkalk",
                        "alias": "Muschelkalk",
                        "description": "Muschelkalk.",
                    },
                    "5100": {
                        "name": "Naturstein",
                        "alias": "Naturstein",
                        "description": "Naturstein.",
                    },
                    "5200": {
                        "name": "Naturwerkstein",
                        "alias": "Naturwerkstein",
                        "description": "Naturwerkstein.",
                    },
                    "5300": {
                        "name": "Oelschiefer",
                        "alias": "Ölschiefer",
                        "description": "Ölschiefer.",
                    },
                    "5400": {
                        "name": "Pegmatitsand",
                        "alias": "Pegmatitsand",
                        "description": "Pegmatitsand.",
                    },
                    "5500": {
                        "name": "Quarzit",
                        "alias": "Quarzit",
                        "description": "Quarzit.",
                    },
                    "5600": {
                        "name": "Quarzsand",
                        "alias": "Quarzsand",
                        "description": "Quarzsand.",
                    },
                    "5700": {
                        "name": "Rhyolith",
                        "alias": "Rhyolith",
                        "description": "Rhyolith.",
                    },
                    "5800": {
                        "name": "RhyolithQuarzporphyr",
                        "alias": "Rhyolith, Quarzporphyr",
                        "description": "RhyolithQuarzporphyr.",
                    },
                    "5900": {"name": "Salz", "alias": "Salz", "description": "Salz."},
                    "6000": {"name": "Sand", "alias": "Sand", "description": "Sand."},
                    "6100": {
                        "name": "Sandstein",
                        "alias": "Sandstein",
                        "description": "Sandstein.",
                    },
                    "6200": {
                        "name": "Spezialton",
                        "alias": "Spezialton",
                        "description": "Spezialton.",
                    },
                    "6300": {
                        "name": "SteineundErden",
                        "alias": "Steine und Erden",
                        "description": "Steine und Erden.",
                    },
                    "6400": {
                        "name": "Steinkohle",
                        "alias": "Steinkohle",
                        "description": "Steinkohle.",
                    },
                    "6500": {"name": "Ton", "alias": "Ton", "description": "Ton."},
                    "6600": {
                        "name": "Tonstein",
                        "alias": "Tonstein",
                        "description": "Tonstein.",
                    },
                    "6700": {"name": "Torf", "alias": "Torf", "description": "Torf."},
                    "6800": {
                        "name": "TuffBimsstein",
                        "alias": "Tuff, Bimsstein",
                        "description": "TuffBimsstein.",
                    },
                    "6900": {"name": "Uran", "alias": "Uran", "description": "Uran."},
                    "7000": {
                        "name": "Vulkanit",
                        "alias": "Vulkanit",
                        "description": "Vulkanit.",
                    },
                    "7100": {
                        "name": "Werkstein",
                        "alias": "Werkstein",
                        "description": "Werkstein",
                    },
                    "7200": {
                        "name": "Andesit",
                        "alias": "Andesit",
                        "description": "Andesit",
                    },
                    "7300": {
                        "name": "Formsand",
                        "alias": "Formsand",
                        "description": "Formsand",
                    },
                    "7400": {
                        "name": "Gabbro",
                        "alias": "Gabbro",
                        "description": "Gabbro",
                    },
                    "7500": {
                        "name": "MikrodioritKuselit",
                        "alias": "Mikrodiorit, Kuselit",
                        "description": "Mikrodiorit Kuselit",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiges.",
                    },
                },
            },
        ),
    ] = None
    detaillierterRohstoffTyp: Annotated[
        list[str] | None,
        Field(
            description="Abgebauer Rohstoff in Textform",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..*",
            },
        ),
    ] = None
    folgenutzung: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Folgenutzungen bestimmter bergbaulicher Maßnahmen.",
            json_schema_extra={
                "typename": "RP_BergbauFolgenutzung",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Landwirtschaft",
                        "alias": "Landwirtschaft",
                        "description": "Folgenutzung Landwirtschaft.",
                    },
                    "2000": {
                        "name": "Forstwirtschaft",
                        "alias": "Forstwirtschaft",
                        "description": "Folgenutzung Forstwirtschaft.",
                    },
                    "3000": {
                        "name": "Gruenlandbewirtschaftung",
                        "alias": "Grünlandbewirtschaftung",
                        "description": "Folgenutzung Grünlandbewirtschaftung.",
                    },
                    "4000": {
                        "name": "NaturLandschaft",
                        "alias": "Natur und Landschaft",
                        "description": "Folgenutzung NaturLandschaft.",
                    },
                    "5000": {
                        "name": "Naturschutz",
                        "alias": "Naturschutz",
                        "description": "Folgenutzung Naturschutz.",
                    },
                    "6000": {
                        "name": "Erholung",
                        "alias": "Erholung",
                        "description": "Folgenutzung Erholung.",
                    },
                    "7000": {
                        "name": "Gewaesser",
                        "alias": "Gewässer",
                        "description": "Folgenutzung Gewässer.",
                    },
                    "8000": {
                        "name": "Verkehr",
                        "alias": "Verkehr",
                        "description": "Folgenutzung Verkehr.",
                    },
                    "9000": {
                        "name": "Altbergbau",
                        "alias": "Altbergbau",
                        "description": "Folgenutzung Altbergbau.",
                    },
                    "9999": {
                        "name": "SonstigeNutzung",
                        "alias": "Sonstige Nutzung",
                        "description": "Sonstige Folgenutzung.",
                    },
                },
            },
        ),
    ] = None
    folgenutzungText: Annotated[
        str | None,
        Field(
            description="Textliche Festlegungen und Spezifizierungen zur Folgenutzung einer Bergbauplanung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zeitstufe: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Zeitstufe des Rohstoffabbaus.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Zeitstufe1",
                        "alias": "Zeitstufe 1",
                        "description": "Zeitstufe 1.",
                    },
                    "2000": {
                        "name": "Zeitstufe2",
                        "alias": "Zeitstufe 2",
                        "description": "Zeitstufe 2.",
                    },
                },
                "typename": "RP_Zeitstufen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zeitstufeText: Annotated[
        str | None,
        Field(
            description="Textliche Spezifizierung einer Rohstoffzeitstufe, zum Beispiel kurzfristiger Abbau (Zeitstufe I) und langfristige Sicherung für mindestens 25-30 Jahre (Zeitstufe II).",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    tiefe: Annotated[
        Literal["1000", "2000"] | None,
        Field(
            description="Tiefe eines Rohstoffes",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Oberflaechennah",
                        "alias": "Oberflächennah",
                        "description": "Oberflächennaher Bodenschatz.",
                    },
                    "2000": {
                        "name": "Tiefliegend",
                        "alias": "Tiefliegend",
                        "description": "Tiefliegender Bodenschatz.",
                    },
                },
                "typename": "RP_BodenschatzTiefen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    bergbauplanungTyp: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1900",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Bergbauplanungstypen.",
            json_schema_extra={
                "typename": "RP_BergbauplanungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Lagerstaette",
                        "alias": "Lagerstätte",
                        "description": "Lagerstätte.",
                    },
                    "1100": {
                        "name": "Sicherung",
                        "alias": "Sicherung",
                        "description": "Sicherung.",
                    },
                    "1200": {
                        "name": "Gewinnung",
                        "alias": "Gewinnung",
                        "description": "Gewinnung.",
                    },
                    "1300": {
                        "name": "Abbau",
                        "alias": "Abbau",
                        "description": "Abbaubereich.",
                    },
                    "1400": {
                        "name": "Sicherheitszone",
                        "alias": "Sicherheitszone",
                        "description": "Sicherheitszone.",
                    },
                    "1500": {
                        "name": "AnlageEinrichtungBergbau",
                        "alias": "Anlage Einrichtung Bergbau",
                        "description": "Anlage und/oder Einrichtung des Bergbaus.",
                    },
                    "1600": {
                        "name": "Halde",
                        "alias": "Halde",
                        "description": "Halde, Aufschüttung und/oder Ablagerung.",
                    },
                    "1700": {
                        "name": "Sanierungsflaeche",
                        "alias": "Sanierungsfläche",
                        "description": "Sanierungsfläche.",
                    },
                    "1800": {
                        "name": "AnsiedlungUmsiedlung",
                        "alias": "Ansiedlung, Umsiedlung",
                        "description": "Ansiedlung und/oder Umsiedlung.",
                    },
                    "1900": {
                        "name": "Bergbaufolgelandschaft",
                        "alias": "Bergbaufolgelandschaft",
                        "description": "Bergbaufolgelandschaft.",
                    },
                    "9999": {
                        "name": "SonstigeBergbauplanung",
                        "alias": "Sonstige Bergbauplanung",
                        "description": "Sonstige Bergbauplanung.",
                    },
                },
            },
        ),
    ] = None
    istAufschuettungAblagerung: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob der Rohstoff aus einer Aufschüttung oder Ablagerung gewonnen wird",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False


class RPSchienenverkehr(RPVerkehr):
    """
    Schienenverkehr-Infrastruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "1100",
                "1200",
                "1300",
                "1301",
                "1302",
                "1303",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1801",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Schienenverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_SchienenverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Schienenverkehr",
                        "alias": "Schienenverkehr",
                        "description": "Schienenverkehr.",
                    },
                    "1001": {
                        "name": "Eisenbahnstrecke",
                        "alias": "Eisenbahnstrecke",
                        "description": "Eisenbahnstrecke.",
                    },
                    "1002": {
                        "name": "Haupteisenbahnstrecke",
                        "alias": "Haupteisenbahnstrecke",
                        "description": "Haupteisenbahnstrecke.",
                    },
                    "1100": {
                        "name": "Trasse",
                        "alias": "Trasse",
                        "description": "Trasse.",
                    },
                    "1200": {
                        "name": "Schienennetz",
                        "alias": "Schienennetz",
                        "description": "Schienennetz.",
                    },
                    "1300": {
                        "name": "Stadtbahn",
                        "alias": "Stadtbahn",
                        "description": "Stadtbahn.",
                    },
                    "1301": {
                        "name": "Strassenbahn",
                        "alias": "Straßenbahn",
                        "description": "Straßenbahn.",
                    },
                    "1302": {
                        "name": "SBahn",
                        "alias": "S-Bahn",
                        "description": "S-Bahn.",
                    },
                    "1303": {
                        "name": "UBahn",
                        "alias": "U-Bahn",
                        "description": "U-Bahn.",
                    },
                    "1400": {
                        "name": "AnschlussgleisIndustrieGewerbe",
                        "alias": "Anschlussgleis Industrie Gewerbe",
                        "description": "Anschlussgleis für Industrie und Gewerbe.",
                    },
                    "1500": {
                        "name": "Haltepunkt",
                        "alias": "Haltepunkt",
                        "description": "Haltepunkt.",
                    },
                    "1600": {
                        "name": "Bahnhof",
                        "alias": "Bahnhof",
                        "description": "Bahnhof.",
                    },
                    "1700": {
                        "name": "Hochgeschwindigkeitsverkehr",
                        "alias": "Hochgeschwindigkeitsverkehr",
                        "description": "Hochgeschwindigkeitsverkehr.",
                    },
                    "1800": {
                        "name": "Bahnbetriebsgelaende",
                        "alias": "Bahnbetriebsgelände",
                        "description": "Bahnbetriebsgelände.",
                    },
                    "1801": {
                        "name": "AnlagemitgrossemFlaechenbedarf",
                        "alias": "Anlage mit großem Flächenbedarf",
                        "description": "Anlage mit großem Flächenbedarf.",
                    },
                    "9999": {
                        "name": "SonstigerSchienenverkehr",
                        "alias": "Sonstiger Schienenverkehr",
                        "description": "Sonstiger Schienenverkehr.",
                    },
                },
            },
        ),
    ] = None
    besondererTyp: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "2000",
                "3000",
                "3001",
                "4000",
                "4001",
                "5000",
                "6000",
                "6001",
                "7000",
                "7001",
                "8000",
                "8001",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von besonderer Schienenverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_BesondererSchienenverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Eingleisig",
                        "alias": "Eingleisig",
                        "description": "Eingleisig.",
                    },
                    "1001": {
                        "name": "Zweigleisig",
                        "alias": "Zweigleisig",
                        "description": "Zweigleisig.",
                    },
                    "1002": {
                        "name": "Mehrgleisig",
                        "alias": "Mehrgleisig",
                        "description": "Mehrgleisig.",
                    },
                    "2000": {
                        "name": "OhneBetrieb",
                        "alias": "Ohne Betrieb",
                        "description": "Schienenverkehrsinfrastruktur ohne Betrieb.",
                    },
                    "3000": {
                        "name": "MitFernverkehrsfunktion",
                        "alias": "Mit Fernverkehrsfunktion",
                        "description": "Schienenverkehrsinfrastruktur mit Fernverkehrsfunktion.",
                    },
                    "3001": {
                        "name": "MitVerknuepfungsfunktionFuerOEPNV",
                        "alias": "Mit Verknüpfungsfunktion für ÖPNV",
                        "description": "Schienenverkehrsinfrastruktur mit Verknüpfungsfunktion für den öffentlichen Personennahverkehr.",
                    },
                    "4000": {
                        "name": "ElektrischerBetrieb",
                        "alias": "Elektrischer Betrieb",
                        "description": "Elektrischer Betrieb.",
                    },
                    "4001": {
                        "name": "ZuElektrifizieren",
                        "alias": "Zu Elektrifizieren",
                        "description": "Zu Elektrifizieren.",
                    },
                    "5000": {
                        "name": "VerbesserungLeistungsfaehigkeit",
                        "alias": "Verbesserung Leistungsfähigkeit",
                        "description": "Verbesserung der Leistungsfähigkeit.",
                    },
                    "6000": {
                        "name": "RaeumlicheFreihaltungEntwidmeterBahntrassen",
                        "alias": "Räumliche Freihaltung entwidmeter Bahntrassen",
                        "description": "Räumliche Freihaltung entwidmeter Bahntrassen.",
                    },
                    "6001": {
                        "name": "NachnutzungStillgelegterStrecken",
                        "alias": "Nachnutzung stillgelegter Strecken",
                        "description": "Nachnutzung stillgelegter Strecken.",
                    },
                    "7000": {
                        "name": "Personenverkehr",
                        "alias": "Personenverkehr",
                        "description": "Personenverkehr.",
                    },
                    "7001": {
                        "name": "Gueterverkehr",
                        "alias": "Güterverkehr",
                        "description": "Güterverkehr.",
                    },
                    "8000": {
                        "name": "Nahverkehr",
                        "alias": "Nahverkehr",
                        "description": "Nahverkehr.",
                    },
                    "8001": {
                        "name": "Fernverkehr",
                        "alias": "Fernverkehr",
                        "description": "Fernverkehr.",
                    },
                },
            },
        ),
    ] = None


class RPSonstVerkehr(RPVerkehr):
    """
    Sonstige Verkehrsinfrastruktur, die sich nicht eindeutig einem anderen Typ zuordnen lässt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1100",
                "1200",
                "1300",
                "1400",
                "1500",
                "1600",
                "1700",
                "1800",
                "1900",
                "2000",
                "2001",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Sonstige Klassifikation von Verkehrs-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_SonstVerkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Verkehrsanlage",
                        "alias": "Verkehrsanlage",
                        "description": "Verkehrsanlage.",
                    },
                    "1100": {
                        "name": "Gueterverkehrszentrum",
                        "alias": "Güterverkehrszentrum",
                        "description": "Güterverkehrszentrum.",
                    },
                    "1200": {
                        "name": "Logistikzentrum",
                        "alias": "Logistikzentrum",
                        "description": "Logistikzentrum.",
                    },
                    "1300": {
                        "name": "TerminalKombinierterVerkehr",
                        "alias": "Terminal Kombinierter Verkehr",
                        "description": "Terminal des kombinierten Verkehrs.",
                    },
                    "1400": {"name": "OEPNV", "alias": "ÖPNV", "description": "ÖPNV."},
                    "1500": {
                        "name": "VerknuepfungspunktBahnBus",
                        "alias": "Verknüpfungspunkt Bahn-Bus",
                        "description": "Verknüpfungspunkt Bahn-Bus.",
                    },
                    "1600": {
                        "name": "ParkAndRideBikeAndRide",
                        "alias": "Park and Ride / Bike and Ride",
                        "description": "Park-and-Ride und/oder Bike-and-Ride.",
                    },
                    "1700": {
                        "name": "Faehrverkehr",
                        "alias": "Fährverkehr",
                        "description": "Fährverkehr.",
                    },
                    "1800": {
                        "name": "Infrastrukturkorridor",
                        "alias": "Infrastrukturkorridor",
                        "description": "Infrastrukturkorridor.",
                    },
                    "1900": {
                        "name": "Tunnel",
                        "alias": "Tunnel",
                        "description": "Tunnel.",
                    },
                    "2000": {
                        "name": "NeueVerkehrstechniken",
                        "alias": "Neue Verkehrstechniken",
                        "description": "Neue Verkehrstechniken.",
                    },
                    "2001": {
                        "name": "Teststrecke",
                        "alias": "Teststrecke",
                        "description": "Sicherung von Teststrecken für die Fahrzeugindustrie und Sicherung von Gebieten zur Entwicklung damit verbundener neuer Verkehrssysteme und -techniken.",
                    },
                    "9999": {
                        "name": "SonstigerVerkehr",
                        "alias": "Sonstiger Verkehr",
                        "description": "Sonstiger Verkehr.",
                    },
                },
            },
        ),
    ] = None


class RPSonstigerFreiraumschutz(RPFreiraum):
    """
    Sonstiger Freiraumschutz. Nicht anderweitig zuzuordnende Freiraumstrukturen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"


class RPSportanlage(RPFreiraum):
    """
    Sportanlagen und -bereiche.
    Sportanlagen sind ortsfeste Einrichtungen, die zur Sportausübung bestimmt sind. Zur Sportanlage zählen auch Einrichtungen, die mit der Sportanlage in einem engen räumlichen und betrieblichen Zusammenhang stehen (nach BImSchV 18 §1).
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "6000", "7000", "9999"] | None,
        Field(
            description="Klassifikation von Sportanlagen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Sportanlage",
                        "alias": "Sportanlage",
                        "description": "Sportanlage.",
                    },
                    "2000": {
                        "name": "Wassersport",
                        "alias": "Wassersport",
                        "description": "Wassersport.",
                    },
                    "3000": {
                        "name": "Motorsport",
                        "alias": "Motorsport",
                        "description": "Motorsport.",
                    },
                    "4000": {
                        "name": "Flugsport",
                        "alias": "Flugsport",
                        "description": "Flugsport.",
                    },
                    "5000": {
                        "name": "Reitsport",
                        "alias": "Reitsport",
                        "description": "Reitsport.",
                    },
                    "6000": {
                        "name": "Golfsport",
                        "alias": "Golfsport",
                        "description": "Golfsport.",
                    },
                    "7000": {
                        "name": "Sportzentrum",
                        "alias": "Sportzentrum",
                        "description": "Sportzentrum.",
                    },
                    "9999": {
                        "name": "SonstigeSportanlage",
                        "alias": "Sonstige Sportanlage",
                        "description": "Sonstige Sportanlage.",
                    },
                },
                "typename": "RP_SportanlageTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPStrassenverkehr(RPVerkehr):
    """
    Strassenverkehr-Infrastruktur.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        list[
            Literal[
                "1000",
                "1001",
                "1002",
                "1003",
                "1004",
                "1005",
                "1006",
                "1007",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Strassenverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_StrassenverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Strassenverkehr",
                        "alias": "Straßenverkehr",
                        "description": "Straßenverkehr.",
                    },
                    "1001": {
                        "name": "Hauptverkehrsstrasse",
                        "alias": "Hauptverkehrsstraße",
                        "description": "Hauptverkehrsstraße.",
                    },
                    "1002": {
                        "name": "Autobahn",
                        "alias": "Autobahn",
                        "description": "Autobahn.",
                    },
                    "1003": {
                        "name": "Bundesstrasse",
                        "alias": "Bundesstraße",
                        "description": "Bundesstraße.",
                    },
                    "1004": {
                        "name": "Staatsstrasse",
                        "alias": "Staatsstraße",
                        "description": "Staatsstraße.",
                    },
                    "1005": {
                        "name": "Landesstrasse",
                        "alias": "Landesstraße",
                        "description": "Landesstraße.",
                    },
                    "1006": {
                        "name": "Kreisstrasse",
                        "alias": "Kreisstraße",
                        "description": "Kreisstraße.",
                    },
                    "1007": {
                        "name": "Fernstrasse",
                        "alias": "Fernstraße",
                        "description": "Fernstraße.",
                    },
                    "2000": {
                        "name": "Trasse",
                        "alias": "Trasse",
                        "description": "Trasse.",
                    },
                    "3000": {
                        "name": "Strassennetz",
                        "alias": "Straßennetz",
                        "description": "Straßennetz.",
                    },
                    "4000": {
                        "name": "Busverkehr",
                        "alias": "Busverkehr",
                        "description": "Busverkehr.",
                    },
                    "5000": {
                        "name": "Anschlussstelle",
                        "alias": "Anschlussstelle",
                        "description": "Anschlussstelle.",
                    },
                    "6000": {
                        "name": "Strassentunnel",
                        "alias": "Straßentunnel",
                        "description": "Straßentunnel.",
                    },
                    "9999": {
                        "name": "SonstigerStrassenverkehr",
                        "alias": "Sonstiger Straßenverkehr",
                        "description": "Sonstiger Straßenverkehr.",
                    },
                },
            },
        ),
    ] = None
    besondererTyp: Annotated[
        list[Literal["1000", "1001", "1002", "1003", "2000", "3000"]] | None,
        Field(
            description="Klassifikation von besonderer Strassenverkehr-Infrastruktur.",
            json_schema_extra={
                "typename": "RP_BesondererStrassenverkehrTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Zweistreifig",
                        "alias": "Zweistreifig",
                        "description": "Zweistreifig.",
                    },
                    "1001": {
                        "name": "Dreistreifig",
                        "alias": "Dreistreifig",
                        "description": "Dreistreifig.",
                    },
                    "1002": {
                        "name": "Vierstreifig",
                        "alias": "Vierstreifig",
                        "description": "Vierstreifig.",
                    },
                    "1003": {
                        "name": "Sechsstreifig",
                        "alias": "Sechsstreifig",
                        "description": "Sechsstreifig.",
                    },
                    "2000": {
                        "name": "Problembereich",
                        "alias": "Problembereich",
                        "description": "Problembereich.",
                    },
                    "3000": {
                        "name": "GruenbrueckeQuerungsmoeglichkeit",
                        "alias": "Grünbrücke Querungsmöglichkeit",
                        "description": "Grünbrückenquerungsmöglichkeit.",
                    },
                },
            },
        ),
    ] = None


class RPWasserschutz(RPFreiraum):
    """
    Grund-, Trink- und Oberflächenwasserschutz.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "2000",
            "2001",
            "2002",
            "3000",
            "4000",
            "5000",
            "6000",
            "7000",
            "9999",
        ]
        | None,
        Field(
            description="Klassifikation des Wasserschutztyps.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Wasserschutzgebiet",
                        "alias": "Wasserschutzgebiet",
                        "description": 'Wasserschutzgebiet.\r\nNach DIN 4046 "Einzugsgebiet oder Teil des Einzugsgebietes einer Wassergewinnungsanlage, das zum Schutz des Wassers Nutzungsbeschränkungen unterliegt."',
                    },
                    "2000": {
                        "name": "Grundwasserschutz",
                        "alias": "Grundwasserschutz",
                        "description": "Grundwasserschutz.",
                    },
                    "2001": {
                        "name": "Grundwasservorkommen",
                        "alias": "Grundwasservorkommen",
                        "description": "Grundwasservorkommen.",
                    },
                    "2002": {
                        "name": "Gewaesserschutz",
                        "alias": "Gewässerschutz",
                        "description": "Einzugsgebiet einer Talsperre.",
                    },
                    "3000": {
                        "name": "Trinkwasserschutz",
                        "alias": "Trinkwasserschutz",
                        "description": "Trinkwasserschutz.",
                    },
                    "4000": {
                        "name": "Trinkwassergewinnung",
                        "alias": "Trinkwassergewinnung",
                        "description": "Trinkwassergewinnung.",
                    },
                    "5000": {
                        "name": "Oberflaechenwasserschutz",
                        "alias": "Oberflächenwasserschutz",
                        "description": "Oberflächenwasserschutz.",
                    },
                    "6000": {
                        "name": "Heilquelle",
                        "alias": "Heilquelle",
                        "description": "Heilquelle.",
                    },
                    "7000": {
                        "name": "Wasserversorgung",
                        "alias": "Wasserversorgung",
                        "description": "Wasserversorgung.",
                    },
                    "9999": {
                        "name": "SonstigerWasserschutz",
                        "alias": "Sonstiger Wasserschutz",
                        "description": "Sonstiger Wasserschutz.",
                    },
                },
                "typename": "RP_WasserschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    zone: Annotated[
        list[Literal["1000", "2000", "3000"]] | None,
        Field(
            description="Wasserschutzzone",
            json_schema_extra={
                "typename": "RP_WasserschutzZonen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Zone1",
                        "alias": "Zone 1",
                        "description": "Zone 1.\r\nFür Grundwasser beinhaltet die Zone 1 den Fassungsbereich. In diesem Bereich und der unmittelbaren Umgebung um die Wassergewinnungsanlage muss jegliche Verunreinigung unterbleiben. Bei Talsperren  beinhaltet die Zone 1 den Stauraum mit Uferzone. Diese soll den Schutz vor unmittelbaren Verunreinigungen und sonstigen Beeinträchtigungen des Talsperrenwassers gewährleisten.\r\nDie Ausdehnung der Zone I sollte im allgemeinen von Brunnen allseitig 10 m, von Quellen in Richtung des ankommenden Grundwassers mindestens 20 m und von Kaarstgrundwasserleitern mindestens 30 m betragen",
                    },
                    "2000": {
                        "name": "Zone2",
                        "alias": "Zone 2",
                        "description": "Zone 2.\r\nDie engere Schutzzone.\r\nDie Zone II reicht von der Grenze der Zone I bis zu einer Linie, von der aus das Grundwasser etwa 50 Tage bis zum Eintreffen in die Trinkwassergewinnungsanlage benötigt. Eine Zone II kann entfallen, wenn nur tiefere, abgedichtete Grundwasserstockwerke oder solche genutzt werden, die von der 50 Tage-Linie bis zur Fassung von undurchlässigen Schichten gegenüber der Mächtigkeit abgedeckt sind.",
                    },
                    "3000": {
                        "name": "Zone3",
                        "alias": "Zone 3",
                        "description": "Zone 3.\r\nDie Weitere Schutzzone.\r\nDie Zone III reicht von der Grenze des Einzugsgebietes bis zur Außengrenze der Zone II. Wenn das Einzugsgebiet weiter als 2 km reicht, so kann eine Aufgliederung in eine Zone III A bis etwa 2 km Entfernung ab Fassung und eine Zone III B etwa 2 km bis zur Grenze des Einzugsgebietes zweckmäßig sein.",
                    },
                },
            },
        ),
    ] = None


class SOBaubeschraenkung(SOGeometrieobjekt):
    """
    Bereich, in denen Verbote oder Beschränkungen für die Errichtung baulicher Anlagen bestehen
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "2000", "3000", "9999"] | None,
        Field(
            description="Klassifizierung des Bauverbots bzw. der Baubeschränkung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Bauverbotszone",
                        "alias": "Bauverbotszone",
                        "description": "Bereich, in denen keine baulichen Anlagen errichtet werden dürfen",
                    },
                    "2000": {
                        "name": "Baubeschraenkungszone",
                        "alias": "Baubeschränkungszone",
                        "description": "Bereich, in denen Bau-Beschränkungen bestehen.",
                    },
                    "3000": {
                        "name": "Waldabstand",
                        "alias": "Waldabstand",
                        "description": "Bereich um Wälder, Moore und Heiden, in dem aus Brandschutzgründen keinen baulichen Anlagen errichtet werden dürfen.",
                    },
                    "9999": {
                        "name": "SonstigeBeschraenkung",
                        "alias": "Sonstige Beschränkung",
                        "description": "Bereich mit sonstigen Baubeschränkungen.",
                    },
                },
                "typename": "SO_KlassifizBaubeschraenkung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Detaillierte Klassifizierung des Bauverbots bzw. der Baubeschränkung über eine Codeliste",
            json_schema_extra={
                "typename": "SO_DetailKlassifizBaubeschraenkung",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    rechtlicheGrundlage: Annotated[
        Literal["1000", "2000", "9999"] | None,
        Field(
            description="Rechtliche Grundlage des Bauverbots bzw. der Baubeschränkung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Luftverkehrsrecht",
                        "alias": "Luftverkehrsrecht",
                        "description": "Luftverkehrsrecht",
                    },
                    "2000": {
                        "name": "Strassenverkehrsrecht",
                        "alias": "Straßenverkehrsrecht",
                        "description": "Strassenverkehrsrecht",
                    },
                    "9999": {
                        "name": "SonstigesRecht",
                        "alias": "Sonstiges Recht",
                        "description": "Sonstige Rechtsverordnung",
                    },
                },
                "typename": "SO_RechtlicheGrundlageBaubeschraenkung",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOBodenschutzrecht(SOGeometrieobjekt):
    """
    Festlegung nach Bodenschutzrecht.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "2000", "20000", "20001", "20002"] | None,
        Field(
            description="Klassifizierung der Festlegung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "SchaedlicheBodenveraenderung",
                        "alias": "Schädliche Bodenveränderung",
                        "description": "Schädliche Bodenveränderung",
                    },
                    "2000": {
                        "name": "Altlast",
                        "alias": "Altlast",
                        "description": "Altlast",
                    },
                    "20000": {
                        "name": "Altablagerung",
                        "alias": "Altablagerung",
                        "description": "Altablagerung",
                    },
                    "20001": {
                        "name": "Altstandort",
                        "alias": "Altstandort",
                        "description": "Altstandort",
                    },
                    "20002": {
                        "name": "AltstandortAufAltablagerung",
                        "alias": "Altstandort auf Altablagerung",
                        "description": "Altstandort einer Altablagerung",
                    },
                },
                "typename": "SO_KlassifizNachBodenschutzrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachBodenschutzrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    istVerdachtsflaeche: Annotated[
        bool | None,
        Field(
            description="Angabe ob es sich um eine Verdachtsfläche handelt.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung. bzw. Nummer in einem Altlast-Kataster",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SODenkmalschutzrecht(SOGeometrieobjekt):
    """
    Festlegung nach Denkmalschutzrecht
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "1100", "1200", "1300", "1400", "1500", "1600", "9999"] | None,
        Field(
            description="Rechtliche Klassifizierung der Festlegung",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "DenkmalschutzEnsemble",
                        "alias": "Denkmalschutz-Ensemble",
                        "description": "Denkmalschutz Ensemble",
                    },
                    "1100": {
                        "name": "DenkmalschutzEinzelanlage",
                        "alias": "Denkmalschutz-Einzelanlage",
                        "description": "Denkmalschutz Einzelanlage",
                    },
                    "1200": {
                        "name": "Grabungsschutzgebiet",
                        "alias": "Grabungsschutzgebiet",
                        "description": "Grabungsschutzgebiet",
                    },
                    "1300": {
                        "name": "PufferzoneWeltkulturerbeEnger",
                        "alias": "Pufferzone Weltkulturerbe enger",
                        "description": "Engere Pufferzone um eine Welterbestätte",
                    },
                    "1400": {
                        "name": "PufferzoneWeltkulturerbeWeiter",
                        "alias": "Pufferzone Weltkulturerbe weiter",
                        "description": "Weitere Pufferzone um eine Welterbestätte",
                    },
                    "1500": {
                        "name": "ArcheologischesDenkmal",
                        "alias": "Archeologisches Denkmal",
                        "description": "Archäologisches Denkmal",
                    },
                    "1600": {
                        "name": "Bodendenkmal",
                        "alias": "Bodendenkmal",
                        "description": "Bodendenkmal",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstige Klassifizierung nach Denkmalschutzrecht.",
                    },
                },
                "typename": "SO_KlassifizNachDenkmalschutzrecht",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere rechtliche Klassifizierung der Festlegung.",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachDenkmalschutzrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    weltkulturerbe: Annotated[
        bool | None,
        Field(
            description="Gibt an, ob das geschützte Objekt zum Weltkulturerbe gehört.",
            json_schema_extra={
                "typename": "Boolean",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = False
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung.",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOForstrecht(SOGeometrieobjekt):
    """
    Festlegung nach Forstrecht
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "12000",
            "12001",
            "2000",
            "20000",
            "20001",
            "3000",
            "9999",
        ]
        | None,
        Field(
            description="Klassifizierung der Eigentumsart des Waldes.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "OeffentlicherWald",
                        "alias": "Öffentlicher Wald",
                        "description": "Öffentlicher Wald allgemein",
                    },
                    "1100": {
                        "name": "Staatswald",
                        "alias": "Staatswald",
                        "description": "Staatswald",
                    },
                    "1200": {
                        "name": "Koerperschaftswald",
                        "alias": "Körperschaftswald",
                        "description": "Körperschaftswald",
                    },
                    "12000": {
                        "name": "Kommunalwald",
                        "alias": "Kommunalwald",
                        "description": "Kommunalwald",
                    },
                    "12001": {
                        "name": "Stiftungswald",
                        "alias": "Stiftungswald",
                        "description": "Stiftungswald",
                    },
                    "2000": {
                        "name": "Privatwald",
                        "alias": "Privatwald",
                        "description": "Privatwald allgemein",
                    },
                    "20000": {
                        "name": "Gemeinschaftswald",
                        "alias": "Gemeinschaftswald",
                        "description": "Gemeinschaftswald",
                    },
                    "20001": {
                        "name": "Genossenschaftswald",
                        "alias": "Genossenschaftswald",
                        "description": "Genossenschaftswald",
                    },
                    "3000": {
                        "name": "Kirchenwald",
                        "alias": "Kirchenwald",
                        "description": "Kirchenwald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstiger Wald",
                    },
                },
                "typename": "XP_EigentumsartWald",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Klassifizierung der Eigentumsart des Waldes",
            json_schema_extra={
                "typename": "SO_DetailKlassifizNachForstrecht",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    funktion: Annotated[
        list[
            Literal[
                "1000",
                "10000",
                "1200",
                "1400",
                "1600",
                "16000",
                "16001",
                "16002",
                "16003",
                "16004",
                "1700",
                "1800",
                "1900",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifizierung der Fukktion des Waldes",
            json_schema_extra={
                "typename": "XP_ZweckbestimmungWald",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Naturwald",
                        "alias": "Naturwald",
                        "description": "Naturwald",
                    },
                    "10000": {
                        "name": "Waldschutzgebiet",
                        "alias": "Waldschutzgebiet",
                        "description": "Waldschutzgebiet",
                    },
                    "1200": {
                        "name": "Nutzwald",
                        "alias": "Nutzwald",
                        "description": "Nutzwald",
                    },
                    "1400": {
                        "name": "Erholungswald",
                        "alias": "Erholungswald",
                        "description": "Erholungswald",
                    },
                    "1600": {
                        "name": "Schutzwald",
                        "alias": "Schutzwald",
                        "description": "Schutzwald",
                    },
                    "16000": {
                        "name": "Bodenschutzwald",
                        "alias": "Bodenschutzwald",
                        "description": "Bodenschutzwald",
                    },
                    "16001": {
                        "name": "Biotopschutzwald",
                        "alias": "Biotopschutzwald",
                        "description": "Biotopschutzwald",
                    },
                    "16002": {
                        "name": "NaturnaherWald",
                        "alias": "Naturnaher Wald",
                        "description": "Naturnaher Wald",
                    },
                    "16003": {
                        "name": "SchutzwaldSchaedlicheUmwelteinwirkungen",
                        "alias": "Schutzwald schädliche Umwelteinwirkungen",
                        "description": "Wald zum Schutz vor schädlichen Umwelteinwirkungen",
                    },
                    "16004": {
                        "name": "Schonwald",
                        "alias": "Schonwald",
                        "description": "Schonwald",
                    },
                    "1700": {
                        "name": "Bannwald",
                        "alias": "Bannwald",
                        "description": "Bannwald",
                    },
                    "1800": {
                        "name": "FlaecheForstwirtschaft",
                        "alias": "Fläche Forstwirtschaft",
                        "description": "Fläche für die Forstwirtschaft.",
                    },
                    "1900": {
                        "name": "ImmissionsgeschaedigterWald",
                        "alias": "Immissionsgeschädigter Wald",
                        "description": "Immissionsgeschädigter Wald",
                    },
                    "9999": {
                        "name": "Sonstiges",
                        "alias": "Sonstiges",
                        "description": "Sonstigr Wald",
                    },
                },
            },
        ),
    ] = None
    betreten: Annotated[
        list[Literal["1000", "2000", "3000", "4000"]] | None,
        Field(
            description="Festlegung zusätzlicher, normalerweise nicht-gestatteter Aktivitäten, die in dem Wald ausgeführt werden dürfen, nach §14 Abs. 2 Bundeswaldgesetz.",
            json_schema_extra={
                "typename": "XP_WaldbetretungTyp",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Radfahren",
                        "alias": "Radfahren",
                        "description": "Radfahren",
                    },
                    "2000": {
                        "name": "Reiten",
                        "alias": "Reiten",
                        "description": "Reiten",
                    },
                    "3000": {
                        "name": "Fahren",
                        "alias": "Fahren",
                        "description": "Fahren",
                    },
                    "4000": {
                        "name": "Hundesport",
                        "alias": "Hundesport",
                        "description": "Hundesport",
                    },
                },
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Festlegung",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOGelaendemorphologie(SOGeometrieobjekt):
    """
    Das Landschaftsbild prägende Geländestruktur
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    artDerFestlegung: Annotated[
        Literal["1000", "1100", "1200", "9999"] | None,
        Field(
            description="Klassifikation der Geländestruktur",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Terassenkante",
                        "alias": "Terassenkante",
                        "description": "Terrassenkante",
                    },
                    "1100": {
                        "name": "Rinne",
                        "alias": "Rinne",
                        "description": "Trockengefallene Gewässerrinne",
                    },
                    "1200": {
                        "name": "EhemMaeander",
                        "alias": "Ehemaliger Mäander",
                        "description": "Ehemalige Fluss- und Bachmäander",
                    },
                    "9999": {
                        "name": "SonstigeStruktur",
                        "alias": "Sonstige Struktur",
                        "description": "Sonstige Struktur der Geländemorphologie",
                    },
                },
                "typename": "SO_KlassifizGelaendemorphologie",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    detailArtDerFestlegung: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte detailliertere Klassifikation der Geländestruktur",
            json_schema_extra={
                "typename": "SO_DetailKlassifizGelaendemorphologie",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    name: Annotated[
        str | None,
        Field(
            description="Informelle Bezeichnung der Struktur",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    nummer: Annotated[
        str | None,
        Field(
            description="Amtliche Bezeichnung / Kennziffer der Struktur",
            json_schema_extra={
                "typename": "CharacterString",
                "stereotype": "BasicType",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class SOGrenze(SOLinienobjekt):
    """
    Grenze einer Verwaltungseinheit oder sonstige Grenze in raumbezogenen Plänen.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "1100",
            "1200",
            "1250",
            "1300",
            "1400",
            "1450",
            "1500",
            "1510",
            "1550",
            "1600",
            "2000",
            "2100",
            "9999",
        ]
        | None,
        Field(
            description="Typ der Grenze",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Bundesgrenze",
                        "alias": "Bundesgrenze",
                        "description": "Bundesgrenze",
                    },
                    "1100": {
                        "name": "Landesgrenze",
                        "alias": "Landesgrenze",
                        "description": "Grenze eines Bundeslandes",
                    },
                    "1200": {
                        "name": "Regierungsbezirksgrenze",
                        "alias": "Regierungsbezirksgrenze",
                        "description": "Grenze eines Regierungsbezirks",
                    },
                    "1250": {
                        "name": "Bezirksgrenze",
                        "alias": "Bezirksgrenze",
                        "description": "Grenze eines Bezirks.",
                    },
                    "1300": {
                        "name": "Kreisgrenze",
                        "alias": "Kreisgrenze",
                        "description": "Grenze eines Kreises.",
                    },
                    "1400": {
                        "name": "Gemeindegrenze",
                        "alias": "Gemeindegrenze",
                        "description": "Grenze einer Gemeinde.",
                    },
                    "1450": {
                        "name": "Verbandsgemeindegrenze",
                        "alias": "Verbandsgemeindegrenze",
                        "description": "Grenze einer Verbandsgemeinde",
                    },
                    "1500": {
                        "name": "Samtgemeindegrenze",
                        "alias": "Samtgemeindegrenze",
                        "description": "Grenze einer Samtgemeinde",
                    },
                    "1510": {
                        "name": "Mitgliedsgemeindegrenze",
                        "alias": "Mitgliedsgemeindegrenze",
                        "description": "Mitgliedsgemeindegrenze",
                    },
                    "1550": {
                        "name": "Amtsgrenze",
                        "alias": "Amtsgrenze",
                        "description": "Amtsgrenze",
                    },
                    "1600": {
                        "name": "Stadtteilgrenze",
                        "alias": "Stadtteilgrenze",
                        "description": "Stadtteilgrenze",
                    },
                    "2000": {
                        "name": "VorgeschlageneGrundstuecksgrenze",
                        "alias": "Vorgeschlagene Grundstücksgrenze",
                        "description": "Hinweis auf eine vorgeschlagene Grundstücksgrenze im BPlan.",
                    },
                    "2100": {
                        "name": "GrenzeBestehenderBebauungsplan",
                        "alias": "Grenze bestehender Bebauungsplan",
                        "description": "Hinweis auf den Geltungsbereich eines bestehenden BPlan.",
                    },
                    "9999": {
                        "name": "SonstGrenze",
                        "alias": "Sonstige Grenze",
                        "description": "Sonstige Grenze",
                    },
                },
                "typename": "XP_GrenzeTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
    sonstTyp: Annotated[
        AnyUrl | None,
        Field(
            description="Über eine Codeliste definierte weitere Grenztypen, wenn das Attribut typ den Wert 9999 hat.",
            json_schema_extra={
                "typename": "SO_SonstGrenzeTypen",
                "stereotype": "Codelist",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPBodenschutz(RPFreiraum):
    """
    Maßnahmen, die zum Schutz von Böden und Bodenfunktionen (auch vorsorglich) unter dem Aspekt des Natur- und Umweltschutzes getroffen werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000", "4000", "9999"] | None,
        Field(
            description="Klassifikation von Bodenschutztypen.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "BeseitigungErheblicherBodenbelastung",
                        "alias": "Beseitigung erheblicher Bodenbelastung",
                        "description": "Beseitigung von erheblicher Bodenbelastung.",
                    },
                    "2000": {
                        "name": "SicherungSanierungAltlasten",
                        "alias": "Sicherung und Sanierung Altlasten",
                        "description": "Sicherung und/oder Sanierung von Altlasten.",
                    },
                    "3000": {
                        "name": "Erosionsschutz",
                        "alias": "Erosionsschutz",
                        "description": "Erosionsschutz.",
                    },
                    "4000": {
                        "name": "Torferhalt",
                        "alias": "Torferhalt",
                        "description": "Bodenschutz zum Torferhalt dient dem Erhalt von vorhandenen Torfkörpern als natürlichen Speicher von Kohlenstoffen, als Beitrag zum Klimaschutz.",
                    },
                    "9999": {
                        "name": "SonstigerBodenschutz",
                        "alias": "Sonstiger Bodenschutz",
                        "description": "Sonstiger Bodenschutz.",
                    },
                },
                "typename": "RP_BodenschutzTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPErholung(RPFreiraum):
    """
    Freizeit, Erholung und Tourismus.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typErholung: Annotated[
        list[
            Literal[
                "1000",
                "2000",
                "2001",
                "3000",
                "3001",
                "4000",
                "5000",
                "5001",
                "6000",
                "7000",
                "9999",
            ]
        ]
        | None,
        Field(
            description="Klassifikation von Erholungstypen.",
            json_schema_extra={
                "typename": "RP_ErholungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Erholung",
                        "alias": "Erholung",
                        "description": "Erholung.",
                    },
                    "2000": {
                        "name": "RuhigeErholungInNaturUndLandschaft",
                        "alias": "Ruhige Erholung in Natur und Landschaft",
                        "description": "Ruhige Erholung in Natur und Landschaft.",
                    },
                    "2001": {
                        "name": "LandschaftsbezogeneErholung",
                        "alias": "Landschaftsbezogene Erholung",
                        "description": "Landschaftsbezogene Erholung",
                    },
                    "3000": {
                        "name": "ErholungMitStarkerInanspruchnahmeDurchBevoelkerung",
                        "alias": "Erholung mit starker Inanspruchnahme durch Bevölkerung",
                        "description": "Erholung mit starker Inanspruchnahme durch die Bevölkerung.",
                    },
                    "3001": {
                        "name": "InfrastrukturelleErholung",
                        "alias": "Infrastrukturelle Erholung",
                        "description": "Infrastrukturelle Erholung",
                    },
                    "4000": {
                        "name": "Erholungswald",
                        "alias": "Erholungswald",
                        "description": 'Erholungswald sind Waldgebiete, oft im Umfeld von Ballungszentren, die hauptsächlich der Erholung der Bevölkerung dienen (gegenüber forstwirtschaftlicher Nutzung oder Naturschutz). Nach § 13 Bundeswaldgesetz (1) kann Wald "zu Erholungswald erklärt werden, wenn es das Wohl der Allgemeinheit erfordert, Waldflächen für Zwecke der Erholung zu schützen, zu pflegen oder zu gestalten".',
                    },
                    "5000": {
                        "name": "Freizeitanlage",
                        "alias": "Freizeitanlage",
                        "description": "Freizeitanlage.",
                    },
                    "5001": {
                        "name": "Ferieneinrichtung",
                        "alias": "Ferieneinrichtung",
                        "description": "Ferieneinrichtung",
                    },
                    "6000": {
                        "name": "ErholungslandschaftAlpen",
                        "alias": "Erholungslandschaft Alpen",
                        "description": "Erholungslandschaft in den Alpen.",
                    },
                    "7000": {
                        "name": "Kureinrichtung",
                        "alias": "Kureinrichtung",
                        "description": "Kureinrichtung.",
                    },
                    "9999": {
                        "name": "SonstigeErholung",
                        "alias": "Sonstige Erholung",
                        "description": "Sonstige Erholung.",
                    },
                },
            },
        ),
    ] = None
    typTourismus: Annotated[
        list[Literal["1000", "2000", "9999"]] | None,
        Field(
            description="Klassifikation von Tourismustypen.",
            json_schema_extra={
                "typename": "RP_TourismusTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..*",
                "enumDescription": {
                    "1000": {
                        "name": "Tourismus",
                        "alias": "Tourismus",
                        "description": "Tourismus.",
                    },
                    "2000": {
                        "name": "Kuestenraum",
                        "alias": "Küstenraum",
                        "description": "Tourismus im Küstenraum.",
                    },
                    "9999": {
                        "name": "SonstigerTourismus",
                        "alias": "Sonstiger Tourismus",
                        "description": "Sonstiger Tourismus.",
                    },
                },
            },
        ),
    ] = None
    besondererTyp: Annotated[
        Literal["1000", "2000", "3000"] | None,
        Field(
            description="Klassifikation von besonderen Typen für Tourismus und/oder Erholung.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Entwicklungsgebiet",
                        "alias": "Entwicklungsgebiet",
                        "description": "Entwicklungsgebiet.",
                    },
                    "2000": {
                        "name": "Kernbereich",
                        "alias": "Kernbereich",
                        "description": "Kernbereich.",
                    },
                    "3000": {
                        "name": "BesondereEntwicklungsaufgabe",
                        "alias": "Besondere Entwicklungsaufgabe",
                        "description": "Besondere Entwicklungsaufgabe von Tourismus und/oder Erholung.",
                    },
                },
                "typename": "RP_BesondereTourismusErholungTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPErneuerbareEnergie(RPFreiraum):
    """
    Erneuerbare Energie inklusive Windenergienutzung.
    Erneuerbare Energien sind Energiequellen, die keine endlichen Rohstoffe verbrauchen, sondern natürliche, sich erneuernde Kreisläufe anzapfen (Sonne, Wind, Wasserkraft, Bioenergie). Meist werden auch Gezeiten, die Meeresströmung und die Erdwärme dazugezählt.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal["1000", "2000", "3000", "4000", "5000", "9999"] | None,
        Field(
            description="Klassifikation von Typen Erneuerbarer Energie.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {
                        "name": "Windenergie",
                        "alias": "Windenergie",
                        "description": "Windenergie.",
                    },
                    "2000": {
                        "name": "Solarenergie",
                        "alias": "Solarenergie",
                        "description": "Solarenergie.",
                    },
                    "3000": {
                        "name": "Geothermie",
                        "alias": "Geothermie",
                        "description": "Geothermie.",
                    },
                    "4000": {
                        "name": "Biomasse",
                        "alias": "Biomasse",
                        "description": "Biomasse.",
                    },
                    "5000": {
                        "name": "Wasserkraft",
                        "alias": "Wasserkraft",
                        "description": "Wasserkraft",
                    },
                    "9999": {
                        "name": "SonstigeErneuerbareEnergie",
                        "alias": "Sonstige Erneuerbare Energie",
                        "description": "Sonstige Erneuerbare Energie.",
                    },
                },
                "typename": "RP_ErneuerbareEnergieTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None


class RPForstwirtschaft(RPFreiraum):
    """
    Forstwirtschaft ist die zielgerichtete Bewirtschaftung von Wäldern.
    Die natürlichen Abläufe in den Waldökosystemen werden dabei so gestaltet und gesteuert, dass sie einen möglichst großen Beitrag zur Erfüllung von Leistungen erbringen, die von den Waldeigentümern und der Gesellschaft gewünscht werden.
    """

    abstract: ClassVar[bool] = False
    namespace: ClassVar[str] = "http://www.xplanung.de/xplangml/6/0"
    typ: Annotated[
        Literal[
            "1000",
            "1001",
            "1002",
            "1100",
            "2000",
            "2001",
            "2002",
            "3000",
            "3001",
            "4000",
            "9999",
        ]
        | None,
        Field(
            description="Klassifikation von Forstwirtschaftstypen und Wäldern.",
            json_schema_extra={
                "enumDescription": {
                    "1000": {"name": "Wald", "alias": "Wald", "description": "Wald."},
                    "1001": {
                        "name": "Bannwald",
                        "alias": "Bannwald",
                        "description": 'Bannwald.\r\nNach §32 (2) Baden-Württemberg "ein sich selbst überlassenes Waldreservat. Pflegemaßnahmen sind nicht erlaubt; anfallendes Holz darf nicht entnommen werden. [...] Fußwege sind zulässig."\r\nNach $11 (1) BayWaldG Bayern " Wald, der auf Grund seiner Lage und seiner flächenmäßigen Ausdehnung vor allem in Verdichtungsräumen und waldarmen Bereichen unersetzlich ist, und deshalb in seiner Flächensubstanz erhalten werden muss und welchem eine außergewöhnliche Bedeutung für das Klima, den Wasserhaushalt oder die Luftreinigung zukommt.\r\nNach §13 (2) ForstG Hessen ein Wald, der "in seiner Flächensubstanz in besonderem Maße schützenswert ist".\r\nIn anderen Ländern ist ein Bannwald ggf. abweichend definiert.',
                    },
                    "1002": {
                        "name": "Schonwald",
                        "alias": "Schonwald",
                        "description": 'Schonwald.\r\nNach §32 (3) Baden-Württemberg "ein Waldreservat, in dem eine bestimmte Waldgesellschaft mit ihren Tier- und Pflanzenarten, ein bestimmter Bestandsaufbau oder ein bestimmter Waldbiotop zu erhalten, zu entwickeln oder zu erneuern ist. Die Forstbehörde legt PFlegemaßnahmen mti Zustimmung des Waldbesitzers fest." In anderen Ländern ist ein Schonwald ggf. abweichend definiert.',
                    },
                    "1100": {
                        "name": "Forstwirtschaft",
                        "alias": "Forstwirtschaft",
                        "description": "Forstwirtschaft",
                    },
                    "2000": {
                        "name": "Waldmehrung",
                        "alias": "Waldmehrung",
                        "description": "Waldmehrung.",
                    },
                    "2001": {
                        "name": "WaldmehrungErholung",
                        "alias": "Waldmehrung Erholung",
                        "description": "Waldmehrung für Erholung.",
                    },
                    "2002": {
                        "name": "VergroesserungDesWaldanteils",
                        "alias": "Vergrößerung des Waldanteils",
                        "description": "Vergrößerung des Waldanteils.",
                    },
                    "3000": {
                        "name": "Waldschutz",
                        "alias": "Waldschutz",
                        "description": "Waldschutz.",
                    },
                    "3001": {
                        "name": "BesondereSchutzfunktionDesWaldes",
                        "alias": "Besondere Schutzfunktion des Waldes",
                        "description": "Besondere Schutzfunktion des Waldes.",
                    },
                    "4000": {
                        "name": "VonAufforstungFreizuhalten",
                        "alias": "Von Aufforstung freizuhalten",
                        "description": "Von Aufforstung freizuhaltendes Gebiet.",
                    },
                    "9999": {
                        "name": "SonstigeForstwirtschaft",
                        "alias": "Sonstige Forstwirtschaft",
                        "description": "Sonstige Forstwirtschaft.",
                    },
                },
                "typename": "RP_ForstwirtschaftTypen",
                "stereotype": "Enumeration",
                "multiplicity": "0..1",
            },
        ),
    ] = None
