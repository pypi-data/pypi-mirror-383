[build-system]
requires = ["setuptools", ]
build-backend = "setuptools.build_meta"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PROJECT CONFIGURATION (GENERAL)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[project]
name = "gseqnmf"
version = "0.0.2"
description = "DESCRIPTION"
readme = "README.md"
requires-python = ">=3.12, <=4.0"
license = {file = "LICENSE"}
keywords = [
    "KEYWORD"
]
authors = [
  {name = "Darik A. O'Neil"}
]
maintainers = [
    {name = "Darik A. O'Neil"}
]
classifiers = [
    "Programming Language :: Python",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PACKAGE DEPENDENCIES
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


dependencies = [
    "numba>=0.62.1",
    "numpy>=2.3.3",
    "scikit-learn>=1.7.2",
    "setuptools>=80.9.0",
    "tqdm>=4.67.1",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PACKAGE URLS
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[project.urls]
documentation = "https://github.com/darikoneil/gseqNMF"
repository = "https://github.com/darikoneil/gseqNMF"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// OPTIONAL DEPENDENCIES (INCLUDING TEMPLATE DEPENDENCIES)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[project.optional-dependencies]
cuda12 = [
    "cupy-cuda12x",
]
test = [
    "importlib-metadata",
    "polars[numpy,pyarrow]",
    "pytest",
    "pytest-sugar",
    "pytest-clarity",
    "pytest-mock",
    "toml",
    "tomli-w"
]
lint = [
    "flake8",
    "flake8-annotations-complexity",
    "flake8-class-attributes-order",
    "flake8-dunder-all",
    "flake8-html",
    "ruff"
]
cov = [
    "coverage[toml]",
    "coveralls",
    "toml",
    "tomli-w"
]
docs = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "autodoc_pydantic",
    "sphinx-rtd-theme",
    "jinja2",
]
vis = [
    "cmocean",
    "matplotlib",
    "PyQt6",
]
dev = [
    #"gseqNMF[cuda12]",
    "gseqNMF[test]",
    "gseqNMF[lint]",
    "gseqNMF[cov]",
    "gseqNMF[docs]",
    "gseqNMF[prod]",
    "gseqNMF[vis]",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// BUILD CONFIGURATION (SETUPTOOLS)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.setuptools]
packages = [
    "gseqnmf",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// TESTING CONFIGURATION (PYTEST)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-s",
    "--color=yes",
    "-vv",
    "--diff-width=120",
]
console_output_style = "progress"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// COVERAGE CONFIGURATION (COVERAGE)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = [
    "*/tests/*",
     "*/*JetBrains*/*",  # Exclude JetBrains specific files
    "*/*PyCharm*Professional*/*",
]
dynamic_context = "test_function"

[tool.coverage.report]
fail_under = 75
exclude_also = [
    "def __repr__",
    "def __name__",
    "def __del__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "except ImportError",
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    "@(abc\\.)?abstractclassmethod",
    "@(abc\\.)?abstractstaticmethod"
]

[tool.coverage.json]
pretty_print = true

[tool.coverage.html]
show_contexts = true

#///////////////////////////////////////////////////////////////////////////////////////
#// GENERAL RUFF CONFIUGRATION
#///////////////////////////////////////////////////////////////////////////////////////

[tool.ruff]
exclude = [
    "*/Scratches/*",
    "*/.idea/*",
    "*/scripts/*",
    "*/.git/*",
    "*/.github/*",
    "*/.vscode/*",
    "*/__pycache__/*",
    "*/.pytest_cache/*",
    "*/*.egg-info/*",
    "*/build/*",
    "*/dist/*",
    "*/.mypy_cache/*",
    "*/.tox/*",
    "*coverage*",
    "*/.cache/*",
    "*/docs/*",
    "*/venv/*",
    "*.gitignore",
    "README.md",
    "LICENSE",
    ".flake8",
    "*/linting/*",
    ".readthedocs.yaml",
    "*/Scratches and Consoles/*",
    "*/External Libraries/*",
    "*/assets/*"
]
line-length = 88 # Black Compatibility
indent-width = 4 # Black Compatibility
output-format = "json"

#///////////////////////////////////////////////////////////////////////////////////////
#// LINTING CONFIGURATION (RUFF)
#///////////////////////////////////////////////////////////////////////////////////////


[tool.ruff.lint]
select = ["ALL", ]
ignore = [
    # /////////////////////////////////////////////////////////
    # IGNORE THESE ENTIRE MODULES
    # /////////////////////////////////////////////////////////
    "C90", # mccabe complexity
    "D", # pydocstyle
    "DJ",  # django
    "EXE", # flake8-executable
    "PD", # pandas
    "PL", # pylint
    "PLR", # pylint refactor is super opinionated
    "T10", # debugger
    "TID", # flake8-tidy-imports
    # /////////////////////////////////////////////////////////
    # IGNORE THESE SPECIFIC RULES
    # /////////////////////////////////////////////////////////
    "ANN204",
    "COM812",
    "ANN401",
    "ANN002",
    "ANN003",
    "E203",
    "E501",
    "E701",
    "COM812",
    "COM818",
    'ERA001', 'T201', # Code comments
    'RET503', # No explicit return None
    'FIX002', # Fixme comments
    'FIX004', # Fixme comments
    "TD002",
    "TD003",
    "TRY003", # external messages in exceptions are too verbose
    "S101",
    "FBT001", # boolean trap is not a trap...
    "FBT002", # boolean trap is not a trap...
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-boolean-trap]
extend-allowed-calls = ["pydantic.Field", ]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare the default aliases.

#///////////////////////////////////////////////////////////////////////////////////////
#// FORMATTING CONFIGURATION (RUFF)
#///////////////////////////////////////////////////////////////////////////////////////


[tool.ruff.format]
quote-style = "double"  # Black Compatibility
indent-style = "space"  # Black Compatibility
skip-magic-trailing-comma = false  # Black Compatibility
line-ending = "auto"  # Black Compatibility
docstring-code-format = true  # Auto-formatting of code examples in docstrings
docstring-code-line-length = "dynamic"  # Line length for code examples in docstrings

[tool.uv.sources]
gseqNMF = { workspace = true }

[dependency-groups]
dev = [
    "gseqNMF[dev]",
]
