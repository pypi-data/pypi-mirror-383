"""
Type stubs for cryptographic digest definitions and utility functions for
Merkle trees, nodes and proofs.

This module provides common cryptographic
hash algorithms (SHA, SHA3/Keccak, BLAKE2) and helper
functions to create digest objects by name.
"""

from __future__ import annotations

from typing import Optional
from typing_extensions import override
from collections.abc import Set

from mrkle.crypto.typing import Digest

# SHA-1
class Sha1:
    """SHA-1 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Sha1: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# SHA-2 (224)
class Sha224:
    """SHA-224 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Sha224: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# SHA-2 (256)
class Sha256:
    """SHA-256 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Sha256: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# SHA-2 (384)
class Sha384:
    """SHA-384 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Sha384: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# SHA-2 (512)
class Sha512:
    """SHA-512 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Sha512: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Keccak (224)
class Keccak224:
    """Keccak-224 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Keccak224: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Keccak (256)
class Keccak256:
    """Keccak-256 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Keccak256: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Keccak (384)
class Keccak384:
    """Keccak-384 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Keccak384: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Keccak (512)
class Keccak512:
    """Keccak-512 digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Keccak512: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Blake2s
class Blake2s:
    """BLAKE2s digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Blake2s: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

# Blake2b
class Blake2b:
    """BLAKE2b digest class."""

    def __init__(self) -> None: ...
    @staticmethod
    def new_with_prefix(data: bytes) -> Blake2b: ...
    def update(self, data: bytes) -> None: ...
    def finalize(self) -> bytes: ...
    def finalize_reset(self) -> bytes: ...
    def reset(self) -> None: ...
    @staticmethod
    def digest(data: bytes) -> bytes: ...
    @staticmethod
    def output_size() -> int: ...
    @staticmethod
    def name() -> str: ...
    @override
    def __repr__(self) -> str: ...
    @override
    def __str__(self) -> str: ...
    @override
    def __format__(self, spec: str) -> str: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...

def sha1(data: Optional[bytes] = None) -> Digest:
    """Create a SHA-1 hash object."""
    ...

def sha224(data: Optional[bytes] = None) -> Digest:
    """Create a SHA-224 hash object."""
    ...

def sha256(data: Optional[bytes] = None) -> Digest:
    """Create a SHA-256 hash object."""
    ...

def sha384(data: Optional[bytes] = None) -> Digest:
    """Create a SHA-384 hash object."""
    ...

def sha512(data: Optional[bytes] = None) -> Digest:
    """Create a SHA-512 hash object."""
    ...

def keccak224(data: Optional[bytes] = None) -> Digest:
    """Create a Keccak-224 hash object."""
    ...

def keccak256(data: Optional[bytes] = None) -> Digest:
    """Create a Keccak-256 hash object."""
    ...

def keccak384(data: Optional[bytes] = None) -> Digest:
    """Create a Keccak-384 hash object."""
    ...

def keccak512(data: Optional[bytes] = None) -> Digest:
    """Create a Keccak-512 hash object."""
    ...

def blake2b(data: Optional[bytes] = None) -> Digest:
    """Create a BLAKE2b hash object."""
    ...

def blake2s(data: Optional[bytes] = None) -> Digest:
    """Create a BLAKE2s hash object."""
    ...

def new(name: str, *, data: Optional[bytes] = None) -> Digest:
    """Create a new digest object by algorithm name.

    Args:
        name (str): The name of the digest algorithm (case-insensitive).
        data (bytes, optional): Initial data to update the digest with.

    Returns:
        Digest: The corresponding digest object.

    Raises:
        ValueError: If the algorithm name is not supported.
    """
    ...

def algorithms_guaranteed() -> Set[str]:
    """Return the set of digest algorithm names guaranteed to be available.

    Returns:
        Set[str]: A set of algorithm names as strings.
    """
    ...

def algorithms_available() -> Set[str]:
    """Return the set of digest algorithms currently available.

    Returns:
        Set[str]: A set of available algorithm names as strings.
    """
    ...
