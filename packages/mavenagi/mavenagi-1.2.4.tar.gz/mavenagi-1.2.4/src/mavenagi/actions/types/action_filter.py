# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...commons.types.llm_inclusion_status import LlmInclusionStatus
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class ActionFilter(UniversalBaseModel):
    instructions: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter by instructions
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Filter by action name
    """

    llm_inclusion_statuses: typing_extensions.Annotated[
        typing.Optional[typing.List[LlmInclusionStatus]], FieldMetadata(alias="llmInclusionStatuses")
    ] = pydantic.Field(default=None)
    """
    Filter by LLM inclusion status
    """

    app_ids: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="appIds")] = (
        pydantic.Field(default=None)
    )
    """
    Filter by app IDs
    """

    user_interaction_required: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="userInteractionRequired")
    ] = pydantic.Field(default=None)
    """
    Filter by user interaction required
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
