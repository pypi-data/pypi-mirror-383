"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .publishview import PublishView, PublishViewTypedDict
from .tagcategory import TagCategory, TagCategoryTypedDict
from egain_api_python.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PersonalizationAccessTagsTypedDict(TypedDict):
    tag_category: NotRequired[List[TagCategoryTypedDict]]
    r"""An array of tag categories. Note that the total number of tag categories cannot exceed 20."""


class PersonalizationAccessTags(BaseModel):
    tag_category: Annotated[
        Optional[List[TagCategory]], pydantic.Field(alias="tagCategory")
    ] = None
    r"""An array of tag categories. Note that the total number of tag categories cannot exceed 20."""


class FiltersTypedDict(TypedDict):
    tag_category: NotRequired[List[TagCategoryTypedDict]]
    r"""An array of tag categories. Note that the total number of tag categories cannot exceed 20."""


class Filters(BaseModel):
    tag_category: Annotated[
        Optional[List[TagCategory]], pydantic.Field(alias="tagCategory")
    ] = None
    r"""An array of tag categories. Note that the total number of tag categories cannot exceed 20."""


class PublishViewsTypedDict(TypedDict):
    publish_view: NotRequired[List[PublishViewTypedDict]]
    r"""Publish views allow authors to tailor the contents of an article to different audiences by controlling visibility of certain article content using tags.<br><br>The total number of publish views is limited to 20."""


class PublishViews(BaseModel):
    publish_view: Annotated[
        Optional[List[PublishView]], pydantic.Field(alias="publishView")
    ] = None
    r"""Publish views allow authors to tailor the contents of an article to different audiences by controlling visibility of certain article content using tags.<br><br>The total number of publish views is limited to 20."""


class PersonalizationTypedDict(TypedDict):
    r"""Personalization allows the filtering of search results and controls the access to articles and article editions."""

    access_tags: NotRequired[PersonalizationAccessTagsTypedDict]
    filters: NotRequired[FiltersTypedDict]
    publish_views: NotRequired[PublishViewsTypedDict]


class Personalization(BaseModel):
    r"""Personalization allows the filtering of search results and controls the access to articles and article editions."""

    access_tags: Annotated[
        Optional[PersonalizationAccessTags], pydantic.Field(alias="accessTags")
    ] = None

    filters: Optional[Filters] = None

    publish_views: Annotated[
        Optional[PublishViews], pydantic.Field(alias="publishViews")
    ] = None
