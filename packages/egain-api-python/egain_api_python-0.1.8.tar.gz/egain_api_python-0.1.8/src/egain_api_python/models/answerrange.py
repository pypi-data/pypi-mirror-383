"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from egain_api_python.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AnswerRangeTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Id of the answer range"""
    min: NotRequired[float]
    r"""minimum value of range"""
    max: NotRequired[float]
    r"""maximum value of range"""
    min_inclusive: NotRequired[bool]
    r"""flag indicating if minimum value is included"""
    max_inclusive: NotRequired[bool]
    r"""flag indicating if maximim value is included"""


class AnswerRange(BaseModel):
    id: Optional[str] = None
    r"""Id of the answer range"""

    min: Optional[float] = None
    r"""minimum value of range"""

    max: Optional[float] = None
    r"""maximum value of range"""

    min_inclusive: Annotated[Optional[bool], pydantic.Field(alias="minInclusive")] = (
        None
    )
    r"""flag indicating if minimum value is included"""

    max_inclusive: Annotated[Optional[bool], pydantic.Field(alias="maxInclusive")] = (
        None
    )
    r"""flag indicating if maximim value is included"""
