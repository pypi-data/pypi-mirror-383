"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dynamiccluster import DynamicCluster, DynamicClusterTypedDict
from .virtualcase import VirtualCase, VirtualCaseTypedDict
from egain_api_python.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DynamicSearchTypedDict(TypedDict):
    dynamic_cluster: NotRequired[List[DynamicClusterTypedDict]]
    r"""clusters in search"""
    parent_cluster_id: NotRequired[str]
    r"""Parent cluster"""
    type: NotRequired[str]
    r"""type of search"""
    virtual_case: NotRequired[List[VirtualCaseTypedDict]]
    r"""cases in search"""


class DynamicSearch(BaseModel):
    dynamic_cluster: Annotated[
        Optional[List[DynamicCluster]], pydantic.Field(alias="dynamicCluster")
    ] = None
    r"""clusters in search"""

    parent_cluster_id: Annotated[
        Optional[str], pydantic.Field(alias="parentClusterId")
    ] = None
    r"""Parent cluster"""

    type: Optional[str] = None
    r"""type of search"""

    virtual_case: Annotated[
        Optional[List[VirtualCase]], pydantic.Field(alias="virtualCase")
    ] = None
    r"""cases in search"""
