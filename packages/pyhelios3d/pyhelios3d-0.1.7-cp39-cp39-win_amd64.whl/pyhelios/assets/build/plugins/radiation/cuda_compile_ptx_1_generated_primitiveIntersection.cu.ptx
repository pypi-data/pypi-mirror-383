//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34841621
// Cuda compilation tools, release 12.6, V12.6.77
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	_Z19rectangle_intersecti
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 4 .b8 top_object[4];
.global .align 4 .u32 random_seed;
.global .align 4 .u32 launch_offset;
.global .align 4 .u32 launch_face;
.global .align 4 .u32 Nbands_launch;
.global .align 4 .u32 Nbands_global;
.global .align 1 .b8 band_launch_flag[1];
.global .align 4 .u32 direct_ray_type;
.global .align 4 .u32 diffuse_ray_type;
.global .align 4 .u32 camera_ray_type;
.global .align 4 .u32 pixel_label_ray_type;
.global .align 4 .b8 launch_index[12];
.global .align 4 .b8 launch_dim[12];
.global .align 1 .b8 maskdata[1];
.global .align 1 .b8 masksize[1];
.global .align 1 .b8 maskID[1];
.global .align 1 .b8 uvdata[1];
.global .align 1 .b8 uvID[1];
.global .align 1 .b8 objectID[1];
.global .align 1 .b8 object_subdivisions[1];
.global .align 1 .b8 primitiveID[1];
.global .align 4 .u32 Nsources;
.global .align 1 .b8 source_fluxes[1];
.global .align 1 .b8 source_positions[1];
.global .align 1 .b8 source_rotations[1];
.global .align 1 .b8 source_widths[1];
.global .align 1 .b8 source_types[1];
.global .align 1 .b8 diffuse_flux[1];
.global .align 1 .b8 diffuse_extinction[1];
.global .align 1 .b8 diffuse_peak_dir[1];
.global .align 1 .b8 diffuse_dist_norm[1];
.global .align 1 .b8 Rsky[1];
.global .align 1 .b8 patch_vertices[1];
.global .align 1 .b8 patch_UUID[1];
.global .align 1 .b8 triangle_vertices[1];
.global .align 1 .b8 triangle_UUID[1];
.global .align 1 .b8 disk_UUID[1];
.global .align 1 .b8 tile_vertices[1];
.global .align 1 .b8 tile_UUID[1];
.global .align 1 .b8 voxel_vertices[1];
.global .align 1 .b8 voxel_UUID[1];
.global .align 1 .b8 bbox_vertices[1];
.global .align 1 .b8 bbox_UUID[1];
.global .align 4 .u32 Nprimitives;
.global .align 8 .b8 periodic_flag[8];
.global .align 1 .b8 twosided_flag[1];
.global .align 1 .b8 transform_matrix[1];
.global .align 1 .b8 primitive_type[1];
.global .align 1 .b8 primitive_solid_fraction[1];
.global .align 1 .b8 rho[1];
.global .align 1 .b8 tau[1];
.global .align 1 .b8 rho_cam[1];
.global .align 1 .b8 tau_cam[1];
.global .align 1 .b8 specular_exponent[1];
.global .align 1 .b8 specular_scale[1];
.global .align 4 .u32 specular_reflection_enabled;
.global .align 1 .b8 radiation_in[1];
.global .align 1 .b8 radiation_in_camera[1];
.global .align 1 .b8 radiation_out_top[1];
.global .align 1 .b8 radiation_out_bottom[1];
.global .align 1 .b8 scatter_buff_top[1];
.global .align 1 .b8 scatter_buff_bottom[1];
.global .align 1 .b8 scatter_buff_top_cam[1];
.global .align 1 .b8 scatter_buff_bottom_cam[1];
.global .align 1 .b8 camera_pixel_label[1];
.global .align 1 .b8 camera_pixel_depth[1];
.global .align 4 .u32 camera_ID;
.global .align 4 .u32 Ncameras;
.global .align 4 .b8 camera_position[12];
.global .align 8 .b8 camera_direction[8];
.global .align 4 .f32 camera_lens_diameter;
.global .align 4 .f32 FOV_aspect_ratio;
.global .align 4 .f32 camera_focal_length;
.global .align 4 .f32 camera_viewplane_length;
.global .align 4 .b8 ray[36];
.global .align 8 .b8 prd[40];
.global .align 4 .u32 UUID;
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11random_seedE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13launch_offsetE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11launch_faceE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13Nbands_launchE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13Nbands_globalE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15direct_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16diffuse_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15camera_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo20pixel_label_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10launch_dimE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8NsourcesE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11NprimitivesE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13periodic_flagE[8] = {82, 97, 121, 0, 8};
.global .align 4 .b8 _ZN21rti_internal_typeinfo27specular_reflection_enabledE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9camera_IDE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8NcamerasE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15camera_positionE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16camera_directionE[8] = {82, 97, 121, 0, 8};
.global .align 4 .b8 _ZN21rti_internal_typeinfo20camera_lens_diameterE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16FOV_aspect_ratioE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19camera_focal_lengthE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo23camera_viewplane_lengthE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3prdE[8] = {82, 97, 121, 0, 40};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4UUIDE[8] = {82, 97, 121, 0, 4};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11random_seedE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13launch_offsetE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11launch_faceE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13Nbands_launchE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13Nbands_globalE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15direct_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename16diffuse_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15camera_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename20pixel_label_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename10launch_dimE[6] = {117, 105, 110, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename8NsourcesE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11NprimitivesE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13periodic_flagE[7] = {102, 108, 111, 97, 116, 50};
.global .align 1 .b8 _ZN21rti_internal_typename27specular_reflection_enabledE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename9camera_IDE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename8NcamerasE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15camera_positionE[7] = {102, 108, 111, 97, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename16camera_directionE[7] = {102, 108, 111, 97, 116, 50};
.global .align 1 .b8 _ZN21rti_internal_typename20camera_lens_diameterE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename16FOV_aspect_ratioE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename19camera_focal_lengthE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename23camera_viewplane_lengthE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[4] = {82, 97, 121};
.global .align 1 .b8 _ZN21rti_internal_typename3prdE[11] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97};
.global .align 1 .b8 _ZN21rti_internal_typename4UUIDE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11random_seedE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13launch_offsetE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11launch_faceE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13Nbands_launchE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13Nbands_globalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15direct_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16diffuse_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15camera_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum20pixel_label_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10launch_dimE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8NsourcesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11NprimitivesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13periodic_flagE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum27specular_reflection_enabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9camera_IDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8NcamerasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15camera_positionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16camera_directionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum20camera_lens_diameterE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16FOV_aspect_ratioE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19camera_focal_lengthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum23camera_viewplane_lengthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3prdE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4UUIDE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11random_seedE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13launch_offsetE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11launch_faceE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13Nbands_launchE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13Nbands_globalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15direct_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16diffuse_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15camera_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic20pixel_label_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120};
.global .align 1 .b8 _ZN21rti_internal_semantic10launch_dimE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109};
.global .align 1 .b8 _ZN21rti_internal_semantic8NsourcesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11NprimitivesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13periodic_flagE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic27specular_reflection_enabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9camera_IDE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8NcamerasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15camera_positionE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16camera_directionE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic20camera_lens_diameterE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16FOV_aspect_ratioE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19camera_focal_lengthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic23camera_viewplane_lengthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121};
.global .align 1 .b8 _ZN21rti_internal_semantic3prdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100};
.global .align 1 .b8 _ZN21rti_internal_semantic4UUIDE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 85, 85, 73, 68};
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11random_seedE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13launch_offsetE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11launch_faceE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13Nbands_launchE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13Nbands_globalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15direct_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16diffuse_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15camera_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation20pixel_label_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10launch_dimE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8NsourcesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11NprimitivesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13periodic_flagE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation27specular_reflection_enabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9camera_IDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8NcamerasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15camera_positionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16camera_directionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation20camera_lens_diameterE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16FOV_aspect_ratioE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19camera_focal_lengthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation23camera_viewplane_lengthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3prdE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4UUIDE[1];
.global .align 1 .b8 $str[44] = {69, 82, 82, 79, 82, 58, 32, 116, 101, 120, 116, 117, 114, 101, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 46, 32, 117, 118, 32, 61, 32, 40, 37, 102, 44, 37, 102, 41, 10};

.visible .entry _Z19rectangle_intersecti(
	.param .u32 _Z19rectangle_intersecti_param_0
)
{
	.local .align 16 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<21>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<109>;
	.reg .b32 	%r<92>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<192>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r12, [_Z19rectangle_intersecti_param_0];
	ld.global.u32 	%r15, [prd+8];
	mov.u64 	%rd8, 0;
	cvt.s64.s32 	%rd5, %r12;
	mov.u64 	%rd9, patch_UUID;
	cvta.global.u64 	%rd4, %rd9;
	mov.u32 	%r13, 1;
	mov.u32 	%r14, 4;
	// begin inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r13, %r14, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%r16, [%rd3];
	setp.eq.s32 	%p1, %r15, %r16;
	@%p1 bra 	$L__BB0_18;

	// begin inline asm
	call (%rd10), _rt_buffer_get_64, (%rd4, %r13, %r14, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%rd18, [%rd10];
	mov.u64 	%rd23, twosided_flag;
	cvta.global.u64 	%rd17, %rd23;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r13, %r13, %rd18, %rd8, %rd8, %rd8);
	// end inline asm
	ld.s8 	%rs1, [%rd16];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB0_18;

	cvt.u64.u32 	%rd45, %r12;
	mov.u64 	%rd48, patch_vertices;
	cvta.global.u64 	%rd25, %rd48;
	mov.u32 	%r27, 2;
	mov.u32 	%r28, 12;
	mov.u64 	%rd47, 0;
	// begin inline asm
	call (%rd24), _rt_buffer_get_64, (%rd25, %r27, %r28, %rd47, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f1, [%rd24];
	ld.f32 	%f2, [%rd24+4];
	ld.f32 	%f3, [%rd24+8];
	mov.u64 	%rd32, 1;
	// begin inline asm
	call (%rd30), _rt_buffer_get_64, (%rd25, %r27, %r28, %rd32, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f26, [%rd30];
	ld.f32 	%f27, [%rd30+4];
	ld.f32 	%f28, [%rd30+8];
	mov.u64 	%rd38, 2;
	// begin inline asm
	call (%rd36), _rt_buffer_get_64, (%rd25, %r27, %r28, %rd38, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f29, [%rd36];
	ld.f32 	%f30, [%rd36+4];
	ld.f32 	%f31, [%rd36+8];
	mov.u64 	%rd44, 3;
	// begin inline asm
	call (%rd42), _rt_buffer_get_64, (%rd25, %r27, %r28, %rd44, %rd45, %rd47, %rd47);
	// end inline asm
	sub.ftz.f32 	%f4, %f26, %f1;
	sub.ftz.f32 	%f5, %f27, %f2;
	sub.ftz.f32 	%f6, %f28, %f3;
	sub.ftz.f32 	%f32, %f29, %f1;
	sub.ftz.f32 	%f33, %f30, %f2;
	sub.ftz.f32 	%f34, %f31, %f3;
	mul.ftz.f32 	%f35, %f5, %f34;
	mul.ftz.f32 	%f36, %f6, %f33;
	sub.ftz.f32 	%f37, %f35, %f36;
	mul.ftz.f32 	%f38, %f6, %f32;
	mul.ftz.f32 	%f39, %f4, %f34;
	sub.ftz.f32 	%f40, %f38, %f39;
	mul.ftz.f32 	%f41, %f4, %f33;
	mul.ftz.f32 	%f42, %f5, %f32;
	sub.ftz.f32 	%f43, %f41, %f42;
	mul.ftz.f32 	%f44, %f40, %f40;
	fma.rn.ftz.f32 	%f45, %f37, %f37, %f44;
	fma.rn.ftz.f32 	%f46, %f43, %f43, %f45;
	rsqrt.approx.ftz.f32 	%f47, %f46;
	mul.ftz.f32 	%f48, %f47, %f37;
	mul.ftz.f32 	%f49, %f47, %f40;
	mul.ftz.f32 	%f50, %f47, %f43;
	ld.f32 	%f51, [%rd42];
	sub.ftz.f32 	%f7, %f51, %f1;
	ld.f32 	%f52, [%rd42+4];
	sub.ftz.f32 	%f8, %f52, %f2;
	ld.f32 	%f53, [%rd42+8];
	sub.ftz.f32 	%f9, %f53, %f3;
	ld.global.f32 	%f10, [ray];
	sub.ftz.f32 	%f54, %f1, %f10;
	ld.global.f32 	%f11, [ray+4];
	sub.ftz.f32 	%f55, %f2, %f11;
	ld.global.f32 	%f12, [ray+8];
	sub.ftz.f32 	%f56, %f3, %f12;
	mul.ftz.f32 	%f57, %f55, %f49;
	fma.rn.ftz.f32 	%f58, %f54, %f48, %f57;
	fma.rn.ftz.f32 	%f59, %f56, %f50, %f58;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [ray+16];
	mul.ftz.f32 	%f60, %f14, %f49;
	fma.rn.ftz.f32 	%f61, %f13, %f48, %f60;
	ld.global.f32 	%f15, [ray+20];
	fma.rn.ftz.f32 	%f62, %f15, %f50, %f61;
	div.approx.ftz.f32 	%f16, %f59, %f62;
	setp.nan.ftz.f32 	%p3, %f16, %f16;
	cvt.ftz.f64.f32 	%fd1, %f16;
	setp.leu.f64 	%p4, %fd1, 0d3E45798EE2308C3A;
	or.pred  	%p5, %p3, %p4;
	setp.geu.ftz.f32 	%p6, %f16, 0f4CBEBC20;
	or.pred  	%p7, %p6, %p5;
	@%p7 bra 	$L__BB0_18;

	fma.rn.ftz.f32 	%f63, %f16, %f13, %f10;
	fma.rn.ftz.f32 	%f64, %f16, %f14, %f11;
	fma.rn.ftz.f32 	%f65, %f16, %f15, %f12;
	sub.ftz.f32 	%f17, %f63, %f1;
	sub.ftz.f32 	%f18, %f64, %f2;
	sub.ftz.f32 	%f19, %f65, %f3;
	mul.ftz.f32 	%f66, %f5, %f18;
	fma.rn.ftz.f32 	%f67, %f4, %f17, %f66;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f67;
	setp.leu.ftz.f32 	%p8, %f20, 0f00000000;
	@%p8 bra 	$L__BB0_18;

	mul.ftz.f32 	%f68, %f5, %f5;
	fma.rn.ftz.f32 	%f69, %f4, %f4, %f68;
	fma.rn.ftz.f32 	%f21, %f6, %f6, %f69;
	setp.geu.ftz.f32 	%p9, %f20, %f21;
	@%p9 bra 	$L__BB0_18;

	mul.ftz.f32 	%f70, %f8, %f18;
	fma.rn.ftz.f32 	%f71, %f7, %f17, %f70;
	fma.rn.ftz.f32 	%f22, %f9, %f19, %f71;
	setp.leu.ftz.f32 	%p10, %f22, 0f00000000;
	@%p10 bra 	$L__BB0_18;

	mul.ftz.f32 	%f72, %f8, %f8;
	fma.rn.ftz.f32 	%f73, %f7, %f7, %f72;
	fma.rn.ftz.f32 	%f23, %f9, %f9, %f73;
	setp.geu.ftz.f32 	%p11, %f22, %f23;
	@%p11 bra 	$L__BB0_18;

	mov.u32 	%r33, 1;
	mov.u32 	%r34, 4;
	mov.u64 	%rd66, 0;
	// begin inline asm
	call (%rd49), _rt_buffer_get_64, (%rd4, %r33, %r34, %rd5, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%rd57, [%rd49];
	mov.u64 	%rd68, objectID;
	cvta.global.u64 	%rd56, %rd68;
	// begin inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r33, %r34, %rd57, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%rd2, [%rd55];
	mov.u64 	%rd69, maskID;
	cvta.global.u64 	%rd62, %rd69;
	// begin inline asm
	call (%rd61), _rt_buffer_get_64, (%rd62, %r33, %r34, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%r35, [%rd61];
	setp.eq.s32 	%p12, %r35, -1;
	@%p12 bra 	$L__BB0_16;

	sqrt.approx.ftz.f32 	%f74, %f21;
	div.approx.ftz.f32 	%f75, %f20, %f74;
	div.approx.ftz.f32 	%f24, %f75, %f74;
	sqrt.approx.ftz.f32 	%f76, %f23;
	div.approx.ftz.f32 	%f77, %f22, %f76;
	div.approx.ftz.f32 	%f25, %f77, %f76;
	// begin inline asm
	call (%rd70), _rt_buffer_get_64, (%rd62, %r33, %r34, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	ld.s32 	%rd78, [%rd70];
	mov.u64 	%rd89, masksize;
	cvta.global.u64 	%rd77, %rd89;
	mov.u32 	%r39, 8;
	// begin inline asm
	call (%rd76), _rt_buffer_get_64, (%rd77, %r33, %r39, %rd78, %rd66, %rd66, %rd66);
	// end inline asm
	ld.v2.u32 	{%r42, %r43}, [%rd76];
	mov.u64 	%rd90, uvID;
	cvta.global.u64 	%rd83, %rd90;
	// begin inline asm
	call (%rd82), _rt_buffer_get_64, (%rd83, %r33, %r34, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%r44, [%rd82];
	setp.eq.s32 	%p13, %r44, -1;
	@%p13 bra 	$L__BB0_12;

	mov.u32 	%r65, 1;
	mov.u32 	%r66, 4;
	mov.u64 	%rd156, 0;
	// begin inline asm
	call (%rd91), _rt_buffer_get_64, (%rd83, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%rd100, [%rd91];
	mov.u64 	%rd158, uvdata;
	cvta.global.u64 	%rd98, %rd158;
	mov.u32 	%r63, 2;
	// begin inline asm
	call (%rd97), _rt_buffer_get_64, (%rd98, %r63, %r39, %rd156, %rd100, %rd156, %rd156);
	// end inline asm
	ld.v2.f32 	{%f78, %f79}, [%rd97];
	mov.u64 	%rd147, 1;
	// begin inline asm
	call (%rd103), _rt_buffer_get_64, (%rd83, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%rd112, [%rd103];
	// begin inline asm
	call (%rd109), _rt_buffer_get_64, (%rd98, %r63, %r39, %rd147, %rd112, %rd156, %rd156);
	// end inline asm
	ld.f32 	%f82, [%rd109];
	// begin inline asm
	call (%rd115), _rt_buffer_get_64, (%rd83, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%rd124, [%rd115];
	// begin inline asm
	call (%rd121), _rt_buffer_get_64, (%rd98, %r63, %r39, %rd156, %rd124, %rd156, %rd156);
	// end inline asm
	ld.f32 	%f83, [%rd121];
	sub.ftz.f32 	%f84, %f82, %f83;
	// begin inline asm
	call (%rd127), _rt_buffer_get_64, (%rd83, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%rd136, [%rd127];
	mov.u64 	%rd135, 2;
	// begin inline asm
	call (%rd133), _rt_buffer_get_64, (%rd98, %r63, %r39, %rd135, %rd136, %rd156, %rd156);
	// end inline asm
	ld.f32 	%f85, [%rd133+4];
	// begin inline asm
	call (%rd139), _rt_buffer_get_64, (%rd83, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%rd148, [%rd139];
	// begin inline asm
	call (%rd145), _rt_buffer_get_64, (%rd98, %r63, %r39, %rd147, %rd148, %rd156, %rd156);
	// end inline asm
	ld.f32 	%f86, [%rd145+4];
	sub.ftz.f32 	%f87, %f85, %f86;
	add.s32 	%r67, %r42, -1;
	cvt.rn.f32.s32 	%f88, %r67;
	fma.rn.ftz.f32 	%f89, %f24, %f84, %f78;
	mul.ftz.f32 	%f90, %f89, %f88;
	cvt.rmi.ftz.f32.f32 	%f91, %f90;
	cvt.rzi.ftz.u32.f32 	%r89, %f91;
	add.s32 	%r68, %r43, -1;
	cvt.rn.f32.s32 	%f92, %r68;
	mov.f32 	%f93, 0f3F800000;
	sub.ftz.f32 	%f94, %f93, %f79;
	mul.ftz.f32 	%f95, %f25, %f87;
	sub.ftz.f32 	%f96, %f94, %f95;
	mul.ftz.f32 	%f97, %f96, %f92;
	cvt.rmi.ftz.f32.f32 	%f98, %f97;
	cvt.rzi.ftz.u32.f32 	%r90, %f98;
	// begin inline asm
	call (%rd151), _rt_buffer_get_64, (%rd62, %r65, %r66, %rd2, %rd156, %rd156, %rd156);
	// end inline asm
	ld.u32 	%r91, [%rd151];
	setp.lt.u32 	%p14, %r89, %r42;
	setp.lt.u32 	%p15, %r90, %r43;
	and.pred  	%p16, %p15, %p14;
	@%p16 bra 	$L__BB0_13;

	// begin inline asm
	call (%r69), _rt_print_active, ();
	// end inline asm
	setp.eq.s32 	%p17, %r69, 0;
	@%p17 bra 	$L__BB0_13;

	cvt.ftz.f64.f32 	%fd2, %f25;
	cvt.ftz.f64.f32 	%fd3, %f24;
	add.u64 	%rd160, %SP, 0;
	add.u64 	%rd161, %SPL, 0;
	st.local.v2.f64 	[%rd161], {%fd3, %fd2};
	mov.u64 	%rd162, $str;
	cvta.global.u64 	%rd163, %rd162;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd163;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd160;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r70, [retval0+0];
	} // callseq 0
	bra.uni 	$L__BB0_13;

$L__BB0_16:
	// begin inline asm
	call (%r83), _rt_potential_intersection, (%f16);
	// end inline asm
	setp.eq.s32 	%p20, %r83, 0;
	@%p20 bra 	$L__BB0_18;

	mov.u32 	%r84, 1;
	mov.u32 	%r85, 4;
	mov.u64 	%rd190, 0;
	// begin inline asm
	call (%rd185), _rt_buffer_get_64, (%rd4, %r84, %r85, %rd5, %rd190, %rd190, %rd190);
	// end inline asm
	ld.u32 	%r88, [%rd185];
	st.global.u32 	[UUID], %r88;
	mov.u32 	%r87, 0;
	// begin inline asm
	call (%r86), _rt_report_intersection, (%r87);
	// end inline asm
	bra.uni 	$L__BB0_18;

$L__BB0_12:
	add.s32 	%r73, %r42, -1;
	cvt.rn.f32.s32 	%f99, %r73;
	mul.ftz.f32 	%f100, %f24, %f99;
	cvt.rmi.ftz.f32.f32 	%f101, %f100;
	cvt.rzi.ftz.u32.f32 	%r89, %f101;
	add.s32 	%r74, %r43, -1;
	cvt.rn.f32.s32 	%f102, %r74;
	mov.f32 	%f103, 0f3F800000;
	sub.ftz.f32 	%f104, %f103, %f25;
	mul.ftz.f32 	%f105, %f104, %f102;
	cvt.rmi.ftz.f32.f32 	%f106, %f105;
	cvt.rzi.ftz.u32.f32 	%r90, %f106;
	mov.u32 	%r71, 1;
	mov.u32 	%r72, 4;
	mov.u64 	%rd169, 0;
	// begin inline asm
	call (%rd164), _rt_buffer_get_64, (%rd62, %r71, %r72, %rd2, %rd169, %rd169, %rd169);
	// end inline asm
	ld.u32 	%r91, [%rd164];

$L__BB0_13:
	cvt.u64.u32 	%rd175, %r91;
	cvt.u64.u32 	%rd174, %r90;
	cvt.u64.u32 	%rd173, %r89;
	mov.u64 	%rd177, maskdata;
	cvta.global.u64 	%rd172, %rd177;
	mov.u32 	%r75, 3;
	mov.u32 	%r76, 1;
	mov.u64 	%rd176, 0;
	// begin inline asm
	call (%rd171), _rt_buffer_get_64, (%rd172, %r75, %r76, %rd173, %rd174, %rd175, %rd176);
	// end inline asm
	ld.u8 	%rs2, [%rd171];
	setp.eq.s16 	%p18, %rs2, 0;
	@%p18 bra 	$L__BB0_18;

	// begin inline asm
	call (%r77), _rt_potential_intersection, (%f16);
	// end inline asm
	setp.eq.s32 	%p19, %r77, 0;
	@%p19 bra 	$L__BB0_18;

	mov.u32 	%r78, 1;
	mov.u32 	%r79, 4;
	mov.u64 	%rd183, 0;
	// begin inline asm
	call (%rd178), _rt_buffer_get_64, (%rd4, %r78, %r79, %rd5, %rd183, %rd183, %rd183);
	// end inline asm
	ld.u32 	%r82, [%rd178];
	st.global.u32 	[UUID], %r82;
	mov.u32 	%r81, 0;
	// begin inline asm
	call (%r80), _rt_report_intersection, (%r81);
	// end inline asm

$L__BB0_18:
	ret;

}
	// .globl	_Z16rectangle_boundsiPf
.visible .entry _Z16rectangle_boundsiPf(
	.param .u32 _Z16rectangle_boundsiPf_param_0,
	.param .u64 _Z16rectangle_boundsiPf_param_1
)
{
	.reg .f32 	%f<31>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<28>;


	ld.param.u32 	%rd22, [_Z16rectangle_boundsiPf_param_0];
	ld.param.u64 	%rd25, [_Z16rectangle_boundsiPf_param_1];
	cvta.to.global.u64 	%rd26, %rd25;
	mov.u64 	%rd27, patch_vertices;
	cvta.global.u64 	%rd2, %rd27;
	mov.u32 	%r7, 2;
	mov.u32 	%r8, 12;
	mov.u64 	%rd24, 0;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd24, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd9, 1;
	// begin inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd9, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f4, [%rd7];
	ld.f32 	%f5, [%rd7+4];
	ld.f32 	%f6, [%rd7+8];
	mov.u64 	%rd15, 2;
	// begin inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd15, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f7, [%rd13];
	ld.f32 	%f8, [%rd13+4];
	ld.f32 	%f9, [%rd13+8];
	mov.u64 	%rd21, 3;
	// begin inline asm
	call (%rd19), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd21, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f10, [%rd19];
	ld.f32 	%f11, [%rd19+4];
	ld.f32 	%f12, [%rd19+8];
	min.ftz.f32 	%f13, %f1, %f4;
	min.ftz.f32 	%f14, %f7, %f10;
	min.ftz.f32 	%f15, %f13, %f14;
	min.ftz.f32 	%f16, %f2, %f5;
	min.ftz.f32 	%f17, %f8, %f11;
	min.ftz.f32 	%f18, %f16, %f17;
	min.ftz.f32 	%f19, %f3, %f6;
	min.ftz.f32 	%f20, %f9, %f12;
	min.ftz.f32 	%f21, %f19, %f20;
	max.ftz.f32 	%f22, %f1, %f4;
	max.ftz.f32 	%f23, %f7, %f10;
	max.ftz.f32 	%f24, %f22, %f23;
	max.ftz.f32 	%f25, %f2, %f5;
	max.ftz.f32 	%f26, %f8, %f11;
	max.ftz.f32 	%f27, %f25, %f26;
	max.ftz.f32 	%f28, %f3, %f6;
	max.ftz.f32 	%f29, %f9, %f12;
	max.ftz.f32 	%f30, %f28, %f29;
	st.global.f32 	[%rd26], %f15;
	st.global.f32 	[%rd26+4], %f18;
	st.global.f32 	[%rd26+8], %f21;
	st.global.f32 	[%rd26+12], %f24;
	st.global.f32 	[%rd26+16], %f27;
	st.global.f32 	[%rd26+20], %f30;
	ret;

}
	// .globl	_Z18triangle_intersecti
.visible .entry _Z18triangle_intersecti(
	.param .u32 _Z18triangle_intersecti_param_0
)
{
	.local .align 16 .b8 	__local_depot2[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<99>;
	.reg .b32 	%r<72>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<147>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r4, [_Z18triangle_intersecti_param_0];
	ld.global.u32 	%r7, [prd+8];
	mov.u64 	%rd8, 0;
	cvt.s64.s32 	%rd5, %r4;
	mov.u64 	%rd9, triangle_UUID;
	cvta.global.u64 	%rd4, %rd9;
	mov.u32 	%r5, 1;
	mov.u32 	%r6, 4;
	// begin inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r5, %r6, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%r8, [%rd3];
	setp.eq.s32 	%p1, %r7, %r8;
	@%p1 bra 	$L__BB2_14;

	// begin inline asm
	call (%rd10), _rt_buffer_get_64, (%rd4, %r5, %r6, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%rd18, [%rd10];
	mov.u64 	%rd23, twosided_flag;
	cvta.global.u64 	%rd17, %rd23;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r5, %r5, %rd18, %rd8, %rd8, %rd8);
	// end inline asm
	ld.s8 	%rs1, [%rd16];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB2_14;

	cvt.u64.u32 	%rd39, %r4;
	mov.u64 	%rd42, triangle_vertices;
	cvta.global.u64 	%rd25, %rd42;
	mov.u32 	%r17, 2;
	mov.u32 	%r18, 12;
	mov.u64 	%rd41, 0;
	// begin inline asm
	call (%rd24), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd41, %rd39, %rd41, %rd41);
	// end inline asm
	ld.f32 	%f20, [%rd24];
	ld.f32 	%f21, [%rd24+4];
	ld.f32 	%f22, [%rd24+8];
	mov.u64 	%rd32, 1;
	// begin inline asm
	call (%rd30), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd32, %rd39, %rd41, %rd41);
	// end inline asm
	ld.f32 	%f23, [%rd30];
	ld.f32 	%f24, [%rd30+4];
	ld.f32 	%f25, [%rd30+8];
	mov.u64 	%rd38, 2;
	// begin inline asm
	call (%rd36), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd38, %rd39, %rd41, %rd41);
	// end inline asm
	sub.ftz.f32 	%f1, %f20, %f23;
	ld.f32 	%f26, [%rd36];
	sub.ftz.f32 	%f2, %f20, %f26;
	ld.global.f32 	%f27, [ray];
	sub.ftz.f32 	%f3, %f20, %f27;
	sub.ftz.f32 	%f4, %f21, %f24;
	ld.f32 	%f28, [%rd36+4];
	sub.ftz.f32 	%f29, %f21, %f28;
	ld.global.f32 	%f30, [ray+4];
	sub.ftz.f32 	%f5, %f21, %f30;
	sub.ftz.f32 	%f6, %f22, %f25;
	ld.f32 	%f31, [%rd36+8];
	sub.ftz.f32 	%f32, %f22, %f31;
	ld.global.f32 	%f33, [ray+8];
	sub.ftz.f32 	%f7, %f22, %f33;
	ld.global.f32 	%f34, [ray+20];
	mul.ftz.f32 	%f35, %f29, %f34;
	ld.global.f32 	%f36, [ray+16];
	mul.ftz.f32 	%f37, %f32, %f36;
	sub.ftz.f32 	%f38, %f35, %f37;
	mul.ftz.f32 	%f39, %f5, %f34;
	mul.ftz.f32 	%f40, %f36, %f7;
	sub.ftz.f32 	%f8, %f39, %f40;
	mul.ftz.f32 	%f41, %f29, %f7;
	mul.ftz.f32 	%f42, %f32, %f5;
	sub.ftz.f32 	%f9, %f41, %f42;
	mul.ftz.f32 	%f43, %f6, %f36;
	mul.ftz.f32 	%f44, %f4, %f34;
	sub.ftz.f32 	%f10, %f43, %f44;
	mul.ftz.f32 	%f45, %f4, %f32;
	mul.ftz.f32 	%f46, %f6, %f29;
	sub.ftz.f32 	%f11, %f45, %f46;
	mul.ftz.f32 	%f47, %f2, %f10;
	fma.rn.ftz.f32 	%f48, %f1, %f38, %f47;
	ld.global.f32 	%f12, [ray+12];
	fma.rn.ftz.f32 	%f49, %f12, %f11, %f48;
	rcp.approx.ftz.f32 	%f13, %f49;
	mul.ftz.f32 	%f50, %f3, %f38;
	mul.ftz.f32 	%f51, %f2, %f8;
	sub.ftz.f32 	%f52, %f50, %f51;
	mul.ftz.f32 	%f53, %f12, %f9;
	sub.ftz.f32 	%f54, %f52, %f53;
	mul.ftz.f32 	%f14, %f13, %f54;
	setp.leu.ftz.f32 	%p3, %f14, 0f00000000;
	@%p3 bra 	$L__BB2_14;

	mul.ftz.f32 	%f55, %f4, %f7;
	mul.ftz.f32 	%f56, %f6, %f5;
	sub.ftz.f32 	%f15, %f55, %f56;
	mul.ftz.f32 	%f57, %f1, %f8;
	fma.rn.ftz.f32 	%f58, %f3, %f10, %f57;
	fma.rn.ftz.f32 	%f59, %f12, %f15, %f58;
	mul.ftz.f32 	%f16, %f13, %f59;
	setp.leu.ftz.f32 	%p4, %f16, 0f00000000;
	add.ftz.f32 	%f60, %f14, %f16;
	setp.geu.ftz.f32 	%p5, %f60, 0f3F800000;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB2_14;

	mul.ftz.f32 	%f61, %f1, %f9;
	mul.ftz.f32 	%f62, %f2, %f15;
	sub.ftz.f32 	%f63, %f61, %f62;
	fma.rn.ftz.f32 	%f64, %f3, %f11, %f63;
	mul.ftz.f32 	%f17, %f13, %f64;
	cvt.ftz.f64.f32 	%fd1, %f17;
	setp.leu.f64 	%p7, %fd1, 0d3E45798EE2308C3A;
	@%p7 bra 	$L__BB2_14;

	mov.u32 	%r23, 1;
	mov.u32 	%r24, 4;
	mov.u64 	%rd60, 0;
	// begin inline asm
	call (%rd43), _rt_buffer_get_64, (%rd4, %r23, %r24, %rd5, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%rd51, [%rd43];
	mov.u64 	%rd62, objectID;
	cvta.global.u64 	%rd50, %rd62;
	// begin inline asm
	call (%rd49), _rt_buffer_get_64, (%rd50, %r23, %r24, %rd51, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%rd2, [%rd49];
	mov.u64 	%rd63, maskID;
	cvta.global.u64 	%rd56, %rd63;
	// begin inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%r25, [%rd55];
	setp.eq.s32 	%p8, %r25, -1;
	@%p8 bra 	$L__BB2_12;

	// begin inline asm
	call (%rd64), _rt_buffer_get_64, (%rd56, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.s32 	%rd72, [%rd64];
	mov.u64 	%rd119, masksize;
	cvta.global.u64 	%rd71, %rd119;
	mov.u32 	%r41, 8;
	// begin inline asm
	call (%rd70), _rt_buffer_get_64, (%rd71, %r23, %r41, %rd72, %rd60, %rd60, %rd60);
	// end inline asm
	ld.v2.u32 	{%r44, %r45}, [%rd70];
	mov.u64 	%rd96, 1;
	mov.u64 	%rd120, uvID;
	cvta.global.u64 	%rd77, %rd120;
	// begin inline asm
	call (%rd76), _rt_buffer_get_64, (%rd77, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%rd85, [%rd76];
	mov.u64 	%rd121, uvdata;
	cvta.global.u64 	%rd83, %rd121;
	mov.u32 	%r40, 2;
	// begin inline asm
	call (%rd82), _rt_buffer_get_64, (%rd83, %r40, %r41, %rd60, %rd85, %rd60, %rd60);
	// end inline asm
	ld.v2.f32 	{%f65, %f66}, [%rd82];
	// begin inline asm
	call (%rd88), _rt_buffer_get_64, (%rd77, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%rd97, [%rd88];
	// begin inline asm
	call (%rd94), _rt_buffer_get_64, (%rd83, %r40, %r41, %rd96, %rd97, %rd60, %rd60);
	// end inline asm
	ld.v2.f32 	{%f69, %f70}, [%rd94];
	// begin inline asm
	call (%rd100), _rt_buffer_get_64, (%rd77, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%rd109, [%rd100];
	mov.u64 	%rd108, 2;
	// begin inline asm
	call (%rd106), _rt_buffer_get_64, (%rd83, %r40, %r41, %rd108, %rd109, %rd60, %rd60);
	// end inline asm
	ld.v2.f32 	{%f73, %f74}, [%rd106];
	sub.ftz.f32 	%f77, %f69, %f65;
	sub.ftz.f32 	%f78, %f70, %f66;
	fma.rn.ftz.f32 	%f79, %f14, %f77, %f65;
	fma.rn.ftz.f32 	%f80, %f14, %f78, %f66;
	sub.ftz.f32 	%f81, %f73, %f65;
	sub.ftz.f32 	%f82, %f74, %f66;
	fma.rn.ftz.f32 	%f18, %f16, %f81, %f79;
	fma.rn.ftz.f32 	%f83, %f16, %f82, %f80;
	mov.f32 	%f84, 0f3F800000;
	sub.ftz.f32 	%f19, %f84, %f83;
	add.s32 	%r48, %r44, -1;
	cvt.rn.f32.s32 	%f85, %r48;
	abs.ftz.f32 	%f86, %f18;
	mul.ftz.f32 	%f87, %f86, %f85;
	mov.b32 	%r49, %f87;
	and.b32  	%r50, %r49, -2147483648;
	or.b32  	%r51, %r50, 1056964608;
	mov.b32 	%f88, %r51;
	add.rz.ftz.f32 	%f89, %f87, %f88;
	cvt.rzi.f32.f32 	%f90, %f89;
	cvt.rzi.ftz.u32.f32 	%r1, %f90;
	add.s32 	%r52, %r45, -1;
	cvt.rn.f32.s32 	%f91, %r52;
	abs.ftz.f32 	%f92, %f19;
	mul.ftz.f32 	%f93, %f92, %f91;
	mov.b32 	%r53, %f93;
	and.b32  	%r54, %r53, -2147483648;
	or.b32  	%r55, %r54, 1056964608;
	mov.b32 	%f94, %r55;
	add.rz.ftz.f32 	%f95, %f93, %f94;
	cvt.rzi.f32.f32 	%f96, %f95;
	cvt.rzi.ftz.u32.f32 	%r2, %f96;
	// begin inline asm
	call (%rd112), _rt_buffer_get_64, (%rd56, %r23, %r24, %rd2, %rd60, %rd60, %rd60);
	// end inline asm
	ld.u32 	%r3, [%rd112];
	setp.lt.u32 	%p9, %r1, %r44;
	setp.lt.u32 	%p10, %r2, %r45;
	and.pred  	%p11, %p10, %p9;
	@%p11 bra 	$L__BB2_9;

	// begin inline asm
	call (%r56), _rt_print_active, ();
	// end inline asm
	setp.eq.s32 	%p12, %r56, 0;
	@%p12 bra 	$L__BB2_9;

	cvt.ftz.f64.f32 	%fd2, %f19;
	cvt.ftz.f64.f32 	%fd3, %f18;
	add.u64 	%rd122, %SP, 0;
	add.u64 	%rd123, %SPL, 0;
	st.local.v2.f64 	[%rd123], {%fd3, %fd2};
	mov.u64 	%rd124, $str;
	cvta.global.u64 	%rd125, %rd124;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd125;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd122;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r57, [retval0+0];
	} // callseq 1

$L__BB2_9:
	cvt.u64.u32 	%rd128, %r1;
	cvt.u64.u32 	%rd129, %r2;
	cvt.u64.u32 	%rd130, %r3;
	mov.u64 	%rd132, maskdata;
	cvta.global.u64 	%rd127, %rd132;
	mov.u32 	%r58, 3;
	mov.u32 	%r59, 1;
	mov.u64 	%rd131, 0;
	// begin inline asm
	call (%rd126), _rt_buffer_get_64, (%rd127, %r58, %r59, %rd128, %rd129, %rd130, %rd131);
	// end inline asm
	ld.u8 	%rs2, [%rd126];
	setp.eq.s16 	%p13, %rs2, 0;
	@%p13 bra 	$L__BB2_14;

	// begin inline asm
	call (%r60), _rt_potential_intersection, (%f17);
	// end inline asm
	setp.eq.s32 	%p14, %r60, 0;
	@%p14 bra 	$L__BB2_14;

	mov.u32 	%r61, 1;
	mov.u32 	%r62, 4;
	mov.u64 	%rd138, 0;
	// begin inline asm
	call (%rd133), _rt_buffer_get_64, (%rd4, %r61, %r62, %rd5, %rd138, %rd138, %rd138);
	// end inline asm
	ld.u32 	%r65, [%rd133];
	st.global.u32 	[UUID], %r65;
	mov.u32 	%r64, 0;
	// begin inline asm
	call (%r63), _rt_report_intersection, (%r64);
	// end inline asm
	bra.uni 	$L__BB2_14;

$L__BB2_12:
	// begin inline asm
	call (%r66), _rt_potential_intersection, (%f17);
	// end inline asm
	setp.eq.s32 	%p15, %r66, 0;
	@%p15 bra 	$L__BB2_14;

	mov.u32 	%r67, 1;
	mov.u32 	%r68, 4;
	mov.u64 	%rd145, 0;
	// begin inline asm
	call (%rd140), _rt_buffer_get_64, (%rd4, %r67, %r68, %rd5, %rd145, %rd145, %rd145);
	// end inline asm
	ld.u32 	%r71, [%rd140];
	st.global.u32 	[UUID], %r71;
	mov.u32 	%r70, 0;
	// begin inline asm
	call (%r69), _rt_report_intersection, (%r70);
	// end inline asm

$L__BB2_14:
	ret;

}
	// .globl	_Z15triangle_boundsiPf
.visible .entry _Z15triangle_boundsiPf(
	.param .u32 _Z15triangle_boundsiPf_param_0,
	.param .u64 _Z15triangle_boundsiPf_param_1
)
{
	.reg .f32 	%f<22>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<22>;


	ld.param.u32 	%rd16, [_Z15triangle_boundsiPf_param_0];
	ld.param.u64 	%rd19, [_Z15triangle_boundsiPf_param_1];
	cvta.to.global.u64 	%rd20, %rd19;
	mov.u64 	%rd21, triangle_vertices;
	cvta.global.u64 	%rd2, %rd21;
	mov.u32 	%r5, 2;
	mov.u32 	%r6, 12;
	mov.u64 	%rd18, 0;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r5, %r6, %rd18, %rd16, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd9, 1;
	// begin inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r5, %r6, %rd9, %rd16, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f4, [%rd7];
	ld.f32 	%f5, [%rd7+4];
	ld.f32 	%f6, [%rd7+8];
	mov.u64 	%rd15, 2;
	// begin inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r5, %r6, %rd15, %rd16, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f7, [%rd13];
	ld.f32 	%f8, [%rd13+4];
	ld.f32 	%f9, [%rd13+8];
	min.ftz.f32 	%f10, %f1, %f4;
	min.ftz.f32 	%f11, %f10, %f7;
	min.ftz.f32 	%f12, %f2, %f5;
	min.ftz.f32 	%f13, %f12, %f8;
	min.ftz.f32 	%f14, %f3, %f6;
	min.ftz.f32 	%f15, %f14, %f9;
	max.ftz.f32 	%f16, %f1, %f4;
	max.ftz.f32 	%f17, %f16, %f7;
	max.ftz.f32 	%f18, %f2, %f5;
	max.ftz.f32 	%f19, %f18, %f8;
	max.ftz.f32 	%f20, %f3, %f6;
	max.ftz.f32 	%f21, %f20, %f9;
	st.global.f32 	[%rd20], %f11;
	st.global.f32 	[%rd20+4], %f13;
	st.global.f32 	[%rd20+8], %f15;
	st.global.f32 	[%rd20+12], %f17;
	st.global.f32 	[%rd20+16], %f19;
	st.global.f32 	[%rd20+20], %f21;
	ret;

}
	// .globl	_Z14disk_intersecti
.visible .entry _Z14disk_intersecti(
	.param .u32 _Z14disk_intersecti_param_0
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<15>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<30>;


	ld.param.s32 	%rd4, [_Z14disk_intersecti_param_0];
	ld.global.u32 	%r3, [prd+8];
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, disk_UUID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r1, %r2, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%r4, [%rd2];
	setp.eq.s32 	%p1, %r3, %r4;
	@%p1 bra 	$L__BB4_6;

	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd3, %r1, %r2, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%rd17, [%rd9];
	mov.u64 	%rd22, twosided_flag;
	cvta.global.u64 	%rd16, %rd22;
	// begin inline asm
	call (%rd15), _rt_buffer_get_64, (%rd16, %r1, %r1, %rd17, %rd7, %rd7, %rd7);
	// end inline asm
	ld.s8 	%rs1, [%rd15];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB4_6;

	ld.global.f32 	%f1, [ray];
	mov.f32 	%f8, 0f00000000;
	sub.ftz.f32 	%f9, %f8, %f1;
	ld.global.f32 	%f2, [ray+4];
	sub.ftz.f32 	%f10, %f8, %f2;
	ld.global.f32 	%f3, [ray+8];
	sub.ftz.f32 	%f11, %f8, %f3;
	mul.ftz.f32 	%f12, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f13, %f9, 0f00000000, %f12;
	add.ftz.f32 	%f14, %f11, %f13;
	ld.global.f32 	%f4, [ray+12];
	ld.global.f32 	%f5, [ray+16];
	mul.ftz.f32 	%f15, %f5, 0f00000000;
	fma.rn.ftz.f32 	%f16, %f4, 0f00000000, %f15;
	ld.global.f32 	%f6, [ray+20];
	add.ftz.f32 	%f17, %f16, %f6;
	div.approx.ftz.f32 	%f7, %f14, %f17;
	cvt.ftz.f64.f32 	%fd1, %f7;
	setp.leu.f64 	%p3, %fd1, 0d3EB0C6F7A0B5ED8D;
	@%p3 bra 	$L__BB4_6;

	fma.rn.ftz.f32 	%f18, %f7, %f4, %f1;
	fma.rn.ftz.f32 	%f19, %f7, %f5, %f2;
	fma.rn.ftz.f32 	%f20, %f7, %f6, %f3;
	mul.ftz.f32 	%f21, %f19, %f19;
	fma.rn.ftz.f32 	%f22, %f18, %f18, %f21;
	fma.rn.ftz.f32 	%f23, %f20, %f20, %f22;
	setp.geu.ftz.f32 	%p4, %f23, 0f3F800000;
	@%p4 bra 	$L__BB4_6;

	// begin inline asm
	call (%r9), _rt_potential_intersection, (%f7);
	// end inline asm
	setp.eq.s32 	%p5, %r9, 0;
	@%p5 bra 	$L__BB4_6;

	mov.u32 	%r10, 1;
	mov.u32 	%r11, 4;
	mov.u64 	%rd28, 0;
	// begin inline asm
	call (%rd23), _rt_buffer_get_64, (%rd3, %r10, %r11, %rd4, %rd28, %rd28, %rd28);
	// end inline asm
	ld.u32 	%r14, [%rd23];
	st.global.u32 	[UUID], %r14;
	mov.u32 	%r13, 0;
	// begin inline asm
	call (%r12), _rt_report_intersection, (%r13);
	// end inline asm

$L__BB4_6:
	ret;

}
	// .globl	_Z11disk_boundsiPf
.visible .entry _Z11disk_boundsiPf(
	.param .u32 _Z11disk_boundsiPf_param_0,
	.param .u64 _Z11disk_boundsiPf_param_1
)
{
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z11disk_boundsiPf_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	mov.u32 	%r1, -1082130432;
	st.global.u32 	[%rd2], %r1;
	st.global.u32 	[%rd2+4], %r1;
	mov.u32 	%r2, -1165815185;
	st.global.u32 	[%rd2+8], %r2;
	mov.u32 	%r3, 1065353216;
	st.global.u32 	[%rd2+12], %r3;
	st.global.u32 	[%rd2+16], %r3;
	mov.u32 	%r4, 981668463;
	st.global.u32 	[%rd2+20], %r4;
	ret;

}
	// .globl	_Z15voxel_intersecti
.visible .entry _Z15voxel_intersecti(
	.param .u32 _Z15voxel_intersecti_param_0
)
{
	.reg .pred 	%p<14>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<39>;
	.reg .b32 	%r<28>;
	.reg .f64 	%fd<8>;
	.reg .b64 	%rd<67>;


	ld.param.u32 	%r1, [_Z15voxel_intersecti_param_0];
	ld.global.u32 	%r4, [prd+8];
	mov.u64 	%rd7, 0;
	cvt.s64.s32 	%rd4, %r1;
	mov.u64 	%rd8, voxel_UUID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r2, %r3, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%r5, [%rd2];
	setp.eq.s32 	%p1, %r4, %r5;
	@%p1 bra 	$L__BB6_5;

	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd3, %r2, %r3, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%rd17, [%rd9];
	mov.u64 	%rd22, twosided_flag;
	cvta.global.u64 	%rd16, %rd22;
	// begin inline asm
	call (%rd15), _rt_buffer_get_64, (%rd16, %r2, %r2, %rd17, %rd7, %rd7, %rd7);
	// end inline asm
	ld.s8 	%rs1, [%rd15];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB6_5;

	cvt.u64.u32 	%rd56, %r1;
	mov.u64 	%rd59, voxel_vertices;
	cvta.global.u64 	%rd24, %rd59;
	mov.u32 	%r20, 2;
	mov.u32 	%r21, 12;
	mov.u64 	%rd58, 0;
	// begin inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd58, %rd56, %rd58, %rd58);
	// end inline asm
	ld.f32 	%f2, [%rd23];
	// begin inline asm
	call (%rd29), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd58, %rd56, %rd58, %rd58);
	// end inline asm
	ld.f32 	%f3, [%rd29+4];
	// begin inline asm
	call (%rd35), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd58, %rd56, %rd58, %rd58);
	// end inline asm
	ld.f32 	%f4, [%rd35+8];
	mov.u64 	%rd55, 1;
	// begin inline asm
	call (%rd41), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd55, %rd56, %rd58, %rd58);
	// end inline asm
	ld.f32 	%f5, [%rd41];
	// begin inline asm
	call (%rd47), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd55, %rd56, %rd58, %rd58);
	// end inline asm
	ld.f32 	%f6, [%rd47+4];
	// begin inline asm
	call (%rd53), _rt_buffer_get_64, (%rd24, %r20, %r21, %rd55, %rd56, %rd58, %rd58);
	// end inline asm
	ld.global.f32 	%f7, [ray+12];
	cvt.ftz.f64.f32 	%fd1, %f7;
	rcp.rn.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64 	%f8, %fd2;
	setp.ltu.ftz.f32 	%p3, %f8, 0f00000000;
	selp.f32 	%f9, %f5, %f2, %p3;
	selp.f32 	%f10, %f2, %f5, %p3;
	ld.global.f32 	%f11, [ray];
	sub.ftz.f32 	%f12, %f10, %f11;
	sub.ftz.f32 	%f13, %f9, %f11;
	mul.ftz.f32 	%f14, %f12, %f8;
	mul.ftz.f32 	%f15, %f13, %f8;
	ld.global.f32 	%f16, [ray+16];
	cvt.ftz.f64.f32 	%fd3, %f16;
	rcp.rn.f64 	%fd4, %fd3;
	cvt.rn.ftz.f32.f64 	%f17, %fd4;
	setp.ltu.ftz.f32 	%p4, %f17, 0f00000000;
	selp.f32 	%f18, %f6, %f3, %p4;
	selp.f32 	%f19, %f3, %f6, %p4;
	ld.global.f32 	%f20, [ray+4];
	sub.ftz.f32 	%f21, %f19, %f20;
	sub.ftz.f32 	%f22, %f18, %f20;
	mul.ftz.f32 	%f23, %f21, %f17;
	mul.ftz.f32 	%f24, %f22, %f17;
	ld.global.f32 	%f25, [ray+20];
	cvt.ftz.f64.f32 	%fd5, %f25;
	rcp.rn.f64 	%fd6, %fd5;
	cvt.rn.ftz.f32.f64 	%f26, %fd6;
	setp.ltu.ftz.f32 	%p5, %f26, 0f00000000;
	ld.f32 	%f27, [%rd53+8];
	selp.f32 	%f28, %f27, %f4, %p5;
	selp.f32 	%f29, %f4, %f27, %p5;
	ld.global.f32 	%f30, [ray+8];
	sub.ftz.f32 	%f31, %f29, %f30;
	sub.ftz.f32 	%f32, %f28, %f30;
	mul.ftz.f32 	%f33, %f31, %f26;
	mul.ftz.f32 	%f34, %f32, %f26;
	setp.gt.ftz.f32 	%p6, %f15, %f24;
	selp.f32 	%f35, %f15, %f24, %p6;
	setp.gt.ftz.f32 	%p7, %f34, %f35;
	selp.f32 	%f1, %f34, %f35, %p7;
	setp.lt.ftz.f32 	%p8, %f14, %f23;
	selp.f32 	%f36, %f14, %f23, %p8;
	setp.lt.ftz.f32 	%p9, %f33, %f36;
	selp.f32 	%f37, %f33, %f36, %p9;
	setp.geu.ftz.f32 	%p10, %f1, %f37;
	cvt.ftz.f64.f32 	%fd7, %f1;
	setp.leu.f64 	%p11, %fd7, 0d3EE4F8B588E368F1;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB6_5;

	// begin inline asm
	call (%r22), _rt_potential_intersection, (%f1);
	// end inline asm
	setp.eq.s32 	%p13, %r22, 0;
	@%p13 bra 	$L__BB6_5;

	mov.u32 	%r23, 1;
	mov.u32 	%r24, 4;
	mov.u64 	%rd65, 0;
	// begin inline asm
	call (%rd60), _rt_buffer_get_64, (%rd3, %r23, %r24, %rd4, %rd65, %rd65, %rd65);
	// end inline asm
	ld.u32 	%r27, [%rd60];
	st.global.u32 	[UUID], %r27;
	mov.u32 	%r26, 0;
	// begin inline asm
	call (%r25), _rt_report_intersection, (%r26);
	// end inline asm

$L__BB6_5:
	ret;

}
	// .globl	_Z12voxel_boundsiPf
.visible .entry _Z12voxel_boundsiPf(
	.param .u32 _Z12voxel_boundsiPf_param_0,
	.param .u64 _Z12voxel_boundsiPf_param_1
)
{
	.reg .f32 	%f<7>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<16>;


	ld.param.u32 	%rd10, [_Z12voxel_boundsiPf_param_0];
	ld.param.u64 	%rd13, [_Z12voxel_boundsiPf_param_1];
	cvta.to.global.u64 	%rd14, %rd13;
	mov.u64 	%rd15, voxel_vertices;
	cvta.global.u64 	%rd2, %rd15;
	mov.u32 	%r3, 2;
	mov.u32 	%r4, 12;
	mov.u64 	%rd12, 0;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r3, %r4, %rd12, %rd10, %rd12, %rd12);
	// end inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd9, 1;
	// begin inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r3, %r4, %rd9, %rd10, %rd12, %rd12);
	// end inline asm
	ld.f32 	%f4, [%rd7];
	ld.f32 	%f5, [%rd7+4];
	ld.f32 	%f6, [%rd7+8];
	st.global.f32 	[%rd14], %f1;
	st.global.f32 	[%rd14+4], %f2;
	st.global.f32 	[%rd14+8], %f3;
	st.global.f32 	[%rd14+12], %f4;
	st.global.f32 	[%rd14+16], %f5;
	st.global.f32 	[%rd14+20], %f6;
	ret;

}
	// .globl	_Z14bbox_intersecti
.visible .entry _Z14bbox_intersecti(
	.param .u32 _Z14bbox_intersecti_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<73>;
	.reg .b32 	%r<24>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<55>;


	ld.param.u32 	%r1, [_Z14bbox_intersecti_param_0];
	ld.global.u32 	%r4, [prd+8];
	mov.u64 	%rd7, 0;
	cvt.s64.s32 	%rd4, %r1;
	mov.u64 	%rd8, bbox_UUID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r2, %r3, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%r5, [%rd2];
	setp.eq.s32 	%p1, %r4, %r5;
	@%p1 bra 	$L__BB8_9;

	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd3, %r2, %r3, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%rd17, [%rd9];
	mov.u64 	%rd22, twosided_flag;
	cvta.global.u64 	%rd16, %rd22;
	// begin inline asm
	call (%rd15), _rt_buffer_get_64, (%rd16, %r2, %r2, %rd17, %rd7, %rd7, %rd7);
	// end inline asm
	ld.s8 	%rs1, [%rd15];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB8_9;

	cvt.u64.u32 	%rd44, %r1;
	mov.u64 	%rd47, bbox_vertices;
	cvta.global.u64 	%rd24, %rd47;
	mov.u32 	%r16, 2;
	mov.u32 	%r17, 12;
	mov.u64 	%rd46, 0;
	// begin inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r16, %r17, %rd46, %rd44, %rd46, %rd46);
	// end inline asm
	ld.f32 	%f1, [%rd23];
	ld.f32 	%f2, [%rd23+4];
	ld.f32 	%f3, [%rd23+8];
	mov.u64 	%rd31, 1;
	// begin inline asm
	call (%rd29), _rt_buffer_get_64, (%rd24, %r16, %r17, %rd31, %rd44, %rd46, %rd46);
	// end inline asm
	ld.f32 	%f22, [%rd29];
	ld.f32 	%f23, [%rd29+4];
	ld.f32 	%f24, [%rd29+8];
	mov.u64 	%rd37, 2;
	// begin inline asm
	call (%rd35), _rt_buffer_get_64, (%rd24, %r16, %r17, %rd37, %rd44, %rd46, %rd46);
	// end inline asm
	ld.f32 	%f25, [%rd35];
	ld.f32 	%f26, [%rd35+4];
	ld.f32 	%f27, [%rd35+8];
	mov.u64 	%rd43, 3;
	// begin inline asm
	call (%rd41), _rt_buffer_get_64, (%rd24, %r16, %r17, %rd43, %rd44, %rd46, %rd46);
	// end inline asm
	sub.ftz.f32 	%f4, %f22, %f1;
	sub.ftz.f32 	%f5, %f23, %f2;
	sub.ftz.f32 	%f6, %f24, %f3;
	sub.ftz.f32 	%f28, %f25, %f1;
	sub.ftz.f32 	%f29, %f26, %f2;
	sub.ftz.f32 	%f30, %f27, %f3;
	mul.ftz.f32 	%f31, %f5, %f30;
	mul.ftz.f32 	%f32, %f6, %f29;
	sub.ftz.f32 	%f33, %f31, %f32;
	mul.ftz.f32 	%f34, %f6, %f28;
	mul.ftz.f32 	%f35, %f4, %f30;
	sub.ftz.f32 	%f36, %f34, %f35;
	mul.ftz.f32 	%f37, %f4, %f29;
	mul.ftz.f32 	%f38, %f5, %f28;
	sub.ftz.f32 	%f39, %f37, %f38;
	mul.ftz.f32 	%f40, %f36, %f36;
	fma.rn.ftz.f32 	%f41, %f33, %f33, %f40;
	fma.rn.ftz.f32 	%f42, %f39, %f39, %f41;
	rsqrt.approx.ftz.f32 	%f43, %f42;
	mul.ftz.f32 	%f44, %f43, %f33;
	mul.ftz.f32 	%f45, %f43, %f36;
	mul.ftz.f32 	%f46, %f43, %f39;
	ld.f32 	%f47, [%rd41];
	sub.ftz.f32 	%f7, %f47, %f1;
	ld.f32 	%f48, [%rd41+4];
	sub.ftz.f32 	%f8, %f48, %f2;
	ld.f32 	%f49, [%rd41+8];
	sub.ftz.f32 	%f9, %f49, %f3;
	ld.global.f32 	%f10, [ray];
	sub.ftz.f32 	%f50, %f1, %f10;
	ld.global.f32 	%f11, [ray+4];
	sub.ftz.f32 	%f51, %f2, %f11;
	ld.global.f32 	%f12, [ray+8];
	sub.ftz.f32 	%f52, %f3, %f12;
	mul.ftz.f32 	%f53, %f51, %f45;
	fma.rn.ftz.f32 	%f54, %f50, %f44, %f53;
	fma.rn.ftz.f32 	%f55, %f52, %f46, %f54;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [ray+16];
	mul.ftz.f32 	%f56, %f14, %f45;
	fma.rn.ftz.f32 	%f57, %f13, %f44, %f56;
	ld.global.f32 	%f15, [ray+20];
	fma.rn.ftz.f32 	%f58, %f15, %f46, %f57;
	div.approx.ftz.f32 	%f16, %f55, %f58;
	setp.nan.ftz.f32 	%p3, %f16, %f16;
	cvt.ftz.f64.f32 	%fd1, %f16;
	setp.leu.f64 	%p4, %fd1, 0d3E45798EE2308C3A;
	or.pred  	%p5, %p3, %p4;
	setp.geu.ftz.f32 	%p6, %f16, 0f4CBEBC20;
	or.pred  	%p7, %p6, %p5;
	@%p7 bra 	$L__BB8_9;

	fma.rn.ftz.f32 	%f59, %f16, %f13, %f10;
	fma.rn.ftz.f32 	%f60, %f16, %f14, %f11;
	fma.rn.ftz.f32 	%f61, %f16, %f15, %f12;
	sub.ftz.f32 	%f17, %f59, %f1;
	sub.ftz.f32 	%f18, %f60, %f2;
	sub.ftz.f32 	%f19, %f61, %f3;
	mul.ftz.f32 	%f62, %f5, %f18;
	fma.rn.ftz.f32 	%f63, %f4, %f17, %f62;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f63;
	setp.leu.ftz.f32 	%p8, %f20, 0f00000000;
	@%p8 bra 	$L__BB8_9;

	mul.ftz.f32 	%f64, %f5, %f5;
	fma.rn.ftz.f32 	%f65, %f4, %f4, %f64;
	fma.rn.ftz.f32 	%f66, %f6, %f6, %f65;
	setp.geu.ftz.f32 	%p9, %f20, %f66;
	@%p9 bra 	$L__BB8_9;

	mul.ftz.f32 	%f67, %f8, %f18;
	fma.rn.ftz.f32 	%f68, %f7, %f17, %f67;
	fma.rn.ftz.f32 	%f21, %f9, %f19, %f68;
	setp.leu.ftz.f32 	%p10, %f21, 0f00000000;
	@%p10 bra 	$L__BB8_9;

	mul.ftz.f32 	%f69, %f8, %f8;
	fma.rn.ftz.f32 	%f70, %f7, %f7, %f69;
	fma.rn.ftz.f32 	%f71, %f9, %f9, %f70;
	setp.geu.ftz.f32 	%p11, %f21, %f71;
	@%p11 bra 	$L__BB8_9;

	// begin inline asm
	call (%r18), _rt_potential_intersection, (%f16);
	// end inline asm
	setp.eq.s32 	%p12, %r18, 0;
	@%p12 bra 	$L__BB8_9;

	mov.u32 	%r19, 1;
	mov.u32 	%r20, 4;
	mov.u64 	%rd53, 0;
	// begin inline asm
	call (%rd48), _rt_buffer_get_64, (%rd3, %r19, %r20, %rd4, %rd53, %rd53, %rd53);
	// end inline asm
	ld.u32 	%r23, [%rd48];
	st.global.u32 	[UUID], %r23;
	mov.u32 	%r22, 0;
	// begin inline asm
	call (%r21), _rt_report_intersection, (%r22);
	// end inline asm

$L__BB8_9:
	ret;

}
	// .globl	_Z11bbox_boundsiPf
.visible .entry _Z11bbox_boundsiPf(
	.param .u32 _Z11bbox_boundsiPf_param_0,
	.param .u64 _Z11bbox_boundsiPf_param_1
)
{
	.reg .f32 	%f<31>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<28>;


	ld.param.u32 	%rd22, [_Z11bbox_boundsiPf_param_0];
	ld.param.u64 	%rd25, [_Z11bbox_boundsiPf_param_1];
	cvta.to.global.u64 	%rd26, %rd25;
	mov.u64 	%rd27, bbox_vertices;
	cvta.global.u64 	%rd2, %rd27;
	mov.u32 	%r7, 2;
	mov.u32 	%r8, 12;
	mov.u64 	%rd24, 0;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd24, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd9, 1;
	// begin inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd9, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f4, [%rd7];
	ld.f32 	%f5, [%rd7+4];
	ld.f32 	%f6, [%rd7+8];
	mov.u64 	%rd15, 2;
	// begin inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd15, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f7, [%rd13];
	ld.f32 	%f8, [%rd13+4];
	ld.f32 	%f9, [%rd13+8];
	mov.u64 	%rd21, 3;
	// begin inline asm
	call (%rd19), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd21, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f10, [%rd19];
	ld.f32 	%f11, [%rd19+4];
	ld.f32 	%f12, [%rd19+8];
	min.ftz.f32 	%f13, %f1, %f4;
	min.ftz.f32 	%f14, %f7, %f10;
	min.ftz.f32 	%f15, %f13, %f14;
	min.ftz.f32 	%f16, %f2, %f5;
	min.ftz.f32 	%f17, %f8, %f11;
	min.ftz.f32 	%f18, %f16, %f17;
	min.ftz.f32 	%f19, %f3, %f6;
	min.ftz.f32 	%f20, %f9, %f12;
	min.ftz.f32 	%f21, %f19, %f20;
	max.ftz.f32 	%f22, %f1, %f4;
	max.ftz.f32 	%f23, %f7, %f10;
	max.ftz.f32 	%f24, %f22, %f23;
	max.ftz.f32 	%f25, %f2, %f5;
	max.ftz.f32 	%f26, %f8, %f11;
	max.ftz.f32 	%f27, %f25, %f26;
	max.ftz.f32 	%f28, %f3, %f6;
	max.ftz.f32 	%f29, %f9, %f12;
	max.ftz.f32 	%f30, %f28, %f29;
	st.global.f32 	[%rd26], %f15;
	st.global.f32 	[%rd26+4], %f18;
	st.global.f32 	[%rd26+8], %f21;
	st.global.f32 	[%rd26+12], %f24;
	st.global.f32 	[%rd26+16], %f27;
	st.global.f32 	[%rd26+20], %f30;
	ret;

}
	// .globl	_Z14tile_intersecti
.visible .entry _Z14tile_intersecti(
	.param .u32 _Z14tile_intersecti_param_0
)
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<108>;
	.reg .b32 	%r<68>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<135>;


	ld.param.u32 	%r2, [_Z14tile_intersecti_param_0];
	ld.global.u32 	%r5, [prd+8];
	mov.u64 	%rd8, 0;
	cvt.s64.s32 	%rd5, %r2;
	mov.u64 	%rd9, tile_UUID;
	cvta.global.u64 	%rd4, %rd9;
	mov.u32 	%r3, 1;
	mov.u32 	%r4, 4;
	// begin inline asm
	call (%rd3), _rt_buffer_get_64, (%rd4, %r3, %r4, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%r6, [%rd3];
	setp.eq.s32 	%p1, %r5, %r6;
	@%p1 bra 	$L__BB10_13;

	// begin inline asm
	call (%rd10), _rt_buffer_get_64, (%rd4, %r3, %r4, %rd5, %rd8, %rd8, %rd8);
	// end inline asm
	ld.u32 	%rd18, [%rd10];
	mov.u64 	%rd23, twosided_flag;
	cvta.global.u64 	%rd17, %rd23;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r3, %r3, %rd18, %rd8, %rd8, %rd8);
	// end inline asm
	ld.s8 	%rs1, [%rd16];
	setp.gt.s16 	%p2, %rs1, 1;
	@%p2 bra 	$L__BB10_13;

	cvt.u64.u32 	%rd45, %r2;
	mov.u64 	%rd48, tile_vertices;
	cvta.global.u64 	%rd25, %rd48;
	mov.u32 	%r17, 2;
	mov.u32 	%r18, 12;
	mov.u64 	%rd47, 0;
	// begin inline asm
	call (%rd24), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd47, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f1, [%rd24];
	ld.f32 	%f2, [%rd24+4];
	ld.f32 	%f3, [%rd24+8];
	mov.u64 	%rd32, 1;
	// begin inline asm
	call (%rd30), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd32, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f26, [%rd30];
	ld.f32 	%f27, [%rd30+4];
	ld.f32 	%f28, [%rd30+8];
	mov.u64 	%rd38, 2;
	// begin inline asm
	call (%rd36), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd38, %rd45, %rd47, %rd47);
	// end inline asm
	ld.f32 	%f29, [%rd36];
	ld.f32 	%f30, [%rd36+4];
	ld.f32 	%f31, [%rd36+8];
	mov.u64 	%rd44, 3;
	// begin inline asm
	call (%rd42), _rt_buffer_get_64, (%rd25, %r17, %r18, %rd44, %rd45, %rd47, %rd47);
	// end inline asm
	sub.ftz.f32 	%f4, %f26, %f1;
	sub.ftz.f32 	%f5, %f27, %f2;
	sub.ftz.f32 	%f6, %f28, %f3;
	sub.ftz.f32 	%f32, %f29, %f1;
	sub.ftz.f32 	%f33, %f30, %f2;
	sub.ftz.f32 	%f34, %f31, %f3;
	mul.ftz.f32 	%f35, %f5, %f34;
	mul.ftz.f32 	%f36, %f6, %f33;
	sub.ftz.f32 	%f37, %f35, %f36;
	mul.ftz.f32 	%f38, %f6, %f32;
	mul.ftz.f32 	%f39, %f4, %f34;
	sub.ftz.f32 	%f40, %f38, %f39;
	mul.ftz.f32 	%f41, %f4, %f33;
	mul.ftz.f32 	%f42, %f5, %f32;
	sub.ftz.f32 	%f43, %f41, %f42;
	mul.ftz.f32 	%f44, %f40, %f40;
	fma.rn.ftz.f32 	%f45, %f37, %f37, %f44;
	fma.rn.ftz.f32 	%f46, %f43, %f43, %f45;
	rsqrt.approx.ftz.f32 	%f47, %f46;
	mul.ftz.f32 	%f48, %f47, %f37;
	mul.ftz.f32 	%f49, %f47, %f40;
	mul.ftz.f32 	%f50, %f47, %f43;
	ld.f32 	%f51, [%rd42];
	sub.ftz.f32 	%f7, %f51, %f1;
	ld.f32 	%f52, [%rd42+4];
	sub.ftz.f32 	%f8, %f52, %f2;
	ld.f32 	%f53, [%rd42+8];
	sub.ftz.f32 	%f9, %f53, %f3;
	ld.global.f32 	%f10, [ray];
	sub.ftz.f32 	%f54, %f1, %f10;
	ld.global.f32 	%f11, [ray+4];
	sub.ftz.f32 	%f55, %f2, %f11;
	ld.global.f32 	%f12, [ray+8];
	sub.ftz.f32 	%f56, %f3, %f12;
	mul.ftz.f32 	%f57, %f55, %f49;
	fma.rn.ftz.f32 	%f58, %f54, %f48, %f57;
	fma.rn.ftz.f32 	%f59, %f56, %f50, %f58;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [ray+16];
	mul.ftz.f32 	%f60, %f14, %f49;
	fma.rn.ftz.f32 	%f61, %f13, %f48, %f60;
	ld.global.f32 	%f15, [ray+20];
	fma.rn.ftz.f32 	%f62, %f15, %f50, %f61;
	div.approx.ftz.f32 	%f16, %f59, %f62;
	setp.nan.ftz.f32 	%p3, %f16, %f16;
	cvt.ftz.f64.f32 	%fd1, %f16;
	setp.leu.f64 	%p4, %fd1, 0d3E45798EE2308C3A;
	or.pred  	%p5, %p3, %p4;
	setp.geu.ftz.f32 	%p6, %f16, 0f4CBEBC20;
	or.pred  	%p7, %p6, %p5;
	@%p7 bra 	$L__BB10_13;

	fma.rn.ftz.f32 	%f63, %f16, %f13, %f10;
	fma.rn.ftz.f32 	%f64, %f16, %f14, %f11;
	fma.rn.ftz.f32 	%f65, %f16, %f15, %f12;
	sub.ftz.f32 	%f17, %f63, %f1;
	sub.ftz.f32 	%f18, %f64, %f2;
	sub.ftz.f32 	%f19, %f65, %f3;
	mul.ftz.f32 	%f66, %f5, %f18;
	fma.rn.ftz.f32 	%f67, %f4, %f17, %f66;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f67;
	setp.leu.ftz.f32 	%p8, %f20, 0f00000000;
	@%p8 bra 	$L__BB10_13;

	mul.ftz.f32 	%f68, %f5, %f5;
	fma.rn.ftz.f32 	%f69, %f4, %f4, %f68;
	fma.rn.ftz.f32 	%f21, %f6, %f6, %f69;
	setp.geu.ftz.f32 	%p9, %f20, %f21;
	@%p9 bra 	$L__BB10_13;

	mul.ftz.f32 	%f70, %f8, %f18;
	fma.rn.ftz.f32 	%f71, %f7, %f17, %f70;
	fma.rn.ftz.f32 	%f22, %f9, %f19, %f71;
	setp.leu.ftz.f32 	%p10, %f22, 0f00000000;
	@%p10 bra 	$L__BB10_13;

	mul.ftz.f32 	%f72, %f8, %f8;
	fma.rn.ftz.f32 	%f73, %f7, %f7, %f72;
	fma.rn.ftz.f32 	%f23, %f9, %f9, %f73;
	setp.geu.ftz.f32 	%p11, %f22, %f23;
	@%p11 bra 	$L__BB10_13;

	sqrt.approx.ftz.f32 	%f74, %f21;
	div.approx.ftz.f32 	%f75, %f20, %f74;
	div.approx.ftz.f32 	%f24, %f75, %f74;
	sqrt.approx.ftz.f32 	%f76, %f23;
	div.approx.ftz.f32 	%f77, %f22, %f76;
	div.approx.ftz.f32 	%f25, %f77, %f76;
	mov.u32 	%r23, 1;
	mov.u32 	%r24, 4;
	mov.u64 	%rd66, 0;
	// begin inline asm
	call (%rd49), _rt_buffer_get_64, (%rd4, %r23, %r24, %rd5, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%r1, [%rd49];
	cvt.u64.u32 	%rd57, %r1;
	mov.u64 	%rd68, objectID;
	cvta.global.u64 	%rd56, %rd68;
	// begin inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r23, %r24, %rd57, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%rd2, [%rd55];
	mov.u64 	%rd69, maskID;
	cvta.global.u64 	%rd62, %rd69;
	// begin inline asm
	call (%rd61), _rt_buffer_get_64, (%rd62, %r23, %r24, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	ld.u32 	%r25, [%rd61];
	setp.eq.s32 	%p12, %r25, -1;
	@%p12 bra 	$L__BB10_11;

	// begin inline asm
	call (%rd70), _rt_buffer_get_64, (%rd62, %r23, %r24, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	ld.s32 	%rd78, [%rd70];
	mov.u64 	%rd95, masksize;
	cvta.global.u64 	%rd77, %rd95;
	mov.u32 	%r29, 8;
	// begin inline asm
	call (%rd76), _rt_buffer_get_64, (%rd77, %r23, %r29, %rd78, %rd66, %rd66, %rd66);
	// end inline asm
	ld.v2.u32 	{%r34, %r35}, [%rd76];
	add.s32 	%r38, %r34, -1;
	cvt.rn.f32.s32 	%f78, %r38;
	mul.ftz.f32 	%f79, %f24, %f78;
	cvt.rmi.ftz.f32.f32 	%f80, %f79;
	cvt.rzi.ftz.u32.f32 	%r39, %f80;
	add.s32 	%r40, %r35, -1;
	cvt.rn.f32.s32 	%f81, %r40;
	mov.f32 	%f82, 0f3F800000;
	sub.ftz.f32 	%f83, %f82, %f25;
	mul.ftz.f32 	%f84, %f83, %f81;
	cvt.rmi.ftz.f32.f32 	%f85, %f84;
	cvt.rzi.ftz.u32.f32 	%r41, %f85;
	// begin inline asm
	call (%rd82), _rt_buffer_get_64, (%rd62, %r23, %r24, %rd2, %rd66, %rd66, %rd66);
	// end inline asm
	cvt.u64.u32 	%rd90, %r39;
	cvt.u64.u32 	%rd91, %r41;
	ld.u32 	%rd92, [%rd82];
	mov.u64 	%rd96, maskdata;
	cvta.global.u64 	%rd89, %rd96;
	mov.u32 	%r32, 3;
	// begin inline asm
	call (%rd88), _rt_buffer_get_64, (%rd89, %r32, %r23, %rd90, %rd91, %rd92, %rd66);
	// end inline asm
	ld.u8 	%rs2, [%rd88];
	setp.eq.s16 	%p13, %rs2, 0;
	@%p13 bra 	$L__BB10_13;

	// begin inline asm
	call (%r42), _rt_potential_intersection, (%f16);
	// end inline asm
	setp.eq.s32 	%p14, %r42, 0;
	@%p14 bra 	$L__BB10_13;

	cvt.rn.f32.u32 	%f87, %r1;
	mov.u64 	%rd115, object_subdivisions;
	cvta.global.u64 	%rd98, %rd115;
	mov.u32 	%r47, 1;
	mov.u32 	%r48, 8;
	mov.u64 	%rd114, 0;
	// begin inline asm
	call (%rd97), _rt_buffer_get_64, (%rd98, %r47, %r48, %rd2, %rd114, %rd114, %rd114);
	// end inline asm
	ld.u32 	%r51, [%rd97+4];
	cvt.rn.f32.s32 	%f88, %r51;
	mul.ftz.f32 	%f89, %f25, %f88;
	cvt.rmi.ftz.f32.f32 	%f90, %f89;
	// begin inline asm
	call (%rd103), _rt_buffer_get_64, (%rd98, %r47, %r48, %rd2, %rd114, %rd114, %rd114);
	// end inline asm
	ld.u32 	%r52, [%rd103];
	cvt.rn.f32.s32 	%f91, %r52;
	fma.rn.ftz.f32 	%f92, %f90, %f91, %f87;
	// begin inline asm
	call (%rd109), _rt_buffer_get_64, (%rd98, %r47, %r48, %rd2, %rd114, %rd114, %rd114);
	// end inline asm
	ld.u32 	%r53, [%rd109];
	cvt.rn.f32.s32 	%f93, %r53;
	mul.ftz.f32 	%f94, %f24, %f93;
	cvt.rmi.ftz.f32.f32 	%f95, %f94;
	add.ftz.f32 	%f96, %f92, %f95;
	cvt.rzi.ftz.u32.f32 	%r54, %f96;
	st.global.u32 	[UUID], %r54;
	mov.u32 	%r50, 0;
	// begin inline asm
	call (%r49), _rt_report_intersection, (%r50);
	// end inline asm
	bra.uni 	$L__BB10_13;

$L__BB10_11:
	// begin inline asm
	call (%r55), _rt_potential_intersection, (%f16);
	// end inline asm
	setp.eq.s32 	%p15, %r55, 0;
	@%p15 bra 	$L__BB10_13;

	cvt.rn.f32.u32 	%f98, %r1;
	mov.u64 	%rd134, object_subdivisions;
	cvta.global.u64 	%rd117, %rd134;
	mov.u32 	%r60, 1;
	mov.u32 	%r61, 8;
	mov.u64 	%rd133, 0;
	// begin inline asm
	call (%rd116), _rt_buffer_get_64, (%rd117, %r60, %r61, %rd2, %rd133, %rd133, %rd133);
	// end inline asm
	ld.u32 	%r64, [%rd116+4];
	cvt.rn.f32.s32 	%f99, %r64;
	mul.ftz.f32 	%f100, %f25, %f99;
	cvt.rmi.ftz.f32.f32 	%f101, %f100;
	// begin inline asm
	call (%rd122), _rt_buffer_get_64, (%rd117, %r60, %r61, %rd2, %rd133, %rd133, %rd133);
	// end inline asm
	ld.u32 	%r65, [%rd122];
	cvt.rn.f32.s32 	%f102, %r65;
	fma.rn.ftz.f32 	%f103, %f101, %f102, %f98;
	// begin inline asm
	call (%rd128), _rt_buffer_get_64, (%rd117, %r60, %r61, %rd2, %rd133, %rd133, %rd133);
	// end inline asm
	ld.u32 	%r66, [%rd128];
	cvt.rn.f32.s32 	%f104, %r66;
	mul.ftz.f32 	%f105, %f24, %f104;
	cvt.rmi.ftz.f32.f32 	%f106, %f105;
	add.ftz.f32 	%f107, %f103, %f106;
	cvt.rzi.ftz.u32.f32 	%r67, %f107;
	st.global.u32 	[UUID], %r67;
	mov.u32 	%r63, 0;
	// begin inline asm
	call (%r62), _rt_report_intersection, (%r63);
	// end inline asm

$L__BB10_13:
	ret;

}
	// .globl	_Z11tile_boundsiPf
.visible .entry _Z11tile_boundsiPf(
	.param .u32 _Z11tile_boundsiPf_param_0,
	.param .u64 _Z11tile_boundsiPf_param_1
)
{
	.reg .f32 	%f<31>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<28>;


	ld.param.u32 	%rd22, [_Z11tile_boundsiPf_param_0];
	ld.param.u64 	%rd25, [_Z11tile_boundsiPf_param_1];
	cvta.to.global.u64 	%rd26, %rd25;
	mov.u64 	%rd27, tile_vertices;
	cvta.global.u64 	%rd2, %rd27;
	mov.u32 	%r7, 2;
	mov.u32 	%r8, 12;
	mov.u64 	%rd24, 0;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd24, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f1, [%rd1];
	ld.f32 	%f2, [%rd1+4];
	ld.f32 	%f3, [%rd1+8];
	mov.u64 	%rd9, 1;
	// begin inline asm
	call (%rd7), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd9, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f4, [%rd7];
	ld.f32 	%f5, [%rd7+4];
	ld.f32 	%f6, [%rd7+8];
	mov.u64 	%rd15, 2;
	// begin inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd15, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f7, [%rd13];
	ld.f32 	%f8, [%rd13+4];
	ld.f32 	%f9, [%rd13+8];
	mov.u64 	%rd21, 3;
	// begin inline asm
	call (%rd19), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd21, %rd22, %rd24, %rd24);
	// end inline asm
	ld.f32 	%f10, [%rd19];
	ld.f32 	%f11, [%rd19+4];
	ld.f32 	%f12, [%rd19+8];
	min.ftz.f32 	%f13, %f1, %f4;
	min.ftz.f32 	%f14, %f7, %f10;
	min.ftz.f32 	%f15, %f13, %f14;
	min.ftz.f32 	%f16, %f2, %f5;
	min.ftz.f32 	%f17, %f8, %f11;
	min.ftz.f32 	%f18, %f16, %f17;
	min.ftz.f32 	%f19, %f3, %f6;
	min.ftz.f32 	%f20, %f9, %f12;
	min.ftz.f32 	%f21, %f19, %f20;
	max.ftz.f32 	%f22, %f1, %f4;
	max.ftz.f32 	%f23, %f7, %f10;
	max.ftz.f32 	%f24, %f22, %f23;
	max.ftz.f32 	%f25, %f2, %f5;
	max.ftz.f32 	%f26, %f8, %f11;
	max.ftz.f32 	%f27, %f25, %f26;
	max.ftz.f32 	%f28, %f3, %f6;
	max.ftz.f32 	%f29, %f9, %f12;
	max.ftz.f32 	%f30, %f28, %f29;
	st.global.f32 	[%rd26], %f15;
	st.global.f32 	[%rd26+4], %f18;
	st.global.f32 	[%rd26+8], %f21;
	st.global.f32 	[%rd26+12], %f24;
	st.global.f32 	[%rd26+16], %f27;
	st.global.f32 	[%rd26+20], %f30;
	ret;

}

