//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34841621
// Cuda compilation tools, release 12.6, V12.6.77
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	_Z18closest_hit_directv
.global .align 4 .b8 top_object[4];
.global .align 4 .u32 random_seed;
.global .align 4 .u32 launch_offset;
.global .align 4 .u32 launch_face;
.global .align 4 .u32 Nbands_launch;
.global .align 4 .u32 Nbands_global;
.global .align 1 .b8 band_launch_flag[1];
.global .align 4 .u32 direct_ray_type;
.global .align 4 .u32 diffuse_ray_type;
.global .align 4 .u32 camera_ray_type;
.global .align 4 .u32 pixel_label_ray_type;
.global .align 4 .b8 launch_index[12];
.global .align 4 .b8 launch_dim[12];
.global .align 1 .b8 maskdata[1];
.global .align 1 .b8 masksize[1];
.global .align 1 .b8 maskID[1];
.global .align 1 .b8 uvdata[1];
.global .align 1 .b8 uvID[1];
.global .align 1 .b8 objectID[1];
.global .align 1 .b8 object_subdivisions[1];
.global .align 1 .b8 primitiveID[1];
.global .align 4 .u32 Nsources;
.global .align 1 .b8 source_fluxes[1];
.global .align 1 .b8 source_positions[1];
.global .align 1 .b8 source_rotations[1];
.global .align 1 .b8 source_widths[1];
.global .align 1 .b8 source_types[1];
.global .align 1 .b8 diffuse_flux[1];
.global .align 1 .b8 diffuse_extinction[1];
.global .align 1 .b8 diffuse_peak_dir[1];
.global .align 1 .b8 diffuse_dist_norm[1];
.global .align 1 .b8 Rsky[1];
.global .align 1 .b8 patch_vertices[1];
.global .align 1 .b8 patch_UUID[1];
.global .align 1 .b8 triangle_vertices[1];
.global .align 1 .b8 triangle_UUID[1];
.global .align 1 .b8 disk_UUID[1];
.global .align 1 .b8 tile_vertices[1];
.global .align 1 .b8 tile_UUID[1];
.global .align 1 .b8 voxel_vertices[1];
.global .align 1 .b8 voxel_UUID[1];
.global .align 1 .b8 bbox_vertices[1];
.global .align 1 .b8 bbox_UUID[1];
.global .align 4 .u32 Nprimitives;
.global .align 8 .b8 periodic_flag[8];
.global .align 1 .b8 twosided_flag[1];
.global .align 1 .b8 transform_matrix[1];
.global .align 1 .b8 primitive_type[1];
.global .align 1 .b8 primitive_solid_fraction[1];
.global .align 1 .b8 rho[1];
.global .align 1 .b8 tau[1];
.global .align 1 .b8 rho_cam[1];
.global .align 1 .b8 tau_cam[1];
.global .align 1 .b8 specular_exponent[1];
.global .align 1 .b8 specular_scale[1];
.global .align 4 .u32 specular_reflection_enabled;
.global .align 1 .b8 radiation_in[1];
.global .align 1 .b8 radiation_in_camera[1];
.global .align 1 .b8 radiation_out_top[1];
.global .align 1 .b8 radiation_out_bottom[1];
.global .align 1 .b8 scatter_buff_top[1];
.global .align 1 .b8 scatter_buff_bottom[1];
.global .align 1 .b8 scatter_buff_top_cam[1];
.global .align 1 .b8 scatter_buff_bottom_cam[1];
.global .align 1 .b8 camera_pixel_label[1];
.global .align 1 .b8 camera_pixel_depth[1];
.global .align 4 .u32 camera_ID;
.global .align 4 .u32 Ncameras;
.global .align 4 .b8 camera_position[12];
.global .align 8 .b8 camera_direction[8];
.global .align 4 .f32 camera_lens_diameter;
.global .align 4 .f32 FOV_aspect_ratio;
.global .align 4 .f32 camera_focal_length;
.global .align 4 .f32 camera_viewplane_length;
.global .align 4 .b8 ray[36];
.global .align 4 .f32 t_hit;
.global .align 8 .b8 prd[40];
.global .align 4 .u32 UUID;
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11random_seedE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13launch_offsetE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11launch_faceE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13Nbands_launchE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13Nbands_globalE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15direct_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16diffuse_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15camera_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo20pixel_label_ray_typeE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10launch_dimE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8NsourcesE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11NprimitivesE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13periodic_flagE[8] = {82, 97, 121, 0, 8};
.global .align 4 .b8 _ZN21rti_internal_typeinfo27specular_reflection_enabledE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9camera_IDE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8NcamerasE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo15camera_positionE[8] = {82, 97, 121, 0, 12};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16camera_directionE[8] = {82, 97, 121, 0, 8};
.global .align 4 .b8 _ZN21rti_internal_typeinfo20camera_lens_diameterE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16FOV_aspect_ratioE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19camera_focal_lengthE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo23camera_viewplane_lengthE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5t_hitE[8] = {82, 97, 121, 0, 4};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3prdE[8] = {82, 97, 121, 0, 40};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4UUIDE[8] = {82, 97, 121, 0, 4};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11random_seedE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13launch_offsetE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11launch_faceE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13Nbands_launchE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13Nbands_globalE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15direct_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename16diffuse_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15camera_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename20pixel_label_ray_typeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename10launch_dimE[6] = {117, 105, 110, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename8NsourcesE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename11NprimitivesE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename13periodic_flagE[7] = {102, 108, 111, 97, 116, 50};
.global .align 1 .b8 _ZN21rti_internal_typename27specular_reflection_enabledE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename9camera_IDE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename8NcamerasE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 1 .b8 _ZN21rti_internal_typename15camera_positionE[7] = {102, 108, 111, 97, 116, 51};
.global .align 1 .b8 _ZN21rti_internal_typename16camera_directionE[7] = {102, 108, 111, 97, 116, 50};
.global .align 1 .b8 _ZN21rti_internal_typename20camera_lens_diameterE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename16FOV_aspect_ratioE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename19camera_focal_lengthE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename23camera_viewplane_lengthE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121};
.global .align 1 .b8 _ZN21rti_internal_typename5t_hitE[6] = {102, 108, 111, 97, 116};
.global .align 1 .b8 _ZN21rti_internal_typename3prdE[11] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97};
.global .align 1 .b8 _ZN21rti_internal_typename4UUIDE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116};
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11random_seedE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13launch_offsetE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11launch_faceE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13Nbands_launchE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13Nbands_globalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15direct_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16diffuse_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15camera_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum20pixel_label_ray_typeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10launch_dimE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8NsourcesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11NprimitivesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13periodic_flagE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum27specular_reflection_enabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9camera_IDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8NcamerasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum15camera_positionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16camera_directionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum20camera_lens_diameterE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16FOV_aspect_ratioE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19camera_focal_lengthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum23camera_viewplane_lengthE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5t_hitE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3prdE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4UUIDE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11random_seedE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13launch_offsetE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11launch_faceE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13Nbands_launchE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13Nbands_globalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15direct_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16diffuse_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15camera_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic20pixel_label_ray_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120};
.global .align 1 .b8 _ZN21rti_internal_semantic10launch_dimE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109};
.global .align 1 .b8 _ZN21rti_internal_semantic8NsourcesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11NprimitivesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13periodic_flagE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic27specular_reflection_enabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9camera_IDE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8NcamerasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic15camera_positionE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16camera_directionE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic20camera_lens_diameterE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16FOV_aspect_ratioE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19camera_focal_lengthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic23camera_viewplane_lengthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121};
.global .align 1 .b8 _ZN21rti_internal_semantic5t_hitE[23] = {114, 116, 73, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 68, 105, 115, 116, 97, 110, 99, 101};
.global .align 1 .b8 _ZN21rti_internal_semantic3prdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100};
.global .align 1 .b8 _ZN21rti_internal_semantic4UUIDE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 85, 85, 73, 68};
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11random_seedE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13launch_offsetE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11launch_faceE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13Nbands_launchE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13Nbands_globalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15direct_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16diffuse_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15camera_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation20pixel_label_ray_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10launch_dimE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8NsourcesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11NprimitivesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13periodic_flagE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation27specular_reflection_enabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9camera_IDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8NcamerasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation15camera_positionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16camera_directionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation20camera_lens_diameterE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16FOV_aspect_ratioE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19camera_focal_lengthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation23camera_viewplane_lengthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5t_hitE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3prdE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4UUIDE[1];

.visible .entry _Z18closest_hit_directv()
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<41>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<41>;


	ld.global.u32 	%rd4, [UUID];
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, objectID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r1, %r2, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.global.v2.f32 	{%f9, %f10}, [periodic_flag];
	setp.neu.ftz.f32 	%p1, %f9, 0f3F800000;
	setp.neu.ftz.f32 	%p2, %f10, 0f3F800000;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB0_12;

	ld.u32 	%rd11, [%rd2];
	mov.u64 	%rd15, primitive_type;
	cvta.global.u64 	%rd10, %rd15;
	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r1, %r2, %rd11, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%r5, [%rd9];
	setp.ne.s32 	%p4, %r5, 5;
	@%p4 bra 	$L__BB0_12;

	mov.u64 	%rd39, 0;
	mov.u16 	%rs1, 1;
	st.global.u8 	[prd+21], %rs1;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [t_hit];
	ld.global.f32 	%f15, [ray+16];
	ld.global.f32 	%f16, [ray+20];
	ld.global.f32 	%f17, [ray];
	fma.rn.ftz.f32 	%f1, %f14, %f13, %f17;
	ld.global.f32 	%f18, [ray+4];
	fma.rn.ftz.f32 	%f2, %f14, %f15, %f18;
	ld.global.f32 	%f19, [ray+8];
	fma.rn.ftz.f32 	%f20, %f14, %f16, %f19;
	mov.u64 	%rd40, bbox_vertices;
	cvta.global.u64 	%rd17, %rd40;
	mov.u32 	%r12, 2;
	mov.u32 	%r13, 12;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r12, %r13, %rd39, %rd39, %rd39, %rd39);
	// end inline asm
	ld.f32 	%f3, [%rd16];
	mov.u64 	%rd37, 1;
	// begin inline asm
	call (%rd22), _rt_buffer_get_64, (%rd17, %r12, %r13, %rd37, %rd37, %rd39, %rd39);
	// end inline asm
	ld.f32 	%f4, [%rd22];
	// begin inline asm
	call (%rd28), _rt_buffer_get_64, (%rd17, %r12, %r13, %rd39, %rd39, %rd39, %rd39);
	// end inline asm
	ld.f32 	%f5, [%rd28+4];
	// begin inline asm
	call (%rd34), _rt_buffer_get_64, (%rd17, %r12, %r13, %rd37, %rd37, %rd39, %rd39);
	// end inline asm
	sub.ftz.f32 	%f6, %f4, %f3;
	ld.f32 	%f7, [%rd34+4];
	sub.ftz.f32 	%f8, %f7, %f5;
	st.global.v2.f32 	[prd+24], {%f1, %f2};
	st.global.f32 	[prd+32], %f20;
	ld.global.f32 	%f21, [periodic_flag];
	setp.neu.ftz.f32 	%p5, %f21, 0f3F800000;
	@%p5 bra 	$L__BB0_7;

	sub.ftz.f32 	%f22, %f1, %f3;
	abs.ftz.f32 	%f23, %f22;
	setp.gtu.ftz.f32 	%p6, %f23, 0f3727C5AC;
	@%p6 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_4;

$L__BB0_5:
	sub.ftz.f32 	%f26, %f1, %f4;
	abs.ftz.f32 	%f27, %f26;
	setp.gtu.ftz.f32 	%p7, %f27, 0f3727C5AC;
	@%p7 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;

$L__BB0_7:
	ld.global.f32 	%f31, [periodic_flag+4];
	setp.neu.ftz.f32 	%p8, %f31, 0f3F800000;
	@%p8 bra 	$L__BB0_12;

	sub.ftz.f32 	%f32, %f2, %f5;
	abs.ftz.f32 	%f33, %f32;
	setp.gtu.ftz.f32 	%p9, %f33, 0f3727C5AC;
	@%p9 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;

$L__BB0_10:
	sub.ftz.f32 	%f36, %f2, %f7;
	abs.ftz.f32 	%f37, %f36;
	setp.gtu.ftz.f32 	%p10, %f37, 0f3727C5AC;
	@%p10 bra 	$L__BB0_12;

	mov.f32 	%f38, 0f3727C5AC;
	sub.ftz.f32 	%f39, %f38, %f8;
	add.ftz.f32 	%f40, %f39, %f2;
	st.global.f32 	[prd+28], %f40;
	bra.uni 	$L__BB0_12;

$L__BB0_4:
	add.ftz.f32 	%f24, %f6, 0fB727C5AC;
	add.ftz.f32 	%f25, %f24, %f1;
	st.global.f32 	[prd+24], %f25;
	bra.uni 	$L__BB0_12;

$L__BB0_6:
	mov.f32 	%f28, 0f3727C5AC;
	sub.ftz.f32 	%f29, %f28, %f6;
	add.ftz.f32 	%f30, %f29, %f1;
	st.global.f32 	[prd+24], %f30;
	bra.uni 	$L__BB0_12;

$L__BB0_9:
	add.ftz.f32 	%f34, %f8, 0fB727C5AC;
	add.ftz.f32 	%f35, %f34, %f2;
	st.global.f32 	[prd+28], %f35;

$L__BB0_12:
	ret;

}
	// .globl	_Z19closest_hit_diffusev
.visible .entry _Z19closest_hit_diffusev()
{
	.reg .pred 	%p<35>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<234>;
	.reg .b32 	%r<132>;
	.reg .f64 	%fd<22>;
	.reg .b64 	%rd<314>;


	ld.global.u32 	%rd1, [prd+8];
	mov.u64 	%rd14, 0;
	ld.global.u32 	%rd11, [UUID];
	mov.u64 	%rd15, objectID;
	cvta.global.u64 	%rd10, %rd15;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 4;
	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r7, %r8, %rd11, %rd14, %rd14, %rd14);
	// end inline asm
	ld.u32 	%rd2, [%rd9];
	ld.global.v2.f32 	{%f38, %f39}, [periodic_flag];
	setp.eq.ftz.f32 	%p1, %f38, 0f3F800000;
	setp.eq.ftz.f32 	%p2, %f39, 0f3F800000;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB1_1;
	bra.uni 	$L__BB1_2;

$L__BB1_1:
	mov.u64 	%rd22, primitive_type;
	cvta.global.u64 	%rd17, %rd22;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r7, %r8, %rd2, %rd14, %rd14, %rd14);
	// end inline asm
	ld.u32 	%r11, [%rd16];
	setp.eq.s32 	%p4, %r11, 5;
	@%p4 bra 	$L__BB1_29;
	bra.uni 	$L__BB1_2;

$L__BB1_29:
	mov.u64 	%rd309, 1;
	mov.u64 	%rd311, 0;
	mov.u16 	%rs4, 1;
	st.global.u8 	[prd+21], %rs4;
	ld.global.f32 	%f203, [ray+12];
	ld.global.f32 	%f204, [t_hit];
	ld.global.f32 	%f205, [ray+16];
	ld.global.f32 	%f206, [ray+20];
	ld.global.f32 	%f207, [ray];
	fma.rn.ftz.f32 	%f30, %f204, %f203, %f207;
	ld.global.f32 	%f208, [ray+4];
	fma.rn.ftz.f32 	%f31, %f204, %f205, %f208;
	ld.global.f32 	%f209, [ray+8];
	fma.rn.ftz.f32 	%f210, %f204, %f206, %f209;
	mov.u64 	%rd312, bbox_vertices;
	cvta.global.u64 	%rd289, %rd312;
	mov.u32 	%r127, 2;
	mov.u32 	%r128, 12;
	// begin inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r127, %r128, %rd311, %rd311, %rd311, %rd311);
	// end inline asm
	ld.f32 	%f32, [%rd288];
	// begin inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r127, %r128, %rd309, %rd309, %rd311, %rd311);
	// end inline asm
	ld.f32 	%f33, [%rd294];
	// begin inline asm
	call (%rd300), _rt_buffer_get_64, (%rd289, %r127, %r128, %rd311, %rd311, %rd311, %rd311);
	// end inline asm
	ld.f32 	%f34, [%rd300+4];
	// begin inline asm
	call (%rd306), _rt_buffer_get_64, (%rd289, %r127, %r128, %rd309, %rd309, %rd311, %rd311);
	// end inline asm
	sub.ftz.f32 	%f35, %f33, %f32;
	ld.f32 	%f36, [%rd306+4];
	sub.ftz.f32 	%f37, %f36, %f34;
	st.global.v2.f32 	[prd+24], {%f30, %f31};
	st.global.f32 	[prd+32], %f210;
	ld.global.f32 	%f211, [periodic_flag];
	setp.neu.ftz.f32 	%p29, %f211, 0f3F800000;
	@%p29 bra 	$L__BB1_34;

	sub.ftz.f32 	%f212, %f30, %f32;
	abs.ftz.f32 	%f213, %f212;
	setp.gtu.ftz.f32 	%p30, %f213, 0f3727C5AC;
	@%p30 bra 	$L__BB1_32;
	bra.uni 	$L__BB1_31;

$L__BB1_32:
	sub.ftz.f32 	%f216, %f30, %f33;
	abs.ftz.f32 	%f217, %f216;
	setp.gtu.ftz.f32 	%p31, %f217, 0f3727C5AC;
	@%p31 bra 	$L__BB1_34;
	bra.uni 	$L__BB1_33;

$L__BB1_34:
	ld.global.f32 	%f221, [periodic_flag+4];
	setp.neu.ftz.f32 	%p32, %f221, 0f3F800000;
	@%p32 bra 	$L__BB1_39;

	sub.ftz.f32 	%f222, %f31, %f34;
	abs.ftz.f32 	%f223, %f222;
	setp.gtu.ftz.f32 	%p33, %f223, 0f3727C5AC;
	@%p33 bra 	$L__BB1_37;
	bra.uni 	$L__BB1_36;

$L__BB1_37:
	sub.ftz.f32 	%f226, %f31, %f36;
	abs.ftz.f32 	%f227, %f226;
	setp.gtu.ftz.f32 	%p34, %f227, 0f3727C5AC;
	@%p34 bra 	$L__BB1_39;

	mov.f32 	%f228, 0f3727C5AC;
	sub.ftz.f32 	%f229, %f228, %f37;
	add.ftz.f32 	%f230, %f229, %f31;
	st.global.f32 	[prd+28], %f230;
	bra.uni 	$L__BB1_39;

$L__BB1_2:
	mov.u64 	%rd125, transform_matrix;
	cvta.global.u64 	%rd24, %rd125;
	mov.u32 	%r42, 2;
	// begin inline asm
	call (%rd23), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd14, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f1, [%rd23];
	mov.u64 	%rd31, 1;
	// begin inline asm
	call (%rd29), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd31, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f2, [%rd29];
	mov.u64 	%rd37, 2;
	// begin inline asm
	call (%rd35), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd37, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f3, [%rd35];
	mov.u64 	%rd43, 3;
	// begin inline asm
	call (%rd41), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd43, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f4, [%rd41];
	mov.u64 	%rd49, 4;
	// begin inline asm
	call (%rd47), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd49, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f5, [%rd47];
	mov.u64 	%rd55, 5;
	// begin inline asm
	call (%rd53), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd55, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f6, [%rd53];
	mov.u64 	%rd61, 6;
	// begin inline asm
	call (%rd59), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd61, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f7, [%rd59];
	mov.u64 	%rd67, 7;
	// begin inline asm
	call (%rd65), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd67, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f8, [%rd65];
	mov.u64 	%rd73, 8;
	// begin inline asm
	call (%rd71), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd73, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f9, [%rd71];
	mov.u64 	%rd79, 9;
	// begin inline asm
	call (%rd77), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd79, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f10, [%rd77];
	mov.u64 	%rd85, 10;
	// begin inline asm
	call (%rd83), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd85, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f11, [%rd83];
	mov.u64 	%rd91, 11;
	// begin inline asm
	call (%rd89), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd91, %rd2, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f12, [%rd89];
	mov.u64 	%rd97, 12;
	// begin inline asm
	call (%rd95), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd97, %rd2, %rd14, %rd14);
	// end inline asm
	mov.u64 	%rd103, 13;
	// begin inline asm
	call (%rd101), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd103, %rd2, %rd14, %rd14);
	// end inline asm
	mov.u64 	%rd109, 14;
	// begin inline asm
	call (%rd107), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd109, %rd2, %rd14, %rd14);
	// end inline asm
	mov.u64 	%rd115, 15;
	// begin inline asm
	call (%rd113), _rt_buffer_get_64, (%rd24, %r42, %r8, %rd115, %rd2, %rd14, %rd14);
	// end inline asm
	mov.u64 	%rd126, primitive_type;
	cvta.global.u64 	%rd120, %rd126;
	// begin inline asm
	call (%rd119), _rt_buffer_get_64, (%rd120, %r7, %r8, %rd2, %rd14, %rd14, %rd14);
	// end inline asm
	ld.u32 	%r46, [%rd119];
	setp.eq.s32 	%p5, %r46, 0;
	@%p5 bra 	$L__BB1_9;

	mov.u32 	%r47, 1;
	mov.u32 	%r48, 4;
	mov.u64 	%rd132, 0;
	// begin inline asm
	call (%rd127), _rt_buffer_get_64, (%rd120, %r47, %r48, %rd2, %rd132, %rd132, %rd132);
	// end inline asm
	ld.u32 	%r49, [%rd127];
	setp.eq.s32 	%p6, %r49, 3;
	@%p6 bra 	$L__BB1_9;
	bra.uni 	$L__BB1_4;

$L__BB1_9:
	mul.ftz.f32 	%f127, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f128, %f1, 0f00000000, %f127;
	fma.rn.ftz.f32 	%f129, %f3, 0f00000000, %f128;
	add.ftz.f32 	%f130, %f4, %f129;
	mul.ftz.f32 	%f131, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f132, %f5, 0f00000000, %f131;
	fma.rn.ftz.f32 	%f133, %f7, 0f00000000, %f132;
	add.ftz.f32 	%f134, %f8, %f133;
	mul.ftz.f32 	%f135, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f136, %f9, 0f00000000, %f135;
	fma.rn.ftz.f32 	%f137, %f11, 0f00000000, %f136;
	add.ftz.f32 	%f138, %f12, %f137;
	fma.rn.ftz.f32 	%f139, %f2, 0f00000000, %f1;
	fma.rn.ftz.f32 	%f140, %f3, 0f00000000, %f139;
	add.ftz.f32 	%f141, %f4, %f140;
	fma.rn.ftz.f32 	%f142, %f6, 0f00000000, %f5;
	fma.rn.ftz.f32 	%f143, %f7, 0f00000000, %f142;
	add.ftz.f32 	%f144, %f8, %f143;
	fma.rn.ftz.f32 	%f145, %f10, 0f00000000, %f9;
	fma.rn.ftz.f32 	%f146, %f11, 0f00000000, %f145;
	add.ftz.f32 	%f147, %f12, %f146;
	fma.rn.ftz.f32 	%f148, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f149, %f3, 0f00000000, %f148;
	add.ftz.f32 	%f150, %f4, %f149;
	fma.rn.ftz.f32 	%f151, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f152, %f7, 0f00000000, %f151;
	add.ftz.f32 	%f153, %f8, %f152;
	fma.rn.ftz.f32 	%f154, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f155, %f11, 0f00000000, %f154;
	add.ftz.f32 	%f156, %f12, %f155;
	sub.ftz.f32 	%f157, %f141, %f130;
	sub.ftz.f32 	%f158, %f144, %f134;
	sub.ftz.f32 	%f159, %f147, %f138;
	sub.ftz.f32 	%f160, %f150, %f130;
	sub.ftz.f32 	%f161, %f153, %f134;
	sub.ftz.f32 	%f162, %f156, %f138;
	mul.ftz.f32 	%f163, %f158, %f162;
	mul.ftz.f32 	%f164, %f159, %f161;
	sub.ftz.f32 	%f231, %f163, %f164;
	mul.ftz.f32 	%f165, %f159, %f160;
	mul.ftz.f32 	%f166, %f157, %f162;
	sub.ftz.f32 	%f232, %f165, %f166;
	mul.ftz.f32 	%f167, %f157, %f161;
	mul.ftz.f32 	%f168, %f158, %f160;
	sub.ftz.f32 	%f233, %f167, %f168;

$L__BB1_10:
	mul.ftz.f32 	%f169, %f232, %f232;
	fma.rn.ftz.f32 	%f170, %f231, %f231, %f169;
	fma.rn.ftz.f32 	%f171, %f233, %f233, %f170;
	rsqrt.approx.ftz.f32 	%f172, %f171;
	mul.ftz.f32 	%f173, %f231, %f172;
	mul.ftz.f32 	%f174, %f232, %f172;
	mul.ftz.f32 	%f175, %f233, %f172;
	ld.global.f32 	%f176, [ray+12];
	ld.global.f32 	%f177, [ray+16];
	mul.ftz.f32 	%f178, %f174, %f177;
	fma.rn.ftz.f32 	%f179, %f176, %f173, %f178;
	ld.global.f32 	%f180, [ray+20];
	fma.rn.ftz.f32 	%f25, %f175, %f180, %f179;
	ld.global.u32 	%r58, [Nbands_global];
	setp.eq.s32 	%p9, %r58, 0;
	@%p9 bra 	$L__BB1_39;

	mov.u32 	%r131, -1;
	mov.u32 	%r129, 0;
	mov.u64 	%rd161, band_launch_flag;
	cvta.global.u64 	%rd156, %rd161;

$L__BB1_12:
	cvt.s64.s32 	%rd157, %r129;
	mov.u32 	%r62, 1;
	mov.u64 	%rd160, 0;
	// begin inline asm
	call (%rd155), _rt_buffer_get_64, (%rd156, %r62, %r62, %rd157, %rd160, %rd160, %rd160);
	// end inline asm
	ld.u8 	%rs1, [%rd155];
	setp.eq.s16 	%p10, %rs1, 0;
	@%p10 bra 	$L__BB1_28;

	cvt.u32.u64 	%r63, %rd1;
	ld.global.u32 	%r64, [Nbands_launch];
	add.s32 	%r131, %r131, 1;
	mad.lo.s32 	%r65, %r64, %r63, %r131;
	cvt.u64.u32 	%rd4, %r65;
	ld.global.u32 	%r66, [UUID];
	mad.lo.s32 	%r67, %r66, %r64, %r131;
	cvt.u64.u32 	%rd5, %r67;
	setp.lt.ftz.f32 	%p11, %f25, 0f00000000;
	@%p11 bra 	$L__BB1_16;

	mov.u32 	%r68, 1;
	mov.u32 	%r69, 4;
	mov.u64 	%rd167, 0;
	// begin inline asm
	call (%rd162), _rt_buffer_get_64, (%rd120, %r68, %r69, %rd2, %rd167, %rd167, %rd167);
	// end inline asm
	ld.u32 	%r70, [%rd162];
	setp.eq.s32 	%p12, %r70, 4;
	@%p12 bra 	$L__BB1_16;
	bra.uni 	$L__BB1_15;

$L__BB1_16:
	mov.u64 	%rd182, radiation_out_top;
	cvta.global.u64 	%rd177, %rd182;
	mov.u32 	%r73, 1;
	mov.u32 	%r74, 4;
	mov.u64 	%rd181, 0;
	// begin inline asm
	call (%rd313), _rt_buffer_get_64, (%rd177, %r73, %r74, %rd5, %rd181, %rd181, %rd181);
	// end inline asm
	bra.uni 	$L__BB1_17;

$L__BB1_15:
	mov.u64 	%rd175, radiation_out_bottom;
	cvta.global.u64 	%rd170, %rd175;
	// begin inline asm
	call (%rd313), _rt_buffer_get_64, (%rd170, %r68, %r69, %rd5, %rd167, %rd167, %rd167);
	// end inline asm

$L__BB1_17:
	ld.f32 	%f181, [%rd313];
	cvt.ftz.f64.f32 	%fd2, %f181;
	ld.global.f64 	%fd3, [prd];
	mul.f64 	%fd1, %fd3, %fd2;
	setp.eq.f64 	%p13, %fd1, 0d0000000000000000;
	@%p13 bra 	$L__BB1_28;

	mov.u64 	%rd206, 0;
	ld.global.u8 	%r84, [prd+20];
	ld.global.u32 	%r85, [Nprimitives];
	mad.lo.s32 	%r86, %r85, %r84, %r63;
	ld.global.u32 	%r87, [Nbands_global];
	mad.lo.s32 	%r88, %r86, %r87, %r129;
	cvt.u64.u32 	%rd191, %r88;
	mov.u64 	%rd207, rho;
	cvta.global.u64 	%rd184, %rd207;
	mov.u32 	%r81, 1;
	mov.u32 	%r82, 4;
	// begin inline asm
	call (%rd183), _rt_buffer_get_64, (%rd184, %r81, %r82, %rd191, %rd206, %rd206, %rd206);
	// end inline asm
	ld.f32 	%f26, [%rd183];
	mov.u64 	%rd208, tau;
	cvta.global.u64 	%rd190, %rd208;
	// begin inline asm
	call (%rd189), _rt_buffer_get_64, (%rd190, %r81, %r82, %rd191, %rd206, %rd206, %rd206);
	// end inline asm
	ld.f32 	%f27, [%rd189];
	// begin inline asm
	call (%rd195), _rt_buffer_get_64, (%rd10, %r81, %r82, %rd1, %rd206, %rd206, %rd206);
	// end inline asm
	ld.u32 	%rd203, [%rd195];
	// begin inline asm
	call (%rd201), _rt_buffer_get_64, (%rd120, %r81, %r82, %rd203, %rd206, %rd206, %rd206);
	// end inline asm
	ld.u32 	%r89, [%rd201];
	setp.eq.s32 	%p14, %r89, 4;
	@%p14 bra 	$L__BB1_28;

	mov.u64 	%rd217, radiation_in;
	cvta.global.u64 	%rd212, %rd217;
	// begin inline asm
	call (%rd211), _rt_buffer_get_64, (%rd212, %r81, %r82, %rd4, %rd206, %rd206, %rd206);
	// end inline asm
	mov.f32 	%f182, 0f3F800000;
	sub.ftz.f32 	%f183, %f182, %f26;
	sub.ftz.f32 	%f184, %f183, %f27;
	cvt.ftz.f64.f32 	%fd4, %f184;
	mul.f64 	%fd5, %fd1, %fd4;
	cvt.rn.ftz.f32.f64 	%f185, %fd5;
	atom.add.f32 	%f186, [%rd211], %f185;
	setp.leu.ftz.f32 	%p15, %f27, 0f00000000;
	setp.leu.ftz.f32 	%p16, %f26, 0f00000000;
	and.pred  	%p17, %p16, %p15;
	setp.leu.f64 	%p18, %fd1, 0d0000000000000000;
	or.pred  	%p19, %p18, %p17;
	@%p19 bra 	$L__BB1_23;

	ld.global.u8 	%rs2, [prd+12];
	setp.eq.s16 	%p20, %rs2, 0;
	@%p20 bra 	$L__BB1_22;

	mov.u64 	%rd230, scatter_buff_top;
	cvta.global.u64 	%rd219, %rd230;
	mov.u32 	%r94, 1;
	mov.u32 	%r95, 4;
	mov.u64 	%rd229, 0;
	// begin inline asm
	call (%rd218), _rt_buffer_get_64, (%rd219, %r94, %r95, %rd4, %rd229, %rd229, %rd229);
	// end inline asm
	cvt.ftz.f64.f32 	%fd6, %f26;
	mul.f64 	%fd7, %fd1, %fd6;
	cvt.rn.ftz.f32.f64 	%f187, %fd7;
	atom.add.f32 	%f188, [%rd218], %f187;
	mov.u64 	%rd231, scatter_buff_bottom;
	cvta.global.u64 	%rd225, %rd231;
	// begin inline asm
	call (%rd224), _rt_buffer_get_64, (%rd225, %r94, %r95, %rd4, %rd229, %rd229, %rd229);
	// end inline asm
	cvt.ftz.f64.f32 	%fd8, %f27;
	mul.f64 	%fd9, %fd1, %fd8;
	cvt.rn.ftz.f32.f64 	%f189, %fd9;
	atom.add.f32 	%f190, [%rd224], %f189;
	bra.uni 	$L__BB1_23;

$L__BB1_22:
	mov.u64 	%rd244, scatter_buff_bottom;
	cvta.global.u64 	%rd233, %rd244;
	mov.u32 	%r98, 1;
	mov.u32 	%r99, 4;
	mov.u64 	%rd243, 0;
	// begin inline asm
	call (%rd232), _rt_buffer_get_64, (%rd233, %r98, %r99, %rd4, %rd243, %rd243, %rd243);
	// end inline asm
	cvt.ftz.f64.f32 	%fd10, %f26;
	mul.f64 	%fd11, %fd1, %fd10;
	cvt.rn.ftz.f32.f64 	%f191, %fd11;
	atom.add.f32 	%f192, [%rd232], %f191;
	mov.u64 	%rd245, scatter_buff_top;
	cvta.global.u64 	%rd239, %rd245;
	// begin inline asm
	call (%rd238), _rt_buffer_get_64, (%rd239, %r98, %r99, %rd4, %rd243, %rd243, %rd243);
	// end inline asm
	cvt.ftz.f64.f32 	%fd12, %f27;
	mul.f64 	%fd13, %fd1, %fd12;
	cvt.rn.ftz.f32.f64 	%f193, %fd13;
	atom.add.f32 	%f194, [%rd238], %f193;

$L__BB1_23:
	ld.global.u32 	%r4, [Ncameras];
	setp.eq.s32 	%p21, %r4, 0;
	@%p21 bra 	$L__BB1_28;

	mov.u64 	%rd257, 0;
	ld.global.u8 	%r104, [prd+20];
	ld.global.u32 	%r105, [Nprimitives];
	mad.lo.s32 	%r107, %r105, %r104, %r63;
	ld.global.u32 	%r108, [Nbands_global];
	mad.lo.s32 	%r109, %r107, %r108, %r129;
	ld.global.u32 	%r110, [camera_ID];
	mad.lo.s32 	%r111, %r109, %r4, %r110;
	cvt.u64.u32 	%rd254, %r111;
	mov.u64 	%rd258, rho_cam;
	cvta.global.u64 	%rd247, %rd258;
	mov.u32 	%r102, 1;
	mov.u32 	%r103, 4;
	// begin inline asm
	call (%rd246), _rt_buffer_get_64, (%rd247, %r102, %r103, %rd254, %rd257, %rd257, %rd257);
	// end inline asm
	ld.f32 	%f28, [%rd246];
	mov.u64 	%rd259, tau_cam;
	cvta.global.u64 	%rd253, %rd259;
	// begin inline asm
	call (%rd252), _rt_buffer_get_64, (%rd253, %r102, %r103, %rd254, %rd257, %rd257, %rd257);
	// end inline asm
	setp.leu.ftz.f32 	%p23, %f28, 0f00000000;
	ld.f32 	%f29, [%rd252];
	setp.leu.ftz.f32 	%p24, %f29, 0f00000000;
	and.pred  	%p25, %p23, %p24;
	or.pred  	%p26, %p18, %p25;
	@%p26 bra 	$L__BB1_28;

	ld.global.u8 	%rs3, [prd+12];
	setp.eq.s16 	%p27, %rs3, 0;
	@%p27 bra 	$L__BB1_27;

	mov.u64 	%rd272, scatter_buff_top_cam;
	cvta.global.u64 	%rd261, %rd272;
	mov.u32 	%r114, 1;
	mov.u32 	%r115, 4;
	mov.u64 	%rd271, 0;
	// begin inline asm
	call (%rd260), _rt_buffer_get_64, (%rd261, %r114, %r115, %rd4, %rd271, %rd271, %rd271);
	// end inline asm
	cvt.ftz.f64.f32 	%fd14, %f28;
	mul.f64 	%fd15, %fd1, %fd14;
	cvt.rn.ftz.f32.f64 	%f195, %fd15;
	atom.add.f32 	%f196, [%rd260], %f195;
	mov.u64 	%rd273, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd267, %rd273;
	// begin inline asm
	call (%rd266), _rt_buffer_get_64, (%rd267, %r114, %r115, %rd4, %rd271, %rd271, %rd271);
	// end inline asm
	cvt.ftz.f64.f32 	%fd16, %f29;
	mul.f64 	%fd17, %fd1, %fd16;
	cvt.rn.ftz.f32.f64 	%f197, %fd17;
	atom.add.f32 	%f198, [%rd266], %f197;
	bra.uni 	$L__BB1_28;

$L__BB1_27:
	mov.u64 	%rd286, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd275, %rd286;
	mov.u32 	%r118, 1;
	mov.u32 	%r119, 4;
	mov.u64 	%rd285, 0;
	// begin inline asm
	call (%rd274), _rt_buffer_get_64, (%rd275, %r118, %r119, %rd4, %rd285, %rd285, %rd285);
	// end inline asm
	cvt.ftz.f64.f32 	%fd18, %f28;
	mul.f64 	%fd19, %fd1, %fd18;
	cvt.rn.ftz.f32.f64 	%f199, %fd19;
	atom.add.f32 	%f200, [%rd274], %f199;
	mov.u64 	%rd287, scatter_buff_top_cam;
	cvta.global.u64 	%rd281, %rd287;
	// begin inline asm
	call (%rd280), _rt_buffer_get_64, (%rd281, %r118, %r119, %rd4, %rd285, %rd285, %rd285);
	// end inline asm
	cvt.ftz.f64.f32 	%fd20, %f29;
	mul.f64 	%fd21, %fd1, %fd20;
	cvt.rn.ftz.f32.f64 	%f201, %fd21;
	atom.add.f32 	%f202, [%rd280], %f201;

$L__BB1_28:
	ld.global.u32 	%r120, [Nbands_global];
	add.s32 	%r129, %r129, 1;
	setp.lt.u32 	%p28, %r129, %r120;
	@%p28 bra 	$L__BB1_12;

$L__BB1_39:
	ret;

$L__BB1_4:
	ld.global.u32 	%rd136, [UUID];
	// begin inline asm
	call (%rd134), _rt_buffer_get_64, (%rd120, %r47, %r48, %rd136, %rd132, %rd132, %rd132);
	// end inline asm
	ld.u32 	%r52, [%rd134];
	setp.eq.s32 	%p7, %r52, 1;
	@%p7 bra 	$L__BB1_8;
	bra.uni 	$L__BB1_5;

$L__BB1_8:
	mul.ftz.f32 	%f85, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f86, %f1, 0f00000000, %f85;
	fma.rn.ftz.f32 	%f87, %f3, 0f00000000, %f86;
	add.ftz.f32 	%f88, %f4, %f87;
	mul.ftz.f32 	%f89, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f90, %f5, 0f00000000, %f89;
	fma.rn.ftz.f32 	%f91, %f7, 0f00000000, %f90;
	add.ftz.f32 	%f92, %f8, %f91;
	mul.ftz.f32 	%f93, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f94, %f9, 0f00000000, %f93;
	fma.rn.ftz.f32 	%f95, %f11, 0f00000000, %f94;
	add.ftz.f32 	%f96, %f12, %f95;
	fma.rn.ftz.f32 	%f97, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f98, %f3, 0f00000000, %f97;
	add.ftz.f32 	%f99, %f4, %f98;
	fma.rn.ftz.f32 	%f100, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f101, %f7, 0f00000000, %f100;
	add.ftz.f32 	%f102, %f8, %f101;
	fma.rn.ftz.f32 	%f103, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f104, %f11, 0f00000000, %f103;
	add.ftz.f32 	%f105, %f12, %f104;
	add.ftz.f32 	%f106, %f1, %f2;
	fma.rn.ftz.f32 	%f107, %f3, 0f00000000, %f106;
	add.ftz.f32 	%f108, %f4, %f107;
	add.ftz.f32 	%f109, %f5, %f6;
	fma.rn.ftz.f32 	%f110, %f7, 0f00000000, %f109;
	add.ftz.f32 	%f111, %f8, %f110;
	add.ftz.f32 	%f112, %f9, %f10;
	fma.rn.ftz.f32 	%f113, %f11, 0f00000000, %f112;
	add.ftz.f32 	%f114, %f12, %f113;
	sub.ftz.f32 	%f115, %f99, %f88;
	sub.ftz.f32 	%f116, %f102, %f92;
	sub.ftz.f32 	%f117, %f105, %f96;
	sub.ftz.f32 	%f118, %f108, %f99;
	sub.ftz.f32 	%f119, %f111, %f102;
	sub.ftz.f32 	%f120, %f114, %f105;
	mul.ftz.f32 	%f121, %f116, %f120;
	mul.ftz.f32 	%f122, %f117, %f119;
	sub.ftz.f32 	%f231, %f121, %f122;
	mul.ftz.f32 	%f123, %f117, %f118;
	mul.ftz.f32 	%f124, %f115, %f120;
	sub.ftz.f32 	%f232, %f123, %f124;
	mul.ftz.f32 	%f125, %f115, %f119;
	mul.ftz.f32 	%f126, %f116, %f118;
	sub.ftz.f32 	%f233, %f125, %f126;
	bra.uni 	$L__BB1_10;

$L__BB1_5:
	ld.global.u32 	%rd143, [UUID];
	mov.u64 	%rd146, 0;
	mov.u32 	%r53, 1;
	mov.u32 	%r54, 4;
	// begin inline asm
	call (%rd141), _rt_buffer_get_64, (%rd120, %r53, %r54, %rd143, %rd146, %rd146, %rd146);
	// end inline asm
	ld.u32 	%r55, [%rd141];
	setp.eq.s32 	%p8, %r55, 2;
	@%p8 bra 	$L__BB1_7;
	bra.uni 	$L__BB1_6;

$L__BB1_7:
	mul.ftz.f32 	%f43, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f44, %f1, 0f00000000, %f43;
	fma.rn.ftz.f32 	%f45, %f3, 0f00000000, %f44;
	add.ftz.f32 	%f46, %f4, %f45;
	mul.ftz.f32 	%f47, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f48, %f5, 0f00000000, %f47;
	fma.rn.ftz.f32 	%f49, %f7, 0f00000000, %f48;
	add.ftz.f32 	%f50, %f8, %f49;
	mul.ftz.f32 	%f51, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f52, %f9, 0f00000000, %f51;
	fma.rn.ftz.f32 	%f53, %f11, 0f00000000, %f52;
	add.ftz.f32 	%f54, %f12, %f53;
	fma.rn.ftz.f32 	%f55, %f2, 0f00000000, %f1;
	fma.rn.ftz.f32 	%f56, %f3, 0f00000000, %f55;
	add.ftz.f32 	%f57, %f4, %f56;
	fma.rn.ftz.f32 	%f58, %f6, 0f00000000, %f5;
	fma.rn.ftz.f32 	%f59, %f7, 0f00000000, %f58;
	add.ftz.f32 	%f60, %f8, %f59;
	fma.rn.ftz.f32 	%f61, %f10, 0f00000000, %f9;
	fma.rn.ftz.f32 	%f62, %f11, 0f00000000, %f61;
	add.ftz.f32 	%f63, %f12, %f62;
	fma.rn.ftz.f32 	%f64, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f65, %f3, 0f00000000, %f64;
	add.ftz.f32 	%f66, %f4, %f65;
	fma.rn.ftz.f32 	%f67, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f68, %f7, 0f00000000, %f67;
	add.ftz.f32 	%f69, %f8, %f68;
	fma.rn.ftz.f32 	%f70, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f71, %f11, 0f00000000, %f70;
	add.ftz.f32 	%f72, %f12, %f71;
	sub.ftz.f32 	%f73, %f57, %f46;
	sub.ftz.f32 	%f74, %f60, %f50;
	sub.ftz.f32 	%f75, %f63, %f54;
	sub.ftz.f32 	%f76, %f66, %f46;
	sub.ftz.f32 	%f77, %f69, %f50;
	sub.ftz.f32 	%f78, %f72, %f54;
	mul.ftz.f32 	%f79, %f74, %f78;
	mul.ftz.f32 	%f80, %f75, %f77;
	sub.ftz.f32 	%f231, %f79, %f80;
	mul.ftz.f32 	%f81, %f75, %f76;
	mul.ftz.f32 	%f82, %f73, %f78;
	sub.ftz.f32 	%f232, %f81, %f82;
	mul.ftz.f32 	%f83, %f73, %f77;
	mul.ftz.f32 	%f84, %f74, %f76;
	sub.ftz.f32 	%f233, %f83, %f84;
	bra.uni 	$L__BB1_10;

$L__BB1_31:
	add.ftz.f32 	%f214, %f35, 0fB727C5AC;
	add.ftz.f32 	%f215, %f214, %f30;
	st.global.f32 	[prd+24], %f215;
	bra.uni 	$L__BB1_39;

$L__BB1_6:
	ld.global.u32 	%rd150, [UUID];
	// begin inline asm
	call (%rd148), _rt_buffer_get_64, (%rd120, %r53, %r54, %rd150, %rd146, %rd146, %rd146);
	// end inline asm
	bra.uni 	$L__BB1_10;

$L__BB1_33:
	mov.f32 	%f218, 0f3727C5AC;
	sub.ftz.f32 	%f219, %f218, %f35;
	add.ftz.f32 	%f220, %f219, %f30;
	st.global.f32 	[prd+24], %f220;
	bra.uni 	$L__BB1_39;

$L__BB1_36:
	add.ftz.f32 	%f224, %f37, 0fB727C5AC;
	add.ftz.f32 	%f225, %f224, %f31;
	st.global.f32 	[prd+28], %f225;
	bra.uni 	$L__BB1_39;

}
	// .globl	_Z18closest_hit_camerav
.visible .entry _Z18closest_hit_camerav()
{
	.reg .pred 	%p<31>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<276>;
	.reg .b32 	%r<108>;
	.reg .f64 	%fd<28>;
	.reg .b64 	%rd<276>;


	ld.global.u32 	%rd14, [UUID];
	mov.u64 	%rd17, 0;
	mov.u64 	%rd18, objectID;
	cvta.global.u64 	%rd13, %rd18;
	mov.u32 	%r6, 1;
	mov.u32 	%r7, 4;
	// begin inline asm
	call (%rd12), _rt_buffer_get_64, (%rd13, %r6, %r7, %rd14, %rd17, %rd17, %rd17);
	// end inline asm
	ld.u32 	%rd1, [%rd12];
	ld.global.v2.f32 	{%f59, %f60}, [periodic_flag];
	setp.eq.ftz.f32 	%p3, %f59, 0f3F800000;
	setp.eq.ftz.f32 	%p4, %f60, 0f3F800000;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB2_1;
	bra.uni 	$L__BB2_2;

$L__BB2_1:
	mov.u64 	%rd25, primitive_type;
	cvta.global.u64 	%rd20, %rd25;
	// begin inline asm
	call (%rd19), _rt_buffer_get_64, (%rd20, %r6, %r7, %rd1, %rd17, %rd17, %rd17);
	// end inline asm
	ld.u32 	%r10, [%rd19];
	setp.eq.s32 	%p6, %r10, 5;
	@%p6 bra 	$L__BB2_29;
	bra.uni 	$L__BB2_2;

$L__BB2_29:
	mov.u64 	%rd271, 0;
	mov.u16 	%rs1, 1;
	st.global.u8 	[prd+21], %rs1;
	ld.global.f32 	%f232, [ray+12];
	ld.global.f32 	%f233, [t_hit];
	ld.global.f32 	%f234, [ray+16];
	ld.global.f32 	%f235, [ray+20];
	ld.global.f32 	%f236, [ray];
	fma.rn.ftz.f32 	%f51, %f233, %f232, %f236;
	ld.global.f32 	%f237, [ray+4];
	fma.rn.ftz.f32 	%f52, %f233, %f234, %f237;
	ld.global.f32 	%f238, [ray+8];
	fma.rn.ftz.f32 	%f239, %f233, %f235, %f238;
	mov.u64 	%rd272, bbox_vertices;
	cvta.global.u64 	%rd249, %rd272;
	mov.u32 	%r104, 2;
	mov.u32 	%r105, 12;
	// begin inline asm
	call (%rd248), _rt_buffer_get_64, (%rd249, %r104, %r105, %rd271, %rd271, %rd271, %rd271);
	// end inline asm
	ld.f32 	%f53, [%rd248];
	mov.u64 	%rd269, 1;
	// begin inline asm
	call (%rd254), _rt_buffer_get_64, (%rd249, %r104, %r105, %rd269, %rd269, %rd271, %rd271);
	// end inline asm
	ld.f32 	%f54, [%rd254];
	// begin inline asm
	call (%rd260), _rt_buffer_get_64, (%rd249, %r104, %r105, %rd271, %rd271, %rd271, %rd271);
	// end inline asm
	ld.f32 	%f55, [%rd260+4];
	// begin inline asm
	call (%rd266), _rt_buffer_get_64, (%rd249, %r104, %r105, %rd269, %rd269, %rd271, %rd271);
	// end inline asm
	sub.ftz.f32 	%f56, %f54, %f53;
	ld.f32 	%f57, [%rd266+4];
	sub.ftz.f32 	%f58, %f57, %f55;
	st.global.v2.f32 	[prd+24], {%f51, %f52};
	st.global.f32 	[prd+32], %f239;
	ld.global.f32 	%f240, [periodic_flag];
	setp.neu.ftz.f32 	%p24, %f240, 0f3F800000;
	@%p24 bra 	$L__BB2_34;

	sub.ftz.f32 	%f241, %f51, %f53;
	abs.ftz.f32 	%f242, %f241;
	setp.gtu.ftz.f32 	%p25, %f242, 0f3727C5AC;
	@%p25 bra 	$L__BB2_32;
	bra.uni 	$L__BB2_31;

$L__BB2_32:
	sub.ftz.f32 	%f245, %f51, %f54;
	abs.ftz.f32 	%f246, %f245;
	setp.gtu.ftz.f32 	%p26, %f246, 0f3727C5AC;
	@%p26 bra 	$L__BB2_34;
	bra.uni 	$L__BB2_33;

$L__BB2_34:
	ld.global.f32 	%f250, [periodic_flag+4];
	setp.neu.ftz.f32 	%p27, %f250, 0f3F800000;
	@%p27 bra 	$L__BB2_39;

	sub.ftz.f32 	%f251, %f52, %f55;
	abs.ftz.f32 	%f252, %f251;
	setp.gtu.ftz.f32 	%p28, %f252, 0f3727C5AC;
	@%p28 bra 	$L__BB2_37;
	bra.uni 	$L__BB2_36;

$L__BB2_37:
	sub.ftz.f32 	%f255, %f52, %f57;
	abs.ftz.f32 	%f256, %f255;
	setp.gtu.ftz.f32 	%p29, %f256, 0f3727C5AC;
	@%p29 bra 	$L__BB2_39;

	mov.f32 	%f257, 0f3727C5AC;
	sub.ftz.f32 	%f258, %f257, %f58;
	add.ftz.f32 	%f259, %f258, %f52;
	st.global.f32 	[prd+28], %f259;
	bra.uni 	$L__BB2_39;

$L__BB2_2:
	mov.u64 	%rd128, transform_matrix;
	cvta.global.u64 	%rd27, %rd128;
	mov.u32 	%r41, 2;
	// begin inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd17, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f1, [%rd26];
	mov.u64 	%rd34, 1;
	// begin inline asm
	call (%rd32), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd34, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f2, [%rd32];
	mov.u64 	%rd40, 2;
	// begin inline asm
	call (%rd38), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd40, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f3, [%rd38];
	mov.u64 	%rd46, 3;
	// begin inline asm
	call (%rd44), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd46, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f4, [%rd44];
	mov.u64 	%rd52, 4;
	// begin inline asm
	call (%rd50), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd52, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f5, [%rd50];
	mov.u64 	%rd58, 5;
	// begin inline asm
	call (%rd56), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd58, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f6, [%rd56];
	mov.u64 	%rd64, 6;
	// begin inline asm
	call (%rd62), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd64, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f7, [%rd62];
	mov.u64 	%rd70, 7;
	// begin inline asm
	call (%rd68), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd70, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f8, [%rd68];
	mov.u64 	%rd76, 8;
	// begin inline asm
	call (%rd74), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd76, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f9, [%rd74];
	mov.u64 	%rd82, 9;
	// begin inline asm
	call (%rd80), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd82, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f10, [%rd80];
	mov.u64 	%rd88, 10;
	// begin inline asm
	call (%rd86), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd88, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f11, [%rd86];
	mov.u64 	%rd94, 11;
	// begin inline asm
	call (%rd92), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd94, %rd1, %rd17, %rd17);
	// end inline asm
	ld.f32 	%f12, [%rd92];
	mov.u64 	%rd100, 12;
	// begin inline asm
	call (%rd98), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd100, %rd1, %rd17, %rd17);
	// end inline asm
	mov.u64 	%rd106, 13;
	// begin inline asm
	call (%rd104), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd106, %rd1, %rd17, %rd17);
	// end inline asm
	mov.u64 	%rd112, 14;
	// begin inline asm
	call (%rd110), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd112, %rd1, %rd17, %rd17);
	// end inline asm
	mov.u64 	%rd118, 15;
	// begin inline asm
	call (%rd116), _rt_buffer_get_64, (%rd27, %r41, %r7, %rd118, %rd1, %rd17, %rd17);
	// end inline asm
	mov.u64 	%rd129, primitive_type;
	cvta.global.u64 	%rd123, %rd129;
	// begin inline asm
	call (%rd122), _rt_buffer_get_64, (%rd123, %r6, %r7, %rd1, %rd17, %rd17, %rd17);
	// end inline asm
	ld.u32 	%r45, [%rd122];
	setp.eq.s32 	%p7, %r45, 0;
	@%p7 bra 	$L__BB2_9;

	mov.u32 	%r46, 1;
	mov.u32 	%r47, 4;
	mov.u64 	%rd135, 0;
	// begin inline asm
	call (%rd130), _rt_buffer_get_64, (%rd123, %r46, %r47, %rd1, %rd135, %rd135, %rd135);
	// end inline asm
	ld.u32 	%r48, [%rd130];
	setp.eq.s32 	%p8, %r48, 3;
	@%p8 bra 	$L__BB2_9;
	bra.uni 	$L__BB2_4;

$L__BB2_9:
	mul.ftz.f32 	%f148, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f149, %f1, 0f00000000, %f148;
	fma.rn.ftz.f32 	%f150, %f3, 0f00000000, %f149;
	add.ftz.f32 	%f151, %f4, %f150;
	mul.ftz.f32 	%f152, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f153, %f5, 0f00000000, %f152;
	fma.rn.ftz.f32 	%f154, %f7, 0f00000000, %f153;
	add.ftz.f32 	%f155, %f8, %f154;
	mul.ftz.f32 	%f156, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f157, %f9, 0f00000000, %f156;
	fma.rn.ftz.f32 	%f158, %f11, 0f00000000, %f157;
	add.ftz.f32 	%f159, %f12, %f158;
	fma.rn.ftz.f32 	%f160, %f2, 0f00000000, %f1;
	fma.rn.ftz.f32 	%f161, %f3, 0f00000000, %f160;
	add.ftz.f32 	%f162, %f4, %f161;
	fma.rn.ftz.f32 	%f163, %f6, 0f00000000, %f5;
	fma.rn.ftz.f32 	%f164, %f7, 0f00000000, %f163;
	add.ftz.f32 	%f165, %f8, %f164;
	fma.rn.ftz.f32 	%f166, %f10, 0f00000000, %f9;
	fma.rn.ftz.f32 	%f167, %f11, 0f00000000, %f166;
	add.ftz.f32 	%f168, %f12, %f167;
	fma.rn.ftz.f32 	%f169, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f170, %f3, 0f00000000, %f169;
	add.ftz.f32 	%f171, %f4, %f170;
	fma.rn.ftz.f32 	%f172, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f173, %f7, 0f00000000, %f172;
	add.ftz.f32 	%f174, %f8, %f173;
	fma.rn.ftz.f32 	%f175, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f176, %f11, 0f00000000, %f175;
	add.ftz.f32 	%f177, %f12, %f176;
	sub.ftz.f32 	%f178, %f162, %f151;
	sub.ftz.f32 	%f179, %f165, %f155;
	sub.ftz.f32 	%f180, %f168, %f159;
	sub.ftz.f32 	%f181, %f171, %f151;
	sub.ftz.f32 	%f182, %f174, %f155;
	sub.ftz.f32 	%f183, %f177, %f159;
	mul.ftz.f32 	%f184, %f179, %f183;
	mul.ftz.f32 	%f185, %f180, %f182;
	sub.ftz.f32 	%f260, %f184, %f185;
	mul.ftz.f32 	%f186, %f180, %f181;
	mul.ftz.f32 	%f187, %f178, %f183;
	sub.ftz.f32 	%f261, %f186, %f187;
	mul.ftz.f32 	%f188, %f178, %f182;
	mul.ftz.f32 	%f189, %f179, %f181;
	sub.ftz.f32 	%f262, %f188, %f189;

$L__BB2_10:
	mul.ftz.f32 	%f190, %f261, %f261;
	fma.rn.ftz.f32 	%f191, %f260, %f260, %f190;
	fma.rn.ftz.f32 	%f192, %f262, %f262, %f191;
	rsqrt.approx.ftz.f32 	%f193, %f192;
	mul.ftz.f32 	%f25, %f260, %f193;
	mul.ftz.f32 	%f26, %f261, %f193;
	mul.ftz.f32 	%f27, %f262, %f193;
	ld.global.f32 	%f194, [ray+12];
	ld.global.f32 	%f195, [ray+16];
	mul.ftz.f32 	%f196, %f26, %f195;
	fma.rn.ftz.f32 	%f197, %f194, %f25, %f196;
	ld.global.f32 	%f198, [ray+20];
	fma.rn.ftz.f32 	%f28, %f27, %f198, %f197;
	ld.global.u32 	%r107, [Nbands_launch];
	setp.eq.s32 	%p11, %r107, 0;
	@%p11 bra 	$L__BB2_39;

	mov.u64 	%rd273, 0;

$L__BB2_12:
	setp.lt.ftz.f32 	%p13, %f28, 0f00000000;
	mov.pred 	%p30, -1;
	@%p13 bra 	$L__BB2_14;

	mov.u32 	%r57, 1;
	mov.u32 	%r58, 4;
	mov.u64 	%rd164, 0;
	// begin inline asm
	call (%rd159), _rt_buffer_get_64, (%rd123, %r57, %r58, %rd1, %rd164, %rd164, %rd164);
	// end inline asm
	ld.u32 	%r59, [%rd159];
	setp.eq.s32 	%p30, %r59, 4;
	ld.global.u32 	%r107, [Nbands_launch];

$L__BB2_14:
	ld.global.u32 	%r60, [UUID];
	mul.lo.s32 	%r61, %r60, %r107;
	cvt.u64.u32 	%rd166, %r61;
	add.s64 	%rd4, %rd273, %rd166;
	@%p30 bra 	$L__BB2_16;
	bra.uni 	$L__BB2_15;

$L__BB2_16:
	mov.u64 	%rd180, radiation_out_top;
	cvta.global.u64 	%rd175, %rd180;
	mov.u32 	%r64, 1;
	mov.u32 	%r65, 4;
	mov.u64 	%rd179, 0;
	// begin inline asm
	call (%rd274), _rt_buffer_get_64, (%rd175, %r64, %r65, %rd4, %rd179, %rd179, %rd179);
	// end inline asm
	bra.uni 	$L__BB2_17;

$L__BB2_15:
	mov.u64 	%rd173, radiation_out_bottom;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r62, 1;
	mov.u32 	%r63, 4;
	mov.u64 	%rd172, 0;
	// begin inline asm
	call (%rd274), _rt_buffer_get_64, (%rd168, %r62, %r63, %rd4, %rd172, %rd172, %rd172);
	// end inline asm

$L__BB2_17:
	ld.f32 	%f200, [%rd274];
	cvt.ftz.f64.f32 	%fd8, %f200;
	ld.global.f64 	%fd9, [prd];
	mul.f64 	%fd1, %fd9, %fd8;
	ld.global.u32 	%r66, [specular_reflection_enabled];
	setp.eq.s32 	%p14, %r66, 0;
	mov.f64 	%fd27, 0d0000000000000000;
	@%p14 bra 	$L__BB2_28;

	mov.u64 	%rd187, specular_exponent;
	cvta.global.u64 	%rd182, %rd187;
	mov.u32 	%r67, 1;
	mov.u32 	%r68, 4;
	mov.u64 	%rd275, 0;
	// begin inline asm
	call (%rd181), _rt_buffer_get_64, (%rd182, %r67, %r68, %rd1, %rd275, %rd275, %rd275);
	// end inline asm
	ld.f32 	%f201, [%rd181];
	setp.leu.ftz.f32 	%p15, %f201, 0f00000000;
	ld.global.u32 	%r69, [Nsources];
	setp.eq.s32 	%p16, %r69, 0;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB2_28;

	mov.f64 	%fd27, 0d0000000000000000;

$L__BB2_20:
	mov.u64 	%rd195, source_types;
	cvta.global.u64 	%rd190, %rd195;
	mov.u32 	%r70, 1;
	mov.u32 	%r71, 4;
	mov.u64 	%rd194, 0;
	// begin inline asm
	call (%rd189), _rt_buffer_get_64, (%rd190, %r70, %r71, %rd275, %rd194, %rd194, %rd194);
	// end inline asm
	ld.u32 	%r72, [%rd189];
	setp.eq.s32 	%p18, %r72, 0;
	@%p18 bra 	$L__BB2_22;

	// begin inline asm
	call (%rd196), _rt_buffer_get_64, (%rd190, %r70, %r71, %rd275, %rd194, %rd194, %rd194);
	// end inline asm
	ld.u32 	%r75, [%rd196];
	setp.ne.s32 	%p19, %r75, 2;
	mov.f32 	%f272, 0f00000000;
	@%p19 bra 	$L__BB2_25;

$L__BB2_22:
	mov.u64 	%rd209, source_positions;
	cvta.global.u64 	%rd204, %rd209;
	mov.u32 	%r77, 12;
	// begin inline asm
	call (%rd203), _rt_buffer_get_64, (%rd204, %r70, %r77, %rd275, %rd194, %rd194, %rd194);
	// end inline asm
	ld.f32 	%f203, [%rd203];
	ld.f32 	%f204, [%rd203+4];
	mul.ftz.f32 	%f205, %f204, %f204;
	fma.rn.ftz.f32 	%f206, %f203, %f203, %f205;
	ld.f32 	%f207, [%rd203+8];
	fma.rn.ftz.f32 	%f208, %f207, %f207, %f206;
	rsqrt.approx.ftz.f32 	%f209, %f208;
	mul.ftz.f32 	%f271, %f203, %f209;
	mul.ftz.f32 	%f270, %f209, %f204;
	mul.ftz.f32 	%f269, %f209, %f207;
	ld.global.u32 	%r78, [UUID];
	ld.global.u32 	%r79, [Nbands_launch];
	mul.lo.s32 	%r80, %r78, %r79;
	cvt.u64.u32 	%rd210, %r80;
	add.s64 	%rd9, %rd273, %rd210;
	@%p13 bra 	$L__BB2_24;
	bra.uni 	$L__BB2_23;

$L__BB2_24:
	mov.u64 	%rd224, radiation_out_top;
	cvta.global.u64 	%rd219, %rd224;
	mov.u32 	%r83, 1;
	mov.u32 	%r84, 4;
	mov.u64 	%rd223, 0;
	// begin inline asm
	call (%rd218), _rt_buffer_get_64, (%rd219, %r83, %r84, %rd9, %rd223, %rd223, %rd223);
	// end inline asm
	ld.f32 	%f272, [%rd218];
	bra.uni 	$L__BB2_25;

$L__BB2_23:
	mov.u64 	%rd217, radiation_out_bottom;
	cvta.global.u64 	%rd212, %rd217;
	mov.u32 	%r81, 1;
	mov.u32 	%r82, 4;
	mov.u64 	%rd216, 0;
	// begin inline asm
	call (%rd211), _rt_buffer_get_64, (%rd212, %r81, %r82, %rd9, %rd216, %rd216, %rd216);
	// end inline asm
	ld.f32 	%f272, [%rd211];

$L__BB2_25:
	mov.u64 	%rd230, 0;
	ld.global.f32 	%f210, [ray+12];
	sub.ftz.f32 	%f211, %f271, %f210;
	ld.global.f32 	%f212, [ray+16];
	sub.ftz.f32 	%f213, %f270, %f212;
	ld.global.f32 	%f214, [ray+20];
	sub.ftz.f32 	%f215, %f269, %f214;
	mul.ftz.f32 	%f216, %f213, %f213;
	fma.rn.ftz.f32 	%f217, %f211, %f211, %f216;
	fma.rn.ftz.f32 	%f218, %f215, %f215, %f217;
	rsqrt.approx.ftz.f32 	%f219, %f218;
	mul.ftz.f32 	%f44, %f211, %f219;
	mul.ftz.f32 	%f45, %f213, %f219;
	mul.ftz.f32 	%f46, %f215, %f219;
	mov.u32 	%r85, 1;
	mov.u32 	%r86, 4;
	// begin inline asm
	call (%rd225), _rt_buffer_get_64, (%rd182, %r85, %r86, %rd1, %rd230, %rd230, %rd230);
	// end inline asm
	ld.f32 	%f47, [%rd225];
	ld.global.u32 	%r87, [specular_reflection_enabled];
	setp.ne.s32 	%p21, %r87, 2;
	mov.f64 	%fd26, 0d3FF0000000000000;
	@%p21 bra 	$L__BB2_27;

	mov.u64 	%rd238, specular_scale;
	cvta.global.u64 	%rd233, %rd238;
	// begin inline asm
	call (%rd232), _rt_buffer_get_64, (%rd233, %r85, %r86, %rd1, %rd230, %rd230, %rd230);
	// end inline asm
	ld.f32 	%f220, [%rd232];
	cvt.ftz.f64.f32 	%fd26, %f220;

$L__BB2_27:
	cvt.ftz.f64.f32 	%fd13, %f272;
	mul.f64 	%fd14, %fd26, %fd13;
	mul.ftz.f32 	%f221, %f26, %f45;
	fma.rn.ftz.f32 	%f222, %f25, %f44, %f221;
	fma.rn.ftz.f32 	%f223, %f27, %f46, %f222;
	mov.f32 	%f224, 0f00000000;
	max.ftz.f32 	%f225, %f224, %f223;
	lg2.approx.ftz.f32 	%f226, %f225;
	mul.ftz.f32 	%f227, %f47, %f226;
	ex2.approx.ftz.f32 	%f228, %f227;
	cvt.ftz.f64.f32 	%fd15, %f228;
	mul.f64 	%fd16, %fd14, %fd15;
	add.ftz.f32 	%f229, %f47, 0f40000000;
	cvt.ftz.f64.f32 	%fd17, %f229;
	mul.f64 	%fd18, %fd16, %fd17;
	ld.global.u32 	%r90, [launch_dim];
	cvt.rn.f64.u32 	%fd19, %r90;
	add.f64 	%fd20, %fd19, %fd19;
	mul.f64 	%fd21, %fd20, 0d400921FB54442D18;
	div.rn.f64 	%fd22, %fd18, %fd21;
	add.f64 	%fd27, %fd27, %fd22;
	add.s64 	%rd275, %rd275, 1;
	cvt.u32.u64 	%r91, %rd275;
	ld.global.u32 	%r92, [Nsources];
	setp.lt.u32 	%p22, %r91, %r92;
	@%p22 bra 	$L__BB2_20;

$L__BB2_28:
	mov.u64 	%rd244, 0;
	ld.global.u32 	%r95, [prd+8];
	ld.global.u32 	%r96, [Nbands_launch];
	mul.lo.s32 	%r97, %r95, %r96;
	cvt.u64.u32 	%rd245, %r97;
	add.s64 	%rd241, %rd273, %rd245;
	mov.u64 	%rd246, radiation_in_camera;
	cvta.global.u64 	%rd240, %rd246;
	mov.u32 	%r93, 1;
	mov.u32 	%r94, 4;
	// begin inline asm
	call (%rd239), _rt_buffer_get_64, (%rd240, %r93, %r94, %rd241, %rd244, %rd244, %rd244);
	// end inline asm
	add.f64 	%fd23, %fd1, %fd27;
	cvt.rn.ftz.f32.f64 	%f230, %fd23;
	atom.add.f32 	%f231, [%rd239], %f230;
	ld.global.u32 	%r107, [Nbands_launch];
	cvt.u64.u32 	%rd247, %r107;
	add.s64 	%rd273, %rd273, 1;
	setp.lt.u64 	%p23, %rd273, %rd247;
	@%p23 bra 	$L__BB2_12;

$L__BB2_39:
	ret;

$L__BB2_4:
	ld.global.u32 	%rd139, [UUID];
	// begin inline asm
	call (%rd137), _rt_buffer_get_64, (%rd123, %r46, %r47, %rd139, %rd135, %rd135, %rd135);
	// end inline asm
	ld.u32 	%r51, [%rd137];
	setp.eq.s32 	%p9, %r51, 1;
	@%p9 bra 	$L__BB2_8;
	bra.uni 	$L__BB2_5;

$L__BB2_8:
	mul.ftz.f32 	%f106, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f107, %f1, 0f00000000, %f106;
	fma.rn.ftz.f32 	%f108, %f3, 0f00000000, %f107;
	add.ftz.f32 	%f109, %f4, %f108;
	mul.ftz.f32 	%f110, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f111, %f5, 0f00000000, %f110;
	fma.rn.ftz.f32 	%f112, %f7, 0f00000000, %f111;
	add.ftz.f32 	%f113, %f8, %f112;
	mul.ftz.f32 	%f114, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f115, %f9, 0f00000000, %f114;
	fma.rn.ftz.f32 	%f116, %f11, 0f00000000, %f115;
	add.ftz.f32 	%f117, %f12, %f116;
	fma.rn.ftz.f32 	%f118, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f119, %f3, 0f00000000, %f118;
	add.ftz.f32 	%f120, %f4, %f119;
	fma.rn.ftz.f32 	%f121, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f122, %f7, 0f00000000, %f121;
	add.ftz.f32 	%f123, %f8, %f122;
	fma.rn.ftz.f32 	%f124, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f125, %f11, 0f00000000, %f124;
	add.ftz.f32 	%f126, %f12, %f125;
	add.ftz.f32 	%f127, %f1, %f2;
	fma.rn.ftz.f32 	%f128, %f3, 0f00000000, %f127;
	add.ftz.f32 	%f129, %f4, %f128;
	add.ftz.f32 	%f130, %f5, %f6;
	fma.rn.ftz.f32 	%f131, %f7, 0f00000000, %f130;
	add.ftz.f32 	%f132, %f8, %f131;
	add.ftz.f32 	%f133, %f9, %f10;
	fma.rn.ftz.f32 	%f134, %f11, 0f00000000, %f133;
	add.ftz.f32 	%f135, %f12, %f134;
	sub.ftz.f32 	%f136, %f120, %f109;
	sub.ftz.f32 	%f137, %f123, %f113;
	sub.ftz.f32 	%f138, %f126, %f117;
	sub.ftz.f32 	%f139, %f129, %f120;
	sub.ftz.f32 	%f140, %f132, %f123;
	sub.ftz.f32 	%f141, %f135, %f126;
	mul.ftz.f32 	%f142, %f137, %f141;
	mul.ftz.f32 	%f143, %f138, %f140;
	sub.ftz.f32 	%f260, %f142, %f143;
	mul.ftz.f32 	%f144, %f138, %f139;
	mul.ftz.f32 	%f145, %f136, %f141;
	sub.ftz.f32 	%f261, %f144, %f145;
	mul.ftz.f32 	%f146, %f136, %f140;
	mul.ftz.f32 	%f147, %f137, %f139;
	sub.ftz.f32 	%f262, %f146, %f147;
	bra.uni 	$L__BB2_10;

$L__BB2_5:
	ld.global.u32 	%rd146, [UUID];
	mov.u64 	%rd149, 0;
	mov.u32 	%r52, 1;
	mov.u32 	%r53, 4;
	// begin inline asm
	call (%rd144), _rt_buffer_get_64, (%rd123, %r52, %r53, %rd146, %rd149, %rd149, %rd149);
	// end inline asm
	ld.u32 	%r54, [%rd144];
	setp.eq.s32 	%p10, %r54, 2;
	@%p10 bra 	$L__BB2_7;
	bra.uni 	$L__BB2_6;

$L__BB2_7:
	mul.ftz.f32 	%f64, %f2, 0f00000000;
	fma.rn.ftz.f32 	%f65, %f1, 0f00000000, %f64;
	fma.rn.ftz.f32 	%f66, %f3, 0f00000000, %f65;
	add.ftz.f32 	%f67, %f4, %f66;
	mul.ftz.f32 	%f68, %f6, 0f00000000;
	fma.rn.ftz.f32 	%f69, %f5, 0f00000000, %f68;
	fma.rn.ftz.f32 	%f70, %f7, 0f00000000, %f69;
	add.ftz.f32 	%f71, %f8, %f70;
	mul.ftz.f32 	%f72, %f10, 0f00000000;
	fma.rn.ftz.f32 	%f73, %f9, 0f00000000, %f72;
	fma.rn.ftz.f32 	%f74, %f11, 0f00000000, %f73;
	add.ftz.f32 	%f75, %f12, %f74;
	fma.rn.ftz.f32 	%f76, %f2, 0f00000000, %f1;
	fma.rn.ftz.f32 	%f77, %f3, 0f00000000, %f76;
	add.ftz.f32 	%f78, %f4, %f77;
	fma.rn.ftz.f32 	%f79, %f6, 0f00000000, %f5;
	fma.rn.ftz.f32 	%f80, %f7, 0f00000000, %f79;
	add.ftz.f32 	%f81, %f8, %f80;
	fma.rn.ftz.f32 	%f82, %f10, 0f00000000, %f9;
	fma.rn.ftz.f32 	%f83, %f11, 0f00000000, %f82;
	add.ftz.f32 	%f84, %f12, %f83;
	fma.rn.ftz.f32 	%f85, %f1, 0f00000000, %f2;
	fma.rn.ftz.f32 	%f86, %f3, 0f00000000, %f85;
	add.ftz.f32 	%f87, %f4, %f86;
	fma.rn.ftz.f32 	%f88, %f5, 0f00000000, %f6;
	fma.rn.ftz.f32 	%f89, %f7, 0f00000000, %f88;
	add.ftz.f32 	%f90, %f8, %f89;
	fma.rn.ftz.f32 	%f91, %f9, 0f00000000, %f10;
	fma.rn.ftz.f32 	%f92, %f11, 0f00000000, %f91;
	add.ftz.f32 	%f93, %f12, %f92;
	sub.ftz.f32 	%f94, %f78, %f67;
	sub.ftz.f32 	%f95, %f81, %f71;
	sub.ftz.f32 	%f96, %f84, %f75;
	sub.ftz.f32 	%f97, %f87, %f67;
	sub.ftz.f32 	%f98, %f90, %f71;
	sub.ftz.f32 	%f99, %f93, %f75;
	mul.ftz.f32 	%f100, %f95, %f99;
	mul.ftz.f32 	%f101, %f96, %f98;
	sub.ftz.f32 	%f260, %f100, %f101;
	mul.ftz.f32 	%f102, %f96, %f97;
	mul.ftz.f32 	%f103, %f94, %f99;
	sub.ftz.f32 	%f261, %f102, %f103;
	mul.ftz.f32 	%f104, %f94, %f98;
	mul.ftz.f32 	%f105, %f95, %f97;
	sub.ftz.f32 	%f262, %f104, %f105;
	bra.uni 	$L__BB2_10;

$L__BB2_31:
	add.ftz.f32 	%f243, %f56, 0fB727C5AC;
	add.ftz.f32 	%f244, %f243, %f51;
	st.global.f32 	[prd+24], %f244;
	bra.uni 	$L__BB2_39;

$L__BB2_6:
	ld.global.u32 	%rd153, [UUID];
	// begin inline asm
	call (%rd151), _rt_buffer_get_64, (%rd123, %r52, %r53, %rd153, %rd149, %rd149, %rd149);
	// end inline asm
	bra.uni 	$L__BB2_10;

$L__BB2_33:
	mov.f32 	%f247, 0f3727C5AC;
	sub.ftz.f32 	%f248, %f247, %f56;
	add.ftz.f32 	%f249, %f248, %f51;
	st.global.f32 	[prd+24], %f249;
	bra.uni 	$L__BB2_39;

$L__BB2_36:
	add.ftz.f32 	%f253, %f58, 0fB727C5AC;
	add.ftz.f32 	%f254, %f253, %f52;
	st.global.f32 	[prd+28], %f254;
	bra.uni 	$L__BB2_39;

}
	// .globl	_Z23closest_hit_pixel_labelv
.visible .entry _Z23closest_hit_pixel_labelv()
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<89>;
	.reg .b32 	%r<21>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<55>;


	ld.global.u32 	%r1, [prd+8];
	mov.u64 	%rd7, 0;
	ld.global.u32 	%rd4, [UUID];
	mov.u64 	%rd8, objectID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r2, %r3, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.global.v2.f32 	{%f9, %f10}, [periodic_flag];
	setp.neu.ftz.f32 	%p1, %f9, 0f3F800000;
	setp.neu.ftz.f32 	%p2, %f10, 0f3F800000;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB3_2;

	ld.u32 	%rd11, [%rd2];
	mov.u64 	%rd15, primitive_type;
	cvta.global.u64 	%rd10, %rd15;
	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r2, %r3, %rd11, %rd7, %rd7, %rd7);
	// end inline asm
	ld.u32 	%r6, [%rd9];
	setp.eq.s32 	%p4, %r6, 5;
	@%p4 bra 	$L__BB3_3;
	bra.uni 	$L__BB3_2;

$L__BB3_3:
	mov.u64 	%rd51, 1;
	mov.u64 	%rd53, 0;
	mov.u16 	%rs1, 1;
	st.global.u8 	[prd+21], %rs1;
	ld.global.f32 	%f61, [ray+12];
	ld.global.f32 	%f62, [t_hit];
	ld.global.f32 	%f63, [ray+16];
	ld.global.f32 	%f64, [ray+20];
	ld.global.f32 	%f65, [ray];
	fma.rn.ftz.f32 	%f1, %f62, %f61, %f65;
	ld.global.f32 	%f66, [ray+4];
	fma.rn.ftz.f32 	%f2, %f62, %f63, %f66;
	ld.global.f32 	%f67, [ray+8];
	fma.rn.ftz.f32 	%f68, %f62, %f64, %f67;
	mov.u64 	%rd54, bbox_vertices;
	cvta.global.u64 	%rd31, %rd54;
	mov.u32 	%r19, 2;
	mov.u32 	%r20, 12;
	// begin inline asm
	call (%rd30), _rt_buffer_get_64, (%rd31, %r19, %r20, %rd53, %rd53, %rd53, %rd53);
	// end inline asm
	ld.f32 	%f3, [%rd30];
	// begin inline asm
	call (%rd36), _rt_buffer_get_64, (%rd31, %r19, %r20, %rd51, %rd51, %rd53, %rd53);
	// end inline asm
	ld.f32 	%f4, [%rd36];
	// begin inline asm
	call (%rd42), _rt_buffer_get_64, (%rd31, %r19, %r20, %rd53, %rd53, %rd53, %rd53);
	// end inline asm
	ld.f32 	%f5, [%rd42+4];
	// begin inline asm
	call (%rd48), _rt_buffer_get_64, (%rd31, %r19, %r20, %rd51, %rd51, %rd53, %rd53);
	// end inline asm
	sub.ftz.f32 	%f6, %f4, %f3;
	ld.f32 	%f7, [%rd48+4];
	sub.ftz.f32 	%f8, %f7, %f5;
	st.global.v2.f32 	[prd+24], {%f1, %f2};
	st.global.f32 	[prd+32], %f68;
	ld.global.f32 	%f69, [periodic_flag];
	setp.neu.ftz.f32 	%p5, %f69, 0f3F800000;
	@%p5 bra 	$L__BB3_8;

	sub.ftz.f32 	%f70, %f1, %f3;
	abs.ftz.f32 	%f71, %f70;
	setp.gtu.ftz.f32 	%p6, %f71, 0f3727C5AC;
	@%p6 bra 	$L__BB3_6;
	bra.uni 	$L__BB3_5;

$L__BB3_6:
	sub.ftz.f32 	%f74, %f1, %f4;
	abs.ftz.f32 	%f75, %f74;
	setp.gtu.ftz.f32 	%p7, %f75, 0f3727C5AC;
	@%p7 bra 	$L__BB3_8;
	bra.uni 	$L__BB3_7;

$L__BB3_8:
	ld.global.f32 	%f79, [periodic_flag+4];
	setp.neu.ftz.f32 	%p8, %f79, 0f3F800000;
	@%p8 bra 	$L__BB3_13;

	sub.ftz.f32 	%f80, %f2, %f5;
	abs.ftz.f32 	%f81, %f80;
	setp.gtu.ftz.f32 	%p9, %f81, 0f3727C5AC;
	@%p9 bra 	$L__BB3_11;
	bra.uni 	$L__BB3_10;

$L__BB3_11:
	sub.ftz.f32 	%f84, %f2, %f7;
	abs.ftz.f32 	%f85, %f84;
	setp.gtu.ftz.f32 	%p10, %f85, 0f3727C5AC;
	@%p10 bra 	$L__BB3_13;

	mov.f32 	%f86, 0f3727C5AC;
	sub.ftz.f32 	%f87, %f86, %f8;
	add.ftz.f32 	%f88, %f87, %f2;
	st.global.f32 	[prd+28], %f88;
	bra.uni 	$L__BB3_13;

$L__BB3_2:
	cvt.u64.u32 	%rd24, %r1;
	ld.global.u32 	%r11, [UUID];
	add.s32 	%r12, %r11, 1;
	mov.u64 	%rd28, camera_pixel_label;
	cvta.global.u64 	%rd17, %rd28;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r2, %r3, %rd24, %rd7, %rd7, %rd7);
	// end inline asm
	st.u32 	[%rd16], %r12;
	ld.global.f32 	%f13, [t_hit];
	cvt.ftz.f64.f32 	%fd1, %f13;
	ld.global.f64 	%fd2, [prd];
	add.f64 	%fd3, %fd2, %fd1;
	ld.global.v2.f32 	{%f14, %f15}, [camera_direction];
	cvt.ftz.f64.f32 	%fd4, %f14;
	add.f64 	%fd5, %fd4, 0dBFF921FB54442D18;
	cvt.rn.ftz.f32.f64 	%f18, %fd5;
	cvt.ftz.f64.f32 	%fd6, %f15;
	mov.f64 	%fd7, 0d3FF921FB54442D18;
	sub.f64 	%fd8, %fd7, %fd6;
	cvt.rn.ftz.f32.f64 	%f19, %fd8;
	sin.approx.ftz.f32 	%f20, %f18;
	cos.approx.ftz.f32 	%f21, %f18;
	sin.approx.ftz.f32 	%f22, %f19;
	cos.approx.ftz.f32 	%f23, %f19;
	fma.rn.ftz.f32 	%f24, %f23, %f21, 0f00000000;
	fma.rn.ftz.f32 	%f25, %f22, 0f80000000, %f24;
	fma.rn.ftz.f32 	%f26, %f20, 0f80000000, %f25;
	fma.rn.ftz.f32 	%f27, %f23, 0f00000000, 0f00000000;
	sub.ftz.f32 	%f28, %f27, %f22;
	add.ftz.f32 	%f29, %f28, 0f00000000;
	fma.rn.ftz.f32 	%f30, %f23, %f20, 0f00000000;
	fma.rn.ftz.f32 	%f31, %f22, 0f80000000, %f30;
	fma.rn.ftz.f32 	%f32, %f21, 0f00000000, %f31;
	fma.rn.ftz.f32 	%f33, %f22, %f21, 0f00000000;
	fma.rn.ftz.f32 	%f34, %f23, 0f00000000, %f33;
	fma.rn.ftz.f32 	%f35, %f20, 0f80000000, %f34;
	fma.rn.ftz.f32 	%f36, %f22, 0f00000000, 0f00000000;
	add.ftz.f32 	%f37, %f36, %f23;
	add.ftz.f32 	%f38, %f37, 0f00000000;
	fma.rn.ftz.f32 	%f39, %f22, %f20, 0f00000000;
	fma.rn.ftz.f32 	%f40, %f23, 0f00000000, %f39;
	fma.rn.ftz.f32 	%f41, %f21, 0f00000000, %f40;
	fma.rn.ftz.f32 	%f42, %f21, 0f00000000, 0f00000000;
	sub.ftz.f32 	%f43, %f42, %f20;
	fma.rn.ftz.f32 	%f44, %f20, 0f00000000, 0f00000000;
	add.ftz.f32 	%f45, %f44, %f21;
	cvt.rn.ftz.f32.f64 	%f46, %fd3;
	fma.rn.ftz.f32 	%f47, %f29, 0f00000000, %f26;
	fma.rn.ftz.f32 	%f48, %f32, 0f00000000, %f47;
	fma.rn.ftz.f32 	%f49, %f38, 0f00000000, %f35;
	fma.rn.ftz.f32 	%f50, %f41, 0f00000000, %f49;
	add.ftz.f32 	%f51, %f43, 0f00000000;
	fma.rn.ftz.f32 	%f52, %f45, 0f00000000, %f51;
	ld.global.f32 	%f53, [ray+12];
	ld.global.f32 	%f54, [ray+16];
	mul.ftz.f32 	%f55, %f50, %f54;
	fma.rn.ftz.f32 	%f56, %f48, %f53, %f55;
	ld.global.f32 	%f57, [ray+20];
	fma.rn.ftz.f32 	%f58, %f52, %f57, %f56;
	abs.ftz.f32 	%f59, %f58;
	mul.ftz.f32 	%f60, %f59, %f46;
	mov.u64 	%rd29, camera_pixel_depth;
	cvta.global.u64 	%rd23, %rd29;
	// begin inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r2, %r3, %rd24, %rd7, %rd7, %rd7);
	// end inline asm
	st.f32 	[%rd22], %f60;

$L__BB3_13:
	ret;

$L__BB3_5:
	add.ftz.f32 	%f72, %f6, 0fB727C5AC;
	add.ftz.f32 	%f73, %f72, %f1;
	st.global.f32 	[prd+24], %f73;
	bra.uni 	$L__BB3_13;

$L__BB3_7:
	mov.f32 	%f76, 0f3727C5AC;
	sub.ftz.f32 	%f77, %f76, %f6;
	add.ftz.f32 	%f78, %f77, %f1;
	st.global.f32 	[prd+24], %f78;
	bra.uni 	$L__BB3_13;

$L__BB3_10:
	add.ftz.f32 	%f82, %f8, 0fB727C5AC;
	add.ftz.f32 	%f83, %f82, %f2;
	st.global.f32 	[prd+28], %f83;
	bra.uni 	$L__BB3_13;

}
	// .globl	_Z11miss_directv
.visible .entry _Z11miss_directv()
{
	.reg .pred 	%p<15>;
	.reg .b16 	%rs<4>;
	.reg .f32 	%f<27>;
	.reg .b32 	%r<65>;
	.reg .f64 	%fd<22>;
	.reg .b64 	%rd<114>;


	ld.global.u32 	%rd4, [prd+8];
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, objectID;
	cvta.global.u64 	%rd3, %rd8;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 4;
	// begin inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r7, %r8, %rd4, %rd7, %rd7, %rd7);
	// end inline asm
	ld.global.u32 	%r9, [Nbands_global];
	setp.eq.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB4_13;

	mov.u32 	%r64, -1;
	mov.u32 	%r62, 0;
	mov.u64 	%rd15, band_launch_flag;
	cvta.global.u64 	%rd10, %rd15;

$L__BB4_2:
	cvt.s64.s32 	%rd11, %r62;
	mov.u32 	%r13, 1;
	mov.u64 	%rd14, 0;
	// begin inline asm
	call (%rd9), _rt_buffer_get_64, (%rd10, %r13, %r13, %rd11, %rd14, %rd14, %rd14);
	// end inline asm
	ld.u8 	%rs1, [%rd9];
	setp.eq.s16 	%p2, %rs1, 0;
	@%p2 bra 	$L__BB4_12;

	add.s32 	%r64, %r64, 1;
	ld.global.u32 	%r22, [prd+8];
	ld.global.u32 	%r23, [Nbands_launch];
	mad.lo.s32 	%r24, %r22, %r23, %r64;
	cvt.u64.u32 	%rd36, %r24;
	ld.global.u8 	%r25, [prd+20];
	ld.global.u32 	%r26, [Nprimitives];
	mad.lo.s32 	%r27, %r26, %r25, %r22;
	ld.global.u32 	%r28, [Nbands_global];
	mad.lo.s32 	%r29, %r27, %r28, %r62;
	cvt.u64.u32 	%rd24, %r29;
	mov.u64 	%rd40, rho;
	cvta.global.u64 	%rd17, %rd40;
	mov.u32 	%r21, 4;
	// begin inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r13, %r21, %rd24, %rd14, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f1, [%rd16];
	mov.u64 	%rd41, tau;
	cvta.global.u64 	%rd23, %rd41;
	// begin inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r13, %r21, %rd24, %rd14, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f2, [%rd22];
	ld.global.f64 	%fd2, [prd];
	ld.global.u8 	%r30, [prd+20];
	ld.global.u32 	%r31, [Nbands_launch];
	mad.lo.s32 	%r32, %r31, %r30, %r64;
	cvt.u64.u32 	%rd30, %r32;
	mov.u64 	%rd42, source_fluxes;
	cvta.global.u64 	%rd29, %rd42;
	// begin inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r13, %r21, %rd30, %rd14, %rd14, %rd14);
	// end inline asm
	ld.f32 	%f5, [%rd28];
	cvt.ftz.f64.f32 	%fd3, %f5;
	mul.f64 	%fd1, %fd2, %fd3;
	mov.u64 	%rd43, radiation_in;
	cvta.global.u64 	%rd35, %rd43;
	// begin inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r13, %r21, %rd36, %rd14, %rd14, %rd14);
	// end inline asm
	mov.f32 	%f6, 0f3F800000;
	sub.ftz.f32 	%f7, %f6, %f1;
	sub.ftz.f32 	%f8, %f7, %f2;
	cvt.ftz.f64.f32 	%fd4, %f8;
	mul.f64 	%fd5, %fd1, %fd4;
	cvt.rn.ftz.f32.f64 	%f9, %fd5;
	atom.add.f32 	%f10, [%rd34], %f9;
	setp.leu.ftz.f32 	%p3, %f1, 0f00000000;
	setp.leu.ftz.f32 	%p4, %f2, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB4_7;

	ld.global.u8 	%rs2, [prd+12];
	setp.eq.s16 	%p6, %rs2, 0;
	@%p6 bra 	$L__BB4_6;

	mov.u64 	%rd56, scatter_buff_top;
	cvta.global.u64 	%rd45, %rd56;
	mov.u32 	%r35, 1;
	mov.u32 	%r36, 4;
	mov.u64 	%rd55, 0;
	// begin inline asm
	call (%rd44), _rt_buffer_get_64, (%rd45, %r35, %r36, %rd36, %rd55, %rd55, %rd55);
	// end inline asm
	cvt.ftz.f64.f32 	%fd6, %f1;
	mul.f64 	%fd7, %fd1, %fd6;
	cvt.rn.ftz.f32.f64 	%f11, %fd7;
	atom.add.f32 	%f12, [%rd44], %f11;
	mov.u64 	%rd57, scatter_buff_bottom;
	cvta.global.u64 	%rd51, %rd57;
	// begin inline asm
	call (%rd50), _rt_buffer_get_64, (%rd51, %r35, %r36, %rd36, %rd55, %rd55, %rd55);
	// end inline asm
	cvt.ftz.f64.f32 	%fd8, %f2;
	mul.f64 	%fd9, %fd1, %fd8;
	cvt.rn.ftz.f32.f64 	%f13, %fd9;
	atom.add.f32 	%f14, [%rd50], %f13;
	bra.uni 	$L__BB4_7;

$L__BB4_6:
	mov.u64 	%rd70, scatter_buff_bottom;
	cvta.global.u64 	%rd59, %rd70;
	mov.u32 	%r39, 1;
	mov.u32 	%r40, 4;
	mov.u64 	%rd69, 0;
	// begin inline asm
	call (%rd58), _rt_buffer_get_64, (%rd59, %r39, %r40, %rd36, %rd69, %rd69, %rd69);
	// end inline asm
	cvt.ftz.f64.f32 	%fd10, %f1;
	mul.f64 	%fd11, %fd1, %fd10;
	cvt.rn.ftz.f32.f64 	%f15, %fd11;
	atom.add.f32 	%f16, [%rd58], %f15;
	mov.u64 	%rd71, scatter_buff_top;
	cvta.global.u64 	%rd65, %rd71;
	// begin inline asm
	call (%rd64), _rt_buffer_get_64, (%rd65, %r39, %r40, %rd36, %rd69, %rd69, %rd69);
	// end inline asm
	cvt.ftz.f64.f32 	%fd12, %f2;
	mul.f64 	%fd13, %fd1, %fd12;
	cvt.rn.ftz.f32.f64 	%f17, %fd13;
	atom.add.f32 	%f18, [%rd64], %f17;

$L__BB4_7:
	ld.global.u32 	%r4, [Ncameras];
	setp.eq.s32 	%p7, %r4, 0;
	@%p7 bra 	$L__BB4_12;

	mov.u64 	%rd83, 0;
	ld.global.u8 	%r45, [prd+20];
	ld.global.u32 	%r46, [Nprimitives];
	ld.global.u32 	%r47, [prd+8];
	mad.lo.s32 	%r48, %r46, %r45, %r47;
	ld.global.u32 	%r49, [Nbands_global];
	mad.lo.s32 	%r50, %r48, %r49, %r62;
	ld.global.u32 	%r51, [camera_ID];
	mad.lo.s32 	%r52, %r50, %r4, %r51;
	cvt.u64.u32 	%rd80, %r52;
	mov.u64 	%rd84, rho_cam;
	cvta.global.u64 	%rd73, %rd84;
	mov.u32 	%r43, 1;
	mov.u32 	%r44, 4;
	// begin inline asm
	call (%rd72), _rt_buffer_get_64, (%rd73, %r43, %r44, %rd80, %rd83, %rd83, %rd83);
	// end inline asm
	ld.f32 	%f3, [%rd72];
	mov.u64 	%rd85, tau_cam;
	cvta.global.u64 	%rd79, %rd85;
	// begin inline asm
	call (%rd78), _rt_buffer_get_64, (%rd79, %r43, %r44, %rd80, %rd83, %rd83, %rd83);
	// end inline asm
	setp.leu.ftz.f32 	%p8, %f3, 0f00000000;
	ld.f32 	%f4, [%rd78];
	setp.leu.ftz.f32 	%p9, %f4, 0f00000000;
	and.pred  	%p10, %p8, %p9;
	setp.leu.f64 	%p11, %fd1, 0d0000000000000000;
	or.pred  	%p12, %p11, %p10;
	@%p12 bra 	$L__BB4_12;

	ld.global.u8 	%rs3, [prd+12];
	setp.eq.s16 	%p13, %rs3, 0;
	@%p13 bra 	$L__BB4_11;

	mov.u64 	%rd98, scatter_buff_top_cam;
	cvta.global.u64 	%rd87, %rd98;
	mov.u32 	%r55, 1;
	mov.u32 	%r56, 4;
	mov.u64 	%rd97, 0;
	// begin inline asm
	call (%rd86), _rt_buffer_get_64, (%rd87, %r55, %r56, %rd36, %rd97, %rd97, %rd97);
	// end inline asm
	cvt.ftz.f64.f32 	%fd14, %f3;
	mul.f64 	%fd15, %fd1, %fd14;
	cvt.rn.ftz.f32.f64 	%f19, %fd15;
	atom.add.f32 	%f20, [%rd86], %f19;
	mov.u64 	%rd99, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd93, %rd99;
	// begin inline asm
	call (%rd92), _rt_buffer_get_64, (%rd93, %r55, %r56, %rd36, %rd97, %rd97, %rd97);
	// end inline asm
	cvt.ftz.f64.f32 	%fd16, %f4;
	mul.f64 	%fd17, %fd1, %fd16;
	cvt.rn.ftz.f32.f64 	%f21, %fd17;
	atom.add.f32 	%f22, [%rd92], %f21;
	bra.uni 	$L__BB4_12;

$L__BB4_11:
	mov.u64 	%rd112, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r59, 1;
	mov.u32 	%r60, 4;
	mov.u64 	%rd111, 0;
	// begin inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r59, %r60, %rd36, %rd111, %rd111, %rd111);
	// end inline asm
	cvt.ftz.f64.f32 	%fd18, %f3;
	mul.f64 	%fd19, %fd1, %fd18;
	cvt.rn.ftz.f32.f64 	%f23, %fd19;
	atom.add.f32 	%f24, [%rd100], %f23;
	mov.u64 	%rd113, scatter_buff_top_cam;
	cvta.global.u64 	%rd107, %rd113;
	// begin inline asm
	call (%rd106), _rt_buffer_get_64, (%rd107, %r59, %r60, %rd36, %rd111, %rd111, %rd111);
	// end inline asm
	cvt.ftz.f64.f32 	%fd20, %f4;
	mul.f64 	%fd21, %fd1, %fd20;
	cvt.rn.ftz.f32.f64 	%f25, %fd21;
	atom.add.f32 	%f26, [%rd106], %f25;

$L__BB4_12:
	ld.global.u32 	%r61, [Nbands_global];
	add.s32 	%r62, %r62, 1;
	setp.lt.u32 	%p14, %r62, %r61;
	@%p14 bra 	$L__BB4_2;

$L__BB4_13:
	ret;

}
	// .globl	_Z12miss_diffusev
.visible .entry _Z12miss_diffusev()
{
	.reg .pred 	%p<24>;
	.reg .b16 	%rs<4>;
	.reg .f32 	%f<102>;
	.reg .b32 	%r<85>;
	.reg .f64 	%fd<19>;
	.reg .b64 	%rd<209>;


	ld.global.u32 	%r5, [Nbands_global];
	setp.eq.s32 	%p1, %r5, 0;
	@%p1 bra 	$L__BB5_20;

	mov.u64 	%rd5, 0;
	mov.u32 	%r84, -1;
	mov.u64 	%rd12, band_launch_flag;
	cvta.global.u64 	%rd7, %rd12;
	mov.u64 	%rd19, diffuse_flux;
	cvta.global.u64 	%rd14, %rd19;
	mov.u64 	%rd208, %rd5;

$L__BB5_2:
	mov.u32 	%r8, 1;
	// begin inline asm
	call (%rd6), _rt_buffer_get_64, (%rd7, %r8, %r8, %rd208, %rd5, %rd5, %rd5);
	// end inline asm
	ld.u8 	%rs1, [%rd6];
	setp.eq.s16 	%p2, %rs1, 0;
	@%p2 bra 	$L__BB5_19;

	add.s32 	%r84, %r84, 1;
	cvt.s64.s32 	%rd15, %r84;
	mov.u32 	%r10, 4;
	mov.u64 	%rd18, 0;
	// begin inline asm
	call (%rd13), _rt_buffer_get_64, (%rd14, %r8, %r10, %rd15, %rd18, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f10, [%rd13];
	setp.leu.ftz.f32 	%p3, %f10, 0f00000000;
	@%p3 bra 	$L__BB5_19;

	ld.global.u32 	%r19, [Nbands_launch];
	ld.global.u32 	%r20, [prd+8];
	mad.lo.s32 	%r21, %r20, %r19, %r84;
	cvt.u64.u32 	%rd3, %r21;
	ld.global.u8 	%r22, [prd+20];
	ld.global.u32 	%r23, [Nprimitives];
	mad.lo.s32 	%r24, %r23, %r22, %r20;
	ld.global.u32 	%r25, [Nbands_global];
	mul.lo.s32 	%r26, %r24, %r25;
	cvt.u64.u32 	%rd44, %r26;
	add.s64 	%rd28, %rd208, %rd44;
	mov.u64 	%rd45, rho;
	cvta.global.u64 	%rd21, %rd45;
	mov.u32 	%r17, 1;
	// begin inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r17, %r10, %rd28, %rd18, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f1, [%rd20];
	mov.u64 	%rd46, tau;
	cvta.global.u64 	%rd27, %rd46;
	// begin inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r17, %r10, %rd28, %rd18, %rd18, %rd18);
	// end inline asm
	ld.f32 	%f2, [%rd26];
	ld.global.u32 	%rd34, [prd+8];
	mov.u64 	%rd47, objectID;
	cvta.global.u64 	%rd33, %rd47;
	// begin inline asm
	call (%rd32), _rt_buffer_get_64, (%rd33, %r17, %r10, %rd34, %rd18, %rd18, %rd18);
	// end inline asm
	ld.u32 	%rd40, [%rd32];
	mov.u64 	%rd48, primitive_type;
	cvta.global.u64 	%rd39, %rd48;
	// begin inline asm
	call (%rd38), _rt_buffer_get_64, (%rd39, %r17, %r10, %rd40, %rd18, %rd18, %rd18);
	// end inline asm
	ld.u32 	%r27, [%rd38];
	setp.eq.s32 	%p4, %r27, 4;
	@%p4 bra 	$L__BB5_18;
	bra.uni 	$L__BB5_5;

$L__BB5_18:
	add.ftz.f32 	%f94, %f1, %f2;
	mov.u64 	%rd204, radiation_in;
	cvta.global.u64 	%rd181, %rd204;
	mov.u32 	%r82, 4;
	mov.u64 	%rd203, 0;
	// begin inline asm
	call (%rd180), _rt_buffer_get_64, (%rd181, %r17, %r82, %rd3, %rd203, %rd203, %rd203);
	// end inline asm
	// begin inline asm
	call (%rd186), _rt_buffer_get_64, (%rd14, %r17, %r82, %rd15, %rd203, %rd203, %rd203);
	// end inline asm
	ld.f32 	%f95, [%rd186];
	cvt.ftz.f64.f32 	%fd6, %f95;
	ld.global.f64 	%fd7, [prd];
	mul.f64 	%fd8, %fd7, %fd6;
	cvt.ftz.f64.f32 	%fd9, %f1;
	mul.f64 	%fd10, %fd8, %fd9;
	cvt.ftz.f64.f32 	%fd11, %f94;
	div.rn.f64 	%fd12, %fd10, %fd11;
	cvt.rn.ftz.f32.f64 	%f96, %fd12;
	atom.add.f32 	%f97, [%rd180], %f96;
	mov.u64 	%rd206, scatter_buff_top;
	cvta.global.u64 	%rd193, %rd206;
	// begin inline asm
	call (%rd192), _rt_buffer_get_64, (%rd193, %r17, %r82, %rd3, %rd203, %rd203, %rd203);
	// end inline asm
	// begin inline asm
	call (%rd198), _rt_buffer_get_64, (%rd14, %r17, %r82, %rd15, %rd203, %rd203, %rd203);
	// end inline asm
	ld.f32 	%f98, [%rd198];
	cvt.ftz.f64.f32 	%fd13, %f98;
	ld.global.f64 	%fd14, [prd];
	mul.f64 	%fd15, %fd14, %fd13;
	cvt.ftz.f64.f32 	%fd16, %f2;
	mul.f64 	%fd17, %fd15, %fd16;
	div.rn.f64 	%fd18, %fd17, %fd11;
	cvt.rn.ftz.f32.f64 	%f99, %fd18;
	atom.add.f32 	%f100, [%rd192], %f99;
	bra.uni 	$L__BB5_19;

$L__BB5_5:
	mov.u64 	%rd55, diffuse_extinction;
	cvta.global.u64 	%rd50, %rd55;
	mov.u32 	%r29, 4;
	mov.u64 	%rd54, 0;
	// begin inline asm
	call (%rd49), _rt_buffer_get_64, (%rd50, %r17, %r29, %rd15, %rd54, %rd54, %rd54);
	// end inline asm
	ld.f32 	%f12, [%rd49];
	setp.leu.ftz.f32 	%p5, %f12, 0f00000000;
	mov.f32 	%f11, 0f3F800000;
	mov.f32 	%f101, %f11;
	@%p5 bra 	$L__BB5_9;

	mov.u64 	%rd62, diffuse_peak_dir;
	cvta.global.u64 	%rd57, %rd62;
	mov.u32 	%r30, 1;
	mov.u32 	%r31, 12;
	// begin inline asm
	call (%rd56), _rt_buffer_get_64, (%rd57, %r30, %r31, %rd15, %rd54, %rd54, %rd54);
	// end inline asm
	ld.global.f32 	%f13, [ray+12];
	ld.f32 	%f14, [%rd56];
	ld.global.f32 	%f15, [ray+16];
	ld.f32 	%f16, [%rd56+4];
	mul.ftz.f32 	%f17, %f16, %f15;
	fma.rn.ftz.f32 	%f18, %f14, %f13, %f17;
	ld.global.f32 	%f19, [ray+20];
	ld.f32 	%f20, [%rd56+8];
	fma.rn.ftz.f32 	%f21, %f20, %f19, %f18;
	setp.lt.ftz.f32 	%p6, %f21, 0fBF800000;
	setp.gt.ftz.f32 	%p7, %f21, 0f3F800000;
	selp.f32 	%f22, 0f3F800000, %f21, %p7;
	selp.f32 	%f23, 0fBF800000, %f22, %p6;
	abs.ftz.f32 	%f24, %f23;
	neg.ftz.f32 	%f25, %f24;
	mov.f32 	%f26, 0f3F000000;
	fma.rn.ftz.f32 	%f27, %f26, %f25, %f26;
	rsqrt.approx.ftz.f32 	%f28, %f27;
	mul.ftz.f32 	%f29, %f27, %f28;
	mul.ftz.f32 	%f30, %f28, 0f3F000000;
	neg.ftz.f32 	%f31, %f29;
	fma.rn.ftz.f32 	%f32, %f31, %f30, %f26;
	fma.rn.ftz.f32 	%f33, %f29, %f32, %f29;
	setp.eq.ftz.f32 	%p8, %f24, 0f3F800000;
	selp.f32 	%f34, 0f00000000, %f33, %p8;
	setp.gt.ftz.f32 	%p9, %f24, 0f3F0F5C29;
	selp.f32 	%f35, %f34, %f24, %p9;
	mov.b32 	%r32, %f35;
	mov.b32 	%r33, %f23;
	and.b32  	%r34, %r33, -2147483648;
	or.b32  	%r35, %r34, %r32;
	mov.b32 	%f36, %r35;
	mul.ftz.f32 	%f37, %f36, %f36;
	mov.f32 	%f38, 0f3C8B1ABB;
	mov.f32 	%f39, 0f3D10ECEF;
	fma.rn.ftz.f32 	%f40, %f39, %f37, %f38;
	mov.f32 	%f41, 0f3CFC028C;
	fma.rn.ftz.f32 	%f42, %f40, %f37, %f41;
	mov.f32 	%f43, 0f3D372139;
	fma.rn.ftz.f32 	%f44, %f42, %f37, %f43;
	mov.f32 	%f45, 0f3D9993DB;
	fma.rn.ftz.f32 	%f46, %f44, %f37, %f45;
	mov.f32 	%f47, 0f3E2AAAC6;
	fma.rn.ftz.f32 	%f48, %f46, %f37, %f47;
	mul.ftz.f32 	%f49, %f48, %f37;
	fma.rn.ftz.f32 	%f50, %f49, %f36, %f36;
	neg.ftz.f32 	%f51, %f50;
	selp.f32 	%f52, %f50, %f51, %p9;
	mov.f32 	%f53, 0f3FD774EB;
	mov.f32 	%f54, 0f3F6EE581;
	fma.rn.ftz.f32 	%f55, %f54, %f53, %f52;
	setp.gt.ftz.f32 	%p10, %f23, 0f3F0F5C29;
	selp.f32 	%f56, %f50, %f55, %p10;
	add.ftz.f32 	%f57, %f56, %f56;
	selp.f32 	%f3, %f57, %f56, %p9;
	cvt.ftz.f64.f32 	%fd1, %f3;
	setp.lt.f64 	%p11, %fd1, 0d3F91DF46A2529D39;
	@%p11 bra 	$L__BB5_8;
	bra.uni 	$L__BB5_7;

$L__BB5_8:
	mov.u32 	%r43, 4;
	mov.u64 	%rd88, 0;
	// begin inline asm
	call (%rd77), _rt_buffer_get_64, (%rd50, %r30, %r43, %rd15, %rd88, %rd88, %rd88);
	// end inline asm
	mov.f32 	%f64, 0f3C8EFA35;
	lg2.approx.ftz.f32 	%f65, %f64;
	ld.f32 	%f66, [%rd77];
	mul.ftz.f32 	%f67, %f66, %f65;
	neg.ftz.f32 	%f68, %f67;
	ex2.approx.ftz.f32 	%f69, %f68;
	mov.u64 	%rd90, diffuse_dist_norm;
	cvta.global.u64 	%rd84, %rd90;
	// begin inline asm
	call (%rd83), _rt_buffer_get_64, (%rd84, %r30, %r43, %rd15, %rd88, %rd88, %rd88);
	// end inline asm
	ld.f32 	%f70, [%rd83];
	mul.ftz.f32 	%f101, %f69, %f70;
	bra.uni 	$L__BB5_9;

$L__BB5_7:
	mov.u32 	%r39, 4;
	mov.u64 	%rd74, 0;
	// begin inline asm
	call (%rd63), _rt_buffer_get_64, (%rd50, %r30, %r39, %rd15, %rd74, %rd74, %rd74);
	// end inline asm
	lg2.approx.ftz.f32 	%f58, %f3;
	ld.f32 	%f59, [%rd63];
	mul.ftz.f32 	%f60, %f59, %f58;
	neg.ftz.f32 	%f61, %f60;
	ex2.approx.ftz.f32 	%f62, %f61;
	mov.u64 	%rd76, diffuse_dist_norm;
	cvta.global.u64 	%rd70, %rd76;
	// begin inline asm
	call (%rd69), _rt_buffer_get_64, (%rd70, %r30, %r39, %rd15, %rd74, %rd74, %rd74);
	// end inline asm
	ld.f32 	%f63, [%rd69];
	mul.ftz.f32 	%f101, %f62, %f63;

$L__BB5_9:
	mov.u32 	%r46, 1;
	// begin inline asm
	call (%rd91), _rt_buffer_get_64, (%rd14, %r46, %r29, %rd15, %rd54, %rd54, %rd54);
	// end inline asm
	ld.f32 	%f71, [%rd91];
	mul.ftz.f32 	%f72, %f101, %f71;
	cvt.ftz.f64.f32 	%fd2, %f72;
	ld.global.f64 	%fd3, [prd];
	mul.f64 	%fd4, %fd3, %fd2;
	cvt.rn.ftz.f32.f64 	%f7, %fd4;
	mov.u64 	%rd104, radiation_in;
	cvta.global.u64 	%rd98, %rd104;
	// begin inline asm
	call (%rd97), _rt_buffer_get_64, (%rd98, %r46, %r29, %rd3, %rd54, %rd54, %rd54);
	// end inline asm
	sub.ftz.f32 	%f74, %f11, %f1;
	sub.ftz.f32 	%f75, %f74, %f2;
	mul.ftz.f32 	%f76, %f75, %f7;
	atom.add.f32 	%f77, [%rd97], %f76;
	setp.leu.ftz.f32 	%p12, %f2, 0f00000000;
	setp.leu.ftz.f32 	%p13, %f1, 0f00000000;
	and.pred  	%p14, %p13, %p12;
	@%p14 bra 	$L__BB5_13;

	ld.global.u8 	%rs2, [prd+12];
	setp.eq.s16 	%p15, %rs2, 0;
	@%p15 bra 	$L__BB5_12;

	mov.u64 	%rd117, scatter_buff_top;
	cvta.global.u64 	%rd106, %rd117;
	mov.u32 	%r50, 1;
	mov.u32 	%r51, 4;
	mov.u64 	%rd116, 0;
	// begin inline asm
	call (%rd105), _rt_buffer_get_64, (%rd106, %r50, %r51, %rd3, %rd116, %rd116, %rd116);
	// end inline asm
	mul.ftz.f32 	%f78, %f1, %f7;
	atom.add.f32 	%f79, [%rd105], %f78;
	mov.u64 	%rd118, scatter_buff_bottom;
	cvta.global.u64 	%rd112, %rd118;
	// begin inline asm
	call (%rd111), _rt_buffer_get_64, (%rd112, %r50, %r51, %rd3, %rd116, %rd116, %rd116);
	// end inline asm
	mul.ftz.f32 	%f80, %f2, %f7;
	atom.add.f32 	%f81, [%rd111], %f80;
	bra.uni 	$L__BB5_13;

$L__BB5_12:
	mov.u64 	%rd131, scatter_buff_bottom;
	cvta.global.u64 	%rd120, %rd131;
	mov.u32 	%r54, 1;
	mov.u32 	%r55, 4;
	mov.u64 	%rd130, 0;
	// begin inline asm
	call (%rd119), _rt_buffer_get_64, (%rd120, %r54, %r55, %rd3, %rd130, %rd130, %rd130);
	// end inline asm
	mul.ftz.f32 	%f82, %f1, %f7;
	atom.add.f32 	%f83, [%rd119], %f82;
	mov.u64 	%rd132, scatter_buff_top;
	cvta.global.u64 	%rd126, %rd132;
	// begin inline asm
	call (%rd125), _rt_buffer_get_64, (%rd126, %r54, %r55, %rd3, %rd130, %rd130, %rd130);
	// end inline asm
	mul.ftz.f32 	%f84, %f2, %f7;
	atom.add.f32 	%f85, [%rd125], %f84;

$L__BB5_13:
	ld.global.u32 	%r3, [Ncameras];
	setp.eq.s32 	%p16, %r3, 0;
	@%p16 bra 	$L__BB5_19;

	cvt.u64.u32 	%rd145, %r3;
	mov.u64 	%rd144, 0;
	ld.global.u8 	%r60, [prd+20];
	ld.global.u32 	%r61, [Nprimitives];
	ld.global.u32 	%r62, [prd+8];
	mad.lo.s32 	%r63, %r61, %r60, %r62;
	ld.global.u32 	%r64, [Nbands_global];
	mul.lo.s32 	%r65, %r3, %r64;
	mul.lo.s32 	%r66, %r65, %r63;
	cvt.u64.u32 	%rd146, %r66;
	ld.global.u32 	%rd147, [camera_ID];
	mul.lo.s64 	%rd148, %rd208, %rd145;
	add.s64 	%rd149, %rd148, %rd147;
	add.s64 	%rd141, %rd149, %rd146;
	mov.u64 	%rd150, rho_cam;
	cvta.global.u64 	%rd134, %rd150;
	mov.u32 	%r58, 1;
	mov.u32 	%r59, 4;
	// begin inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r58, %r59, %rd141, %rd144, %rd144, %rd144);
	// end inline asm
	ld.f32 	%f8, [%rd133];
	mov.u64 	%rd151, tau_cam;
	cvta.global.u64 	%rd140, %rd151;
	// begin inline asm
	call (%rd139), _rt_buffer_get_64, (%rd140, %r58, %r59, %rd141, %rd144, %rd144, %rd144);
	// end inline asm
	setp.leu.ftz.f32 	%p17, %f8, 0f00000000;
	ld.f32 	%f9, [%rd139];
	setp.leu.ftz.f32 	%p18, %f9, 0f00000000;
	and.pred  	%p19, %p17, %p18;
	ld.global.f64 	%fd5, [prd];
	setp.leu.f64 	%p20, %fd5, 0d0000000000000000;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB5_19;

	ld.global.u8 	%rs3, [prd+12];
	setp.eq.s16 	%p22, %rs3, 0;
	@%p22 bra 	$L__BB5_17;

	mov.u64 	%rd164, scatter_buff_top_cam;
	cvta.global.u64 	%rd153, %rd164;
	mov.u32 	%r69, 1;
	mov.u32 	%r70, 4;
	mov.u64 	%rd163, 0;
	// begin inline asm
	call (%rd152), _rt_buffer_get_64, (%rd153, %r69, %r70, %rd3, %rd163, %rd163, %rd163);
	// end inline asm
	mul.ftz.f32 	%f86, %f8, %f7;
	atom.add.f32 	%f87, [%rd152], %f86;
	mov.u64 	%rd165, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd159, %rd165;
	// begin inline asm
	call (%rd158), _rt_buffer_get_64, (%rd159, %r69, %r70, %rd3, %rd163, %rd163, %rd163);
	// end inline asm
	mul.ftz.f32 	%f88, %f9, %f7;
	atom.add.f32 	%f89, [%rd158], %f88;
	bra.uni 	$L__BB5_19;

$L__BB5_17:
	mov.u64 	%rd178, scatter_buff_bottom_cam;
	cvta.global.u64 	%rd167, %rd178;
	mov.u32 	%r73, 1;
	mov.u32 	%r74, 4;
	mov.u64 	%rd177, 0;
	// begin inline asm
	call (%rd166), _rt_buffer_get_64, (%rd167, %r73, %r74, %rd3, %rd177, %rd177, %rd177);
	// end inline asm
	mul.ftz.f32 	%f90, %f8, %f7;
	atom.add.f32 	%f91, [%rd166], %f90;
	mov.u64 	%rd179, scatter_buff_top_cam;
	cvta.global.u64 	%rd173, %rd179;
	// begin inline asm
	call (%rd172), _rt_buffer_get_64, (%rd173, %r73, %r74, %rd3, %rd177, %rd177, %rd177);
	// end inline asm
	mul.ftz.f32 	%f92, %f9, %f7;
	atom.add.f32 	%f93, [%rd172], %f92;

$L__BB5_19:
	ld.global.u32 	%rd207, [Nbands_global];
	add.s64 	%rd208, %rd208, 1;
	setp.lt.u64 	%p23, %rd208, %rd207;
	@%p23 bra 	$L__BB5_2;

$L__BB5_20:
	ret;

}
	// .globl	_Z11miss_camerav
.visible .entry _Z11miss_camerav()
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<71>;
	.reg .b32 	%r<27>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<70>;


	ld.global.u32 	%r1, [Nbands_launch];
	setp.eq.s32 	%p1, %r1, 0;
	@%p1 bra 	$L__BB6_9;

	mov.u64 	%rd3, 0;
	mov.u64 	%rd10, diffuse_flux;
	cvta.global.u64 	%rd5, %rd10;
	mov.u64 	%rd17, diffuse_extinction;
	cvta.global.u64 	%rd12, %rd17;
	mov.u64 	%rd69, %rd3;

$L__BB6_2:
	mov.u32 	%r2, 1;
	mov.u32 	%r3, 4;
	// begin inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r2, %r3, %rd69, %rd3, %rd3, %rd3);
	// end inline asm
	ld.f32 	%f5, [%rd4];
	setp.leu.ftz.f32 	%p2, %f5, 0f00000000;
	@%p2 bra 	$L__BB6_8;

	mov.u64 	%rd16, 0;
	// begin inline asm
	call (%rd11), _rt_buffer_get_64, (%rd12, %r2, %r3, %rd69, %rd16, %rd16, %rd16);
	// end inline asm
	ld.f32 	%f7, [%rd11];
	setp.leu.ftz.f32 	%p3, %f7, 0f00000000;
	mov.f32 	%f70, 0f3F800000;
	@%p3 bra 	$L__BB6_7;

	mov.u64 	%rd24, diffuse_peak_dir;
	cvta.global.u64 	%rd19, %rd24;
	mov.u32 	%r6, 1;
	mov.u32 	%r7, 12;
	// begin inline asm
	call (%rd18), _rt_buffer_get_64, (%rd19, %r6, %r7, %rd69, %rd16, %rd16, %rd16);
	// end inline asm
	ld.global.f32 	%f8, [ray+12];
	ld.f32 	%f9, [%rd18];
	ld.global.f32 	%f10, [ray+16];
	ld.f32 	%f11, [%rd18+4];
	mul.ftz.f32 	%f12, %f11, %f10;
	fma.rn.ftz.f32 	%f13, %f9, %f8, %f12;
	ld.global.f32 	%f14, [ray+20];
	ld.f32 	%f15, [%rd18+8];
	fma.rn.ftz.f32 	%f16, %f15, %f14, %f13;
	setp.lt.ftz.f32 	%p4, %f16, 0fBF800000;
	setp.gt.ftz.f32 	%p5, %f16, 0f3F800000;
	selp.f32 	%f17, 0f3F800000, %f16, %p5;
	selp.f32 	%f18, 0fBF800000, %f17, %p4;
	abs.ftz.f32 	%f19, %f18;
	neg.ftz.f32 	%f20, %f19;
	mov.f32 	%f21, 0f3F000000;
	fma.rn.ftz.f32 	%f22, %f21, %f20, %f21;
	rsqrt.approx.ftz.f32 	%f23, %f22;
	mul.ftz.f32 	%f24, %f22, %f23;
	mul.ftz.f32 	%f25, %f23, 0f3F000000;
	neg.ftz.f32 	%f26, %f24;
	fma.rn.ftz.f32 	%f27, %f26, %f25, %f21;
	fma.rn.ftz.f32 	%f28, %f24, %f27, %f24;
	setp.eq.ftz.f32 	%p6, %f19, 0f3F800000;
	selp.f32 	%f29, 0f00000000, %f28, %p6;
	setp.gt.ftz.f32 	%p7, %f19, 0f3F0F5C29;
	selp.f32 	%f30, %f29, %f19, %p7;
	mov.b32 	%r8, %f30;
	mov.b32 	%r9, %f18;
	and.b32  	%r10, %r9, -2147483648;
	or.b32  	%r11, %r10, %r8;
	mov.b32 	%f31, %r11;
	mul.ftz.f32 	%f32, %f31, %f31;
	mov.f32 	%f33, 0f3C8B1ABB;
	mov.f32 	%f34, 0f3D10ECEF;
	fma.rn.ftz.f32 	%f35, %f34, %f32, %f33;
	mov.f32 	%f36, 0f3CFC028C;
	fma.rn.ftz.f32 	%f37, %f35, %f32, %f36;
	mov.f32 	%f38, 0f3D372139;
	fma.rn.ftz.f32 	%f39, %f37, %f32, %f38;
	mov.f32 	%f40, 0f3D9993DB;
	fma.rn.ftz.f32 	%f41, %f39, %f32, %f40;
	mov.f32 	%f42, 0f3E2AAAC6;
	fma.rn.ftz.f32 	%f43, %f41, %f32, %f42;
	mul.ftz.f32 	%f44, %f43, %f32;
	fma.rn.ftz.f32 	%f45, %f44, %f31, %f31;
	neg.ftz.f32 	%f46, %f45;
	selp.f32 	%f47, %f45, %f46, %p7;
	mov.f32 	%f48, 0f3FD774EB;
	mov.f32 	%f49, 0f3F6EE581;
	fma.rn.ftz.f32 	%f50, %f49, %f48, %f47;
	setp.gt.ftz.f32 	%p8, %f18, 0f3F0F5C29;
	selp.f32 	%f51, %f45, %f50, %p8;
	add.ftz.f32 	%f52, %f51, %f51;
	selp.f32 	%f1, %f52, %f51, %p7;
	cvt.ftz.f64.f32 	%fd1, %f1;
	setp.lt.f64 	%p9, %fd1, 0d3F91DF46A2529D39;
	@%p9 bra 	$L__BB6_6;
	bra.uni 	$L__BB6_5;

$L__BB6_6:
	mov.u32 	%r19, 4;
	mov.u64 	%rd50, 0;
	// begin inline asm
	call (%rd39), _rt_buffer_get_64, (%rd12, %r6, %r19, %rd69, %rd50, %rd50, %rd50);
	// end inline asm
	mov.f32 	%f59, 0f3C8EFA35;
	lg2.approx.ftz.f32 	%f60, %f59;
	ld.f32 	%f61, [%rd39];
	mul.ftz.f32 	%f62, %f61, %f60;
	neg.ftz.f32 	%f63, %f62;
	ex2.approx.ftz.f32 	%f64, %f63;
	mov.u64 	%rd52, diffuse_dist_norm;
	cvta.global.u64 	%rd46, %rd52;
	// begin inline asm
	call (%rd45), _rt_buffer_get_64, (%rd46, %r6, %r19, %rd69, %rd50, %rd50, %rd50);
	// end inline asm
	ld.f32 	%f65, [%rd45];
	mul.ftz.f32 	%f70, %f64, %f65;
	bra.uni 	$L__BB6_7;

$L__BB6_5:
	mov.u32 	%r15, 4;
	mov.u64 	%rd36, 0;
	// begin inline asm
	call (%rd25), _rt_buffer_get_64, (%rd12, %r6, %r15, %rd69, %rd36, %rd36, %rd36);
	// end inline asm
	lg2.approx.ftz.f32 	%f53, %f1;
	ld.f32 	%f54, [%rd25];
	mul.ftz.f32 	%f55, %f54, %f53;
	neg.ftz.f32 	%f56, %f55;
	ex2.approx.ftz.f32 	%f57, %f56;
	mov.u64 	%rd38, diffuse_dist_norm;
	cvta.global.u64 	%rd32, %rd38;
	// begin inline asm
	call (%rd31), _rt_buffer_get_64, (%rd32, %r6, %r15, %rd69, %rd36, %rd36, %rd36);
	// end inline asm
	ld.f32 	%f58, [%rd31];
	mul.ftz.f32 	%f70, %f57, %f58;

$L__BB6_7:
	ld.global.u32 	%r24, [prd+8];
	ld.global.u32 	%r25, [Nbands_launch];
	mul.lo.s32 	%r26, %r24, %r25;
	cvt.u64.u32 	%rd65, %r26;
	add.s64 	%rd55, %rd69, %rd65;
	mov.u64 	%rd66, radiation_in_camera;
	cvta.global.u64 	%rd54, %rd66;
	mov.u32 	%r22, 1;
	mov.u32 	%r23, 4;
	// begin inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r22, %r23, %rd55, %rd16, %rd16, %rd16);
	// end inline asm
	// begin inline asm
	call (%rd59), _rt_buffer_get_64, (%rd5, %r22, %r23, %rd69, %rd16, %rd16, %rd16);
	// end inline asm
	ld.f32 	%f66, [%rd59];
	mul.ftz.f32 	%f67, %f70, %f66;
	cvt.ftz.f64.f32 	%fd2, %f67;
	ld.global.f64 	%fd3, [prd];
	mul.f64 	%fd4, %fd3, %fd2;
	cvt.rn.ftz.f32.f64 	%f68, %fd4;
	atom.add.f32 	%f69, [%rd53], %f68;

$L__BB6_8:
	add.s64 	%rd69, %rd69, 1;
	ld.global.u32 	%rd68, [Nbands_launch];
	setp.lt.u64 	%p10, %rd69, %rd68;
	@%p10 bra 	$L__BB6_2;

$L__BB6_9:
	ret;

}
	// .globl	_Z16miss_pixel_labelv
.visible .entry _Z16miss_pixel_labelv()
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;


	ld.global.u32 	%rd3, [prd+8];
	mov.u64 	%rd6, 0;
	mov.u64 	%rd7, camera_pixel_depth;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 4;
	// begin inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd6, %rd6, %rd6);
	// end inline asm
	mov.u32 	%r3, -1082130432;
	st.u32 	[%rd1], %r3;
	ret;

}

