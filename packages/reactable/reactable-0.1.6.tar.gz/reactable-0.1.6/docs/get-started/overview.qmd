---
title: Overview
jupyter: python3
---

```{python}
import htmltools
from reactable import options, Reactable, Column, embed_css
from reactable.data import cars_93

embed_css()
```

reactable handles the process of visualizing tabular data from preview, to polish, to final display.

![](/assets/table-process.png)

* **preview**: exploring tables, even if they have many rows or columns. This often involves interactive elements such as filters and pagination.
* **polish**: customizing the table structure, format of values (e.g. dates), and overall style (e.g. highlighting rows).
* **display**: publishing the table as part of a notebook or dashboard.

## Preview: quickly explore data

At its simplest, reactable enables you to quickly preview a DataFrame:

```{python}
lil_cars = cars_93[["manufacturer", "model", "type", "price"]]
Reactable(lil_cars, default_page_size=5, filterable=True)
```

Note the table above supports these actions:

* Filtering rows using the input boxes below the column names.
* Paging through data using controls on the bottom right.

The `Reactable` class provides many options for interactive controls like search, sorting, and pagination:

```{python}
Reactable(
    lil_cars,
    default_page_size=5,

    # add search bar ----
    searchable=True,

    # show sort icon, sort desc when icon clicked ----
    show_sortable=True,
    default_sort_order="desc",

    # allow typing in page number ----
    pagination_type="jump",

    # mouse over row to highlight ----
    highlight=True,
)

```

::: {.callout-note}

### Dispelling the curse of the three dots

The default DataFrame output in tools like pandas and polars often hides rows and columns with an ellipsis (`...`). reactable is handy for getting around this.

For example, here is what the data looks like in pandas:

```{python}
lil_cars.to_pandas()
```

Notice that the middle rows are hidden with `...`.

:::

## Polish: structure, format, style

### Structure table

```{python}
# | code-fold: true

from reactable.models import Reactable, ColGroup, Column, ColFormat, Theme, Language

cars = cars_93[:3, ["manufacturer", "model", "type", "price", "min_price", "max_price"]]

Reactable(
    cars,
    group_by="manufacturer",
    column_groups=[
        ColGroup("Info", ["manufacturer", "model", "type"]),
        ColGroup("Price", ["min_price", "price", "max_price"]),
    ],
    columns={
        "manufacturer": Column(name="Manufacturer"),
        "model": Column(name="Model"),
        "type": Column(name="Type"),
        "min_price": Column(name="Min"),
        "max_price": Column(name="Max"),
        "price": Column(name="Amount"),
    },
    default_page_size=3,
    default_expanded=True,
)

```

* **Column groups**: higher-level grouping of columns (e.g. "Info" label).
* **Column labels**: human-friendly names for columns (e.g. "Manufacturer" vs "manufacturer").
* **Row groupings**: expandable grouping of rows. Since the data here is grouped on "manufacturer", clicking `"Acura (2)"` will collapse the rows beneath it.

### Format data

Formatting means changing the display of information, like a date, number with decimals, or currency. There are two important places formatting occurs:

* The body of the table.
* Other parts of the table, like column headers or footers.

#### Formatting body

Here's what the data looks like before:


```{python}
from reactable.data import prices

prices.to_pandas()
```

And here is the data with column formatting applied.

```{python}
# | code-fold: true
from reactable.data import prices
from reactable import Reactable, Column, ColFormat

Reactable(
    data=prices,
    columns=[
        Column(id="price_usd", format=ColFormat(prefix="$", separators=True, digits=2)),
        Column(id="price_inr", format=ColFormat(currency="INR", separators=True, locales="hi-IN")),
        Column(id="number_fr", format=ColFormat(locales="fr-FR")),
        Column(id="temp", format=ColFormat(suffix="°C")),
        Column(id="percent", format=ColFormat(percent=True, digits=1)),
        Column(id="date", format=ColFormat(date=True, locales="en-GB")),
    ],
)
```

* `price_usd` and `price_inr` formatted as currencies. `numbers_fr` uses `","` decimal marker.
* `temp` and `percent` followed by `"°C"` and `"%"`, respectively. Fewer decimals shown.
* `date` formatted as `day/month/year`.

#### Formatting other parts

```{python}
# | code-fold: true
from reactable.models import ColInfo


def fmt_footer(ci: ColInfo):
    ttl = sum(ci.values)
    return f"${ttl:.2f}"


Reactable(
    cars,
    searchable=True,
    columns={"price": Column(footer=fmt_footer)},
)
```


### Style everything


```{python}
# | code-fold: true
from reactable.data import sleep


Reactable(
    sleep[:6, :],
    columns=[
        Column(
            id="extra",
            style=lambda ci: {
                "color": "#008800" if ci.value > 0 else "#e00000",
                "font-weight": "bold",
            },
        )
    ],
)
```

```{python}
# | code-fold: true
from reactable.data import cars_93
from reactable.models import Theme

Reactable(
    cars_93,
    searchable=True,
    striped=True,
    highlight=True,
    bordered=True,
    theme=Theme(
        border_color="#dfe2e5",
        striped_color="#f6f8fa",
        highlight_color="#f0f5f9",
        cell_padding="8px 12px",
        style={
            "font-family": "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif"
        },
        search_input_style={"width": "100%"},
    ),
    default_page_size=5,
)

```

## Display: exporting results

reactable currently work in wide range of environments:

* Jupyter Lab
* VS Code
* Positron
* Colab
* Anywhere AnyWidgets work

## Next steps