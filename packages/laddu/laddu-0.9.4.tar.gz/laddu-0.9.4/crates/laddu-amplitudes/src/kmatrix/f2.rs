use super::FixedKMatrix;
use laddu_core::{
    amplitudes::{Amplitude, AmplitudeID, ParameterLike},
    data::Event,
    resources::{Cache, ComplexVectorID, MatrixID, ParameterID, Parameters, Resources},
    utils::variables::{Mass, Variable},
    Float, LadduError,
};
#[cfg(feature = "python")]
use laddu_python::{
    amplitudes::{PyAmplitude, PyParameterLike},
    utils::variables::PyMass,
};
use nalgebra::{matrix, vector, DVector, SMatrix, SVector};
use num::Complex;
#[cfg(feature = "python")]
use pyo3::prelude::*;
use serde::{Deserialize, Serialize};
use std::array;

const G_F2: SMatrix<Float, 4, 4> = matrix![
     0.40033,  0.01820, -0.06709, -0.49924;
     0.15479,  0.17300,  0.22941,  0.19295;
    -0.08900,  0.32393, -0.43133,  0.27975;
    -0.00113,  0.15256,  0.23721, -0.03987
];

const C_F2: SMatrix<Float, 4, 4> = matrix![
    -0.04319,  0.00000,  0.00984,  0.01028;
     0.00000,  0.00000,  0.00000,  0.00000;
     0.00984,  0.00000, -0.07344,  0.05533;
     0.01028,  0.00000,  0.05533, -0.05183
];

const M_F2: SVector<Float, 4> = vector![1.15299, 1.48359, 1.72923, 1.96700];

const COV_F2: SMatrix<Float, 36, 36> = matrix![
    0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000000, -0.00000000000000, 0.00000000000000, -0.00000000000000, 0.00000000000000;
    -0.00000000000000, 0.00000000000001, 0.00000000022965, 0.00000000000000, -0.00000000001878, -0.00000000000016, -0.00000000065337, 0.00000000000000, 0.00000000000000, -0.00000000003574, 0.00000000091495, 0.00000000000000, -0.00000000001447, -0.00000000032942, -0.00000000086530, 0.00000000000000, -0.00000000000433, 0.00000000000000, -0.00000000001051, -0.00000000002961, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000000283, -0.00000000007379, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000005678, 0.00000000000248, 0.00000000002691, -0.00000000020470, 0.00000000000000;
    0.00000000000000, 0.00000000022965, 0.00020810475177, 0.00000000000000, -0.00002017796231, 0.00000000778406, -0.00048546523204, 0.00000000000000, -0.00000000000630, 0.00010221652645, 0.00051663367454, 0.00000000000000, -0.00000509806086, -0.00015222017267, -0.00112613397259, 0.00000000000000, 0.00000135971725, 0.00000000000000, 0.00000080623080, -0.00001338578863, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000617047714, -0.00000991268602, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00001724685959, 0.00000287435535, -0.00001001652618, -0.00007549764696, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    -0.00000000000000, -0.00000000001878, -0.00002017796231, 0.00000000000000, 0.00000525722489, 0.00000000347535, 0.00007350861954, 0.00000000000000, 0.00000000001396, -0.00002021695069, -0.00006160939975, 0.00000000000000, 0.00000023103828, 0.00002452125562, 0.00012137914521, 0.00000000000000, -0.00000025962545, 0.00000000000000, 0.00000097175304, 0.00000183615384, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000295694459, 0.00000421294651, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000803261003, -0.00000065823199, 0.00000349837417, -0.00000336314015, 0.00000000000000;
    0.00000000000000, -0.00000000000016, 0.00000000778406, 0.00000000000000, 0.00000000347535, 0.00000000389489, -0.00000000990126, 0.00000000000000, 0.00000000000001, 0.00000004424962, 0.00000015369780, 0.00000000000000, -0.00000001127840, 0.00000005605393, -0.00000013259646, 0.00000000000000, -0.00000000001938, 0.00000000000000, -0.00000001160782, -0.00000000341675, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000012073237, -0.00000001929218, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000001941485, -0.00000000143073, -0.00000006552572, -0.00000002253226, 0.00000000000000;
    -0.00000000000000, -0.00000000065337, -0.00048546523204, 0.00000000000000, 0.00007350861954, -0.00000000990126, 0.00160693804884, 0.00000000000000, 0.00000000000716, -0.00032239627461, -0.00146564294012, 0.00000000000000, -0.00001091407346, 0.00060953662553, 0.00271778119791, 0.00000000000000, -0.00000458707014, 0.00000000000000, 0.00002420661713, 0.00003157138911, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00006172454915, 0.00003742551790, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00004481679431, -0.00000990554723, 0.00005210207785, -0.00002914750198, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    -0.00000000000000, 0.00000000000000, -0.00000000000630, 0.00000000000000, 0.00000000001396, 0.00000000000001, 0.00000000000716, 0.00000000000000, 0.00000000000001, -0.00000000015266, 0.00000000068388, 0.00000000000000, -0.00000000002020, 0.00000000021413, 0.00000000047953, 0.00000000000000, -0.00000000000229, 0.00000000000000, 0.00000000000701, -0.00000000004114, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000390, 0.00000000002973, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000000013896, -0.00000000000119, 0.00000000007601, 0.00000000016843, 0.00000000000000;
    0.00000000000000, -0.00000000003574, 0.00010221652645, 0.00000000000000, -0.00002021695069, 0.00000004424962, -0.00032239627461, 0.00000000000000, -0.00000000015266, 0.00027348566347, 0.00027881566888, 0.00000000000000, -0.00000585835284, -0.00011191586495, -0.00054183174648, 0.00000000000000, 0.00000178367809, 0.00000000000000, -0.00000880807311, -0.00000212815472, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000173087260, -0.00001543868374, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00005245267478, 0.00000250597329, -0.00003534471579, -0.00001401703507, 0.00000000000000;
    -0.00000000000000, 0.00000000091495, 0.00051663367454, 0.00000000000000, -0.00006160939975, 0.00000015369780, -0.00146564294012, 0.00000000000000, 0.00000000068388, 0.00027881566888, 0.00276953127748, 0.00000000000000, -0.00006133405257, -0.00070912629842, -0.00242022766908, 0.00000000000000, 0.00000245425082, 0.00000000000000, -0.00002889424830, -0.00009148385754, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00006190803960, -0.00014333356119, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00007320581453, 0.00000917563104, 0.00005504920575, 0.00012387354261, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    -0.00000000000000, -0.00000000001447, -0.00000509806086, 0.00000000000000, 0.00000023103828, -0.00000001127840, -0.00001091407346, 0.00000000000000, -0.00000000002020, -0.00000585835284, -0.00006133405257, 0.00000000000000, 0.00001487107091, 0.00003279810089, 0.00000992667858, 0.00000000000000, -0.00000037239227, 0.00000000000000, 0.00000032079537, 0.00000836864671, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000004861005, 0.00001466955130, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00002455088013, -0.00000001487073, -0.00000343475307, -0.00001044704032, 0.00000000000000;
    -0.00000000000000, -0.00000000032942, -0.00015222017267, 0.00000000000000, 0.00002452125562, 0.00000005605393, 0.00060953662553, 0.00000000000000, 0.00000000021413, -0.00011191586495, -0.00070912629842, 0.00000000000000, 0.00003279810089, 0.00079820504834, 0.00104020065646, 0.00000000000000, -0.00000231617382, 0.00000000000000, 0.00002397953873, 0.00002737632607, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00012757590469, 0.00004824700869, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00001309788555, -0.00000368941509, 0.00002244357219, -0.00016023613815, 0.00000000000000;
    0.00000000000000, -0.00000000086530, -0.00112613397259, 0.00000000000000, 0.00012137914521, -0.00000013259646, 0.00271778119791, 0.00000000000000, 0.00000000047953, -0.00054183174648, -0.00242022766908, 0.00000000000000, 0.00000992667858, 0.00104020065646, 0.00767507299236, 0.00000000000000, -0.00000515543606, 0.00000000000000, -0.00001664001856, 0.00007656613893, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00006180921638, 0.00004133504962, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000471840482, -0.00001687638765, 0.00009376741583, 0.00016545659203, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, -0.00000000000433, 0.00000135971725, 0.00000000000000, -0.00000025962545, -0.00000000001938, -0.00000458707014, 0.00000000000000, -0.00000000000229, 0.00000178367809, 0.00000245425082, 0.00000000000000, -0.00000037239227, -0.00000231617382, -0.00000515543606, 0.00000000000000, 0.00000023456698, 0.00000000000000, -0.00000018331318, -0.00000020703744, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000035651349, -0.00000079138986, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000001316365, 0.00000004440982, -0.00000070831155, 0.00000039952137, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, -0.00000000001051, 0.00000080623080, 0.00000000000000, 0.00000097175304, -0.00000001160782, 0.00002420661713, 0.00000000000000, 0.00000000000701, -0.00000880807311, -0.00002889424830, 0.00000000000000, 0.00000032079537, 0.00002397953873, -0.00001664001856, 0.00000000000000, -0.00000018331318, 0.00000000000000, 0.00000360123320, 0.00000026629523, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000537738382, 0.00000482723936, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000093100664, -0.00000012553906, 0.00000408193142, -0.00000637292890, 0.00000000000000;
    0.00000000000000, -0.00000000002961, -0.00001338578863, 0.00000000000000, 0.00000183615384, -0.00000000341675, 0.00003157138911, 0.00000000000000, -0.00000000004114, -0.00000212815472, -0.00009148385754, 0.00000000000000, 0.00000836864671, 0.00002737632607, 0.00007656613893, 0.00000000000000, -0.00000020703744, 0.00000000000000, 0.00000026629523, 0.00000858580230, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000732995476, 0.00001074373530, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000874436468, -0.00000027168487, -0.00000506193615, -0.00002351900788, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, -0.00000000000283, -0.00000617047714, 0.00000000000000, 0.00000295694459, 0.00000012073237, 0.00006172454915, 0.00000000000000, 0.00000000000390, 0.00000173087260, -0.00006190803960, 0.00000000000000, 0.00000004861005, 0.00012757590469, 0.00006180921638, 0.00000000000000, -0.00000035651349, 0.00000000000000, 0.00000537738382, 0.00000732995476, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00013805207149, -0.00001502499066, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00001099054675, -0.00000096634621, -0.00000784965922, 0.00000128742195, 0.00000000000000;
    0.00000000000000, -0.00000000007379, -0.00000991268602, 0.00000000000000, 0.00000421294651, -0.00000001929218, 0.00003742551790, 0.00000000000000, 0.00000000002973, -0.00001543868374, -0.00014333356119, 0.00000000000000, 0.00001466955130, 0.00004824700869, 0.00004133504962, 0.00000000000000, -0.00000079138986, 0.00000000000000, 0.00000482723936, 0.00001074373530, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00001502499066, 0.00005785344938, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00008000514946, -0.00000041743220, -0.00000516000944, -0.00001686519773, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
    -0.00000000000000, 0.00000000005678, 0.00001724685959, 0.00000000000000, -0.00000803261003, -0.00000001941485, 0.00004481679431, 0.00000000000000, -0.00000000013896, 0.00005245267478, 0.00007320581453, 0.00000000000000, -0.00002455088013, -0.00001309788555, -0.00000471840482, 0.00000000000000, -0.00000001316365, 0.00000000000000, -0.00000093100664, -0.00000874436468, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00001099054675, -0.00008000514946, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00028674728271, 0.00000066210435, -0.00000357698028, -0.00009025993466, 0.00000000000000;
    -0.00000000000000, 0.00000000000248, 0.00000287435535, 0.00000000000000, -0.00000065823199, -0.00000000143073, -0.00000990554723, 0.00000000000000, -0.00000000000119, 0.00000250597329, 0.00000917563104, 0.00000000000000, -0.00000001487073, -0.00000368941509, -0.00001687638765, 0.00000000000000, 0.00000004440982, 0.00000000000000, -0.00000012553906, -0.00000027168487, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000096634621, -0.00000041743220, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000066210435, 0.00000008824672, -0.00000030577689, 0.00000030910338, 0.00000000000000;
    0.00000000000000, 0.00000000002691, -0.00001001652618, 0.00000000000000, 0.00000349837417, -0.00000006552572, 0.00005210207785, 0.00000000000000, 0.00000000007601, -0.00003534471579, 0.00005504920575, 0.00000000000000, -0.00000343475307, 0.00002244357219, 0.00009376741583, 0.00000000000000, -0.00000070831155, 0.00000000000000, 0.00000408193142, -0.00000506193615, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000784965922, -0.00000516000944, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00000357698028, -0.00000030577689, 0.00003443338248, 0.00001741704563, 0.00000000000000;
    -0.00000000000000, -0.00000000020470, -0.00007549764696, 0.00000000000000, -0.00000336314015, -0.00000002253226, -0.00002914750198, 0.00000000000000, 0.00000000016843, -0.00001401703507, 0.00012387354261, 0.00000000000000, -0.00001044704032, -0.00016023613815, 0.00016545659203, 0.00000000000000, 0.00000039952137, 0.00000000000000, -0.00000637292890, -0.00002351900788, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000128742195, -0.00001686519773, 0.00000000000000, 0.00000000000000, 0.00000000000000, -0.00009025993466, 0.00000030910338, 0.00001741704563, 0.00046175356447, 0.00000000000000;
    0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000;
];

/// A K-matrix parameterization for $`f_2`$ particles described by Kopf et al.[^1] with fixed couplings and mass poles
/// (free production couplings only).
///
/// [^1]: Kopf, B., Albrecht, M., Koch, H., Küßner, M., Pychy, J., Qin, X., & Wiedner, U. (2021). Investigation of the lightest hybrid meson candidate with a coupled-channel analysis of $`\bar{p}p`$-, $`\pi^- p`$- and $`\pi \pi`$-Data. The European Physical Journal C, 81(12). [doi:10.1140/epjc/s10052-021-09821-2](https://doi.org/10.1140/epjc/s10052-021-09821-2)
#[derive(Clone, Serialize, Deserialize)]
pub struct KopfKMatrixF2 {
    name: String,
    channel: usize,
    mass: Mass,
    constants: FixedKMatrix<4, 4>,
    couplings_real: [ParameterLike; 4],
    couplings_imag: [ParameterLike; 4],
    couplings_indices_real: [ParameterID; 4],
    couplings_indices_imag: [ParameterID; 4],
    ikc_cache_index: ComplexVectorID<4>,
    p_vec_cache_index: MatrixID<4, 4>,
}

impl KopfKMatrixF2 {
    /// Construct a new [`KopfKMatrixF2`] with the given name, production couplings, channel,
    /// and input mass.
    ///
    /// | Channel index | Channel |
    /// | ------------- | ------- |
    /// | 0             | $`\pi\pi`$ |
    /// | 1             | $`2\pi 2\pi`$ |
    /// | 2             | $`K\bar{K}`$ |
    /// | 3             | $`\eta\eta`$ |
    ///
    /// | Pole names |
    /// | ---------- |
    /// | $`f_2(1270)`$ |
    /// | $`f_2'(1525)`$ |
    /// | $`f_2(1810)`$ |
    /// | $`f_2(1950)`$ |
    pub fn new(
        name: &str,
        couplings: [[ParameterLike; 2]; 4],
        channel: usize,
        mass: &Mass,
        seed: Option<usize>,
    ) -> Box<Self> {
        let mut couplings_real: [ParameterLike; 4] = array::from_fn(|_| ParameterLike::default());
        let mut couplings_imag: [ParameterLike; 4] = array::from_fn(|_| ParameterLike::default());
        for i in 0..4 {
            couplings_real[i] = couplings[i][0].clone();
            couplings_imag[i] = couplings[i][1].clone();
        }
        Self {
            name: name.to_string(),
            channel,
            mass: mass.clone(),
            constants: FixedKMatrix::new(
                G_F2,
                C_F2,
                vector![0.1349768, 2.0 * 0.1349768, 0.493677, 0.547862],
                vector![0.1349768, 2.0 * 0.1349768, 0.497611, 0.547862],
                M_F2,
                None,
                2,
                COV_F2,
                seed,
            ),
            couplings_real,
            couplings_imag,
            couplings_indices_real: [ParameterID::default(); 4],
            couplings_indices_imag: [ParameterID::default(); 4],
            ikc_cache_index: ComplexVectorID::default(),
            p_vec_cache_index: MatrixID::default(),
        }
        .into()
    }
}

#[typetag::serde]
impl Amplitude for KopfKMatrixF2 {
    fn register(&mut self, resources: &mut Resources) -> Result<AmplitudeID, LadduError> {
        for i in 0..self.couplings_indices_real.len() {
            self.couplings_indices_real[i] = resources.register_parameter(&self.couplings_real[i]);
            self.couplings_indices_imag[i] = resources.register_parameter(&self.couplings_imag[i]);
        }
        self.ikc_cache_index = resources
            .register_complex_vector(Some(&format!("KopfKMatrixF2<{}> ikc_vec", self.name)));
        self.p_vec_cache_index =
            resources.register_matrix(Some(&format!("KopfKMatrixF2<{}> p_vec", self.name)));
        resources.register_amplitude(&self.name)
    }

    fn precompute(&self, event: &Event, cache: &mut Cache) {
        let s = self.mass.value(event).powi(2);
        cache.store_complex_vector(
            self.ikc_cache_index,
            self.constants.ikc_inv_vec(s, self.channel),
        );
        cache.store_matrix(self.p_vec_cache_index, self.constants.p_vec_constants(s));
    }

    fn compute(&self, parameters: &Parameters, _event: &Event, cache: &Cache) -> Complex<Float> {
        let betas = SVector::from_fn(|i, _| {
            Complex::new(
                parameters.get(self.couplings_indices_real[i]),
                parameters.get(self.couplings_indices_imag[i]),
            )
        });
        let ikc_inv_vec = cache.get_complex_vector(self.ikc_cache_index);
        let p_vec_constants = cache.get_matrix(self.p_vec_cache_index);
        FixedKMatrix::compute(&betas, &ikc_inv_vec, &p_vec_constants)
    }

    fn compute_gradient(
        &self,
        _parameters: &Parameters,
        _event: &Event,
        cache: &Cache,
        gradient: &mut DVector<Complex<Float>>,
    ) {
        let ikc_inv_vec = cache.get_complex_vector(self.ikc_cache_index);
        let p_vec_constants = cache.get_matrix(self.p_vec_cache_index);
        let internal_gradient = FixedKMatrix::compute_gradient(&ikc_inv_vec, &p_vec_constants);
        for i in 0..4 {
            if let ParameterID::Parameter(index) = self.couplings_indices_real[i] {
                gradient[index] = internal_gradient[i];
            }
            if let ParameterID::Parameter(index) = self.couplings_indices_imag[i] {
                gradient[index] = Complex::<Float>::I * internal_gradient[i];
            }
        }
    }
}

/// A fixed K-Matrix Amplitude for :math:`f_2` mesons
///
/// Parameters
/// ----------
/// name : str
///     The Amplitude name
/// couplings : list of list of laddu.ParameterLike
///     Each initial-state coupling (as a list of pairs of real and imaginary parts)
/// channel : int
///     The channel onto which the K-Matrix is projected
/// mass: laddu.Mass
///     The total mass of the resonance
/// seed: int, optional
///     Seed used to resample fixed K-matrix components according to their covariance
///     No resampling is done if seed is None
///
/// Returns
/// -------
/// laddu.Amplitude
///     An Amplitude which can be registered by a laddu.Manager
///
/// See Also
/// --------
/// laddu.Manager
///
/// Notes
/// -----
/// This Amplitude follows the prescription of [Kopf]_ and fixes the K-Matrix to data
/// from that paper, leaving the couplings to the initial state free
///
/// +---------------+-------------------+
/// | Channel index | Channel           |
/// +===============+===================+
/// | 0             | :math:`\pi\pi`    |
/// +---------------+-------------------+
/// | 1             | :math:`2\pi 2\pi` |
/// +---------------+-------------------+
/// | 2             | :math:`K\bar{K}`  |
/// +---------------+-------------------+
/// | 3             | :math:`\eta\eta`  |
/// +---------------+-------------------+
///
/// +---------------------+
/// | Pole names          |
/// +=====================+
/// | :math:`f_2(1270)`   |
/// +---------------------+
/// | :math:`f_2'(1525)`  |
/// +---------------------+
/// | :math:`f_2(1810)`   |
/// +---------------------+
/// | :math:`f_2(1950)`   |
/// +---------------------+
///
#[cfg(feature = "python")]
#[pyfunction(name = "KopfKMatrixF2", signature = (name, couplings, channel, mass, seed = None))]
pub fn py_kopf_kmatrix_f2(
    name: &str,
    couplings: [[PyParameterLike; 2]; 4],
    channel: usize,
    mass: PyMass,
    seed: Option<usize>,
) -> PyAmplitude {
    PyAmplitude(KopfKMatrixF2::new(
        name,
        array::from_fn(|i| array::from_fn(|j| couplings[i][j].clone().0)),
        channel,
        &mass.0,
        seed,
    ))
}

#[cfg(test)]
mod tests {
    // Note: These tests are not exhaustive, they only check one channel
    use std::sync::Arc;

    use super::*;
    use approx::assert_relative_eq;
    use laddu_core::{data::test_dataset, parameter, Manager, Mass};
    #[test]
    fn test_f2_evaluation() {
        let mut manager = Manager::default();
        let res_mass = Mass::new([2, 3]);
        let amp = KopfKMatrixF2::new(
            "f2",
            [
                [parameter("p0"), parameter("p1")],
                [parameter("p2"), parameter("p3")],
                [parameter("p4"), parameter("p5")],
                [parameter("p6"), parameter("p7")],
            ],
            1,
            &res_mass,
            None,
        );
        let aid = manager.register(amp).unwrap();

        let dataset = Arc::new(test_dataset());
        let expr = aid.into();
        let model = manager.model(&expr);
        let evaluator = model.load(&dataset);

        let result = evaluator.evaluate(&[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]);

        assert_relative_eq!(result[0].re, 0.02523304, epsilon = Float::EPSILON.sqrt());
        assert_relative_eq!(result[0].im, 0.39712393, epsilon = Float::EPSILON.sqrt());
    }

    #[test]
    fn test_f2_gradient() {
        let mut manager = Manager::default();
        let res_mass = Mass::new([2, 3]);
        let amp = KopfKMatrixF2::new(
            "f2",
            [
                [parameter("p0"), parameter("p1")],
                [parameter("p2"), parameter("p3")],
                [parameter("p4"), parameter("p5")],
                [parameter("p6"), parameter("p7")],
            ],
            1,
            &res_mass,
            None,
        );
        let aid = manager.register(amp).unwrap();

        let dataset = Arc::new(test_dataset());
        let expr = aid.into();
        let model = manager.model(&expr);
        let evaluator = model.load(&dataset);

        let result = evaluator.evaluate_gradient(&[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]);

        assert_relative_eq!(result[0][0].re, -0.3078948, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][0].im, 0.3808689, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][1].re, -result[0][0].im);
        assert_relative_eq!(result[0][1].im, result[0][0].re);
        assert_relative_eq!(result[0][2].re, 0.4290085, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][2].im, 0.0799660, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][3].re, -result[0][2].im);
        assert_relative_eq!(result[0][3].im, result[0][2].re);
        assert_relative_eq!(result[0][4].re, 0.1657487, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][4].im, -0.0041382, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][5].re, -result[0][4].im);
        assert_relative_eq!(result[0][5].im, result[0][4].re);
        assert_relative_eq!(result[0][6].re, 0.0594691, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][6].im, 0.1143819, epsilon = Float::EPSILON.cbrt());
        assert_relative_eq!(result[0][7].re, -result[0][6].im);
        assert_relative_eq!(result[0][7].im, result[0][6].re);
    }

    #[test]
    fn test_f2_resample() {
        let res_mass = Mass::new([2, 3]);
        let _amp = KopfKMatrixF2::new(
            "f2",
            [
                [parameter("p0"), parameter("p1")],
                [parameter("p2"), parameter("p3")],
                [parameter("p4"), parameter("p5")],
                [parameter("p6"), parameter("p7")],
            ],
            1,
            &res_mass,
            Some(1),
        );
    }
}
