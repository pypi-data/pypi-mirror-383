# coding: utf-8

"""
    aind-sharepoint-service

     ## aind-sharepoint-service  Service to pull data from Sharepoint.  

    The version of the OpenAPI document: 0.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aind_sharepoint_service_async_client.models.las_bctype import LASBctype
from aind_sharepoint_service_async_client.models.las_deliverylocation import LASDeliverylocation
from aind_sharepoint_service_async_client.models.las_doseroute import LASDoseroute
from aind_sharepoint_service_async_client.models.las_icvlims import LASIcvlims
from aind_sharepoint_service_async_client.models.las_icvroute1 import LASIcvroute1
from aind_sharepoint_service_async_client.models.las_icvroute2 import LASIcvroute2
from aind_sharepoint_service_async_client.models.las_icvroute3 import LASIcvroute3
from aind_sharepoint_service_async_client.models.las_icvroute4 import LASIcvroute4
from aind_sharepoint_service_async_client.models.las_icvroute5 import LASIcvroute5
from aind_sharepoint_service_async_client.models.las_limsproject import LASLimsproject
from aind_sharepoint_service_async_client.models.las_limsworkflow import LASLimsworkflow
from aind_sharepoint_service_async_client.models.las_limsworkflow2 import LASLimsworkflow2
from aind_sharepoint_service_async_client.models.las_postfix import LASPostfix
from aind_sharepoint_service_async_client.models.las_projectid import LASProjectid
from aind_sharepoint_service_async_client.models.las_protocol import LASProtocol
from aind_sharepoint_service_async_client.models.las_reqpro1 import LASReqpro1
from aind_sharepoint_service_async_client.models.las_reqpro2 import LASReqpro2
from aind_sharepoint_service_async_client.models.las_reqpro3 import LASReqpro3
from aind_sharepoint_service_async_client.models.las_reqpro4 import LASReqpro4
from aind_sharepoint_service_async_client.models.las_requeststatus2 import LASRequeststatus2
from aind_sharepoint_service_async_client.models.las_roeye1 import LASRoeye1
from aind_sharepoint_service_async_client.models.las_roeye2 import LASRoeye2
from aind_sharepoint_service_async_client.models.las_roeye3 import LASRoeye3
from aind_sharepoint_service_async_client.models.las_roeye4 import LASRoeye4
from aind_sharepoint_service_async_client.models.las_roeye5 import LASRoeye5
from aind_sharepoint_service_async_client.models.las_rolims import LASRolims
from aind_sharepoint_service_async_client.models.las_rosop import LASRosop
from aind_sharepoint_service_async_client.models.las_rowhere import LASRowhere
from aind_sharepoint_service_async_client.models.las_species import LASSpecies
from aind_sharepoint_service_async_client.models.las_tam_frequency import LASTamFrequency
from aind_sharepoint_service_async_client.models.las_tcprep import LASTcprep
from aind_sharepoint_service_async_client.models.las_tctiss import LASTctiss
from aind_sharepoint_service_async_client.models.las_tmp_frequency import LASTmpFrequency
from aind_sharepoint_service_async_client.models.las_wheretoobtainsubstance_icv import LASWheretoobtainsubstanceIcv
from typing import Optional, Set
from typing_extensions import Self

class Las2020List(BaseModel):
    """
    Fields in SharePoint list.
    """ # noqa: E501
    accommodation_comment: Optional[StrictStr] = Field(default=None, alias="AccommodationComment")
    acsf_time1: Optional[StrictStr] = Field(default=None, alias="ACSFTime1")
    acsf_time2: Optional[StrictStr] = Field(default=None, alias="ACSFTime2")
    acsf_time3: Optional[StrictStr] = Field(default=None, alias="ACSFTime3")
    acsf_time4: Optional[StrictStr] = Field(default=None, alias="ACSFTime4")
    acsf_time5: Optional[StrictStr] = Field(default=None, alias="ACSFTime5")
    acsfid1: Optional[StrictStr] = Field(default=None, alias="ACSFID1")
    acsfid2: Optional[StrictStr] = Field(default=None, alias="ACSFID2")
    acsfid3: Optional[StrictStr] = Field(default=None, alias="ACSFID3")
    acsfid4: Optional[StrictStr] = Field(default=None, alias="ACSFID4")
    acsfid5: Optional[StrictStr] = Field(default=None, alias="ACSFID5")
    afternoon_pf: Optional[StrictBool] = Field(default=None, alias="AfternoonPF")
    animals_availableon_protocol: Optional[StrictBool] = Field(default=None, alias="AnimalsAvailableonProtocol")
    app_author: Optional[StrictStr] = Field(default=None, alias="AppAuthor")
    app_editor: Optional[StrictStr] = Field(default=None, alias="AppEditor")
    attachments: Optional[StrictBool] = Field(default=None, alias="Attachments")
    author: Optional[StrictStr] = Field(default=None, alias="Author")
    bc_age: Optional[StrictStr] = Field(default=None, alias="BCAge")
    bc_genotypes: Optional[StrictStr] = Field(default=None, alias="BCGenotypes")
    bc_location: Optional[StrictStr] = Field(default=None, alias="BCLocation")
    bc_tube: Optional[StrictStr] = Field(default=None, alias="BCTube")
    bc_type: Optional[LASBctype] = Field(default=None, alias="BCType")
    bc_volume: Optional[StrictStr] = Field(default=None, alias="BCVolume")
    color_tag: Optional[StrictStr] = Field(default=None, alias="_ColorTag")
    compliance_asset_id: Optional[StrictStr] = Field(default=None, alias="ComplianceAssetId")
    compliance_flags: Optional[StrictStr] = Field(default=None, alias="_ComplianceFlags")
    compliance_tag: Optional[StrictStr] = Field(default=None, alias="_ComplianceTag")
    compliance_tag_user_id: Optional[StrictStr] = Field(default=None, alias="_ComplianceTagUserId")
    compliance_tag_written_time: Optional[StrictStr] = Field(default=None, alias="_ComplianceTagWrittenTime")
    content_type: Optional[StrictStr] = Field(default=None, alias="ContentType")
    created: Optional[datetime] = Field(default=None, alias="Created")
    custcontact: Optional[StrictStr] = None
    custom_com1: Optional[StrictStr] = Field(default=None, alias="CustomCom1")
    custom_com2: Optional[StrictStr] = Field(default=None, alias="CustomCom2")
    custpresent: Optional[StrictBool] = None
    delivery_location: Optional[LASDeliverylocation] = Field(default=None, alias="DeliveryLocation")
    doc_icon: Optional[StrictStr] = Field(default=None, alias="DocIcon")
    dose_route: Optional[LASDoseroute] = Field(default=None, alias="doseRoute")
    dose_sub: Optional[StrictStr] = Field(default=None, alias="doseSub")
    dose_where: Optional[StrictStr] = Field(default=None, alias="doseWhere")
    doseduration: Optional[StrictStr] = None
    dosevolume: Optional[StrictStr] = None
    doxycycline: Optional[StrictBool] = Field(default=None, alias="Doxycycline")
    edit: Optional[StrictStr] = Field(default=None, alias="Edit")
    editor: Optional[StrictStr] = Field(default=None, alias="Editor")
    folder_child_count: Optional[StrictStr] = Field(default=None, alias="FolderChildCount")
    icv_comment: Optional[StrictStr] = Field(default=None, alias="icvComment")
    icv_id1: Optional[StrictStr] = Field(default=None, alias="icvID1")
    icv_id2: Optional[StrictStr] = Field(default=None, alias="icvID2")
    icv_id3: Optional[StrictStr] = Field(default=None, alias="icvID3")
    icv_id4: Optional[StrictStr] = Field(default=None, alias="icvID4")
    icv_id5: Optional[StrictStr] = Field(default=None, alias="icvID5")
    icv_lims: Optional[LASIcvlims] = Field(default=None, alias="icvLIMS")
    icv_route1: Optional[LASIcvroute1] = Field(default=None, alias="icvRoute1")
    icv_route2: Optional[LASIcvroute2] = Field(default=None, alias="icvRoute2")
    icv_route3: Optional[LASIcvroute3] = Field(default=None, alias="icvRoute3")
    icv_route4: Optional[LASIcvroute4] = Field(default=None, alias="icvRoute4")
    icv_route5: Optional[LASIcvroute5] = Field(default=None, alias="icvRoute5")
    icv_sub1: Optional[StrictStr] = Field(default=None, alias="icvSub1")
    icv_sub2: Optional[StrictStr] = Field(default=None, alias="icvSub2")
    icv_sub3: Optional[StrictStr] = Field(default=None, alias="icvSub3")
    icv_sub4: Optional[StrictStr] = Field(default=None, alias="icvSub4")
    icv_sub5: Optional[StrictStr] = Field(default=None, alias="icvSub5")
    id: Optional[StrictInt] = Field(default=None, alias="ID")
    is_record: Optional[StrictStr] = Field(default=None, alias="_IsRecord")
    item_child_count: Optional[StrictStr] = Field(default=None, alias="ItemChildCount")
    lta_id1: Optional[StrictStr] = Field(default=None, alias="LTaID1")
    lta_id2: Optional[StrictStr] = Field(default=None, alias="LTaID2")
    lta_id3: Optional[StrictStr] = Field(default=None, alias="LTaID3")
    lta_id4: Optional[StrictStr] = Field(default=None, alias="LTaID4")
    lta_id5: Optional[StrictStr] = Field(default=None, alias="LTaID5")
    l_tdate1: Optional[datetime] = Field(default=None, alias="LTdate1")
    l_tdate2: Optional[datetime] = Field(default=None, alias="LTdate2")
    l_tdate3: Optional[datetime] = Field(default=None, alias="LTdate3")
    l_tdate4: Optional[datetime] = Field(default=None, alias="LTdate4")
    l_tdate5: Optional[datetime] = Field(default=None, alias="LTdate5")
    las_comments: Optional[StrictStr] = Field(default=None, alias="LASComments")
    lims_entry: Optional[StrictBool] = Field(default=None, alias="LIMSEntry")
    lims_project: Optional[LASLimsproject] = Field(default=None, alias="LIMSProject")
    lims_workflow: Optional[LASLimsworkflow] = Field(default=None, alias="LIMSWorkflow")
    lims_workflow_x0020_2: Optional[LASLimsworkflow2] = Field(default=None, alias="LIMSWorkflow_x0020_2")
    link_title: Optional[StrictStr] = Field(default=None, alias="LinkTitle")
    link_title_no_menu: Optional[StrictStr] = Field(default=None, alias="LinkTitleNoMenu")
    lt_task1: Optional[StrictStr] = Field(default=None, alias="LTTask1")
    lt_task2: Optional[StrictStr] = Field(default=None, alias="LTTask2")
    lt_task3: Optional[StrictStr] = Field(default=None, alias="LTTask3")
    lt_task4: Optional[StrictStr] = Field(default=None, alias="LTTask4")
    lt_task5: Optional[StrictStr] = Field(default=None, alias="LTTask5")
    modified: Optional[datetime] = Field(default=None, alias="Modified")
    n_end_x0020_date: Optional[datetime] = Field(default=None, alias="nEnd_x0020_Date")
    n_roid1: Optional[StrictStr] = Field(default=None, alias="nROID1")
    n_roid2: Optional[StrictStr] = Field(default=None, alias="nROID2")
    n_roid3: Optional[StrictStr] = Field(default=None, alias="nROID3")
    n_roid4: Optional[StrictStr] = Field(default=None, alias="nROID4")
    n_roid5: Optional[StrictStr] = Field(default=None, alias="nROID5")
    n_start_x0020_date: Optional[datetime] = Field(default=None, alias="nStart_x0020_Date")
    oct: Optional[StrictBool] = Field(default=None, alias="OCT")
    post_fix: Optional[LASPostfix] = Field(default=None, alias="PostFix")
    project_id: Optional[LASProjectid] = Field(default=None, alias="ProjectID")
    project_lead2: Optional[StrictStr] = Field(default=None, alias="ProjectLead2")
    protocol: Optional[LASProtocol] = Field(default=None, alias="Protocol")
    qc_door_sheet: Optional[StrictBool] = Field(default=None, alias="QCDoorSheet")
    req_age1: Optional[StrictStr] = Field(default=None, alias="ReqAge1")
    req_age2: Optional[StrictStr] = Field(default=None, alias="ReqAge2")
    req_age3: Optional[StrictStr] = Field(default=None, alias="ReqAge3")
    req_age4: Optional[StrictStr] = Field(default=None, alias="ReqAge4")
    req_pro1: Optional[LASReqpro1] = Field(default=None, alias="ReqPro1")
    req_pro2: Optional[LASReqpro2] = Field(default=None, alias="ReqPro2")
    req_pro3: Optional[LASReqpro3] = Field(default=None, alias="ReqPro3")
    req_pro4: Optional[LASReqpro4] = Field(default=None, alias="ReqPro4")
    reqdate1: Optional[datetime] = Field(default=None, alias="Reqdate1")
    reqdate2: Optional[datetime] = Field(default=None, alias="Reqdate2")
    reqdate3: Optional[datetime] = Field(default=None, alias="Reqdate3")
    reqdate4: Optional[datetime] = Field(default=None, alias="Reqdate4")
    request_status2: Optional[LASRequeststatus2] = Field(default=None, description="New, In Progress, Complete, Cancelled", alias="RequestStatus2")
    ro_box1: Optional[StrictStr] = Field(default=None, alias="roBox1")
    ro_box2: Optional[StrictStr] = Field(default=None, alias="roBox2")
    ro_box3: Optional[StrictStr] = Field(default=None, alias="roBox3")
    ro_box4: Optional[StrictStr] = Field(default=None, alias="roBox4")
    ro_box5: Optional[StrictStr] = Field(default=None, alias="roBox5")
    ro_comment: Optional[StrictStr] = Field(default=None, alias="roComment")
    ro_discard: Optional[StrictBool] = Field(default=None, alias="roDiscard")
    ro_eye1: Optional[LASRoeye1] = Field(default=None, alias="roEye1")
    ro_eye2: Optional[LASRoeye2] = Field(default=None, alias="roEye2")
    ro_eye3: Optional[LASRoeye3] = Field(default=None, alias="roEye3")
    ro_eye4: Optional[LASRoeye4] = Field(default=None, alias="roEye4")
    ro_eye5: Optional[LASRoeye5] = Field(default=None, alias="roEye5")
    ro_gc1: Optional[StrictStr] = Field(default=None, alias="roGC1")
    ro_gc1b: Optional[StrictStr] = Field(default=None, alias="roGC1b")
    ro_gc1c: Optional[StrictStr] = Field(default=None, alias="roGC1c")
    ro_gc1d: Optional[StrictStr] = Field(default=None, alias="roGC1d")
    ro_gc2: Optional[StrictStr] = Field(default=None, alias="roGC2")
    ro_gc2b: Optional[StrictStr] = Field(default=None, alias="roGC2b")
    ro_gc2c: Optional[StrictStr] = Field(default=None, alias="roGC2c")
    ro_gc2d: Optional[StrictStr] = Field(default=None, alias="roGC2d")
    ro_gc3: Optional[StrictStr] = Field(default=None, alias="roGC3")
    ro_gc3b: Optional[StrictStr] = Field(default=None, alias="roGC3b")
    ro_gc3c: Optional[StrictStr] = Field(default=None, alias="roGC3c")
    ro_gc3d: Optional[StrictStr] = Field(default=None, alias="roGC3d")
    ro_gc4: Optional[StrictStr] = Field(default=None, alias="roGC4")
    ro_gc4b: Optional[StrictStr] = Field(default=None, alias="roGC4b")
    ro_gc4c: Optional[StrictStr] = Field(default=None, alias="roGC4c")
    ro_gc4d: Optional[StrictStr] = Field(default=None, alias="roGC4d")
    ro_gc5: Optional[StrictStr] = Field(default=None, alias="roGC5")
    ro_gc5b: Optional[StrictStr] = Field(default=None, alias="roGC5b")
    ro_gc5c: Optional[StrictStr] = Field(default=None, alias="roGC5c")
    ro_gc5d: Optional[StrictStr] = Field(default=None, alias="roGC5d")
    ro_ice: Optional[StrictBool] = Field(default=None, alias="roIce")
    ro_lims: Optional[LASRolims] = Field(default=None, alias="roLIMS")
    ro_lot1: Optional[StrictStr] = Field(default=None, alias="roLot1")
    ro_lot1b: Optional[StrictStr] = Field(default=None, alias="roLot1b")
    ro_lot1c: Optional[StrictStr] = Field(default=None, alias="roLot1c")
    ro_lot1d: Optional[StrictStr] = Field(default=None, alias="roLot1d")
    ro_lot2: Optional[StrictStr] = Field(default=None, alias="roLot2")
    ro_lot2b: Optional[StrictStr] = Field(default=None, alias="roLot2b")
    ro_lot2c: Optional[StrictStr] = Field(default=None, alias="roLot2c")
    ro_lot2d: Optional[StrictStr] = Field(default=None, alias="roLot2d")
    ro_lot3: Optional[StrictStr] = Field(default=None, alias="roLot3")
    ro_lot3b: Optional[StrictStr] = Field(default=None, alias="roLot3b")
    ro_lot3c: Optional[StrictStr] = Field(default=None, alias="roLot3c")
    ro_lot3d: Optional[StrictStr] = Field(default=None, alias="roLot3d")
    ro_lot4: Optional[StrictStr] = Field(default=None, alias="roLot4")
    ro_lot4b: Optional[StrictStr] = Field(default=None, alias="roLot4b")
    ro_lot4c: Optional[StrictStr] = Field(default=None, alias="roLot4c")
    ro_lot4d: Optional[StrictStr] = Field(default=None, alias="roLot4d")
    ro_lot5: Optional[StrictStr] = Field(default=None, alias="roLot5")
    ro_lot5b: Optional[StrictStr] = Field(default=None, alias="roLot5b")
    ro_lot5c: Optional[StrictStr] = Field(default=None, alias="roLot5c")
    ro_lot5d: Optional[StrictStr] = Field(default=None, alias="roLot5d")
    ro_sop: Optional[LASRosop] = Field(default=None, alias="roSOP")
    ro_spin_down: Optional[StrictBool] = Field(default=None, alias="roSpinDown")
    ro_sub1: Optional[StrictStr] = Field(default=None, alias="roSub1")
    ro_sub1b: Optional[StrictStr] = Field(default=None, alias="roSub1b")
    ro_sub1c: Optional[StrictStr] = Field(default=None, alias="roSub1c")
    ro_sub1d: Optional[StrictStr] = Field(default=None, alias="roSub1d")
    ro_sub2: Optional[StrictStr] = Field(default=None, alias="roSub2")
    ro_sub2b: Optional[StrictStr] = Field(default=None, alias="roSub2b")
    ro_sub2c: Optional[StrictStr] = Field(default=None, alias="roSub2c")
    ro_sub2d: Optional[StrictStr] = Field(default=None, alias="roSub2d")
    ro_sub3: Optional[StrictStr] = Field(default=None, alias="roSub3")
    ro_sub3b: Optional[StrictStr] = Field(default=None, alias="roSub3b")
    ro_sub3c: Optional[StrictStr] = Field(default=None, alias="roSub3c")
    ro_sub3d: Optional[StrictStr] = Field(default=None, alias="roSub3d")
    ro_sub4: Optional[StrictStr] = Field(default=None, alias="roSub4")
    ro_sub4b: Optional[StrictStr] = Field(default=None, alias="roSub4b")
    ro_sub4c: Optional[StrictStr] = Field(default=None, alias="roSub4c")
    ro_sub4d: Optional[StrictStr] = Field(default=None, alias="roSub4d")
    ro_sub5: Optional[StrictStr] = Field(default=None, alias="roSub5")
    ro_sub5b: Optional[StrictStr] = Field(default=None, alias="roSub5b")
    ro_sub5c: Optional[StrictStr] = Field(default=None, alias="roSub5c")
    ro_sub5d: Optional[StrictStr] = Field(default=None, alias="roSub5d")
    ro_tite1: Optional[StrictStr] = Field(default=None, alias="roTite1")
    ro_tite1b: Optional[StrictStr] = Field(default=None, alias="roTite1b")
    ro_tite1c: Optional[StrictStr] = Field(default=None, alias="roTite1c")
    ro_tite1d: Optional[StrictStr] = Field(default=None, alias="roTite1d")
    ro_tite2: Optional[StrictStr] = Field(default=None, alias="roTite2")
    ro_tite2b: Optional[StrictStr] = Field(default=None, alias="roTite2b")
    ro_tite2c: Optional[StrictStr] = Field(default=None, alias="roTite2c")
    ro_tite2d: Optional[StrictStr] = Field(default=None, alias="roTite2d")
    ro_tite3: Optional[StrictStr] = Field(default=None, alias="roTite3")
    ro_tite3b: Optional[StrictStr] = Field(default=None, alias="roTite3b")
    ro_tite3c: Optional[StrictStr] = Field(default=None, alias="roTite3c")
    ro_tite3d: Optional[StrictStr] = Field(default=None, alias="roTite3d")
    ro_tite4: Optional[StrictStr] = Field(default=None, alias="roTite4")
    ro_tite4b: Optional[StrictStr] = Field(default=None, alias="roTite4b")
    ro_tite4c: Optional[StrictStr] = Field(default=None, alias="roTite4c")
    ro_tite4d: Optional[StrictStr] = Field(default=None, alias="roTite4d")
    ro_tite5: Optional[StrictStr] = Field(default=None, alias="roTite5")
    ro_tite5b: Optional[StrictStr] = Field(default=None, alias="roTite5b")
    ro_tite5c: Optional[StrictStr] = Field(default=None, alias="roTite5c")
    ro_tite5d: Optional[StrictStr] = Field(default=None, alias="roTite5d")
    ro_tube1: Optional[StrictStr] = Field(default=None, alias="roTube1")
    ro_tube2: Optional[StrictStr] = Field(default=None, alias="roTube2")
    ro_tube3: Optional[StrictStr] = Field(default=None, alias="roTube3")
    ro_tube4: Optional[StrictStr] = Field(default=None, alias="roTube4")
    ro_tube5: Optional[StrictStr] = Field(default=None, alias="roTube5")
    ro_vol1: Optional[StrictStr] = Field(default=None, alias="roVol1")
    ro_vol2: Optional[StrictStr] = Field(default=None, alias="roVol2")
    ro_vol3: Optional[StrictStr] = Field(default=None, alias="roVol3")
    ro_vol4: Optional[StrictStr] = Field(default=None, alias="roVol4")
    ro_vol5: Optional[StrictStr] = Field(default=None, alias="roVol5")
    ro_vol_v1: Optional[StrictStr] = Field(default=None, alias="roVolV1")
    ro_vol_v1b: Optional[StrictStr] = Field(default=None, alias="roVolV1b")
    ro_vol_v1c: Optional[StrictStr] = Field(default=None, alias="roVolV1c")
    ro_vol_v1d: Optional[StrictStr] = Field(default=None, alias="roVolV1d")
    ro_vol_v2: Optional[StrictStr] = Field(default=None, alias="roVolV2")
    ro_vol_v2b: Optional[StrictStr] = Field(default=None, alias="roVolV2b")
    ro_vol_v2c: Optional[StrictStr] = Field(default=None, alias="roVolV2c")
    ro_vol_v2d: Optional[StrictStr] = Field(default=None, alias="roVolV2d")
    ro_vol_v3: Optional[StrictStr] = Field(default=None, alias="roVolV3")
    ro_vol_v3b: Optional[StrictStr] = Field(default=None, alias="roVolV3b")
    ro_vol_v3c: Optional[StrictStr] = Field(default=None, alias="roVolV3c")
    ro_vol_v3d: Optional[StrictStr] = Field(default=None, alias="roVolV3d")
    ro_vol_v4: Optional[StrictStr] = Field(default=None, alias="roVolV4")
    ro_vol_v4b: Optional[StrictStr] = Field(default=None, alias="roVolV4b")
    ro_vol_v4c: Optional[StrictStr] = Field(default=None, alias="roVolV4c")
    ro_vol_v4d: Optional[StrictStr] = Field(default=None, alias="roVolV4d")
    ro_vol_v5: Optional[StrictStr] = Field(default=None, alias="roVolV5")
    ro_vol_v5b: Optional[StrictStr] = Field(default=None, alias="roVolV5b")
    ro_vol_v5c: Optional[StrictStr] = Field(default=None, alias="roVolV5c")
    ro_vol_v5d: Optional[StrictStr] = Field(default=None, alias="roVolV5d")
    ro_where: Optional[LASRowhere] = Field(default=None, alias="roWhere")
    sign_x002d_off_x0020_status: Optional[StrictStr] = Field(default=None, alias="Sign_x002d_off_x0020_status")
    spec_deli_loc: Optional[StrictStr] = Field(default=None, alias="SpecDeliLoc")
    species: Optional[LASSpecies] = Field(default=None, alias="Species")
    tam: Optional[StrictBool] = Field(default=None, alias="TAM")
    tam_age: Optional[StrictStr] = Field(default=None, alias="TAMAge")
    tam_freq: Optional[LASTamFrequency] = Field(default=None, alias="TAMFreq")
    tc_prep: Optional[List[LASTcprep]] = Field(default=None, alias="TCPrep")
    tc_tiss: Optional[List[LASTctiss]] = Field(default=None, alias="TCTiss")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    tmp: Optional[StrictBool] = Field(default=None, alias="TMP")
    tmp_age: Optional[StrictStr] = Field(default=None, alias="TMPAge")
    tmp_freq: Optional[LASTmpFrequency] = Field(default=None, alias="TMPFreq")
    ui_version_string: Optional[StrictStr] = Field(default=None, alias="_UIVersionString")
    wellness_report_x0028_no_x002_f_ye: Optional[StrictBool] = Field(default=None, alias="WellnessReport_x0028_No_x002F_Ye")
    whereto_obtainsubstance_x0028_icv: Optional[LASWheretoobtainsubstanceIcv] = Field(default=None, alias="WheretoObtainsubstance_x0028_ICV")
    author_id: Optional[StrictInt] = Field(default=None, alias="AuthorId")
    author_lookup_id: Optional[StrictInt] = Field(default=None, alias="AuthorLookupId")
    editor_id: Optional[StrictInt] = Field(default=None, alias="EditorId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["AccommodationComment", "ACSFTime1", "ACSFTime2", "ACSFTime3", "ACSFTime4", "ACSFTime5", "ACSFID1", "ACSFID2", "ACSFID3", "ACSFID4", "ACSFID5", "AfternoonPF", "AnimalsAvailableonProtocol", "AppAuthor", "AppEditor", "Attachments", "Author", "BCAge", "BCGenotypes", "BCLocation", "BCTube", "BCType", "BCVolume", "_ColorTag", "ComplianceAssetId", "_ComplianceFlags", "_ComplianceTag", "_ComplianceTagUserId", "_ComplianceTagWrittenTime", "ContentType", "Created", "custcontact", "CustomCom1", "CustomCom2", "custpresent", "DeliveryLocation", "DocIcon", "doseRoute", "doseSub", "doseWhere", "doseduration", "dosevolume", "Doxycycline", "Edit", "Editor", "FolderChildCount", "icvComment", "icvID1", "icvID2", "icvID3", "icvID4", "icvID5", "icvLIMS", "icvRoute1", "icvRoute2", "icvRoute3", "icvRoute4", "icvRoute5", "icvSub1", "icvSub2", "icvSub3", "icvSub4", "icvSub5", "ID", "_IsRecord", "ItemChildCount", "LTaID1", "LTaID2", "LTaID3", "LTaID4", "LTaID5", "LTdate1", "LTdate2", "LTdate3", "LTdate4", "LTdate5", "LASComments", "LIMSEntry", "LIMSProject", "LIMSWorkflow", "LIMSWorkflow_x0020_2", "LinkTitle", "LinkTitleNoMenu", "LTTask1", "LTTask2", "LTTask3", "LTTask4", "LTTask5", "Modified", "nEnd_x0020_Date", "nROID1", "nROID2", "nROID3", "nROID4", "nROID5", "nStart_x0020_Date", "OCT", "PostFix", "ProjectID", "ProjectLead2", "Protocol", "QCDoorSheet", "ReqAge1", "ReqAge2", "ReqAge3", "ReqAge4", "ReqPro1", "ReqPro2", "ReqPro3", "ReqPro4", "Reqdate1", "Reqdate2", "Reqdate3", "Reqdate4", "RequestStatus2", "roBox1", "roBox2", "roBox3", "roBox4", "roBox5", "roComment", "roDiscard", "roEye1", "roEye2", "roEye3", "roEye4", "roEye5", "roGC1", "roGC1b", "roGC1c", "roGC1d", "roGC2", "roGC2b", "roGC2c", "roGC2d", "roGC3", "roGC3b", "roGC3c", "roGC3d", "roGC4", "roGC4b", "roGC4c", "roGC4d", "roGC5", "roGC5b", "roGC5c", "roGC5d", "roIce", "roLIMS", "roLot1", "roLot1b", "roLot1c", "roLot1d", "roLot2", "roLot2b", "roLot2c", "roLot2d", "roLot3", "roLot3b", "roLot3c", "roLot3d", "roLot4", "roLot4b", "roLot4c", "roLot4d", "roLot5", "roLot5b", "roLot5c", "roLot5d", "roSOP", "roSpinDown", "roSub1", "roSub1b", "roSub1c", "roSub1d", "roSub2", "roSub2b", "roSub2c", "roSub2d", "roSub3", "roSub3b", "roSub3c", "roSub3d", "roSub4", "roSub4b", "roSub4c", "roSub4d", "roSub5", "roSub5b", "roSub5c", "roSub5d", "roTite1", "roTite1b", "roTite1c", "roTite1d", "roTite2", "roTite2b", "roTite2c", "roTite2d", "roTite3", "roTite3b", "roTite3c", "roTite3d", "roTite4", "roTite4b", "roTite4c", "roTite4d", "roTite5", "roTite5b", "roTite5c", "roTite5d", "roTube1", "roTube2", "roTube3", "roTube4", "roTube5", "roVol1", "roVol2", "roVol3", "roVol4", "roVol5", "roVolV1", "roVolV1b", "roVolV1c", "roVolV1d", "roVolV2", "roVolV2b", "roVolV2c", "roVolV2d", "roVolV3", "roVolV3b", "roVolV3c", "roVolV3d", "roVolV4", "roVolV4b", "roVolV4c", "roVolV4d", "roVolV5", "roVolV5b", "roVolV5c", "roVolV5d", "roWhere", "Sign_x002d_off_x0020_status", "SpecDeliLoc", "Species", "TAM", "TAMAge", "TAMFreq", "TCPrep", "TCTiss", "Title", "TMP", "TMPAge", "TMPFreq", "_UIVersionString", "WellnessReport_x0028_No_x002F_Ye", "WheretoObtainsubstance_x0028_ICV", "AuthorId", "AuthorLookupId", "EditorId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Las2020List from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if accommodation_comment (nullable) is None
        # and model_fields_set contains the field
        if self.accommodation_comment is None and "accommodation_comment" in self.model_fields_set:
            _dict['AccommodationComment'] = None

        # set to None if acsf_time1 (nullable) is None
        # and model_fields_set contains the field
        if self.acsf_time1 is None and "acsf_time1" in self.model_fields_set:
            _dict['ACSFTime1'] = None

        # set to None if acsf_time2 (nullable) is None
        # and model_fields_set contains the field
        if self.acsf_time2 is None and "acsf_time2" in self.model_fields_set:
            _dict['ACSFTime2'] = None

        # set to None if acsf_time3 (nullable) is None
        # and model_fields_set contains the field
        if self.acsf_time3 is None and "acsf_time3" in self.model_fields_set:
            _dict['ACSFTime3'] = None

        # set to None if acsf_time4 (nullable) is None
        # and model_fields_set contains the field
        if self.acsf_time4 is None and "acsf_time4" in self.model_fields_set:
            _dict['ACSFTime4'] = None

        # set to None if acsf_time5 (nullable) is None
        # and model_fields_set contains the field
        if self.acsf_time5 is None and "acsf_time5" in self.model_fields_set:
            _dict['ACSFTime5'] = None

        # set to None if acsfid1 (nullable) is None
        # and model_fields_set contains the field
        if self.acsfid1 is None and "acsfid1" in self.model_fields_set:
            _dict['ACSFID1'] = None

        # set to None if acsfid2 (nullable) is None
        # and model_fields_set contains the field
        if self.acsfid2 is None and "acsfid2" in self.model_fields_set:
            _dict['ACSFID2'] = None

        # set to None if acsfid3 (nullable) is None
        # and model_fields_set contains the field
        if self.acsfid3 is None and "acsfid3" in self.model_fields_set:
            _dict['ACSFID3'] = None

        # set to None if acsfid4 (nullable) is None
        # and model_fields_set contains the field
        if self.acsfid4 is None and "acsfid4" in self.model_fields_set:
            _dict['ACSFID4'] = None

        # set to None if acsfid5 (nullable) is None
        # and model_fields_set contains the field
        if self.acsfid5 is None and "acsfid5" in self.model_fields_set:
            _dict['ACSFID5'] = None

        # set to None if afternoon_pf (nullable) is None
        # and model_fields_set contains the field
        if self.afternoon_pf is None and "afternoon_pf" in self.model_fields_set:
            _dict['AfternoonPF'] = None

        # set to None if animals_availableon_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.animals_availableon_protocol is None and "animals_availableon_protocol" in self.model_fields_set:
            _dict['AnimalsAvailableonProtocol'] = None

        # set to None if app_author (nullable) is None
        # and model_fields_set contains the field
        if self.app_author is None and "app_author" in self.model_fields_set:
            _dict['AppAuthor'] = None

        # set to None if app_editor (nullable) is None
        # and model_fields_set contains the field
        if self.app_editor is None and "app_editor" in self.model_fields_set:
            _dict['AppEditor'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['Attachments'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['Author'] = None

        # set to None if bc_age (nullable) is None
        # and model_fields_set contains the field
        if self.bc_age is None and "bc_age" in self.model_fields_set:
            _dict['BCAge'] = None

        # set to None if bc_genotypes (nullable) is None
        # and model_fields_set contains the field
        if self.bc_genotypes is None and "bc_genotypes" in self.model_fields_set:
            _dict['BCGenotypes'] = None

        # set to None if bc_location (nullable) is None
        # and model_fields_set contains the field
        if self.bc_location is None and "bc_location" in self.model_fields_set:
            _dict['BCLocation'] = None

        # set to None if bc_tube (nullable) is None
        # and model_fields_set contains the field
        if self.bc_tube is None and "bc_tube" in self.model_fields_set:
            _dict['BCTube'] = None

        # set to None if bc_volume (nullable) is None
        # and model_fields_set contains the field
        if self.bc_volume is None and "bc_volume" in self.model_fields_set:
            _dict['BCVolume'] = None

        # set to None if color_tag (nullable) is None
        # and model_fields_set contains the field
        if self.color_tag is None and "color_tag" in self.model_fields_set:
            _dict['_ColorTag'] = None

        # set to None if compliance_asset_id (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_asset_id is None and "compliance_asset_id" in self.model_fields_set:
            _dict['ComplianceAssetId'] = None

        # set to None if compliance_flags (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_flags is None and "compliance_flags" in self.model_fields_set:
            _dict['_ComplianceFlags'] = None

        # set to None if compliance_tag (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_tag is None and "compliance_tag" in self.model_fields_set:
            _dict['_ComplianceTag'] = None

        # set to None if compliance_tag_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_tag_user_id is None and "compliance_tag_user_id" in self.model_fields_set:
            _dict['_ComplianceTagUserId'] = None

        # set to None if compliance_tag_written_time (nullable) is None
        # and model_fields_set contains the field
        if self.compliance_tag_written_time is None and "compliance_tag_written_time" in self.model_fields_set:
            _dict['_ComplianceTagWrittenTime'] = None

        # set to None if content_type (nullable) is None
        # and model_fields_set contains the field
        if self.content_type is None and "content_type" in self.model_fields_set:
            _dict['ContentType'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['Created'] = None

        # set to None if custcontact (nullable) is None
        # and model_fields_set contains the field
        if self.custcontact is None and "custcontact" in self.model_fields_set:
            _dict['custcontact'] = None

        # set to None if custom_com1 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_com1 is None and "custom_com1" in self.model_fields_set:
            _dict['CustomCom1'] = None

        # set to None if custom_com2 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_com2 is None and "custom_com2" in self.model_fields_set:
            _dict['CustomCom2'] = None

        # set to None if custpresent (nullable) is None
        # and model_fields_set contains the field
        if self.custpresent is None and "custpresent" in self.model_fields_set:
            _dict['custpresent'] = None

        # set to None if doc_icon (nullable) is None
        # and model_fields_set contains the field
        if self.doc_icon is None and "doc_icon" in self.model_fields_set:
            _dict['DocIcon'] = None

        # set to None if dose_sub (nullable) is None
        # and model_fields_set contains the field
        if self.dose_sub is None and "dose_sub" in self.model_fields_set:
            _dict['doseSub'] = None

        # set to None if dose_where (nullable) is None
        # and model_fields_set contains the field
        if self.dose_where is None and "dose_where" in self.model_fields_set:
            _dict['doseWhere'] = None

        # set to None if doseduration (nullable) is None
        # and model_fields_set contains the field
        if self.doseduration is None and "doseduration" in self.model_fields_set:
            _dict['doseduration'] = None

        # set to None if dosevolume (nullable) is None
        # and model_fields_set contains the field
        if self.dosevolume is None and "dosevolume" in self.model_fields_set:
            _dict['dosevolume'] = None

        # set to None if doxycycline (nullable) is None
        # and model_fields_set contains the field
        if self.doxycycline is None and "doxycycline" in self.model_fields_set:
            _dict['Doxycycline'] = None

        # set to None if edit (nullable) is None
        # and model_fields_set contains the field
        if self.edit is None and "edit" in self.model_fields_set:
            _dict['Edit'] = None

        # set to None if editor (nullable) is None
        # and model_fields_set contains the field
        if self.editor is None and "editor" in self.model_fields_set:
            _dict['Editor'] = None

        # set to None if folder_child_count (nullable) is None
        # and model_fields_set contains the field
        if self.folder_child_count is None and "folder_child_count" in self.model_fields_set:
            _dict['FolderChildCount'] = None

        # set to None if icv_comment (nullable) is None
        # and model_fields_set contains the field
        if self.icv_comment is None and "icv_comment" in self.model_fields_set:
            _dict['icvComment'] = None

        # set to None if icv_id1 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_id1 is None and "icv_id1" in self.model_fields_set:
            _dict['icvID1'] = None

        # set to None if icv_id2 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_id2 is None and "icv_id2" in self.model_fields_set:
            _dict['icvID2'] = None

        # set to None if icv_id3 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_id3 is None and "icv_id3" in self.model_fields_set:
            _dict['icvID3'] = None

        # set to None if icv_id4 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_id4 is None and "icv_id4" in self.model_fields_set:
            _dict['icvID4'] = None

        # set to None if icv_id5 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_id5 is None and "icv_id5" in self.model_fields_set:
            _dict['icvID5'] = None

        # set to None if icv_sub1 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_sub1 is None and "icv_sub1" in self.model_fields_set:
            _dict['icvSub1'] = None

        # set to None if icv_sub2 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_sub2 is None and "icv_sub2" in self.model_fields_set:
            _dict['icvSub2'] = None

        # set to None if icv_sub3 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_sub3 is None and "icv_sub3" in self.model_fields_set:
            _dict['icvSub3'] = None

        # set to None if icv_sub4 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_sub4 is None and "icv_sub4" in self.model_fields_set:
            _dict['icvSub4'] = None

        # set to None if icv_sub5 (nullable) is None
        # and model_fields_set contains the field
        if self.icv_sub5 is None and "icv_sub5" in self.model_fields_set:
            _dict['icvSub5'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['ID'] = None

        # set to None if is_record (nullable) is None
        # and model_fields_set contains the field
        if self.is_record is None and "is_record" in self.model_fields_set:
            _dict['_IsRecord'] = None

        # set to None if item_child_count (nullable) is None
        # and model_fields_set contains the field
        if self.item_child_count is None and "item_child_count" in self.model_fields_set:
            _dict['ItemChildCount'] = None

        # set to None if lta_id1 (nullable) is None
        # and model_fields_set contains the field
        if self.lta_id1 is None and "lta_id1" in self.model_fields_set:
            _dict['LTaID1'] = None

        # set to None if lta_id2 (nullable) is None
        # and model_fields_set contains the field
        if self.lta_id2 is None and "lta_id2" in self.model_fields_set:
            _dict['LTaID2'] = None

        # set to None if lta_id3 (nullable) is None
        # and model_fields_set contains the field
        if self.lta_id3 is None and "lta_id3" in self.model_fields_set:
            _dict['LTaID3'] = None

        # set to None if lta_id4 (nullable) is None
        # and model_fields_set contains the field
        if self.lta_id4 is None and "lta_id4" in self.model_fields_set:
            _dict['LTaID4'] = None

        # set to None if lta_id5 (nullable) is None
        # and model_fields_set contains the field
        if self.lta_id5 is None and "lta_id5" in self.model_fields_set:
            _dict['LTaID5'] = None

        # set to None if l_tdate1 (nullable) is None
        # and model_fields_set contains the field
        if self.l_tdate1 is None and "l_tdate1" in self.model_fields_set:
            _dict['LTdate1'] = None

        # set to None if l_tdate2 (nullable) is None
        # and model_fields_set contains the field
        if self.l_tdate2 is None and "l_tdate2" in self.model_fields_set:
            _dict['LTdate2'] = None

        # set to None if l_tdate3 (nullable) is None
        # and model_fields_set contains the field
        if self.l_tdate3 is None and "l_tdate3" in self.model_fields_set:
            _dict['LTdate3'] = None

        # set to None if l_tdate4 (nullable) is None
        # and model_fields_set contains the field
        if self.l_tdate4 is None and "l_tdate4" in self.model_fields_set:
            _dict['LTdate4'] = None

        # set to None if l_tdate5 (nullable) is None
        # and model_fields_set contains the field
        if self.l_tdate5 is None and "l_tdate5" in self.model_fields_set:
            _dict['LTdate5'] = None

        # set to None if las_comments (nullable) is None
        # and model_fields_set contains the field
        if self.las_comments is None and "las_comments" in self.model_fields_set:
            _dict['LASComments'] = None

        # set to None if lims_entry (nullable) is None
        # and model_fields_set contains the field
        if self.lims_entry is None and "lims_entry" in self.model_fields_set:
            _dict['LIMSEntry'] = None

        # set to None if link_title (nullable) is None
        # and model_fields_set contains the field
        if self.link_title is None and "link_title" in self.model_fields_set:
            _dict['LinkTitle'] = None

        # set to None if link_title_no_menu (nullable) is None
        # and model_fields_set contains the field
        if self.link_title_no_menu is None and "link_title_no_menu" in self.model_fields_set:
            _dict['LinkTitleNoMenu'] = None

        # set to None if lt_task1 (nullable) is None
        # and model_fields_set contains the field
        if self.lt_task1 is None and "lt_task1" in self.model_fields_set:
            _dict['LTTask1'] = None

        # set to None if lt_task2 (nullable) is None
        # and model_fields_set contains the field
        if self.lt_task2 is None and "lt_task2" in self.model_fields_set:
            _dict['LTTask2'] = None

        # set to None if lt_task3 (nullable) is None
        # and model_fields_set contains the field
        if self.lt_task3 is None and "lt_task3" in self.model_fields_set:
            _dict['LTTask3'] = None

        # set to None if lt_task4 (nullable) is None
        # and model_fields_set contains the field
        if self.lt_task4 is None and "lt_task4" in self.model_fields_set:
            _dict['LTTask4'] = None

        # set to None if lt_task5 (nullable) is None
        # and model_fields_set contains the field
        if self.lt_task5 is None and "lt_task5" in self.model_fields_set:
            _dict['LTTask5'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['Modified'] = None

        # set to None if n_end_x0020_date (nullable) is None
        # and model_fields_set contains the field
        if self.n_end_x0020_date is None and "n_end_x0020_date" in self.model_fields_set:
            _dict['nEnd_x0020_Date'] = None

        # set to None if n_roid1 (nullable) is None
        # and model_fields_set contains the field
        if self.n_roid1 is None and "n_roid1" in self.model_fields_set:
            _dict['nROID1'] = None

        # set to None if n_roid2 (nullable) is None
        # and model_fields_set contains the field
        if self.n_roid2 is None and "n_roid2" in self.model_fields_set:
            _dict['nROID2'] = None

        # set to None if n_roid3 (nullable) is None
        # and model_fields_set contains the field
        if self.n_roid3 is None and "n_roid3" in self.model_fields_set:
            _dict['nROID3'] = None

        # set to None if n_roid4 (nullable) is None
        # and model_fields_set contains the field
        if self.n_roid4 is None and "n_roid4" in self.model_fields_set:
            _dict['nROID4'] = None

        # set to None if n_roid5 (nullable) is None
        # and model_fields_set contains the field
        if self.n_roid5 is None and "n_roid5" in self.model_fields_set:
            _dict['nROID5'] = None

        # set to None if n_start_x0020_date (nullable) is None
        # and model_fields_set contains the field
        if self.n_start_x0020_date is None and "n_start_x0020_date" in self.model_fields_set:
            _dict['nStart_x0020_Date'] = None

        # set to None if oct (nullable) is None
        # and model_fields_set contains the field
        if self.oct is None and "oct" in self.model_fields_set:
            _dict['OCT'] = None

        # set to None if project_lead2 (nullable) is None
        # and model_fields_set contains the field
        if self.project_lead2 is None and "project_lead2" in self.model_fields_set:
            _dict['ProjectLead2'] = None

        # set to None if qc_door_sheet (nullable) is None
        # and model_fields_set contains the field
        if self.qc_door_sheet is None and "qc_door_sheet" in self.model_fields_set:
            _dict['QCDoorSheet'] = None

        # set to None if req_age1 (nullable) is None
        # and model_fields_set contains the field
        if self.req_age1 is None and "req_age1" in self.model_fields_set:
            _dict['ReqAge1'] = None

        # set to None if req_age2 (nullable) is None
        # and model_fields_set contains the field
        if self.req_age2 is None and "req_age2" in self.model_fields_set:
            _dict['ReqAge2'] = None

        # set to None if req_age3 (nullable) is None
        # and model_fields_set contains the field
        if self.req_age3 is None and "req_age3" in self.model_fields_set:
            _dict['ReqAge3'] = None

        # set to None if req_age4 (nullable) is None
        # and model_fields_set contains the field
        if self.req_age4 is None and "req_age4" in self.model_fields_set:
            _dict['ReqAge4'] = None

        # set to None if reqdate1 (nullable) is None
        # and model_fields_set contains the field
        if self.reqdate1 is None and "reqdate1" in self.model_fields_set:
            _dict['Reqdate1'] = None

        # set to None if reqdate2 (nullable) is None
        # and model_fields_set contains the field
        if self.reqdate2 is None and "reqdate2" in self.model_fields_set:
            _dict['Reqdate2'] = None

        # set to None if reqdate3 (nullable) is None
        # and model_fields_set contains the field
        if self.reqdate3 is None and "reqdate3" in self.model_fields_set:
            _dict['Reqdate3'] = None

        # set to None if reqdate4 (nullable) is None
        # and model_fields_set contains the field
        if self.reqdate4 is None and "reqdate4" in self.model_fields_set:
            _dict['Reqdate4'] = None

        # set to None if ro_box1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_box1 is None and "ro_box1" in self.model_fields_set:
            _dict['roBox1'] = None

        # set to None if ro_box2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_box2 is None and "ro_box2" in self.model_fields_set:
            _dict['roBox2'] = None

        # set to None if ro_box3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_box3 is None and "ro_box3" in self.model_fields_set:
            _dict['roBox3'] = None

        # set to None if ro_box4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_box4 is None and "ro_box4" in self.model_fields_set:
            _dict['roBox4'] = None

        # set to None if ro_box5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_box5 is None and "ro_box5" in self.model_fields_set:
            _dict['roBox5'] = None

        # set to None if ro_comment (nullable) is None
        # and model_fields_set contains the field
        if self.ro_comment is None and "ro_comment" in self.model_fields_set:
            _dict['roComment'] = None

        # set to None if ro_discard (nullable) is None
        # and model_fields_set contains the field
        if self.ro_discard is None and "ro_discard" in self.model_fields_set:
            _dict['roDiscard'] = None

        # set to None if ro_gc1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc1 is None and "ro_gc1" in self.model_fields_set:
            _dict['roGC1'] = None

        # set to None if ro_gc1b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc1b is None and "ro_gc1b" in self.model_fields_set:
            _dict['roGC1b'] = None

        # set to None if ro_gc1c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc1c is None and "ro_gc1c" in self.model_fields_set:
            _dict['roGC1c'] = None

        # set to None if ro_gc1d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc1d is None and "ro_gc1d" in self.model_fields_set:
            _dict['roGC1d'] = None

        # set to None if ro_gc2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc2 is None and "ro_gc2" in self.model_fields_set:
            _dict['roGC2'] = None

        # set to None if ro_gc2b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc2b is None and "ro_gc2b" in self.model_fields_set:
            _dict['roGC2b'] = None

        # set to None if ro_gc2c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc2c is None and "ro_gc2c" in self.model_fields_set:
            _dict['roGC2c'] = None

        # set to None if ro_gc2d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc2d is None and "ro_gc2d" in self.model_fields_set:
            _dict['roGC2d'] = None

        # set to None if ro_gc3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc3 is None and "ro_gc3" in self.model_fields_set:
            _dict['roGC3'] = None

        # set to None if ro_gc3b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc3b is None and "ro_gc3b" in self.model_fields_set:
            _dict['roGC3b'] = None

        # set to None if ro_gc3c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc3c is None and "ro_gc3c" in self.model_fields_set:
            _dict['roGC3c'] = None

        # set to None if ro_gc3d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc3d is None and "ro_gc3d" in self.model_fields_set:
            _dict['roGC3d'] = None

        # set to None if ro_gc4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc4 is None and "ro_gc4" in self.model_fields_set:
            _dict['roGC4'] = None

        # set to None if ro_gc4b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc4b is None and "ro_gc4b" in self.model_fields_set:
            _dict['roGC4b'] = None

        # set to None if ro_gc4c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc4c is None and "ro_gc4c" in self.model_fields_set:
            _dict['roGC4c'] = None

        # set to None if ro_gc4d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc4d is None and "ro_gc4d" in self.model_fields_set:
            _dict['roGC4d'] = None

        # set to None if ro_gc5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc5 is None and "ro_gc5" in self.model_fields_set:
            _dict['roGC5'] = None

        # set to None if ro_gc5b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc5b is None and "ro_gc5b" in self.model_fields_set:
            _dict['roGC5b'] = None

        # set to None if ro_gc5c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc5c is None and "ro_gc5c" in self.model_fields_set:
            _dict['roGC5c'] = None

        # set to None if ro_gc5d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_gc5d is None and "ro_gc5d" in self.model_fields_set:
            _dict['roGC5d'] = None

        # set to None if ro_ice (nullable) is None
        # and model_fields_set contains the field
        if self.ro_ice is None and "ro_ice" in self.model_fields_set:
            _dict['roIce'] = None

        # set to None if ro_lot1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot1 is None and "ro_lot1" in self.model_fields_set:
            _dict['roLot1'] = None

        # set to None if ro_lot1b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot1b is None and "ro_lot1b" in self.model_fields_set:
            _dict['roLot1b'] = None

        # set to None if ro_lot1c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot1c is None and "ro_lot1c" in self.model_fields_set:
            _dict['roLot1c'] = None

        # set to None if ro_lot1d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot1d is None and "ro_lot1d" in self.model_fields_set:
            _dict['roLot1d'] = None

        # set to None if ro_lot2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot2 is None and "ro_lot2" in self.model_fields_set:
            _dict['roLot2'] = None

        # set to None if ro_lot2b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot2b is None and "ro_lot2b" in self.model_fields_set:
            _dict['roLot2b'] = None

        # set to None if ro_lot2c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot2c is None and "ro_lot2c" in self.model_fields_set:
            _dict['roLot2c'] = None

        # set to None if ro_lot2d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot2d is None and "ro_lot2d" in self.model_fields_set:
            _dict['roLot2d'] = None

        # set to None if ro_lot3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot3 is None and "ro_lot3" in self.model_fields_set:
            _dict['roLot3'] = None

        # set to None if ro_lot3b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot3b is None and "ro_lot3b" in self.model_fields_set:
            _dict['roLot3b'] = None

        # set to None if ro_lot3c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot3c is None and "ro_lot3c" in self.model_fields_set:
            _dict['roLot3c'] = None

        # set to None if ro_lot3d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot3d is None and "ro_lot3d" in self.model_fields_set:
            _dict['roLot3d'] = None

        # set to None if ro_lot4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot4 is None and "ro_lot4" in self.model_fields_set:
            _dict['roLot4'] = None

        # set to None if ro_lot4b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot4b is None and "ro_lot4b" in self.model_fields_set:
            _dict['roLot4b'] = None

        # set to None if ro_lot4c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot4c is None and "ro_lot4c" in self.model_fields_set:
            _dict['roLot4c'] = None

        # set to None if ro_lot4d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot4d is None and "ro_lot4d" in self.model_fields_set:
            _dict['roLot4d'] = None

        # set to None if ro_lot5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot5 is None and "ro_lot5" in self.model_fields_set:
            _dict['roLot5'] = None

        # set to None if ro_lot5b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot5b is None and "ro_lot5b" in self.model_fields_set:
            _dict['roLot5b'] = None

        # set to None if ro_lot5c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot5c is None and "ro_lot5c" in self.model_fields_set:
            _dict['roLot5c'] = None

        # set to None if ro_lot5d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_lot5d is None and "ro_lot5d" in self.model_fields_set:
            _dict['roLot5d'] = None

        # set to None if ro_spin_down (nullable) is None
        # and model_fields_set contains the field
        if self.ro_spin_down is None and "ro_spin_down" in self.model_fields_set:
            _dict['roSpinDown'] = None

        # set to None if ro_sub1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub1 is None and "ro_sub1" in self.model_fields_set:
            _dict['roSub1'] = None

        # set to None if ro_sub1b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub1b is None and "ro_sub1b" in self.model_fields_set:
            _dict['roSub1b'] = None

        # set to None if ro_sub1c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub1c is None and "ro_sub1c" in self.model_fields_set:
            _dict['roSub1c'] = None

        # set to None if ro_sub1d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub1d is None and "ro_sub1d" in self.model_fields_set:
            _dict['roSub1d'] = None

        # set to None if ro_sub2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub2 is None and "ro_sub2" in self.model_fields_set:
            _dict['roSub2'] = None

        # set to None if ro_sub2b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub2b is None and "ro_sub2b" in self.model_fields_set:
            _dict['roSub2b'] = None

        # set to None if ro_sub2c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub2c is None and "ro_sub2c" in self.model_fields_set:
            _dict['roSub2c'] = None

        # set to None if ro_sub2d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub2d is None and "ro_sub2d" in self.model_fields_set:
            _dict['roSub2d'] = None

        # set to None if ro_sub3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub3 is None and "ro_sub3" in self.model_fields_set:
            _dict['roSub3'] = None

        # set to None if ro_sub3b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub3b is None and "ro_sub3b" in self.model_fields_set:
            _dict['roSub3b'] = None

        # set to None if ro_sub3c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub3c is None and "ro_sub3c" in self.model_fields_set:
            _dict['roSub3c'] = None

        # set to None if ro_sub3d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub3d is None and "ro_sub3d" in self.model_fields_set:
            _dict['roSub3d'] = None

        # set to None if ro_sub4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub4 is None and "ro_sub4" in self.model_fields_set:
            _dict['roSub4'] = None

        # set to None if ro_sub4b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub4b is None and "ro_sub4b" in self.model_fields_set:
            _dict['roSub4b'] = None

        # set to None if ro_sub4c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub4c is None and "ro_sub4c" in self.model_fields_set:
            _dict['roSub4c'] = None

        # set to None if ro_sub4d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub4d is None and "ro_sub4d" in self.model_fields_set:
            _dict['roSub4d'] = None

        # set to None if ro_sub5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub5 is None and "ro_sub5" in self.model_fields_set:
            _dict['roSub5'] = None

        # set to None if ro_sub5b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub5b is None and "ro_sub5b" in self.model_fields_set:
            _dict['roSub5b'] = None

        # set to None if ro_sub5c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub5c is None and "ro_sub5c" in self.model_fields_set:
            _dict['roSub5c'] = None

        # set to None if ro_sub5d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_sub5d is None and "ro_sub5d" in self.model_fields_set:
            _dict['roSub5d'] = None

        # set to None if ro_tite1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite1 is None and "ro_tite1" in self.model_fields_set:
            _dict['roTite1'] = None

        # set to None if ro_tite1b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite1b is None and "ro_tite1b" in self.model_fields_set:
            _dict['roTite1b'] = None

        # set to None if ro_tite1c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite1c is None and "ro_tite1c" in self.model_fields_set:
            _dict['roTite1c'] = None

        # set to None if ro_tite1d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite1d is None and "ro_tite1d" in self.model_fields_set:
            _dict['roTite1d'] = None

        # set to None if ro_tite2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite2 is None and "ro_tite2" in self.model_fields_set:
            _dict['roTite2'] = None

        # set to None if ro_tite2b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite2b is None and "ro_tite2b" in self.model_fields_set:
            _dict['roTite2b'] = None

        # set to None if ro_tite2c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite2c is None and "ro_tite2c" in self.model_fields_set:
            _dict['roTite2c'] = None

        # set to None if ro_tite2d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite2d is None and "ro_tite2d" in self.model_fields_set:
            _dict['roTite2d'] = None

        # set to None if ro_tite3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite3 is None and "ro_tite3" in self.model_fields_set:
            _dict['roTite3'] = None

        # set to None if ro_tite3b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite3b is None and "ro_tite3b" in self.model_fields_set:
            _dict['roTite3b'] = None

        # set to None if ro_tite3c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite3c is None and "ro_tite3c" in self.model_fields_set:
            _dict['roTite3c'] = None

        # set to None if ro_tite3d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite3d is None and "ro_tite3d" in self.model_fields_set:
            _dict['roTite3d'] = None

        # set to None if ro_tite4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite4 is None and "ro_tite4" in self.model_fields_set:
            _dict['roTite4'] = None

        # set to None if ro_tite4b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite4b is None and "ro_tite4b" in self.model_fields_set:
            _dict['roTite4b'] = None

        # set to None if ro_tite4c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite4c is None and "ro_tite4c" in self.model_fields_set:
            _dict['roTite4c'] = None

        # set to None if ro_tite4d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite4d is None and "ro_tite4d" in self.model_fields_set:
            _dict['roTite4d'] = None

        # set to None if ro_tite5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite5 is None and "ro_tite5" in self.model_fields_set:
            _dict['roTite5'] = None

        # set to None if ro_tite5b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite5b is None and "ro_tite5b" in self.model_fields_set:
            _dict['roTite5b'] = None

        # set to None if ro_tite5c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite5c is None and "ro_tite5c" in self.model_fields_set:
            _dict['roTite5c'] = None

        # set to None if ro_tite5d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tite5d is None and "ro_tite5d" in self.model_fields_set:
            _dict['roTite5d'] = None

        # set to None if ro_tube1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tube1 is None and "ro_tube1" in self.model_fields_set:
            _dict['roTube1'] = None

        # set to None if ro_tube2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tube2 is None and "ro_tube2" in self.model_fields_set:
            _dict['roTube2'] = None

        # set to None if ro_tube3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tube3 is None and "ro_tube3" in self.model_fields_set:
            _dict['roTube3'] = None

        # set to None if ro_tube4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tube4 is None and "ro_tube4" in self.model_fields_set:
            _dict['roTube4'] = None

        # set to None if ro_tube5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_tube5 is None and "ro_tube5" in self.model_fields_set:
            _dict['roTube5'] = None

        # set to None if ro_vol1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol1 is None and "ro_vol1" in self.model_fields_set:
            _dict['roVol1'] = None

        # set to None if ro_vol2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol2 is None and "ro_vol2" in self.model_fields_set:
            _dict['roVol2'] = None

        # set to None if ro_vol3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol3 is None and "ro_vol3" in self.model_fields_set:
            _dict['roVol3'] = None

        # set to None if ro_vol4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol4 is None and "ro_vol4" in self.model_fields_set:
            _dict['roVol4'] = None

        # set to None if ro_vol5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol5 is None and "ro_vol5" in self.model_fields_set:
            _dict['roVol5'] = None

        # set to None if ro_vol_v1 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v1 is None and "ro_vol_v1" in self.model_fields_set:
            _dict['roVolV1'] = None

        # set to None if ro_vol_v1b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v1b is None and "ro_vol_v1b" in self.model_fields_set:
            _dict['roVolV1b'] = None

        # set to None if ro_vol_v1c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v1c is None and "ro_vol_v1c" in self.model_fields_set:
            _dict['roVolV1c'] = None

        # set to None if ro_vol_v1d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v1d is None and "ro_vol_v1d" in self.model_fields_set:
            _dict['roVolV1d'] = None

        # set to None if ro_vol_v2 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v2 is None and "ro_vol_v2" in self.model_fields_set:
            _dict['roVolV2'] = None

        # set to None if ro_vol_v2b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v2b is None and "ro_vol_v2b" in self.model_fields_set:
            _dict['roVolV2b'] = None

        # set to None if ro_vol_v2c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v2c is None and "ro_vol_v2c" in self.model_fields_set:
            _dict['roVolV2c'] = None

        # set to None if ro_vol_v2d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v2d is None and "ro_vol_v2d" in self.model_fields_set:
            _dict['roVolV2d'] = None

        # set to None if ro_vol_v3 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v3 is None and "ro_vol_v3" in self.model_fields_set:
            _dict['roVolV3'] = None

        # set to None if ro_vol_v3b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v3b is None and "ro_vol_v3b" in self.model_fields_set:
            _dict['roVolV3b'] = None

        # set to None if ro_vol_v3c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v3c is None and "ro_vol_v3c" in self.model_fields_set:
            _dict['roVolV3c'] = None

        # set to None if ro_vol_v3d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v3d is None and "ro_vol_v3d" in self.model_fields_set:
            _dict['roVolV3d'] = None

        # set to None if ro_vol_v4 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v4 is None and "ro_vol_v4" in self.model_fields_set:
            _dict['roVolV4'] = None

        # set to None if ro_vol_v4b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v4b is None and "ro_vol_v4b" in self.model_fields_set:
            _dict['roVolV4b'] = None

        # set to None if ro_vol_v4c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v4c is None and "ro_vol_v4c" in self.model_fields_set:
            _dict['roVolV4c'] = None

        # set to None if ro_vol_v4d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v4d is None and "ro_vol_v4d" in self.model_fields_set:
            _dict['roVolV4d'] = None

        # set to None if ro_vol_v5 (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v5 is None and "ro_vol_v5" in self.model_fields_set:
            _dict['roVolV5'] = None

        # set to None if ro_vol_v5b (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v5b is None and "ro_vol_v5b" in self.model_fields_set:
            _dict['roVolV5b'] = None

        # set to None if ro_vol_v5c (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v5c is None and "ro_vol_v5c" in self.model_fields_set:
            _dict['roVolV5c'] = None

        # set to None if ro_vol_v5d (nullable) is None
        # and model_fields_set contains the field
        if self.ro_vol_v5d is None and "ro_vol_v5d" in self.model_fields_set:
            _dict['roVolV5d'] = None

        # set to None if sign_x002d_off_x0020_status (nullable) is None
        # and model_fields_set contains the field
        if self.sign_x002d_off_x0020_status is None and "sign_x002d_off_x0020_status" in self.model_fields_set:
            _dict['Sign_x002d_off_x0020_status'] = None

        # set to None if spec_deli_loc (nullable) is None
        # and model_fields_set contains the field
        if self.spec_deli_loc is None and "spec_deli_loc" in self.model_fields_set:
            _dict['SpecDeliLoc'] = None

        # set to None if tam (nullable) is None
        # and model_fields_set contains the field
        if self.tam is None and "tam" in self.model_fields_set:
            _dict['TAM'] = None

        # set to None if tam_age (nullable) is None
        # and model_fields_set contains the field
        if self.tam_age is None and "tam_age" in self.model_fields_set:
            _dict['TAMAge'] = None

        # set to None if tc_prep (nullable) is None
        # and model_fields_set contains the field
        if self.tc_prep is None and "tc_prep" in self.model_fields_set:
            _dict['TCPrep'] = None

        # set to None if tc_tiss (nullable) is None
        # and model_fields_set contains the field
        if self.tc_tiss is None and "tc_tiss" in self.model_fields_set:
            _dict['TCTiss'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['Title'] = None

        # set to None if tmp (nullable) is None
        # and model_fields_set contains the field
        if self.tmp is None and "tmp" in self.model_fields_set:
            _dict['TMP'] = None

        # set to None if tmp_age (nullable) is None
        # and model_fields_set contains the field
        if self.tmp_age is None and "tmp_age" in self.model_fields_set:
            _dict['TMPAge'] = None

        # set to None if ui_version_string (nullable) is None
        # and model_fields_set contains the field
        if self.ui_version_string is None and "ui_version_string" in self.model_fields_set:
            _dict['_UIVersionString'] = None

        # set to None if wellness_report_x0028_no_x002_f_ye (nullable) is None
        # and model_fields_set contains the field
        if self.wellness_report_x0028_no_x002_f_ye is None and "wellness_report_x0028_no_x002_f_ye" in self.model_fields_set:
            _dict['WellnessReport_x0028_No_x002F_Ye'] = None

        # set to None if author_id (nullable) is None
        # and model_fields_set contains the field
        if self.author_id is None and "author_id" in self.model_fields_set:
            _dict['AuthorId'] = None

        # set to None if author_lookup_id (nullable) is None
        # and model_fields_set contains the field
        if self.author_lookup_id is None and "author_lookup_id" in self.model_fields_set:
            _dict['AuthorLookupId'] = None

        # set to None if editor_id (nullable) is None
        # and model_fields_set contains the field
        if self.editor_id is None and "editor_id" in self.model_fields_set:
            _dict['EditorId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Las2020List from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccommodationComment": obj.get("AccommodationComment"),
            "ACSFTime1": obj.get("ACSFTime1"),
            "ACSFTime2": obj.get("ACSFTime2"),
            "ACSFTime3": obj.get("ACSFTime3"),
            "ACSFTime4": obj.get("ACSFTime4"),
            "ACSFTime5": obj.get("ACSFTime5"),
            "ACSFID1": obj.get("ACSFID1"),
            "ACSFID2": obj.get("ACSFID2"),
            "ACSFID3": obj.get("ACSFID3"),
            "ACSFID4": obj.get("ACSFID4"),
            "ACSFID5": obj.get("ACSFID5"),
            "AfternoonPF": obj.get("AfternoonPF"),
            "AnimalsAvailableonProtocol": obj.get("AnimalsAvailableonProtocol"),
            "AppAuthor": obj.get("AppAuthor"),
            "AppEditor": obj.get("AppEditor"),
            "Attachments": obj.get("Attachments"),
            "Author": obj.get("Author"),
            "BCAge": obj.get("BCAge"),
            "BCGenotypes": obj.get("BCGenotypes"),
            "BCLocation": obj.get("BCLocation"),
            "BCTube": obj.get("BCTube"),
            "BCType": obj.get("BCType"),
            "BCVolume": obj.get("BCVolume"),
            "_ColorTag": obj.get("_ColorTag"),
            "ComplianceAssetId": obj.get("ComplianceAssetId"),
            "_ComplianceFlags": obj.get("_ComplianceFlags"),
            "_ComplianceTag": obj.get("_ComplianceTag"),
            "_ComplianceTagUserId": obj.get("_ComplianceTagUserId"),
            "_ComplianceTagWrittenTime": obj.get("_ComplianceTagWrittenTime"),
            "ContentType": obj.get("ContentType"),
            "Created": obj.get("Created"),
            "custcontact": obj.get("custcontact"),
            "CustomCom1": obj.get("CustomCom1"),
            "CustomCom2": obj.get("CustomCom2"),
            "custpresent": obj.get("custpresent"),
            "DeliveryLocation": obj.get("DeliveryLocation"),
            "DocIcon": obj.get("DocIcon"),
            "doseRoute": obj.get("doseRoute"),
            "doseSub": obj.get("doseSub"),
            "doseWhere": obj.get("doseWhere"),
            "doseduration": obj.get("doseduration"),
            "dosevolume": obj.get("dosevolume"),
            "Doxycycline": obj.get("Doxycycline"),
            "Edit": obj.get("Edit"),
            "Editor": obj.get("Editor"),
            "FolderChildCount": obj.get("FolderChildCount"),
            "icvComment": obj.get("icvComment"),
            "icvID1": obj.get("icvID1"),
            "icvID2": obj.get("icvID2"),
            "icvID3": obj.get("icvID3"),
            "icvID4": obj.get("icvID4"),
            "icvID5": obj.get("icvID5"),
            "icvLIMS": obj.get("icvLIMS"),
            "icvRoute1": obj.get("icvRoute1"),
            "icvRoute2": obj.get("icvRoute2"),
            "icvRoute3": obj.get("icvRoute3"),
            "icvRoute4": obj.get("icvRoute4"),
            "icvRoute5": obj.get("icvRoute5"),
            "icvSub1": obj.get("icvSub1"),
            "icvSub2": obj.get("icvSub2"),
            "icvSub3": obj.get("icvSub3"),
            "icvSub4": obj.get("icvSub4"),
            "icvSub5": obj.get("icvSub5"),
            "ID": obj.get("ID"),
            "_IsRecord": obj.get("_IsRecord"),
            "ItemChildCount": obj.get("ItemChildCount"),
            "LTaID1": obj.get("LTaID1"),
            "LTaID2": obj.get("LTaID2"),
            "LTaID3": obj.get("LTaID3"),
            "LTaID4": obj.get("LTaID4"),
            "LTaID5": obj.get("LTaID5"),
            "LTdate1": obj.get("LTdate1"),
            "LTdate2": obj.get("LTdate2"),
            "LTdate3": obj.get("LTdate3"),
            "LTdate4": obj.get("LTdate4"),
            "LTdate5": obj.get("LTdate5"),
            "LASComments": obj.get("LASComments"),
            "LIMSEntry": obj.get("LIMSEntry"),
            "LIMSProject": obj.get("LIMSProject"),
            "LIMSWorkflow": obj.get("LIMSWorkflow"),
            "LIMSWorkflow_x0020_2": obj.get("LIMSWorkflow_x0020_2"),
            "LinkTitle": obj.get("LinkTitle"),
            "LinkTitleNoMenu": obj.get("LinkTitleNoMenu"),
            "LTTask1": obj.get("LTTask1"),
            "LTTask2": obj.get("LTTask2"),
            "LTTask3": obj.get("LTTask3"),
            "LTTask4": obj.get("LTTask4"),
            "LTTask5": obj.get("LTTask5"),
            "Modified": obj.get("Modified"),
            "nEnd_x0020_Date": obj.get("nEnd_x0020_Date"),
            "nROID1": obj.get("nROID1"),
            "nROID2": obj.get("nROID2"),
            "nROID3": obj.get("nROID3"),
            "nROID4": obj.get("nROID4"),
            "nROID5": obj.get("nROID5"),
            "nStart_x0020_Date": obj.get("nStart_x0020_Date"),
            "OCT": obj.get("OCT"),
            "PostFix": obj.get("PostFix"),
            "ProjectID": obj.get("ProjectID"),
            "ProjectLead2": obj.get("ProjectLead2"),
            "Protocol": obj.get("Protocol"),
            "QCDoorSheet": obj.get("QCDoorSheet"),
            "ReqAge1": obj.get("ReqAge1"),
            "ReqAge2": obj.get("ReqAge2"),
            "ReqAge3": obj.get("ReqAge3"),
            "ReqAge4": obj.get("ReqAge4"),
            "ReqPro1": obj.get("ReqPro1"),
            "ReqPro2": obj.get("ReqPro2"),
            "ReqPro3": obj.get("ReqPro3"),
            "ReqPro4": obj.get("ReqPro4"),
            "Reqdate1": obj.get("Reqdate1"),
            "Reqdate2": obj.get("Reqdate2"),
            "Reqdate3": obj.get("Reqdate3"),
            "Reqdate4": obj.get("Reqdate4"),
            "RequestStatus2": obj.get("RequestStatus2"),
            "roBox1": obj.get("roBox1"),
            "roBox2": obj.get("roBox2"),
            "roBox3": obj.get("roBox3"),
            "roBox4": obj.get("roBox4"),
            "roBox5": obj.get("roBox5"),
            "roComment": obj.get("roComment"),
            "roDiscard": obj.get("roDiscard"),
            "roEye1": obj.get("roEye1"),
            "roEye2": obj.get("roEye2"),
            "roEye3": obj.get("roEye3"),
            "roEye4": obj.get("roEye4"),
            "roEye5": obj.get("roEye5"),
            "roGC1": obj.get("roGC1"),
            "roGC1b": obj.get("roGC1b"),
            "roGC1c": obj.get("roGC1c"),
            "roGC1d": obj.get("roGC1d"),
            "roGC2": obj.get("roGC2"),
            "roGC2b": obj.get("roGC2b"),
            "roGC2c": obj.get("roGC2c"),
            "roGC2d": obj.get("roGC2d"),
            "roGC3": obj.get("roGC3"),
            "roGC3b": obj.get("roGC3b"),
            "roGC3c": obj.get("roGC3c"),
            "roGC3d": obj.get("roGC3d"),
            "roGC4": obj.get("roGC4"),
            "roGC4b": obj.get("roGC4b"),
            "roGC4c": obj.get("roGC4c"),
            "roGC4d": obj.get("roGC4d"),
            "roGC5": obj.get("roGC5"),
            "roGC5b": obj.get("roGC5b"),
            "roGC5c": obj.get("roGC5c"),
            "roGC5d": obj.get("roGC5d"),
            "roIce": obj.get("roIce"),
            "roLIMS": obj.get("roLIMS"),
            "roLot1": obj.get("roLot1"),
            "roLot1b": obj.get("roLot1b"),
            "roLot1c": obj.get("roLot1c"),
            "roLot1d": obj.get("roLot1d"),
            "roLot2": obj.get("roLot2"),
            "roLot2b": obj.get("roLot2b"),
            "roLot2c": obj.get("roLot2c"),
            "roLot2d": obj.get("roLot2d"),
            "roLot3": obj.get("roLot3"),
            "roLot3b": obj.get("roLot3b"),
            "roLot3c": obj.get("roLot3c"),
            "roLot3d": obj.get("roLot3d"),
            "roLot4": obj.get("roLot4"),
            "roLot4b": obj.get("roLot4b"),
            "roLot4c": obj.get("roLot4c"),
            "roLot4d": obj.get("roLot4d"),
            "roLot5": obj.get("roLot5"),
            "roLot5b": obj.get("roLot5b"),
            "roLot5c": obj.get("roLot5c"),
            "roLot5d": obj.get("roLot5d"),
            "roSOP": obj.get("roSOP"),
            "roSpinDown": obj.get("roSpinDown"),
            "roSub1": obj.get("roSub1"),
            "roSub1b": obj.get("roSub1b"),
            "roSub1c": obj.get("roSub1c"),
            "roSub1d": obj.get("roSub1d"),
            "roSub2": obj.get("roSub2"),
            "roSub2b": obj.get("roSub2b"),
            "roSub2c": obj.get("roSub2c"),
            "roSub2d": obj.get("roSub2d"),
            "roSub3": obj.get("roSub3"),
            "roSub3b": obj.get("roSub3b"),
            "roSub3c": obj.get("roSub3c"),
            "roSub3d": obj.get("roSub3d"),
            "roSub4": obj.get("roSub4"),
            "roSub4b": obj.get("roSub4b"),
            "roSub4c": obj.get("roSub4c"),
            "roSub4d": obj.get("roSub4d"),
            "roSub5": obj.get("roSub5"),
            "roSub5b": obj.get("roSub5b"),
            "roSub5c": obj.get("roSub5c"),
            "roSub5d": obj.get("roSub5d"),
            "roTite1": obj.get("roTite1"),
            "roTite1b": obj.get("roTite1b"),
            "roTite1c": obj.get("roTite1c"),
            "roTite1d": obj.get("roTite1d"),
            "roTite2": obj.get("roTite2"),
            "roTite2b": obj.get("roTite2b"),
            "roTite2c": obj.get("roTite2c"),
            "roTite2d": obj.get("roTite2d"),
            "roTite3": obj.get("roTite3"),
            "roTite3b": obj.get("roTite3b"),
            "roTite3c": obj.get("roTite3c"),
            "roTite3d": obj.get("roTite3d"),
            "roTite4": obj.get("roTite4"),
            "roTite4b": obj.get("roTite4b"),
            "roTite4c": obj.get("roTite4c"),
            "roTite4d": obj.get("roTite4d"),
            "roTite5": obj.get("roTite5"),
            "roTite5b": obj.get("roTite5b"),
            "roTite5c": obj.get("roTite5c"),
            "roTite5d": obj.get("roTite5d"),
            "roTube1": obj.get("roTube1"),
            "roTube2": obj.get("roTube2"),
            "roTube3": obj.get("roTube3"),
            "roTube4": obj.get("roTube4"),
            "roTube5": obj.get("roTube5"),
            "roVol1": obj.get("roVol1"),
            "roVol2": obj.get("roVol2"),
            "roVol3": obj.get("roVol3"),
            "roVol4": obj.get("roVol4"),
            "roVol5": obj.get("roVol5"),
            "roVolV1": obj.get("roVolV1"),
            "roVolV1b": obj.get("roVolV1b"),
            "roVolV1c": obj.get("roVolV1c"),
            "roVolV1d": obj.get("roVolV1d"),
            "roVolV2": obj.get("roVolV2"),
            "roVolV2b": obj.get("roVolV2b"),
            "roVolV2c": obj.get("roVolV2c"),
            "roVolV2d": obj.get("roVolV2d"),
            "roVolV3": obj.get("roVolV3"),
            "roVolV3b": obj.get("roVolV3b"),
            "roVolV3c": obj.get("roVolV3c"),
            "roVolV3d": obj.get("roVolV3d"),
            "roVolV4": obj.get("roVolV4"),
            "roVolV4b": obj.get("roVolV4b"),
            "roVolV4c": obj.get("roVolV4c"),
            "roVolV4d": obj.get("roVolV4d"),
            "roVolV5": obj.get("roVolV5"),
            "roVolV5b": obj.get("roVolV5b"),
            "roVolV5c": obj.get("roVolV5c"),
            "roVolV5d": obj.get("roVolV5d"),
            "roWhere": obj.get("roWhere"),
            "Sign_x002d_off_x0020_status": obj.get("Sign_x002d_off_x0020_status"),
            "SpecDeliLoc": obj.get("SpecDeliLoc"),
            "Species": obj.get("Species"),
            "TAM": obj.get("TAM"),
            "TAMAge": obj.get("TAMAge"),
            "TAMFreq": obj.get("TAMFreq"),
            "TCPrep": obj.get("TCPrep"),
            "TCTiss": obj.get("TCTiss"),
            "Title": obj.get("Title"),
            "TMP": obj.get("TMP"),
            "TMPAge": obj.get("TMPAge"),
            "TMPFreq": obj.get("TMPFreq"),
            "_UIVersionString": obj.get("_UIVersionString"),
            "WellnessReport_x0028_No_x002F_Ye": obj.get("WellnessReport_x0028_No_x002F_Ye"),
            "WheretoObtainsubstance_x0028_ICV": obj.get("WheretoObtainsubstance_x0028_ICV"),
            "AuthorId": obj.get("AuthorId"),
            "AuthorLookupId": obj.get("AuthorLookupId"),
            "EditorId": obj.get("EditorId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


