# coding: utf-8

"""
    aind-sharepoint-service

     ## aind-sharepoint-service  Service to pull data from Sharepoint.  

    The version of the OpenAPI document: 0.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class NSB2019LimsProjectCode(str, Enum):
    """
    Enum class for LimsProjectCode
    """

    """
    allowed enum values
    """
    AINDDISCOVERY = 'aind-discovery'
    AINDEPHYS = 'aind-ephys'
    AINDMSMA = 'aind-msma'
    AINDOPHYS = 'aind-ophys'
    BRAINTV_VIRAL_STRATEGIES = 'BraintvViralStrategies'
    CELLTYPES_TRANSGENIC_CHAR = 'CelltypesTransgenicCharacterizationGCaMP'
    CITRICACIDPILOT = 'Citricacidpilot'
    DYNAMIC_ROUTING_BEHAVIOR = 'DynamicRoutingBehaviorDev'
    DYNAMIC_ROUTING_SURGICAL = 'DynamicRoutingSurgicalDevelopment'
    DYNAMIC_ROUTING_TASK1_PRO = 'DynamicRoutingTask1Production'
    DYNAMIC_ROUTING_ULTRA_OPT = 'DynamicRoutingUltraOptotaggingBehavior'
    IS_IX = 'ISIx'
    LEARNINGM_FISH_DEVELOPMEN = 'LearningmFISHDevelopment'
    LEARNINGM_FISH_TASK1_A = 'LearningmFISHTask1A'
    MINDSCOPE_TRANSGENIC_CHAR = 'MindscopeTransgenicCharacterizationGCaMP'
    MOUSE_BRAIN_CELL_ATLAS_TR = 'MouseBrainCellAtlasTranssynaptic'
    MOUSE_GENETIC_TOOLS_PROJE = 'MouseGeneticToolsProjectionMapping'
    M_IVSCCMET = 'mIVSCC-MET'
    M_IVSCCME_TX = 'mIVSCC-METx'
    M_MPATC_HX = 'mMPATCHx'
    M_M_PATCH = 'mMPatch'
    OM_FISHRO_BINJECTIONVIRUS = 'omFISHROBinjectionviruspilot'
    OM_FISH_CUX2_MESO = 'omFISHCux2Meso'
    OM_FISH_GAD2_MESO = 'omFISHGad2Meso'
    OM_FISH_GAD2_PILOT = 'omFISHGad2Pilot'
    OM_FISH_RORB_PILOT = 'omFISHRorbPilot'
    OM_FIS_HCOREGISTRATIONPIL = 'omFISHcoregistrationpilot'
    OPENSCOPE_DEVELOPMENT = 'OpenscopeDevelopment'
    OPEN_SCOPE_DENDRITE_COUPL = 'OpenScopeDendriteCoupling'
    OPEN_SCOPE_GLOBAL_LOCAL_O = 'OpenScopeGlobalLocalOddball'
    OPEN_SCOPE_ILLUSION = 'OpenScopeIllusion'
    OPEN_SCOPE_INJECTION_PILO = 'OpenScopeInjectionPilot'
    SELECT = 'Select...'
    SURGERY_X = 'SurgeryX'
    T301T = 'T301t'
    TASK_TRAINED_NETWORKS_MUL = 'TaskTrainedNetworksMultiscope'
    TASK_TRAINED_NETWORKS_NEU = 'TaskTrainedNetworksNeuropixel'
    TINY_BLUE_DOT_BEHAVIOR = 'TinyBlueDotBehavior'
    VARIABILITY_AIM1 = 'VariabilityAim1'
    VARIABILITY_AIM1_PILOT = 'VariabilityAim1Pilot'
    VARIABILITY_SPONTANEOUS = 'VariabilitySpontaneous'
    VIP_AXONAL_V1_PHASE1 = 'VipAxonalV1Phase1'
    VIP_SOMATIC_V1_MESO = 'VIPSomaticV1Meso'
    VIP_SOMATIC_V1_PHASE1 = 'VipSomaticV1Phase1'
    VIP_SOMATIC_V1_PHASE2 = 'VipSomaticV1Phase2'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NSB2019LimsProjectCode from a JSON string"""
        return cls(json.loads(json_str))


