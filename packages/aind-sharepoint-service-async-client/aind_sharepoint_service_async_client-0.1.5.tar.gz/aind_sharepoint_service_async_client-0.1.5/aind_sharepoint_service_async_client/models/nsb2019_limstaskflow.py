# coding: utf-8

"""
    aind-sharepoint-service

     ## aind-sharepoint-service  Service to pull data from Sharepoint.  

    The version of the OpenAPI document: 0.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class NSB2019Limstaskflow(str, Enum):
    """
    Enum class for Limstaskflow
    """

    """
    allowed enum values
    """
    AIND_EPHYS_PASSIVE_BEHAVI = 'AIND Ephys (Passive Behavior)'
    AIND_EPHYS_SURGERY_ONLY = 'AIND Ephys (Surgery only)'
    AIND_U19_THALAMUS = 'AIND U19 Thalamus'
    BRAIN_LARGE_SCALE_RECORDI = 'BRAIN Large Scale Recording'
    BRAIN_MOUSE_BRAIN_CELL_AT = 'BRAIN Mouse Brain Cell Atlas trans-synaptic'
    BRAIN_OBSERVATORY_TRANSGE = 'Brain Observatory Transgenic Characterization'
    BTV_BRAIN_VIRAL_STRATEGIE = 'BTV BRAIN Viral Strategies'
    CITRIC_ACID_PILOT = 'Citric Acid Pilot'
    EPHYS_TASK_DEV_DYNAMIC_RO = 'Ephys Task Dev Dynamic Routing (NSB Beh)'
    EPHYS_TASK_DEV_DYNAMI_001 = 'Ephys Task Dev Dynamic Routing (S/C Beh)'
    EPHYS_TAS_DEV_DYNAMIC_ROU = 'Ephys Tas Dev Dynamic Routing DOC Left Eye'
    IVSCC_HVA_RETRO_PATCH_SEQ = 'IVSCC HVA Retro PatchSeq'
    IVSC_CM_INJECTION = 'IVSCCm injection'
    IVSP_CM_INJECTION = 'IVSPCm Injection'
    MGT_ANTEROGRADE_PROJECTIO = 'MGT Anterograde Projection Mapping'
    MGT_LAB = 'MGT Lab'
    MGT_TISSUE_CYTE = 'MGT TissueCyte'
    MSP_DYNAMIC_ROUTING_SURGI = 'MSP Dynamic Routing Surgical Development'
    MSP_DYNAMIC_ROUTING_TASK = 'MSP Dynamic Routing Task 1 Production'
    MSP_DYNAMIC_ROUTING_ULTRA = 'MSP Dynamic Routing Ultra Optotagging Behavior'
    MSP_LEARNING_M_FISH_DEVEL = 'MSP Learning & mFISH Development (Dox)'
    MSP_LEARNING_M_FISH_D_001 = 'MSP Learning & mFISH Development'
    MSP_LEARNING_M_FISH_FRONT = 'MSP Learning & mFISH Frontal Window Dev'
    MSP_LEARNING_M_FISH_VIRUS = 'MSP Learning & mFISH Virus Testing'
    MSP_OM_FISH_CO_REGISTRATI = 'MSP omFISH Co-Registration Pilot'
    MSP_OM_FISH_CUX2_PILOT = 'MSP omFISH Cux2 Pilot'
    MSP_OM_FISH_GAD2_PILOT = 'MSP omFISH Gad2 Pilot'
    MSP_OM_FISH_ROB_INJECTION = 'MSP omFISH ROB Injection Virus Pilot'
    MSP_OM_FISH_RORB_PILOT = 'MSP omFISH Rorb Pilot'
    MSP_OPEN_SCOPE_DENDRITE_C = 'MSP OpenScope Dendrite Coupling'
    MSP_OPEN_SCOPE_GLOBAL_001 = 'MSP OpenScope Global Local Oddballs (Cohort 2)'
    MSP_OPEN_SCOPE_GLOBAL_LOC = 'MSP OpenScope Global Local Oddballs (Cohort 1)'
    MSP_OPEN_SCOPE_ILLUSION = 'MSP OpenScope Illusion'
    MSP_TASK_TRAINED_NETWORKS = 'MSP Task Trained Networks Neuropixel'
    MSP_TASK_TRAINED_NETW_001 = 'MSP Task Trained Networks Multiscope'
    MSP_VARIABILITY_AIM_1 = 'MSP Variability Aim 1'
    MSP_VARIABILITY_AIM_1_PIL = 'MSP Variability Aim 1 Pilot'
    MSP_VARIABILITY_SPONTANEO = 'MSP Variability Spontaneous'
    MSP_VIP_AXONAL_V1 = 'MSP VIP Axonal V1'
    MSP_VIP_SOMATIC_V1 = 'MSP VIP Somatic V1'
    NA = 'N/A'
    OPENSCOPE_VIRUS_VALIDATIO = 'Openscope Virus Validation'
    TINY_BLUE_DOT_BEHAVIOR = 'Tiny Blue Dot Behavior'
    TRANSGENIC_CHARACTERIZATI = 'Transgenic Characterization (Passive)'
    VGT_ENHANCERS_TRANSSYNAPT = 'VGT Enhancers Transsynaptic'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NSB2019Limstaskflow from a JSON string"""
        return cls(json.loads(json_str))


