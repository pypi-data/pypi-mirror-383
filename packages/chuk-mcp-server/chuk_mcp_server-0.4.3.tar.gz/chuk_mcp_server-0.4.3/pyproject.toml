[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chuk-mcp-server"
version = "0.4.3"
description = "A developer-friendly MCP framework powered by chuk_mcp"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "chuk-mcp>=0.5.1",
    "httptools>=0.6.4",
    "orjson>=3.10.18",
    "psutil>=7.0.0",
    "pydantic>=2.11.7",
    "starlette>=0.47.1",
    "uvicorn>=0.35.0",
    "uvloop>=0.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "aiohttp>=3.12.13",
    "requests>=2.32.4",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
    "types-setuptools>=69.0.0",
    "bandit>=1.7.8",
]

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["chuk_mcp_server*"]
namespaces = false

[tool.setuptools.package-data]
chuk_mcp_server = ["py.typed", "*.json", "*.yaml", "*.yml", "*.txt", "*.md"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "asyncio: mark a test as an async test",
    "slow: mark test as slow",
    "integration: mark test as integration test",
]
addopts = [
    "--tb=short",
    "-v",
    "--disable-warnings",
]

[dependency-groups]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "aiohttp>=3.12.13",
    "requests>=2.32.4",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
    "types-setuptools>=69.0.0",
    "bandit>=1.7.8",
]

[project.scripts]
chuk-mcp-server = "chuk_mcp_server.cli:main"

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
    "ARG001",  # Unused function argument (common in tests and benchmarks)
    "ARG002",  # Unused method argument (common in mock tests)
    "B017",  # Don't assert blind exception (acceptable in tests)
    "E402",  # Module level import not at top (needed for some examples)
    "E722",  # Bare except (sometimes needed in diagnostics)
    "B904",  # Raise without from in except (acceptable in examples)
    "B007",  # Unused loop variable (common in benchmarks)
    "SIM102",  # Nested if statements (readability preference)
    "SIM117",  # Multiple with statements (readability preference)
]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["UP045", "UP007", "UP038"]  # Allow old-style type annotations in tests
"examples/**/*.py" = ["W291", "W293", "F401", "F841"]  # Allow whitespace and unused imports in examples
"benchmarks/**/*.py" = ["C401", "F841", "SIM108"]  # Allow certain patterns in benchmarks
"diagnostics/**/*.py" = ["ALL"]  # Very lenient for diagnostics

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.isort]
known-first-party = ["chuk_mcp_server"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
# Reduced strictness for practical type checking
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
check_untyped_defs = true
strict_equality = false
# Check all source files but with relaxed settings
files = ["src/chuk_mcp_server"]
exclude = [
    "tests/",
    "benchmarks/",
    "diagnostics/",
    "examples/",
]

# Per-module overrides for cleaner output
[[tool.mypy.overrides]]
module = "chuk_mcp_server.types.*"
strict = true
warn_return_any = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "chuk_mcp_server.cloud.*",
    "chuk_mcp_server.config.*",
    "chuk_mcp_server.core",
    "chuk_mcp_server.protocol",
    "chuk_mcp_server.mcp_registry",
    "chuk_mcp_server.endpoint_registry",
    "chuk_mcp_server.endpoints.*",
    "chuk_mcp_server.http_server",
    "chuk_mcp_server.__init__"
]
ignore_errors = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/benchmarks/*",
    "*/diagnostics/*",
    "*/examples/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "examples", "benchmarks", "diagnostics"]
skips = ["B104"]  # Skip hardcoded_bind_all_interfaces - intentional for cloud deployments
