Metadata-Version: 2.4
Name: codehealthanalyzer
Version: 1.1.5
Summary: Biblioteca Python para an√°lise de qualidade e sa√∫de de c√≥digo
Home-page: https://github.com/imparcialista/codehealthanalyzer
Author: Luarco Team
Author-email: contato@luarco.com.br
Project-URL: Bug Reports, https://github.com/imparcialista/codehealthanalyzer/issues
Project-URL: Source, https://github.com/imparcialista/codehealthanalyzer
Project-URL: Documentation, https://codehealthanalyzer.readthedocs.io/
Keywords: code-quality,static-analysis,code-health,linting,python,html,css,javascript,ruff,analysis,metrics,reporting
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Testing
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ruff>=0.1.0
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=12.0.0
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: websockets>=12.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: bandit>=1.7.4; extra == "dev"
Requires-Dist: nox>=2024.4.15; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Provides-Extra: web
Requires-Dist: fastapi>=0.104.0; extra == "web"
Requires-Dist: uvicorn[standard]>=0.24.0; extra == "web"
Requires-Dist: jinja2>=3.1.0; extra == "web"
Requires-Dist: python-multipart>=0.0.6; extra == "web"
Requires-Dist: websockets>=12.0; extra == "web"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üîç CodeHealthAnalyzer

> Uma biblioteca Python completa para an√°lise de qualidade e sa√∫de de c√≥digo

üáßüá∑ Portugu√™s | [üá∫üá∏ English](README_EN.md)

[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://python.org)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

## üöÄ Vis√£o Geral

CodeHealthAnalyzer √© uma biblioteca Python moderna e abrangente para an√°lise de qualidade de c√≥digo. Ela combina m√∫ltiplas ferramentas de an√°lise em uma interface unificada, fornecendo insights detalhados sobre a sa√∫de do seu c√≥digo.

### ‚ú® Principais Funcionalidades

- **üö® An√°lise de Viola√ß√µes**: Detecta fun√ß√µes, classes e m√≥dulos que excedem limites de tamanho
- **üé® An√°lise de Templates**: Identifica CSS/JS inline em templates HTML que podem ser extra√≠dos
- **‚ö†Ô∏è Integra√ß√£o com Ruff**: Analisa erros de linting e os categoriza por prioridade
- **üìä Score de Qualidade**: Calcula um score de 0-100 baseado na sa√∫de geral do c√≥digo
- **üéØ Prioriza√ß√£o Inteligente**: Sugere a√ß√µes baseadas na criticidade dos problemas
- **üìà Relat√≥rios M√∫ltiplos**: Gera relat√≥rios em JSON, HTML, Markdown e CSV
- **üñ•Ô∏è CLI Amig√°vel**: Interface de linha de comando completa e intuitiva
- **üîß Altamente Configur√°vel**: Personalize limites, regras e categorias

## üì¶ Instala√ß√£o

### Instala√ß√£o via pip (recomendado)

```bash
# Instala√ß√£o b√°sica
pip install codehealthanalyzer

# Instala√ß√£o com dashboard web interativo
pip install codehealthanalyzer[web]

# Instala√ß√£o completa (web + desenvolvimento)
pip install codehealthanalyzer[web,dev]
```

### Instala√ß√£o para desenvolvimento

```bash
git clone https://github.com/imparcialista/codehealthanalyzer.git
cd codehealthanalyzer
pip install -e .[web,dev]
```

### Depend√™ncias

- Python 3.8+
- ruff >= 0.1.0
- click >= 8.0.0
- rich >= 12.0.0 (opcional, para sa√≠da colorida)

## üéØ Uso R√°pido

### üåê Dashboard Interativo

```bash
# Iniciar dashboard web com m√©tricas em tempo real
codehealthanalyzer dashboard

# Dashboard em host e porta espec√≠ficos
codehealthanalyzer dashboard --host 0.0.0.0 --port 8080

# Dashboard com reload autom√°tico para desenvolvimento
codehealthanalyzer dashboard --reload
```

**Funcionalidades do Dashboard:**
- üìä M√©tricas em tempo real com atualiza√ß√µes autom√°ticas
- üìà Gr√°ficos interativos de tend√™ncia de qualidade
- üéØ Visualiza√ß√£o de viola√ß√µes por tipo
- üìã Tabela de arquivos com problemas
- üîÑ WebSockets para atualiza√ß√µes instant√¢neas
- üì± Interface responsiva e moderna

### CLI (Interface de Linha de Comando)

```bash
# An√°lise completa do projeto atual (o diret√≥rio padr√£o √© '.')
codehealthanalyzer analyze

# Por padr√£o, um JSON √© gerado em ./reports/full_report.json
# Formatos adicionais (HTML, Markdown ou todos):
codehealthanalyzer analyze --format html
codehealthanalyzer analyze --format markdown
codehealthanalyzer analyze --format all

# Desativar JSON padr√£o
codehealthanalyzer analyze --format html --no-json

# Definir diret√≥rio de sa√≠da (padr√£o: ./reports)
codehealthanalyzer analyze --format all --output out/

# Apenas score de qualidade
codehealthanalyzer score

# Informa√ß√µes do projeto
codehealthanalyzer info

# An√°lise espec√≠fica de viola√ß√µes
codehealthanalyzer violations --format all

# An√°lise espec√≠fica de templates
codehealthanalyzer templates --format all

# An√°lise espec√≠fica de erros (Ruff)
codehealthanalyzer errors --format all

## Comandos dispon√≠veis

- `analyze [PROJECT_PATH]` (padr√£o: `.`): an√°lise completa (violations, templates, errors) e gera√ß√£o de relat√≥rios.
- `violations [PROJECT_PATH]`: apenas viola√ß√µes de tamanho/linhas.
- `templates [PROJECT_PATH]`: apenas templates HTML com CSS/JS inline.
- `errors [PROJECT_PATH]`: apenas erros Ruff.
- `score [PROJECT_PATH]`: exibe apenas o score de qualidade.
- `info [PROJECT_PATH]`: informa√ß√µes b√°sicas do projeto.
- `dashboard [PROJECT_PATH]`: inicia a UI web (FastAPI) com m√©tricas ao vivo.
- `format [PROJECT_PATH]`: aplica auto-fixes e formata√ß√£o (isort + black + ruff --fix).
- `lint [PROJECT_PATH]`: executa checagens (ruff, isort --check, black --check, bandit).

### Op√ß√µes comuns √∫teis

- `--output`, `-o`: diret√≥rio de sa√≠da dos relat√≥rios. Padr√£o: `./reports`.
- `--format`, `-f`: formato adicional do relat√≥rio: `html`, `markdown` ou `all`.
- `--no-json`: por padr√£o, sempre √© gerado um JSON. Use esta flag para N√ÉO gerar o JSON.
- `--config`, `-c`: caminho para um `config.json` com suas prefer√™ncias.
- `--no-default-excludes`: n√£o aplicar as exclus√µes padr√£o (tests, scripts, reports, venv etc.).

Exemplos por comando

```bash
# analyze: JSON + HTML + MD em ./reports
codehealthanalyzer analyze --format all

# analyze: HTML apenas, sem JSON
codehealthanalyzer analyze --format html --no-json

# violations: JSON por padr√£o + HTML/MD
codehealthanalyzer violations --format all

# templates: JSON por padr√£o + HTML/MD
codehealthanalyzer templates --format all

# errors (Ruff): JSON por padr√£o + HTML/MD
codehealthanalyzer errors --format all

# desativar exclus√µes padr√£o e usar config.json
codehealthanalyzer analyze --no-default-excludes --config config.json

# format: aplicar auto-fixes e formata√ß√£o
codehealthanalyzer format
codehealthanalyzer format --no-ruff   # p.ex., s√≥ isort + black

# lint: checar qualidade e seguran√ßa
codehealthanalyzer lint
```
```

### API Python

```python
from codehealthanalyzer import CodeAnalyzer

# Inicializa o analisador
analyzer = CodeAnalyzer('/path/to/project')

# Gera relat√≥rio completo
report = analyzer.generate_full_report(output_dir='reports/')

# Obt√©m score de qualidade
score = analyzer.get_quality_score()
print(f"Score de Qualidade: {score}/100")

# An√°lises individuais
violations = analyzer.analyze_violations()
templates = analyzer.analyze_templates()
errors = analyzer.analyze_errors()
```

## üìä Exemplo de Sa√≠da

```
üìä RESUMO DA AN√ÅLISE
==================================================
‚úÖ Score de Qualidade: 85/100 - Excelente!
üìÅ Arquivos analisados: 124
‚ö†Ô∏è  Arquivos com viola√ß√µes: 8
üé® Templates: 15
üîç Erros Ruff: 0
üî• Issues de alta prioridade: 2

üéØ PRIORIDADES DE A√á√ÉO:
1. üî¥ Viola√ß√µes de Alta Prioridade (2)
2. üü° Templates com Muito CSS/JS Inline (3)
```

## üîß Configura√ß√£o

### Arquivo de Configura√ß√£o JSON

```json
{
  "limits": {
    "python_function": {"yellow": 30, "red": 50},
    "python_class": {"yellow": 300, "red": 500},
    "python_module": {"yellow": 500, "red": 1000},
    "html_template": {"yellow": 150, "red": 200},
    "test_file": {"yellow": 400, "red": 600}
  },
  "target_dir": "src/",
  "ruff_fix": true,
  "templates_dir": ["templates/", "app/templates/"],
  "file_rules": {
    "critical_files": ["main.py", "core.py"],
    "skip_patterns": [".git", "__pycache__", "node_modules"]
  },
  "exclude_dirs": ["legacy/", "playground/"]
}
```

### Uso com Configura√ß√£o

```bash
codehealthanalyzer analyze . --config config.json
```

```python
import json
from codehealthanalyzer import CodeAnalyzer

with open('config.json') as f:
    config = json.load(f)

analyzer = CodeAnalyzer('/path/to/project', config)
```

### Novas op√ß√µes de configura√ß√£o

- `templates_dir`:
  - Define um ou mais diret√≥rios onde os templates HTML ser√£o buscados.
  - Aceita string (ex.: `"templates/"`) ou lista de strings (ex.: `["templates/", "app/templates/"]`).
  - Padr√µes autom√°ticos: `templates/` e `luarco/templates/` (se existirem no projeto).

- `target_dir` (ErrorsAnalyzer/Ruff):
  - Diret√≥rio raiz analisado pelo Ruff. Padr√£o agora √© `"."` (raiz do projeto).

- `ruff_fix` (ErrorsAnalyzer):
  - Quando `true`, executa `ruff check --fix` antes de coletar os erros.
  - Padr√£o: `false`.

- Exclus√µes de diret√≥rios (padr√£o e personalizadas):
  - Por padr√£o, os analisadores ignoram diret√≥rios n√£o relacionados a c√≥digo-fonte:
    - `.git`, `__pycache__`, `.pytest_cache`, `node_modules`, `.ruff_cache`
    - `tests`, `scripts`, `reports`, `dist`, `build`, `site-packages`
    - `.tox`, `.nox`, `.venv`, `venv`, `.env`, `migrations`
  - Para desativar as exclus√µes padr√£o: use a flag `--no-default-excludes` nos comandos `analyze`, `violations`, `templates`, `errors`.
  - Para definir exclus√µes personalizadas via config:
    ```json
    {
      "exclude_dirs": ["legacy/", "playground/"]
    }
    ```

### Observa√ß√£o para Windows (encoding do console)

Para evitar problemas de encoding (CP1252) no console do Windows, a CLI usa apenas caracteres ASCII.
Se desejar usar emojis/Unicode, configure o terminal para UTF-8. Exemplo no PowerShell:

```powershell
$OutputEncoding = [Console]::OutputEncoding = [System.Text.UTF8Encoding]::new()
```

## üåç Tradu√ß√µes

- Arquivos compilados `.mo` agora s√£o inclu√≠dos no pacote distribu√≠do.
- Para compilar localmente, use `scripts/compile_translations.py` (requer `gettext` ou fallback Python embutido).

## üîÅ Integra√ß√£o Cont√≠nua (CI)

  - Lint com Ruff (`ruff check`).
  - Testes com `pytest`.
  - Matriz Python: 3.8 a 3.12.
  - (Opcional) Build de documenta√ß√£o Sphinx.

## üìà Tipos de An√°lise

### üö® An√°lise de Viola√ß√µes

Detecta:
- Fun√ß√µes muito longas (> 50 linhas)
- Classes muito grandes (> 500 linhas)
- M√≥dulos muito extensos (> 1000 linhas)
- Templates HTML muito longos (> 200 linhas)

### üé® An√°lise de Templates

Identifica:
- CSS inline em atributos `style`
- JavaScript inline em eventos (`onclick`, etc.)
- Tags `<style>` com muito conte√∫do
- Tags `<script>` com muito c√≥digo

### ‚ö†Ô∏è An√°lise de Erros

Integra com Ruff para detectar:
- Erros de sintaxe
- Problemas de estilo
- Imports n√£o utilizados
- Vari√°veis n√£o definidas
- Complexidade excessiva

## üìä Score de Qualidade

O score √© calculado baseado em:
- **Viola√ß√µes de alta prioridade**: -10 pontos cada
- **Erros de linting**: -2 pontos cada
- **Templates problem√°ticos**: -5 pontos cada
- **Base**: 100 pontos

### Interpreta√ß√£o
- **80-100**: üü¢ Excelente
- **60-79**: üü° Bom
- **0-59**: üî¥ Precisa melhorar

## üéØ Categoriza√ß√£o Inteligente

### Arquivos
- **Arquivo Cr√≠tico**: Arquivos essenciais do sistema
- **Views Admin**: Interfaces administrativas
- **Blueprint Cr√≠tico**: Rotas cr√≠ticas da aplica√ß√£o
- **Template Base**: Templates fundamentais

### Prioridades
- **Alta**: Problemas que afetam funcionalidade
- **M√©dia**: Problemas de manutenibilidade
- **Baixa**: Melhorias recomendadas

## üìã Formatos de Relat√≥rio

### JSON
```json
{
  "metadata": {
    "generated_at": "2024-01-15T10:30:00",
    "generator": "CodeHealthAnalyzer v1.0.0"
  },
  "summary": {
    "quality_score": 85,
    "total_files": 124,
    "violation_files": 8
  },
  "priorities": [...],
  "violations": [...],
  "templates": [...],
  "errors": [...]
}
```

### HTML
Relat√≥rio completo e naveg√°vel, com:
- Resumo (Score, totais)
- Prioridades de a√ß√£o
- Tabela de Arquivos com Viola√ß√µes (arquivo, prioridade, n¬∫ viola√ß√µes, linhas)
- Tabela de Erros (Ruff)
- Tabela de Templates (CSS/JS chars)

### Markdown
Relat√≥rio rico em Markdown com:
- Resumo em tabela
- Prioridades
- Tabelas para Viola√ß√µes, Erros e Templates

### CSV
Dados tabulares para an√°lise em planilhas.

## üõ†Ô∏è API Avan√ßada

### Analisadores Individuais

```python
from codehealthanalyzer.analyzers import (
    ViolationsAnalyzer,
    TemplatesAnalyzer,
    ErrorsAnalyzer
)

# An√°lise espec√≠fica de viola√ß√µes
violations_analyzer = ViolationsAnalyzer('/path/to/project')
violations_report = violations_analyzer.analyze()

# An√°lise espec√≠fica de templates
templates_analyzer = TemplatesAnalyzer('/path/to/project')
templates_report = templates_analyzer.analyze()

# An√°lise espec√≠fica de erros
errors_analyzer = ErrorsAnalyzer('/path/to/project')
errors_report = errors_analyzer.analyze()
```

### Gera√ß√£o de Relat√≥rios

```python
from codehealthanalyzer.reports import ReportGenerator, ReportFormatter

generator = ReportGenerator()
formatter = ReportFormatter()

# Gera relat√≥rio consolidado
full_report = generator.generate_full_report(
    violations=violations_report,
    templates=templates_report,
    errors=errors_report,
    output_dir='reports/'
)

# Converte para diferentes formatos
html_content = generator.generate_html_report(full_report, 'report.html')
markdown_content = formatter.to_markdown(full_report, 'report.md')
formatter.to_csv(full_report, 'report.csv')
```

### Utilit√°rios

```python
from codehealthanalyzer.utils import (
    Categorizer,
    PathValidator,
    FileHelper,
    ColorHelper
)

# Categoriza√ß√£o
categorizer = Categorizer()
category = categorizer.categorize_file(Path('src/main.py'))
priority = categorizer.determine_priority('file', {'lines': 150, 'type': 'python'})

# Valida√ß√£o
validator = PathValidator()
is_valid = validator.is_python_project('/path/to/project')
project_info = validator.get_project_info('/path/to/project')

# Helpers
file_helper = FileHelper()
data = file_helper.read_json('config.json')
file_helper.write_json(data, 'output.json')

# Cores para terminal
print(ColorHelper.success("Sucesso!"))
print(ColorHelper.error("Erro!"))
print(ColorHelper.warning("Aviso!"))
```

## üß™ Testes

```bash
# Instala depend√™ncias de desenvolvimento
pip install -e ".[dev]"

# Executa testes
pytest

# Executa testes com cobertura
pytest --cov=codehealthanalyzer

# Executa linting
ruff check codehealthanalyzer/
black --check codehealthanalyzer/
```

## üß∞ Ferramentas de Qualidade e Seguran√ßa (para seu projeto)

Al√©m de usar o CodeHealthAnalyzer, recomendamos rodar as seguintes ferramentas diretamente no seu projeto (exemplos a seguir). Substitua `luarco/` pelo diret√≥rio do seu projeto.

### Ruff (Linter & Auto-fix)

```bash
# Verificar erros com ruff
ruff check luarco/

# Corrigir erros automaticamente (quando poss√≠vel)
ruff check luarco/ --fix

# Ver apenas erros cr√≠ticos
ruff check luarco/ --select=F821,F841,E9
```

### Black (Formata√ß√£o autom√°tica)

```bash
# Black - Formata√ß√£o autom√°tica
black .
```

### isort (Organiza√ß√£o de imports)

```bash
# isort - Organiza√ß√£o de imports
isort .
```

### Bandit (Seguran√ßa)

```bash
# bandit - Seguran√ßa (gera relat√≥rio JSON)
bandit -r luarco/ -f json -o bandit-report.json
```

Observa√ß√µes:
- √â comum rodar `ruff check --fix`, depois `isort .` e `black .` para padronizar o c√≥digo.
- Voc√™ pode integrar essas ferramentas no seu CI, semelhante ao nosso workflow em `.github/workflows/ci.yml`.

## ü§ù Contribui√ß√£o

1. Fork o projeto
2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abra um Pull Request

### Diretrizes de Contribui√ß√£o

- Siga o estilo de c√≥digo existente
- Adicione testes para novas funcionalidades
- Atualize a documenta√ß√£o quando necess√°rio
- Use commits sem√¢nticos

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

## üôè Agradecimentos

- [Ruff](https://github.com/astral-sh/ruff) - Linter Python ultrarr√°pido
- [Click](https://click.palletsprojects.com/) - Framework para CLI
- [Rich](https://github.com/Textualize/rich) - Formata√ß√£o rica para terminal

## üìû Suporte

- üìß Email: contato@luarco.com.br
- üêõ Issues: [GitHub Issues](https://github.com/imparcialista/codehealthanalyzer/issues)
- üìñ Documenta√ß√£o: [ReadTheDocs](https://codehealthanalyzer.readthedocs.io/)

---

**Feito com ‚ù§Ô∏è pela equipe Imparcialista**

---

# üîç CodeHealthAnalyzer

> A comprehensive Python library for code quality and health analysis

[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://python.org)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

[üáßüá∑ Portugu√™s](README.md) | üá∫üá∏ English

## üöÄ Overview

CodeHealthAnalyzer is a modern and comprehensive Python library for code quality analysis. It combines multiple analysis tools into a unified interface, providing detailed insights into your code's health.

### ‚ú® Key Features

- **üö® Violations Analysis**: Detects functions, classes, and modules that exceed size limits
- **üé® Template Analysis**: Identifies inline CSS/JS in HTML templates that can be extracted
- **‚ö†Ô∏è Ruff Integration**: Analyzes linting errors and categorizes them by priority
- **üìä Quality Score**: Calculates a 0-100 score based on overall code health
- **üéØ Smart Prioritization**: Suggests actions based on problem criticality
- **üìà Multiple Reports**: Generates reports in JSON, HTML, Markdown, and CSV
- **üñ•Ô∏è Friendly CLI**: Complete and intuitive command-line interface
- **üîß Highly Configurable**: Customize limits, rules, and categories

## üì¶ Installation

### Installation via pip (recommended)

```bash
# Basic installation
pip install codehealthanalyzer

# Installation with interactive web dashboard
pip install codehealthanalyzer[web]

# Complete installation (web + development)
pip install codehealthanalyzer[web,dev]
```

### Development Installation

```bash
git clone https://github.com/imparcialista/codehealthanalyzer.git
cd codehealthanalyzer
pip install -e .[web,dev]
```

### Dependencies

- Python 3.8+
- ruff >= 0.1.0
- click >= 8.0.0
- rich >= 12.0.0 (optional, for colored output)

## üéØ Quick Start

### üåê Interactive Dashboard

```bash
# Start web dashboard with real-time metrics
codehealthanalyzer dashboard .

# Dashboard on specific host and port
codehealthanalyzer dashboard . --host 0.0.0.0 --port 8080

# Dashboard with auto-reload for development
codehealthanalyzer dashboard . --reload
```

**Dashboard Features:**
- üìä Real-time metrics with automatic updates
- üìà Interactive quality trend charts
- üéØ Violations visualization by type
- üìã Problem files table
- üîÑ WebSockets for instant updates
- üì± Responsive and modern interface

### CLI (Command Line Interface)

```bash
# Complete analysis of current project
codehealthanalyzer analyze .

# Analysis with HTML output
codehealthanalyzer analyze . --format html --output reports/

# Quality score only
codehealthanalyzer score .

# Project information
codehealthanalyzer info .

# Specific violations analysis
codehealthanalyzer violations . --output violations.json
```

### Python API

```python
from codehealthanalyzer import CodeAnalyzer

# Initialize analyzer
analyzer = CodeAnalyzer('/path/to/project')

# Generate complete report
report = analyzer.generate_full_report(output_dir='reports/')

# Get quality score
score = analyzer.get_quality_score()
print(f"Quality Score: {score}/100")

# Individual analyses
violations = analyzer.analyze_violations()
templates = analyzer.analyze_templates()
errors = analyzer.analyze_errors()
```

## üìä Example Output

```
üìä ANALYSIS SUMMARY
==================================================
‚úÖ Quality Score: 85/100 - Excellent!
üìÅ Files analyzed: 124
‚ö†Ô∏è  Files with violations: 8
üé® Templates: 15
üîç Ruff Errors: 0
üî• High priority issues: 2

üéØ ACTION PRIORITIES:
1. üî¥ High Priority Violations (2)
2. üü° Templates with Too Much Inline CSS/JS (3)
```

## üîß Configuration

### JSON Configuration File

```json
{
  "limits": {
    "python_function": {"yellow": 30, "red": 50},
    "python_class": {"yellow": 300, "red": 500},
    "python_module": {"yellow": 500, "red": 1000},
    "html_template": {"yellow": 150, "red": 200},
    "test_file": {"yellow": 400, "red": 600}
  },
  "target_dir": "src/",
  "file_rules": {
    "critical_files": ["main.py", "core.py"],
    "skip_patterns": [".git", "__pycache__", "node_modules"]
  }
}
```

### Usage with Configuration

```bash
codehealthanalyzer analyze . --config config.json
```

```python
import json
from codehealthanalyzer import CodeAnalyzer

with open('config.json') as f:
    config = json.load(f)

analyzer = CodeAnalyzer('/path/to/project', config)
```

## üìà Analysis Types

### üö® Violations Analysis

Detects:
- Functions too long (> 50 lines)
- Classes too large (> 500 lines)
- Modules too extensive (> 1000 lines)
- HTML templates too long (> 200 lines)

### üé® Template Analysis

Identifies:
- Inline CSS in `style` attributes
- Inline JavaScript in events (`onclick`, etc.)
- `<style>` tags with too much content
- `<script>` tags with too much code

### ‚ö†Ô∏è Error Analysis

Integrates with Ruff to detect:
- Syntax errors
- Style issues
- Unused imports
- Undefined variables
- Excessive complexity

## üìä Quality Score

The score is calculated based on:
- **High priority violations**: -10 points each
- **Linting errors**: -2 points each
- **Problematic templates**: -5 points each
- **Base**: 100 points

### Interpretation
- **80-100**: üü¢ Excellent
- **60-79**: üü° Good
- **0-59**: üî¥ Needs improvement

## üåê Internationalization

### Language Support

CodeHealthAnalyzer supports multiple languages:
- **Portuguese (Brazil)**: Default language
- **English**: Full translation available

### Setting Language

```python
from codehealthanalyzer.i18n import set_language

# Set to English
set_language('en')

# Set to Portuguese (Brazil)
set_language('pt_BR')

# Auto-detect system language
from codehealthanalyzer.i18n import auto_configure_language
auto_configure_language()
```

### Environment Variable

```bash
# Set language via environment
export CODEHEALTHANALYZER_LANG=en
codehealthanalyzer analyze .
```

## üõ†Ô∏è Advanced API

### Individual Analyzers

```python
from codehealthanalyzer.analyzers import (
    ViolationsAnalyzer,
    TemplatesAnalyzer,
    ErrorsAnalyzer
)

# Specific violations analysis
violations_analyzer = ViolationsAnalyzer('/path/to/project')
violations_report = violations_analyzer.analyze()

# Specific templates analysis
templates_analyzer = TemplatesAnalyzer('/path/to/project')
templates_report = templates_analyzer.analyze()

# Specific errors analysis
errors_analyzer = ErrorsAnalyzer('/path/to/project')
errors_report = errors_analyzer.analyze()
```

### Report Generation

```python
from codehealthanalyzer.reports import ReportGenerator, ReportFormatter

generator = ReportGenerator()
formatter = ReportFormatter()

# Generate consolidated report
full_report = generator.generate_full_report(
    violations=violations_report,
    templates=templates_report,
    errors=errors_report,
    output_dir='reports/'
)

# Convert to different formats
html_content = generator.generate_html_report(full_report, 'report.html')
markdown_content = formatter.to_markdown(full_report, 'report.md')
formatter.to_csv(full_report, 'report.csv')
```

## üß™ Testing

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run tests with coverage
pytest --cov=codehealthanalyzer

# Run linting
ruff check codehealthanalyzer/
black --check codehealthanalyzer/
```

## ü§ù Contributing

1. Fork the project
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

### Contribution Guidelines

- Follow existing code style
- Add tests for new features
- Update documentation when necessary
- Use semantic commits

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- [Ruff](https://github.com/astral-sh/ruff) - Ultra-fast Python linter
- [Click](https://click.palletsprojects.com/) - CLI framework
- [Rich](https://github.com/Textualize/rich) - Rich terminal formatting

## üìû Support

- üìß Email: contato@luarco.com.br
- üêõ Issues: [GitHub Issues](https://github.com/imparcialista/codehealthanalyzer/issues)
- üìñ Documentation: [ReadTheDocs](https://codehealthanalyzer.readthedocs.io/)

---

**Made with ‚ù§Ô∏è by the Imparcialista team**
