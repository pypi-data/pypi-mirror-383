{"version":3,"file":"dataset-CxjXUBIH.js","sources":["../../src/stores/dataset.ts"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { getDatasets, createDataset, updateDataset, deleteDataset, deleteBatchDatasets, bindSamplesByName as addSamplesToDataset, unbindSample } from '@/api/dataset';\nimport type { Dataset, GetDatasetsParams, CreateDatasetParams, UpdateDatasetParams, DeleteDatasetParams, DeleteBatchDatasetsParams, AddSamplesToDatasetParams, UnbindSampleParams } from '@/api/dataset';\n\nexport const useDatasetStore = defineStore('dataset', {\n  state: () => ({\n    datasets: [] as Dataset[],\n    total: 0,\n    loading: false,\n    lastFetchTime: 0,\n    currentProjectId: null as number | string | null,\n    currentParams: {} as GetDatasetsParams\n  }),\n  \n  getters: {\n    getDatasetById: (state) => (id: number) => {\n      return state.datasets.find(dataset => dataset.id === id);\n    }\n  },\n  \n  actions: {\n    async fetchDatasets(projectId: number | string, params: Partial<GetDatasetsParams> = {}) {\n      // 如果已经有数据且在短时间内（如5秒）请求过，且参数相同，直接返回缓存\n      const now = Date.now();\n      const isSameParams = JSON.stringify({ ...this.currentParams, ...params }) === \n                          JSON.stringify(this.currentParams);\n      \n      if (\n        this.datasets.length > 0 && \n        this.currentProjectId === projectId &&\n        now - this.lastFetchTime < 5000 && \n        isSameParams &&\n        !params.forceRefresh\n      ) {\n        return { datasets: this.datasets, total: this.total };\n      }\n      \n      this.loading = true;\n      try {\n        const requestParams: GetDatasetsParams = {\n          project_id: projectId as number,\n          ...params\n        };\n        \n        delete requestParams.forceRefresh;\n        this.currentParams = requestParams;\n        \n        const response = await getDatasets(requestParams);\n        \n        if (response.data.code === 200) {\n          this.datasets = response.data.data.datasets || [];\n          this.total = response.data.data.total || 0;\n          this.lastFetchTime = now;\n          this.currentProjectId = projectId;\n        }\n        return { datasets: this.datasets, total: this.total };\n      } catch (error) {\n        console.error('获取数据集列表失败:', error);\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async createDataset(params: CreateDatasetParams) {\n      const response = await createDataset(params);\n      if (response.data.code === 200) {\n        // 强制刷新数据集列表\n        await this.fetchDatasets(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async updateDataset(params: UpdateDatasetParams) {\n      const response = await updateDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        const index = this.datasets.findIndex(dataset => dataset.id === params.id);\n        if (index !== -1) {\n          this.datasets[index] = { ...this.datasets[index], ...response.data.data };\n        }\n      }\n      return response;\n    },\n    \n    async deleteDataset(params: DeleteDatasetParams) {\n      const response = await deleteDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        this.datasets = this.datasets.filter(dataset => dataset.id !== params.dataset_id);\n        if (this.total > 0) this.total--;\n      }\n      return response;\n    },\n    \n    async deleteBatchDatasets(params: DeleteBatchDatasetsParams) {\n      const response = await deleteBatchDatasets(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，移除已删除的数据集\n        this.datasets = this.datasets.filter(dataset => !params.dataset_ids.includes(dataset.id));\n        // 更新总数\n        this.total = Math.max(0, this.total - params.dataset_ids.length);\n      }\n      return response;\n    },\n    \n    async addSamplesToDataset(params: AddSamplesToDatasetParams) {\n      const response = await addSamplesToDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，增加样本数量\n        const index = this.datasets.findIndex(dataset => dataset.id === params.dataset_id);\n        if (index !== -1) {\n          this.datasets[index].sample_count += params.sample_ids.length;\n        }\n      }\n      return response;\n    },\n    \n    /**\n     * 从数据集中移除样本\n     * @param params 移除样本参数\n     * @returns 移除结果\n     */\n    async unbindSampleFromDataset(params: UnbindSampleParams) {\n      const response = await unbindSample(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，减少样本数量\n        const index = this.datasets.findIndex(dataset => dataset.id === params.dataset_id);\n        if (index !== -1 && this.datasets[index].sample_count > 0) {\n          this.datasets[index].sample_count -= 1; // 减少1个样本\n        }\n      }\n      return response;\n    }\n  }\n}); "],"names":["useDatasetStore","defineStore","state","id","dataset","projectId","params","now","isSameParams","requestParams","response","getDatasets","error","createDataset","updateDataset","index","deleteDataset","deleteBatchDatasets","addSamplesToDataset","unbindSample"],"mappings":"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"}