{"version":3,"file":"dataset-D_eZWn-W.js","sources":["../../src/api/dataset.ts"],"sourcesContent":["import { request } from '@/utils/request';\nimport type { IResponse, IListResp } from '@/types/response';\nimport type { GetSamplesParams } from '@/api/sample';\n\nconst api = {\n  list: '/datasets/list',\n  create: '/datasets/create',\n  update: '/datasets/update',\n  delete: '/datasets/delete',\n  batchDelete: '/datasets/batch_delete',\n  export: '/datasets/export',\n  bindSamplesByName: '/datasets/bind_samples_by_names',\n  bindSamplesByFilter: '/datasets/create_filter',\n  unbindSample: '/datasets/unbind_sample',\n  divideDataset: '/datasets/split',\n  packageDataset: '/datasets/package',\n  downloadDataset: '/datasets/download',\n  checkUsage: '/datasets/check_usage'\n};\n\n// 数据集接口参数类型定义\nexport interface Dataset {\n  id: number;\n  name: string;\n  description?: string;\n  project_id: number;\n  sample_count: number;\n  username: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface GetDatasetsParams {\n  project_id: number;\n  name?: string;\n  page?: number;\n  size?: number;\n  forceRefresh?: boolean;\n}\n\nexport interface CreateDatasetParams {\n  name: string;\n  description?: string;\n  project_id: number | string;\n}\n\nexport interface UpdateDatasetParams {\n  id: number | string;\n  name: string;\n  description?: string;\n  project_id: number | string;\n}\n\nexport interface DeleteDatasetParams {\n  dataset_id: number | string;\n  project_id: number | string;\n}\n\nexport interface DeleteBatchDatasetsParams {\n  dataset_ids: number[];\n  project_id: number | string;\n}\n\nexport interface ExportDatasetParams {\n  dataset_id: number;\n  format: 'json' | 'csv' | 'xml';\n}\n\n// 添加样本到数据集参数类型\nexport interface AddSamplesToDatasetParams {\n  dataset_name: string;\n  sample_ids: number[];\n  project_id: number | string;\n}\n\n/**\n * 获取数据集列表\n * @param params 查询参数\n * @returns 数据集列表\n */\nexport function getDatasets(params: GetDatasetsParams) {\n  return request.get<IResponse<IListResp<Dataset>>>(api.list, { params });\n}\n\n/**\n * 创建数据集\n * @param data 创建数据集参数\n * @returns 创建的数据集\n */\nexport function createDataset(data: CreateDatasetParams) {\n  return request.post<IResponse<Dataset>>(api.create, data);\n}\n\n/**\n * 更新数据集\n * @param data 更新数据集参数\n * @returns 更新的数据集\n */\nexport function updateDataset(data: UpdateDatasetParams) {\n  return request.patch<IResponse<Dataset>>(api.update, data);\n}\n\n/**\n * 删除数据集\n * @param data 删除数据集参数\n * @returns 删除结果\n */\nexport function deleteDataset(data: DeleteDatasetParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.delete, data);\n}\n\n/**\n * 批量删除数据集\n * @param data 批量删除数据集参数\n * @returns 删除结果\n */\nexport function deleteBatchDatasets(data: DeleteBatchDatasetsParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.batchDelete, data);\n}\n\n/**\n * 导出数据集\n * @param params 导出数据集参数\n * @returns 导出结果\n */\nexport function exportDataset(params: ExportDatasetParams) {\n  return request.get(api.export, { \n    params,\n    responseType: 'blob' // 设置响应类型为blob，用于文件下载\n  });\n}\n\n/**\n * 添加样本到数据集\n * @param data 添加样本到数据集参数\n * @returns 添加结果\n */\nexport function bindSamplesByName(data: AddSamplesToDatasetParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamplesByName, data);\n} \n\n/**\n * 根据筛选条件添加样本到数据集\n * @param data 创建过滤器参数\n * @returns 创建结果\n */\nexport interface CreateFilterParams {\n  project_id: number;  // 项目ID，必填，大于0\n  dataset_name: string;  // 数据集名称，必填，长度1-100\n  status?: number | string;  // 样本状态：1-未处理，2-背景，3-已标注，可选\n  id?: number | string;  // 样本ID，可选\n  name?: string;  // 样本名称，支持模糊搜索，可选\n  creator_name?: string;  // 创建人名称，支持模糊搜索，可选\n  label_ids?: number[];  // 类别ID列表，可选\n  tag_ids?: number[];  // 标签ID列表（保留兼容性），可选\n  tag_filter_mode?: 'or' | 'and' | 'not';  // 标签筛选模式：或、与、非（保留兼容性），可选\n  use_tag_groups?: boolean;  // 是否使用标签组模式，可选\n  tag_groups?: string;  // 标签组（字符串格式），可选\n  tag_groups_logic?: 'and' | 'or';  // 标签组间逻辑，可选\n  dataset_ids?: number[];  // 数据集ID列表，可选\n  sort?: string;  // 排序方式，可选\n  unSelectedIds?: number[];  // 需要排除的样本ID列表，可选\n}\n\nexport function bindSamplesByFilter(data: CreateFilterParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamplesByFilter, data);\n}\n\n/**\n * 从数据集中移除样本\n * @param data 移除样本参数\n * @returns 移除结果\n */\nexport interface UnbindSampleParams {\n  dataset_id: number;  // 数据集ID，必填\n  sample_id: number;  // 样本ID，必填\n}\n\nexport function unbindSample(data: UnbindSampleParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.unbindSample, data);\n}\n\n/**\n * 划分数据集\n * @param data 划分数据集参数\n * @returns 划分结果\n */\nexport interface DivideDatasetParams extends GetSamplesParams {\n  train_dataset_name: string;  // 训练集名称，必填，长度1-100\n  train_dataset_id: number | null;  // 训练集ID，选填，大于0\n  test_dataset_name: string;  // 测试集名称，必填，长度1-100\n  test_dataset_id: number | null;  // 测试集ID，选填，大于0\n  test_ratio: number;  // 划分比例，必填，0-100\n}\n\nexport function divideDataset(data: DivideDatasetParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.divideDataset, data);\n}\n\n/**\n * 打包数据集\n * @param data 打包数据集参数\n * @returns 打包结果\n */\nexport interface PackageDatasetParams {\n  dataset_id: number;\n  project_id: number;\n}\n\nexport function packageDataset(data: PackageDatasetParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.packageDataset, data);\n}\n\n/**\n * 下载数据集\n * @param data 下载数据集参数\n * @returns 下载结果\n */\nexport interface DownloadDatasetParams {\n  dataset_id: number;\n}\n\nexport function downloadDataset(data: DownloadDatasetParams) {\n  return request.get(`${api.downloadDataset}/${data.dataset_id}`, { responseType: 'blob' });\n}\n\n/**\n * 检查数据集使用状态\n * @param data 检查数据集使用状态参数\n * @returns 使用状态结果\n */\nexport interface CheckDatasetUsageParams {\n  project_id: number;\n  dataset_ids: number[];\n}\n\nexport interface CheckDatasetUsageResponse {\n  in_use: number[];\n}\n\nexport function checkDatasetUsage(data: CheckDatasetUsageParams) {\n  return request.post<IResponse<CheckDatasetUsageResponse>>(api.checkUsage, data);\n}\n\n"],"names":["api","getDatasets","params","request","createDataset","data","updateDataset","deleteDataset","deleteBatchDatasets","bindSamplesByName","bindSamplesByFilter","unbindSample","divideDataset","packageDataset","checkDatasetUsage"],"mappings":"yCAIA,MAAMA,EAAM,CACV,KAAM,iBACN,OAAQ,mBACR,OAAQ,mBACR,OAAQ,mBACR,YAAa,yBAEb,kBAAmB,kCACnB,oBAAqB,0BACrB,aAAc,0BACd,cAAe,kBACf,eAAgB,oBAEhB,WAAY,uBACd,EA8DO,SAASC,EAAYC,EAA2B,CACrD,OAAOC,EAAQ,IAAmCH,EAAI,KAAM,CAAE,OAAAE,EAAQ,CACxE,CAOO,SAASE,EAAcC,EAA2B,CACvD,OAAOF,EAAQ,KAAyBH,EAAI,OAAQK,CAAI,CAC1D,CAOO,SAASC,EAAcD,EAA2B,CACvD,OAAOF,EAAQ,MAA0BH,EAAI,OAAQK,CAAI,CAC3D,CAOO,SAASE,EAAcF,EAA2B,CACvD,OAAOF,EAAQ,KAAsCH,EAAI,OAAQK,CAAI,CACvE,CAOO,SAASG,EAAoBH,EAAiC,CACnE,OAAOF,EAAQ,KAAsCH,EAAI,YAAaK,CAAI,CAC5E,CAmBO,SAASI,EAAkBJ,EAAiC,CACjE,OAAOF,EAAQ,KAAsCH,EAAI,kBAAmBK,CAAI,CAClF,CAyBO,SAASK,EAAoBL,EAA0B,CAC5D,OAAOF,EAAQ,KAAsCH,EAAI,oBAAqBK,CAAI,CACpF,CAYO,SAASM,EAAaN,EAA0B,CACrD,OAAOF,EAAQ,KAAsCH,EAAI,aAAcK,CAAI,CAC7E,CAeO,SAASO,EAAcP,EAA2B,CACvD,OAAOF,EAAQ,KAAsCH,EAAI,cAAeK,CAAI,CAC9E,CAYO,SAASQ,EAAeR,EAA4B,CACzD,OAAOF,EAAQ,KAAsCH,EAAI,eAAgBK,CAAI,CAC/E,CA6BO,SAASS,EAAkBT,EAA+B,CAC/D,OAAOF,EAAQ,KAA2CH,EAAI,WAAYK,CAAI,CAChF"}