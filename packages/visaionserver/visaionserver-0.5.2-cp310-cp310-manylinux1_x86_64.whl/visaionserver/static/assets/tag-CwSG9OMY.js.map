{"version":3,"file":"tag-CwSG9OMY.js","sources":["../../src/api/tag.ts","../../src/stores/tag.ts"],"sourcesContent":["import type { AxiosResponse } from 'axios'\nimport { request } from '@/utils/request'\nimport type { IResponse, IListResp } from '@/types/response'\nimport axios from 'axios'\n\nconst api = {\n  projectTags: '/tags/list',\n  create: '/tags/create',\n  update: '/tags/update',\n  delete: '/tags/delete',\n  batchCreate: '/tags/batch',\n  bindSamples: '/tags/bind_samples',\n  deleteBatch: '/tags/batch_delete',\n  bindSamplesByFilter: '/tags/bind_samples_with_filter',\n  unbindSample: '/tags/unbind_sample'\n}\n\n// 标签接口参数类型定义\nexport interface Tag {\n  id: number\n  name: string\n  project_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface CreateTagParams {\n  names: string[]\n  project_id: number\n}\n\nexport interface UpdateTagParams {\n  id: number\n  name: string\n}\n\nexport interface DeleteTagParams {\n  id: number\n}\n\nexport interface BindSamplesParams {\n  tag_ids: number[]\n  sample_ids: number[]\n}\n\nexport interface TagItem {\n  name: string  // 标签名称\n}\n\nexport interface BatchCreateTagsParams {\n  project_id: number\n  tags: TagItem[]\n}\n\nexport interface ProjectTagsParams {\n  project_id: number\n  tag_id?: number[]\n  name?: string\n  page?: number\n  page_size?: number\n  forceRefresh?: boolean\n}\n\n/**\n * 获取标签列表\n * @param params 查询参数\n * @returns 标签列表\n */\nexport function getTags(params: ProjectTagsParams) {\n  return request.get<IResponse<IListResp<Tag>>>(api.projectTags, { params })\n}\n\n/**\n * 创建标签\n * @param data 创建标签参数\n * @returns 创建的标签\n */\nexport function createTag(data: CreateTagParams) {\n  return request.post<IResponse<Tag>>(api.create, data)\n}\n\n/**\n * 批量创建标签\n * @param data 批量创建标签参数\n * @returns 创建结果\n */\nexport function batchCreateTags(data: BatchCreateTagsParams) {\n  return request.post<IResponse<{ success: boolean; created_count: number }>>(api.batchCreate, data)\n}\n\n/**\n * 更新标签\n * @param data 更新标签参数\n * @returns 更新的标签\n */\nexport function updateTag(data: UpdateTagParams) {\n  return request.patch<IResponse<Tag>>(api.update, data)\n}\n\n/**\n * 删除标签\n * @param data 删除标签参数\n * @returns 删除结果\n */\nexport function deleteTag(data: DeleteTagParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.delete, data)\n}\n\n/**\n * 批量绑定标签到样本\n * @param data 绑定参数\n * @returns 绑定结果\n */\nexport function tagBindSamples(data: BindSamplesParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamples, data)\n}\n\n// 获取标签列表的接口\nexport const getTagsList = async (): Promise<{ code: number; data: Tag[]; msg?: string }> => {\n  const response = await axios.get('/api/tags')\n  return response.data\n}\n\n/**\n * 批量删除标签\n * @param data 批量删除标签参数\n * @returns 删除结果\n */\nexport interface DeleteBatchTagsParams {\n  tag_ids: number[]\n  project_id: number\n} \n\nexport function deleteBatchTags(data: DeleteBatchTagsParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.deleteBatch, data)\n}\n\n/**\n * 根据筛选条件绑定标签\n * @param data 绑定参数\n * @returns 绑定结果\n */\nexport interface BindSamplesByFilterParams {\n  tag_ids: number[];\n  project_id: number;\n  status?: number | string;\n  id?: number | string;\n  name?: string;\n  creator_name?: string;\n  label_id?: number | string;\n  tag_id?: number | string;\n  sort?: string;\n  unSelectedIds?: number[];\n}\n\nexport function tagBindSamplesByFilter(data: BindSamplesByFilterParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamplesByFilter, data);\n}\n\n/**\n * 解绑样本\n * @param data 解绑参数\n * @returns 解绑结果\n */\nexport interface UnbindSampleParams {\n  tag_id: number\n  sample_id: number\n}\n\nexport function tagUnbindSample(data: UnbindSampleParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.unbindSample, data)\n}\n","import { defineStore } from 'pinia';\nimport { getTags, deleteTag, updateTag, createTag, batchCreateTags, tagBindSamples, deleteBatchTags, tagUnbindSample } from '@/api/tag';\nimport type { Tag, ProjectTagsParams, CreateTagParams, UpdateTagParams, BatchCreateTagsParams, BindSamplesParams, DeleteBatchTagsParams, UnbindSampleParams } from '@/api/tag';\n\nexport const useTagStore = defineStore('tag', {\n  state: () => ({\n    tags: [] as Tag[],\n    total: 0,\n    loading: false,\n    lastFetchTime: 0,\n    currentProjectId: null as number | string | null,\n    currentParams: {} as ProjectTagsParams\n  }),\n  \n  getters: {\n    getTagById: (state) => (id: number) => {\n      return state.tags.find(tag => tag.id === id);\n    },\n    \n    getTagsByIds: (state) => (ids: number[]) => {\n      return state.tags.filter(tag => ids.includes(tag.id));\n    }\n  },\n  \n  actions: {\n    async fetchTags(projectId: number | string, params: Partial<ProjectTagsParams> = {}) {\n      // 如果已经有数据且在短时间内（如5秒）请求过，且参数相同，直接返回缓存\n      const now = Date.now();\n      const isSameParams = JSON.stringify({ ...this.currentParams, ...params }) === \n                          JSON.stringify(this.currentParams);\n      \n      if (\n        this.tags.length > 0 && \n        this.currentProjectId === projectId &&\n        now - this.lastFetchTime < 5000 && \n        isSameParams &&\n        !params.forceRefresh\n      ) {\n        return { tags: this.tags, total: this.total };\n      }\n      \n      this.loading = true;\n      try {\n        const requestParams: ProjectTagsParams = {\n          project_id: projectId as number,\n          ...params\n        };\n        \n        delete requestParams.forceRefresh;\n        this.currentParams = requestParams;\n        \n        const response = await getTags(requestParams);\n        \n        if (response.data.code === 200) {\n          this.tags = response.data.data.tags || [];\n          this.total = response.data.data.total || 0;\n          this.lastFetchTime = now;\n          this.currentProjectId = projectId;\n        }\n        return { tags: this.tags, total: this.total };\n      } catch (error) {\n        console.error('获取标签列表失败:', error);\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async deleteTag(params: { tag_id: number, project_id: number | string }) {\n      const response = await deleteTag(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        this.tags = this.tags.filter(tag => tag.id !== params.tag_id);\n        if (this.total > 0) this.total--;\n      }\n      return response;\n    },\n    \n    async updateTag(params: UpdateTagParams) {\n      const response = await updateTag(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        const index = this.tags.findIndex(tag => tag.id === params.id);\n        if (index !== -1) {\n          this.tags[index] = { ...this.tags[index], ...response.data.data };\n        }\n      }\n      return response;\n    },\n    \n    async createTag(params: CreateTagParams) {\n      const response = await createTag(params);\n      if (response.data.code === 200) {\n        // 强制刷新标签列表\n        await this.fetchTags(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async batchCreateTags(params: BatchCreateTagsParams) {\n      const response = await batchCreateTags(params);\n      if (response.data.code === 200) {\n        // 强制刷新标签列表\n        await this.fetchTags(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async bindSamplesToTags(params: BindSamplesParams) {\n      return await tagBindSamples(params);\n    },\n    \n    async deleteBatchTags(params: DeleteBatchTagsParams) {\n      const response = await deleteBatchTags(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，移除已删除的标签\n        this.tags = this.tags.filter(tag => !params.tag_ids.includes(tag.id));\n        // 更新总数\n        this.total = Math.max(0, this.total - params.tag_ids.length);\n      }\n      return response;\n    },\n\n    async unbindSample(params: UnbindSampleParams) {\n      const response = await tagUnbindSample(params);\n      return response;\n    }\n  }\n}); "],"names":["api","getTags","params","request","createTag","data","batchCreateTags","updateTag","deleteTag","tagBindSamples","deleteBatchTags","tagBindSamplesByFilter","tagUnbindSample","useTagStore","defineStore","state","id","tag","ids","projectId","now","isSameParams","requestParams","response","error","index"],"mappings":"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"}