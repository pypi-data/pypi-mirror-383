# coding: utf-8

"""
    aind-sharepoint-service

     ## aind-sharepoint-service  Service to pull data from Sharepoint.  

    The version of the OpenAPI document: 0.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class LASLimsproject(str, Enum):
    """
    Enum class for LIMSProject.
    """

    """
    allowed enum values
    """
    N_0310 = '0310'
    N_0311 = '0311'
    N_0312 = '0312'
    N_0314 = '0314'
    N_0316 = '0316'
    N_0319 = '0319'
    N_0320 = '0320'
    N_0321 = '0321'
    N_03212 = '03212'
    N_03213 = '03213'
    N_03214 = '03214'
    N_0322 = '0322'
    N_0324 = '0324'
    N_0325 = '0325'
    N_0326 = '0326'
    N_0327 = '0327'
    N_03272 = '03272'
    N_0328 = '0328'
    N_0329 = '0329'
    N_0331 = '0331'
    N_0334 = '0334'
    N_03342 = '03342'
    N_0335 = '0335'
    N_0336 = '0336'
    N_0338 = '0338'
    N_0339 = '0339'
    N_03392 = '03392'
    N_0340 = '0340'
    N_0342 = '0342'
    N_03422 = '03422'
    N_0343 = '0343'
    N_0344 = '0344'
    N_0345 = '0345'
    N_0346 = '0346'
    N_0350 = '0350'
    N_0350X = '0350x'
    N_0351 = '0351'
    N_0351X = '0351x'
    N_0354 = '0354'
    N_0355 = '0355'
    N_0357 = '0357'
    N_0358 = '0358'
    N_0359 = '0359'
    N_0360 = '0360'
    N_03602 = '03602'
    N_0362 = '0362'
    N_0363 = '0363'
    N_0364 = '0364'
    N_0365 = '0365'
    N_0365X = '0365x'
    N_0366 = '0366'
    N_0366X = '0366x'
    N_0367 = '0367'
    N_0369 = '0369'
    N_0371 = '0371'
    N_0372 = '0372'
    N_0372X = '0372x'
    N_0374 = '0374'
    N_0376 = '0376'
    N_0376A = '0376a'
    N_0376X = '0376x'
    N_0378 = '0378'
    N_0378X = '0378x'
    N_0380 = '0380'
    N_0384 = '0384'
    N_0386 = '0386'
    N_0388 = '0388'
    AIND_MSMA = 'aind-msma'
    AIND_DISCOVERY = 'aind-discovery'
    AIND_EPHYS = 'aind-ephys'
    AIND_OPHYS = 'aind-ophys'
    APR_OX = 'APROx'
    A_XL_OX = 'AXlOx'
    BA_RSEQ_GENETIC_TOOLS = 'BARseq_GeneticTools'
    BRAIN_STIM = 'BrainStim'
    BRAINTV_VIRAL_STRATEGIES = 'BraintvViralStrategies'
    C200 = 'C200'
    C600 = 'C600'
    C600_LATERAL = 'C600Lateral'
    C600X = 'C600x'
    CELLTYPES_TRANSGENIC_CHAR = 'CelltypesTransgenicCharacterizationGCaMP'
    CITRICACIDPILOT = 'Citricacidpilot'
    CON_9999 = 'CON-9999'
    CON_C505 = 'CON-C505'
    CON_CS04 = 'CON-CS04'
    DEEPSCOPE_SLM_DEVELOPMENT = 'DeepscopeSLMDevelopment'
    DYNAMIC_ROUTING_BEHAVIOR = 'DynamicRoutingBehaviorDev'
    DYNAMIC_ROUTING_OPTO_DEV = 'DynamicRoutingOptoDev'
    DYNAMIC_ROUTING_SURGICAL = 'DynamicRoutingSurgicalDevelopment'
    DYNAMIC_ROUTING_TASK1_PRO = 'DynamicRoutingTask1Production'
    DYNAMIC_ROUTING_TASK2_PRO = 'DynamicRoutingTask2Production'
    DYNAMIC_ROUTING_ULTRA_OPT = 'DynamicRoutingUltraOptotaggingBehavior'
    H120 = 'H120'
    H200 = 'H200'
    H301 = 'H301'
    H301T = 'H301t'
    H301_X = 'H301X'
    H501_X = 'H501X'
    H504 = 'H504'
    IS_IX = 'ISIx'
    LARGE_SCALE_VOLTAGE = 'LargeScaleVoltage'
    LEARNINGM_FISH_DEVELOPMEN = 'LearningmFISHDevelopment'
    LEARNINGM_FISH_TASK1_A = 'LearningmFISHTask1A'
    M301T = 'M301t'
    MESOSCOPE_DEVELOPMENT = 'MesoscopeDevelopment'
    METHDEV_PECT_PROTEOMICS = 'Methdev_PECT_Proteomics'
    M_FISH_PLATFORM_DEVELOPME = 'mFishPlatformDevelopment'
    MINDSCOPE_TRANSGENIC_CHAR = 'MindscopeTransgenicCharacterizationGCaMP'
    M_IVSCC_MET = 'mIVSCC-MET'
    M_IVSCC_ME_TX = 'mIVSCC-METx'
    M_IVSCC_MET_LINK_AIBS = 'mIVSCC-MET-Link_AIBS'
    M_M_PATCHX = 'mMPatchx'
    M_MPATC_HX = 'mMPATCHx'
    MOUSE_BRAIN_CELL_ATLAS_CH = 'MouseBrainCellAtlasCharacterizationPilot'
    MOUSE_BRAIN_CELL_ATLAS_CH_2 = 'MouseBrainCellAtlasCharacterizatlon'
    MOUSE_BRAIN_CELL_ATLAS_TR = 'MouseBrainCellAtlasTranssynaptic'
    MOUSE_FULL_MORPHOLOGY_FMO = 'MouseFullMorphologyFmost'
    MOUSE_GENETIC_TOOLS_PROJE = 'MouseGeneticToolsProjectionMapping'
    M_VISP_TAXL_O = 'MVisp-taxl.o'
    MULTISCOPE_SIGNAL_NOISE = 'MultiscopeSignalNoise'
    N200 = 'N200'
    N310 = 'N310'
    NEUROPIXEL_VISUAL_BEHAVIO = 'NeuropixelVisualBehavior'
    NEUROPIXEL_VISUAL_BEHAVIO_2 = 'NeuropixelVisualBehaviorDevelopment'
    NEUROPIXEL_VISUAL_CODING = 'NeuropixelVisualCoding'
    OLVSX = 'OLVSX'
    OM_FIS_HCOREGISTRATIONPIL = 'omFISHcoregistrationpilot'
    OM_FISH_CUX2_MESO = 'omFISHCux2Meso'
    OM_FISH_GAD2_MESO = 'omFISHGad2Meso'
    OM_FISH_GAD2_PILOT = 'omFISHGad2Pilot'
    OM_FISH_RBP4_MESO = 'omFISHRbp4Meso'
    OM_FISH_RORB_PILOT = 'omFISHRorbPilot'
    OM_FISHRO_BINJECTIONVIRUS = 'omFISHROBinjectionviruspilot'
    OM_FISH_SST_MESO = 'omFISHSstMeso'
    OM_FISH_VIP_MESO = 'omFISHVipMeso'
    OPEN_SCOPE_DENDRITE_COUPL = 'OpenScopeDendriteCoupling'
    OPENSCOPE_DEVELOPMENT = 'OpenscopeDevelopment'
    OPEN_SCOPE_ILLUSION = 'OpenScopeIllusion'
    OPEN_SCOPE_GLOBAL_LOCAL_O = 'OpenScopeGlobalLocalOddball'
    OPENSCOPE_GAMMA_PILOT = 'OpenscopeGammaPilot'
    OPENSCOPE_GAMMA_PRODUCTLO = 'OpenscopeGammaProductlon'
    OPENSCOPELNJECTION_PILOT = 'OpenscopelnjectionPilot'
    OPEN_SCOPE_LOOP = 'OpenScopeLoop'
    OPENSCOPE_MOTION_PLLOT = 'OpenscopeMotionPllot'
    OPENSCOPE_MOTION_PRODUCTI = 'OpenscopeMotionProduction'
    OPENSCOPE_MULTIPLEX_PILOT = 'OpenscopeMultiplexPilot'
    OPENSCOPE_MULTIPLEX_PRODU = 'OpenscopeMultiplexProduction'
    OPEN_SCOPE_P3 = 'OpenScopeP3'
    OPEN_SCOPE_PSYCODE = 'OpenScopePsycode'
    OPEN_SCOPE_SEQUENCE_LEARN = 'OpenScopeSequenceLearning'
    OPEN_SCOPE_TEMPORAL_BARCO = 'OpenScopeTemporalBarcode'
    OPEN_SCOPE_TEXTURE = 'OpenScopeTexture'
    OPEN_SCOPE_V2 = 'OpenScopeV2'
    OPEN_SCOPE_VISION2_HIPPOC = 'OpenScopeVision2Hippocampus'
    OPEN_SCOPE_VISMO = 'OpenScopeVismo'
    OPH5_X = 'OPH5X'
    SLC6_A1_NEUROPIXEL = 'SLC6A1Neuropixel'
    SMART_SPIM_GENETIC_TOOLS = 'SmartSPIM_GeneticTools'
    SURGERY_X = 'SurgeryX'
    T301 = 'T301'
    T301T = 'T301t'
    T301_X = 'T301X'
    T503 = 'T503'
    T503_X = 'T503X'
    T504 = 'T504'
    T504_X = 'T504X'
    T600 = 'T600'
    T601 = 'T601'
    T601_X = 'T601X'
    TCYTX = 'TCYTX'
    TASK_TRAINED_NETWORKS_MUL = 'TaskTrainedNetworksMultiscope'
    TASK_TRAINED_NETWORKS_NEU = 'TaskTrainedNetworksNeuropixel'
    TEMPLETON_PSYCHEDELICS = 'TempletonPsychedelics'
    TEMPLETON_TTOC = 'Templeton TTOC'
    TINY_BLUE_DOT_BEHAVIOR = 'TinyBlueDotBehavior'
    U01_BFCT = 'U01BFCT'
    VARIABILITY_AIM1 = 'VariabilityAim1'
    VARIABILITY_AIM1_PILOT = 'VariabilityAim1Pilot'
    VARIABILITY_SPONTANEOUS = 'VariabilitySpontaneous'
    VGT_102_01_064_10_CTY_GE = 'VGT_102-01-064-10 CTY Genetic Tools'
    VI_DEEP_DIVE_EM_VOLUME = 'VIDeepDiveEMVolume'
    VI_DEEPDLVE_DEEPSCOPE_PIE = 'VIDeepdlveDeepscopePiezo'
    VIP_AXONAL_V1_PHASE1 = 'VipAxonalV1Phase1'
    VIP_SOMATIC_V1_MESO = 'VIPSomaticV1Meso'
    VIP_SOMATIC_V1_PHASE1 = 'VipSomaticV1Phase1'
    VIP_SOMATIC_V1_PHASE2 = 'VipSomaticV1Phase2'
    VISUAL_BEHAVIOR = 'VisualBehavior'
    VISUAL_BEHAVIOR_DEVELOPME = 'VisualBehaviorDevelopment'
    VISUAL_BEHAVIOR_MULTISCOP = 'VisualBehaviorMultiscope'
    VISUAL_BEHAVIOR_MULTISCOP_2 = 'VisualBehaviorMultiscope4areasx2d'
    VISUAL_BEHAV_IOR_MULTISCO = 'VisualBehavIorMultiscopeTask1G'
    VISUAL_BEHAVIOR_TASK1_B = 'VisualBehaviorTask1B'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LASLimsproject from a JSON string"""
        return cls(json.loads(json_str))


