# coding: utf-8

"""
    aind-sharepoint-service

     ## aind-sharepoint-service  Service to pull data from Sharepoint.  

    The version of the OpenAPI document: 0.1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class NSB2023ProjectId(str, Enum):
    """
    Enum class for ProjectID.
    """

    """
    allowed enum values
    """
    N_101_03_001_10__COSTA_PG = '101-03-001-10 Costa PGA Lab Research (Direct)'
    N_102_01_009_10_CTY__MORP = '102-01-009-10 CTY Morphology'
    N_102_01_011_10_CTY__CONN = '102-01-011-10 CTY Connectome EM'
    N_102_01_012_10_CTY__CONN = '102-01-012-10 CTY Connectome Meso'
    N_102_01_016_10_CTY__TAXO = '102-01-016-10 CTY Taxonomy'
    N_102_01_029_20_CTY_BRAIN = '102-01-029-20 CTY BRAIN Cell-type Specific Enhancer Viruses'
    N_102_01_031_20_W4_CTY_EU = '102-01-031-20 W4 - CTY EU Horizon 2020 BRAINTIME'
    N_102_01_031_20_W5_CTY_EU = '102-01-031-20 W5 - CTY EU Horizon 2020 BRAINTIME'
    N_102_01_032_20_CTY__MOUS = '102-01-032-20 CTY Mouse Aging'
    N_102_01_036_20_CTY__DISS = '102-01-036-20 CTY Dissemination of 3-Photon Imaging'
    N_102_01_040_20_CTY_BRAIN = '102-01-040-20 CTY BRAIN UG3/UH3 Genetic Viral Tools'
    N_102_01_043_20_CTY__OPTI = '102-01-043-20 CTY Optical interrogation'
    N_102_01_044_10_CTY__GENO = '102-01-044-10 – CTY Genomics'
    N_102_01_045_10_CTY_IVSCC = '102-01-045-10 – CTY IVSCC'
    N_102_01_046_20_CTY__WEIL = '102-01-046-20 - CTY Weill Neuronal Heterogeneity'
    N_102_01_048_10_CTY__BARC = '102-01-048-10 CTY Barcoded Connectomics'
    N_102_01_049_20_CTY__OPIO = '102-01-049-20 - CTY Opioid Transcriptomics'
    N_102_01_054_20_CTY_PFAC = '102-01-054-20 CTY PFAC'
    N_102_01_055_20_CTY_EM__M = '102-01-055-20 CTY EM Motor Cortex'
    N_102_01_059_20_CTY_SCORC = '102-01-059-20 CTY SCORCH'
    N_102_01_060_20_CTY__BRAI = '102-01-060-20 CTY Brain Drain'
    N_102_01_061_20_CTY_BICAN = '102-01-061-20 CTY BICAN Human and NHP Atlas'
    N_102_01_062_20_CTY_BICAN = '102-01-062-20 CTY BICAN Mouse Developmental Atlas'
    N_102_01_064_10_CTY__GENE = '102-01-064-10 CTY Genetic Tools'
    N_102_01_066_20_AIBS_CTY = '102-01-066-20 AIBS CTY CONNECTS HIVE'
    N_102_01_066_20_AIND_CTY = '102-01-066-20 AIND CTY CONNECTS HIVE'
    N_102_01_068_20_CTY_CONNE = '102-01-068-20 CTY CONNECTS Patchlink'
    N_102_01_069_20__PRE__SPE = '102-01-069-20 Pre-Spend'
    N_102_01_070_20_CTY_CONNE = '102-01-070-20 CTY CONNECTS MouseConnects'
    N_102_01_078_20_AIBS__VOC = '102-01-078-20 AIBS Vocal Circuit'
    N_102_01_079_20_AIBS_CONN = '102-01-079-20 AIBS CONNECTS TransNeuronal Tools'
    N_102_01_999_10_CTY__PROG = '102-01-999-10 CTY Program Admin'
    N_102_02_004_10_BTV__VISU = '102-02-004-10 BTV Visual Behavior'
    N_102_02_012_20_BTV_BRAIN = '102-02-012-20 BTV BRAIN Viral Strategies'
    N_102_04_004_10_OTH__MERI = '102-04-004-10 OTH Meritorious Scholar Directed Research'
    N_102_04_006_20_OTH__MEAS = '102-04-006-20 OTH Measuring Consciousness Ph2 (TBD)'
    N_102_04_007_10_APLD__TAR = '102-04-007-10 APLD Targeted CNS Gene Therapy'
    N_102_04_010_10_CTY_SR_SL = '102-04-010-10 CTY SR: SLC6A1'
    N_102_04_011_10_CTY_SR_SY = '102-04-011-10 CTY SR: SYNGAP1'
    N_102_04_012_10_CTY_SR__F = '102-04-012-10 : CTY SR: Friedreich Ataxia'
    N_102_04_014_10_CTY__PARK = '102-04-014-10 CTY Parkinsons Disease'
    N_102_04_016_20_CTY__DRAV = '102-04-016-20 CTY Dravet Phase 3 WRF'
    N_102_88_001_10_XPG__CORE = '102-88-001-10 XPG Core Imaging: BARseq'
    N_102_88_003_10__ANIMAL = '102-88-003-10 Animal Care Team'
    N_102_88_005_10__TRANSGEN = '102-88-005-10 Transgenic Colony Management'
    N_102_88_008_10__LAB__ANI = '102-88-008-10 Lab Animal Services'
    N_106_01_001_10__IMMUNOLO = '106-01-001-10 Immunology (Direct)'
    N_110_01_001_10_PG__PROTE = '110-01-001-10 PG Proteomics'
    N_121_01_016_20_MSP_BRAIN = '121-01-016-20 MSP BRAIN OpenScope'
    N_121_01_018_20_MSP__EPHA = '121-01-018-20 MSP Ephaptic Cell Typ'
    N_121_01_023_20_MSP__TEMP = '121-01-023-20 MSP Templeton - Testing Theories of Consciousness'
    N_121_01_025_20_MSP_U01 = '121-01-025-20 MSP U01 Bridging Function, Connectivity, & Transcriptomics'
    N_121_01_026_20_MSP__TEMP = '121-01-026-20 MSP Templeton Measuring Distinct Conscious State'
    N_122_01_001_10_AIND__SCI = '122-01-001-10 AIND Scientific Activities'
    N_122_01_002_20__MOLECULA = '122-01-002-20 Molecular Core'
    N_122_01_002_20__PROJECT = '122-01-002-20 Project 1'
    N_122_01_002_20__PROJECT_2 = '122-01-002-20 Project 2'
    N_122_01_002_20__PROJECT_3 = '122-01-002-20 Project 4'
    N_122_01_004_20_AIND__BRA = '122-01-004-20 AIND Brainstem RF1'
    N_122_01_010_20_AIND__POO = '122-01-010-20 - AIND Poo Simons BTI'
    N_122_01_011_20_AIND__COH = '122-01-011-20 - AIND Cohen JHU R01 Transferred Subaward'
    N_122_01_012_20_AIND_RF1 = '122-01-012-20 - AIND RF1 Functions of locus coeruleus'
    N_122_01_013_10_MSP__SCIE = '122-01-013-10 MSP Scientific Activities'
    N_122_01_014_20_AIND__SIE = '122-01-014-20 - AIND Siegle U01 NPOpto'
    N_122_01_019_20_AIND_CZI = '122-01-019-20 AIND CZI Collaborative Pairs'
    N_122_01_020_20_AIBS__COH = '122-01-020-20 AIBS Cohen BICAN R01'
    N_122_01_020_20_AIND__COH = '122-01-020-20 AIND Cohen BICAN R01'
    N_122_01_022_20_AIND__POD = '122-01-022-20 AIND Podgorski UM1'
    N_123_01_003_20__MOTOR__C = '123-01-003-20 Motor Circuit Dysfunction in PD'
    N_124_01_001_10__BRAIN__C = '124-01-001-10 Brain & Consciousness (Direct)'
    N_125_01_001_10__SEA_HUB = '125-01-001-10 - SeaHub Scientific Activities (Direct)'
    AAV_PRODUCTION_102_88_004 = 'AAV production 102-88-004-10'
    R_D_102_88_004_10 = 'R&D 102-88-004-10'
    N_1020400910_CAPSID_SCREE = '102-04-009-10  Capsid Screening'
    N_1020400910_DRAVET_SYNDR = '102-04-009-10 Dravet Syndrome'
    CVS_PRODUCTION_1028800410 = 'CVS production 102-88-004-10'
    N_1210100110_MSP_DEEP_INT = '121-01-001-10 MSP Deep Interpolation'
    N_1210100210_MSP_BEHAVIOR = '121-01-002-10 MSP Behavioral Dynamics'
    N_1210100310_MSP_X_AREA_F = '121-01-003-10 MSP X - Area Functional Interactions'
    N_1210100410_MSP_VIP_REGU = '121-01-004-10 MSP VIP Regulated Stabilized Network'
    N_1210100510_MSP_SURROUND = '121-01-005-10 MSP Surround Structure Function'
    N_1210100610_MSP_AUTOMATI = '121-01-006-10 MSP Automatically Optimized Model'
    N_1210100710_MSP_TASK_TRA = '121-01-007-10 MSP Task Trained Networks'
    N_1210100810_MSP_NEURAL_E = '121-01-008-10 MSP Neural Ensemble Variability'
    N_1210100910_MSP_BIO_REAL = '121-01-009-10 MSP Bio-Realistic Modeling'
    N_1210101010_MSP_V1_OM_FI = '121-01-010-10 MSP V1 omFISH'
    N_1210101110_MSP_DYNAMIC = '121-01-011-10 MSP Dynamic Routing'
    N_1210101210_MSP_LEARNING = '121-01-012-10 MSP Learning mFISH'
    N_1210101420_MSP_BRAIN_MO = '121-01-014-20 MSP BRAIN Model Structure Function'
    N_1210101510_MSP_FALCONWO = '121-01-015-10 MSP Falconwood'
    N_1210199910_MSP_CROSS_PR = '121-01-999-10 MSP Cross Program 10YP'
    N_1210199910_MSP_CROS_001 = '121-01-999-10 MSP Cross Program  Scientific'
    N_1210101210_LEARNING_MFISH = '121-01-012-10 Learning mFISH'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NSB2023ProjectId from a JSON string"""
        return cls(json.loads(json_str))


