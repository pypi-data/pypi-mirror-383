image: &wiliot-ci-image
  name: 142654642153.dkr.ecr.us-east-1.amazonaws.com/aws-ci:latest
  aws:
    access-key: $AWS_ACCESS_KEY_ID
    secret-key: $AWS_SECRET_ACCESS_KEY

definitions:
  services:
    docker:
      memory: 3072
  step:
    - step: &build_unittests_image
        name: Building unittests image
        size: 2x
        <<: *wiliot-ci-image
        script:
          - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 142654642153.dkr.ecr.us-east-1.amazonaws.com
          - docker build -t 142654642153.dkr.ecr.us-east-1.amazonaws.com/pywiliot:unittests_$BITBUCKET_BUILD_NUMBER . -f unittests.dockerfile
          - docker push 142654642153.dkr.ecr.us-east-1.amazonaws.com/pywiliot:unittests_$BITBUCKET_BUILD_NUMBER
        services:
          - docker

pipelines:

  custom:
    update-major-version-number:
      - step: &major_version
          name: update major version number
          <<: *wiliot-ci-image
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm
            - pip3 install gitpython
            - apk add tree
            #print current version:
            - python3 wiliot_api/utils/get_version.py
            #Update major version by git tag:
            - version="`python3 wiliot_api/utils/get_version.py next_major`" && echo $version && git tag -a -m "[skip ci] build number $BITBUCKET_BUILD_NUMBER set the library major version to $version." $version  && git push origin $version
            #print new version
            - python3 wiliot_api/utils/get_version.py

    update-minor-version-number:
      - step: &minor_version
          name: update minor version number
          <<: *wiliot-ci-image
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm
            - pip3 install gitpython
            - apk add tree
            #print current version:
            - python3 wiliot_api/utils/get_version.py
            #Update minor version by git tag:
            - version="`python3 wiliot_api/utils/get_version.py next_minor`" && echo $version && git tag -a -m "[skip ci] build number $BITBUCKET_BUILD_NUMBER set the library minor version to $version." $version  && git push origin $version
            #print new version
            - python3 wiliot_api/utils/get_version.py

    update-patch-version-number:
      - step: &patch_version
          name: update patch version number
          <<: *wiliot-ci-image
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm
            - pip3 install gitpython
            - apk add tree
            #print current version:
            - python3 wiliot_api/utils/get_version.py
            #Update patch version by git tag:
            - version="`python3 wiliot_api/utils/get_version.py next_patch`" && echo $version && git tag -a -m "[skip ci] build number $BITBUCKET_BUILD_NUMBER set the library patch version to $version." $version  && git push origin $version
            #print new version
            - python3 wiliot_api/utils/get_version.py

    publish-full-version-into-new-codearfact:
      - step: &full_version_codeartifact
          name: Build and publish full version py-wilot into codeartifact
          image:
            name: 096303741971.dkr.ecr.us-east-2.amazonaws.com/ci:0.0.1-alpine
            aws:
              access-key: $CLOUD_AWS_ACCESS_KEY_ID
              secret-key: $CLOUD_AWS_SECRET_ACCESS_KEY
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm wheel twine
            - pip3 install gitpython
            # get updated version number:
            - version="`python3 wiliot_api/utils/get_version.py`"
            # update minor version:
            - python3 setup.py sdist bdist_wheel
            #update version.py with new minor version and build number (first step is done by setup as well- but we want to add build number as well):
            - echo "__version__ = '$version'" > wiliot_api/version.py
            - echo "build_number = '$BITBUCKET_BUILD_NUMBER'" >> wiliot_api/version.py
            - export AWS_ACCESS_KEY_ID=$CLOUD_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$CLOUD_AWS_SECRET_ACCESS_KEY
            - aws codeartifact login --region us-east-2 --tool twine --domain wiliot-cloud --domain-owner 096303741971 --repository pypi
            - twine upload --verbose --repository codeartifact dist/*

    publish-full-version-into-gcp:
      - step: &full_version_gcp
          name: Build and publish full version py-wilot into codeartifact
          image:
            name: python:3.13.5
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm wheel twine
            - pip3 install gitpython
            # get updated version number:
            - version="`python3 wiliot_api/utils/get_version.py`"
            # update minor version:
            - python3 setup.py sdist bdist_wheel
            #update version.py with new minor version and build number (first step is done by setup as well- but we want to add build number as well):
            - echo "__version__ = '$version'" > wiliot_api/version.py
            - echo "build_number = '$BITBUCKET_BUILD_NUMBER'" >> wiliot_api/version.py
            - apt-get update && apt-get install apt-transport-https ca-certificates gnupg curl -y
            - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            - apt-get update && apt-get install google-cloud-cli -y
            - pip3 install --upgrade twine keyring keyrings.google-artifactregistry-auth
            - mkdir -p $HOME/.config/pip/
            - 'echo -e "[distutils]\nindex-servers =\n    python\n\n[python]\nrepository: https://us-central1-python.pkg.dev/wiliot-infra/python/" | tee $HOME/.pypirc >/dev/null'
            - echo -e "[global]\nextra-index-url = https://us-central1-python.pkg.dev/wiliot-infra/python/simple/" | tee $HOME/.config/pip/pip.conf >/dev/null
            - echo -n $CLOUD_GCP_KEY | base64 -d > cloud_gcp_key.json
            - gcloud auth activate-service-account --key-file=${PWD}/cloud_gcp_key.json
            - python -m twine upload --repository-url https://us-central1-python.pkg.dev/wiliot-infra/python/ dist/*

    publish-slim-version-into-pypi:
      - step: &pypi_slim_version
          name: Build and publish slim version py-wilot into pypi
          <<: *wiliot-ci-image
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm
            - pip3 install gitpython
            - apk add tree
            #Get current version (was already updated by prev steps) before cleaning internal files:
            - version="`python3 wiliot_api/utils/get_version.py`"
            #update version.py with new patch version and build number:
            - echo "__version__ = '$version'" > wiliot_api/version.py
            - echo "build_number = '$BITBUCKET_BUILD_NUMBER'" >> wiliot_api/version.py
            # configure testpypi and pypi access
            - echo "[pypi]" > ~/.pypirc && echo "username = __token__" >> ~/.pypirc && echo "password = $PYPI_KEY" >> ~/.pypirc && echo "[testpypi]" >> ~/.pypirc && echo "username = __token__" >> ~/.pypirc && echo "password = $TEST_PYPI_KEY" >> ~/.pypirc
            # cleanup all the "internal" folders
            - tree && find ./ -name "extended" && find ./ -name "extended" -type d -prune -exec rm -rf {} \; && tree
            - tree && find ./ -name "internal" && find ./ -name "internal" -type d -prune -exec rm -rf {} \; && tree
            - python3 setup.py sdist bdist_wheel
            #Logging(?):
            - ls -al dist/ && ls -al build/
            # push into pypi
            - python3 -m twine upload --repository pypi dist/* #python3 -m twine upload --repository testpypi dist/*

    publish-slim-version-into-test-pypi:
      - step: &test_pypi_slim_version
          name: Build and publish slim version py-wilot into test-pypi
          <<: *wiliot-ci-image
          script:
            - pip3 install setuptools~=70.0.0
            - pip3 install setuptools_scm
            - pip3 install gitpython
            - apk add tree
            # configure testpypi and pypi access
            - echo "[testpypi]" >> ~/.pypirc && echo "username = __token__" >> ~/.pypirc && echo "password = $TEST_PYPI_KEY" >> ~/.pypirc
            # get updated version- before cleaning internal trees:
            - version="`python3 wiliot_api/utils/get_version.py`"
            #update version.py with new patch version and build number:
            - echo "__version__ = '$version'" > wiliot_api/version.py
            - echo "build_number = '$BITBUCKET_BUILD_NUMBER'" >> wiliot_api/version.py
            #Print version to log:
            - cat wiliot_api/version.py
            # cleanup all the "internal" folders
            - tree && find ./ -name "extended" && find ./ -name "extended" -type d -prune -exec rm -rf {} \; && tree
            - tree && find ./ -name "internal" && find ./ -name "internal" -type d -prune -exec rm -rf {} \; && tree
            - python3 setup.py sdist bdist_wheel
            - ls -al dist/ && ls -al build/
            # push into test-pypi
            - python3 -m twine upload --repository testpypi dist/*

    run-unit-tests:
      - step:
          name: Run unit tests
          <<: *wiliot-ci-image
          script:
            - apk add tree
            - pip3 install pytest
            - tree
            - cd wiliot_api
            - pytest wiliot_api/internal/tests

    Build unittests image:
      - step: *build_unittests_image
    
    COMBINED-PUBLISH-OFFICIAL-VERSION-WITH-PATCH:
      - step: *patch_version
      - step: *full_version_gcp
      - step: *full_version_codeartifact
      - step: *pypi_slim_version
    
    COMBINED-PUBLISH-OFFICIAL-VERSION:
      - step: *full_version_gcp
      - step: *full_version_codeartifact
      - step: *pypi_slim_version

options:
  docker: true