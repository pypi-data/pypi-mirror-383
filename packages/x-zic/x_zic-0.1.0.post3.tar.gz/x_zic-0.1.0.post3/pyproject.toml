# -----------------------------
# Build System (required)
# -----------------------------
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

# -----------------------------
# Project Metadata
# -----------------------------
[project]
name = "x-zic"
dynamic = ["version"]
requires-python = ">=3.8"
authors = [
    { name = "m.lotfi", email = "m.lotfi@email.com" },
]
maintainers = [
    { name = "m.lotfi", email = "m.lotfi@email.com" },
]
description = "Pythonic timezone compiler based on tzdb"
readme = { file = "README.md", content-type = "text/markdown" }
license = { text = "GPL version 3" }

classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Internationalization",
    "Topic :: Utilities",
]

# -----------------------------
# Runtime dependencies
# -----------------------------
dependencies = [
    "numpy>=1.18.0",
    "pandas>=1.0.0"
]

# -----------------------------
# Optional dependencies
# -----------------------------
[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.0",
    "tox>=3.0",
    "build>=0.10",
    "twine>=4.0",
    "setuptools_scm>=6.2",
    "setuptools>=45",
    "wheel",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]

test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0",
]

docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17.0",
]

lint = [
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "isort>=5.0",
]

all = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "isort>=5.0",
    "pre-commit>=2.0",
    "tox>=3.0",
    "build>=0.10",
    "twine>=4.0",
    "setuptools_scm>=6.2",
    "setuptools>=45",
    "wheel",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17.0",
]

# -----------------------------
# Project URLs
# -----------------------------
[project.urls]
Homepage = "https://github.com/mlotfic/x-zic"
Documentation = "https://github.com/mlotfic/x-zic#readme"
Repository = "https://github.com/mlotfic/x-zic.git"
"Bug Tracker" = "https://github.com/mlotfic/x-zic/issues"
Changelog = "https://github.com/mlotfic/x-zic/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/mlotfic/x-zic"
"Download" = "https://pypi.org/project/x-zic/"

# -----------------------------
# setuptools configuration
# -----------------------------
[tool.setuptools.packages.find]
where = ["src"]
include = ["x_zic*"]
exclude = ["tests*"]

# -----------------------------
# setuptools_scm configuration
# -----------------------------
[tool.setuptools_scm]
write_to = "src/x_zic/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"
fallback_version = "0.1.0.post2"



# -----------------------------
# Tool configurations
# -----------------------------

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["x_zic"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=x_zic",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "jdatetime.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true