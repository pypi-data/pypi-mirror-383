syntax = "proto3";

package filehub.taple;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/your-org/file-hub-server/rpc/gen/taple";

// Taple service for spreadsheet operations
service TapleService {
    // Table operations
    rpc CreateTable (CreateTableRequest) returns (TableResponse);
    rpc GetTable (GetTableRequest) returns (TableResponse);
    rpc UpdateTable (UpdateTableRequest) returns (TableResponse);
    rpc DeleteTable (DeleteTableRequest) returns (Empty);

    // Sheet operations
    rpc CreateSheet (CreateSheetRequest) returns (SheetResponse);
    rpc GetSheet (GetSheetRequest) returns (SheetResponse);
    rpc ListSheets (ListSheetsRequest) returns (ListSheetsResponse);
    rpc UpdateSheet (UpdateSheetRequest) returns (SheetResponse);
    rpc DeleteSheet (DeleteSheetRequest) returns (Empty);

    // Column operations
    rpc CreateColumn (CreateColumnRequest) returns (ColumnResponse);
    rpc UpdateColumn (UpdateColumnRequest) returns (ColumnResponse);
    rpc DeleteColumn (DeleteColumnRequest) returns (Empty);
    rpc BatchEditColumns (BatchEditColumnsRequest) returns (BatchEditColumnsResponse);

    // Row operations
    rpc CreateRow (CreateRowRequest) returns (RowResponse);
    rpc UpdateRow (UpdateRowRequest) returns (RowResponse);
    rpc DeleteRow (DeleteRowRequest) returns (Empty);
    rpc BatchEditRows (BatchEditRowsRequest) returns (BatchEditRowsResponse);

    // Cell operations
    rpc EditCell (EditCellRequest) returns (CellResponse);
    rpc DeleteCell (DeleteCellRequest) returns (Empty);
    rpc BatchEditCells (BatchEditCellsRequest) returns (BatchEditCellsResponse);

    // Mixed batch operations for column/row/cell
    rpc BatchEditSheet (BatchEditSheetRequest) returns (BatchEditSheetResponse);

    // Data retrieval
    rpc GetSheetVersion (GetSheetVersionRequest) returns (GetSheetVersionResponse);  // 仅获取版本号
    rpc GetSheetData (GetSheetDataRequest) returns (GetSheetDataResponse);  // 获取完整数据
    rpc GetColumnData (GetColumnDataRequest) returns (ColumnDataResponse);
    rpc GetRowData (GetRowDataRequest) returns (RowDataResponse);
    rpc GetCellData (GetCellDataRequest) returns (CellDataResponse);
    
    // Table data operations
    rpc CloneTableData (CloneTableDataRequest) returns (CloneTableDataResponse);  // 克隆表格数据到另一个组织
    rpc ExportTableData (ExportTableDataRequest) returns (ExportTableDataResponse);  // 导出表格数据到文件
    rpc ImportTableData (ImportTableDataRequest) returns (ImportTableDataResponse);  // 导入文件数据到表格
    
    // Table view operations
    rpc CreateTableView (CreateTableViewRequest) returns (TableViewResponse);  // 创建表格视图
    rpc BatchCreateTableViews (BatchCreateTableViewsRequest) returns (BatchCreateTableViewsResponse);  // 批量创建表格视图
    rpc GetTableView (GetTableViewRequest) returns (TableViewResponse);  // 获取表格视图
    rpc ListTableViews (ListTableViewsRequest) returns (ListTableViewsResponse);  // 列出表格视图
    rpc UpdateTableView (UpdateTableViewRequest) returns (TableViewResponse);  // 更新表格视图
    rpc DeleteTableView (DeleteTableViewRequest) returns (Empty);  // 删除表格视图
    rpc UpdateTableViewConfig (UpdateTableViewConfigRequest) returns (TableViewResponse);  // 更新视图配置
}

// Core data models
message Table {
    string id = 1;
    string file_id = 2;
    string org_id = 3;
    string user_id = 4;
    optional string name = 5;
    optional string description = 6;
    string created_by_role = 7;
    string created_by = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    optional google.protobuf.Timestamp deleted_at = 11;
}

message Sheet {
    string id = 1;
    string table_id = 2;
    string org_id = 3;
    string user_id = 4;
    string name = 5;
    optional string description = 6;
    int32 position = 7;
    int64 version = 8;
    string created_by_role = 9;
    string created_by = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    optional google.protobuf.Timestamp deleted_at = 13;
}

message Column {
    string id = 1;
    string sheet_id = 2;
    string org_id = 3;
    string user_id = 4;
    string column_key = 5;
    string name = 6;
    string column_type = 7;
    optional string description = 8;  // 列描述信息
    int32 position = 9;
    optional int32 width = 10;
    optional bool hidden = 11;
    optional google.protobuf.Struct properties = 12;
    int64 version = 13;
    string created_by_role = 14;
    string created_by = 15;
    google.protobuf.Timestamp created_at = 16;
    google.protobuf.Timestamp updated_at = 17;
    optional google.protobuf.Timestamp deleted_at = 18;
}

message Row {
    string id = 1;
    string sheet_id = 2;
    string org_id = 3;
    string user_id = 4;
    string row_key = 5;
    int32 position = 6;
    optional int32 height = 7;
    optional bool hidden = 8;
    int64 version = 9;
    string created_by_role = 10;
    string created_by = 11;
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
    optional google.protobuf.Timestamp deleted_at = 14;
}

message Cell {
    string id = 1;
    string sheet_id = 2;
    string column_id = 3;
    string row_id = 4;
    string org_id = 5;
    string user_id = 6;
    string column_key = 7;
    string row_key = 8;
    optional string raw_value = 9;
    optional string formatted_value = 10;
    optional string formula = 11;
    optional google.protobuf.Struct styles = 12;
    optional string data_type = 13;
    int64 version = 14;
    string created_by_role = 15;
    string created_by = 16;
    google.protobuf.Timestamp created_at = 17;
    google.protobuf.Timestamp updated_at = 18;
    optional google.protobuf.Timestamp deleted_at = 19;
}

message MergedCell {
    string id = 1;
    string sheet_id = 2;
    string org_id = 3;
    string user_id = 4;
    string start_column_id = 5;
    string end_column_id = 6;
    string start_row_id = 7;
    string end_row_id = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    optional google.protobuf.Timestamp deleted_at = 11;
}

message TableView {
    string id = 1;
    string table_id = 2;
    string sheet_id = 3;
    string org_id = 4;
    string user_id = 5;
    string file_id = 6;  // 关联文件ID
    
    // 视图配置字段
    google.protobuf.Struct filter_criteria = 7;  // 过滤条件（JSON）
    google.protobuf.Struct sort_criteria = 8;    // 排序条件（JSON）
    google.protobuf.Struct visible_columns = 9;  // 可见列配置 (key: column_id, value: bool)
    google.protobuf.Struct group_criteria = 10;   // 分组条件（JSON）
    
    // 创建者信息
    string created_by_role = 11;  // 创建者角色：user-用户；agent-智能体
    string created_by = 12;       // 创建者
    
    // 视图基本信息
    string view_name = 13;        // 视图名称
    string view_type = 14;        // 视图类型：table-表格视图; gantt-甘特图; calendar-日历视图; etc
    
    // 视图状态
    bool is_hidden = 15;          // 是否隐藏
    bool is_default = 16;         // 是否默认视图
    
    // 扩展配置
    google.protobuf.Struct config = 17;  // 视图配置（JSON）
    
    // 时间戳
    google.protobuf.Timestamp created_at = 18;
    google.protobuf.Timestamp updated_at = 19;
    optional google.protobuf.Timestamp deleted_at = 20;
}

// Request/Response messages

// Table operations
message CreateTableRequest {
    optional string folder_id = 1;  // Parent folder ID where the table file will be created (optional, defaults to "My Folder")
    string name = 2;                 // Table name (also used as filename)
    optional string description = 3;
    optional string idempotency_key = 4;  // 幂等性键
}

message GetTableRequest {
    optional string table_id = 1;
    optional string file_id = 2;  // Can get table by either table_id or file_id
}

message UpdateTableRequest {
    string table_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional string idempotency_key = 4;  // 幂等性键
}

message DeleteTableRequest {
    string table_id = 1;
    optional string idempotency_key = 2;  // 幂等性键
}

message TableResponse {
    Table table = 1;
}

// Sheet operations
message CreateSheetRequest {
    string table_id = 1;
    string name = 2;
    optional string description = 3;
    optional int32 position = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message GetSheetRequest {
    string sheet_id = 1;
}

message ListSheetsRequest {
    string table_id = 1;
}

message ListSheetsResponse {
    repeated Sheet sheets = 1;
}

message UpdateSheetRequest {
    string sheet_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional int32 position = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message DeleteSheetRequest {
    string sheet_id = 1;
    optional string idempotency_key = 2;  // 幂等性键
}

message SheetResponse {
    Sheet sheet = 1;
}

// Column operations
message CreateColumnRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string name = 4;
    optional string column_type = 5;
    optional string description = 6;  // 列描述信息
    optional int32 position = 7;
    optional int32 width = 8;
    optional google.protobuf.Struct properties = 9;
    optional string idempotency_key = 10;  // 幂等性键
}

message UpdateColumnRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string column_key = 4;
    optional string name = 5;
    optional string column_type = 6;
    optional string description = 7;  // 列描述信息
    optional int32 width = 8;
    optional bool hidden = 9;
    optional google.protobuf.Struct properties = 10;
    optional string idempotency_key = 11;  // 幂等性键
}

message DeleteColumnRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string column_key = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

// Batch edit operations support create/update/delete in one request
message BatchEditColumnsRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    repeated ColumnOperation operations = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message ColumnOperation {
    oneof operation {
        CreateColumnData create = 1;
        UpdateColumnData update = 2;
        DeleteColumnData delete = 3;
    }
}

message CreateColumnData {
    string name = 1;
    optional string column_type = 2;
    optional string description = 3;  // 列描述信息
    optional int32 position = 4;  // If not specified, append to end
    optional int32 width = 5;
    optional google.protobuf.Struct properties = 6;
}

message UpdateColumnData {
    string column_key = 1;
    optional string name = 2;
    optional string column_type = 3;
    optional string description = 4;  // 列描述信息
    optional int32 position = 5;  // Moving to new position
    optional int32 width = 6;
    optional bool hidden = 7;
    optional google.protobuf.Struct properties = 8;
}

message DeleteColumnData {
    string column_key = 1;
}

message ColumnResponse {
    Column column = 1;
    int64 current_version = 2;  // 返回当前版本号
    bool applied_immediately = 3;  // 是否立即应用
}

message BatchEditColumnsResponse {
    bool success = 1;
    int64 current_version = 2;  // 返回当前版本号
    repeated ColumnOperationResult results = 3;
    optional string error_message = 4;
    optional ConflictInfo conflict_info = 5;  // 冲突信息
}

message ColumnOperationResult {
    bool success = 1;
    optional Column column = 2;  // For create/update operations
    optional string error_message = 3;
    optional string operation_type = 4;  // "create", "update", "delete"
}

message ConflictInfo {
    bool has_conflict = 1;
    int64 server_version = 2;
    string conflict_type = 3;  // "version_mismatch", "concurrent_edit"
    repeated string conflicted_columns = 4;
    optional string resolution_suggestion = 5;
}


// Row operations
message CreateRowRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    optional int32 position = 4;
    optional int32 height = 5;
    optional bool hidden = 6;
    optional string idempotency_key = 7;  // 幂等性键
}

message UpdateRowRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string row_key = 4;
    optional int32 position = 5;
    optional int32 height = 6;
    optional bool hidden = 7;
    optional string idempotency_key = 8;  // 幂等性键
}

message DeleteRowRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string row_key = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message BatchEditRowsRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    repeated RowOperation operations = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message RowOperation {
    oneof operation {
        CreateRowData create = 1;
        UpdateRowData update = 2;
        DeleteRowData delete = 3;
    }
}

message CreateRowData {
    optional int32 position = 1;  // If not specified, append to end
    optional int32 height = 2;
}

message UpdateRowData {
    string row_key = 1;
    optional int32 position = 2;  // Moving to new position
    optional int32 height = 3;
    optional bool hidden = 4;
}

message DeleteRowData {
    string row_key = 1;
}

message RowResponse {
    Row row = 1;
    int64 current_version = 2;  // 返回当前版本号
    bool applied_immediately = 3;  // 是否立即应用
    bool success = 4;  // 操作是否成功
    optional string error_message = 5;  // 错误信息
    optional ConflictInfo conflict_info = 6;  // 冲突信息
}

message BatchEditRowsResponse {
    bool success = 1;
    int64 current_version = 2;  // 返回当前版本号
    repeated RowOperationResult results = 3;
    optional string error_message = 4;
    optional ConflictInfo conflict_info = 5;  // 冲突信息
}

message RowOperationResult {
    bool success = 1;
    optional Row row = 2;  // For create/update operations
    optional string error_message = 3;
    optional string operation_type = 4;  // "create", "update", "delete"
}

// Cell operations
message EditCellRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string column_key = 4;
    string row_key = 5;
    optional string raw_value = 6;
    optional string formatted_value = 7;
    optional string formula = 8;
    optional google.protobuf.Struct styles = 9;
    optional string data_type = 10;
    optional string idempotency_key = 11;  // 幂等性键
}

message DeleteCellRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    string column_key = 4;
    string row_key = 5;
    optional string idempotency_key = 6;  // 幂等性键
}

message BatchEditCellsRequest {
    string sheet_id = 1;
    int64 sheet_version = 2;  // 乐观锁版本号
    string client_id = 3;     // 客户端ID
    repeated CellOperation operations = 4;
    optional string idempotency_key = 5;  // 幂等性键
}

message CellOperation {
    oneof operation {
        EditCellData edit = 1;      // 编辑单元格（新增或更新）
        ClearCellData clear = 2;    // 清空单元格内容
        DeleteCellData delete = 3;  // 删除单元格记录
    }
}

message EditCellData {
    string column_key = 1;
    string row_key = 2;
    optional string raw_value = 3;
    optional string formatted_value = 4;
    optional string formula = 5;
    optional google.protobuf.Struct styles = 6;
    optional string data_type = 7;
}

message ClearCellData {
    string column_key = 1;
    string row_key = 2;
}

message DeleteCellData {
    string column_key = 1;
    string row_key = 2;
}

message CellResponse {
    Cell cell = 1;
    int64 current_version = 2;  // 返回当前版本号
    bool applied_immediately = 3;  // 是否立即应用
    bool success = 4;  // 操作是否成功
    optional string error_message = 5;  // 错误信息
    optional ConflictInfo conflict_info = 6;  // 冲突信息
}

message BatchEditCellsResponse {
    bool success = 1;
    int64 current_version = 2;  // 返回当前版本号
    repeated CellOperationResult results = 3;
    optional string error_message = 4;
    optional ConflictInfo conflict_info = 5;  // 冲突信息
}

message CellOperationResult {
    bool success = 1;
    optional Cell cell = 2;  // For update operations
    optional string error_message = 3;
    optional string operation_type = 4;  // "update", "clear"
}

// Mixed batch operations for column/row/cell
message BatchEditSheetRequest {
    string sheet_id = 1;
    repeated SheetOperation operations = 2;
    int64 sheet_version = 3;  // 乐观锁版本号
    string client_id = 4;     // 客户端ID
    optional string idempotency_key = 5;  // 幂等性键
}

message SheetOperation {
    oneof operation {
        ColumnOperation column_op = 1;
        RowOperation row_op = 2;
        CellOperation cell_op = 3;
    }
}

message BatchEditSheetResponse {
    bool success = 1;
    string batch_id = 2;
    int64 current_version = 3;
    repeated SheetOperationResult results = 4;
    optional string error_message = 5;
    optional ConflictInfo conflict_info = 6;  // 冲突信息
}

message SheetOperationResult {
    bool success = 1;
    optional string error_message = 2;
    optional string column_key = 3;  // 返回的列key（如果适用）
    optional string row_key = 4;     // 返回的行key（如果适用）
    optional string cell_key = 5;    // 返回的单元格key（如果适用）
    oneof result {
        ColumnOperationResult column_result = 6;
        RowOperationResult row_result = 7;
        CellOperationResult cell_result = 8;
    }
}

// Data retrieval operations
message GetColumnDataRequest {
    string sheet_id = 1;
    string column_key = 2;
}

message ColumnDataResponse {
    Column column = 1;
    repeated Cell cells = 2;
}

message GetRowDataRequest {
    string sheet_id = 1;
    string row_key = 2;
}

message RowDataResponse {
    Row row = 1;
    repeated Cell cells = 2;
}

message GetCellDataRequest {
    string sheet_id = 1;
    string column_key = 2;
    string row_key = 3;
}

message CellDataResponse {
    Cell cell = 1;
}

message GetSheetVersionRequest {
    string sheet_id = 1;
}

message GetSheetVersionResponse {
    string sheet_id = 1;
    int64 version = 2;  // 当前版本号
    Sheet metadata = 3;  // Sheet基本信息（不包含详细数据）
}

message GetSheetDataRequest {
    string sheet_id = 1;
    optional int64 version = 2;  // If provided, return changes since this version
}

message GetSheetDataResponse {
    string sheet_id = 1;
    int64 version = 2;  // 当前版本号
    Sheet metadata = 3;  // Sheet元数据
    repeated Column columns = 4;  // 所有列
    repeated Row rows = 5;  // 所有行
    repeated Cell cells = 6;  // 所有单元格
    google.protobuf.Timestamp last_updated = 7;  // 最后更新时间
}

// Empty response
message Empty {}

// Table clone operations
message CloneTableDataRequest {
    string source_table_id = 1;  // 源表格ID
    string target_org_id = 2;  // 目标组织ID
    string target_user_id = 3;  // 目标用户ID
    optional string target_folder_id = 4;  // 目标文件夹ID（可选）
    optional string new_table_name = 5;  // 新表格名称（可选，不提供则使用原名称+Copy）
    optional bool include_views = 6; // 是否包含视图数据，默认 false - 否
    optional string idempotency_key = 7;  // 幂等性键
}

message CloneTableDataResponse {
    bool success = 1;
    string new_table_id = 2;  // 新创建的表格ID
    string new_file_id = 3;  // 新创建的文件ID
    int32 sheets_cloned = 4;  // 克隆的工作表数量
    int32 cells_cloned = 5;  // 克隆的单元格数量
    string error_message = 6;  // 错误信息（如果失败）
    google.protobuf.Timestamp created_at = 7;  // 创建时间
}

// Table export operations
message ExportTableDataRequest {
    string table_id = 1;  // 要导出的表格ID
    ExportFormat format = 2;  // 导出格式
    repeated string sheet_ids = 3;  // 要导出的工作表ID列表（空则导出全部）
    ExportOptions options = 4;  // 导出选项
    optional string idempotency_key = 5;  // 幂等性键
}

enum ExportFormat {
    EXPORT_FORMAT_UNSPECIFIED = 0;
    EXPORT_FORMAT_EXCEL = 1;  // .xlsx
    EXPORT_FORMAT_CSV = 2;  // .csv (每个sheet一个文件，打包成zip)
    EXPORT_FORMAT_JSON = 3;  // .json
}

message ExportOptions {
    bool include_formulas = 1;  // 是否包含公式
    bool include_styles = 2;  // 是否包含样式（仅Excel）
    bool include_hidden_sheets = 3;  // 是否包含隐藏的工作表
    bool include_hidden_rows_cols = 4;  // 是否包含隐藏的行列
    string date_format = 5;  // 日期格式（默认：YYYY-MM-DD）
    string csv_delimiter = 6;  // CSV分隔符（默认：逗号）
    string csv_encoding = 7;  // CSV编码（默认：UTF-8）
}

message ExportTableDataResponse {
    bool success = 1;
    string export_id = 2;  // 导出记录ID
    string file_url = 3;  // GCS文件URL（内部使用）
    string download_url = 4;  // 下载链接（带签名的临时链接）
    int64 file_size = 5;  // 文件大小（字节）
    string file_name = 6;  // 导出的文件名
    ExportFormat format = 7;  // 导出格式
    int32 sheets_exported = 8;  // 导出的工作表数量
    string error_message = 9;  // 错误信息（如果失败）
    google.protobuf.Timestamp created_at = 10;  // 导出时间
    google.protobuf.Timestamp expires_at = 11;  // 下载链接过期时间
}

// Table import operations
message ImportTableDataRequest {
    string file_id = 1;  // 要导入的文件ID
    optional string target_table_id = 2;  // 目标表格ID（可选，不提供则创建新表格）
    ImportOptions options = 3;  // 导入选项
    optional string folder_id = 4;  // 文件夹ID（仅在创建新表格时使用）
    optional string table_name = 5;  // 表格名称（仅在创建新表格时使用）
    optional string idempotency_key = 6;  // 幂等性键
}

message ImportOptions {
    ImportMode import_mode = 1;  // 导入模式
    bool skip_first_row = 2;  // 是否跳过第一行（标题行）
    bool auto_detect_types = 3;  // 是否自动检测列类型
    bool clear_existing_data = 4;  // 是否清空现有数据（仅在导入到现有表格时）
    map<string, string> column_mapping = 5;  // 列映射（源列名 -> 目标列名）
    string date_format = 6;  // 日期格式（默认：YYYY-MM-DD）
    string csv_delimiter = 7;  // CSV分隔符（默认：逗号）
    string csv_encoding = 8;  // CSV编码（默认：UTF-8）
    int32 max_rows = 9;  // 最大导入行数限制（0表示无限制）
}

enum ImportMode {
    IMPORT_MODE_UNSPECIFIED = 0;
    IMPORT_MODE_APPEND = 1;  // 追加到现有数据
    IMPORT_MODE_REPLACE = 2;  // 替换现有数据
    IMPORT_MODE_MERGE = 3;  // 合并数据（基于主键）
}

message ImportTableDataResponse {
    bool success = 1;
    string table_id = 2;  // 导入的表格ID（新建或现有）
    string file_id = 3;  // 创建的文件ID（如果创建了新表格）
    int32 sheets_imported = 4;  // 导入的工作表数量
    int32 rows_imported = 5;  // 导入的行数
    int32 cells_imported = 6;  // 导入的单元格数量
    repeated ImportSheetResult sheet_results = 7;  // 每个工作表的导入结果
    string error_message = 8;  // 错误信息（如果失败）
    repeated ImportWarning warnings = 9;  // 警告信息
    google.protobuf.Timestamp created_at = 10;  // 导入时间
    int64 processing_time_ms = 11;  // 处理时间（毫秒）
}

message ImportSheetResult {
    string sheet_name = 1;  // 工作表名称
    string sheet_id = 2;  // 工作表ID
    int32 rows_imported = 3;  // 导入的行数
    int32 cells_imported = 4;  // 导入的单元格数量
    bool success = 5;  // 是否成功
    optional string error_message = 6;  // 错误信息
}

message ImportWarning {
    string type = 1;  // 警告类型（type_conversion, data_truncation, invalid_value等）
    string message = 2;  // 警告消息
    optional string sheet_name = 3;  // 相关工作表
    optional int32 row_number = 4;  // 相关行号
    optional string column_name = 5;  // 相关列名
}

// Table view operations
message CreateTableViewRequest {
    string sheet_id = 1;  // 所属工作表ID
    string view_name = 2;  // 视图名称
    string view_type = 3;  // 视图类型
    
    // 视图配置字段
    optional google.protobuf.Struct filter_criteria = 4;  // 过滤条件
    optional google.protobuf.Struct sort_criteria = 5;    // 排序条件
    optional google.protobuf.Struct visible_columns = 6;  // 可见列配置 (key: column_id, value: bool)
    optional google.protobuf.Struct group_criteria = 7;   // 分组条件
    
    // 视图状态
    bool is_hidden = 8;   // 是否隐藏
    bool is_default = 9;  // 是否默认视图
    
    // 扩展配置
    optional google.protobuf.Struct config = 10;  // 视图配置
}

message BatchCreateTableViewsRequest {
    string sheet_id = 1;  // 所属工作表ID（所有视图共享）
    repeated CreateTableViewData views = 2;  // 要创建的视图列表
}

message CreateTableViewData {
    string view_name = 1;  // 视图名称
    string view_type = 2;  // 视图类型
    
    // 视图配置字段
    optional google.protobuf.Struct filter_criteria = 3;  // 过滤条件
    optional google.protobuf.Struct sort_criteria = 4;    // 排序条件
    optional google.protobuf.Struct visible_columns = 5;  // 可见列配置 (key: column_id, value: bool)
    optional google.protobuf.Struct group_criteria = 6;   // 分组条件
    
    // 视图状态
    bool is_hidden = 7;   // 是否隐藏
    bool is_default = 8;  // 是否默认视图
    
    // 扩展配置
    optional google.protobuf.Struct config = 9;  // 视图配置
}

message BatchCreateTableViewsResponse {
    repeated BatchCreateTableViewResult results = 1;  // 批量创建结果
    int32 success_count = 2;  // 成功创建的数量
    int32 failed_count = 3;   // 失败的数量
}

message BatchCreateTableViewResult {
    bool success = 1;  // 是否成功
    optional TableView view = 2;  // 成功时返回创建的视图
    optional string error_message = 3;  // 失败时的错误信息
    optional string view_name = 4;  // 视图名称（用于标识是哪个视图）
}

message GetTableViewRequest {
    string view_id = 1;
}

message ListTableViewsRequest {
    oneof scope {
        string table_id = 1;  // 按表格ID查询
        string sheet_id = 2;  // 按工作表ID查询
    }
    optional string view_type = 3;  // 筛选视图类型
}

message UpdateTableViewRequest {
    string view_id = 1;
    optional string view_name = 2;  // 新名称
    
    // 视图配置字段（可选更新）
    optional google.protobuf.Struct filter_criteria = 3;  // 过滤条件
    optional google.protobuf.Struct sort_criteria = 4;    // 排序条件
    optional google.protobuf.Struct visible_columns = 5;  // 可见列配置 (key: column_id, value: bool)
    optional google.protobuf.Struct group_criteria = 6;   // 分组条件
    
    // 视图状态（可选更新）
    optional bool is_hidden = 7;   // 是否隐藏
    optional bool is_default = 8;  // 是否默认视图
    
    // 扩展配置
    optional google.protobuf.Struct config = 9;  // 视图配置
}

message UpdateTableViewConfigRequest {
    string view_id = 1;
    google.protobuf.Struct config = 2;  // 新配置
}

message DeleteTableViewRequest {
    string view_id = 1;
}

message TableViewResponse {
    TableView view = 1;
}

message ListTableViewsResponse {
    repeated TableView views = 1;
    int32 total_count = 2;  // 总数量
}