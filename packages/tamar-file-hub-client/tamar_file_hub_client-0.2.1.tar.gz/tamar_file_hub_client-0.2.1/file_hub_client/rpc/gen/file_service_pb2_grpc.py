# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import file_hub_client.rpc.gen.file_service_pb2 as file__service__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in file_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FileServiceStub(object):
    """========= 服务定义 =========

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.unary_unary(
                '/file.FileService/UploadFile',
                request_serializer=file__service__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.UploadFileResponse.FromString,
                _registered_method=True)
        self.GenerateUploadUrl = channel.unary_unary(
                '/file.FileService/GenerateUploadUrl',
                request_serializer=file__service__pb2.UploadUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.UploadUrlResponse.FromString,
                _registered_method=True)
        self.GenerateResumableUploadUrl = channel.unary_unary(
                '/file.FileService/GenerateResumableUploadUrl',
                request_serializer=file__service__pb2.UploadUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.UploadUrlResponse.FromString,
                _registered_method=True)
        self.ConfirmUploadCompleted = channel.unary_unary(
                '/file.FileService/ConfirmUploadCompleted',
                request_serializer=file__service__pb2.UploadCompletedRequest.SerializeToString,
                response_deserializer=file__service__pb2.Empty.FromString,
                _registered_method=True)
        self.GenerateDownloadUrl = channel.unary_unary(
                '/file.FileService/GenerateDownloadUrl',
                request_serializer=file__service__pb2.DownloadUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.DownloadUrlResponse.FromString,
                _registered_method=True)
        self.BatchGenerateDownloadUrl = channel.unary_unary(
                '/file.FileService/BatchGenerateDownloadUrl',
                request_serializer=file__service__pb2.BatchDownloadUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.BatchDownloadUrlResponse.FromString,
                _registered_method=True)
        self.GetGcsUrl = channel.unary_unary(
                '/file.FileService/GetGcsUrl',
                request_serializer=file__service__pb2.GetGcsUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.GetGcsUrlResponse.FromString,
                _registered_method=True)
        self.BatchGetGcsUrl = channel.unary_unary(
                '/file.FileService/BatchGetGcsUrl',
                request_serializer=file__service__pb2.BatchGetGcsUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.BatchGetGcsUrlResponse.FromString,
                _registered_method=True)
        self.GenerateShareLink = channel.unary_unary(
                '/file.FileService/GenerateShareLink',
                request_serializer=file__service__pb2.ShareLinkRequest.SerializeToString,
                response_deserializer=file__service__pb2.ShareLinkResponse.FromString,
                _registered_method=True)
        self.VisitFile = channel.unary_unary(
                '/file.FileService/VisitFile',
                request_serializer=file__service__pb2.FileVisitRequest.SerializeToString,
                response_deserializer=file__service__pb2.Empty.FromString,
                _registered_method=True)
        self.GetFile = channel.unary_unary(
                '/file.FileService/GetFile',
                request_serializer=file__service__pb2.GetFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.GetFileResponse.FromString,
                _registered_method=True)
        self.RenameFile = channel.unary_unary(
                '/file.FileService/RenameFile',
                request_serializer=file__service__pb2.RenameFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.File.FromString,
                _registered_method=True)
        self.DeleteFile = channel.unary_unary(
                '/file.FileService/DeleteFile',
                request_serializer=file__service__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=file__service__pb2.Empty.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/file.FileService/ListFiles',
                request_serializer=file__service__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=file__service__pb2.FileListResponse.FromString,
                _registered_method=True)
        self.GetCompressionStatus = channel.unary_unary(
                '/file.FileService/GetCompressionStatus',
                request_serializer=file__service__pb2.CompressionStatusRequest.SerializeToString,
                response_deserializer=file__service__pb2.CompressionStatusResponse.FromString,
                _registered_method=True)
        self.GetCompressedVariants = channel.unary_unary(
                '/file.FileService/GetCompressedVariants',
                request_serializer=file__service__pb2.GetVariantsRequest.SerializeToString,
                response_deserializer=file__service__pb2.GetVariantsResponse.FromString,
                _registered_method=True)
        self.TriggerRecompression = channel.unary_unary(
                '/file.FileService/TriggerRecompression',
                request_serializer=file__service__pb2.RecompressionRequest.SerializeToString,
                response_deserializer=file__service__pb2.RecompressionResponse.FromString,
                _registered_method=True)
        self.GenerateVariantDownloadUrl = channel.unary_unary(
                '/file.FileService/GenerateVariantDownloadUrl',
                request_serializer=file__service__pb2.VariantDownloadUrlRequest.SerializeToString,
                response_deserializer=file__service__pb2.VariantDownloadUrlResponse.FromString,
                _registered_method=True)
        self.BatchGetFileStatus = channel.unary_unary(
                '/file.FileService/BatchGetFileStatus',
                request_serializer=file__service__pb2.BatchFileStatusRequest.SerializeToString,
                response_deserializer=file__service__pb2.BatchFileStatusResponse.FromString,
                _registered_method=True)


class FileServiceServicer(object):
    """========= 服务定义 =========

    """

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateUploadUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateResumableUploadUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmUploadCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateDownloadUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGenerateDownloadUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGcsUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetGcsUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateShareLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VisitFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompressionStatus(self, request, context):
        """压缩服务相关API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompressedVariants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerRecompression(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateVariantDownloadUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetFileStatus(self, request, context):
        """批量文件状态查询API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=file__service__pb2.UploadFileRequest.FromString,
                    response_serializer=file__service__pb2.UploadFileResponse.SerializeToString,
            ),
            'GenerateUploadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateUploadUrl,
                    request_deserializer=file__service__pb2.UploadUrlRequest.FromString,
                    response_serializer=file__service__pb2.UploadUrlResponse.SerializeToString,
            ),
            'GenerateResumableUploadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateResumableUploadUrl,
                    request_deserializer=file__service__pb2.UploadUrlRequest.FromString,
                    response_serializer=file__service__pb2.UploadUrlResponse.SerializeToString,
            ),
            'ConfirmUploadCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmUploadCompleted,
                    request_deserializer=file__service__pb2.UploadCompletedRequest.FromString,
                    response_serializer=file__service__pb2.Empty.SerializeToString,
            ),
            'GenerateDownloadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateDownloadUrl,
                    request_deserializer=file__service__pb2.DownloadUrlRequest.FromString,
                    response_serializer=file__service__pb2.DownloadUrlResponse.SerializeToString,
            ),
            'BatchGenerateDownloadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGenerateDownloadUrl,
                    request_deserializer=file__service__pb2.BatchDownloadUrlRequest.FromString,
                    response_serializer=file__service__pb2.BatchDownloadUrlResponse.SerializeToString,
            ),
            'GetGcsUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGcsUrl,
                    request_deserializer=file__service__pb2.GetGcsUrlRequest.FromString,
                    response_serializer=file__service__pb2.GetGcsUrlResponse.SerializeToString,
            ),
            'BatchGetGcsUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetGcsUrl,
                    request_deserializer=file__service__pb2.BatchGetGcsUrlRequest.FromString,
                    response_serializer=file__service__pb2.BatchGetGcsUrlResponse.SerializeToString,
            ),
            'GenerateShareLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateShareLink,
                    request_deserializer=file__service__pb2.ShareLinkRequest.FromString,
                    response_serializer=file__service__pb2.ShareLinkResponse.SerializeToString,
            ),
            'VisitFile': grpc.unary_unary_rpc_method_handler(
                    servicer.VisitFile,
                    request_deserializer=file__service__pb2.FileVisitRequest.FromString,
                    response_serializer=file__service__pb2.Empty.SerializeToString,
            ),
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=file__service__pb2.GetFileRequest.FromString,
                    response_serializer=file__service__pb2.GetFileResponse.SerializeToString,
            ),
            'RenameFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameFile,
                    request_deserializer=file__service__pb2.RenameFileRequest.FromString,
                    response_serializer=file__service__pb2.File.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=file__service__pb2.DeleteFileRequest.FromString,
                    response_serializer=file__service__pb2.Empty.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=file__service__pb2.ListFilesRequest.FromString,
                    response_serializer=file__service__pb2.FileListResponse.SerializeToString,
            ),
            'GetCompressionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompressionStatus,
                    request_deserializer=file__service__pb2.CompressionStatusRequest.FromString,
                    response_serializer=file__service__pb2.CompressionStatusResponse.SerializeToString,
            ),
            'GetCompressedVariants': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompressedVariants,
                    request_deserializer=file__service__pb2.GetVariantsRequest.FromString,
                    response_serializer=file__service__pb2.GetVariantsResponse.SerializeToString,
            ),
            'TriggerRecompression': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerRecompression,
                    request_deserializer=file__service__pb2.RecompressionRequest.FromString,
                    response_serializer=file__service__pb2.RecompressionResponse.SerializeToString,
            ),
            'GenerateVariantDownloadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateVariantDownloadUrl,
                    request_deserializer=file__service__pb2.VariantDownloadUrlRequest.FromString,
                    response_serializer=file__service__pb2.VariantDownloadUrlResponse.SerializeToString,
            ),
            'BatchGetFileStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetFileStatus,
                    request_deserializer=file__service__pb2.BatchFileStatusRequest.FromString,
                    response_serializer=file__service__pb2.BatchFileStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('file.FileService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """========= 服务定义 =========

    """

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/UploadFile',
            file__service__pb2.UploadFileRequest.SerializeToString,
            file__service__pb2.UploadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateUploadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GenerateUploadUrl',
            file__service__pb2.UploadUrlRequest.SerializeToString,
            file__service__pb2.UploadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateResumableUploadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GenerateResumableUploadUrl',
            file__service__pb2.UploadUrlRequest.SerializeToString,
            file__service__pb2.UploadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmUploadCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/ConfirmUploadCompleted',
            file__service__pb2.UploadCompletedRequest.SerializeToString,
            file__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateDownloadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GenerateDownloadUrl',
            file__service__pb2.DownloadUrlRequest.SerializeToString,
            file__service__pb2.DownloadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGenerateDownloadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/BatchGenerateDownloadUrl',
            file__service__pb2.BatchDownloadUrlRequest.SerializeToString,
            file__service__pb2.BatchDownloadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGcsUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GetGcsUrl',
            file__service__pb2.GetGcsUrlRequest.SerializeToString,
            file__service__pb2.GetGcsUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetGcsUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/BatchGetGcsUrl',
            file__service__pb2.BatchGetGcsUrlRequest.SerializeToString,
            file__service__pb2.BatchGetGcsUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateShareLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GenerateShareLink',
            file__service__pb2.ShareLinkRequest.SerializeToString,
            file__service__pb2.ShareLinkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VisitFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/VisitFile',
            file__service__pb2.FileVisitRequest.SerializeToString,
            file__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GetFile',
            file__service__pb2.GetFileRequest.SerializeToString,
            file__service__pb2.GetFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RenameFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/RenameFile',
            file__service__pb2.RenameFileRequest.SerializeToString,
            file__service__pb2.File.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/DeleteFile',
            file__service__pb2.DeleteFileRequest.SerializeToString,
            file__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/ListFiles',
            file__service__pb2.ListFilesRequest.SerializeToString,
            file__service__pb2.FileListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompressionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GetCompressionStatus',
            file__service__pb2.CompressionStatusRequest.SerializeToString,
            file__service__pb2.CompressionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompressedVariants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GetCompressedVariants',
            file__service__pb2.GetVariantsRequest.SerializeToString,
            file__service__pb2.GetVariantsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerRecompression(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/TriggerRecompression',
            file__service__pb2.RecompressionRequest.SerializeToString,
            file__service__pb2.RecompressionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateVariantDownloadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/GenerateVariantDownloadUrl',
            file__service__pb2.VariantDownloadUrlRequest.SerializeToString,
            file__service__pb2.VariantDownloadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetFileStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file.FileService/BatchGetFileStatus',
            file__service__pb2.BatchFileStatusRequest.SerializeToString,
            file__service__pb2.BatchFileStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
