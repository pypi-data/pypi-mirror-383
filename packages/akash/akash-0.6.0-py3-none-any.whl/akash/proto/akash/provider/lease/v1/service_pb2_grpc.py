# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from akash.proto.akash.provider.lease.v1 import service_pb2 as akash_dot_provider_dot_lease_dot_v1_dot_service__pb2


class LeaseRPCStub(object):
    """LeaseRPC defines the RPC server for lease control
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendManifest = channel.unary_unary(
                '/akash.provider.lease.v1.LeaseRPC/SendManifest',
                request_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestRequest.SerializeToString,
                response_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestResponse.FromString,
                )
        self.ServiceStatus = channel.unary_unary(
                '/akash.provider.lease.v1.LeaseRPC/ServiceStatus',
                request_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.SerializeToString,
                response_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.FromString,
                )
        self.StreamServiceStatus = channel.unary_stream(
                '/akash.provider.lease.v1.LeaseRPC/StreamServiceStatus',
                request_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.SerializeToString,
                response_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.FromString,
                )
        self.ServiceLogs = channel.unary_unary(
                '/akash.provider.lease.v1.LeaseRPC/ServiceLogs',
                request_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.SerializeToString,
                response_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.FromString,
                )
        self.StreamServiceLogs = channel.unary_stream(
                '/akash.provider.lease.v1.LeaseRPC/StreamServiceLogs',
                request_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.SerializeToString,
                response_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.FromString,
                )


class LeaseRPCServicer(object):
    """LeaseRPC defines the RPC server for lease control
    """

    def SendManifest(self, request, context):
        """SendManifest sends manifest to the provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServiceStatus(self, request, context):
        """ServiceStatus
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamServiceStatus(self, request, context):
        """StreamServiceStatus
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServiceLogs(self, request, context):
        """ServiceLogs
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamServiceLogs(self, request, context):
        """StreamServiceLogs
        buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
        buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaseRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendManifest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendManifest,
                    request_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestRequest.FromString,
                    response_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestResponse.SerializeToString,
            ),
            'ServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceStatus,
                    request_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.FromString,
                    response_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.SerializeToString,
            ),
            'StreamServiceStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamServiceStatus,
                    request_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.FromString,
                    response_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.SerializeToString,
            ),
            'ServiceLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceLogs,
                    request_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.FromString,
                    response_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.SerializeToString,
            ),
            'StreamServiceLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamServiceLogs,
                    request_deserializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.FromString,
                    response_serializer=akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akash.provider.lease.v1.LeaseRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaseRPC(object):
    """LeaseRPC defines the RPC server for lease control
    """

    @staticmethod
    def SendManifest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akash.provider.lease.v1.LeaseRPC/SendManifest',
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestRequest.SerializeToString,
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.SendManifestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akash.provider.lease.v1.LeaseRPC/ServiceStatus',
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.SerializeToString,
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/akash.provider.lease.v1.LeaseRPC/StreamServiceStatus',
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusRequest.SerializeToString,
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServiceLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/akash.provider.lease.v1.LeaseRPC/ServiceLogs',
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.SerializeToString,
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamServiceLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/akash.provider.lease.v1.LeaseRPC/StreamServiceLogs',
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsRequest.SerializeToString,
            akash_dot_provider_dot_lease_dot_v1_dot_service__pb2.ServiceLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
