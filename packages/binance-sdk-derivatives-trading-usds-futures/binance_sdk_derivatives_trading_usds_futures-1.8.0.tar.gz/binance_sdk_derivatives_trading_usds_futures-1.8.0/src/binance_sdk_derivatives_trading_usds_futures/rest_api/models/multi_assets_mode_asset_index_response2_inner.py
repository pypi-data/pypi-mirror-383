# coding: utf-8

"""
Binance Derivatives Trading USDS Futures REST API

OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class MultiAssetsModeAssetIndexResponse2Inner(BaseModel):
    """
    MultiAssetsModeAssetIndexResponse2Inner
    """  # noqa: E501

    symbol: Optional[StrictStr] = None
    time: Optional[StrictInt] = None
    index: Optional[StrictStr] = None
    bid_buffer: Optional[StrictStr] = Field(default=None, alias="bidBuffer")
    ask_buffer: Optional[StrictStr] = Field(default=None, alias="askBuffer")
    bid_rate: Optional[StrictStr] = Field(default=None, alias="bidRate")
    ask_rate: Optional[StrictStr] = Field(default=None, alias="askRate")
    auto_exchange_bid_buffer: Optional[StrictStr] = Field(
        default=None, alias="autoExchangeBidBuffer"
    )
    auto_exchange_ask_buffer: Optional[StrictStr] = Field(
        default=None, alias="autoExchangeAskBuffer"
    )
    auto_exchange_bid_rate: Optional[StrictStr] = Field(
        default=None, alias="autoExchangeBidRate"
    )
    auto_exchange_ask_rate: Optional[StrictStr] = Field(
        default=None, alias="autoExchangeAskRate"
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "symbol",
        "time",
        "index",
        "bidBuffer",
        "askBuffer",
        "bidRate",
        "askRate",
        "autoExchangeBidBuffer",
        "autoExchangeAskBuffer",
        "autoExchangeBidRate",
        "autoExchangeAskRate",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultiAssetsModeAssetIndexResponse2Inner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MultiAssetsModeAssetIndexResponse2Inner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "symbol": obj.get("symbol"),
                "time": obj.get("time"),
                "index": obj.get("index"),
                "bidBuffer": obj.get("bidBuffer"),
                "askBuffer": obj.get("askBuffer"),
                "bidRate": obj.get("bidRate"),
                "askRate": obj.get("askRate"),
                "autoExchangeBidBuffer": obj.get("autoExchangeBidBuffer"),
                "autoExchangeAskBuffer": obj.get("autoExchangeAskBuffer"),
                "autoExchangeBidRate": obj.get("autoExchangeBidRate"),
                "autoExchangeAskRate": obj.get("autoExchangeAskRate"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
