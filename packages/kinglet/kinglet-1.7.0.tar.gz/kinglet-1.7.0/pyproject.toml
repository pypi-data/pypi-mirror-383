[build-system]
requires = ["setuptools>=70", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kinglet"
version = "1.7.0"
description = "A lightweight routing framework for Python Workers"
readme = "README.md"
authors = [
    {name = "Mitchell Currie", email = "mitchell@mitchins.dev"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: WSGI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["cloudflare", "workers", "python", "routing", "web", "framework", "asgi", "lightweight"]
requires-python = ">=3.12"
dependencies = [
]

[project.scripts]
kinglet-orm = "kinglet.orm_deploy:main"

[project.urls]
Homepage = "https://github.com/mitchins/Kinglet"
Repository = "https://github.com/mitchins/Kinglet"
"Bug Tracker" = "https://github.com/mitchins/Kinglet/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "black>=22.0",
    "mypy>=1.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "coverage>=6.0",
]

[tool.setuptools.packages.find]
include = ["kinglet*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--verbose", "--tb=short", "--strict-markers"]
markers = [
    "asyncio: marks tests as async",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "miniflare: marks tests requiring Miniflare/wrangler (will fail if not available)"
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[dependency-groups]
dev = [
    "diff-cover>=9.6.0",
    "pre-commit>=4.3.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.10",
    "httpx>=0.27.0",
]
