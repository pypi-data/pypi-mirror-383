[tool.hydev]
ignore_paths = [
    "*.egg-info",
    ".env",
    ".git",
    ".tox",
    ".venv",
    ".cache",
    # # Enabling these would require support for root-folder filtering in all tool configs.
    # "/build",
    # "/dist",
]

[tool.ruff]
# See also: “Known Deviations from Black”: https://docs.astral.sh/ruff/formatter/black/
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
    "F",  # pyflakes: imports checks, undefined, unused, etc.
    "E4",  # pycodestyle: imports stuff
    "E7",  # pycodestyle: multiple statements, comparisons
    "E9",  # pycodestyle: io / syntax error
    "W",  # pycodestyle: format warnings, escape sequence check
    # skipped: "C90",  # mccabe: complexity rules
    # skipped: "I",  # isort  # needs configuration
    # skipped: "N",  # pep8-naming: naming conventions
    # skipped: "D1",  # pydocstyle: “undocumented ...”
    "D2",  # pydocstyle: docstrings formatting
    # to consider: "UP",   # pyupgrade
    # skipped: "YTT",  # flake8-2020: `sys.version` stuff
    # skipped: "ANN",  # flake8-annotations: “missing type annotation”
    "ASYNC",  # flake8-async: blocking checks, trio checks
    # skipped: "S",  # flake8-bandit: sort-of-security checks
    # to consider: "BLE",  # flake8-blind-except: disallow `catch Exception` without logging them.
    "FBT",  # flake8-boolean-trap: disallow positional boolean args
    "B",  # flake8-bugbear: stuff
    "A",  # flake8-builtins: builtins shadowing
    # separated: "COM",  # flake8-commas: trailing commas checks
    # skipped: "COM812",  # “Trailing comma missing” - too disruptive
    "COM818",  # “Trailing comma on bare tuple prohibited”
    "COM819",  # disallow some unnecessary trailing commas
    # skipped: "CPY",  # flake8-copyright
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez  # forbid accidental naive datetimes  # contentious
    "T10",  # flake8-debugger: “Trace found”
    "DJ",  # flake8-django
    # to consider: "EM",  # flake8-errmsg: more readable tracebacks through msg variable
    "EXE",  # flake8-executable: +x <=> shebang
    # to consider: "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions: Enforce “pandas as pa”
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format: disallow eager string templating for logging (but allow f-string formatting below)
    "INP",  # flake8-no-pep420: forbid packages without `__init__.py`
    "PIE",  # flake8-pie: misc
    "T20",  # flake8-print: “print found”
    "PYI",  # flake8-pyi: pyi checks
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes: reducing quote escaping
    "RET",  # flake8-return: unnecessary return / stuff after return
    # to consider: "SLF",  # flake8-self: “Private member accessed”
    "SLOT",  # flake8-slots: subclasses of builtin should define slots
    "SIM",  # flake8-simplify
    # skipped: "TID",  # flake8-tidy-imports: ban some imports / some expensive imports as module-level.
    # to consider: "TID252",  # flake8-tidy-imports: Prefer absolute imports over relative imports from parent modules
    "TCH",  # flake8-type-checking: enforce `if TYPE_CHECKING` imports
    # skipped: "INT",  # enforce gettext
    # skipped: "ARG",  # unused arguments
    "PTH",  # flake8-use-pathlib: enforce use of `Path`
    # skipped: "TD",  # flake8-todos: enforce verbose `TODO`s
    # skipped: "FIX",  # flake8-fixme: disallow `TODO`s and such
    "FIX003",  # flake8-fixme: disallow “XXX” (use as critical unfinished marker)
    # to consider: "ERA",  # eradicate: disallow commented-out code
    "PD",  # pandas-vet: assorted best practices; but ignoring PD901 “generic variable name `df`”
    "PGH",  # pygrep-hooks: require specific noqa ignores, etc.
    "PLC",  # pylint conventions
    "PLE",  # pylint errors
    # separated: "PLR",  # “Too many” stuff, aside from others (see below)
    "PLR0124",  # “Name compared with itself”
    "PLR0133",  # “Two constants compared in a comparison”
    # preview: "PLR0202",  # “Class method defined without decorator”
    # preview: "PLR0203",  # “Static method defined without decorator”
    "PLR0206",  # “Cannot have defined parameters for properties”
    "PLR0402",  # disallow useless import rename
    # skipped: "PLR09",  # “Too many” stuff
    # deprecated: "PLR1701",  # merge isinstance calls
    # skipped: "PLR1702",  # “Too many nested blocks”
    "PLR1704",  # “Redefining argument with the local name”
    # deprecated: "PLR1706",  # disallow ternary and-or
    "PLR1711",  # useless return
    # skipped: "PLR1714",  # “repeated equality comparison”
    "PLR1722",  # disallow sys.exit aliases
    # skipped: "PLR1730",  # `min`/`max` instead of `if`  - less readable (but do use “cap()”)
    # preview: "PLR1733",  # “Unnecessary lookup of dictionary value by key”
    "PLR1736",  # “List index lookup in `enumerate()` loop”
    # skipped: "PLR2004",  # disallow constants in comparison
    "PLR2044",  # disallow empty comment
    "PLR5501",  # “Use `elif` instead of `else` then `if`”
    # skipped: "PLR6104",  # prefer `x += ...` over `x = x + ...`
    # preview: "PLR6201",  # prefer set literals for `x in const`
    # skipped: "PLR6301",  # “method ... could be a function, class method, or static method”
    "PLW",  # pylint warning
    # skipped: "TRY",  # tryceratops: exception handling antipatterns (enabled partially below)
    # deprecated: "TRY200",  # “Use `raise from`”
    "TRY201",  # Enforce reraise without explicit exception
    # skipped: "FLY",  # flynt: FLY002 prefer f-string instead of str.join
    "NPY",  # NumPy-specific rules: deprecations, etc.
    "AIR",  # Airflow: task variable name
    # skipped: "PERF",  # Perflint - requires careful per-project consideration
    # to consider: "PERF401", "PERF402", "PERF403",  # prefer comprehension over `for` loop
    "FURB",  # refurb: wide assortment of suggestions
    "RUF",  # Ruff-specific rules: wide assortment
]
unfixable = [
    "B",  # might be okay, needs checking.
]
ignore = [
    "ISC001",  # annoying warning message  # see also: https://github.com/astral-sh/ruff/issues/8272
    "B008",  # “Do not perform function call in argument defaults” really has a lot of false positives.
    "C408",  # allow `dict(a=b)` as well as `{"a": b}`
    "D203",  # `one-blank-line-before-class`
    "D205",  # docstring “1 blank line required between summary line and description”
    "D212",  # “Multi-line docstring summary should start at the first line” - a bit too ugly
    "G004",  # “Logging statement uses f-string” - laziness is not always worth the unreadability.
    # "PD901",  # “Avoid using the generic variable name df for DataFrames” - should be okay in ipynb, which should be checked.
]
external = [
    "E501",
    "FI18",
    "FS003",
    "T201",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.isort]
profile = "black"
default_section = "THIRDPARTY"
include_trailing_comma = true
use_parentheses = true
multi_line_output = 3

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120
show-source = true
statistics = false
enable-extensions = ["G", "FS003"]
ignore = [
    # If `flake8-future-import` is present, only require `from __future__ import annotations`.
    "FI10", "FI11", "FI12", "FI13", "FI14", "FI15", "FI16", "FI17", "FI58",
    # Prefer “line break before binary operator” over W504 “line break after binary operator”
    "W503",
    # Conflicts with `ruff`
    "E203",  # “E203 whitespace before ':'” on e.g. `lst[idx : idx + size]`
    # Leave the line length checking to ruff
    "E501",  # "line too long"
    # Disable "E704 multiple statements on one line (def)" because of `black`
    # https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
    "E704",
]
per-file-ignores = [
    "__init__.py:F401,F403",  # “imported but unused”, “'import *' used”
]

[tool.pytest.ini_options]
timeout = 5
xfail_strict = true
addopts = [
    "--blockage",
    "--blockage-http-whitelist=localhost,127.0.0.1",
    "--strict-markers",
    "--strict-config",
    "--dup-fixtures",
    # Output:
    "--tb=short",
    # Parallelism:
    # "-n auto",
    # "--boxed",
    # Coverage:,
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov=src",
    "--cov=tests",
]
env = [
    "RUN_ENV=tests",
]


[tool.mypy]
files = ["."]
# strictness:
check_untyped_defs = true
# messages configuration:
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
show_traceback = true

[[tool.mypy.overrides]]
module = [
    "aiosonic.*",
    "apscheduler.*",
    "async_cron.*",
    "coloredlogs.*",
    "decouple",
    "discord.*",
    "discord_argparse",
    "dramatiq.*",
    "gunicorn.*",
    "redis_lock",
    "sentry_dramatiq",
    "uvloop",
]
ignore_missing_imports = true
