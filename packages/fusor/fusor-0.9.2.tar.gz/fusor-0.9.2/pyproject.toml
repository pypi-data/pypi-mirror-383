[project]
name = "fusor"
authors = [
    {name = "Alex Wagner", email = "alex.wagner@nationwidechildrens.org"},
    {name = "Kori Kuzma", email = "kori.kuzma@nationwidechildrens.org"},
    {name = "James Stevenson", email = "james.stevenson@nationwidechildrens.org"},
    {name = "Katie Stahl", email = "kathryn.stahl@nationwidechildrens.org"},
    {name = "Jeremy Arbesfeld", email = "jeremy.arbesfeld@nationwidechildrens.org"}
]
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
description = "Computable object representation and validation for gene fusions"
license = {file = "LICENSE"}
dependencies = [
    "pydantic ==2.*",
    "ga4gh.vrs >=2.1.4,<3.0",
    "biocommons.seqrepo",
    "gene-normalizer ~=0.10.0",
    "civicpy ~=5.0",
    "cool-seq-tool ~=0.15.0"
]
dynamic=["version"]

[project.optional-dependencies]
tests = ["pytest", "pytest-cov", "pytest-asyncio"]
dev = [
    "pre-commit>=4.2.0",
    "ruff==0.12.1",
]
docs = [
    "sphinx>=7.2, <8.2.0",
    "sphinx-autodoc-typehints==1.22.0",
    "sphinx-autobuild==2021.3.14",
    "sphinx-copybutton==0.5.2",
    "sphinxext-opengraph==0.8.2",
    "furo>=2023.9.10",
    "sphinx-github-changelog==1.2.1"
]

[project.urls]
Homepage = "https://github.com/cancervariants/fusor"
Documentation = "https://github.com/cancervariants/fusor"
Changelog = "https://github.com/cancervariants/fusor/releases"
Source = "https://github.com/cancervariants/fusor"
"Bug Tracker" = "https://github.com/cancervariants/fusor/issues"

[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"fusor.examples" = ["*.json"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=src --cov-report term-missing"
testpaths = ["tests"]

[tool.coverage.run]
branch = true

[tool.ruff]
src = ["src"]
exclude = ["docs/source/conf.py", "notebooks/"]

[tool.ruff.lint]
select = [
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLOT",  # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PLC",  # https://docs.astral.sh/ruff/rules/#convention-c
    "PLE",  # https://docs.astral.sh/ruff/rules/#error-e_1
    "TRY",  # https://docs.astral.sh/ruff/rules/#tryceratops-try
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
fixable = [
    "I",
    "F401",
    "D",
    "UP",
    "ANN",
    "B",
    "C4",
    "LOG",
    "G",
    "PIE",
    "PT",
    "RSE",
    "SIM",
    "PLC",
    "PLE",
    "TRY",
    "PERF",
    "FURB",
    "RUF"
]
# ANN003 - missing-type-kwargs
# D203 - one-blank-line-before-class
# D205 - blank-line-after-summary
# D206 - indent-with-spaces*
# D213 - multi-line-summary-second-line
# D300 - triple-single-quotes*
# D400 - ends-in-period
# D415 - ends-in-punctuation
# E111 - indentation-with-invalid-multiple*
# E114 - indentation-with-invalid-multiple-comment*
# E117 - over-indented*
# E501 - line-too-long*
# W191 - tab-indentation*
# S321 - suspicious-ftp-lib-usage
# PLC0206 - dict-index-missing-items
# *ignored for compatibility with formatter
ignore = [
    "ANN003",
    "D203", "D205", "D206", "D213", "D300", "D400", "D415",
    "E111", "E114", "E117", "E501",
    "W191",
    "S321",
    "PLC0206",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# ANN201 - missing-return-type-undocumented-public-function
# D100 - undocumented-public-module
# D102 - undocumented-public-class
# D103 - undocumented-public-function
# S101 - assert
# B011 - assert-false
# N803 - invalid-argument-name
# N805 - invalid-first-argument-name-for-method
# N815 - mixed-case-variable-in-class-scope
# INP001 - implicit-namespace-package
# SLF001 - private-member-access
"tests/*" = [
    "ANN001",
    "ANN2",
    "D100",
    "D102",
    "D103",
    "S101",
    "B011",
    "INP001",
    "SLF001",
]
"src/fusor/models.py" = ["ANN201", "N803", "N805", "N815", "ANN001", "ANN2", "ANN102"]
"scripts/*" = ["INP001"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.format]
docstring-code-format = true
