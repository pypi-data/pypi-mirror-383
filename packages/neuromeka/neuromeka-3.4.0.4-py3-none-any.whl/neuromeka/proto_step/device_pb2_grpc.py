# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_msgs_pb2 as common__msgs__pb2
import device_msgs_pb2 as device__msgs__pb2


class DeviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetBrakes = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetBrakes',
                request_serializer=device__msgs__pb2.MotorList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetServoAll = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetServoAll',
                request_serializer=common__msgs__pb2.State.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetServo = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetServo',
                request_serializer=device__msgs__pb2.Servo.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetDI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetDI',
                request_serializer=device__msgs__pb2.DigitalList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetDO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetDO',
                request_serializer=device__msgs__pb2.DigitalList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetEndDI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndDI',
                request_serializer=device__msgs__pb2.EndtoolSignalList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetEndDO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndDO',
                request_serializer=device__msgs__pb2.EndtoolSignalList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetAI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetAI',
                request_serializer=device__msgs__pb2.AnalogList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetAO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetAO',
                request_serializer=device__msgs__pb2.AnalogList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetEndAI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndAI',
                request_serializer=device__msgs__pb2.AnalogList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetEndAO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndAO',
                request_serializer=device__msgs__pb2.AnalogList.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.ExecuteTool = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/ExecuteTool',
                request_serializer=common__msgs__pb2.Name.SerializeToString,
                response_deserializer=common__msgs__pb2.Empty.FromString,
                )
        self.SetEndRS485Rx = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndRS485Rx',
                request_serializer=common__msgs__pb2.EndtoolRS485Rx.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetEndRS485Rx = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndRS485Rx',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=common__msgs__pb2.EndtoolRS485Rx.FromString,
                )
        self.GetEndRS485Tx = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndRS485Tx',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=common__msgs__pb2.EndtoolRS485Tx.FromString,
                )
        self.SetEndLedDim = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetEndLedDim',
                request_serializer=device__msgs__pb2.EndLedDim.SerializeToString,
                response_deserializer=common__msgs__pb2.Empty.FromString,
                )
        self.GetDI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetDI',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.DigitalList.FromString,
                )
        self.GetDO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetDO',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.DigitalList.FromString,
                )
        self.GetEndDI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndDI',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.EndtoolSignalList.FromString,
                )
        self.GetEndDO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndDO',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.EndtoolSignalList.FromString,
                )
        self.GetAI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetAI',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.AnalogList.FromString,
                )
        self.GetAO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetAO',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.AnalogList.FromString,
                )
        self.GetEndAI = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndAI',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.AnalogList.FromString,
                )
        self.GetEndAO = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetEndAO',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.AnalogList.FromString,
                )
        self.GetDeviceInfo = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetDeviceInfo',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.DeviceInfo.FromString,
                )
        self.GetBrakeControlStyle = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetBrakeControlStyle',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.BrakeControlStyle.FromString,
                )
        self.SetSanderCommand = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetSanderCommand',
                request_serializer=device__msgs__pb2.SanderCommand.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetSanderCommand = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetSanderCommand',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.SanderCommand.FromString,
                )
        self.GetFTSensorData = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetFTSensorData',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.FTSensorData.FromString,
                )
        self.GetConveyor = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetConveyor',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.Conveyor.FromString,
                )
        self.SetConveyorName = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorName',
                request_serializer=common__msgs__pb2.Name.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorByName = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorByName',
                request_serializer=common__msgs__pb2.Name.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorEncoder = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorEncoder',
                request_serializer=device__msgs__pb2.Encoder.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorTrigger = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorTrigger',
                request_serializer=device__msgs__pb2.Trigger.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorOffset = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorOffset',
                request_serializer=common__msgs__pb2.Float.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorLockedJoint = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorLockedJoint',
                request_serializer=common__msgs__pb2.Int.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorToolLink = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorToolLink',
                request_serializer=common__msgs__pb2.Int.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorStartingPose = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorStartingPose',
                request_serializer=common__msgs__pb2.PosePair.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetConveyorTerminalPose = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetConveyorTerminalPose',
                request_serializer=common__msgs__pb2.PosePair.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetConveyorState = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetConveyorState',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.ConveyorState.FromString,
                )
        self.GetConveyorObjectDistances = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetConveyorObjectDistances',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.ConveyorObjectDistances.FromString,
                )
        self.GetLoadFactors = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetLoadFactors',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.GetLoadFactorsRes.FromString,
                )
        self.SetAutoMode = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetAutoMode',
                request_serializer=device__msgs__pb2.SetAutoModeReq.SerializeToString,
                response_deserializer=device__msgs__pb2.SetAutoModeRes.FromString,
                )
        self.CheckAutoMode = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/CheckAutoMode',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.CheckAutoModeRes.FromString,
                )
        self.CheckReducedMode = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/CheckReducedMode',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.CheckReducedModeRes.FromString,
                )
        self.GetSafetyFunctionState = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetSafetyFunctionState',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.SafetyFunctionState.FromString,
                )
        self.RequestSafetyFunction = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/RequestSafetyFunction',
                request_serializer=device__msgs__pb2.SafetyFunctionState.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetSafetyControlData = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetSafetyControlData',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.SafetyControlData.FromString,
                )
        self.CommitViolation = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/CommitViolation',
                request_serializer=device__msgs__pb2.ViolationRequest.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetGripperData = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetGripperData',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.GripperData.FromString,
                )
        self.SetGripperCommand = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/SetGripperCommand',
                request_serializer=device__msgs__pb2.GripperCommand.SerializeToString,
                response_deserializer=common__msgs__pb2.Empty.FromString,
                )
        self.AddPhotoneoCalibPoint = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/AddPhotoneoCalibPoint',
                request_serializer=device__msgs__pb2.AddPhotoneoCalibPointReq.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetPhotoneoDetection = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetPhotoneoDetection',
                request_serializer=device__msgs__pb2.VisionRequest.SerializeToString,
                response_deserializer=device__msgs__pb2.VisionResult.FromString,
                )
        self.GetPhotoneoRetrieval = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetPhotoneoRetrieval',
                request_serializer=device__msgs__pb2.VisionRequest.SerializeToString,
                response_deserializer=device__msgs__pb2.VisionResult.FromString,
                )
        self.GetRTTaskTimes = channel.unary_unary(
                '/Nrmk.IndyFramework.Device/GetRTTaskTimes',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=device__msgs__pb2.TaskTimes.FromString,
                )


class DeviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetBrakes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetServoAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetServo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndDO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndAO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndRS485Rx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndRS485Rx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndRS485Tx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndLedDim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndDO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEndAO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBrakeControlStyle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSanderCommand(self, request, context):
        """///////////// Sander ////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSanderCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFTSensorData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConveyor(self, request, context):
        """///////////// Conveyor ///////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorEncoder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorLockedJoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorToolLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorStartingPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConveyorTerminalPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConveyorState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConveyorObjectDistances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoadFactors(self, request, context):
        """///////////// Safety ////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAutoMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAutoMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckReducedMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSafetyFunctionState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestSafetyFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSafetyControlData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitViolation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGripperData(self, request, context):
        """/////////////485Gripper//////////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGripperCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPhotoneoCalibPoint(self, request, context):
        """/////////////Photoneo Calibration//////////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPhotoneoDetection(self, request, context):
        """/////////////Photoneo Get Detection Retrieval//////////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPhotoneoRetrieval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRTTaskTimes(self, request, context):
        """/////////////System Status//////////////////////
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetBrakes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBrakes,
                    request_deserializer=device__msgs__pb2.MotorList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetServoAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SetServoAll,
                    request_deserializer=common__msgs__pb2.State.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetServo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetServo,
                    request_deserializer=device__msgs__pb2.Servo.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetDI': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDI,
                    request_deserializer=device__msgs__pb2.DigitalList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetDO': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDO,
                    request_deserializer=device__msgs__pb2.DigitalList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetEndDI': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndDI,
                    request_deserializer=device__msgs__pb2.EndtoolSignalList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetEndDO': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndDO,
                    request_deserializer=device__msgs__pb2.EndtoolSignalList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetAI': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAI,
                    request_deserializer=device__msgs__pb2.AnalogList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetAO': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAO,
                    request_deserializer=device__msgs__pb2.AnalogList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetEndAI': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndAI,
                    request_deserializer=device__msgs__pb2.AnalogList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetEndAO': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndAO,
                    request_deserializer=device__msgs__pb2.AnalogList.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'ExecuteTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTool,
                    request_deserializer=common__msgs__pb2.Name.FromString,
                    response_serializer=common__msgs__pb2.Empty.SerializeToString,
            ),
            'SetEndRS485Rx': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndRS485Rx,
                    request_deserializer=common__msgs__pb2.EndtoolRS485Rx.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetEndRS485Rx': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndRS485Rx,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=common__msgs__pb2.EndtoolRS485Rx.SerializeToString,
            ),
            'GetEndRS485Tx': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndRS485Tx,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=common__msgs__pb2.EndtoolRS485Tx.SerializeToString,
            ),
            'SetEndLedDim': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndLedDim,
                    request_deserializer=device__msgs__pb2.EndLedDim.FromString,
                    response_serializer=common__msgs__pb2.Empty.SerializeToString,
            ),
            'GetDI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDI,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.DigitalList.SerializeToString,
            ),
            'GetDO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDO,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.DigitalList.SerializeToString,
            ),
            'GetEndDI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndDI,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.EndtoolSignalList.SerializeToString,
            ),
            'GetEndDO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndDO,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.EndtoolSignalList.SerializeToString,
            ),
            'GetAI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAI,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.AnalogList.SerializeToString,
            ),
            'GetAO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAO,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.AnalogList.SerializeToString,
            ),
            'GetEndAI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndAI,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.AnalogList.SerializeToString,
            ),
            'GetEndAO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEndAO,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.AnalogList.SerializeToString,
            ),
            'GetDeviceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceInfo,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.DeviceInfo.SerializeToString,
            ),
            'GetBrakeControlStyle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBrakeControlStyle,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.BrakeControlStyle.SerializeToString,
            ),
            'SetSanderCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSanderCommand,
                    request_deserializer=device__msgs__pb2.SanderCommand.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetSanderCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSanderCommand,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.SanderCommand.SerializeToString,
            ),
            'GetFTSensorData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFTSensorData,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.FTSensorData.SerializeToString,
            ),
            'GetConveyor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConveyor,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.Conveyor.SerializeToString,
            ),
            'SetConveyorName': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorName,
                    request_deserializer=common__msgs__pb2.Name.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorByName': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorByName,
                    request_deserializer=common__msgs__pb2.Name.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorEncoder': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorEncoder,
                    request_deserializer=device__msgs__pb2.Encoder.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorTrigger,
                    request_deserializer=device__msgs__pb2.Trigger.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorOffset,
                    request_deserializer=common__msgs__pb2.Float.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorLockedJoint': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorLockedJoint,
                    request_deserializer=common__msgs__pb2.Int.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorToolLink': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorToolLink,
                    request_deserializer=common__msgs__pb2.Int.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorStartingPose': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorStartingPose,
                    request_deserializer=common__msgs__pb2.PosePair.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetConveyorTerminalPose': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConveyorTerminalPose,
                    request_deserializer=common__msgs__pb2.PosePair.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetConveyorState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConveyorState,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.ConveyorState.SerializeToString,
            ),
            'GetConveyorObjectDistances': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConveyorObjectDistances,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.ConveyorObjectDistances.SerializeToString,
            ),
            'GetLoadFactors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoadFactors,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.GetLoadFactorsRes.SerializeToString,
            ),
            'SetAutoMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAutoMode,
                    request_deserializer=device__msgs__pb2.SetAutoModeReq.FromString,
                    response_serializer=device__msgs__pb2.SetAutoModeRes.SerializeToString,
            ),
            'CheckAutoMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAutoMode,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.CheckAutoModeRes.SerializeToString,
            ),
            'CheckReducedMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckReducedMode,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.CheckReducedModeRes.SerializeToString,
            ),
            'GetSafetyFunctionState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSafetyFunctionState,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.SafetyFunctionState.SerializeToString,
            ),
            'RequestSafetyFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestSafetyFunction,
                    request_deserializer=device__msgs__pb2.SafetyFunctionState.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetSafetyControlData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSafetyControlData,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.SafetyControlData.SerializeToString,
            ),
            'CommitViolation': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitViolation,
                    request_deserializer=device__msgs__pb2.ViolationRequest.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetGripperData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGripperData,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.GripperData.SerializeToString,
            ),
            'SetGripperCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGripperCommand,
                    request_deserializer=device__msgs__pb2.GripperCommand.FromString,
                    response_serializer=common__msgs__pb2.Empty.SerializeToString,
            ),
            'AddPhotoneoCalibPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPhotoneoCalibPoint,
                    request_deserializer=device__msgs__pb2.AddPhotoneoCalibPointReq.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetPhotoneoDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPhotoneoDetection,
                    request_deserializer=device__msgs__pb2.VisionRequest.FromString,
                    response_serializer=device__msgs__pb2.VisionResult.SerializeToString,
            ),
            'GetPhotoneoRetrieval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPhotoneoRetrieval,
                    request_deserializer=device__msgs__pb2.VisionRequest.FromString,
                    response_serializer=device__msgs__pb2.VisionResult.SerializeToString,
            ),
            'GetRTTaskTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRTTaskTimes,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=device__msgs__pb2.TaskTimes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Nrmk.IndyFramework.Device', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Device(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetBrakes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetBrakes',
            device__msgs__pb2.MotorList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetServoAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetServoAll',
            common__msgs__pb2.State.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetServo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetServo',
            device__msgs__pb2.Servo.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetDI',
            device__msgs__pb2.DigitalList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetDO',
            device__msgs__pb2.DigitalList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndDI',
            device__msgs__pb2.EndtoolSignalList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndDO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndDO',
            device__msgs__pb2.EndtoolSignalList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetAI',
            device__msgs__pb2.AnalogList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetAO',
            device__msgs__pb2.AnalogList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndAI',
            device__msgs__pb2.AnalogList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndAO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndAO',
            device__msgs__pb2.AnalogList.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/ExecuteTool',
            common__msgs__pb2.Name.SerializeToString,
            common__msgs__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndRS485Rx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndRS485Rx',
            common__msgs__pb2.EndtoolRS485Rx.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndRS485Rx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndRS485Rx',
            common__msgs__pb2.Empty.SerializeToString,
            common__msgs__pb2.EndtoolRS485Rx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndRS485Tx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndRS485Tx',
            common__msgs__pb2.Empty.SerializeToString,
            common__msgs__pb2.EndtoolRS485Tx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndLedDim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetEndLedDim',
            device__msgs__pb2.EndLedDim.SerializeToString,
            common__msgs__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetDI',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.DigitalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetDO',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.DigitalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndDI',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.EndtoolSignalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndDO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndDO',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.EndtoolSignalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetAI',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.AnalogList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetAO',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.AnalogList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndAI',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.AnalogList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEndAO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetEndAO',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.AnalogList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeviceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetDeviceInfo',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.DeviceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBrakeControlStyle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetBrakeControlStyle',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.BrakeControlStyle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSanderCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetSanderCommand',
            device__msgs__pb2.SanderCommand.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSanderCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetSanderCommand',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.SanderCommand.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFTSensorData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetFTSensorData',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.FTSensorData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConveyor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetConveyor',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.Conveyor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorName',
            common__msgs__pb2.Name.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorByName',
            common__msgs__pb2.Name.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorEncoder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorEncoder',
            device__msgs__pb2.Encoder.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorTrigger',
            device__msgs__pb2.Trigger.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorOffset',
            common__msgs__pb2.Float.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorLockedJoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorLockedJoint',
            common__msgs__pb2.Int.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorToolLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorToolLink',
            common__msgs__pb2.Int.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorStartingPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorStartingPose',
            common__msgs__pb2.PosePair.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConveyorTerminalPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetConveyorTerminalPose',
            common__msgs__pb2.PosePair.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConveyorState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetConveyorState',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.ConveyorState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConveyorObjectDistances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetConveyorObjectDistances',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.ConveyorObjectDistances.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoadFactors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetLoadFactors',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.GetLoadFactorsRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAutoMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetAutoMode',
            device__msgs__pb2.SetAutoModeReq.SerializeToString,
            device__msgs__pb2.SetAutoModeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckAutoMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/CheckAutoMode',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.CheckAutoModeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckReducedMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/CheckReducedMode',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.CheckReducedModeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSafetyFunctionState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetSafetyFunctionState',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.SafetyFunctionState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestSafetyFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/RequestSafetyFunction',
            device__msgs__pb2.SafetyFunctionState.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSafetyControlData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetSafetyControlData',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.SafetyControlData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitViolation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/CommitViolation',
            device__msgs__pb2.ViolationRequest.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGripperData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetGripperData',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.GripperData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGripperCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/SetGripperCommand',
            device__msgs__pb2.GripperCommand.SerializeToString,
            common__msgs__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPhotoneoCalibPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/AddPhotoneoCalibPoint',
            device__msgs__pb2.AddPhotoneoCalibPointReq.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPhotoneoDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetPhotoneoDetection',
            device__msgs__pb2.VisionRequest.SerializeToString,
            device__msgs__pb2.VisionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPhotoneoRetrieval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetPhotoneoRetrieval',
            device__msgs__pb2.VisionRequest.SerializeToString,
            device__msgs__pb2.VisionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRTTaskTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.Device/GetRTTaskTimes',
            common__msgs__pb2.Empty.SerializeToString,
            device__msgs__pb2.TaskTimes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
