[project]
name = "astToolkit"
version = "0.9.0"
description = "A powerfully composable, type-safe toolkit for Python abstract syntax tree (AST) manipulation, analysis, transformation, and code generation with a layered architecture designed for building sophisticated code processing assembly-lines."
readme = "README.md"
requires-python = ">=3.12"
license = { 'text' = "CC-BY-NC-4.0" }
authors = [{ name = "Hunter Hogan", email = "HunterHogan@pm.me" }]
keywords = [
  "abstract syntax tree",
  "ast",
  "ast-analysis",
  "ast-manipulation",
  "ast-predicate",
  "ast-traversal",
  "ast-visitor",
  "code generation",
  "code transformation",
  "code-analysis",
  "code-refactoring",
  "composable-apis",
  "function-inlining",
  "metaprogramming",
  "python-ast",
  "source-code-generation",
  "static-analysis",
  "type-safe",
  "typed-ast",
  "visitor-pattern",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
urls = { Donate = "https://www.patreon.com/integrated", Homepage = "https://github.com/hunterhogan/astToolkit", Issues = "https://github.com/hunterhogan/astToolkit/issues", Repository = "https://github.com/hunterhogan/astToolkit.git" }
dependencies = [
  "hunterMakesPy>=0.3.0",
  "typing_extensions>=4.10.0",
]
optional-dependencies = { development = [
  "setuptools-scm",
], testing = [
  "pytest-cov",
  "pytest-xdist",
  "pytest",
] }

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.coverage]
report = { exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":",
], ignore_errors = false }
run = { branch = true, concurrency = [
  "multiprocessing",
], data_file = "tests/coverage/.coverage", omit = [
  "tests/*",
], parallel = true, source = [
  ".",
] }
xml = { output = "tests/coverage/coverage.xml" }

[tool.pytest.ini_options]
addopts = ["--color=auto"]
log_auto_indent = true
testpaths = ["tests"]

[tool.setuptools]
package-data = { "*" = ["py.typed"] }
packages = { find = {  } }

[tool.updateCitation]
filenameCitationDOTcff = "CITATION.cff"
pathFilenameCitationSSOT = "citations/CITATION.cff"
