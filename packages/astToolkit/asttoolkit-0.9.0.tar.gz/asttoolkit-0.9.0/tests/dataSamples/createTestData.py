
from astToolkit import dump, Make
from collections.abc import Callable
from itertools import chain
import ast

listMakeMaximallyEmpty = [
	"Make.Add()",
	"Make.alias(name='Make_alias', asName=None)",
	"Make.And()",
	"Make.AnnAssign(target=Make.Name(id='Make_AnnAssign_target', context=Make.Store()), annotation=Make.Name(id='Make_AnnAssign_annotation', context=Make.Load()), value=None)",
	"Make.arg(Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo='Make_arg', annotation=None)",
	"Make.arguments(posonlyargs=[], list_arg=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])",
	"Make.Assert(test=Make.Name(id='Make_Assert_test', context=Make.Load()), msg=None)",
	"Make.Assign(targets=[Make.Name(id='Make_Assign_targets', context=Make.Store())], value=Make.Name(id='Make_Assign_value', context=Make.Load()))",
	"Make.AsyncFor(target=Make.Name(id='Make_AsyncFor_target', context=Make.Store()), iter=Make.Name(id='Make_AsyncFor_iter', context=Make.Load()), body=[Make.Pass()], orElse=[])",
	"Make.AsyncFunctionDef(name='Make_AsyncFunctionDef', argumentSpecification=Make.arguments(posonlyargs=[], list_arg=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Make.Pass()], decorator_list=[], returns=None, type_params=[])",
	"Make.AsyncWith(items=[Make.withitem(context_expr=Make.Name(id='Make_AsyncWith_context_expr', context=Make.Load()), optional_vars=None)], body=[Make.Pass()])",
	"Make.Attribute(Make.Name(id='Make_Attribute_value', context=Make.Load()), 'Make_Attribute_attr', context=Make.Load())",
	"Make.AugAssign(target=Make.Name(id='Make_AugAssign_target', context=Make.Store()), op=Make.Add(), value=Make.Name(id='Make_AugAssign_value', context=Make.Load()))",
	"Make.Await(value=Make.Name(id='Make_Await_value', context=Make.Load()))",
	"Make.BinOp(left=Make.Name(id='Make_BinOp_left', context=Make.Load()), op=Make.BitAnd(), right=Make.Name(id='Make_BinOp_right', context=Make.Load()))",
	"Make.BitAnd()",
	"Make.BitOr()",
	"Make.BitXor()",
	"Make.boolop()",
	"Make.BoolOp(op=Make.And(), values=[Make.Name(id='Make_BoolOp_values', context=Make.Load())])",
	"Make.Break()",
	"Make.Call(callee=Make.Name(id='Make_Call_callee', context=Make.Load()), listParameters=[], list_keyword=[])",
	"Make.ClassDef(name='Make_ClassDef', bases=[], list_keyword=[], body=[], decorator_list=[], type_params=[])",
	"Make.cmpop()",
	"Make.Compare(left=Make.Name(id='Make_Compare_left', context=Make.Load()), ops=[Make.Eq()], comparators=[Make.Name(id='Make_Compare_comparators', context=Make.Load())])",
	"Make.comprehension(target=Make.Name(id='Make_comprehension_target', context=Make.Store()), iter=Make.Name(id='Make_comprehension_iter', context=Make.Load()), ifs=[Make.Name(id='Make_comprehension_ifs', context=Make.Load())], is_async=0)",
	"Make.Constant(value='Make_Constant', kind=None)",
	"Make.Continue()",
	"Make.Del()",
	"Make.Delete(targets=[Make.Name(id='Make_Delete_targets', context=Make.Del())])",
	"Make.Dict(keys=[None], values=[])",
	"Make.DictComp(key=Make.Name(id='Make_DictComp_key', context=Make.Load()), value=Make.Name(id='Make_DictComp_value', context=Make.Load()), generators=[Make.comprehension(target=Make.Name(id='Make_DictComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_DictComp_generators_iter', context=Make.Load()), ifs=[Make.Name(id='Make_DictComp_generators_ifs', context=Make.Load())], is_async=0)])",
	"Make.Div()",
	"Make.Eq()",
	"Make.excepthandler()",
	"Make.ExceptHandler(type=None, name=None, body=[])",
	"Make.expr_context()",
	"Make.expr()",
	"Make.Expr(value=Make.Name(id='Make_Expr_value', context=Make.Load()))",
	"Make.Expression(body=Make.Name(id='Make_Expression_body', context=Make.Load()))",
	"Make.FloorDiv()",
	"Make.For(target=Make.Name(id='Make_For_target', context=Make.Store()), iter=Make.Name(id='Make_For_iter', context=Make.Load()), body=[Make.Pass()], orElse=[])",
	"Make.FormattedValue(value=Make.Name(id='Make_FormattedValue_value', context=Make.Load()), conversion=-1, format_spec=None)",
	"Make.FunctionDef(name='Make_FunctionDef', argumentSpecification=Make.arguments(posonlyargs=[], list_arg=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[], decorator_list=[], returns=None, type_params=[])",
	"Make.FunctionType(argtypes=[Make.Name(id='Make_FunctionType_argtypes', context=Make.Load())], returns=Make.Name(id='Make_FunctionType_returns', context=Make.Load()))",
	"Make.GeneratorExp(element=Make.Name(id='Make_GeneratorExp_element', context=Make.Load()), generators=[Make.comprehension(target=Make.Name(id='Make_GeneratorExp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_GeneratorExp_generators_iter', context=Make.Load()), ifs=[Make.Name(id='Make_GeneratorExp_generators_ifs', context=Make.Load())], is_async=0)])",
	"Make.Global(names=['Make_Global'])",
	"Make.Gt()",
	"Make.GtE()",
	"Make.If(test=Make.Name(id='Make_If_test', context=Make.Load()), body=[Make.Pass()], orElse=[])",
	"Make.IfExp(test=Make.Name(id='Make_IfExp_test', context=Make.Load()), body=Make.Name(id='Make_IfExp_body', context=Make.Load()), orElse=Make.Name(id='Make_IfExp_orElse', context=Make.Load()))",
	"Make.Import(dotModule='Make.Import')",
	"Make.ImportFrom(dotModule='Make.ImportFrom', list_alias=[Make.alias(name='Make_ImportFrom_alias', asName=None)], level=0)",
	"Make.In()",
	"Make.Interactive(body=[Make.Pass()])",
	"Make.Invert()",
	"Make.Is()",
	"Make.IsNot()",
	"Make.JoinedStr(values=[Make.Constant(value='Make_JoinedStr_values', kind=None)])",
	"Make.keyword(Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo=None, value=Make.Name(id='Make_keyword_value', context=Make.Load()))",
	"Make.Lambda(argumentSpecification=Make.arguments(posonlyargs=[], list_arg=[], vararg=None, kwonlyargs=[], kw_defaults=[None], kwarg=None, defaults=[]), body=Make.Name(id='Make_Lambda_body', context=Make.Load()))",
	"Make.List(listElements=[], context=Make.Load())",
	"Make.ListComp(element=Make.Name(id='Make_ListComp_element', context=Make.Load()), generators=[Make.comprehension(target=Make.Name(id='Make_ListComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_ListComp_generators_iter', context=Make.Load()), ifs=[Make.Name(id='Make_ListComp_generators_ifs', context=Make.Load())], is_async=0)])",
	"Make.Load()",
	"Make.LShift()",
	"Make.Lt()",
	"Make.LtE()",
	"Make.match_case(pattern=Make.MatchAs(pattern=None, name=None), guard=None, body=[])",
	"Make.Match(subject=Make.Name(id='Make_Match_subject', context=Make.Load()), cases=[])",
	"Make.MatchAs(pattern=None, name=None)",
	"Make.MatchClass(cls=Make.Name(id='Make_MatchClass_cls', context=Make.Load()), patterns=[], kwd_attrs=[], kwd_patterns=[])",
	"Make.MatchMapping(keys=[], patterns=[], rest=None)",
	"Make.MatchOr(patterns=[])",
	"Make.MatchSequence(patterns=[])",
	"Make.MatchSingleton(value=True)",
	"Make.MatchStar(name=None)",
	"Make.MatchValue(value=Make.Name(id='Make_MatchValue_value', context=Make.Load()))",
	"Make.MatMult()",
	"Make.Mod()",
	"Make.mod()",
	"Make.Module(body=[Make.Pass()], type_ignores=[])",
	"Make.Mult()",
	"Make.Name(id='Make_Name', context=Make.Load())",
	"Make.NamedExpr(target=Make.Name(id='Make_NamedExpr_target', context=Make.Store()), value=Make.Name(id='Make_NamedExpr_value', context=Make.Load()))",
	"Make.Nonlocal(names=['Make_Nonlocal'])",
	"Make.Not()",
	"Make.NotEq()",
	"Make.NotIn()",
	"Make.operator()",
	"Make.Or()",
	"Make.ParamSpec(name='Make_ParamSpec', default_value=None)",
	"Make.Pass()",
	"Make.pattern()",
	"Make.Pow()",
	"Make.Raise(exc=None, cause=None)",
	"Make.Return(value=None)",
	"Make.RShift()",
	"Make.Set(listElements=[])",
	"Make.SetComp(element=Make.Name(id='Make_SetComp_element', context=Make.Load()), generators=[Make.comprehension(target=Make.Name(id='Make_SetComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_SetComp_generators_iter', context=Make.Load()), ifs=[Make.Name(id='Make_SetComp_generators_ifs', context=Make.Load())], is_async=0)])",
	"Make.Slice(lower=None, upper=None, step=None)",
	"Make.Starred(value=Make.Name(id='Make_Starred_value', context=Make.Load()), context=Make.Load())",
	"Make.stmt()",
	"Make.Store()",
	"Make.Sub()",
	"Make.Subscript(value=Make.Name(id='Make_Subscript_value', context=Make.Load()), slice=Make.Name(id='Make_Subscript_slice', context=Make.Load()), context=Make.Load())",
	"Make.Try(body=[Make.Pass()], handlers=[Make.ExceptHandler(type=None, name=None, body=[])], orElse=[], finalbody=[])",
	"Make.TryStar(body=[Make.Pass()], handlers=[Make.ExceptHandler(type=None, name=None, body=[])], orElse=[], finalbody=[])",
	"Make.Tuple(listElements=[], context=Make.Load())",
	"Make.type_ignore()",
	"Make.type_param()",
	"Make.TypeAlias(name=Make.Name(id='Make_TypeAlias', context=Make.Store()), type_params=[Make.TypeVar(name='Make_TypeAlias_type_params', bound=None, default_value=None)], value=Make.Name(id='Make_TypeAlias_value', context=Make.Load()))",
	"Make.TypeIgnore(lineno=1, tag='Make_TypeIgnore_tag')",
	"Make.TypeVar(name='Make_TypeVar', bound=None, default_value=None)",
	"Make.TypeVarTuple(name='Make_TypeVarTuple', default_value=None)",
	"Make.UAdd()",
	"Make.unaryop()",
	"Make.UnaryOp(op=Make.UAdd(), operand=Make.Name(id='Make_UnaryOp_operand', context=Make.Load()))",
	"Make.USub()",
	"Make.While(test=Make.Name(id='Make_While_test', context=Make.Load()), body=[Make.Pass()], orElse=[])",
	"Make.With(items=[Make.withitem(context_expr=Make.Name(id='Make_withitem_context_expr', context=Make.Load()), optional_vars=None)], body=[Make.Pass()])",
	"Make.withitem(context_expr=Make.Name(id='Make_withitem_context_expr', context=Make.Load()), optional_vars=None)",
	"Make.Yield(value=None)",
	"Make.YieldFrom(value=Make.Name(id='Make_YieldFrom_value', context=Make.Load()))",
]

listMakeMinimal = [
	"Make.Add()",
	"Make.alias(name='Make_alias')",
	"Make.And()",
	"Make.AnnAssign(target=Make.Name(id='Make_AnnAssign_target', context=Make.Store()), annotation=Make.Name(id='Make_AnnAssign_annotation'))",
	"Make.arg(Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo='Make_arg')",
	"Make.arguments()",
	"Make.Assert(test=Make.Name(id='Make_Assert_test'))",
	"Make.Assign(targets=[Make.Name(id='Make_Assign_targets', context=Make.Store())], value=Make.Name(id='Make_Assign_value'))",
	"Make.AsyncFor(target=Make.Name(id='Make_AsyncFor_target', context=Make.Store()), iter=Make.Name(id='Make_AsyncFor_iter'), body=[Make.Pass()])",
	"Make.AsyncFunctionDef(name='Make_AsyncFunctionDef')",
	"Make.AsyncWith(items=[Make.withitem(context_expr=Make.Name(id='Make_AsyncWith_context_expr'))], body=[Make.Pass()])",
	"Make.Attribute(Make.Name(id='Make_Attribute_value'), 'Make_Attribute_attr')",
	"Make.AugAssign(target=Make.Name(id='Make_AugAssign_target', context=Make.Store()), op=Make.Add(), value=Make.Name(id='Make_AugAssign_value'))",
	"Make.Await(value=Make.Name(id='Make_Await_value'))",
	"Make.BinOp(right=Make.Name(id='Make_BinOp_right'), left=Make.Name(id='Make_BinOp_left'), op=Make.BitAnd())",
	"Make.BitAnd()",
	"Make.BitOr()",
	"Make.BitXor()",
	"Make.boolop()",
	"Make.BoolOp(op=Make.And(), values=[Make.Name(id='Make_BoolOp_values')])",
	"Make.Break()",
	"Make.Call(callee=Make.Name(id='Make_Call_callee'))",
	"Make.ClassDef(name='Make_ClassDef')",
	"Make.cmpop()",
	"Make.Compare(left=Make.Name(id='Make_Compare_left'), ops=[Make.Eq()], comparators=[Make.Name(id='Make_Compare_comparators')])",
	"Make.comprehension(target=Make.Name(id='Make_comprehension_target', context=Make.Store()), iter=Make.Name(id='Make_comprehension_iter'), ifs=[Make.Name(id='Make_comprehension_ifs')])",
	"Make.Constant(value='Make_Constant')",
	"Make.Continue()",
	"Make.Del()",
	"Make.Delete(targets=[Make.Name(id='Make_Delete_targets', context=Make.Del())])",
	"Make.Dict()",
	"Make.DictComp(key=Make.Name(id='Make_DictComp_key'), value=Make.Name(id='Make_DictComp_value'), generators=[Make.comprehension(target=Make.Name(id='Make_DictComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_DictComp_generators_iter'), ifs=[Make.Name(id='Make_DictComp_generators_ifs')])])",
	"Make.Div()",
	"Make.Eq()",
	"Make.excepthandler()",
	"Make.ExceptHandler()",
	"Make.expr_context()",
	"Make.expr()",
	"Make.Expr(value=Make.Name(id='Make_Expr_value'))",
	"Make.Expression(body=Make.Name(id='Make_Expression_body'))",
	"Make.FloorDiv()",
	"Make.For(target=Make.Name(id='Make_For_target', context=Make.Store()), iter=Make.Name(id='Make_For_iter'), body=[Make.Pass()])",
	"Make.FormattedValue(value=Make.Name(id='Make_FormattedValue_value'), conversion=-1)",
	"Make.FunctionDef(name='Make_FunctionDef')",
	"Make.FunctionType(argtypes=[Make.Name(id='Make_FunctionType_argtypes')], returns=Make.Name(id='Make_FunctionType_returns'))",
	"Make.GeneratorExp(element=Make.Name(id='Make_GeneratorExp_element'), generators=[Make.comprehension(target=Make.Name(id='Make_GeneratorExp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_GeneratorExp_generators_iter'), ifs=[Make.Name(id='Make_GeneratorExp_generators_ifs')])])",
	"Make.Global(names=['Make_Global'])",
	"Make.Gt()",
	"Make.GtE()",
	"Make.If(test=Make.Name(id='Make_If_test'), body=[Make.Pass()])",
	"Make.IfExp(test=Make.Name(id='Make_IfExp_test'), body=Make.Name(id='Make_IfExp_body'), orElse=Make.Name(id='Make_IfExp_orelse'))",
	"Make.Import(dotModule='Make.Import')",
	"Make.ImportFrom(dotModule='Make.ImportFrom', list_alias=[Make.alias(name='Make_ImportFrom_alias')])",
	"Make.In()",
	"Make.Interactive(body=[Make.Pass()])",
	"Make.Invert()",
	"Make.Is()",
	"Make.IsNot()",
	"Make.JoinedStr(values=[Make.Constant(value='Make_JoinedStr_values')])",
	# "Make.keyword(value=Make.Name(id='Make_keyword_value'))",
	"Make.keyword(Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo=None, value=Make.Name(id='Make_keyword_value'))",
	"Make.Lambda(argumentSpecification=Make.arguments(), body=Make.Name(id='Make_Lambda_body'))",
	"Make.List()",
	"Make.ListComp(element=Make.Name(id='Make_ListComp_element'), generators=[Make.comprehension(target=Make.Name(id='Make_ListComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_ListComp_generators_iter'), ifs=[Make.Name(id='Make_ListComp_generators_ifs')])])",
	"Make.Load()",
	"Make.LShift()",
	"Make.Lt()",
	"Make.LtE()",
	"Make.match_case(pattern=Make.MatchAs())",
	"Make.Match(subject=Make.Name(id='Make_Match_subject'))",
	"Make.MatchAs()",
	"Make.MatchClass(cls=Make.Name(id='Make_MatchClass_cls'))",
	"Make.MatchMapping()",
	"Make.MatchOr()",
	"Make.MatchSequence()",
	"Make.MatchSingleton(value=True)",
	"Make.MatchStar()",
	"Make.MatchValue(value=Make.Name(id='Make_MatchValue_value'))",
	"Make.MatMult()",
	"Make.Mod()",
	"Make.mod()",
	"Make.Module(body=[Make.Pass()])",
	"Make.Mult()",
	"Make.Name(id='Make_Name')",
	"Make.NamedExpr(target=Make.Name(id='Make_NamedExpr_target', context=Make.Store()), value=Make.Name(id='Make_NamedExpr_value'))",
	"Make.Nonlocal(names=['Make_Nonlocal'])",
	"Make.Not()",
	"Make.NotEq()",
	"Make.NotIn()",
	"Make.operator()",
	"Make.Or()",
	"Make.ParamSpec(name='Make_ParamSpec')",
	"Make.Pass()",
	"Make.pattern()",
	"Make.Pow()",
	"Make.Raise()",
	"Make.Return()",
	"Make.RShift()",
	"Make.Set()",
	"Make.SetComp(element=Make.Name(id='Make_SetComp_element'), generators=[Make.comprehension(target=Make.Name(id='Make_SetComp_generators_target', context=Make.Store()), iter=Make.Name(id='Make_SetComp_generators_iter'), ifs=[Make.Name(id='Make_SetComp_generators_ifs')])])",
	"Make.Slice()",
	"Make.Starred(value=Make.Name(id='Make_Starred_value'))",
	"Make.stmt()",
	"Make.Store()",
	"Make.Sub()",
	"Make.Subscript(value=Make.Name(id='Make_Subscript_value'), slice=Make.Name(id='Make_Subscript_slice'))",
	"Make.Try(body=[Make.Pass()], handlers=[Make.ExceptHandler()])",
	"Make.TryStar(body=[Make.Pass()], handlers=[Make.ExceptHandler()])",
	"Make.Tuple()",
	"Make.type_ignore()",
	"Make.type_param()",
	# "Make.TypeAlias(name=Make.Name(id='Make_TypeAlias'), value=Make.Name(id='Make_TypeAlias_value'))",
	"Make.TypeAlias(name=Make.Name(id='Make_TypeAlias'), type_params=[], value=Make.Name(id='Make_TypeAlias_value'))",
	"Make.TypeIgnore(lineno=1, tag='Make_TypeIgnore_tag')",
	"Make.TypeVar(name='Make_TypeVar')",
	"Make.TypeVarTuple(name='Make_TypeVarTuple')",
	"Make.UAdd()",
	"Make.unaryop()",
	"Make.UnaryOp(op=Make.UAdd(), operand=Make.Name(id='Make_UnaryOp_operand'))",
	"Make.USub()",
	"Make.While(test=Make.Name(id='Make_While_test'), body=[Make.Pass()])",
	"Make.With(items=[Make.withitem(context_expr=Make.Name(id='Make_withitem_context_expr'))], body=[Make.Pass()])",
	"Make.withitem(context_expr=Make.Name(id='Make_withitem_context_expr'))",
	"Make.Yield()",
	"Make.YieldFrom(value=Make.Name(id='Make_YieldFrom_value'))",
]

nodeConstructors_astMaximallyEmpty =	[
	"ast.Add()",
	"ast.alias(name='name', asname=None)",
	"ast.And()",
	"ast.AnnAssign(target=ast.Name(id='target', ctx=ast.Store()), annotation=ast.Name(id='annotation', ctx=ast.Load()), value=None, simple=0)",
	"ast.arg(arg='arg', annotation=None, type_comment=None)",
	"ast.arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])",
	"ast.Assert(test=ast.Constant(value=None, kind=None), msg=None)",
	"ast.Assign(targets=[], value=ast.Constant(value=None, kind=None), type_comment=None)",
	"ast.AsyncFor(target=ast.Name(id='target', ctx=ast.Store()), iter=ast.Name(id='iter', ctx=ast.Load()), body=[], orelse=[], type_comment=None)",
	"ast.AsyncFunctionDef(name='name', args=ast.arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[], decorator_list=[], returns=None, type_comment=None, type_params=[])",
	"ast.AsyncWith(items=[], body=[], type_comment=None)",
	"ast.Attribute(value=ast.Name(id='value', ctx=ast.Load()), attr='attr', ctx=ast.Load())",
	"ast.AugAssign(target=ast.Name(id='target', ctx=ast.Store()), op=ast.Add(), value=ast.Constant(value=None, kind=None))",
	"ast.Await(value=ast.Constant(value=None, kind=None))",
	"ast.BinOp(left=ast.Constant(value=None, kind=None), op=ast.Add(), right=ast.Constant(value=None, kind=None))",
	"ast.BitAnd()",
	"ast.BitOr()",
	"ast.BitXor()",
	"ast.boolop()",
	"ast.BoolOp(op=ast.And(), values=[])",
	"ast.Break()",
	"ast.Call(func=ast.Name(id='func', ctx=ast.Load()), args=[], keywords=[])",
	"ast.ClassDef(name='name', bases=[], keywords=[], body=[], decorator_list=[], type_params=[])",
	"ast.cmpop()",
	"ast.Compare(left=ast.Constant(value=None, kind=None), ops=[], comparators=[])",
	"ast.comprehension(target=ast.Name(id='target', ctx=ast.Store()), iter=ast.Name(id='iter', ctx=ast.Load()), ifs=[], is_async=0)",
	"ast.Constant(value=None, kind=None)",
	"ast.Continue()",
	"ast.Del()",
	"ast.Delete(targets=[])",
	"ast.Dict(keys=[], values=[])",
	"ast.DictComp(key=ast.Constant(value=None, kind=None), value=ast.Constant(value=None, kind=None), generators=[])",
	"ast.Div()",
	"ast.Eq()",
	"ast.excepthandler()",
	"ast.ExceptHandler(type=None, name=None, body=[])",
	"ast.expr_context()",
	"ast.expr()",
	"ast.Expr(value=ast.Constant(value=None, kind=None))",
	"ast.Expression(body=ast.Constant(value=None, kind=None))",
	"ast.FloorDiv()",
	"ast.For(target=ast.Name(id='target', ctx=ast.Store()), iter=ast.Name(id='iter', ctx=ast.Load()), body=[], orelse=[], type_comment=None)",
	"ast.FormattedValue(value=ast.Constant(value=None, kind=None), conversion=0, format_spec=None)",
	"ast.FunctionDef(name='name', args=ast.arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[], decorator_list=[], returns=None, type_comment=None, type_params=[])",
	"ast.FunctionType(argtypes=[], returns=ast.Constant(value=None, kind=None))",
	"ast.GeneratorExp(elt=ast.Constant(value=None, kind=None), generators=[])",
	"ast.Global(names=[])",
	"ast.Gt()",
	"ast.GtE()",
	"ast.If(test=ast.Constant(value=None, kind=None), body=[], orelse=[])",
	"ast.IfExp(test=ast.Constant(value=None, kind=None), body=ast.Constant(value=None, kind=None), orelse=ast.Constant(value=None, kind=None))",
	"ast.Import(names=[])",
	"ast.ImportFrom(module=None, names=[], level=0)",
	"ast.In()",
	"ast.Interactive(body=[])",
	"ast.Invert()",
	"ast.Is()",
	"ast.IsNot()",
	"ast.JoinedStr(values=[])",
	"ast.keyword(arg=None, value=ast.Constant(value=None, kind=None))",
	"ast.Lambda(args=ast.arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=ast.Constant(value=None, kind=None))",
	"ast.List(elts=[], ctx=ast.Load())",
	"ast.ListComp(elt=ast.Constant(value=None, kind=None), generators=[])",
	"ast.Load()",
	"ast.LShift()",
	"ast.Lt()",
	"ast.LtE()",
	"ast.match_case(pattern=ast.MatchValue(value=ast.Constant(value=None, kind=None)), guard=None, body=[])",
	"ast.Match(subject=ast.Constant(value=None, kind=None), cases=[])",
	"ast.MatchAs(pattern=None, name=None)",
	"ast.MatchClass(cls=ast.Name(id='cls', ctx=ast.Load()), patterns=[], kwd_attrs=[], kwd_patterns=[])",
	"ast.MatchMapping(keys=[], patterns=[], rest=None)",
	"ast.MatchOr(patterns=[])",
	"ast.MatchSequence(patterns=[])",
	"ast.MatchSingleton(value=None)",
	"ast.MatchStar(name=None)",
	"ast.MatchValue(value=ast.Constant(value=None, kind=None))",
	"ast.MatMult()",
	"ast.Mod()",
	"ast.mod()",
	"ast.Module(body=[], type_ignores=[])",
	"ast.Mult()",
	"ast.Name(id='id', ctx=ast.Load())",
	"ast.NamedExpr(target=ast.Name(id='target', ctx=ast.Store()), value=ast.Constant(value=None, kind=None))",
	"ast.Nonlocal(names=[])",
	"ast.Not()",
	"ast.NotEq()",
	"ast.NotIn()",
	"ast.operator()",
	"ast.Or()",
	"ast.ParamSpec(name='name', default_value=None)",
	"ast.Pass()",
	"ast.pattern()",
	"ast.Pow()",
	"ast.Raise(exc=None, cause=None)",
	"ast.Return(value=None)",
	"ast.RShift()",
	"ast.Set(elts=[])",
	"ast.SetComp(elt=ast.Constant(value=None, kind=None), generators=[])",
	"ast.Slice(lower=None, upper=None, step=None)",
	"ast.Starred(value=ast.Name(id='value', ctx=ast.Load()), ctx=ast.Load())",
	"ast.stmt()",
	"ast.Store()",
	"ast.Sub()",
	"ast.Subscript(value=ast.Name(id='value', ctx=ast.Load()), slice=ast.Constant(value=None, kind=None), ctx=ast.Load())",
	"ast.Try(body=[], handlers=[], orelse=[], finalbody=[])",
	"ast.TryStar(body=[], handlers=[], orelse=[], finalbody=[])",
	"ast.Tuple(elts=[], ctx=ast.Load())",
	"ast.type_ignore()",
	"ast.type_param()",
	"ast.TypeAlias(name=ast.Name(id='name', ctx=ast.Store()), type_params=[], value=ast.Name(id='value', ctx=ast.Load()))",
	"ast.TypeIgnore(lineno=1, tag='')",
	"ast.TypeVar(name='name', bound=None, default_value=None)",
	"ast.TypeVarTuple(name='name', default_value=None)",
	"ast.UAdd()",
	"ast.unaryop()",
	"ast.UnaryOp(op=ast.Not(), operand=ast.Constant(value=None, kind=None))",
	"ast.USub()",
	"ast.While(test=ast.Constant(value=None, kind=None), body=[], orelse=[])",
	"ast.With(items=[], body=[], type_comment=None)",
	"ast.withitem(context_expr=ast.Name(id='name', ctx=ast.Load()), optional_vars=None)",
	"ast.Yield(value=None)",
	"ast.YieldFrom(value=ast.Constant(value=None, kind=None))",
]

nodeConstructors_astMinimalOfficial = [
	"ast.Add()",
	"ast.alias(name='ast_alias')",
	"ast.And()",
	"ast.AnnAssign(target=ast.Name(id='ast_AnnAssign_target', ctx=ast.Store()), annotation=ast.Name(id='ast_AnnAssign_annotation', ctx=ast.Load()), simple=0)",
	"ast.arg(arg='ast_arg')",
	"ast.arguments()",
	"ast.Assert(test=ast.Name(id='ast_Assert_test'))",
	"ast.Assign(value=ast.Name(id='ast_Assign_value'))",
	"ast.AsyncFor(target=ast.Name(id='ast_AsyncFor_target', ctx=ast.Store()), iter=ast.Name(id='ast_AsyncFor_iter', ctx=ast.Load()))",
	"ast.AsyncFunctionDef(name='ast_AsyncFunctionDef', args=ast.arguments())",
	"ast.AsyncWith()",
	"ast.Attribute(value=ast.Name(id='ast_Attribute_value'), attr='ast_Attribute_attr')",
	"ast.AugAssign(target=ast.Name(id='ast_AugAssign_target', ctx=ast.Store()), op=ast.Add(), value=ast.Name(id='ast_AugAssign_value'))",
	"ast.Await(value=ast.Name(id='ast_Await_value'))",
	"ast.BinOp(right=ast.Name(id='ast_BinOp_right'), left=ast.Name(id='ast_BinOp_left'), op=ast.BitAnd())",
	"ast.BitAnd()",
	"ast.BitOr()",
	"ast.BitXor()",
	"ast.boolop()",
	"ast.BoolOp(op=ast.And())",
	"ast.Break()",
	"ast.Call(func=ast.Name(id='ast_Call_func'))",
	"ast.ClassDef(name='ast_ClassDef')",
	"ast.cmpop()",
	"ast.Compare(left=ast.Name(id='ast_Compare_left'))",
	"ast.comprehension(target=ast.Name(id='ast_comprehension_target', ctx=ast.Store()), iter=ast.Name(id='ast_comprehension_iter', ctx=ast.Load()), is_async=0)",
	"ast.Constant(value='ast_Constant')",
	"ast.Continue()",
	"ast.Del()",
	"ast.Delete()",
	"ast.Dict()",
	"ast.DictComp(key=ast.Name(id='ast_DictComp_key'), value=ast.Name(id='ast_DictComp_value'))",
	"ast.Div()",
	"ast.Eq()",
	"ast.excepthandler()",
	"ast.ExceptHandler()",
	"ast.expr_context()",
	"ast.expr()",
	"ast.Expr(value=ast.Name(id='ast_Expr_value'))",
	"ast.Expression(body=ast.Name(id='ast_Expression_body'))",
	"ast.FloorDiv()",
	"ast.For(target=ast.Name(id='ast_For_target', ctx=ast.Store()), iter=ast.Name(id='ast_For_iter'))",
	"ast.FormattedValue(value=ast.Name(id='ast_FormattedValue_value'), conversion=-1)",
	"ast.FunctionDef(name='ast_FunctionDef', args=ast.arguments())",
	"ast.FunctionType(returns=ast.Name(id='ast_FunctionType_returns'))",
	"ast.GeneratorExp(elt=ast.Name(id='ast_GeneratorExp_element'))",
	"ast.Global()",
	"ast.Gt()",
	"ast.GtE()",
	"ast.If(test=ast.Name(id='ast_If_test'))",
	"ast.IfExp(test=ast.Name(id='ast_IfExp_test'), body=ast.Name(id='ast_IfExp_body'), orelse=ast.Name(id='ast_IfExp_orelse'))",
	"ast.Import()",
	"ast.ImportFrom()",
	"ast.In()",
	"ast.Interactive()",
	"ast.Invert()",
	"ast.Is()",
	"ast.IsNot()",
	"ast.JoinedStr()",
	"ast.keyword(value=ast.Name(id='ast_keyword_value'))",
	"ast.Lambda(args=ast.arguments(), body=ast.Name(id='ast_Lambda_body'))",
	"ast.List()",
	"ast.ListComp(elt=ast.Name(id='ast_ListComp_element'))",
	"ast.Load()",
	"ast.LShift()",
	"ast.Lt()",
	"ast.LtE()",
	"ast.match_case(pattern=ast.MatchAs())",
	"ast.Match(subject=ast.Name(id='ast_Match_subject'))",
	"ast.MatchAs()",
	"ast.MatchClass(cls=ast.Name(id='ast_MatchClass_cls'))",
	"ast.MatchMapping()",
	"ast.MatchOr()",
	"ast.MatchSequence()",
	"ast.MatchSingleton(value=True)",
	"ast.MatchStar()",
	"ast.MatchValue(value=ast.Name(id='ast_MatchValue_value'))",
	"ast.MatMult()",
	"ast.Mod()",
	"ast.mod()",
	"ast.Module()",
	"ast.Mult()",
	"ast.Name(id='ast_Name')",
	"ast.NamedExpr(target=ast.Name(id='ast_NamedExpr_target', ctx=ast.Store()), value=ast.Name(id='ast_NamedExpr_value'))",
	"ast.Nonlocal()",
	"ast.Not()",
	"ast.NotEq()",
	"ast.NotIn()",
	"ast.operator()",
	"ast.Or()",
	"ast.ParamSpec(name='ast_ParamSpec')",
	"ast.Pass()",
	"ast.pattern()",
	"ast.Pow()",
	"ast.Raise()",
	"ast.Return()",
	"ast.RShift()",
	"ast.Set()",
	"ast.SetComp(elt=ast.Name(id='ast_SetComp_element'))",
	"ast.Slice()",
	"ast.Starred(value=ast.Name(id='ast_Starred_value'))",
	"ast.stmt()",
	"ast.Store()",
	"ast.Sub()",
	"ast.Subscript(value=ast.Name(id='ast_Subscript_value'), slice=ast.Name(id='ast_Subscript_slice'))",
	"ast.Try()",
	"ast.TryStar()",
	"ast.Tuple()",
	"ast.type_ignore()",
	"ast.type_param()",
	"ast.TypeAlias(name=ast.Name(id='ast_TypeAlias'), value=ast.Name(id='ast_TypeAlias_value'))",
	"ast.TypeIgnore(lineno=1, tag='ast_TypeIgnore_tag')",
	"ast.TypeVar(name='ast_TypeVar')",
	"ast.TypeVarTuple(name='ast_TypeVarTuple')",
	"ast.UAdd()",
	"ast.unaryop()",
	"ast.UnaryOp(op=ast.UAdd(), operand=ast.Name(id='ast_UnaryOp_operand'))",
	"ast.USub()",
	"ast.While(test=ast.Name(id='ast_While_test'))",
	"ast.With()",
	"ast.withitem(context_expr=ast.Name(id='ast_withitem_context_expr'))",
	"ast.Yield()",
	"ast.YieldFrom(value=ast.Name(id='ast_YieldFrom_value'))",
]

print('dd={')
for MakeMaximallyEmpty, MakeMinimal, astMinimal in zip(listMakeMinimal, listMakeMaximallyEmpty, nodeConstructors_astMinimalOfficial):
	# print(nodeAsStr, ast.dump(eval(nodeAsStr), show_empty=True), dump(eval(nodeAsStr), show_empty=True), '', sep='\n')
	# print(nodeAsStr, dump(eval(nodeAsStr), show_empty=True), '', sep='\n')
	# print(nodeAsStr, ast.dump(eval(nodeAsStr), show_empty=False), dump(eval(nodeAsStr), show_empty=False), '', sep='\n')

	identifier = MakeMaximallyEmpty.split('(')[0][len('Make.'):None]
	listDictionaryAsStr: list[str] = []
	listDictionaryAsStr.append(f'"metadata": {{"classObject": ast.{identifier}, "identifiersSubclasses": [subclass.__name__ for subclass in ast.{identifier}.__subclasses__()]}}')  # noqa: E501, T201
	if MakeMaximallyEmpty != MakeMinimal:
		listDictionaryAsStr.append(f'"class Make, minimal parameters": {{"expression": {MakeMinimal}, "astToolkit.dump": "{dump(eval(MakeMinimal), show_empty=True)}", "ast.dump": "{ast.dump(eval(MakeMinimal), show_empty=True)}"}}')  # noqa: E501, S307
	print(f'"{identifier}": {{')  # noqa: T201
	print(*listDictionaryAsStr
		, f'"class Make, maximally empty parameters": {{"expression": {MakeMaximallyEmpty}, "astToolkit.dump": "{dump(eval(MakeMaximallyEmpty), show_empty=True)}", "ast.dump": "{ast.dump(eval(MakeMaximallyEmpty), show_empty=True)}"}}'  # noqa: E501, S307
		, f'"ast module, minimal parameters": {{"expression": {astMinimal}, "astToolkit.dump": "{dump(eval(astMinimal), show_empty=True)}", "ast.dump": "{ast.dump(eval(astMinimal), show_empty=True)}"}}'  # noqa: E501, S307
		, sep=',\n')
	print('},')
print('}')


# for astClass in [C for C in [ast.AST,*chain(*(c.__subclasses__() for c in [ast.AST,ast.Constant,*ast.AST.__subclasses__()]))] if issubclass(C,ast.AST)]:
# 	try:
# 		print(astClass.__name__+'()', ast.dump(astClass(), show_empty=False), dump(astClass(), show_empty=False), '', sep='\n')
# 	except Exception:
# 		print(astClass.__name__+'()')

# isinstance
# issubclass

# dict[str, dict[str, Callable]]

# identifierClass



