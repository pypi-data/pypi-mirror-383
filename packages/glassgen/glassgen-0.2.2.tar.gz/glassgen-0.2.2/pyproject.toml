[project]
name = "glassgen"
version = "0.2.2"
description = "A flexible synthetic data generation service"
authors = [
    {name = "GlassFlow", email = "hello@glassflow.dev"},
]
dependencies = [
    "faker>=19.0.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",    
    "confluent-kafka==2.8.2",
    "requests>=2.25.0",
    "urllib3<2.0.0"  # Pin to version 1.x to avoid SSL warning
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
keywords = ["data-generation", "synthetic-data", "kafka", "csv", "testing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://glassgen.glassflow.dev/"
Documentation = "https://glassgen.glassflow.dev/"
Repository = "https://github.com/glassflow/glassgen.git"
Issues = "https://github.com/glassflow/glassgen/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.11.0",
    "mypy>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
glassgen = "cli:cli"

[tool.hatch.build.targets.wheel]
include-paths = [
    "glassgen/",
    "cli.py",
    "README.md",
    "LICENSE"
] 

[tool.hatch.build]
exclude = [
    "docs",
    "tests",
    "secrets",
    ".venv",
    "*.json",
    "*.yml",
    "*.yaml"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=glassgen --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning"
]

[tool.coverage.run]
source = ["glassgen"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

[tool.coverage.html]
directory = "coverage_html_report"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
]