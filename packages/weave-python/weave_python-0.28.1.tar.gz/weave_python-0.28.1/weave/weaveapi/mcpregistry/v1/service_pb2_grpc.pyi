"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import weaveapi.mcpregistry.v1.service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...
class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MCPRegistryStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    ListServers: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.ListServersRequest,
        weaveapi.mcpregistry.v1.service_pb2.ListServersResponse,
    ]

    GetServerByID: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.GetServerByIDRequest,
        weaveapi.mcpregistry.v1.service_pb2.GetServerByIDResponse,
    ]

    RegisterServer: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.RegisterServerRequest,
        weaveapi.mcpregistry.v1.service_pb2.RegisterServerResponse,
    ]

    UnregisterServer: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.UnregisterServerRequest,
        weaveapi.mcpregistry.v1.service_pb2.UnregisterServerResponse,
    ]

    ListTools: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.ListToolsRequest,
        weaveapi.mcpregistry.v1.service_pb2.ListToolsResponse,
    ]

    GetToolByName: grpc.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.GetToolByNameRequest,
        weaveapi.mcpregistry.v1.service_pb2.GetToolByNameResponse,
    ]

class MCPRegistryAsyncStub:
    ListServers: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.ListServersRequest,
        weaveapi.mcpregistry.v1.service_pb2.ListServersResponse,
    ]

    GetServerByID: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.GetServerByIDRequest,
        weaveapi.mcpregistry.v1.service_pb2.GetServerByIDResponse,
    ]

    RegisterServer: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.RegisterServerRequest,
        weaveapi.mcpregistry.v1.service_pb2.RegisterServerResponse,
    ]

    UnregisterServer: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.UnregisterServerRequest,
        weaveapi.mcpregistry.v1.service_pb2.UnregisterServerResponse,
    ]

    ListTools: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.ListToolsRequest,
        weaveapi.mcpregistry.v1.service_pb2.ListToolsResponse,
    ]

    GetToolByName: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.mcpregistry.v1.service_pb2.GetToolByNameRequest,
        weaveapi.mcpregistry.v1.service_pb2.GetToolByNameResponse,
    ]

class MCPRegistryServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListServers(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.ListServersRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.ListServersResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.ListServersResponse
        ],
    ]: ...
    @abc.abstractmethod
    def GetServerByID(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.GetServerByIDRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.GetServerByIDResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.GetServerByIDResponse
        ],
    ]: ...
    @abc.abstractmethod
    def RegisterServer(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.RegisterServerRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.RegisterServerResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.RegisterServerResponse
        ],
    ]: ...
    @abc.abstractmethod
    def UnregisterServer(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.UnregisterServerRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.UnregisterServerResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.UnregisterServerResponse
        ],
    ]: ...
    @abc.abstractmethod
    def ListTools(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.ListToolsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.ListToolsResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.ListToolsResponse
        ],
    ]: ...
    @abc.abstractmethod
    def GetToolByName(
        self,
        request: weaveapi.mcpregistry.v1.service_pb2.GetToolByNameRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.mcpregistry.v1.service_pb2.GetToolByNameResponse,
        collections.abc.Awaitable[
            weaveapi.mcpregistry.v1.service_pb2.GetToolByNameResponse
        ],
    ]: ...

def add_MCPRegistryServicer_to_server(
    servicer: MCPRegistryServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
