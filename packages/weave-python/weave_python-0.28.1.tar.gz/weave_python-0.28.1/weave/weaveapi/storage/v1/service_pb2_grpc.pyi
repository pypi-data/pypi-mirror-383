"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import weaveapi.storage.v1.service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...
class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class StorageStub:
    """Storage provides CRUD operations for managing storage configurations"""

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    CreateStorage: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.CreateStorageRequest,
        weaveapi.storage.v1.service_pb2.CreateStorageResponse,
    ]
    """CreateStorage creates a new storage configuration"""

    GetStorage: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.GetStorageRequest,
        weaveapi.storage.v1.service_pb2.GetStorageResponse,
    ]
    """GetStorage retrieves a storage configuration by ID"""

    ListStorages: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.ListStoragesRequest,
        weaveapi.storage.v1.service_pb2.ListStoragesResponse,
    ]
    """ListStorages retrieves all storage configurations with optional filtering"""

    UpdateStorage: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.UpdateStorageRequest,
        weaveapi.storage.v1.service_pb2.UpdateStorageResponse,
    ]
    """UpdateStorage updates an existing storage configuration"""

    DeleteStorage: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.DeleteStorageRequest,
        weaveapi.storage.v1.service_pb2.DeleteStorageResponse,
    ]
    """DeleteStorage deletes a storage configuration by ID"""

    TestStorageConnection: grpc.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.TestStorageConnectionRequest,
        weaveapi.storage.v1.service_pb2.TestStorageConnectionResponse,
    ]
    """TestStorageConnection tests the connection to a storage"""

class StorageAsyncStub:
    """Storage provides CRUD operations for managing storage configurations"""

    CreateStorage: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.CreateStorageRequest,
        weaveapi.storage.v1.service_pb2.CreateStorageResponse,
    ]
    """CreateStorage creates a new storage configuration"""

    GetStorage: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.GetStorageRequest,
        weaveapi.storage.v1.service_pb2.GetStorageResponse,
    ]
    """GetStorage retrieves a storage configuration by ID"""

    ListStorages: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.ListStoragesRequest,
        weaveapi.storage.v1.service_pb2.ListStoragesResponse,
    ]
    """ListStorages retrieves all storage configurations with optional filtering"""

    UpdateStorage: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.UpdateStorageRequest,
        weaveapi.storage.v1.service_pb2.UpdateStorageResponse,
    ]
    """UpdateStorage updates an existing storage configuration"""

    DeleteStorage: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.DeleteStorageRequest,
        weaveapi.storage.v1.service_pb2.DeleteStorageResponse,
    ]
    """DeleteStorage deletes a storage configuration by ID"""

    TestStorageConnection: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.storage.v1.service_pb2.TestStorageConnectionRequest,
        weaveapi.storage.v1.service_pb2.TestStorageConnectionResponse,
    ]
    """TestStorageConnection tests the connection to a storage"""

class StorageServicer(metaclass=abc.ABCMeta):
    """Storage provides CRUD operations for managing storage configurations"""

    @abc.abstractmethod
    def CreateStorage(
        self,
        request: weaveapi.storage.v1.service_pb2.CreateStorageRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.CreateStorageResponse,
        collections.abc.Awaitable[
            weaveapi.storage.v1.service_pb2.CreateStorageResponse
        ],
    ]:
        """CreateStorage creates a new storage configuration"""

    @abc.abstractmethod
    def GetStorage(
        self,
        request: weaveapi.storage.v1.service_pb2.GetStorageRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.GetStorageResponse,
        collections.abc.Awaitable[weaveapi.storage.v1.service_pb2.GetStorageResponse],
    ]:
        """GetStorage retrieves a storage configuration by ID"""

    @abc.abstractmethod
    def ListStorages(
        self,
        request: weaveapi.storage.v1.service_pb2.ListStoragesRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.ListStoragesResponse,
        collections.abc.Awaitable[weaveapi.storage.v1.service_pb2.ListStoragesResponse],
    ]:
        """ListStorages retrieves all storage configurations with optional filtering"""

    @abc.abstractmethod
    def UpdateStorage(
        self,
        request: weaveapi.storage.v1.service_pb2.UpdateStorageRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.UpdateStorageResponse,
        collections.abc.Awaitable[
            weaveapi.storage.v1.service_pb2.UpdateStorageResponse
        ],
    ]:
        """UpdateStorage updates an existing storage configuration"""

    @abc.abstractmethod
    def DeleteStorage(
        self,
        request: weaveapi.storage.v1.service_pb2.DeleteStorageRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.DeleteStorageResponse,
        collections.abc.Awaitable[
            weaveapi.storage.v1.service_pb2.DeleteStorageResponse
        ],
    ]:
        """DeleteStorage deletes a storage configuration by ID"""

    @abc.abstractmethod
    def TestStorageConnection(
        self,
        request: weaveapi.storage.v1.service_pb2.TestStorageConnectionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.storage.v1.service_pb2.TestStorageConnectionResponse,
        collections.abc.Awaitable[
            weaveapi.storage.v1.service_pb2.TestStorageConnectionResponse
        ],
    ]:
        """TestStorageConnection tests the connection to a storage"""

def add_StorageServicer_to_server(
    servicer: StorageServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
