# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from weaveapi.mcpregistry.v1 import (
    service_pb2 as weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2,
)


class MCPRegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListServers = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/ListServers",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersResponse.FromString,
            _registered_method=True,
        )
        self.GetServerByID = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/GetServerByID",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDResponse.FromString,
            _registered_method=True,
        )
        self.RegisterServer = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/RegisterServer",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerResponse.FromString,
            _registered_method=True,
        )
        self.UnregisterServer = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/UnregisterServer",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerResponse.FromString,
            _registered_method=True,
        )
        self.ListTools = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/ListTools",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsResponse.FromString,
            _registered_method=True,
        )
        self.GetToolByName = channel.unary_unary(
            "/weaveapi.mcpregistry.v1.MCPRegistry/GetToolByName",
            request_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameRequest.SerializeToString,
            response_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameResponse.FromString,
            _registered_method=True,
        )


class MCPRegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetServerByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnregisterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetToolByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MCPRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListServers": grpc.unary_unary_rpc_method_handler(
            servicer.ListServers,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersResponse.SerializeToString,
        ),
        "GetServerByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetServerByID,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDResponse.SerializeToString,
        ),
        "RegisterServer": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterServer,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerResponse.SerializeToString,
        ),
        "UnregisterServer": grpc.unary_unary_rpc_method_handler(
            servicer.UnregisterServer,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerResponse.SerializeToString,
        ),
        "ListTools": grpc.unary_unary_rpc_method_handler(
            servicer.ListTools,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsResponse.SerializeToString,
        ),
        "GetToolByName": grpc.unary_unary_rpc_method_handler(
            servicer.GetToolByName,
            request_deserializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameRequest.FromString,
            response_serializer=weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "weaveapi.mcpregistry.v1.MCPRegistry", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "weaveapi.mcpregistry.v1.MCPRegistry", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class MCPRegistry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListServers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/ListServers",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListServersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetServerByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/GetServerByID",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetServerByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RegisterServer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/RegisterServer",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.RegisterServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UnregisterServer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/UnregisterServer",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.UnregisterServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListTools(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/ListTools",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.ListToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetToolByName(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/weaveapi.mcpregistry.v1.MCPRegistry/GetToolByName",
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameRequest.SerializeToString,
            weaveapi_dot_mcpregistry_dot_v1_dot_service__pb2.GetToolByNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
