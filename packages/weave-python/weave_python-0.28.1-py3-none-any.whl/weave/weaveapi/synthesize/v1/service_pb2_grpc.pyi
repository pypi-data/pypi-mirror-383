"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import weaveapi.synthesize.v1.service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...
class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SynthesizeStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    CreateSynthesizer: grpc.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.CreateSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.CreateSynthesizerResponse,
    ]

    GetSynthesizer: grpc.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.GetSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.GetSynthesizerResponse,
    ]

    ListSynthesizers: grpc.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.ListSynthesizersRequest,
        weaveapi.synthesize.v1.service_pb2.ListSynthesizersResponse,
    ]

    DeleteSynthesizer: grpc.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerResponse,
    ]

class SynthesizeAsyncStub:
    CreateSynthesizer: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.CreateSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.CreateSynthesizerResponse,
    ]

    GetSynthesizer: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.GetSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.GetSynthesizerResponse,
    ]

    ListSynthesizers: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.ListSynthesizersRequest,
        weaveapi.synthesize.v1.service_pb2.ListSynthesizersResponse,
    ]

    DeleteSynthesizer: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerRequest,
        weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerResponse,
    ]

class SynthesizeServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateSynthesizer(
        self,
        request: weaveapi.synthesize.v1.service_pb2.CreateSynthesizerRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.synthesize.v1.service_pb2.CreateSynthesizerResponse,
        collections.abc.Awaitable[
            weaveapi.synthesize.v1.service_pb2.CreateSynthesizerResponse
        ],
    ]: ...
    @abc.abstractmethod
    def GetSynthesizer(
        self,
        request: weaveapi.synthesize.v1.service_pb2.GetSynthesizerRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.synthesize.v1.service_pb2.GetSynthesizerResponse,
        collections.abc.Awaitable[
            weaveapi.synthesize.v1.service_pb2.GetSynthesizerResponse
        ],
    ]: ...
    @abc.abstractmethod
    def ListSynthesizers(
        self,
        request: weaveapi.synthesize.v1.service_pb2.ListSynthesizersRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.synthesize.v1.service_pb2.ListSynthesizersResponse,
        collections.abc.Awaitable[
            weaveapi.synthesize.v1.service_pb2.ListSynthesizersResponse
        ],
    ]: ...
    @abc.abstractmethod
    def DeleteSynthesizer(
        self,
        request: weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerResponse,
        collections.abc.Awaitable[
            weaveapi.synthesize.v1.service_pb2.DeleteSynthesizerResponse
        ],
    ]: ...

def add_SynthesizeServicer_to_server(
    servicer: SynthesizeServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
