"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _RelationshipType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RelationshipTypeEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
        _RelationshipType.ValueType
    ],
    builtins.type,
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RELATIONSHIP_TYPE_UNSPECIFIED: _RelationshipType.ValueType  # 0
    RELATIONSHIP_TYPE_CONTEXT_FOREIGN_KEY: _RelationshipType.ValueType  # 1
    """Context foreign key preserves relationships during synthetic data generation"""
    RELATIONSHIP_TYPE_NON_CONTEXT_FOREIGN_KEY: _RelationshipType.ValueType  # 2
    """Non-context foreign key defines a relationship without context preservation"""
    RELATIONSHIP_TYPE_ONE_TO_MANY: _RelationshipType.ValueType  # 3
    """One-to-many relationship"""
    RELATIONSHIP_TYPE_MANY_TO_ONE: _RelationshipType.ValueType  # 4
    """Many-to-one relationship"""
    RELATIONSHIP_TYPE_MANY_TO_MANY: _RelationshipType.ValueType  # 5
    """Many-to-many relationship"""
    RELATIONSHIP_TYPE_SELF_REFERENCE: _RelationshipType.ValueType  # 6
    """Self-referential relationship"""

class RelationshipType(_RelationshipType, metaclass=_RelationshipTypeEnumTypeWrapper):
    """RelationshipType defines the type of relationship between columns"""

RELATIONSHIP_TYPE_UNSPECIFIED: RelationshipType.ValueType  # 0
RELATIONSHIP_TYPE_CONTEXT_FOREIGN_KEY: RelationshipType.ValueType  # 1
"""Context foreign key preserves relationships during synthetic data generation"""
RELATIONSHIP_TYPE_NON_CONTEXT_FOREIGN_KEY: RelationshipType.ValueType  # 2
"""Non-context foreign key defines a relationship without context preservation"""
RELATIONSHIP_TYPE_ONE_TO_MANY: RelationshipType.ValueType  # 3
"""One-to-many relationship"""
RELATIONSHIP_TYPE_MANY_TO_ONE: RelationshipType.ValueType  # 4
"""Many-to-one relationship"""
RELATIONSHIP_TYPE_MANY_TO_MANY: RelationshipType.ValueType  # 5
"""Many-to-many relationship"""
RELATIONSHIP_TYPE_SELF_REFERENCE: RelationshipType.ValueType  # 6
"""Self-referential relationship"""
global___RelationshipType = RelationshipType

@typing.final
class ColumnRelationship(google.protobuf.message.Message):
    """ColumnRelationship defines a relationship between columns across datasets"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    RELATIONSHIP_TYPE_FIELD_NUMBER: builtins.int
    relationship_type: global___RelationshipType.ValueType
    """Type of relationship"""
    @property
    def source(self) -> global___ColumnReference:
        """Source column reference"""

    @property
    def target(self) -> global___ColumnReference:
        """Target column reference"""

    def __init__(
        self,
        *,
        source: global___ColumnReference | None = ...,
        target: global___ColumnReference | None = ...,
        relationship_type: global___RelationshipType.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["source", b"source", "target", b"target"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "relationship_type",
            b"relationship_type",
            "source",
            b"source",
            "target",
            b"target",
        ],
    ) -> None: ...

global___ColumnRelationship = ColumnRelationship

@typing.final
class ColumnReference(google.protobuf.message.Message):
    """ColumnReference identifies a specific column in a specific dataset"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATASET_ID_FIELD_NUMBER: builtins.int
    COLUMN_ID_FIELD_NUMBER: builtins.int
    dataset_id: builtins.str
    """Dataset ID"""
    column_id: builtins.str
    """Column ID"""
    def __init__(
        self,
        *,
        dataset_id: builtins.str = ...,
        column_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "column_id", b"column_id", "dataset_id", b"dataset_id"
        ],
    ) -> None: ...

global___ColumnReference = ColumnReference
