"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import weaveapi.auth.v1.service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...
class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AuthStub:
    """Auth handles authentication and user management
    OAuth endpoints (provider-agnostic)
    """

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    InitiateOAuth: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.InitiateOAuthRequest,
        weaveapi.auth.v1.service_pb2.InitiateOAuthResponse,
    ]
    """Initiate OAuth flow for any supported provider"""

    HandleOAuthCallback: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.HandleOAuthCallbackRequest,
        weaveapi.auth.v1.service_pb2.HandleOAuthCallbackResponse,
    ]
    """Handle OAuth callback from any provider"""

    GetOAuthProviders: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetOAuthProvidersRequest,
        weaveapi.auth.v1.service_pb2.GetOAuthProvidersResponse,
    ]
    """Get list of supported OAuth providers"""

    LinkOAuthProvider: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.LinkOAuthProviderRequest,
        weaveapi.auth.v1.service_pb2.LinkOAuthProviderResponse,
    ]
    """Link additional OAuth provider to existing account"""

    UnlinkOAuthProvider: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderRequest,
        weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderResponse,
    ]
    """Unlink OAuth provider from account"""

    RefreshToken: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RefreshTokenRequest,
        weaveapi.auth.v1.service_pb2.RefreshTokenResponse,
    ]
    """Token management

    Refresh access token
    """

    RevokeToken: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeTokenRequest,
        weaveapi.auth.v1.service_pb2.RevokeTokenResponse,
    ]
    """Revoke refresh token (logout)"""

    ValidateToken: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ValidateTokenRequest,
        weaveapi.auth.v1.service_pb2.ValidateTokenResponse,
    ]
    """Validate access token"""

    GetCurrentUser: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetCurrentUserRequest,
        weaveapi.auth.v1.service_pb2.GetCurrentUserResponse,
    ]
    """User management

    Get current user profile
    """

    UpdateUser: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UpdateUserRequest,
        weaveapi.auth.v1.service_pb2.UpdateUserResponse,
    ]
    """Update user profile"""

    DeleteUser: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.DeleteUserRequest,
        weaveapi.auth.v1.service_pb2.DeleteUserResponse,
    ]
    """Delete user account"""

    ListAPIKeys: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ListAPIKeysRequest,
        weaveapi.auth.v1.service_pb2.ListAPIKeysResponse,
    ]
    """API Key management

    List user's API keys
    """

    CreateAPIKey: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.CreateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.CreateAPIKeyResponse,
    ]
    """Create new API key"""

    GetAPIKey: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.GetAPIKeyResponse,
    ]
    """Get API key details"""

    UpdateAPIKey: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UpdateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.UpdateAPIKeyResponse,
    ]
    """Update API key (rename, etc)"""

    RevokeAPIKey: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.RevokeAPIKeyResponse,
    ]
    """Revoke API key"""

    ValidateAPIKey: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ValidateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.ValidateAPIKeyResponse,
    ]
    """Validate API key (for internal use)"""

    GetUsageStats: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetUsageStatsRequest,
        weaveapi.auth.v1.service_pb2.GetUsageStatsResponse,
    ]
    """Usage and limits

    Get user's API usage statistics
    """

    GetRateLimitStatus: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetRateLimitStatusRequest,
        weaveapi.auth.v1.service_pb2.GetRateLimitStatusResponse,
    ]
    """Get rate limit status"""

    ListSessions: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ListSessionsRequest,
        weaveapi.auth.v1.service_pb2.ListSessionsResponse,
    ]
    """Session management

    List active sessions
    """

    RevokeSession: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeSessionRequest,
        weaveapi.auth.v1.service_pb2.RevokeSessionResponse,
    ]
    """Revoke a specific session"""

    RevokeAllSessions: grpc.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeAllSessionsRequest,
        weaveapi.auth.v1.service_pb2.RevokeAllSessionsResponse,
    ]
    """Revoke all sessions except current"""

class AuthAsyncStub:
    """Auth handles authentication and user management
    OAuth endpoints (provider-agnostic)
    """

    InitiateOAuth: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.InitiateOAuthRequest,
        weaveapi.auth.v1.service_pb2.InitiateOAuthResponse,
    ]
    """Initiate OAuth flow for any supported provider"""

    HandleOAuthCallback: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.HandleOAuthCallbackRequest,
        weaveapi.auth.v1.service_pb2.HandleOAuthCallbackResponse,
    ]
    """Handle OAuth callback from any provider"""

    GetOAuthProviders: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetOAuthProvidersRequest,
        weaveapi.auth.v1.service_pb2.GetOAuthProvidersResponse,
    ]
    """Get list of supported OAuth providers"""

    LinkOAuthProvider: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.LinkOAuthProviderRequest,
        weaveapi.auth.v1.service_pb2.LinkOAuthProviderResponse,
    ]
    """Link additional OAuth provider to existing account"""

    UnlinkOAuthProvider: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderRequest,
        weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderResponse,
    ]
    """Unlink OAuth provider from account"""

    RefreshToken: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RefreshTokenRequest,
        weaveapi.auth.v1.service_pb2.RefreshTokenResponse,
    ]
    """Token management

    Refresh access token
    """

    RevokeToken: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeTokenRequest,
        weaveapi.auth.v1.service_pb2.RevokeTokenResponse,
    ]
    """Revoke refresh token (logout)"""

    ValidateToken: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ValidateTokenRequest,
        weaveapi.auth.v1.service_pb2.ValidateTokenResponse,
    ]
    """Validate access token"""

    GetCurrentUser: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetCurrentUserRequest,
        weaveapi.auth.v1.service_pb2.GetCurrentUserResponse,
    ]
    """User management

    Get current user profile
    """

    UpdateUser: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UpdateUserRequest,
        weaveapi.auth.v1.service_pb2.UpdateUserResponse,
    ]
    """Update user profile"""

    DeleteUser: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.DeleteUserRequest,
        weaveapi.auth.v1.service_pb2.DeleteUserResponse,
    ]
    """Delete user account"""

    ListAPIKeys: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ListAPIKeysRequest,
        weaveapi.auth.v1.service_pb2.ListAPIKeysResponse,
    ]
    """API Key management

    List user's API keys
    """

    CreateAPIKey: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.CreateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.CreateAPIKeyResponse,
    ]
    """Create new API key"""

    GetAPIKey: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.GetAPIKeyResponse,
    ]
    """Get API key details"""

    UpdateAPIKey: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.UpdateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.UpdateAPIKeyResponse,
    ]
    """Update API key (rename, etc)"""

    RevokeAPIKey: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.RevokeAPIKeyResponse,
    ]
    """Revoke API key"""

    ValidateAPIKey: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ValidateAPIKeyRequest,
        weaveapi.auth.v1.service_pb2.ValidateAPIKeyResponse,
    ]
    """Validate API key (for internal use)"""

    GetUsageStats: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetUsageStatsRequest,
        weaveapi.auth.v1.service_pb2.GetUsageStatsResponse,
    ]
    """Usage and limits

    Get user's API usage statistics
    """

    GetRateLimitStatus: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.GetRateLimitStatusRequest,
        weaveapi.auth.v1.service_pb2.GetRateLimitStatusResponse,
    ]
    """Get rate limit status"""

    ListSessions: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.ListSessionsRequest,
        weaveapi.auth.v1.service_pb2.ListSessionsResponse,
    ]
    """Session management

    List active sessions
    """

    RevokeSession: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeSessionRequest,
        weaveapi.auth.v1.service_pb2.RevokeSessionResponse,
    ]
    """Revoke a specific session"""

    RevokeAllSessions: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.auth.v1.service_pb2.RevokeAllSessionsRequest,
        weaveapi.auth.v1.service_pb2.RevokeAllSessionsResponse,
    ]
    """Revoke all sessions except current"""

class AuthServicer(metaclass=abc.ABCMeta):
    """Auth handles authentication and user management
    OAuth endpoints (provider-agnostic)
    """

    @abc.abstractmethod
    def InitiateOAuth(
        self,
        request: weaveapi.auth.v1.service_pb2.InitiateOAuthRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.InitiateOAuthResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.InitiateOAuthResponse],
    ]:
        """Initiate OAuth flow for any supported provider"""

    @abc.abstractmethod
    def HandleOAuthCallback(
        self,
        request: weaveapi.auth.v1.service_pb2.HandleOAuthCallbackRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.HandleOAuthCallbackResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.HandleOAuthCallbackResponse
        ],
    ]:
        """Handle OAuth callback from any provider"""

    @abc.abstractmethod
    def GetOAuthProviders(
        self,
        request: weaveapi.auth.v1.service_pb2.GetOAuthProvidersRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.GetOAuthProvidersResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.GetOAuthProvidersResponse
        ],
    ]:
        """Get list of supported OAuth providers"""

    @abc.abstractmethod
    def LinkOAuthProvider(
        self,
        request: weaveapi.auth.v1.service_pb2.LinkOAuthProviderRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.LinkOAuthProviderResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.LinkOAuthProviderResponse
        ],
    ]:
        """Link additional OAuth provider to existing account"""

    @abc.abstractmethod
    def UnlinkOAuthProvider(
        self,
        request: weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.UnlinkOAuthProviderResponse
        ],
    ]:
        """Unlink OAuth provider from account"""

    @abc.abstractmethod
    def RefreshToken(
        self,
        request: weaveapi.auth.v1.service_pb2.RefreshTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.RefreshTokenResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.RefreshTokenResponse],
    ]:
        """Token management

        Refresh access token
        """

    @abc.abstractmethod
    def RevokeToken(
        self,
        request: weaveapi.auth.v1.service_pb2.RevokeTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.RevokeTokenResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.RevokeTokenResponse],
    ]:
        """Revoke refresh token (logout)"""

    @abc.abstractmethod
    def ValidateToken(
        self,
        request: weaveapi.auth.v1.service_pb2.ValidateTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.ValidateTokenResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.ValidateTokenResponse],
    ]:
        """Validate access token"""

    @abc.abstractmethod
    def GetCurrentUser(
        self,
        request: weaveapi.auth.v1.service_pb2.GetCurrentUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.GetCurrentUserResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.GetCurrentUserResponse],
    ]:
        """User management

        Get current user profile
        """

    @abc.abstractmethod
    def UpdateUser(
        self,
        request: weaveapi.auth.v1.service_pb2.UpdateUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.UpdateUserResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.UpdateUserResponse],
    ]:
        """Update user profile"""

    @abc.abstractmethod
    def DeleteUser(
        self,
        request: weaveapi.auth.v1.service_pb2.DeleteUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.DeleteUserResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.DeleteUserResponse],
    ]:
        """Delete user account"""

    @abc.abstractmethod
    def ListAPIKeys(
        self,
        request: weaveapi.auth.v1.service_pb2.ListAPIKeysRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.ListAPIKeysResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.ListAPIKeysResponse],
    ]:
        """API Key management

        List user's API keys
        """

    @abc.abstractmethod
    def CreateAPIKey(
        self,
        request: weaveapi.auth.v1.service_pb2.CreateAPIKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.CreateAPIKeyResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.CreateAPIKeyResponse],
    ]:
        """Create new API key"""

    @abc.abstractmethod
    def GetAPIKey(
        self,
        request: weaveapi.auth.v1.service_pb2.GetAPIKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.GetAPIKeyResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.GetAPIKeyResponse],
    ]:
        """Get API key details"""

    @abc.abstractmethod
    def UpdateAPIKey(
        self,
        request: weaveapi.auth.v1.service_pb2.UpdateAPIKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.UpdateAPIKeyResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.UpdateAPIKeyResponse],
    ]:
        """Update API key (rename, etc)"""

    @abc.abstractmethod
    def RevokeAPIKey(
        self,
        request: weaveapi.auth.v1.service_pb2.RevokeAPIKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.RevokeAPIKeyResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.RevokeAPIKeyResponse],
    ]:
        """Revoke API key"""

    @abc.abstractmethod
    def ValidateAPIKey(
        self,
        request: weaveapi.auth.v1.service_pb2.ValidateAPIKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.ValidateAPIKeyResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.ValidateAPIKeyResponse],
    ]:
        """Validate API key (for internal use)"""

    @abc.abstractmethod
    def GetUsageStats(
        self,
        request: weaveapi.auth.v1.service_pb2.GetUsageStatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.GetUsageStatsResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.GetUsageStatsResponse],
    ]:
        """Usage and limits

        Get user's API usage statistics
        """

    @abc.abstractmethod
    def GetRateLimitStatus(
        self,
        request: weaveapi.auth.v1.service_pb2.GetRateLimitStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.GetRateLimitStatusResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.GetRateLimitStatusResponse
        ],
    ]:
        """Get rate limit status"""

    @abc.abstractmethod
    def ListSessions(
        self,
        request: weaveapi.auth.v1.service_pb2.ListSessionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.ListSessionsResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.ListSessionsResponse],
    ]:
        """Session management

        List active sessions
        """

    @abc.abstractmethod
    def RevokeSession(
        self,
        request: weaveapi.auth.v1.service_pb2.RevokeSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.RevokeSessionResponse,
        collections.abc.Awaitable[weaveapi.auth.v1.service_pb2.RevokeSessionResponse],
    ]:
        """Revoke a specific session"""

    @abc.abstractmethod
    def RevokeAllSessions(
        self,
        request: weaveapi.auth.v1.service_pb2.RevokeAllSessionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.auth.v1.service_pb2.RevokeAllSessionsResponse,
        collections.abc.Awaitable[
            weaveapi.auth.v1.service_pb2.RevokeAllSessionsResponse
        ],
    ]:
        """Revoke all sessions except current"""

def add_AuthServicer_to_server(
    servicer: AuthServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
