"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import weaveapi.payment.v1.service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...
class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PaymentStub:
    """PaymentService handles subscription management and payment processing
    Subscription management
    """

    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    CreateCheckoutSession: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CreateCheckoutSessionRequest,
        weaveapi.payment.v1.service_pb2.CreateCheckoutSessionResponse,
    ]
    """Create a Stripe checkout session for subscription"""

    GetSubscriptionStatus: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetSubscriptionStatusRequest,
        weaveapi.payment.v1.service_pb2.GetSubscriptionStatusResponse,
    ]
    """Get current subscription status"""

    UpdateSubscription: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.UpdateSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.UpdateSubscriptionResponse,
    ]
    """Update subscription (change payment method, etc)"""

    CancelSubscription: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CancelSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.CancelSubscriptionResponse,
    ]
    """Cancel subscription"""

    ResumeSubscription: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ResumeSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.ResumeSubscriptionResponse,
    ]
    """Resume cancelled subscription"""

    GetBillingHistory: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetBillingHistoryRequest,
        weaveapi.payment.v1.service_pb2.GetBillingHistoryResponse,
    ]
    """Billing & Payment Methods

    Get billing history
    """

    GetUpcomingInvoice: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceRequest,
        weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceResponse,
    ]
    """Get upcoming invoice preview"""

    ListPaymentMethods: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ListPaymentMethodsRequest,
        weaveapi.payment.v1.service_pb2.ListPaymentMethodsResponse,
    ]
    """List payment methods"""

    AddPaymentMethod: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.AddPaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.AddPaymentMethodResponse,
    ]
    """Add payment method"""

    SetDefaultPaymentMethod: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodResponse,
    ]
    """Set default payment method"""

    RemovePaymentMethod: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.RemovePaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.RemovePaymentMethodResponse,
    ]
    """Remove payment method"""

    CreatePortalSession: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CreatePortalSessionRequest,
        weaveapi.payment.v1.service_pb2.CreatePortalSessionResponse,
    ]
    """Customer Portal

    Create Stripe customer portal session
    """

    GetPricingPlans: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetPricingPlansRequest,
        weaveapi.payment.v1.service_pb2.GetPricingPlansResponse,
    ]
    """Pricing & Plans

    Get available pricing plans
    """

    ApplyPromoCode: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ApplyPromoCodeRequest,
        weaveapi.payment.v1.service_pb2.ApplyPromoCodeResponse,
    ]
    """Apply promo code"""

    HandleStripeWebhook: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.HandleStripeWebhookRequest,
        weaveapi.payment.v1.service_pb2.HandleStripeWebhookResponse,
    ]
    """Webhooks

    Handle Stripe webhook events
    """

    GetUsageSummary: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetUsageSummaryRequest,
        weaveapi.payment.v1.service_pb2.GetUsageSummaryResponse,
    ]
    """Usage & Credits

    Get usage summary for billing period
    """

    GetCreditBalance: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetCreditBalanceRequest,
        weaveapi.payment.v1.service_pb2.GetCreditBalanceResponse,
    ]
    """Get credit balance (if applicable)"""

    UpdateTaxInfo: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.UpdateTaxInfoRequest,
        weaveapi.payment.v1.service_pb2.UpdateTaxInfoResponse,
    ]
    """Tax & Compliance

    Update tax information
    """

    DownloadInvoice: grpc.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.DownloadInvoiceRequest,
        weaveapi.payment.v1.service_pb2.DownloadInvoiceResponse,
    ]
    """Download invoice PDF"""

class PaymentAsyncStub:
    """PaymentService handles subscription management and payment processing
    Subscription management
    """

    CreateCheckoutSession: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CreateCheckoutSessionRequest,
        weaveapi.payment.v1.service_pb2.CreateCheckoutSessionResponse,
    ]
    """Create a Stripe checkout session for subscription"""

    GetSubscriptionStatus: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetSubscriptionStatusRequest,
        weaveapi.payment.v1.service_pb2.GetSubscriptionStatusResponse,
    ]
    """Get current subscription status"""

    UpdateSubscription: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.UpdateSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.UpdateSubscriptionResponse,
    ]
    """Update subscription (change payment method, etc)"""

    CancelSubscription: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CancelSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.CancelSubscriptionResponse,
    ]
    """Cancel subscription"""

    ResumeSubscription: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ResumeSubscriptionRequest,
        weaveapi.payment.v1.service_pb2.ResumeSubscriptionResponse,
    ]
    """Resume cancelled subscription"""

    GetBillingHistory: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetBillingHistoryRequest,
        weaveapi.payment.v1.service_pb2.GetBillingHistoryResponse,
    ]
    """Billing & Payment Methods

    Get billing history
    """

    GetUpcomingInvoice: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceRequest,
        weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceResponse,
    ]
    """Get upcoming invoice preview"""

    ListPaymentMethods: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ListPaymentMethodsRequest,
        weaveapi.payment.v1.service_pb2.ListPaymentMethodsResponse,
    ]
    """List payment methods"""

    AddPaymentMethod: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.AddPaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.AddPaymentMethodResponse,
    ]
    """Add payment method"""

    SetDefaultPaymentMethod: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodResponse,
    ]
    """Set default payment method"""

    RemovePaymentMethod: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.RemovePaymentMethodRequest,
        weaveapi.payment.v1.service_pb2.RemovePaymentMethodResponse,
    ]
    """Remove payment method"""

    CreatePortalSession: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.CreatePortalSessionRequest,
        weaveapi.payment.v1.service_pb2.CreatePortalSessionResponse,
    ]
    """Customer Portal

    Create Stripe customer portal session
    """

    GetPricingPlans: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetPricingPlansRequest,
        weaveapi.payment.v1.service_pb2.GetPricingPlansResponse,
    ]
    """Pricing & Plans

    Get available pricing plans
    """

    ApplyPromoCode: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.ApplyPromoCodeRequest,
        weaveapi.payment.v1.service_pb2.ApplyPromoCodeResponse,
    ]
    """Apply promo code"""

    HandleStripeWebhook: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.HandleStripeWebhookRequest,
        weaveapi.payment.v1.service_pb2.HandleStripeWebhookResponse,
    ]
    """Webhooks

    Handle Stripe webhook events
    """

    GetUsageSummary: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetUsageSummaryRequest,
        weaveapi.payment.v1.service_pb2.GetUsageSummaryResponse,
    ]
    """Usage & Credits

    Get usage summary for billing period
    """

    GetCreditBalance: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.GetCreditBalanceRequest,
        weaveapi.payment.v1.service_pb2.GetCreditBalanceResponse,
    ]
    """Get credit balance (if applicable)"""

    UpdateTaxInfo: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.UpdateTaxInfoRequest,
        weaveapi.payment.v1.service_pb2.UpdateTaxInfoResponse,
    ]
    """Tax & Compliance

    Update tax information
    """

    DownloadInvoice: grpc.aio.UnaryUnaryMultiCallable[
        weaveapi.payment.v1.service_pb2.DownloadInvoiceRequest,
        weaveapi.payment.v1.service_pb2.DownloadInvoiceResponse,
    ]
    """Download invoice PDF"""

class PaymentServicer(metaclass=abc.ABCMeta):
    """PaymentService handles subscription management and payment processing
    Subscription management
    """

    @abc.abstractmethod
    def CreateCheckoutSession(
        self,
        request: weaveapi.payment.v1.service_pb2.CreateCheckoutSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.CreateCheckoutSessionResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.CreateCheckoutSessionResponse
        ],
    ]:
        """Create a Stripe checkout session for subscription"""

    @abc.abstractmethod
    def GetSubscriptionStatus(
        self,
        request: weaveapi.payment.v1.service_pb2.GetSubscriptionStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetSubscriptionStatusResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetSubscriptionStatusResponse
        ],
    ]:
        """Get current subscription status"""

    @abc.abstractmethod
    def UpdateSubscription(
        self,
        request: weaveapi.payment.v1.service_pb2.UpdateSubscriptionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.UpdateSubscriptionResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.UpdateSubscriptionResponse
        ],
    ]:
        """Update subscription (change payment method, etc)"""

    @abc.abstractmethod
    def CancelSubscription(
        self,
        request: weaveapi.payment.v1.service_pb2.CancelSubscriptionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.CancelSubscriptionResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.CancelSubscriptionResponse
        ],
    ]:
        """Cancel subscription"""

    @abc.abstractmethod
    def ResumeSubscription(
        self,
        request: weaveapi.payment.v1.service_pb2.ResumeSubscriptionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.ResumeSubscriptionResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.ResumeSubscriptionResponse
        ],
    ]:
        """Resume cancelled subscription"""

    @abc.abstractmethod
    def GetBillingHistory(
        self,
        request: weaveapi.payment.v1.service_pb2.GetBillingHistoryRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetBillingHistoryResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetBillingHistoryResponse
        ],
    ]:
        """Billing & Payment Methods

        Get billing history
        """

    @abc.abstractmethod
    def GetUpcomingInvoice(
        self,
        request: weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetUpcomingInvoiceResponse
        ],
    ]:
        """Get upcoming invoice preview"""

    @abc.abstractmethod
    def ListPaymentMethods(
        self,
        request: weaveapi.payment.v1.service_pb2.ListPaymentMethodsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.ListPaymentMethodsResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.ListPaymentMethodsResponse
        ],
    ]:
        """List payment methods"""

    @abc.abstractmethod
    def AddPaymentMethod(
        self,
        request: weaveapi.payment.v1.service_pb2.AddPaymentMethodRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.AddPaymentMethodResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.AddPaymentMethodResponse
        ],
    ]:
        """Add payment method"""

    @abc.abstractmethod
    def SetDefaultPaymentMethod(
        self,
        request: weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.SetDefaultPaymentMethodResponse
        ],
    ]:
        """Set default payment method"""

    @abc.abstractmethod
    def RemovePaymentMethod(
        self,
        request: weaveapi.payment.v1.service_pb2.RemovePaymentMethodRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.RemovePaymentMethodResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.RemovePaymentMethodResponse
        ],
    ]:
        """Remove payment method"""

    @abc.abstractmethod
    def CreatePortalSession(
        self,
        request: weaveapi.payment.v1.service_pb2.CreatePortalSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.CreatePortalSessionResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.CreatePortalSessionResponse
        ],
    ]:
        """Customer Portal

        Create Stripe customer portal session
        """

    @abc.abstractmethod
    def GetPricingPlans(
        self,
        request: weaveapi.payment.v1.service_pb2.GetPricingPlansRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetPricingPlansResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetPricingPlansResponse
        ],
    ]:
        """Pricing & Plans

        Get available pricing plans
        """

    @abc.abstractmethod
    def ApplyPromoCode(
        self,
        request: weaveapi.payment.v1.service_pb2.ApplyPromoCodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.ApplyPromoCodeResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.ApplyPromoCodeResponse
        ],
    ]:
        """Apply promo code"""

    @abc.abstractmethod
    def HandleStripeWebhook(
        self,
        request: weaveapi.payment.v1.service_pb2.HandleStripeWebhookRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.HandleStripeWebhookResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.HandleStripeWebhookResponse
        ],
    ]:
        """Webhooks

        Handle Stripe webhook events
        """

    @abc.abstractmethod
    def GetUsageSummary(
        self,
        request: weaveapi.payment.v1.service_pb2.GetUsageSummaryRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetUsageSummaryResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetUsageSummaryResponse
        ],
    ]:
        """Usage & Credits

        Get usage summary for billing period
        """

    @abc.abstractmethod
    def GetCreditBalance(
        self,
        request: weaveapi.payment.v1.service_pb2.GetCreditBalanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.GetCreditBalanceResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.GetCreditBalanceResponse
        ],
    ]:
        """Get credit balance (if applicable)"""

    @abc.abstractmethod
    def UpdateTaxInfo(
        self,
        request: weaveapi.payment.v1.service_pb2.UpdateTaxInfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.UpdateTaxInfoResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.UpdateTaxInfoResponse
        ],
    ]:
        """Tax & Compliance

        Update tax information
        """

    @abc.abstractmethod
    def DownloadInvoice(
        self,
        request: weaveapi.payment.v1.service_pb2.DownloadInvoiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        weaveapi.payment.v1.service_pb2.DownloadInvoiceResponse,
        collections.abc.Awaitable[
            weaveapi.payment.v1.service_pb2.DownloadInvoiceResponse
        ],
    ]:
        """Download invoice PDF"""

def add_PaymentServicer_to_server(
    servicer: PaymentServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
