"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6856],{32045:function(e,t,r){r.d(t,{Cu:function(){return s},R8:function(){return i},ef:function(){return n}});var o=r(93225),a=r(47145);async function n(){let e=!(arguments.length>0)||void 0===arguments[0]||arguments[0],t=(await Promise.resolve().then(r.bind(r,6378))).default,{getClusters:n}=await Promise.resolve().then(r.bind(r,23266)),{getManagedJobs:s}=await Promise.resolve().then(r.bind(r,68969));try{let r=await t.get(s,[{allUsers:!0}]),l=(null==r?void 0:r.jobs)||[],c=await t.get(n),i=[];try{if(e){console.log("Force refreshing clouds by running sky check...");try{let e=await a.x.post("/check",{}),t=e.headers.get("X-Skypilot-Request-ID")||e.headers.get("X-Request-ID"),r=await a.x.get("/api/get?request_id=".concat(t)),o=await r.json();console.log("Sky check completed:",o)}catch(e){console.error("Error running sky check:",e)}}let t=await a.x.get("/enabled_clouds"),r=t.headers.get("X-Skypilot-Request-ID")||t.headers.get("X-Request-ID"),o=await a.x.get("/api/get?request_id=".concat(r)),n=await o.json();i=n.return_value?JSON.parse(n.return_value):[],console.log("Enabled clouds:",i)}catch(e){console.error("Error fetching enabled clouds:",e),i=[]}let u={};o.$m.forEach(e=>{let t=i.includes(e.toLowerCase());u[e]={name:e,clusters:0,jobs:0,enabled:t}}),(c||[]).forEach(e=>{if(e.cloud){let t=e.cloud;u[t]&&(u[t].clusters+=1,u[t].enabled=!0)}}),l.forEach(e=>{if(e.cloud){let t=e.cloud;u[t]&&(u[t].jobs+=1,u[t].enabled=!0)}});let d=o.$m.length,g=Object.values(u).filter(e=>e.enabled).length;return{clouds:Object.values(u).filter(e=>e.enabled).sort((e,t)=>e.name.localeCompare(t.name)),totalClouds:d,enabledClouds:g}}catch(e){return console.error("Error fetching cloud infrastructure:",e),{clouds:[],totalClouds:o.$m.length,enabledClouds:0}}}async function s(){let e=(await Promise.resolve().then(r.bind(r,6378))).default,{getClusters:t}=await Promise.resolve().then(r.bind(r,23266)),o=await e.get(t);return await d(o||[])}async function l(){try{let e=await a.x.get("/all_contexts");if(!e.ok)return console.error("Error fetching all contexts: ".concat(e.status," ").concat(e.statusText)),[];let t=e.headers.get("X-Skypilot-Request-ID")||e.headers.get("x-request-id");if(!t)return console.error("No request ID returned for /all_contexts"),[];let r=await a.x.get("/api/get?request_id=".concat(t)),o=await r.json();return o.return_value?JSON.parse(o.return_value):[]}catch(e){return console.error("[infra.jsx] Error in getAllContexts:",e),[]}}async function c(e){try{let t=await a.x.post("/kubernetes_node_info",{context:e}),r=t.headers.get("X-Skypilot-Request-ID")||t.headers.get("x-request-id"),o=await a.x.get("/api/get?request_id=".concat(r));if(500===o.status){try{let e=await o.json();if(e.detail&&e.detail.error)try{let t=JSON.parse(e.detail.error);console.error("Error fetching Kubernetes per node GPUs:",t.message)}catch(e){console.error("Error parsing JSON:",e)}}catch(e){console.error("Error parsing JSON:",e)}return{}}let n=await o.json();return(n.return_value?JSON.parse(n.return_value):{}).node_info_dict||{}}catch(t){return console.error("[infra.jsx] Error in getKubernetesPerNodeGPUs for context",e,":",t),{}}}async function i(e){try{let t={};return e.forEach(e=>{let r=null;if("Kubernetes"===e.cloud)(r=e.region)&&(r="kubernetes/".concat(r));else if("SSH"===e.cloud&&(r=e.region)){let e=r.startsWith("ssh-")?r.substring(4):r;r="ssh/".concat(e)}r&&(t[r]||(t[r]={clusters:0,jobs:0}),t[r].jobs+=1)}),t}catch(e){return console.error("=== Error in getContextJobs ===",e),{}}}async function u(e){try{let t={};return e.forEach(e=>{let r=null;if("Kubernetes"===e.cloud)(r=e.region)&&(r="kubernetes/".concat(r));else if("SSH"===e.cloud&&(r=e.region)){let e=r.startsWith("ssh-")?r.substring(4):r;r="ssh/".concat(e)}r&&(t[r]||(t[r]={clusters:0,jobs:0}),t[r].clusters+=1)}),t}catch(e){return console.error("=== Error in getContextClusters ===",e),{}}}async function d(e){try{let n=await l();if(!n||0===n.length)return console.log("No contexts found from /all_contexts endpoint."),{allContextNames:[],allGPUs:[],perContextGPUs:[],perNodeGPUs:[],contextStats:{}};let s=await u(e),i={},d={},g={},f=await Promise.all(n.map(e=>c(e))),h={};for(let e=0;e<n.length;e++)h[n[e]]=f[e];for(let e of n){let t=h[e]||{};if(t&&Object.keys(t).length>0){let r={};for(let o in t){let a=t[o],n=a.accelerator_type,s=a.total.accelerator_count,l=a.free.accelerators_available;s>0&&(r[n]||(r[n]={gpu_name:n,gpu_requestable_qty_per_node:0,gpu_total:0,gpu_free:0,context:e}),r[n].gpu_total+=s,r[n].gpu_free+=l,r[n].gpu_requestable_qty_per_node=s)}for(let t in d[e]=Object.values(r),r)t in i?(i[t].gpu_total+=r[t].gpu_total,i[t].gpu_free+=r[t].gpu_free):i[t]={gpu_total:r[t].gpu_total,gpu_free:r[t].gpu_free,gpu_name:t}}}for(let e of n){let n=h[e];if(n&&Object.keys(n).length>0)for(let s in n){var t,r,o,a;let l=n[s],c=l.accelerator_type||"-",u=null!==(o=null===(t=l.total)||void 0===t?void 0:t.accelerator_count)&&void 0!==o?o:0,f=null!==(a=null===(r=l.free)||void 0===r?void 0:r.accelerators_available)&&void 0!==a?a:0;g["".concat(e,"/").concat(s)]={node_name:l.name,gpu_name:c,gpu_total:u,gpu_free:f,ip_address:l.ip_address||null,context:e},"-"===c||d[e].some(e=>e.gpu_name===c)||(c in i||(i[c]={gpu_total:0,gpu_free:0,gpu_name:c}),d[e].find(e=>e.gpu_name===c)||d[e].push({gpu_name:c,gpu_requestable_qty_per_node:"-",gpu_total:0,gpu_free:0,context:e}))}0===d[e].length&&n&&Object.keys(n).length}return{allContextNames:n.sort(),allGPUs:Object.values(i).sort((e,t)=>e.gpu_name.localeCompare(t.gpu_name)),perContextGPUs:Object.values(d).flat().sort((e,t)=>e.context.localeCompare(t.context)||e.gpu_name.localeCompare(t.gpu_name)),perNodeGPUs:Object.values(g).sort((e,t)=>e.context.localeCompare(t.context)||e.node_name.localeCompare(t.node_name)||e.gpu_name.localeCompare(t.gpu_name)),contextStats:s}}catch(e){return console.error("[infra.jsx] Outer error in getKubernetesGPUs:",e),{allContextNames:[],allGPUs:[],perContextGPUs:[],perNodeGPUs:[],contextStats:{}}}}},29326:function(e,t,r){r.d(t,{IS:function(){return d},It:function(){return n},MV:function(){return l},Ri:function(){return s},_x:function(){return i},ez:function(){return u},hY:function(){return c},mF:function(){return f},wJ:function(){return g}});var o=r(93225),a=r(15821);async function n(){try{let e=await fetch("".concat(o.f4,"/ssh_node_pools"),{method:"GET",headers:{"Content-Type":"application/json"}});if(!e.ok)throw Error("HTTP error! status: ".concat(e.status));return await e.json()}catch(e){return console.error("Error fetching SSH Node Pools:",e),{}}}async function s(e){try{let t=await fetch("".concat(o.f4,"/ssh_node_pools"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));return await t.json()}catch(e){throw console.error("Error updating SSH Node Pools:",e),e}}async function l(e){try{let t=await fetch("".concat(o.f4,"/ssh_node_pools/").concat(e),{method:"DELETE",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));return await t.json()}catch(e){throw console.error("Error deleting SSH Node Pool:",e),e}}async function c(e,t){try{let r=new FormData;r.append("key_name",e),r.append("key_file",t);let a=await fetch("".concat(o.f4,"/ssh_node_pools/keys"),{method:"POST",body:r});if(!a.ok)throw Error("HTTP error! status: ".concat(a.status));return await a.json()}catch(e){throw console.error("Error uploading SSH key:",e),e}}async function i(e){try{let t=await fetch("".concat(o.f4,"/ssh_node_pools/").concat(e,"/deploy"),{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));return await t.json()}catch(e){throw console.error("Error deploying SSH Node Pool:",e),e}}async function u(e){try{let t=await fetch("".concat(o.f4,"/ssh_node_pools/").concat(e,"/down"),{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));return await t.json()}catch(e){throw console.error("Error tearing down SSH Node Pool:",e),e}}async function d(e){try{let t=await fetch("".concat(o.f4,"/ssh_node_pools/").concat(e,"/status"),{method:"GET",headers:{"Content-Type":"application/json"}});if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));return await t.json()}catch(e){throw console.error("Error fetching SSH Node Pool status:",e),e}}async function g(e){let t,{requestId:r,signal:n,onNewLog:s}=e,l=Date.now(),c=new Promise(e=>{let r=()=>{let o=Date.now()-l;o>=3e5?e({timeout:!0}):t=setTimeout(r,3e5-o)};t=setTimeout(r,3e5)}),i=(async()=>{try{let e=await fetch("".concat(o.f4,"/api/stream?request_id=").concat(r,"&format=plain&tail=").concat(1e3,"&follow=true"),{method:"GET",headers:{"Content-Type":"application/json"},...n?{signal:n}:{}});if(!e.ok)throw Error("HTTP error! status: ".concat(e.status));let a=e.body.getReader();try{for(;;){let{done:e,value:t}=await a.read();if(e)break;l=Date.now();let r=new TextDecoder().decode(t);s(r)}}finally{a.cancel(),t&&clearTimeout(t)}return{timeout:!1}}catch(e){if(t&&clearTimeout(t),"AbortError"===e.name)return{timeout:!1};throw e}})(),u=await Promise.race([i,c]);if(t&&clearTimeout(t),u.timeout){(0,a.C)("SSH deployment log stream timed out after ".concat(300,"s of inactivity"),"warning");return}}async function f(e){let t,{requestId:r,signal:n,onNewLog:s,operationType:l="operation"}=e,c=Date.now(),i=new Promise(e=>{let r=()=>{let o=Date.now()-c;o>=3e5?e({timeout:!0}):t=setTimeout(r,3e5-o)};t=setTimeout(r,3e5)}),u=(async()=>{try{let e=await fetch("".concat(o.f4,"/api/stream?request_id=").concat(r,"&format=plain&tail=").concat(1e3,"&follow=true"),{method:"GET",headers:{"Content-Type":"application/json"},...n?{signal:n}:{}});if(!e.ok)throw Error("HTTP error! status: ".concat(e.status));let a=e.body.getReader();try{for(;;){let{done:e,value:t}=await a.read();if(e)break;c=Date.now();let r=new TextDecoder().decode(t);s(r)}}finally{a.cancel(),t&&clearTimeout(t)}return{timeout:!1}}catch(e){if(t&&clearTimeout(t),"AbortError"===e.name)return{timeout:!1};throw e}})(),d=await Promise.race([u,i]);if(t&&clearTimeout(t),d.timeout){(0,a.C)("SSH ".concat(l," log stream timed out after ").concat(300,"s of inactivity"),"warning");return}}},19238:function(e,t,r){r.d(t,{C:function(){return a},w:function(){return n}});var o=r(47145);async function a(){try{return(await o.x.fetch("/volumes",{},"GET")).map(e=>{var t,r,o;let a=e.cloud||"";return e.region&&(a+="/".concat(e.region)),e.zone&&(a+="/".concat(e.zone)),{name:e.name,launched_at:e.launched_at,user_hash:e.user_hash,user_name:e.user_name||"-",workspace:e.workspace||"-",last_attached_at:e.last_attached_at,status:e.status,type:e.type,cloud:e.cloud,region:e.region,zone:e.zone,infra:a,size:"".concat(e.size,"Gi"),config:e.config,storage_class:(null===(t=e.config)||void 0===t?void 0:t.storage_class_name)||"-",access_mode:(null===(r=e.config)||void 0===r?void 0:r.access_mode)||"-",namespace:(null===(o=e.config)||void 0===o?void 0:o.namespace)||"-",name_on_cloud:e.name_on_cloud,usedby_pods:e.usedby_pods,usedby_clusters:e.usedby_clusters}})||[]}catch(e){return console.error("Failed to fetch volumes:",e),[]}}async function n(e){let t="";try{let r=await o.x.post("/volumes/delete",{names:[e]}),a=r.headers.get("X-SkyPilot-Request-ID")||r.headers.get("X-Request-ID"),n=await o.x.get("/api/get?request_id=".concat(a));if(500===n.status){try{let e=await n.json();if(e.detail&&e.detail.error)try{t=JSON.parse(e.detail.error).message}catch(e){console.error("Error parsing JSON:",e)}}catch(e){console.error("Error parsing JSON:",e)}return{success:!1,msg:t}}return{success:!0}}catch(e){return console.error("Failed to delete volume:",e),{success:!1,msg:e.message}}}},36856:function(e,t,r){var o=r(6378),a=r(23266),n=r(68969),s=r(17324),l=r(53081),c=r(19238),i=r(32045),u=r(29326);let d={base:{getClusters:{fn:a.getClusters,args:[]},getClusterHistory:{fn:a.uR,args:[]},getManagedJobs:{fn:n.aT,args:[{allUsers:!0}]},getWorkspaces:{fn:s.fX,args:[]},getUsers:{fn:l.R,args:[]},getGPUs:{fn:i.Cu,args:[]},getCloudInfrastructure:{fn:i.ef,args:[!1]},getSSHNodePools:{fn:u.It,args:[]},getVolumes:{fn:c.C,args:[]}},dynamic:{getEnabledClouds:{fn:s.yz,requiresWorkspaces:!0}},pages:{clusters:["getClusters","getClusterHistory","getWorkspaces"],jobs:["getManagedJobs","getClusters","getWorkspaces","getUsers"],infra:["getClusters","getManagedJobs","getGPUs","getCloudInfrastructure","getSSHNodePools"],workspaces:["getWorkspaces","getClusters","getManagedJobs","getEnabledClouds"],users:["getUsers","getClusters","getManagedJobs"],volumes:["getVolumes"]}};class g{async preloadForPage(e,t){let{backgroundPreload:r=!0,force:o=!1}=t||{};if(!d.pages[e]){console.warn("Unknown page: ".concat(e));return}console.log("[CachePreloader] Preloading cache for page: ".concat(e));try{await this._loadPageData(e,o),r&&this._backgroundPreloadOtherPages(e)}catch(t){console.error("[CachePreloader] Error preloading for page ".concat(e,":"),t)}}async _loadPageData(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=d.pages[e],a=[];for(let e of r)if(d.base[e]){let{fn:r,args:n}=d.base[e];t&&o.default.invalidate(r,n),a.push(o.default.get(r,n).then(e=>(this._markAsPreloaded(r,n),e)))}else"getEnabledClouds"===e&&a.push(this._loadEnabledCloudsForAllWorkspaces(t));await Promise.allSettled(a),console.log("[CachePreloader] Loaded data for page: ".concat(e))}async _loadEnabledCloudsForAllWorkspaces(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];try{e&&o.default.invalidate(s.fX);let t=await o.default.get(s.fX),r=Object.keys(t||{}).map(t=>(e&&o.default.invalidate(s.yz,[t]),o.default.get(s.yz,[t])));await Promise.allSettled(r)}catch(e){console.error("[CachePreloader] Error loading enabled clouds:",e)}}_backgroundPreloadOtherPages(e){if(this.isPreloading)return;this.isPreloading=!0;let t=new Set(d.pages[e]),r=new Set;Object.keys(d.pages).filter(t=>t!==e).forEach(e=>{d.pages[e].forEach(e=>{t.has(e)||r.add(e)})}),console.log("[CachePreloader] Background preloading ".concat(r.size," unique functions: ").concat(Array.from(r).join(", "))),Promise.allSettled(Array.from(r).map(async e=>{try{if(d.base[e]){let{fn:t,args:r}=d.base[e];await o.default.get(t,r),this._markAsPreloaded(t,r)}else"getEnabledClouds"===e&&await this._loadEnabledCloudsForAllWorkspaces(!1);console.log("[CachePreloader] Background loaded function: ".concat(e))}catch(t){console.error("[CachePreloader] Background load failed for function ".concat(e,":"),t)}})).then(()=>{this.isPreloading=!1,console.log("[CachePreloader] Background preloading complete")})}async preloadBaseFunctions(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];console.log("[CachePreloader] Preloading all base functions");let t=Object.entries(d.base).map(t=>{let[r,{fn:a,args:n}]=t;return e&&o.default.invalidate(a,n),o.default.get(a,n).catch(e=>{console.error("[CachePreloader] Failed to preload ".concat(r,":"),e)})});await Promise.allSettled(t),console.log("[CachePreloader] Base functions preloaded")}getCacheStats(){return{...o.default.getStats(),isPreloading:this.isPreloading}}wasRecentlyPreloaded(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=this._generateKey(e,t),o=this.recentlyPreloaded.get(r);if(!o)return!1;let a=Date.now()-o<this.PRELOAD_GRACE_PERIOD;return a||this.recentlyPreloaded.delete(r),a}_markAsPreloaded(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=this._generateKey(e,t);this.recentlyPreloaded.set(r,Date.now())}_generateKey(e,t){let r=e.toString(),o=this._simpleHash(r),a=t.length>0?JSON.stringify(t):"";return"".concat(o,"_").concat(a)}_simpleHash(e){let t=5381;for(let r=0;r<e.length;r++)t=(t<<5)+t+e.charCodeAt(r);return t>>>0}clearCache(){o.default.clear(),this.isPreloading=!1,this.preloadPromises.clear(),this.recentlyPreloaded.clear(),console.log("[CachePreloader] Cache cleared")}constructor(){this.isPreloading=!1,this.preloadPromises=new Map,this.recentlyPreloaded=new Map,this.PRELOAD_GRACE_PERIOD=5e3}}let f=new g;o.default.setPreloader(f),t.ZP=f}}]);