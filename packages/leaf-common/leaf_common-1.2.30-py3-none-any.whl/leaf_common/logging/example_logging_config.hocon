
# Copyright (C) 2019-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# leaf-common SDK Software in commercial settings.
#
# END COPYRIGHT
{
    # Example logging configuration file for output that happens on an app using
    # the LoggingSetup class.
    # See https://docs.python.org/3/library/logging.config.html
    # for full documentation on Python logging configuration.

    "version": 1,
    "disable_existing_loggers": true,

    # We define a number of common logging formats that adorn each single line
    # with potential extra information.  Formatters are referenced by name in
    # the "handlers" section below.
    "formatters": {
        "passthrough": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(message)s"
        },
        "brief": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(asctime)s %(levelname)-8s %(name)-15s %(message)s"
        },
        "single-line": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(levelname)-8s; %(asctime)s; %(name)-15s; %(module)s:%(funcName)s;%(lineno)d: %(message)s"
        },
        "multi-process": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(levelname)-8s; [%(process)d]; %(name)-15s; %(module)s:%(funcName)s;%(lineno)d: %(message)s"
        },
        "multi-thread": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(levelname)-8s; %(threadName)s; %(name)-15s; %(module)s:%(funcName)s;%(lineno)d: %(message)s"
        },
        "verbose": {
            "class": "logging.Formatter",
            "datefmt": "%H:%M:%S",
            "format": "%(levelname)-8s; [%(process)d]; %(threadName)s; %(name)-15s; %(module)s:%(funcName)s;%(lineno)d: %(message)s"
        },
        "multiline": {
            "class": "logging.Formatter",
            "format": "Level: %(levelname)s\nTime: %(asctime)s\nProcess: %(process)d\nThread: %(threadName)s\nLogger: %(name)s\nPath: %(module)s:%(lineno)d\nFunction :%(funcName)s\nMessage: %(message)s\n"
        }
    },

    # Each Handler allows for a single definition of an independent logging
    # stream. They generally pair where the logging output goes with how the
    # output should be formatted by mentioning the formatter definition above.
    "handlers": {
        "console":{
            "level": "INFO",
            "class": "logging.StreamHandler",

            # Use the 'passthrough' definition above to be sure unadorned output
            # continues to flow to the console/stdout as it had before.
            "formatter": "passthrough",

            # This is python logging's way of saying
            # "send a stream of logging to the console"
            "stream" : "ext://sys.stdout"
        },
        "file_handler": {
            "level": "INFO",
            "class": "logging.handlers.WatchedFileHandler",

            # Use the 'brief' definition above to put some extra information
            # in the log file kept in the results folder. This includes
            # timestamp, log level, and information about the module producing
            # the log message.
            "formatter": "brief",

            # Apps might conspire to replace this filename with a log file name
            # that is generated by code and reflects the results folder and
            # experiment id.
            "filename": "<experiment_dir>/<replaced_by_code>.txt",
            "mode": "a",
            "encoding": "utf-8"
        }
    },

    # This loggers section allows tweaking the logging level output of specific
    # python modules. The settings here are to reduce noice introduced in the
    # output to bring the output in line with what was originally produced
    # before moving to the python logging infrastructure for everything.
    # This configuration applies to all handlers defined above.
    "loggers": {
        "filelock": {
            "level": "WARNING"
        }
    },

    # This root section brings together all the sections defined previously
    # by delineating which handlers should be invoked for any log message.
    "root": {
        "handlers": ["console", "file_handler"],
        "level": "DEBUG"
    }
}
