name: Version, Build, and Publish

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv CLI
        uses: astral-sh/setup-uv@v4
        with:
          version: latest
          enable-cache: true

      - name: Sync dependencies with uv
        run: uv sync

      - name: Install pytest
        run: pip install pytest pytest-xdist[psutil]

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Calculate next patch version from latest tag (using gh)
        id: get_version
        run: |
          echo "Fetching tags using gh CLI..."

          TAGS=$(gh api repos/${{ github.repository }}/tags --jq '.[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)

          echo "All semver tags found:"
          echo "$TAGS"

          LATEST_TAG=$(echo "$TAGS" | tail -n1)
          echo "Latest tag found: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION="0.0.1"
            echo "No tags found, starting at $NEXT_VERSION"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Incremented patch version to $NEXT_VERSION"
          fi

          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update version strings in files
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          echo "Updating pyproject.toml version to $VERSION"
          sed -i -E "s/(^version *= *\")([0-9]+\.[0-9]+\.[0-9]+)(\")/\1$VERSION\3/" pyproject.toml

          echo "Updating uv.lock version to $VERSION"
          sed -i -E "s/(^version *= *\")([0-9]+\.[0-9]+\.[0-9]+)(\")/\1$VERSION\3/" uv.lock

          echo "Updating src/sfq/__init__.py user_agent to $VERSION"
          sed -i -E "s/(user_agent: str = \"sfq\/)[0-9]+\.[0-9]+\.[0-9]+(\")/\1$VERSION\2/" src/sfq/__init__.py
          sed -i -E "s/(default is \"sfq\/)[0-9]+\.[0-9]+\.[0-9]+(\")/\1$VERSION\2/" src/sfq/__init__.py

          echo "Updating src/sfq/__init__.py __version__ to $VERSION"
          sed -i -E "s/(self.__version__ = \")[0-9]+\.[0-9]+\.[0-9]+(\")/\1$VERSION\2/" src/sfq/__init__.py
          sed -i -E "s/(__version__ = \")[0-9]+\.[0-9]+\.[0-9]+(\")/\1$VERSION\2/" src/sfq/__init__.py
          
          echo "Updating src/sfq/http_client.py user_agent to $VERSION"
          sed -i -E "s/(user_agent: str = \"sfq\/)[0-9]+\.[0-9]+\.[0-9]+(\")/\1$VERSION\2/" src/sfq/http_client.py
          sed -i -E "s/(user_agent: str = \"sfq\/)[0-9]+\.[0-9]+\.[0-9]+(\",)/\1$VERSION\2/" src/sfq/http_client.py

      - name: Run tests
        run: pytest --verbose --strict-config -n auto
        env:
          PYTHONPATH: src
          SF_INSTANCE_URL: ${{ secrets.SF_INSTANCE_URL }}
          SF_CLIENT_ID: ${{ secrets.SF_CLIENT_ID }}
          SF_CLIENT_SECRET: ${{ secrets.SF_CLIENT_SECRET }}
          SF_REFRESH_TOKEN: ${{ secrets.SF_REFRESH_TOKEN }}
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}

      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml uv.lock src/sfq/__init__.py src/sfq/http_client.py
          git commit -m "CI: bump version to ${{ steps.get_version.outputs.version }}"
          git push

      - name: Create and push git tag
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          git tag $VERSION
          git push origin $VERSION

      - name: Build package with uv
        run: uv build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Upload artifacts to GitHub Release (prerelease)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          files: dist/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pdoc
        run: pip install pdoc

      - name: Generate docs
        run: pdoc sfq -o docs --no-search
        env:
          PYTHONPATH: src

      - name: Set sfq.html as default index page
        run: |
          rm docs/index.html
          mv docs/sfq.html docs/index.html


      - name: Prepare docs branch (first-time safe)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git fetch origin
          rm -rf docs-branch

          if git show-ref --verify --quiet refs/remotes/origin/docs; then
            echo "Branch 'docs' exists. Checking it out with worktree..."
            git worktree add -B docs docs-branch origin/docs
          else
            echo "Branch 'docs' does not exist. Creating new orphan branch..."
            mkdir docs-branch
            cd docs-branch
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git init
            git checkout --orphan docs
            git commit --allow-empty -m "CI: Initial empty commit"
            git remote add origin https://github.com/${{ github.repository }}.git
            git push origin docs
            cd ..
            git worktree add -B docs docs-branch origin/docs
          fi

      - name: Push generated docs to docs branch
        run: |
          rm -rf docs-branch/*
          cp -r docs/* docs-branch/
          cd docs-branch
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "CI: Update documentation" || echo "No changes to commit"
          git push origin docs --force
