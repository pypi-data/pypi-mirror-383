Metadata-Version: 2.4
Name: e4a
Version: 1.0.0
Summary: E4A — Evolutionary Educational Architecture SDK, CLI, and API
Home-page: https://github.com/YOUR_GITHUB_USERNAME/E4A
Author: Dan Everett
Author-email: Dan Everett <deverett@toltoncatholic.org>
License: MIT License
        
        Copyright (c) 2025 e4aproject
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/YOUR_GITHUB_USERNAME/E4A
Project-URL: Documentation, https://YOUR_GITHUB_USERNAME.github.io/E4A
Project-URL: Repository, https://github.com/YOUR_GITHUB_USERNAME/E4A
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.12.3
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: requests>=2.31.0
Requires-Dist: pydantic>=2.0
Requires-Dist: httpx>=0.27.0
Dynamic: license-file

# Ethos4Agents (E4A) Protocol

Ethos4Agents (E4A): An open protocol for organizational culture among multi‑agent systems
An open protocol enabling multi‑agent systems to express, share, and enforce organizational culture, governance primitives, and safety invariants while interoperating across diverse runtimes and administrative domains.

E4A complements existing standards such as MCP, A2A, and AP2 by reusing their interoperability and payments conventions where relevant while adding a focused layer for culture, governance, research, learning, and auditability. Where A2A standardizes agent discovery and messaging and AP2 addresses payments and economic rails, E4A defines the canonical artifacts and flows agents use to carry organizational intent: mandates, mission_log entries, human‑in‑the‑loop gates, verifier payloads, learning and self-improvement, and cultural audits. E4A makes these artifacts first‑class so agents can coordinate complex, long‑running work that honors shared norms, preserves traceability, and enforces minimal safety invariants across rails and implementations.

# Theoretical foundation and practical value
E4A’s power comes from being a standards-first protocol that is explicitly grounded in time‑tested theories of organizational culture and the science of learning; it operationalizes ideas from organizational culture, psychology, sociology, and constructivist learning so agents coordinate with the same norms, incentives, and traceability humans rely on in proven resilient and healthy organizations. 

E4A does not invent governance ad hoc; rather, it encodes verifiable cultural primitives like roles, mandate lifecycles, reflection windows, human‑in‑the‑loop gates, learning frameworks, and audit trails that map directly to measurable organizational constructs such as accountability, psychological safety, and decision transparency.

By turning these constructs into first‑class artifacts and validator rules, E4A makes it possible to automate both complex, multi‑agent and intersystem multi-agent workflows while preserving human‑centered checks, research traceability, and composable safety layers. The result is a protocol is both rigorous and practical. It is interoperable with existing messaging and payments rails, decoupled from any single runtime, and auditable end‑to‑end, enabling agents to scale collaborative work in ways that mirror proven human organizational practice rather than simple re‑inventing governance from scratch.

# Why E4A
As the number of multi‑agent systems become the norm, technologically cultural alignment and accountable governance will become the decisive factors that let agents coordinate reliably and at scale. E4A exists to:
- Establish a minimum expectation that all multi-agent systems are grounded in a consistent and research-based set of organizational norms. 
- Enable richer collaboration by making culture and governance first‑class artifacts agents can read, write, and reason about.
- Establish open standards that extend A2A messaging and AP2 economic rails with auditable cultural primitives, enabling interoperable toolchains and broad community adoption.
- Maintain opacity for proprietary implementations while ensuring accountability through signed mandates, mission_log audit trails, and verifier attestations.
- Reduce systemic risk by enforcing human‑in‑the‑loop gates, safety thresholds, and validator rules so sensitive actions require configurable human oversight and/or verified mandates.
- Accelerate engineering impact by providing reusable, measurable constructs that map to well‑tested organizational theories, letting teams build complex, multi‑agent applications that are resilient and healthy organizations.

# Goals
- Define canonical artifacts: mandate, mission_log, research_manifest, verifier payloads.
- Provide a reference implementation that demonstrates safe, auditable flows.
- Enable conformance, attestation, and registry-driven interoperability.
- Preserve openness while enforcing minimal safety invariants by default.


-------------------------------------------------------------------------------------------


# E4A Phase 1 - Quick Start

Files created:
- core/mandate_engine.py
- core/scribe_agent.py
- core/validator_runtime.py
- specs/mandate_v1.json
- specs/charter_v1.json
- specs/attestation_v1.json
- data/mission_log.jsonl (created on first run)

Requirements:
- Python 3.9+
- pip install jsonschema

Quick commands (from repo root):
1) Install:
   pip install jsonschema

2) Create a simple mandate (demo):
   python -c "from core.scribe_agent import ScribeAgent; from core.mandate_engine import MandateEngine; s=ScribeAgent(); m=MandateEngine(scribe=s); print(m.create_mandate({'issuer':'did:ex:alice','beneficiary':'did:ex:bob','amount':10,'currency':'USD'}))"

3) Run validator reflexivity tick:
   python -c "from core.validator_runtime import ValidatorRuntime; v=ValidatorRuntime(); print(v.reflexivity_tick())"

Notes:
- These modules are reference stubs to bootstrap Phase 1. Replace mission_log persistence and in-memory stores with production stores in later phases.
- Use the schemas in specs/ to extend validation and to design adapters.



