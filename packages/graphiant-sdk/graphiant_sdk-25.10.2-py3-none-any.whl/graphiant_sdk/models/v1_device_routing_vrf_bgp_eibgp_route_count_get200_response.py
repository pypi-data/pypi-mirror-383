# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_device_routing_vrf_bgp_eibgp_route_count_get200_response_ebgp_route_count import V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount
from typing import Optional, Set
from typing_extensions import Self

class V1DeviceRoutingVrfBgpEibgpRouteCountGet200Response(BaseModel):
    """
    V1DeviceRoutingVrfBgpEibgpRouteCountGet200Response
    """ # noqa: E501
    ebgp_route_count: Optional[V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount] = Field(default=None, alias="ebgpRouteCount")
    graphiant_route_count: Optional[V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount] = Field(default=None, alias="graphiantRouteCount")
    ibgp_route_count: Optional[V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount] = Field(default=None, alias="ibgpRouteCount")
    local_sourced_route_count: Optional[V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount] = Field(default=None, alias="localSourcedRouteCount")
    total_route_count: Optional[V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount] = Field(default=None, alias="totalRouteCount")
    __properties: ClassVar[List[str]] = ["ebgpRouteCount", "graphiantRouteCount", "ibgpRouteCount", "localSourcedRouteCount", "totalRouteCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DeviceRoutingVrfBgpEibgpRouteCountGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ebgp_route_count
        if self.ebgp_route_count:
            _dict['ebgpRouteCount'] = self.ebgp_route_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of graphiant_route_count
        if self.graphiant_route_count:
            _dict['graphiantRouteCount'] = self.graphiant_route_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ibgp_route_count
        if self.ibgp_route_count:
            _dict['ibgpRouteCount'] = self.ibgp_route_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_sourced_route_count
        if self.local_sourced_route_count:
            _dict['localSourcedRouteCount'] = self.local_sourced_route_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_route_count
        if self.total_route_count:
            _dict['totalRouteCount'] = self.total_route_count.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DeviceRoutingVrfBgpEibgpRouteCountGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ebgpRouteCount": V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount.from_dict(obj["ebgpRouteCount"]) if obj.get("ebgpRouteCount") is not None else None,
            "graphiantRouteCount": V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount.from_dict(obj["graphiantRouteCount"]) if obj.get("graphiantRouteCount") is not None else None,
            "ibgpRouteCount": V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount.from_dict(obj["ibgpRouteCount"]) if obj.get("ibgpRouteCount") is not None else None,
            "localSourcedRouteCount": V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount.from_dict(obj["localSourcedRouteCount"]) if obj.get("localSourcedRouteCount") is not None else None,
            "totalRouteCount": V1DeviceRoutingVrfBgpEibgpRouteCountGet200ResponseEbgpRouteCount.from_dict(obj["totalRouteCount"]) if obj.get("totalRouteCount") is not None else None
        })
        return _obj


