# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerIpfixExportersInner(BaseModel):
    """
    V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerIpfixExportersInner
    """ # noqa: E501
    destination_address: Optional[StrictStr] = Field(default=None, alias="destinationAddress")
    destination_port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="destinationPort")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    global_id: Optional[StrictInt] = Field(default=None, alias="globalId")
    id: Optional[StrictInt] = None
    monitored_segments: Optional[List[StrictStr]] = Field(default=None, alias="monitoredSegments")
    name: Optional[StrictStr] = None
    sample_mode: Optional[StrictStr] = Field(default=None, alias="sampleMode")
    sample_rate: Optional[StrictInt] = Field(default=None, alias="sampleRate")
    source_address: Optional[StrictStr] = Field(default=None, alias="sourceAddress")
    source_interface: Optional[StrictStr] = Field(default=None, alias="sourceInterface")
    source_segment: Optional[StrictStr] = Field(default=None, alias="sourceSegment")
    status: Optional[StrictStr] = None
    vrf_id: Optional[StrictInt] = Field(default=None, alias="vrfId")
    vrf_name: Optional[StrictStr] = Field(default=None, alias="vrfName")
    __properties: ClassVar[List[str]] = ["destinationAddress", "destinationPort", "errorMessage", "globalId", "id", "monitoredSegments", "name", "sampleMode", "sampleRate", "sourceAddress", "sourceInterface", "sourceSegment", "status", "vrfId", "vrfName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerIpfixExportersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerIpfixExportersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationAddress": obj.get("destinationAddress"),
            "destinationPort": obj.get("destinationPort"),
            "errorMessage": obj.get("errorMessage"),
            "globalId": obj.get("globalId"),
            "id": obj.get("id"),
            "monitoredSegments": obj.get("monitoredSegments"),
            "name": obj.get("name"),
            "sampleMode": obj.get("sampleMode"),
            "sampleRate": obj.get("sampleRate"),
            "sourceAddress": obj.get("sourceAddress"),
            "sourceInterface": obj.get("sourceInterface"),
            "sourceSegment": obj.get("sourceSegment"),
            "status": obj.get("status"),
            "vrfId": obj.get("vrfId"),
            "vrfName": obj.get("vrfName")
        })
        return _obj


