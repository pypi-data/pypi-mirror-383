# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_extranets_b2b_peering_consumer_customer_id_match_details_get200_response_details_inner_customer import V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerCustomer
from graphiant_sdk.models.v1_extranets_b2b_peering_consumer_customer_id_match_details_get200_response_details_inner_service import V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerService
from graphiant_sdk.models.v1_extranets_b2b_peering_match_service_to_customer_put_request_service_service_prefixes_inner import V1ExtranetsB2bPeeringMatchServiceToCustomerPutRequestServiceServicePrefixesInner
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInner(BaseModel):
    """
    V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInner
    """ # noqa: E501
    consumer_prefixes: Optional[List[StrictStr]] = Field(default=None, alias="consumerPrefixes")
    customer: Optional[V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerCustomer] = None
    service: Optional[V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerService] = None
    service_prefixes: Optional[List[V1ExtranetsB2bPeeringMatchServiceToCustomerPutRequestServiceServicePrefixesInner]] = Field(default=None, alias="servicePrefixes")
    __properties: ClassVar[List[str]] = ["consumerPrefixes", "customer", "service", "servicePrefixes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_prefixes (list)
        _items = []
        if self.service_prefixes:
            for _item_service_prefixes in self.service_prefixes:
                if _item_service_prefixes:
                    _items.append(_item_service_prefixes.to_dict())
            _dict['servicePrefixes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerPrefixes": obj.get("consumerPrefixes"),
            "customer": V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "service": V1ExtranetsB2bPeeringConsumerCustomerIdMatchDetailsGet200ResponseDetailsInnerService.from_dict(obj["service"]) if obj.get("service") is not None else None,
            "servicePrefixes": [V1ExtranetsB2bPeeringMatchServiceToCustomerPutRequestServiceServicePrefixesInner.from_dict(_item) for _item in obj["servicePrefixes"]] if obj.get("servicePrefixes") is not None else None
        })
        return _obj


