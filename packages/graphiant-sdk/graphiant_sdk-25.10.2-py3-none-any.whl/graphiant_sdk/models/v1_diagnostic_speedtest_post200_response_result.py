# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from graphiant_sdk.models.v1_diagnostic_speedtest_servers_get200_response_server_inner import V1DiagnosticSpeedtestServersGet200ResponseServerInner
from typing import Optional, Set
from typing_extensions import Self

class V1DiagnosticSpeedtestPost200ResponseResult(BaseModel):
    """
    V1DiagnosticSpeedtestPost200ResponseResult
    """ # noqa: E501
    avg_ping_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgPingTime")
    date_time: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="dateTime")
    download_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="downloadSpeed")
    isp: Optional[StrictStr] = None
    max_ping_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxPingTime")
    min_ping_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minPingTime")
    result: Optional[StrictStr] = None
    server_details: Optional[V1DiagnosticSpeedtestServersGet200ResponseServerInner] = Field(default=None, alias="serverDetails")
    upload_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="uploadSpeed")
    __properties: ClassVar[List[str]] = ["avgPingTime", "dateTime", "downloadSpeed", "isp", "maxPingTime", "minPingTime", "result", "serverDetails", "uploadSpeed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DiagnosticSpeedtestPost200ResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_time
        if self.date_time:
            _dict['dateTime'] = self.date_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_details
        if self.server_details:
            _dict['serverDetails'] = self.server_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DiagnosticSpeedtestPost200ResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avgPingTime": obj.get("avgPingTime"),
            "dateTime": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["dateTime"]) if obj.get("dateTime") is not None else None,
            "downloadSpeed": obj.get("downloadSpeed"),
            "isp": obj.get("isp"),
            "maxPingTime": obj.get("maxPingTime"),
            "minPingTime": obj.get("minPingTime"),
            "result": obj.get("result"),
            "serverDetails": V1DiagnosticSpeedtestServersGet200ResponseServerInner.from_dict(obj["serverDetails"]) if obj.get("serverDetails") is not None else None,
            "uploadSpeed": obj.get("uploadSpeed")
        })
        return _obj


