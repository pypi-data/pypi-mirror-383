# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1GroupsGet200ResponseGroupsInnerPermissions(BaseModel):
    """
    V1GroupsGet200ResponseGroupsInnerPermissions
    """ # noqa: E501
    asset_manager: Optional[StrictStr] = Field(default=None, alias="assetManager")
    b2b: Optional[StrictStr] = None
    b2b_security_profile_external: Optional[StrictStr] = Field(default=None, alias="b2bSecurityProfileExternal")
    billing_and_invoicing: Optional[StrictStr] = Field(default=None, alias="billingAndInvoicing")
    compliance: Optional[StrictStr] = None
    developer_tools: Optional[StrictStr] = Field(default=None, alias="developerTools")
    gateway: Optional[StrictStr] = None
    global_services: Optional[StrictStr] = Field(default=None, alias="globalServices")
    insights: Optional[StrictStr] = None
    licensing: Optional[StrictStr] = None
    logs: Optional[StrictStr] = None
    monitoring_and_troubleshooting: Optional[StrictStr] = Field(default=None, alias="monitoringAndTroubleshooting")
    network_configuration: Optional[StrictStr] = Field(default=None, alias="networkConfiguration")
    order_status: Optional[StrictStr] = Field(default=None, alias="orderStatus")
    reports: Optional[StrictStr] = None
    safety_and_security: Optional[StrictStr] = Field(default=None, alias="safetyAndSecurity")
    service_policies: Optional[StrictStr] = Field(default=None, alias="servicePolicies")
    support: Optional[StrictStr] = None
    user_and_tenant_management: Optional[StrictStr] = Field(default=None, alias="userAndTenantManagement")
    __properties: ClassVar[List[str]] = ["assetManager", "b2b", "b2bSecurityProfileExternal", "billingAndInvoicing", "compliance", "developerTools", "gateway", "globalServices", "insights", "licensing", "logs", "monitoringAndTroubleshooting", "networkConfiguration", "orderStatus", "reports", "safetyAndSecurity", "servicePolicies", "support", "userAndTenantManagement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1GroupsGet200ResponseGroupsInnerPermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1GroupsGet200ResponseGroupsInnerPermissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetManager": obj.get("assetManager"),
            "b2b": obj.get("b2b"),
            "b2bSecurityProfileExternal": obj.get("b2bSecurityProfileExternal"),
            "billingAndInvoicing": obj.get("billingAndInvoicing"),
            "compliance": obj.get("compliance"),
            "developerTools": obj.get("developerTools"),
            "gateway": obj.get("gateway"),
            "globalServices": obj.get("globalServices"),
            "insights": obj.get("insights"),
            "licensing": obj.get("licensing"),
            "logs": obj.get("logs"),
            "monitoringAndTroubleshooting": obj.get("monitoringAndTroubleshooting"),
            "networkConfiguration": obj.get("networkConfiguration"),
            "orderStatus": obj.get("orderStatus"),
            "reports": obj.get("reports"),
            "safetyAndSecurity": obj.get("safetyAndSecurity"),
            "servicePolicies": obj.get("servicePolicies"),
            "support": obj.get("support"),
            "userAndTenantManagement": obj.get("userAndTenantManagement")
        })
        return _obj


