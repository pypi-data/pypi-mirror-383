# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_extranets_b2b_consumer_post200_response_device_inner import V1ExtranetsB2bConsumerPost200ResponseDeviceInner
from graphiant_sdk.models.v1_extranets_b2b_consumer_post200_response_policy_inner import V1ExtranetsB2bConsumerPost200ResponsePolicyInner
from graphiant_sdk.models.v1_extranets_b2b_consumer_post_request_site_information_inner import V1ExtranetsB2bConsumerPostRequestSiteInformationInner
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsB2bConsumerPost200Response(BaseModel):
    """
    V1ExtranetsB2bConsumerPost200Response
    """ # noqa: E501
    device: Optional[List[V1ExtranetsB2bConsumerPost200ResponseDeviceInner]] = None
    id: Optional[StrictInt] = None
    policy: Optional[List[V1ExtranetsB2bConsumerPost200ResponsePolicyInner]] = None
    site_information: Optional[List[V1ExtranetsB2bConsumerPostRequestSiteInformationInner]] = Field(default=None, alias="siteInformation")
    __properties: ClassVar[List[str]] = ["device", "id", "policy", "siteInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bConsumerPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in device (list)
        _items = []
        if self.device:
            for _item_device in self.device:
                if _item_device:
                    _items.append(_item_device.to_dict())
            _dict['device'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policy (list)
        _items = []
        if self.policy:
            for _item_policy in self.policy:
                if _item_policy:
                    _items.append(_item_policy.to_dict())
            _dict['policy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site_information (list)
        _items = []
        if self.site_information:
            for _item_site_information in self.site_information:
                if _item_site_information:
                    _items.append(_item_site_information.to_dict())
            _dict['siteInformation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bConsumerPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device": [V1ExtranetsB2bConsumerPost200ResponseDeviceInner.from_dict(_item) for _item in obj["device"]] if obj.get("device") is not None else None,
            "id": obj.get("id"),
            "policy": [V1ExtranetsB2bConsumerPost200ResponsePolicyInner.from_dict(_item) for _item in obj["policy"]] if obj.get("policy") is not None else None,
            "siteInformation": [V1ExtranetsB2bConsumerPostRequestSiteInformationInner.from_dict(_item) for _item in obj["siteInformation"]] if obj.get("siteInformation") is not None else None
        })
        return _obj


