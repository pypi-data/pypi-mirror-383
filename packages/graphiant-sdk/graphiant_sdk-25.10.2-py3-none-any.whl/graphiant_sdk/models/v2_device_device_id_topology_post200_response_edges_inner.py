# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v2_device_device_id_topology_post200_response_edges_inner_circuits_info_inner import V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerCircuitsInfoInner
from graphiant_sdk.models.v2_device_device_id_topology_post200_response_edges_inner_connections_inner import V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerConnectionsInner
from typing import Optional, Set
from typing_extensions import Self

class V2DeviceDeviceIdTopologyPost200ResponseEdgesInner(BaseModel):
    """
    V2DeviceDeviceIdTopologyPost200ResponseEdgesInner
    """ # noqa: E501
    a: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    b: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    circuits_info: Optional[List[V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerCircuitsInfoInner]] = Field(default=None, alias="circuitsInfo")
    connections: Optional[List[V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerConnectionsInner]] = None
    name: Optional[StrictStr] = None
    quality: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["a", "b", "circuitsInfo", "connections", "name", "quality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2DeviceDeviceIdTopologyPost200ResponseEdgesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in circuits_info (list)
        _items = []
        if self.circuits_info:
            for _item_circuits_info in self.circuits_info:
                if _item_circuits_info:
                    _items.append(_item_circuits_info.to_dict())
            _dict['circuitsInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item_connections in self.connections:
                if _item_connections:
                    _items.append(_item_connections.to_dict())
            _dict['connections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2DeviceDeviceIdTopologyPost200ResponseEdgesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "a": obj.get("a"),
            "b": obj.get("b"),
            "circuitsInfo": [V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerCircuitsInfoInner.from_dict(_item) for _item in obj["circuitsInfo"]] if obj.get("circuitsInfo") is not None else None,
            "connections": [V2DeviceDeviceIdTopologyPost200ResponseEdgesInnerConnectionsInner.from_dict(_item) for _item in obj["connections"]] if obj.get("connections") is not None else None,
            "name": obj.get("name"),
            "quality": obj.get("quality")
        })
        return _obj


