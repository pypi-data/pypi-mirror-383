# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_aspath_prepend import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAspathPrepend
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_bgp_set_next_hop import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionBgpSetNextHop
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_communities import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCommunities
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_local_pref import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionLocalPref
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_metric import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionMetric
from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_weight import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionWeight
from typing import Optional, Set
from typing_extensions import Self

class V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction(BaseModel):
    """
    V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction
    """ # noqa: E501
    administrative_distance: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance] = Field(default=None, alias="administrativeDistance")
    aspath_prepend: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAspathPrepend] = Field(default=None, alias="aspathPrepend")
    bgp_set_next_hop: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionBgpSetNextHop] = Field(default=None, alias="bgpSetNextHop")
    call_policy: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy] = Field(default=None, alias="callPolicy")
    communities: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCommunities] = None
    local_pref: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionLocalPref] = Field(default=None, alias="localPref")
    metric: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionMetric] = None
    result: Optional[StrictStr] = None
    seq: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    weight: Optional[V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionWeight] = None
    __properties: ClassVar[List[str]] = ["administrativeDistance", "aspathPrepend", "bgpSetNextHop", "callPolicy", "communities", "localPref", "metric", "result", "seq", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of administrative_distance
        if self.administrative_distance:
            _dict['administrativeDistance'] = self.administrative_distance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aspath_prepend
        if self.aspath_prepend:
            _dict['aspathPrepend'] = self.aspath_prepend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bgp_set_next_hop
        if self.bgp_set_next_hop:
            _dict['bgpSetNextHop'] = self.bgp_set_next_hop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of call_policy
        if self.call_policy:
            _dict['callPolicy'] = self.call_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of communities
        if self.communities:
            _dict['communities'] = self.communities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_pref
        if self.local_pref:
            _dict['localPref'] = self.local_pref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administrativeDistance": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAdministrativeDistance.from_dict(obj["administrativeDistance"]) if obj.get("administrativeDistance") is not None else None,
            "aspathPrepend": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionAspathPrepend.from_dict(obj["aspathPrepend"]) if obj.get("aspathPrepend") is not None else None,
            "bgpSetNextHop": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionBgpSetNextHop.from_dict(obj["bgpSetNextHop"]) if obj.get("bgpSetNextHop") is not None else None,
            "callPolicy": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCallPolicy.from_dict(obj["callPolicy"]) if obj.get("callPolicy") is not None else None,
            "communities": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionCommunities.from_dict(obj["communities"]) if obj.get("communities") is not None else None,
            "localPref": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionLocalPref.from_dict(obj["localPref"]) if obj.get("localPref") is not None else None,
            "metric": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionMetric.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "result": obj.get("result"),
            "seq": obj.get("seq"),
            "weight": V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueActionWeight.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj


