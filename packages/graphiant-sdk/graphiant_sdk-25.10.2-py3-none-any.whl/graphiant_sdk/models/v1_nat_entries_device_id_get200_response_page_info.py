# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V1NatEntriesDeviceIdGet200ResponsePageInfo(BaseModel):
    """
    V1NatEntriesDeviceIdGet200ResponsePageInfo
    """ # noqa: E501
    current_page: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="currentPage")
    end_cursor: Optional[StrictStr] = Field(default=None, alias="endCursor")
    has_next_page: Optional[StrictBool] = Field(default=None, alias="hasNextPage")
    has_prev_page: Optional[StrictBool] = Field(default=None, alias="hasPrevPage")
    start_cursor: Optional[StrictStr] = Field(default=None, alias="startCursor")
    total_pages: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="totalPages")
    total_records: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="totalRecords")
    __properties: ClassVar[List[str]] = ["currentPage", "endCursor", "hasNextPage", "hasPrevPage", "startCursor", "totalPages", "totalRecords"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1NatEntriesDeviceIdGet200ResponsePageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1NatEntriesDeviceIdGet200ResponsePageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentPage": obj.get("currentPage"),
            "endCursor": obj.get("endCursor"),
            "hasNextPage": obj.get("hasNextPage"),
            "hasPrevPage": obj.get("hasPrevPage"),
            "startCursor": obj.get("startCursor"),
            "totalPages": obj.get("totalPages"),
            "totalRecords": obj.get("totalRecords")
        })
        return _obj


