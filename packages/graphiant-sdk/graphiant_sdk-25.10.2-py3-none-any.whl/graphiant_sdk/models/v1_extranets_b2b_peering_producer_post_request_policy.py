# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_extranets_b2b_consumer_post_request_site_information_inner import V1ExtranetsB2bConsumerPostRequestSiteInformationInner
from graphiant_sdk.models.v1_extranets_b2b_peering_consumer_match_id_post_request_global_object_ops_value import V1ExtranetsB2bPeeringConsumerMatchIdPostRequestGlobalObjectOpsValue
from graphiant_sdk.models.v1_extranets_b2b_peering_match_service_to_customer_post_request_service_service_prefixes_inner import V1ExtranetsB2bPeeringMatchServiceToCustomerPostRequestServiceServicePrefixesInner
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsB2bPeeringProducerPostRequestPolicy(BaseModel):
    """
    V1ExtranetsB2bPeeringProducerPostRequestPolicy
    """ # noqa: E501
    description: Optional[StrictStr] = None
    global_object_ops: Optional[Dict[str, V1ExtranetsB2bPeeringConsumerMatchIdPostRequestGlobalObjectOpsValue]] = Field(default=None, alias="globalObjectOps")
    prefix_tags: Optional[List[V1ExtranetsB2bPeeringMatchServiceToCustomerPostRequestServiceServicePrefixesInner]] = Field(default=None, alias="prefixTags")
    service_lan_segment: Optional[StrictInt] = Field(default=None, alias="serviceLanSegment")
    site: Optional[List[V1ExtranetsB2bConsumerPostRequestSiteInformationInner]] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["description", "globalObjectOps", "prefixTags", "serviceLanSegment", "site", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringProducerPostRequestPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in global_object_ops (dict)
        _field_dict = {}
        if self.global_object_ops:
            for _key_global_object_ops in self.global_object_ops:
                if self.global_object_ops[_key_global_object_ops]:
                    _field_dict[_key_global_object_ops] = self.global_object_ops[_key_global_object_ops].to_dict()
            _dict['globalObjectOps'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in prefix_tags (list)
        _items = []
        if self.prefix_tags:
            for _item_prefix_tags in self.prefix_tags:
                if _item_prefix_tags:
                    _items.append(_item_prefix_tags.to_dict())
            _dict['prefixTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site (list)
        _items = []
        if self.site:
            for _item_site in self.site:
                if _item_site:
                    _items.append(_item_site.to_dict())
            _dict['site'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringProducerPostRequestPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "globalObjectOps": dict(
                (_k, V1ExtranetsB2bPeeringConsumerMatchIdPostRequestGlobalObjectOpsValue.from_dict(_v))
                for _k, _v in obj["globalObjectOps"].items()
            )
            if obj.get("globalObjectOps") is not None
            else None,
            "prefixTags": [V1ExtranetsB2bPeeringMatchServiceToCustomerPostRequestServiceServicePrefixesInner.from_dict(_item) for _item in obj["prefixTags"]] if obj.get("prefixTags") is not None else None,
            "serviceLanSegment": obj.get("serviceLanSegment"),
            "site": [V1ExtranetsB2bConsumerPostRequestSiteInformationInner.from_dict(_item) for _item in obj["site"]] if obj.get("site") is not None else None,
            "type": obj.get("type")
        })
        return _obj


