# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_flows_topology_post200_response_network_topology_inner_delta_edges_added_inner import V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaEdgesAddedInner
from graphiant_sdk.models.v1_flows_topology_post200_response_network_topology_inner_delta_nodes_added_inner import V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaNodesAddedInner
from typing import Optional, Set
from typing_extensions import Self

class V1FlowsTopologyPost200ResponseNetworkTopologyInnerDelta(BaseModel):
    """
    V1FlowsTopologyPost200ResponseNetworkTopologyInnerDelta
    """ # noqa: E501
    edges_added: Optional[List[V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaEdgesAddedInner]] = Field(default=None, alias="edgesAdded")
    edges_deleted: Optional[List[V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaEdgesAddedInner]] = Field(default=None, alias="edgesDeleted")
    nodes_added: Optional[List[V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaNodesAddedInner]] = Field(default=None, alias="nodesAdded")
    nodes_deleted: Optional[List[V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaNodesAddedInner]] = Field(default=None, alias="nodesDeleted")
    __properties: ClassVar[List[str]] = ["edgesAdded", "edgesDeleted", "nodesAdded", "nodesDeleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1FlowsTopologyPost200ResponseNetworkTopologyInnerDelta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in edges_added (list)
        _items = []
        if self.edges_added:
            for _item_edges_added in self.edges_added:
                if _item_edges_added:
                    _items.append(_item_edges_added.to_dict())
            _dict['edgesAdded'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edges_deleted (list)
        _items = []
        if self.edges_deleted:
            for _item_edges_deleted in self.edges_deleted:
                if _item_edges_deleted:
                    _items.append(_item_edges_deleted.to_dict())
            _dict['edgesDeleted'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes_added (list)
        _items = []
        if self.nodes_added:
            for _item_nodes_added in self.nodes_added:
                if _item_nodes_added:
                    _items.append(_item_nodes_added.to_dict())
            _dict['nodesAdded'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes_deleted (list)
        _items = []
        if self.nodes_deleted:
            for _item_nodes_deleted in self.nodes_deleted:
                if _item_nodes_deleted:
                    _items.append(_item_nodes_deleted.to_dict())
            _dict['nodesDeleted'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1FlowsTopologyPost200ResponseNetworkTopologyInnerDelta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "edgesAdded": [V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaEdgesAddedInner.from_dict(_item) for _item in obj["edgesAdded"]] if obj.get("edgesAdded") is not None else None,
            "edgesDeleted": [V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaEdgesAddedInner.from_dict(_item) for _item in obj["edgesDeleted"]] if obj.get("edgesDeleted") is not None else None,
            "nodesAdded": [V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaNodesAddedInner.from_dict(_item) for _item in obj["nodesAdded"]] if obj.get("nodesAdded") is not None else None,
            "nodesDeleted": [V1FlowsTopologyPost200ResponseNetworkTopologyInnerDeltaNodesAddedInner.from_dict(_item) for _item in obj["nodesDeleted"]] if obj.get("nodesDeleted") is not None else None
        })
        return _obj


