# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from graphiant_sdk.models.v1_audit_logs_post200_response_logs_inner_failed_target_results_inner import V1AuditLogsPost200ResponseLogsInnerFailedTargetResultsInner
from typing import Optional, Set
from typing_extensions import Self

class V1AuditLogsPost200ResponseLogsInner(BaseModel):
    """
    V1AuditLogsPost200ResponseLogsInner
    """ # noqa: E501
    activity: Optional[StrictStr] = None
    actor: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    end: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = None
    failed_target_results: Optional[List[V1AuditLogsPost200ResponseLogsInnerFailedTargetResultsInner]] = Field(default=None, alias="failedTargetResults")
    info: Optional[StrictStr] = None
    reason: Optional[StrictStr] = None
    service: Optional[StrictStr] = None
    start: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = None
    status: Optional[StrictStr] = None
    targets: Optional[List[V1AuditLogsPost200ResponseLogsInnerFailedTargetResultsInner]] = None
    __properties: ClassVar[List[str]] = ["activity", "actor", "category", "end", "failedTargetResults", "info", "reason", "service", "start", "status", "targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AuditLogsPost200ResponseLogsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end
        if self.end:
            _dict['end'] = self.end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in failed_target_results (list)
        _items = []
        if self.failed_target_results:
            for _item_failed_target_results in self.failed_target_results:
                if _item_failed_target_results:
                    _items.append(_item_failed_target_results.to_dict())
            _dict['failedTargetResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of start
        if self.start:
            _dict['start'] = self.start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AuditLogsPost200ResponseLogsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity": obj.get("activity"),
            "actor": obj.get("actor"),
            "category": obj.get("category"),
            "end": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["end"]) if obj.get("end") is not None else None,
            "failedTargetResults": [V1AuditLogsPost200ResponseLogsInnerFailedTargetResultsInner.from_dict(_item) for _item in obj["failedTargetResults"]] if obj.get("failedTargetResults") is not None else None,
            "info": obj.get("info"),
            "reason": obj.get("reason"),
            "service": obj.get("service"),
            "start": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["start"]) if obj.get("start") is not None else None,
            "status": obj.get("status"),
            "targets": [V1AuditLogsPost200ResponseLogsInnerFailedTargetResultsInner.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None
        })
        return _obj


