# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process_areas_inner import V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessAreasInner
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process_redistributed_protocols_inner import V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessRedistributedProtocolsInner
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2Process(BaseModel):
    """
    V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2Process
    """ # noqa: E501
    admin_distance: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="adminDistance")
    areas: Optional[List[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessAreasInner]] = None
    auto_router_id: Optional[StrictBool] = Field(default=None, alias="autoRouterId")
    default_originate: Optional[StrictStr] = Field(default=None, alias="defaultOriginate")
    id: Optional[StrictInt] = None
    redistributed_protocols: Optional[List[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessRedistributedProtocolsInner]] = Field(default=None, alias="redistributedProtocols")
    router_id: Optional[StrictStr] = Field(default=None, alias="routerId")
    __properties: ClassVar[List[str]] = ["adminDistance", "areas", "autoRouterId", "defaultOriginate", "id", "redistributedProtocols", "routerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2Process from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in areas (list)
        _items = []
        if self.areas:
            for _item_areas in self.areas:
                if _item_areas:
                    _items.append(_item_areas.to_dict())
            _dict['areas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in redistributed_protocols (list)
        _items = []
        if self.redistributed_protocols:
            for _item_redistributed_protocols in self.redistributed_protocols:
                if _item_redistributed_protocols:
                    _items.append(_item_redistributed_protocols.to_dict())
            _dict['redistributedProtocols'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2Process from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminDistance": obj.get("adminDistance"),
            "areas": [V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessAreasInner.from_dict(_item) for _item in obj["areas"]] if obj.get("areas") is not None else None,
            "autoRouterId": obj.get("autoRouterId"),
            "defaultOriginate": obj.get("defaultOriginate"),
            "id": obj.get("id"),
            "redistributedProtocols": [V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerSegmentsInnerOspfv2ProcessRedistributedProtocolsInner.from_dict(_item) for _item in obj["redistributedProtocols"]] if obj.get("redistributedProtocols") is not None else None,
            "routerId": obj.get("routerId")
        })
        return _obj


