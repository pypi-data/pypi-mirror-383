# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1TroubleshootingEnterprisePostRequestDimensions(BaseModel):
    """
    V1TroubleshootingEnterprisePostRequestDimensions
    """ # noqa: E501
    certificate_expiry: Optional[StrictBool] = Field(default=None, alias="certificateExpiry")
    core_connectivity: Optional[StrictBool] = Field(default=None, alias="coreConnectivity")
    core_transitions: Optional[StrictBool] = Field(default=None, alias="coreTransitions")
    cpu: Optional[StrictBool] = None
    crashes: Optional[StrictBool] = None
    credit_expiry: Optional[StrictBool] = Field(default=None, alias="creditExpiry")
    disk: Optional[StrictBool] = None
    fan_speed: Optional[StrictBool] = Field(default=None, alias="fanSpeed")
    license_expiry: Optional[StrictBool] = Field(default=None, alias="licenseExpiry")
    memory: Optional[StrictBool] = None
    odp_connectivity: Optional[StrictBool] = Field(default=None, alias="odpConnectivity")
    odp_transitions: Optional[StrictBool] = Field(default=None, alias="odpTransitions")
    sla_performance: Optional[StrictBool] = Field(default=None, alias="slaPerformance")
    t2_connectivity: Optional[StrictBool] = Field(default=None, alias="t2Connectivity")
    t2_transitions: Optional[StrictBool] = Field(default=None, alias="t2Transitions")
    temperature: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["certificateExpiry", "coreConnectivity", "coreTransitions", "cpu", "crashes", "creditExpiry", "disk", "fanSpeed", "licenseExpiry", "memory", "odpConnectivity", "odpTransitions", "slaPerformance", "t2Connectivity", "t2Transitions", "temperature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1TroubleshootingEnterprisePostRequestDimensions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1TroubleshootingEnterprisePostRequestDimensions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateExpiry": obj.get("certificateExpiry"),
            "coreConnectivity": obj.get("coreConnectivity"),
            "coreTransitions": obj.get("coreTransitions"),
            "cpu": obj.get("cpu"),
            "crashes": obj.get("crashes"),
            "creditExpiry": obj.get("creditExpiry"),
            "disk": obj.get("disk"),
            "fanSpeed": obj.get("fanSpeed"),
            "licenseExpiry": obj.get("licenseExpiry"),
            "memory": obj.get("memory"),
            "odpConnectivity": obj.get("odpConnectivity"),
            "odpTransitions": obj.get("odpTransitions"),
            "slaPerformance": obj.get("slaPerformance"),
            "t2Connectivity": obj.get("t2Connectivity"),
            "t2Transitions": obj.get("t2Transitions"),
            "temperature": obj.get("temperature")
        })
        return _obj


