# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_account_mfa_get200_response import V1AccountMfaGet200Response
from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_interfaces_value_interface_core_neighbor import V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighbor
from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface import V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterface
from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface_type import V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterfaceType
from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_wan import V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceWan
from typing import Optional, Set
from typing_extensions import Self

class V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterface(BaseModel):
    """
    V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterface
    """ # noqa: E501
    core_neighbor: Optional[V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighbor] = Field(default=None, alias="coreNeighbor")
    default: Optional[Dict[str, Any]] = None
    gateway_neighbor: Optional[V1AccountMfaGet200Response] = Field(default=None, alias="gatewayNeighbor")
    interface: Optional[V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterface] = None
    interface_type: Optional[V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterfaceType] = Field(default=None, alias="interfaceType")
    vlan_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="vlanId")
    wan: Optional[V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceWan] = None
    __properties: ClassVar[List[str]] = ["coreNeighbor", "default", "gatewayNeighbor", "interface", "interfaceType", "vlanId", "wan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of core_neighbor
        if self.core_neighbor:
            _dict['coreNeighbor'] = self.core_neighbor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_neighbor
        if self.gateway_neighbor:
            _dict['gatewayNeighbor'] = self.gateway_neighbor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interface
        if self.interface:
            _dict['interface'] = self.interface.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interface_type
        if self.interface_type:
            _dict['interfaceType'] = self.interface_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wan
        if self.wan:
            _dict['wan'] = self.wan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coreNeighbor": V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceCoreNeighbor.from_dict(obj["coreNeighbor"]) if obj.get("coreNeighbor") is not None else None,
            "default": obj.get("default"),
            "gatewayNeighbor": V1AccountMfaGet200Response.from_dict(obj["gatewayNeighbor"]) if obj.get("gatewayNeighbor") is not None else None,
            "interface": V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterface.from_dict(obj["interface"]) if obj.get("interface") is not None else None,
            "interfaceType": V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceInterfaceType.from_dict(obj["interfaceType"]) if obj.get("interfaceType") is not None else None,
            "vlanId": obj.get("vlanId"),
            "wan": V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValueInterfaceWan.from_dict(obj["wan"]) if obj.get("wan") is not None else None
        })
        return _obj


