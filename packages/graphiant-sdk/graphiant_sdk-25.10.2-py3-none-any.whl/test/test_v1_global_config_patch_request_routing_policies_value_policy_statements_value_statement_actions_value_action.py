# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action import V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction

class TestV1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction(unittest.TestCase):
    """V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction:
        """Test V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction`
        """
        model = V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction()
        if include_optional:
            return V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction(
                administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                    distance = 123, ),
                aspath_prepend = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_aspath_prepend._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_aspathPrepend(
                    repeat = 123, ),
                bgp_set_next_hop = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_bgp_set_next_hop._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_bgpSetNextHop(
                    next_hop = 'example string', ),
                call_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                    policy = 'example string', ),
                communities = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_communities._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_communities(
                    community = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_communities_community._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_communities_community(
                        additive = True, 
                        community_list = [
                            'example string'
                            ], ), ),
                local_pref = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_local_pref._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_localPref(),
                metric = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_metric._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_metric(
                    absolute = 123, 
                    modifier = 123, ),
                result = 'ENUM_VALUE',
                seq = 123,
                weight = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_weight._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_weight()
            )
        else:
            return V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction(
        )
        """

    def testV1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction(self):
        """Test V1GlobalConfigPatchRequestRoutingPoliciesValuePolicyStatementsValueStatementActionsValueAction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
