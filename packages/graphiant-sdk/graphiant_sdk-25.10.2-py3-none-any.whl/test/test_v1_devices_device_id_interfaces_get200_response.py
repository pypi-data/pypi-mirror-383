# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_devices_device_id_interfaces_get200_response import V1DevicesDeviceIdInterfacesGet200Response

class TestV1DevicesDeviceIdInterfacesGet200Response(unittest.TestCase):
    """V1DevicesDeviceIdInterfacesGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DevicesDeviceIdInterfacesGet200Response:
        """Test V1DevicesDeviceIdInterfacesGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DevicesDeviceIdInterfacesGet200Response`
        """
        model = V1DevicesDeviceIdInterfacesGet200Response()
        if include_optional:
            return V1DevicesDeviceIdInterfacesGet200Response(
                interfaces = [
                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner(
                        alias = 'example string', 
                        circuit = 'example string', 
                        circuit_name = 'example string', 
                        config_updated_at = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        configured_max_transmission_unit = 123, 
                        description = 'example string', 
                        duplex = 'example string', 
                        enabled = True, 
                        id = 1234567891011, 
                        ip_sec = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ip_sec._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipSec(
                            anti_replay_window_size = 123, 
                            dh_group = 'ENUM_VALUE', 
                            dpd_interval = 123, 
                            encryption_alg = 'ENUM_VALUE', 
                            esn = True, 
                            established_time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), 
                            ike_integrity = 'ENUM_VALUE', 
                            ipsec_encryption_alg = 'ENUM_VALUE', 
                            ipsec_integrity = 'ENUM_VALUE', 
                            label = 'ENUM_VALUE', 
                            local_address = 'example string', 
                            local_circuit = 'example string', 
                            local_ike_peer_identity = 'example string', 
                            local_ikesa_spi = 12345678910, 
                            local_port = 123, 
                            negotiated_algo = 'example string', 
                            oper_state = True, 
                            perfect_forward_secrecy = 'example string', 
                            preshared_key = 'example string', 
                            protocol = 'example string', 
                            reauth_interval = 1234567891011, 
                            rekey_interval = 1234567891011, 
                            remote_address = 'example string', 
                            remote_ike_peer_identity = 'example string', 
                            remote_ikesa_spi = 12345678910, 
                            remote_port = 123, ), 
                        ipv4 = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4(
                            address = 'example string', 
                            dhcp_client = True, 
                            dhcp_relay = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4_dhcp_relay._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4_dhcpRelay(
                                dhcpv4_relays = [
                                    'example string'
                                    ], 
                                dhcpv6_relays = [
                                    'example string'
                                    ], 
                                id = 1234567891011, ), 
                            dhcp_server = True, 
                            origin = 'ENUM_VALUE', 
                            vrrp_group = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4_vrrp_group._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4_vrrpGroup(
                                accept_mode = True, 
                                allow_inter_operability = True, 
                                description = 'example string', 
                                effective_priority = 123, 
                                enabled = True, 
                                group_members = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4_vrrp_group_group_members_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4_vrrpGroup_groupMembers_inner(
                                        circuit = 'example string', 
                                        device_id = 1234567891011, 
                                        effective_priority = 123, 
                                        hostname = 'example string', 
                                        interface = 'example string', 
                                        lan = 'example string', 
                                        local_ip_address = 'example string', 
                                        priority = 123, 
                                        state = 'ENUM_VALUE', )
                                    ], 
                                id = 1234567891011, 
                                name = 'example string', 
                                preempt = True, 
                                priority = 123, 
                                state = 'ENUM_VALUE', 
                                tracked_interfaces = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4_vrrp_group_tracked_interfaces_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4_vrrpGroup_trackedInterfaces_inner(
                                        interface = 'example string', 
                                        priority_decrement = 123, )
                                    ], 
                                virtual_ip_address = 'example string', 
                                virtual_mac_address = 'example string', ), ), 
                        ipv6 = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4(
                            address = 'example string', 
                            dhcp_client = True, 
                            dhcp_server = True, 
                            origin = 'ENUM_VALUE', ), 
                        ipv6_addresses = [
                            
                            ], 
                        lan = 'example string', 
                        lldp_enabled = True, 
                        max_transmission_unit = 123, 
                        name = 'example string', 
                        oper_updated_at = , 
                        phy_address = 'example string', 
                        security_zone = 'example string', 
                        sfp_optical_strength = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_sfp_optical_strength_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_sfpOpticalStrength_inner(
                                index = 123, 
                                rx_power = 12.34, 
                                tx_bias = 12.34, 
                                tx_power = 12.34, 
                                voltage = 12.34, )
                            ], 
                        speed_mbps = 123, 
                        subinterfaces = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_subinterfaces_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_subinterfaces_inner(
                                alias = 'example string', 
                                circuit = 'example string', 
                                description = 'example string', 
                                duplex = 'example string', 
                                enabled = True, 
                                id = 1234567891011, 
                                lan = 'example string', 
                                mac_address = 'example string', 
                                max_transmission_unit = 123, 
                                name = 'example string', 
                                parent_mac_address = 'example string', 
                                security_zone = 'example string', 
                                speed_mbps = 123, 
                                tcp_mss = 123, 
                                tcp_mss_v4 = 123, 
                                tcp_mss_v6 = 123, 
                                up = True, 
                                vlan = 123, )
                            ], 
                        tcp_mss = 123, 
                        tcp_mss_v4 = 123, 
                        tcp_mss_v6 = 123, 
                        type = 'ENUM_VALUE', 
                        up = True, 
                        vrf_function_id = 123, 
                        vrf_name = 'example string', )
                    ],
                page_info = graphiant_sdk.models._v1_nat_entries__device_id__get_200_response_page_info._v1_nat_entries__deviceId__get_200_response_pageInfo(
                    current_page = 1, 
                    end_cursor = 'xxxxxxy', 
                    has_next_page = False, 
                    has_prev_page = True, 
                    start_cursor = 'xxxxxx', 
                    total_pages = 4, 
                    total_records = 400, )
            )
        else:
            return V1DevicesDeviceIdInterfacesGet200Response(
        )
        """

    def testV1DevicesDeviceIdInterfacesGet200Response(self):
        """Test V1DevicesDeviceIdInterfacesGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
