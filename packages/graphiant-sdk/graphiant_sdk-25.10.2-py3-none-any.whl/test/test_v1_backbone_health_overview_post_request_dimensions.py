# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_backbone_health_overview_post_request_dimensions import V1BackboneHealthOverviewPostRequestDimensions

class TestV1BackboneHealthOverviewPostRequestDimensions(unittest.TestCase):
    """V1BackboneHealthOverviewPostRequestDimensions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1BackboneHealthOverviewPostRequestDimensions:
        """Test V1BackboneHealthOverviewPostRequestDimensions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1BackboneHealthOverviewPostRequestDimensions`
        """
        model = V1BackboneHealthOverviewPostRequestDimensions()
        if include_optional:
            return V1BackboneHealthOverviewPostRequestDimensions(
                certificate_expiry = True,
                core_connectivity = True,
                core_core_sla_performance = True,
                core_wan_performance = True,
                cpu = True,
                crashes = True,
                credit_expiry = True,
                disk = True,
                fan_speed = True,
                license_expiry = True,
                memory = True,
                odp_connectivity = True,
                t2_connectivity = True,
                temperature = True
            )
        else:
            return V1BackboneHealthOverviewPostRequestDimensions(
        )
        """

    def testV1BackboneHealthOverviewPostRequestDimensions(self):
        """Test V1BackboneHealthOverviewPostRequestDimensions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
