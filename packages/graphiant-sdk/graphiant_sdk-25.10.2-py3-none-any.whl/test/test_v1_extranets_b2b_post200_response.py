# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_extranets_b2b_post200_response import V1ExtranetsB2bPost200Response

class TestV1ExtranetsB2bPost200Response(unittest.TestCase):
    """V1ExtranetsB2bPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ExtranetsB2bPost200Response:
        """Test V1ExtranetsB2bPost200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ExtranetsB2bPost200Response`
        """
        model = V1ExtranetsB2bPost200Response()
        if include_optional:
            return V1ExtranetsB2bPost200Response(
                id = 1234567891011,
                policy = graphiant_sdk.models._v1_extranets_b2b_post_200_response_policy._v1_extranets_b2b_post_200_response_policy(
                    dns_name = 'example string', 
                    inbound_security_rules = [
                        graphiant_sdk.models._v1_extranets_b2b_consumer_post_200_response_policy_inner_inbound_security_rules_inner._v1_extranets_b2b_consumer_post_200_response_policy_inner_inboundSecurityRules_inner(
                            action = 'ENUM_VALUE', 
                            implicit = True, 
                            match = graphiant_sdk.models._v1_extranets_b2b_consumer_post_200_response_policy_inner_inbound_security_rules_inner_match._v1_extranets_b2b_consumer_post_200_response_policy_inner_inboundSecurityRules_inner_match(
                                destination_port = 123, 
                                destination_prefix = 'example string', 
                                icmp_type = 123, 
                                protocol = 123, 
                                source_port = 123, 
                                source_prefix = 'example string', ), 
                            policy_rule_index = 1234567891011, 
                            seq = 123, )
                        ], 
                    policy = graphiant_sdk.models._v1_extranets_b2b_post_request_policy._v1_extranets_b2b_post_request_policy(
                        nat_pools = [
                            'example string'
                            ], 
                        profiles = [
                            graphiant_sdk.models._v1_extranets_b2b_post_request_policy_profiles_inner._v1_extranets_b2b_post_request_policy_profiles_inner(
                                ports = [
                                    123
                                    ], 
                                protocol = 123, )
                            ], 
                        service_lan_segment = 1234567891011, 
                        service_prefixes = [
                            'example string'
                            ], 
                        sites = [
                            graphiant_sdk.models._v1_extranets_b2b_consumer_post_request_site_information_inner._v1_extranets_b2b_consumer_post_request_siteInformation_inner(
                                bw_allocation_site_lists = 123, 
                                bw_allocation_sites = 123, 
                                policer_site_lists = graphiant_sdk.models._v1_extranets_b2b_consumer_post_request_site_information_inner_policer_site_lists._v1_extranets_b2b_consumer_post_request_siteInformation_inner_policerSiteLists(
                                    burst_size = 123, 
                                    bw = 123, ), 
                                policer_sites = graphiant_sdk.models._v1_extranets_b2b_consumer_post_request_site_information_inner_policer_site_lists._v1_extranets_b2b_consumer_post_request_siteInformation_inner_policerSiteLists(
                                    burst_size = 123, 
                                    bw = 123, ), 
                                site_lists = [
                                    1234567891011
                                    ], )
                            ], 
                        sla = graphiant_sdk.models._v1_extranets_b2b_post_request_policy_sla._v1_extranets_b2b_post_request_policy_sla(
                            backup_circuit = 'ENUM_VALUE', 
                            class = 'ENUM_VALUE', 
                            primary_circuit = 'ENUM_VALUE', ), 
                        type = 'ENUM_VALUE', ), 
                    service_name = 'example string', 
                    traffic_rules = [
                        graphiant_sdk.models._v1_extranets_b2b_consumer_post_200_response_policy_inner_traffic_rules_inner._v1_extranets_b2b_consumer_post_200_response_policy_inner_trafficRules_inner(
                            action = graphiant_sdk.models._v1_extranets_b2b_consumer_post_200_response_policy_inner_traffic_rules_inner_action._v1_extranets_b2b_consumer_post_200_response_policy_inner_trafficRules_inner_action(
                                backup = 'ENUM_VALUE', 
                                class = 'ENUM_VALUE', 
                                primary = 'ENUM_VALUE', 
                                result = 'ENUM_VALUE', ), 
                            policy_rule_index = 1234567891011, 
                            seq = 123, )
                        ], )
            )
        else:
            return V1ExtranetsB2bPost200Response(
        )
        """

    def testV1ExtranetsB2bPost200Response(self):
        """Test V1ExtranetsB2bPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
