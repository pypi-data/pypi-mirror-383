# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_devices_device_id_config_put_request_core import V1DevicesDeviceIdConfigPutRequestCore

class TestV1DevicesDeviceIdConfigPutRequestCore(unittest.TestCase):
    """V1DevicesDeviceIdConfigPutRequestCore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DevicesDeviceIdConfigPutRequestCore:
        """Test V1DevicesDeviceIdConfigPutRequestCore
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DevicesDeviceIdConfigPutRequestCore`
        """
        model = V1DevicesDeviceIdConfigPutRequestCore()
        if include_optional:
            return V1DevicesDeviceIdConfigPutRequestCore(
                bgp_instance = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_bgp_instance._v1_devices__deviceId__config_put_request_core_bgpInstance(
                    address_families = [
                        'ENUM_VALUE'
                        ], 
                    asn = 123, 
                    route_server = True, 
                    router_id = 'example string', ),
                core_vrf = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf._v1_devices__deviceId__config_put_request_core_coreVrf(
                    bgp_aggregations = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value(
                            config = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value_config._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value_config(
                                as_set = True, 
                                prefix = 'example string', 
                                summary_only = True, ), )
                        }, 
                    bgp_neighbors = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value(
                            neighbor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor(
                                address_families = {
                                    'key' : graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value(
                                        family = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value_family._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value_family(
                                            address_family = 'ENUM_VALUE', 
                                            inbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                policy = 'example string', ), 
                                            outbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                policy = 'example string', ), ), )
                                    }, 
                                allow_as_in = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_allow_as_in._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_allowAsIn(
                                    count = 123, ), 
                                as_override = True, 
                                bfd = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_bfd._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_bfd(), 
                                default_originate = 'ENUM_VALUE', 
                                ebgp_multihop_ttl = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_ebgp_multihop_ttl._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_ebgpMultihopTtl(
                                    multi_hop = 123, ), 
                                enabled = True, 
                                hold_timer = 123, 
                                hold_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                    timer = 123, ), 
                                keepalive_timer = 123, 
                                keepalive_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                    timer = 123, ), 
                                local_address = 'example string', 
                                local_interface = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_interface._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceInterface(
                                    interface = 'example string', ), 
                                max_prefix_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_max_prefix_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_maxPrefixValue(
                                    max_prefix = 123, ), 
                                md5_password = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_md5_password._v1_gateways_put_request_details_ipsecGateway_routing_bgp_md5Password(), 
                                peer_asn = 123, 
                                remote_address = 'example string', 
                                remove_private_as = True, 
                                send_community = True, ), )
                        }, 
                    bgp_redistribution = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpRedistribution_value(
                            protocol = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_notify_filter_profiles_value_notify_filter_profile_include_exclude_list_value._v1_global_config_patch_request_snmps_value_config_notifyFilterProfiles_value_notifyFilterProfile_includeExcludeList_value(
                                enabled = True, ), )
                        }, 
                    dhcp_subnets = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value(
                            subnet = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet(
                                default_lease_time_secs = 123, 
                                description = 'example string', 
                                domain_name = 'example string', 
                                domain_name_server = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_nameservers._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_nameservers(
                                    primary = 'example string', 
                                    secondary = 'example string', ), 
                                interface = 'example string', 
                                ip_gateway = 'example string', 
                                ip_prefix = 'example string', 
                                ip_ranges = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                        end = 'example string', 
                                        start = 'example string', )
                                    ], 
                                ip_ranges_v2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_ip_ranges_v2._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_ipRangesV2(
                                    ip_range = [
                                        graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                            end = 'example string', 
                                            start = 'example string', )
                                        ], ), 
                                max_lease_time_secs = 123, 
                                min_lease_time_secs = 123, 
                                name = 'example string', 
                                static_leases = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value(
                                        lease = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value_lease._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value_lease(
                                            hostname = 'example string', 
                                            ip_address = 'example string', 
                                            mac_address = 'example string', ), )
                                    }, ), )
                        }, 
                    ebgp_multipath = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ebgp_multipath._v1_devices__deviceId__config_put_request_core_coreVrf_ebgpMultipath(), 
                    ipfix_exporters = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value._v1_global_config_patch_request_ipfixExporters_value(
                            exporter = graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value_exporter._v1_global_config_patch_request_ipfixExporters_value_exporter(
                                destination_address = 'example string', 
                                destination_port = 123, 
                                global_id = 1234567891011, 
                                is_global_sync = True, 
                                monitored_segments = [
                                    'example string'
                                    ], 
                                name = 'example string', 
                                sample_mode = 'ENUM_VALUE', 
                                sample_rate = 123, 
                                source_interface_name = 'example string', 
                                vrf_id = 1234567891011, ), )
                        }, 
                    nat_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                        ruleset = 'example string', ), 
                    networks = [
                        'example string'
                        ], 
                    ospfv2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(
                        process = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process(
                            admin_distance = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_admin_distance._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_adminDistance(), 
                            areas = {
                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value(
                                    area = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area(
                                        area_id = 'example string', 
                                        interfaces = {
                                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value(
                                                interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface(
                                                    cost = 123, 
                                                    dead_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_dead_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_deadIntervalValue(
                                                        dead_interval = 123, ), 
                                                    dr_priority = 123, 
                                                    hello_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_hello_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_helloIntervalValue(
                                                        hello_interval = 123, ), 
                                                    interface_name = 'example string', 
                                                    mtu = 123, 
                                                    mtu_ignore = True, 
                                                    prefix_sid = 123, 
                                                    retransmit_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmit_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmitIntervalValue(
                                                        retransmit_interval = 123, ), 
                                                    type = 'ENUM_VALUE', ), )
                                            }, 
                                        name = 'example string', 
                                        type = 'ENUM_VALUE', ), )
                                }, 
                            auto = True, 
                            default_originate = 'ENUM_VALUE', 
                            manual = 'example string', 
                            name = 'example string', 
                            redistribution = {
                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_redistribution_value()
                                }, ), ), 
                    ospfv3 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(), 
                    overlay_filters = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_overlay_filters._v1_devices__deviceId__config_put_request_core_coreVrf_overlayFilters(
                        export_policy = , 
                        import_policy = , ), 
                    static_routes = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value(
                            route = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route(
                                administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                                    distance = 123, ), 
                                description = 'example string', 
                                destination_prefix = 'example string', 
                                ip_version = 123, 
                                next_hop = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                    address = 'example string', 
                                    circuit = 'example string', 
                                    next_hop_address = 'example string', 
                                    third_party_ipsec_tunnel = 'example string', ), 
                                next_hops = [
                                    graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                        address = 'example string', 
                                        circuit = 'example string', 
                                        next_hop_address = 'example string', 
                                        third_party_ipsec_tunnel = 'example string', )
                                    ], ), )
                        }, 
                    syslog_targets = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value._v1_global_config_patch_request_syslogServers_value(
                            target = graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value_target._v1_global_config_patch_request_syslogServers_value_target(
                                enabled = True, 
                                global_id = 1234567891011, 
                                host = 'example string', 
                                interface_name = 'example string', 
                                is_global_sync = True, 
                                name = 'example string', 
                                port = 123, 
                                severity = 'ENUM_VALUE', 
                                transport = 'ENUM_VALUE', 
                                vrf_id = 1234567891011, ), )
                        }, 
                    traffic_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                        ruleset = 'example string', ), ),
                interfaces = {
                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value._v1_devices__deviceId__config_put_request_core_interfaces_value(
                        interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface._v1_devices__deviceId__config_put_request_core_interfaces_value_interface(
                            admin_status = True, 
                            alias = 'example string', 
                            circuit = 'example string', 
                            core_neighbor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor(
                                cost = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost(
                                    dynamic = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost_dynamic._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost_dynamic(
                                        bandwidth = 123, 
                                        latency = 123, ), 
                                    static = 123, ), 
                                ospf_cost = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost(
                                    static = 123, ), 
                                peer_hostname = 'example string', 
                                type = 'ENUM_VALUE', ), 
                            core_to_core_tunnel = graphiant_sdk.models.core_to_core_tunnel.coreToCoreTunnel(), 
                            create_link_local_address = True, 
                            default = graphiant_sdk.models.default.default(), 
                            description = 'example string', 
                            duplex = 'example string', 
                            dynamic = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost_dynamic._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost_dynamic(
                                bandwidth = 123, 
                                latency = 123, ), 
                            flex_algos = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_flex_algos._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_flexAlgos(
                                flex_algo_names = [
                                    'example string'
                                    ], ), 
                            gateway_neighbor = graphiant_sdk.models._v1_account_mfa_get_200_response._v1_account_mfa_get_200_response(
                                type = 'ENUM_VALUE', ), 
                            gw = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw(), 
                            interface_type = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType(
                                core_to_core_tunnel = graphiant_sdk.models.core_to_core_tunnel.coreToCoreTunnel(), 
                                default = graphiant_sdk.models.default.default(), 
                                wan = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type_wan._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType_wan(
                                    type = 'ENUM_VALUE', 
                                    vrf_name = 'example string', ), 
                                wan_management = graphiant_sdk.models.wan_management.wanManagement(), ), 
                            ipsec = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_ipsec._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_ipsec(
                                anti_replay_window_size = 123, 
                                dh_group = 'ENUM_VALUE', 
                                dpd_interval = 123, 
                                encryption_alg = 'ENUM_VALUE', 
                                esn = True, 
                                ike_integrity = 'ENUM_VALUE', 
                                initiator = True, 
                                ipsec_encryption_alg = 'ENUM_VALUE', 
                                ipsec_integrity = 'ENUM_VALUE', 
                                label = 'ENUM_VALUE', 
                                local_address = 'example string', 
                                local_circuit = 'example string', 
                                local_ike_peer_identity = 'example string', 
                                perfect_forward_secrecy = 'ENUM_VALUE', 
                                preshared_key = 'example string', 
                                reauth_interval = 123, 
                                rekey_interval = 123, 
                                remote_address = 'example string', 
                                remote_ike_peer_identity = 'example string', ), 
                            ipv4 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw(
                                address = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_engine_endpoints_value_engine_endpoint_addresses_value._v1_global_config_patch_request_snmps_value_config_engineEndpoints_value_engineEndpoint_addresses_value(), 
                                dhcp = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_dhcp._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_dhcp(
                                    dhcp_client = True, 
                                    dhcp_relay = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_dhcp_dhcp_relay._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_dhcp_dhcpRelay(
                                        relay_servers = [
                                            'example string'
                                            ], ), ), 
                                vrrp = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_vrrp._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_vrrp(
                                    group = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_vrrp_group._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_vrrp_group(
                                        accept_mode = True, 
                                        allow_inter_operability = True, 
                                        description = 'example string', 
                                        enabled = True, 
                                        preempt = True, 
                                        priority = 123, 
                                        tracked_interfaces = [
                                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_interfaces_inner_ipv4_vrrp_group_tracked_interfaces_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_interfaces_inner_ipv4_vrrpGroup_trackedInterfaces_inner(
                                                priority_decrement = 123, )
                                            ], 
                                        virtual_ip = 'example string', 
                                        virtual_router_id = 123, ), ), ), 
                            ipv6 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw(), 
                            lan = 'example string', 
                            lldp_enabled = True, 
                            loopback = True, 
                            max_transmission_unit = 123, 
                            mpls_enabled = True, 
                            ospf_cost = , 
                            ospf_interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_ospf_interface._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_ospfInterface(), 
                            peer_device_id = 1234567891011, 
                            peer_hostname = 'example string', 
                            security_zone = 'example string', 
                            speed = 1234567891011, 
                            static = 123, 
                            subinterfaces = {
                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value()
                                }, 
                            tcp_mss = 123, 
                            tcp_mss_v4 = 123, 
                            tcp_mss_v6 = 123, 
                            tunnel_interface = 'example string', 
                            tunnel_underlay = 'example string', 
                            wan = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_wan._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_wan(
                                type = 'ENUM_VALUE', 
                                vrf_name = 'example string', ), 
                            wan_management = graphiant_sdk.models.wan_management.wanManagement(), 
                            x_talk_filter = True, ), )
                    },
                ipfix_exporters = {
                    'key' : graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value._v1_global_config_patch_request_ipfixExporters_value(
                        exporter = graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value_exporter._v1_global_config_patch_request_ipfixExporters_value_exporter(
                            destination_address = 'example string', 
                            destination_port = 123, 
                            global_id = 1234567891011, 
                            is_global_sync = True, 
                            monitored_segments = [
                                'example string'
                                ], 
                            name = 'example string', 
                            sample_mode = 'ENUM_VALUE', 
                            sample_rate = 123, 
                            source_interface_name = 'example string', 
                            vrf_id = 1234567891011, ), )
                    },
                isp_vrfs = {
                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf._v1_devices__deviceId__config_put_request_core_coreVrf(
                        bgp_aggregations = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value(
                                config = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value_config._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value_config(
                                    as_set = True, 
                                    prefix = 'example string', 
                                    summary_only = True, ), )
                            }, 
                        bgp_neighbors = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value(
                                neighbor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor(
                                    address_families = {
                                        'key' : graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value(
                                            family = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value_family._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value_family(
                                                address_family = 'ENUM_VALUE', 
                                                inbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                    policy = 'example string', ), 
                                                outbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                    policy = 'example string', ), ), )
                                        }, 
                                    allow_as_in = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_allow_as_in._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_allowAsIn(
                                        count = 123, ), 
                                    as_override = True, 
                                    bfd = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_bfd._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_bfd(), 
                                    default_originate = 'ENUM_VALUE', 
                                    ebgp_multihop_ttl = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_ebgp_multihop_ttl._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_ebgpMultihopTtl(
                                        multi_hop = 123, ), 
                                    enabled = True, 
                                    hold_timer = 123, 
                                    hold_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                        timer = 123, ), 
                                    keepalive_timer = 123, 
                                    keepalive_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                        timer = 123, ), 
                                    local_address = 'example string', 
                                    local_interface = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_interface._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceInterface(
                                        interface = 'example string', ), 
                                    max_prefix_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_max_prefix_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_maxPrefixValue(
                                        max_prefix = 123, ), 
                                    md5_password = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_md5_password._v1_gateways_put_request_details_ipsecGateway_routing_bgp_md5Password(), 
                                    peer_asn = 123, 
                                    remote_address = 'example string', 
                                    remove_private_as = True, 
                                    send_community = True, ), )
                            }, 
                        bgp_redistribution = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpRedistribution_value(
                                protocol = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_notify_filter_profiles_value_notify_filter_profile_include_exclude_list_value._v1_global_config_patch_request_snmps_value_config_notifyFilterProfiles_value_notifyFilterProfile_includeExcludeList_value(
                                    enabled = True, ), )
                            }, 
                        dhcp_subnets = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value(
                                subnet = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet(
                                    default_lease_time_secs = 123, 
                                    description = 'example string', 
                                    domain_name = 'example string', 
                                    domain_name_server = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_nameservers._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_nameservers(
                                        primary = 'example string', 
                                        secondary = 'example string', ), 
                                    interface = 'example string', 
                                    ip_gateway = 'example string', 
                                    ip_prefix = 'example string', 
                                    ip_ranges = [
                                        graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                            end = 'example string', 
                                            start = 'example string', )
                                        ], 
                                    ip_ranges_v2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_ip_ranges_v2._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_ipRangesV2(
                                        ip_range = [
                                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                                end = 'example string', 
                                                start = 'example string', )
                                            ], ), 
                                    max_lease_time_secs = 123, 
                                    min_lease_time_secs = 123, 
                                    name = 'example string', 
                                    static_leases = {
                                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value(
                                            lease = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value_lease._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value_lease(
                                                hostname = 'example string', 
                                                ip_address = 'example string', 
                                                mac_address = 'example string', ), )
                                        }, ), )
                            }, 
                        ebgp_multipath = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ebgp_multipath._v1_devices__deviceId__config_put_request_core_coreVrf_ebgpMultipath(), 
                        ipfix_exporters = {
                            'key' : graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value._v1_global_config_patch_request_ipfixExporters_value(
                                exporter = graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value_exporter._v1_global_config_patch_request_ipfixExporters_value_exporter(
                                    destination_address = 'example string', 
                                    destination_port = 123, 
                                    global_id = 1234567891011, 
                                    is_global_sync = True, 
                                    monitored_segments = [
                                        'example string'
                                        ], 
                                    name = 'example string', 
                                    sample_mode = 'ENUM_VALUE', 
                                    sample_rate = 123, 
                                    source_interface_name = 'example string', 
                                    vrf_id = 1234567891011, ), )
                            }, 
                        nat_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                            ruleset = 'example string', ), 
                        networks = [
                            'example string'
                            ], 
                        ospfv2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(
                            process = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process(
                                admin_distance = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_admin_distance._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_adminDistance(), 
                                areas = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value(
                                        area = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area(
                                            area_id = 'example string', 
                                            interfaces = {
                                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value(
                                                    interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface(
                                                        cost = 123, 
                                                        dead_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_dead_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_deadIntervalValue(
                                                            dead_interval = 123, ), 
                                                        dr_priority = 123, 
                                                        hello_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_hello_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_helloIntervalValue(
                                                            hello_interval = 123, ), 
                                                        interface_name = 'example string', 
                                                        mtu = 123, 
                                                        mtu_ignore = True, 
                                                        prefix_sid = 123, 
                                                        retransmit_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmit_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmitIntervalValue(
                                                            retransmit_interval = 123, ), 
                                                        type = 'ENUM_VALUE', ), )
                                                }, 
                                            name = 'example string', 
                                            type = 'ENUM_VALUE', ), )
                                    }, 
                                auto = True, 
                                default_originate = 'ENUM_VALUE', 
                                manual = 'example string', 
                                name = 'example string', 
                                redistribution = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_redistribution_value()
                                    }, ), ), 
                        ospfv3 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(), 
                        overlay_filters = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_overlay_filters._v1_devices__deviceId__config_put_request_core_coreVrf_overlayFilters(
                            export_policy = , 
                            import_policy = , ), 
                        static_routes = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value(
                                route = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route(
                                    administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                                        distance = 123, ), 
                                    description = 'example string', 
                                    destination_prefix = 'example string', 
                                    ip_version = 123, 
                                    next_hop = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                        address = 'example string', 
                                        circuit = 'example string', 
                                        next_hop_address = 'example string', 
                                        third_party_ipsec_tunnel = 'example string', ), 
                                    next_hops = [
                                        graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                            address = 'example string', 
                                            circuit = 'example string', 
                                            next_hop_address = 'example string', 
                                            third_party_ipsec_tunnel = 'example string', )
                                        ], ), )
                            }, 
                        syslog_targets = {
                            'key' : graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value._v1_global_config_patch_request_syslogServers_value(
                                target = graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value_target._v1_global_config_patch_request_syslogServers_value_target(
                                    enabled = True, 
                                    global_id = 1234567891011, 
                                    host = 'example string', 
                                    interface_name = 'example string', 
                                    is_global_sync = True, 
                                    name = 'example string', 
                                    port = 123, 
                                    severity = 'ENUM_VALUE', 
                                    transport = 'ENUM_VALUE', 
                                    vrf_id = 1234567891011, ), )
                            }, 
                        traffic_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                            ruleset = 'example string', ), )
                    },
                maintenance_mode = True,
                name = 'example string',
                prefix_sets = {
                    'key' : graphiant_sdk.models._v1_global_config_patch_request_global_prefix_sets_value._v1_global_config_patch_request_globalPrefixSets_value(
                        prefix_set = graphiant_sdk.models._v1_global_config_patch_request_global_prefix_sets_value_prefix_set._v1_global_config_patch_request_globalPrefixSets_value_prefixSet(
                            description = 'example string', 
                            entries = {
                                'key' : graphiant_sdk.models._v1_global_config_patch_request_global_prefix_sets_value_prefix_set_entries_value._v1_global_config_patch_request_globalPrefixSets_value_prefixSet_entries_value(
                                    entry = graphiant_sdk.models._v1_global_config_patch_request_global_prefix_sets_value_prefix_set_entries_value_entry._v1_global_config_patch_request_globalPrefixSets_value_prefixSet_entries_value_entry(
                                        ip_prefix = 'example string', 
                                        mask_lower = 123, 
                                        mask_upper = 123, 
                                        seq = 123, ), )
                                }, 
                            global_id = 1234567891011, 
                            is_global_sync = True, 
                            mode = 'ENUM_VALUE', 
                            name = 'example string', ), )
                    },
                prometheus = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus._v1_devices__deviceId__config_put_request_core_prometheus(
                    rule_groups = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value(
                            rule_group = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value_rule_group._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value_ruleGroup(
                                description = 'example string', 
                                interval_seconds = 123, 
                                name = 'example string', 
                                rules = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value_rule_group_rules_value._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value_ruleGroup_rules_value()
                                    }, ), )
                        }, 
                    sink = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sink._v1_devices__deviceId__config_put_request_core_prometheus_sink(), 
                    sysdb_monitors = {
                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sysdb_monitors_value._v1_devices__deviceId__config_put_request_core_prometheus_sysdbMonitors_value(
                            sysdb_monitor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sysdb_monitors_value_sysdb_monitor._v1_devices__deviceId__config_put_request_core_prometheus_sysdbMonitors_value_sysdbMonitor(
                                interval_seconds = 123, 
                                name = 'example string', 
                                xpaths = [
                                    'example string'
                                    ], ), )
                        }, ),
                region = 'ENUM_VALUE',
                region_name = 'example string',
                route_policies = {
                    'key' : graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value._v1_global_config_patch_request_routingPolicies_value(
                        policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy._v1_global_config_patch_request_routingPolicies_value_policy(
                            attach_point = 'ENUM_VALUE', 
                            default_action = 'ENUM_VALUE', 
                            description = 'example string', 
                            global_id = 1234567891011, 
                            is_global_sync = True, 
                            name = 'example string', 
                            statements = {
                                'key' : graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value._v1_global_config_patch_request_routingPolicies_value_policy_statements_value(
                                    statement = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement(
                                        actions = {
                                            'key' : graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value(
                                                action = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action(
                                                    administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                                                        distance = 123, ), 
                                                    aspath_prepend = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_aspath_prepend._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_aspathPrepend(
                                                        repeat = 123, ), 
                                                    bgp_set_next_hop = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_bgp_set_next_hop._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_bgpSetNextHop(
                                                        next_hop = 'example string', ), 
                                                    call_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(), 
                                                    communities = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_communities._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_communities(
                                                        community = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_communities_community._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_communities_community(
                                                            additive = True, 
                                                            community_list = [
                                                                'example string'
                                                                ], ), ), 
                                                    local_pref = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_local_pref._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_localPref(), 
                                                    metric = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_metric._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_metric(
                                                        absolute = 123, 
                                                        modifier = 123, ), 
                                                    result = 'ENUM_VALUE', 
                                                    seq = 123, 
                                                    weight = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_weight._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_weight(), ), )
                                            }, 
                                        matches = {
                                            'key' : graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value(
                                                match = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match(
                                                    prefix_set = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_prefix_set._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_prefixSet(), 
                                                    protocol_route_type = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_protocol_route_type._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_protocolRouteType(
                                                        route_type = 'ENUM_VALUE', ), 
                                                    route_tag = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_route_tag._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_routeTag(
                                                        entry = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_route_tag_entry._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_routeTag_entry(
                                                            level_one = 'example string', 
                                                            level_two = 'example string', 
                                                            level_zero = 'example string', ), ), 
                                                    seq = 123, 
                                                    source_interface = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_interface._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceInterface(
                                                        interface = 'example string', ), 
                                                    source_protocol = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_protocol._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceProtocol(
                                                        protocol = 'ENUM_VALUE', ), 
                                                    stale = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_stale._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_stale(), ), )
                                            }, 
                                        seq = 123, ), )
                                }, ), )
                    },
                site = graphiant_sdk.models._v1_sites_post_request_site._v1_sites_post_request_site(
                    global_prefix_set_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    ipfix_exporter_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    ipfix_exporter_ops_v2 = {
                        'key' : graphiant_sdk.models._v1_global_config_site_post_request_ipfix_exporter_ops_v2_value._v1_global_config_site_post_request_ipfixExporterOpsV2_value(
                            interface = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_interface._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceInterface(), 
                            operation = 'ENUM_VALUE', )
                        }, 
                    location = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_location._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_location(
                        address_line1 = 'example string', 
                        address_line2 = 'example string', 
                        city = 'example string', 
                        country = 'example string', 
                        country_code = 'example string', 
                        latitude = 123.45, 
                        longitude = 123.45, 
                        notes = 'example string', 
                        province_code = 'example string', 
                        state = 'example string', 
                        state_code = 'example string', ), 
                    name = 'example string', 
                    notes = 'example string', 
                    prefix_set_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    route_tag = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_route_tag_entry._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_routeTag_entry(
                        level_one = 'example string', 
                        level_two = 'example string', 
                        level_zero = 'example string', ), 
                    routing_policy_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    snmp_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    syslog_server_ops = {
                        'key' : 'ENUM_VALUE'
                        }, 
                    syslog_server_ops_v2 = {
                        'key' : graphiant_sdk.models._v1_global_config_site_post_request_ipfix_exporter_ops_v2_value._v1_global_config_site_post_request_ipfixExporterOpsV2_value(
                            operation = 'ENUM_VALUE', )
                        }, 
                    traffic_policy_ops = {
                        'key' : 'ENUM_VALUE'
                        }, ),
                traffic_policy = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies._v1_global_config_patch_request_trafficPolicies(
                    dpi_applications = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value._v1_global_config_patch_request_trafficPolicies_dpiApplications_value(
                            application = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value_application._v1_global_config_patch_request_trafficPolicies_dpiApplications_value_application(
                                description = 'example string', 
                                destination_network = 'example string', 
                                destination_network_list = 'example string', 
                                destination_networks = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value_application_destination_networks._v1_global_config_patch_request_trafficPolicies_dpiApplications_value_application_destinationNetworks(
                                    name = 'example string', 
                                    networks = [
                                        'example string'
                                        ], ), 
                                destination_port = 123, 
                                destination_port_list = 'example string', 
                                destination_ports = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value_application_destination_ports._v1_global_config_patch_request_trafficPolicies_dpiApplications_value_application_destinationPorts(
                                    name = 'example string', 
                                    ports = [
                                        123
                                        ], ), 
                                icmp_type = 123, 
                                ip_protocol = 'ENUM_VALUE', 
                                name = 'example string', 
                                source_network = 'example string', 
                                source_network_list = 'example string', 
                                source_networks = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value_application_destination_networks._v1_global_config_patch_request_trafficPolicies_dpiApplications_value_application_destinationNetworks(
                                    name = 'example string', ), 
                                source_port = 123, 
                                source_port_list = 'example string', 
                                source_ports = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_dpi_applications_value_application_destination_ports._v1_global_config_patch_request_trafficPolicies_dpiApplications_value_application_destinationPorts(
                                    name = 'example string', ), ), )
                        }, 
                    network_lists = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_network_lists_value._v1_global_config_patch_request_trafficPolicies_networkLists_value(
                            list = , )
                        }, 
                    port_lists = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_port_lists_value._v1_global_config_patch_request_trafficPolicies_portLists_value()
                        }, 
                    security_rulesets = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value._v1_global_config_patch_request_trafficPolicies_securityRulesets_value(
                            ruleset = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset(
                                description = 'example string', 
                                global_id = 1234567891011, 
                                is_global_sync = True, 
                                name = 'example string', 
                                rules = {
                                    'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value(
                                        rule = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule(
                                            action = 'ENUM_VALUE', 
                                            description = 'example string', 
                                            downlink_burst_rate = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_downlink_burst_rate._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_downlinkBurstRate(
                                                rate = 123, ), 
                                            downlink_policer_rate = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_downlink_burst_rate._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_downlinkBurstRate(
                                                rate = 123, ), 
                                            logging = True, 
                                            match = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match(
                                                content_filter = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_content_filter._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_contentFilter(), 
                                                destination_network = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_destination_network._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_destinationNetwork(), 
                                                destination_port = 123, 
                                                destination_port_range = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_destination_port_range._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_destinationPortRange(
                                                    lower = 123, 
                                                    upper = 123, ), 
                                                dscp = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_dscp._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_dscp(), 
                                                icmp_type = 123, 
                                                ip_protocol = 'ENUM_VALUE', 
                                                protocol = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_protocol._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_protocol(
                                                    ip_protocol = 'ENUM_VALUE', ), 
                                                source_network = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_source_network._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_sourceNetwork(), 
                                                source_port = 123, 
                                                source_port_range = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_destination_port_range._v1_global_config_patch_request_trafficPolicies_securityRulesets_value_ruleset_rules_value_rule_match_destinationPortRange(
                                                    lower = 123, 
                                                    upper = 123, ), ), 
                                            name = 'example string', 
                                            seq = 123, 
                                            uplink_burst_rate = , 
                                            uplink_policer_rate = , ), )
                                    }, ), )
                        }, 
                    traffic_rulesets = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_traffic_rulesets_value._v1_global_config_patch_request_trafficPolicies_trafficRulesets_value()
                        }, 
                    zone_firewalls = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value(
                            zone_firewall = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value_zone_firewall._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value_zoneFirewall(
                                ip = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value_zone_firewall_ip._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value_zoneFirewall_ip(
                                    block_land_attacks = True, 
                                    session_limit = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value_zone_firewall_ip_session_limit._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value_zoneFirewall_ip_sessionLimit(
                                        limit = 123, ), 
                                    urpf = 'ENUM_VALUE', ), 
                                udp = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value_zone_firewall_udp._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value_zoneFirewall_udp(
                                    unidirectional_flow_limit = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zone_firewalls_value_zone_firewall_ip_session_limit._v1_global_config_patch_request_trafficPolicies_zoneFirewalls_value_zoneFirewall_ip_sessionLimit(
                                        limit = 123, ), ), ), )
                        }, 
                    zones = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zones_value._v1_global_config_patch_request_trafficPolicies_zones_value(
                            zone = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zones_value_zone._v1_global_config_patch_request_trafficPolicies_zones_value_zone(
                                inside = 'example string', 
                                pairs = {
                                    'key' : graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zones_value_zone_pairs_value._v1_global_config_patch_request_trafficPolicies_zones_value_zone_pairs_value(
                                        pair = graphiant_sdk.models._v1_global_config_patch_request_traffic_policies_zones_value_zone_pairs_value_pair._v1_global_config_patch_request_trafficPolicies_zones_value_zone_pairs_value_pair(
                                            outside = 'example string', 
                                            tcp_protection = True, ), )
                                    }, ), )
                        }, ),
                vrfs = {
                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf._v1_devices__deviceId__config_put_request_core_coreVrf(
                        bgp_aggregations = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value(
                                config = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_aggregations_value_config._v1_devices__deviceId__config_put_request_core_coreVrf_bgpAggregations_value_config(
                                    as_set = True, 
                                    prefix = 'example string', 
                                    summary_only = True, ), )
                            }, 
                        bgp_neighbors = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value(
                                neighbor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor(
                                    address_families = {
                                        'key' : graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value(
                                            family = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_address_families_value_family._v1_gateways_put_request_details_ipsecGateway_routing_bgp_addressFamilies_value_family(
                                                address_family = 'ENUM_VALUE', 
                                                inbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                    policy = 'example string', ), 
                                                outbound_policy = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_call_policy._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_callPolicy(
                                                    policy = 'example string', ), ), )
                                        }, 
                                    allow_as_in = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_allow_as_in._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_allowAsIn(
                                        count = 123, ), 
                                    as_override = True, 
                                    bfd = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_bfd._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_bfd(), 
                                    default_originate = 'ENUM_VALUE', 
                                    ebgp_multihop_ttl = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_ebgp_multihop_ttl._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_ebgpMultihopTtl(
                                        multi_hop = 123, ), 
                                    enabled = True, 
                                    hold_timer = 123, 
                                    hold_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                        timer = 123, ), 
                                    keepalive_timer = 123, 
                                    keepalive_timer_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_hold_timer_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_holdTimerValue(
                                        timer = 123, ), 
                                    local_address = 'example string', 
                                    local_interface = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_matches_value_match_source_interface._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_matches_value_match_sourceInterface(
                                        interface = 'example string', ), 
                                    max_prefix_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_neighbors_value_neighbor_max_prefix_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpNeighbors_value_neighbor_maxPrefixValue(
                                        max_prefix = 123, ), 
                                    md5_password = graphiant_sdk.models._v1_gateways_put_request_details_ipsec_gateway_routing_bgp_md5_password._v1_gateways_put_request_details_ipsecGateway_routing_bgp_md5Password(), 
                                    peer_asn = 123, 
                                    remote_address = 'example string', 
                                    remove_private_as = True, 
                                    send_community = True, ), )
                            }, 
                        bgp_redistribution = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_bgp_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_bgpRedistribution_value(
                                protocol = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_notify_filter_profiles_value_notify_filter_profile_include_exclude_list_value._v1_global_config_patch_request_snmps_value_config_notifyFilterProfiles_value_notifyFilterProfile_includeExcludeList_value(
                                    enabled = True, ), )
                            }, 
                        dhcp_subnets = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value(
                                subnet = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet(
                                    default_lease_time_secs = 123, 
                                    description = 'example string', 
                                    domain_name = 'example string', 
                                    domain_name_server = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_nameservers._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_nameservers(
                                        primary = 'example string', 
                                        secondary = 'example string', ), 
                                    interface = 'example string', 
                                    ip_gateway = 'example string', 
                                    ip_prefix = 'example string', 
                                    ip_ranges = [
                                        graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                            end = 'example string', 
                                            start = 'example string', )
                                        ], 
                                    ip_ranges_v2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_ip_ranges_v2._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_ipRangesV2(
                                        ip_range = [
                                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                                end = 'example string', 
                                                start = 'example string', )
                                            ], ), 
                                    max_lease_time_secs = 123, 
                                    min_lease_time_secs = 123, 
                                    name = 'example string', 
                                    static_leases = {
                                        'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value(
                                            lease = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_dhcp_subnets_value_subnet_static_leases_value_lease._v1_devices__deviceId__config_put_request_core_coreVrf_dhcpSubnets_value_subnet_staticLeases_value_lease(
                                                hostname = 'example string', 
                                                ip_address = 'example string', 
                                                mac_address = 'example string', ), )
                                        }, ), )
                            }, 
                        ebgp_multipath = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ebgp_multipath._v1_devices__deviceId__config_put_request_core_coreVrf_ebgpMultipath(), 
                        ipfix_exporters = {
                            'key' : graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value._v1_global_config_patch_request_ipfixExporters_value(
                                exporter = graphiant_sdk.models._v1_global_config_patch_request_ipfix_exporters_value_exporter._v1_global_config_patch_request_ipfixExporters_value_exporter(
                                    destination_address = 'example string', 
                                    destination_port = 123, 
                                    global_id = 1234567891011, 
                                    is_global_sync = True, 
                                    monitored_segments = [
                                        'example string'
                                        ], 
                                    name = 'example string', 
                                    sample_mode = 'ENUM_VALUE', 
                                    sample_rate = 123, 
                                    source_interface_name = 'example string', 
                                    vrf_id = 1234567891011, ), )
                            }, 
                        nat_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                            ruleset = 'example string', ), 
                        networks = [
                            'example string'
                            ], 
                        ospfv2 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(
                            process = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process(
                                admin_distance = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_admin_distance._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_adminDistance(), 
                                areas = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value(
                                        area = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area(
                                            area_id = 'example string', 
                                            interfaces = {
                                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value(
                                                    interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface(
                                                        cost = 123, 
                                                        dead_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_dead_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_deadIntervalValue(
                                                            dead_interval = 123, ), 
                                                        dr_priority = 123, 
                                                        hello_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_hello_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_helloIntervalValue(
                                                            hello_interval = 123, ), 
                                                        interface_name = 'example string', 
                                                        mtu = 123, 
                                                        mtu_ignore = True, 
                                                        prefix_sid = 123, 
                                                        retransmit_interval_value = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmit_interval_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_areas_value_area_interfaces_value_interface_retransmitIntervalValue(
                                                            retransmit_interval = 123, ), 
                                                        type = 'ENUM_VALUE', ), )
                                                }, 
                                            name = 'example string', 
                                            type = 'ENUM_VALUE', ), )
                                    }, 
                                auto = True, 
                                default_originate = 'ENUM_VALUE', 
                                manual = 'example string', 
                                name = 'example string', 
                                redistribution = {
                                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2_process_redistribution_value._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2_process_redistribution_value()
                                    }, ), ), 
                        ospfv3 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_ospfv2._v1_devices__deviceId__config_put_request_core_coreVrf_ospfv2(), 
                        overlay_filters = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_overlay_filters._v1_devices__deviceId__config_put_request_core_coreVrf_overlayFilters(
                            export_policy = , 
                            import_policy = , ), 
                        static_routes = {
                            'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value(
                                route = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route(
                                    administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                                        distance = 123, ), 
                                    description = 'example string', 
                                    destination_prefix = 'example string', 
                                    ip_version = 123, 
                                    next_hop = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                        address = 'example string', 
                                        circuit = 'example string', 
                                        next_hop_address = 'example string', 
                                        third_party_ipsec_tunnel = 'example string', ), 
                                    next_hops = [
                                        graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                                            address = 'example string', 
                                            circuit = 'example string', 
                                            next_hop_address = 'example string', 
                                            third_party_ipsec_tunnel = 'example string', )
                                        ], ), )
                            }, 
                        syslog_targets = {
                            'key' : graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value._v1_global_config_patch_request_syslogServers_value(
                                target = graphiant_sdk.models._v1_global_config_patch_request_syslog_servers_value_target._v1_global_config_patch_request_syslogServers_value_target(
                                    enabled = True, 
                                    global_id = 1234567891011, 
                                    host = 'example string', 
                                    interface_name = 'example string', 
                                    is_global_sync = True, 
                                    name = 'example string', 
                                    port = 123, 
                                    severity = 'ENUM_VALUE', 
                                    transport = 'ENUM_VALUE', 
                                    vrf_id = 1234567891011, ), )
                            }, 
                        traffic_ruleset = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_nat_ruleset._v1_devices__deviceId__config_put_request_core_coreVrf_natRuleset(
                            ruleset = 'example string', ), )
                    }
            )
        else:
            return V1DevicesDeviceIdConfigPutRequestCore(
        )
        """

    def testV1DevicesDeviceIdConfigPutRequestCore(self):
        """Test V1DevicesDeviceIdConfigPutRequestCore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
