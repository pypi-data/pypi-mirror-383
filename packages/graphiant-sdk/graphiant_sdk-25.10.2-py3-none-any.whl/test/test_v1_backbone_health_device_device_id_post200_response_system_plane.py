# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_backbone_health_device_device_id_post200_response_system_plane import V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane

class TestV1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane(unittest.TestCase):
    """V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane:
        """Test V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane`
        """
        model = V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane()
        if include_optional:
            return V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane(
                cpu = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                        interface_name = 'example string', 
                        peer_name = 'example string', 
                        time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        value = 123.45, )
                    ],
                crashes = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_system_plane_crashes_inner._v1_backbone_health_device__deviceId__post_200_response_systemPlane_crashes_inner(
                        time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), )
                    ],
                disk = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                        interface_name = 'example string', 
                        peer_name = 'example string', 
                        time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        value = 123.45, )
                    ],
                last_crash = graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_system_plane_last_crash._v1_backbone_health_device__deviceId__post_200_response_systemPlane_lastCrash(
                    crash_details = 'example string', 
                    reason = 'example string', 
                    up_since_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                        nanos = 123, 
                        seconds = 1234567891011, ), ),
                maintenance_windows = [
                    graphiant_sdk.models._v2_notificationlist_post_request._v2_notificationlist_post_request(
                        time_window = graphiant_sdk.models._v2_notificationlist_post_request_time_window._v2_notificationlist_post_request_timeWindow(
                            bucket_size_sec = 123, 
                            old_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), 
                            recent_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), ), )
                    ],
                memory = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                        interface_name = 'example string', 
                        peer_name = 'example string', 
                        time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        value = 123.45, )
                    ],
                overheating = [
                    graphiant_sdk.models._v2_notificationlist_post_request._v2_notificationlist_post_request(
                        time_window = graphiant_sdk.models._v2_notificationlist_post_request_time_window._v2_notificationlist_post_request_timeWindow(
                            bucket_size_sec = 123, 
                            old_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), 
                            recent_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), ), )
                    ],
                status = 'ENUM_VALUE',
                temperature_series = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                        interface_name = 'example string', 
                        peer_name = 'example string', 
                        time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        value = 123.45, )
                    ]
            )
        else:
            return V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane(
        )
        """

    def testV1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane(self):
        """Test V1BackboneHealthDeviceDeviceIdPost200ResponseSystemPlane"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
