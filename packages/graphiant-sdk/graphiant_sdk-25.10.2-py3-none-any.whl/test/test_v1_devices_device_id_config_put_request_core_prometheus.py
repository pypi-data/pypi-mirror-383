# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_prometheus import V1DevicesDeviceIdConfigPutRequestCorePrometheus

class TestV1DevicesDeviceIdConfigPutRequestCorePrometheus(unittest.TestCase):
    """V1DevicesDeviceIdConfigPutRequestCorePrometheus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DevicesDeviceIdConfigPutRequestCorePrometheus:
        """Test V1DevicesDeviceIdConfigPutRequestCorePrometheus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DevicesDeviceIdConfigPutRequestCorePrometheus`
        """
        model = V1DevicesDeviceIdConfigPutRequestCorePrometheus()
        if include_optional:
            return V1DevicesDeviceIdConfigPutRequestCorePrometheus(
                rule_groups = {
                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value(
                        rule_group = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value_rule_group._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value_ruleGroup(
                            description = 'example string', 
                            interval_seconds = 123, 
                            name = 'example string', 
                            rules = {
                                'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_rule_groups_value_rule_group_rules_value._v1_devices__deviceId__config_put_request_core_prometheus_ruleGroups_value_ruleGroup_rules_value()
                                }, ), )
                    },
                sink = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sink._v1_devices__deviceId__config_put_request_core_prometheus_sink(
                    sink = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sink_sink._v1_devices__deviceId__config_put_request_core_prometheus_sink_sink(
                        description = 'example string', 
                        host = 'example string', 
                        path = 'example string', 
                        port = 123, ), ),
                sysdb_monitors = {
                    'key' : graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sysdb_monitors_value._v1_devices__deviceId__config_put_request_core_prometheus_sysdbMonitors_value(
                        sysdb_monitor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_prometheus_sysdb_monitors_value_sysdb_monitor._v1_devices__deviceId__config_put_request_core_prometheus_sysdbMonitors_value_sysdbMonitor(
                            interval_seconds = 123, 
                            name = 'example string', 
                            xpaths = [
                                'example string'
                                ], ), )
                    }
            )
        else:
            return V1DevicesDeviceIdConfigPutRequestCorePrometheus(
        )
        """

    def testV1DevicesDeviceIdConfigPutRequestCorePrometheus(self):
        """Test V1DevicesDeviceIdConfigPutRequestCorePrometheus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
