# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_extranets_b2b_peering_consumer_customer_id_consumer_details_get200_response_ipsec_tunnel_config_inner import V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner

class TestV1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner(unittest.TestCase):
    """V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner:
        """Test V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner`
        """
        model = V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner()
        if include_optional:
            return V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner(
                bgp_graphiant_asn = 123,
                bgp_local_asn = 123,
                bgp_neighbor_hold_time = 123,
                bgp_neighbor_ipv4 = 'example string',
                bgp_neighbor_ipv6 = 'example string',
                dpd_interval = 123,
                dpd_retries = 123,
                graphiant_destination_ip = 'example string',
                graphiant_ike_id = 'example string',
                graphiant_outer_tunnel_ip = 'example string',
                graphiant_tunnel_ip = 'example string',
                graphiant_tunnel_ipv6 = 'example string',
                ike_authentication_algorithm = 'example string',
                ike_authentication_method = 'example string',
                ike_dh_algorithm = 'example string',
                ike_encryption_algorithm = 'example string',
                ike_lifetime = 'example string',
                ike_preshared_key = 'example string',
                ike_version = 123,
                ipsec_authentication_algorithm = 'example string',
                ipsec_encryption_algorithm = 'example string',
                ipsec_extended_sequence_number = True,
                ipsec_lifetime = 'example string',
                ipsec_mode = 'example string',
                ipsec_pfs_algorithm = 'example string',
                ipsec_protocol = 'example string',
                local_ike_id = 'example string',
                local_outer_tunnel_ip = 'example string',
                local_tunnel_ip = 'example string',
                local_tunnel_ipv6 = 'example string',
                tcp_mss = 123,
                tunnel_mtu = 123
            )
        else:
            return V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner(
        )
        """

    def testV1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner(self):
        """Test V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
