# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_lan_segments_get200_response import V1LanSegmentsGet200Response

class TestV1LanSegmentsGet200Response(unittest.TestCase):
    """V1LanSegmentsGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1LanSegmentsGet200Response:
        """Test V1LanSegmentsGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1LanSegmentsGet200Response`
        """
        model = V1LanSegmentsGet200Response()
        if include_optional:
            return V1LanSegmentsGet200Response(
                page_info = graphiant_sdk.models._v1_nat_entries__device_id__get_200_response_page_info._v1_nat_entries__deviceId__get_200_response_pageInfo(
                    current_page = 1, 
                    end_cursor = 'xxxxxxy', 
                    has_next_page = False, 
                    has_prev_page = True, 
                    start_cursor = 'xxxxxx', 
                    total_pages = 4, 
                    total_records = 400, ),
                segments = [
                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner(
                        bgp_aggregations = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_aggregations_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpAggregations_inner(
                                as_set = True, 
                                id = 1234567891011, 
                                prefix = 'example string', 
                                summary_only = True, )
                            ], 
                        bgp_multipath = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_multipath._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpMultipath(
                            enabled = True, 
                            vrf_id = 1234567891011, ), 
                        bgp_neighbors = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_neighbors_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpNeighbors_inner(
                                address_families = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_neighbors_inner_address_families_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpNeighbors_inner_addressFamilies_inner(
                                        address_family = 'ENUM_VALUE', 
                                        id = 1234567891011, 
                                        inbound_policy = 'example string', 
                                        outbound_policy = 'example string', )
                                    ], 
                                allow_as_in = 123, 
                                as_override = True, 
                                bfd = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_neighbors_inner_bfd._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpNeighbors_inner_bfd(
                                    enabled = True, 
                                    minimum_interval = 123, 
                                    multiplier = 123, ), 
                                bfd_neighbor = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_neighbors_inner_bfd_neighbor._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpNeighbors_inner_bfdNeighbor(
                                    desired_minimum_tx_interval = 123, 
                                    if_index = 123, 
                                    interface = 'example string', 
                                    last_updated = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                        nanos = 123, 
                                        seconds = 1234567891011, ), 
                                    local_diag = 'ENUM_VALUE', 
                                    peer_address = 'example string', 
                                    remote_diag = 'ENUM_VALUE', 
                                    required_minimum_rx_interval = 123, 
                                    segment_name = 'example string', 
                                    source_address = 'example string', 
                                    state = 'ENUM_VALUE', 
                                    time_in_state = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                        nanos = 123, 
                                        seconds = 1234567891011, ), 
                                    up = True, ), 
                                bgp_type = 'ENUM_VALUE', 
                                default_originate = 'ENUM_VALUE', 
                                enabled = True, 
                                hold_timer = 123, 
                                id = 1234567891011, 
                                keepalive_timer = 123, 
                                local_address = 'example string', 
                                local_interface = 'example string', 
                                max_prefix = 10000, 
                                md5_password = 'example string', 
                                multi_hop = 5, 
                                peer_asn = 123, 
                                remote_address = 'example string', 
                                remove_private_as = True, 
                                send_community = False, 
                                state = 'ENUM_VALUE', 
                                time_since_last_oper_change = , 
                                up = True, )
                            ], 
                        bgp_redistributions = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_redistributions._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpRedistributions(
                            bgp = True, 
                            connected = True, 
                            dia = True, 
                            ospfv2 = True, 
                            static = True, ), 
                        description = 'example string', 
                        dhcp_subnets = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner(
                                default_lease_time_secs = 123, 
                                description = 'example string', 
                                domain_name = 'example string', 
                                gateway = 'example string', 
                                id = 1234567891011, 
                                interface = 'example string', 
                                ip_prefix = 'example string', 
                                ip_version = 123, 
                                leases = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_leases_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_leases_inner(
                                        ends_at = , 
                                        id = 1234567891011, 
                                        ip_address = 'example string', 
                                        mac_address = 'example string', 
                                        vrf = 'example string', )
                                    ], 
                                max_lease_time_secs = 123, 
                                min_lease_time_secs = 123, 
                                name = 'example string', 
                                nameservers = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_nameservers._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_nameservers(
                                    primary = 'example string', 
                                    secondary = 'example string', ), 
                                ranges = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_ranges_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_ranges_inner(
                                        end = 'example string', 
                                        start = 'example string', )
                                    ], 
                                static_leases = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_dhcp_subnets_inner_static_leases_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_dhcpSubnets_inner_staticLeases_inner(
                                        hostname = 'example string', 
                                        id = 1234567891011, 
                                        ip_address = 'example string', 
                                        mac_address = 'example string', 
                                        vrf = 'example string', )
                                    ], 
                                total_addresses = 12345678910, 
                                utilization = 123, )
                            ], 
                        enterprise_id = 1234567891011, 
                        function = 'example string', 
                        id = 1234567891011, 
                        ipfix_exporters = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_ipfix_exporters_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_ipfixExporters_inner(
                                destination_address = 'example string', 
                                destination_port = 123, 
                                error_message = 'example string', 
                                global_id = 1234567891011, 
                                id = 1234567891011, 
                                monitored_segments = [
                                    'example string'
                                    ], 
                                name = 'example string', 
                                sample_mode = 'example string', 
                                sample_rate = 1234567891011, 
                                source_address = 'example string', 
                                source_interface = 'example string', 
                                source_segment = 'example string', 
                                status = 'ENUM_VALUE', 
                                vrf_id = 1234567891011, 
                                vrf_name = 'example string', )
                            ], 
                        name = 'example string', 
                        nat_ruleset = 'example string', 
                        networks = [
                            'example string'
                            ], 
                        ospfv2_process = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_ospfv2Process(
                            admin_distance = 100, 
                            areas = [
                                graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process_areas_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_ospfv2Process_areas_inner(
                                    area_id = 'example string', 
                                    bfd_neighbors = [
                                        graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_bgp_neighbors_inner_bfd_neighbor._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_bgpNeighbors_inner_bfdNeighbor(
                                            desired_minimum_tx_interval = 123, 
                                            if_index = 123, 
                                            interface = 'example string', 
                                            local_diag = 'ENUM_VALUE', 
                                            peer_address = 'example string', 
                                            remote_diag = 'ENUM_VALUE', 
                                            required_minimum_rx_interval = 123, 
                                            segment_name = 'example string', 
                                            source_address = 'example string', 
                                            state = 'ENUM_VALUE', 
                                            up = True, )
                                        ], 
                                    id = 1234567891011, 
                                    interfaces = [
                                        graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process_areas_inner_interfaces_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_ospfv2Process_areas_inner_interfaces_inner(
                                            cost = 123, 
                                            dead_interval = 123, 
                                            dead_interval_value = 123, 
                                            dr_priority = 123, 
                                            hello_interval = 123, 
                                            hello_interval_value = 123, 
                                            id = 1234567891011, 
                                            if_index = 123, 
                                            interface = 'example string', 
                                            max_transmission_unit = 123, 
                                            mtu_ignore = True, 
                                            prefix_sid = 123, 
                                            retransmit_interval = 123, 
                                            retransmit_interval_value = 123, 
                                            type = 'ENUM_VALUE', )
                                        ], 
                                    name = 'example string', 
                                    type = 'ENUM_VALUE', )
                                ], 
                            auto_router_id = True, 
                            default_originate = 'ENUM_VALUE', 
                            id = 1234567891011, 
                            redistributed_protocols = [
                                graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv2_process_redistributed_protocols_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_ospfv2Process_redistributedProtocols_inner(
                                    metric = 123, 
                                    metric_type = 'ENUM_VALUE', 
                                    redist_type = 'ENUM_VALUE', )
                                ], 
                            router_id = 'example string', ), 
                        ospfv3_process = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_ospfv3_process._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_ospfv3Process(
                            admin_distance = 100, 
                            default_originate = 'ENUM_VALUE', 
                            id = 1234567891011, 
                            router_id = 'example string', 
                            version = 123, ), 
                        overlay_filters = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_overlay_filters._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_overlayFilters(
                            inbound_filter = 'example string', 
                            outbound_filter = 'example string', ), 
                        routable = True, 
                        route_distinguisher = 'example string', 
                        static_routes = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_static_routes_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_staticRoutes_inner(
                                administrative_distance = 123, 
                                description = 'example string', 
                                id = 1234567891011, 
                                next_hop = graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_static_routes_inner_next_hop._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_staticRoutes_inner_nextHop(
                                    circuit = 'example string', 
                                    id = 1234567891011, 
                                    metric = 123, 
                                    next_hop_address = 'example string', 
                                    nexthop = 'example string', 
                                    outgoing_interface = 'example string', 
                                    third_party_ipsec_tunnel = 'example string', ), 
                                next_hops = [
                                    graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_circuits_inner_static_routes_inner_next_hop._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_circuits_inner_staticRoutes_inner_nextHop(
                                        circuit = 'example string', 
                                        id = 1234567891011, 
                                        metric = 123, 
                                        next_hop_address = 'example string', 
                                        nexthop = 'example string', 
                                        outgoing_interface = 'example string', 
                                        third_party_ipsec_tunnel = 'example string', )
                                    ], 
                                prefix = 'example string', )
                            ], 
                        syslog_targets = [
                            graphiant_sdk.models._v1_extranets_get_200_response_policies_inner_branches_excluded_devices_inner_segments_inner_syslog_targets_inner._v1_extranets_get_200_response_policies_inner_branches_excludedDevices_inner_segments_inner_syslogTargets_inner(
                                destination_host = 'example string', 
                                destination_port = 123, 
                                enabled = True, 
                                error_message = 'example string', 
                                global_id = 1234567891011, 
                                id = 1234567891011, 
                                name = 'example string', 
                                severity = 'ENUM_VALUE', 
                                source_interface = 'example string', 
                                status = 'ENUM_VALUE', 
                                transport = 'ENUM_VALUE', 
                                vrf_id = 1234567891011, 
                                vrf_name = 'example string', )
                            ], 
                        traffic_ruleset = 'example string', )
                    ]
            )
        else:
            return V1LanSegmentsGet200Response(
        )
        """

    def testV1LanSegmentsGet200Response(self):
        """Test V1LanSegmentsGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
