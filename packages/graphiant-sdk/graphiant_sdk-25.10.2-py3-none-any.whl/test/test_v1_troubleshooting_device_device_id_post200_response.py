# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_troubleshooting_device_device_id_post200_response import V1TroubleshootingDeviceDeviceIdPost200Response

class TestV1TroubleshootingDeviceDeviceIdPost200Response(unittest.TestCase):
    """V1TroubleshootingDeviceDeviceIdPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1TroubleshootingDeviceDeviceIdPost200Response:
        """Test V1TroubleshootingDeviceDeviceIdPost200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1TroubleshootingDeviceDeviceIdPost200Response`
        """
        model = V1TroubleshootingDeviceDeviceIdPost200Response()
        if include_optional:
            return V1TroubleshootingDeviceDeviceIdPost200Response(
                maintenance_mode = True,
                colr_active = True,
                control_plane = graphiant_sdk.models._v1_troubleshooting_device__device_id__post_200_response_control_plane._v1_troubleshooting_device__deviceId__post_200_response_controlPlane(
                    control_transitions = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner(
                            name = 'example string', 
                            transitions = [
                                graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                                    interface_name = 'example string', 
                                    peer_name = 'example string', 
                                    time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                        nanos = 123, 
                                        seconds = 1234567891011, ), 
                                    value = 123.45, )
                                ], )
                        ], 
                    management_transitions = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner(
                            name = 'example string', )
                        ], 
                    status = 'ENUM_VALUE', ),
                data_plane = graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_data_plane._v1_backbone_health_device__deviceId__post_200_response_dataPlane(
                    down_transitions = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner(
                            name = 'example string', 
                            transitions = [
                                graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                                    interface_name = 'example string', 
                                    peer_name = 'example string', 
                                    time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                        nanos = 123, 
                                        seconds = 1234567891011, ), 
                                    value = 123.45, )
                                ], )
                        ], 
                    session_slas = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_data_plane_session_slas_inner._v1_backbone_health_device__deviceId__post_200_response_dataPlane_sessionSlas_inner(
                            name = 'example string', 
                            values = [
                                graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_data_plane_session_slas_inner_values_inner._v1_backbone_health_device__deviceId__post_200_response_dataPlane_sessionSlas_inner_values_inner(
                                    delay_value = 123.45, 
                                    jitter_value = 123.45, 
                                    loss_value = 123.45, 
                                    status = 'ENUM_VALUE', 
                                    value = 123.45, )
                                ], )
                        ], 
                    status = 'ENUM_VALUE', ),
                issues = [
                    graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_issues_inner._v1_backbone_health_device__deviceId__post_200_response_issues_inner(
                        alert_id = 'example string', 
                        allow_listed = True, 
                        component = 'example string', 
                        end_time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        entity = 'example string', 
                        issue = 'example string', 
                        mute_listed = True, 
                        notification_created = True, 
                        plane = 'example string', 
                        reason = 'example string', 
                        severity = 'ENUM_VALUE', 
                        start_time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), 
                        status = 'ENUM_VALUE', )
                    ],
                lifecycle_status = 'ENUM_VALUE',
                status = 'ENUM_VALUE',
                sw_version = 'example string',
                sw_version_v2 = graphiant_sdk.models._v1_edges_hardware_assigned_get_200_response_edges_summary_inner_upgrade_summary_running_version._v1_edges_hardware_assigned_get_200_response_edgesSummary_inner_upgradeSummary_runningVersion(
                    name = 'example string', 
                    release = 'ENUM_VALUE', 
                    version = 'example string', ),
                system_plane = graphiant_sdk.models._v1_troubleshooting_device__device_id__post_200_response_system_plane._v1_troubleshooting_device__deviceId__post_200_response_systemPlane(
                    cpu = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                            interface_name = 'example string', 
                            peer_name = 'example string', 
                            time = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                                nanos = 123, 
                                seconds = 1234567891011, ), 
                            value = 123.45, )
                        ], 
                    crashes = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_system_plane_crashes_inner._v1_backbone_health_device__deviceId__post_200_response_systemPlane_crashes_inner()
                        ], 
                    disk = [
                        graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_control_plane_control_transitions_transitions_inner_transitions_inner._v1_backbone_health_device__deviceId__post_200_response_controlPlane_controlTransitions_transitions_inner_transitions_inner(
                            interface_name = 'example string', 
                            peer_name = 'example string', 
                            value = 123.45, )
                        ], 
                    last_crash = graphiant_sdk.models._v1_backbone_health_device__device_id__post_200_response_system_plane_last_crash._v1_backbone_health_device__deviceId__post_200_response_systemPlane_lastCrash(
                        crash_details = 'example string', 
                        reason = 'example string', 
                        up_since_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                            nanos = 123, 
                            seconds = 1234567891011, ), ), 
                    maintenance_windows = [
                        graphiant_sdk.models._v2_notificationlist_post_request._v2_notificationlist_post_request(
                            time_window = graphiant_sdk.models._v2_notificationlist_post_request_time_window._v2_notificationlist_post_request_timeWindow(
                                bucket_size_sec = 123, 
                                old_ts = , 
                                recent_ts = , ), )
                        ], 
                    memory = [
                        
                        ], 
                    status = 'ENUM_VALUE', 
                    temperature = [
                        graphiant_sdk.models._v2_notificationlist_post_request._v2_notificationlist_post_request()
                        ], 
                    temperature_series = [
                        
                        ], ),
                up_since_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                    nanos = 123, 
                    seconds = 1234567891011, )
            )
        else:
            return V1TroubleshootingDeviceDeviceIdPost200Response(
        )
        """

    def testV1TroubleshootingDeviceDeviceIdPost200Response(self):
        """Test V1TroubleshootingDeviceDeviceIdPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
