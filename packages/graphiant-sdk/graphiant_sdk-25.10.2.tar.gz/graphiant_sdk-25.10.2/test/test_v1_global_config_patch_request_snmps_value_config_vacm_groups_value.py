# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_global_config_patch_request_snmps_value_config_vacm_groups_value import V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue

class TestV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue(unittest.TestCase):
    """V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue:
        """Test V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue`
        """
        model = V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue()
        if include_optional:
            return V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue(
                group = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_vacm_groups_value_group._v1_global_config_patch_request_snmps_value_config_vacmGroups_value_group(
                    accesses = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_vacm_groups_value_group_accesses_value._v1_global_config_patch_request_snmps_value_config_vacmGroups_value_group_accesses_value(
                            access = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_vacm_groups_value_group_accesses_value_access._v1_global_config_patch_request_snmps_value_config_vacmGroups_value_group_accesses_value_access(
                                context = 'example string', 
                                context_match = 'ENUM_VALUE', 
                                name = 'example string', 
                                read_view = 'example string', 
                                security_level = 'ENUM_VALUE', 
                                security_model = 'ENUM_VALUE', 
                                write_view = 'example string', ), )
                        }, 
                    members = {
                        'key' : graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_vacm_groups_value_group_members_value._v1_global_config_patch_request_snmps_value_config_vacmGroups_value_group_members_value(
                            member = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_vacm_groups_value_group_members_value_member._v1_global_config_patch_request_snmps_value_config_vacmGroups_value_group_members_value_member(
                                community = 'example string', 
                                security_model = 'ENUM_VALUE', 
                                security_name = 'example string', 
                                type = 'ENUM_VALUE', ), )
                        }, 
                    name = 'example string', )
            )
        else:
            return V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue(
        )
        """

    def testV1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue(self):
        """Test V1GlobalConfigPatchRequestSnmpsValueConfigVacmGroupsValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
