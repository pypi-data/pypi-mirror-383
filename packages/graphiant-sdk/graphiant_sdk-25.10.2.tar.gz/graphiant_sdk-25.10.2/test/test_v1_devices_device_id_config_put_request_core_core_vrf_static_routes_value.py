# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_core_vrf_static_routes_value import V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue

class TestV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue(unittest.TestCase):
    """V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue:
        """Test V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue`
        """
        model = V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue()
        if include_optional:
            return V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue(
                route = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route(
                    admin_distance = 123, 
                    administrative_distance = graphiant_sdk.models._v1_global_config_patch_request_routing_policies_value_policy_statements_value_statement_actions_value_action_administrative_distance._v1_global_config_patch_request_routingPolicies_value_policy_statements_value_statement_actions_value_action_administrativeDistance(
                        distance = 123, ), 
                    description = 'example string', 
                    destination_prefix = 'example string', 
                    ip_version = 123, 
                    next_hop = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                        address = 'example string', 
                        circuit = 'example string', 
                        interface = 'example string', 
                        next_hop_address = 'example string', 
                        third_party_ipsec_tunnel = 'example string', ), 
                    next_hops = [
                        graphiant_sdk.models._v1_devices__device_id__config_put_request_core_core_vrf_static_routes_value_route_next_hop._v1_devices__deviceId__config_put_request_core_coreVrf_staticRoutes_value_route_nextHop(
                            address = 'example string', 
                            circuit = 'example string', 
                            interface = 'example string', 
                            next_hop_address = 'example string', 
                            third_party_ipsec_tunnel = 'example string', )
                        ], )
            )
        else:
            return V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue(
        )
        """

    def testV1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue(self):
        """Test V1DevicesDeviceIdConfigPutRequestCoreCoreVrfStaticRoutesValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
