# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_devices_device_id_config_put_request_core_interfaces_value_interface_subinterfaces_value import V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue

class TestV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue(unittest.TestCase):
    """V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue:
        """Test V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue`
        """
        model = V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue()
        if include_optional:
            return V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue(
                interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface(
                    core_neighbor = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor(
                        cost = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost(
                            dynamic = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost_dynamic._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost_dynamic(
                                bandwidth = 123, 
                                latency = 123, ), 
                            static = 123, ), 
                        ospf_cost = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_core_neighbor_cost._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_coreNeighbor_Cost(
                            static = 123, ), 
                        peer_hostname = 'example string', 
                        type = 'ENUM_VALUE', ), 
                    default = graphiant_sdk.models.default.default(), 
                    gateway_neighbor = graphiant_sdk.models._v1_account_mfa_get_200_response._v1_account_mfa_get_200_response(
                        type = 'ENUM_VALUE', ), 
                    interface = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface(
                        admin_status = True, 
                        alias = 'example string', 
                        description = 'example string', 
                        duplex = 'example string', 
                        ipv4 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type_wan_gw_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType_wan_gw_gw(
                            address = graphiant_sdk.models._v1_global_config_patch_request_snmps_value_config_engine_endpoints_value_engine_endpoint_addresses_value._v1_global_config_patch_request_snmps_value_config_engineEndpoints_value_engineEndpoint_addresses_value(), 
                            dhcp = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_dhcp._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_dhcp(
                                dhcp_client = True, 
                                dhcp_relay = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_gw_gw_dhcp_dhcp_relay._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_gw_gw_dhcp_dhcpRelay(
                                    relay_servers = [
                                        'example string'
                                        ], ), ), 
                            vrrp = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type_wan_gw_gw_vrrp._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType_wan_gw_gw_vrrp(
                                group = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type_wan_gw_gw_vrrp_group._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType_wan_gw_gw_vrrp_group(
                                    accept_mode = True, 
                                    allow_inter_operability = True, 
                                    description = 'example string', 
                                    enabled = True, 
                                    preempt = True, 
                                    priority = 123, 
                                    tracked_interfaces = [
                                        None
                                        ], 
                                    virtual_ip = 'example string', 
                                    virtual_router_id = 123, ), ), ), 
                        ipv6 = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_interface_type_wan_gw_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_interfaceType_wan_gw_gw(), 
                        max_transmission_unit = 123, 
                        mpls_enabled = True, 
                        tcp_mss_v4 = 123, 
                        tcp_mss_v6 = 123, 
                        x_talk_filter = True, ), 
                    interface_type = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface_type._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interfaceType(
                        core_to_core_tunnel = graphiant_sdk.models.core_to_core_tunnel.coreToCoreTunnel(), 
                        default = graphiant_sdk.models.default.default(), 
                        wan = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface_type_wan._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interfaceType_wan(
                            gw = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interface_type_wan_gw._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_interfaceType_wan_gw(), 
                            type = 'ENUM_VALUE', 
                            vrf_name = 'example string', ), 
                        wan_management = graphiant_sdk.models.wan_management.wanManagement(), ), 
                    vlan_id = 123, 
                    wan = graphiant_sdk.models._v1_devices__device_id__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_wan._v1_devices__deviceId__config_put_request_core_interfaces_value_interface_subinterfaces_value_interface_wan(
                        type = 'ENUM_VALUE', 
                        vrf_name = 'example string', ), )
            )
        else:
            return V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue(
        )
        """

    def testV1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue(self):
        """Test V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceSubinterfacesValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
