# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_activity_logs_post_request import V1ActivityLogsPostRequest

class TestV1ActivityLogsPostRequest(unittest.TestCase):
    """V1ActivityLogsPostRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ActivityLogsPostRequest:
        """Test V1ActivityLogsPostRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ActivityLogsPostRequest`
        """
        model = V1ActivityLogsPostRequest()
        if include_optional:
            return V1ActivityLogsPostRequest(
                cursor_ref = 'example string',
                num_logs = 123,
                old_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                    nanos = 123, 
                    seconds = 1234567891011, ),
                recent_ts = graphiant_sdk.models._v1_alarm_history_get_200_response_history_inner_time._v1_alarm_history_get_200_response_history_inner_time(
                    nanos = 123, 
                    seconds = 1234567891011, ),
                selector = graphiant_sdk.models._v1_activity_logs_post_request_selector._v1_activity_logs_post_request_selector(
                    device_ids = [
                        1234567891011
                        ], 
                    id = 'example string', 
                    in_progress = True, 
                    job_entity = graphiant_sdk.models._v1_activity_logs_post_request_selector_job_entity._v1_activity_logs_post_request_selector_jobEntity(
                        id = 1234567891011, 
                        name = 'example string', 
                        type = 'ENUM_VALUE', ), 
                    target_ids = [
                        graphiant_sdk.models._v1_activity_logs_post_request_selector_job_entity._v1_activity_logs_post_request_selector_jobEntity(
                            id = 1234567891011, 
                            name = 'example string', 
                            type = 'ENUM_VALUE', )
                        ], 
                    type = 'ENUM_VALUE', ),
                selector_v2 = graphiant_sdk.models._v1_activity_logs_post_request_selector_v2._v1_activity_logs_post_request_selectorV2(
                    device_ids = [
                        1234567891011
                        ], 
                    entities = [
                        graphiant_sdk.models._v1_activity_logs_post_request_selector_job_entity._v1_activity_logs_post_request_selector_jobEntity(
                            id = 1234567891011, 
                            name = 'example string', 
                            type = 'ENUM_VALUE', )
                        ], 
                    site_ids = [
                        1234567891011
                        ], 
                    statuses = [
                        'ENUM_VALUE'
                        ], 
                    types = [
                        'ENUM_VALUE'
                        ], 
                    user_ids = [
                        'example string'
                        ], )
            )
        else:
            return V1ActivityLogsPostRequest(
        )
        """

    def testV1ActivityLogsPostRequest(self):
        """Test V1ActivityLogsPostRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
