# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**  1) Login using `/api/v1/auth/login`   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: `Bearer <your token>`   5) Click \"Authorize\"   6) All requests are now authorized.  **Token valid for 2 hours. If expired:**   - Login again, click \"Authorize\", paste new token.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from graphiant_sdk.models.v1_data_assurance_assurances_applications_bucket_app_name_get200_response import V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response

class TestV1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response(unittest.TestCase):
    """V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response:
        """Test V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response`
        """
        model = V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response()
        if include_optional:
            return V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response(
                assurances = [
                    graphiant_sdk.models._v1_data_assurance_assurances_applications__bucket_app_name__get_200_response_assurances_inner._v1_data_assurance_assurances_applications__bucketAppName__get_200_response_assurances_inner(
                        configs = graphiant_sdk.models._v1_data_assurance_assurances_global_post_request_config._v1_data_assurance_assurances_global_post_request_config(
                            apps = [
                                graphiant_sdk.models._v1_data_assurance_assurances_global_post_request_config_apps_inner._v1_data_assurance_assurances_global_post_request_config_apps_inner(
                                    bucket_id = 123, 
                                    builtin_app_id = 1234567891011, 
                                    custom_app_id = 1234567891011, 
                                    is_domain = True, 
                                    name = 'example string', 
                                    servers = [
                                        graphiant_sdk.models._v1_data_assurance_assurances_global_post_request_config_apps_inner_servers_inner._v1_data_assurance_assurances_global_post_request_config_apps_inner_servers_inner(
                                            ip = 'example string', 
                                            port = 123, 
                                            protocol = 'ENUM_VALUE', )
                                        ], 
                                    use_all_servers = True, )
                                ], 
                            flex_algo = 'example string', 
                            lan_names = [
                                'example string'
                                ], 
                            name = 'example string', 
                            site_list_id = 1234567891011, 
                            use_all_sites = True, ), 
                        id = 1234567891011, )
                    ]
            )
        else:
            return V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response(
        )
        """

    def testV1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response(self):
        """Test V1DataAssuranceAssurancesApplicationsBucketAppNameGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
