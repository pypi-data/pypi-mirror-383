# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from graphiant_sdk.models.v1_data_assurance_assurances_global_get200_response_rows_inner_apps_inner import V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerAppsInner
from graphiant_sdk.models.v1_data_assurance_assurances_global_get200_response_rows_inner_lans_inner import V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerLansInner
from graphiant_sdk.models.v1_data_assurance_assurances_global_get200_response_rows_inner_sites_inner import V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerSitesInner
from typing import Optional, Set
from typing_extensions import Self

class V1DataAssuranceAssurancesGlobalGet200ResponseRowsInner(BaseModel):
    """
    V1DataAssuranceAssurancesGlobalGet200ResponseRowsInner
    """ # noqa: E501
    apps: Optional[List[V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerAppsInner]] = None
    assurance_id: Optional[StrictInt] = Field(default=None, alias="assuranceId")
    assurance_name: Optional[StrictStr] = Field(default=None, alias="assuranceName")
    created_at: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="createdAt")
    flex_algo: Optional[StrictStr] = Field(default=None, alias="flexAlgo")
    lans: Optional[List[V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerLansInner]] = None
    sites: Optional[List[V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerSitesInner]] = None
    updated_at: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["apps", "assuranceId", "assuranceName", "createdAt", "flexAlgo", "lans", "sites", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DataAssuranceAssurancesGlobalGet200ResponseRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apps (list)
        _items = []
        if self.apps:
            for _item_apps in self.apps:
                if _item_apps:
                    _items.append(_item_apps.to_dict())
            _dict['apps'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['createdAt'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lans (list)
        _items = []
        if self.lans:
            for _item_lans in self.lans:
                if _item_lans:
                    _items.append(_item_lans.to_dict())
            _dict['lans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sites (list)
        _items = []
        if self.sites:
            for _item_sites in self.sites:
                if _item_sites:
                    _items.append(_item_sites.to_dict())
            _dict['sites'] = _items
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updatedAt'] = self.updated_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DataAssuranceAssurancesGlobalGet200ResponseRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apps": [V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerAppsInner.from_dict(_item) for _item in obj["apps"]] if obj.get("apps") is not None else None,
            "assuranceId": obj.get("assuranceId"),
            "assuranceName": obj.get("assuranceName"),
            "createdAt": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["createdAt"]) if obj.get("createdAt") is not None else None,
            "flexAlgo": obj.get("flexAlgo"),
            "lans": [V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerLansInner.from_dict(_item) for _item in obj["lans"]] if obj.get("lans") is not None else None,
            "sites": [V1DataAssuranceAssurancesGlobalGet200ResponseRowsInnerSitesInner.from_dict(_item) for _item in obj["sites"]] if obj.get("sites") is not None else None,
            "updatedAt": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["updatedAt"]) if obj.get("updatedAt") is not None else None
        })
        return _obj


