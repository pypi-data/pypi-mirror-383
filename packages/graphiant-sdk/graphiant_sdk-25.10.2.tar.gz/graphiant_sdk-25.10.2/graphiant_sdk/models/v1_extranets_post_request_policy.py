# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_auto import V1ExtranetsGet200ResponsePoliciesInnerAuto
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_manual import V1ExtranetsGet200ResponsePoliciesInnerManual
from graphiant_sdk.models.v1_extranets_post_request_policy_branches import V1ExtranetsPostRequestPolicyBranches
from graphiant_sdk.models.v1_extranets_post_request_policy_branches_prefix_set import V1ExtranetsPostRequestPolicyBranchesPrefixSet
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsPostRequestPolicy(BaseModel):
    """
    V1ExtranetsPostRequestPolicy
    """ # noqa: E501
    auto: Optional[V1ExtranetsGet200ResponsePoliciesInnerAuto] = None
    branches: Optional[V1ExtranetsPostRequestPolicyBranches] = None
    description: Optional[StrictStr] = None
    host_prefix_set: Optional[V1ExtranetsPostRequestPolicyBranchesPrefixSet] = Field(default=None, alias="hostPrefixSet")
    manual: Optional[V1ExtranetsGet200ResponsePoliciesInnerManual] = None
    name: Optional[StrictStr] = None
    shared_prefixes: Optional[List[StrictStr]] = Field(default=None, alias="sharedPrefixes")
    shared_segment: Optional[StrictInt] = Field(default=None, alias="sharedSegment")
    source: Optional[V1ExtranetsPostRequestPolicyBranches] = None
    target_segments: Optional[List[StrictInt]] = Field(default=None, alias="targetSegments")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["auto", "branches", "description", "hostPrefixSet", "manual", "name", "sharedPrefixes", "sharedSegment", "source", "targetSegments", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsPostRequestPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto
        if self.auto:
            _dict['auto'] = self.auto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branches
        if self.branches:
            _dict['branches'] = self.branches.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_prefix_set
        if self.host_prefix_set:
            _dict['hostPrefixSet'] = self.host_prefix_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual
        if self.manual:
            _dict['manual'] = self.manual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsPostRequestPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto": V1ExtranetsGet200ResponsePoliciesInnerAuto.from_dict(obj["auto"]) if obj.get("auto") is not None else None,
            "branches": V1ExtranetsPostRequestPolicyBranches.from_dict(obj["branches"]) if obj.get("branches") is not None else None,
            "description": obj.get("description"),
            "hostPrefixSet": V1ExtranetsPostRequestPolicyBranchesPrefixSet.from_dict(obj["hostPrefixSet"]) if obj.get("hostPrefixSet") is not None else None,
            "manual": V1ExtranetsGet200ResponsePoliciesInnerManual.from_dict(obj["manual"]) if obj.get("manual") is not None else None,
            "name": obj.get("name"),
            "sharedPrefixes": obj.get("sharedPrefixes"),
            "sharedSegment": obj.get("sharedSegment"),
            "source": V1ExtranetsPostRequestPolicyBranches.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "targetSegments": obj.get("targetSegments"),
            "type": obj.get("type")
        })
        return _obj


