# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V2AllowlistRuleIdGet200ResponseRecordsInner(BaseModel):
    """
    V2AllowlistRuleIdGet200ResponseRecordsInner
    """ # noqa: E501
    create_time: Optional[StrictInt] = Field(default=None, alias="createTime")
    device_interface: Optional[StrictStr] = Field(default=None, alias="deviceInterface")
    device_name: Optional[StrictStr] = Field(default=None, alias="deviceName")
    enterprise_name: Optional[StrictStr] = Field(default=None, alias="enterpriseName")
    entity_id: Optional[StrictStr] = Field(default=None, alias="entityId")
    is_wan_circuit: Optional[StrictBool] = Field(default=None, alias="isWanCircuit")
    note_text: Optional[StrictStr] = Field(default=None, alias="noteText")
    peer_device_interface: Optional[StrictStr] = Field(default=None, alias="peerDeviceInterface")
    peer_device_name: Optional[StrictStr] = Field(default=None, alias="peerDeviceName")
    rule_id: Optional[StrictStr] = Field(default=None, alias="ruleId")
    rule_name: Optional[StrictStr] = Field(default=None, alias="ruleName")
    site_name: Optional[StrictStr] = Field(default=None, alias="siteName")
    vrf_id: Optional[StrictStr] = Field(default=None, alias="vrfId")
    __properties: ClassVar[List[str]] = ["createTime", "deviceInterface", "deviceName", "enterpriseName", "entityId", "isWanCircuit", "noteText", "peerDeviceInterface", "peerDeviceName", "ruleId", "ruleName", "siteName", "vrfId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2AllowlistRuleIdGet200ResponseRecordsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2AllowlistRuleIdGet200ResponseRecordsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deviceInterface": obj.get("deviceInterface"),
            "deviceName": obj.get("deviceName"),
            "enterpriseName": obj.get("enterpriseName"),
            "entityId": obj.get("entityId"),
            "isWanCircuit": obj.get("isWanCircuit"),
            "noteText": obj.get("noteText"),
            "peerDeviceInterface": obj.get("peerDeviceInterface"),
            "peerDeviceName": obj.get("peerDeviceName"),
            "ruleId": obj.get("ruleId"),
            "ruleName": obj.get("ruleName"),
            "siteName": obj.get("siteName"),
            "vrfId": obj.get("vrfId")
        })
        return _obj


