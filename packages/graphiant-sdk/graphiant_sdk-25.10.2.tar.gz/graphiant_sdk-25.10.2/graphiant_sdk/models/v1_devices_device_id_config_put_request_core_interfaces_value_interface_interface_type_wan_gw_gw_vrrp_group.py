# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGwGwVrrpGroup(BaseModel):
    """
    V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGwGwVrrpGroup
    """ # noqa: E501
    accept_mode: Optional[StrictBool] = Field(default=None, alias="acceptMode")
    allow_inter_operability: Optional[StrictBool] = Field(default=None, alias="allowInterOperability")
    description: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    preempt: Optional[StrictBool] = None
    priority: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    tracked_interfaces: Optional[List[Dict[str, Any]]] = Field(default=None, alias="trackedInterfaces")
    virtual_ip: Optional[StrictStr] = Field(default=None, alias="virtualIp")
    virtual_router_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="virtualRouterId")
    __properties: ClassVar[List[str]] = ["acceptMode", "allowInterOperability", "description", "enabled", "preempt", "priority", "trackedInterfaces", "virtualIp", "virtualRouterId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGwGwVrrpGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdConfigPutRequestCoreInterfacesValueInterfaceInterfaceTypeWanGwGwVrrpGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptMode": obj.get("acceptMode"),
            "allowInterOperability": obj.get("allowInterOperability"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "preempt": obj.get("preempt"),
            "priority": obj.get("priority"),
            "trackedInterfaces": obj.get("trackedInterfaces"),
            "virtualIp": obj.get("virtualIp"),
            "virtualRouterId": obj.get("virtualRouterId")
        })
        return _obj


