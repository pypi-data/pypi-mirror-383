# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from graphiant_sdk.models.v1_edges_hardware_assigned_get200_response_edges_summary_inner_upgrade_summary_last_running_version import V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion
from graphiant_sdk.models.v1_edges_hardware_assigned_get200_response_edges_summary_inner_upgrade_summary_schedule import V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummarySchedule
from typing import Optional, Set
from typing_extensions import Self

class V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummary(BaseModel):
    """
    V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummary
    """ # noqa: E501
    device_id: Optional[StrictInt] = Field(default=None, alias="deviceId")
    end_of_life: Optional[StrictBool] = Field(default=None, alias="endOfLife")
    last_discovered_ts: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="lastDiscoveredTs")
    last_running_version: Optional[V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion] = Field(default=None, alias="lastRunningVersion")
    last_upgrade_ts: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="lastUpgradeTs")
    ready_for_activation_version: Optional[V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion] = Field(default=None, alias="readyForActivationVersion")
    running_version: Optional[V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion] = Field(default=None, alias="runningVersion")
    schedule: Optional[V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummarySchedule] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["deviceId", "endOfLife", "lastDiscoveredTs", "lastRunningVersion", "lastUpgradeTs", "readyForActivationVersion", "runningVersion", "schedule", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_discovered_ts
        if self.last_discovered_ts:
            _dict['lastDiscoveredTs'] = self.last_discovered_ts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_running_version
        if self.last_running_version:
            _dict['lastRunningVersion'] = self.last_running_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_upgrade_ts
        if self.last_upgrade_ts:
            _dict['lastUpgradeTs'] = self.last_upgrade_ts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ready_for_activation_version
        if self.ready_for_activation_version:
            _dict['readyForActivationVersion'] = self.ready_for_activation_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of running_version
        if self.running_version:
            _dict['runningVersion'] = self.running_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceId": obj.get("deviceId"),
            "endOfLife": obj.get("endOfLife"),
            "lastDiscoveredTs": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["lastDiscoveredTs"]) if obj.get("lastDiscoveredTs") is not None else None,
            "lastRunningVersion": V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion.from_dict(obj["lastRunningVersion"]) if obj.get("lastRunningVersion") is not None else None,
            "lastUpgradeTs": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["lastUpgradeTs"]) if obj.get("lastUpgradeTs") is not None else None,
            "readyForActivationVersion": V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion.from_dict(obj["readyForActivationVersion"]) if obj.get("readyForActivationVersion") is not None else None,
            "runningVersion": V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummaryLastRunningVersion.from_dict(obj["runningVersion"]) if obj.get("runningVersion") is not None else None,
            "schedule": V1EdgesHardwareAssignedGet200ResponseEdgesSummaryInnerUpgradeSummarySchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "status": obj.get("status")
        })
        return _obj


