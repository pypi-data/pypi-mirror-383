# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from typing import Optional, Set
from typing_extensions import Self

class V1FlowsFlowTablePost200ResponseFlowTableInner(BaseModel):
    """
    V1FlowsFlowTablePost200ResponseFlowTableInner
    """ # noqa: E501
    dest_ip: Optional[StrictStr] = Field(default=None, alias="destIp")
    dest_port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="destPort")
    dl_circuit_name: Optional[StrictStr] = Field(default=None, alias="dlCircuitName")
    dl_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dlUsage")
    egress_local_core_region: Optional[StrictStr] = Field(default=None, alias="egressLocalCoreRegion")
    ingress_local_core_region: Optional[StrictStr] = Field(default=None, alias="ingressLocalCoreRegion")
    lan_segment: Optional[StrictStr] = Field(default=None, alias="lanSegment")
    protocol: Optional[StrictStr] = None
    remote_core_region: Optional[StrictStr] = Field(default=None, alias="remoteCoreRegion")
    sla_class: Optional[StrictStr] = Field(default=None, alias="slaClass")
    src_ip: Optional[StrictStr] = Field(default=None, alias="srcIp")
    src_port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="srcPort")
    ts: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = None
    ul_circuit_name: Optional[StrictStr] = Field(default=None, alias="ulCircuitName")
    ul_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ulUsage")
    __properties: ClassVar[List[str]] = ["destIp", "destPort", "dlCircuitName", "dlUsage", "egressLocalCoreRegion", "ingressLocalCoreRegion", "lanSegment", "protocol", "remoteCoreRegion", "slaClass", "srcIp", "srcPort", "ts", "ulCircuitName", "ulUsage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1FlowsFlowTablePost200ResponseFlowTableInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ts
        if self.ts:
            _dict['ts'] = self.ts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1FlowsFlowTablePost200ResponseFlowTableInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destIp": obj.get("destIp"),
            "destPort": obj.get("destPort"),
            "dlCircuitName": obj.get("dlCircuitName"),
            "dlUsage": obj.get("dlUsage"),
            "egressLocalCoreRegion": obj.get("egressLocalCoreRegion"),
            "ingressLocalCoreRegion": obj.get("ingressLocalCoreRegion"),
            "lanSegment": obj.get("lanSegment"),
            "protocol": obj.get("protocol"),
            "remoteCoreRegion": obj.get("remoteCoreRegion"),
            "slaClass": obj.get("slaClass"),
            "srcIp": obj.get("srcIp"),
            "srcPort": obj.get("srcPort"),
            "ts": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["ts"]) if obj.get("ts") is not None else None,
            "ulCircuitName": obj.get("ulCircuitName"),
            "ulUsage": obj.get("ulUsage")
        })
        return _obj


