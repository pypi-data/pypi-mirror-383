# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_alarm_history_get200_response_history_inner_time import V1AlarmHistoryGet200ResponseHistoryInnerTime
from graphiant_sdk.models.v1_software_releases_summary_get200_response_summaries_inner_key import V1SoftwareReleasesSummaryGet200ResponseSummariesInnerKey
from typing import Optional, Set
from typing_extensions import Self

class V1SoftwareReleasesSummaryGet200ResponseSummariesInner(BaseModel):
    """
    V1SoftwareReleasesSummaryGet200ResponseSummariesInner
    """ # noqa: E501
    eos_ts: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="eosTs")
    key: Optional[V1SoftwareReleasesSummaryGet200ResponseSummariesInnerKey] = None
    name: Optional[StrictStr] = None
    release: Optional[StrictStr] = None
    release_ts: Optional[V1AlarmHistoryGet200ResponseHistoryInnerTime] = Field(default=None, alias="releaseTs")
    __properties: ClassVar[List[str]] = ["eosTs", "key", "name", "release", "releaseTs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1SoftwareReleasesSummaryGet200ResponseSummariesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eos_ts
        if self.eos_ts:
            _dict['eosTs'] = self.eos_ts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of release_ts
        if self.release_ts:
            _dict['releaseTs'] = self.release_ts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1SoftwareReleasesSummaryGet200ResponseSummariesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eosTs": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["eosTs"]) if obj.get("eosTs") is not None else None,
            "key": V1SoftwareReleasesSummaryGet200ResponseSummariesInnerKey.from_dict(obj["key"]) if obj.get("key") is not None else None,
            "name": obj.get("name"),
            "release": obj.get("release"),
            "releaseTs": V1AlarmHistoryGet200ResponseHistoryInnerTime.from_dict(obj["releaseTs"]) if obj.get("releaseTs") is not None else None
        })
        return _obj


