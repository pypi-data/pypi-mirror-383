# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner(BaseModel):
    """
    V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner
    """ # noqa: E501
    bgp_graphiant_asn: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="bgpGraphiantAsn")
    bgp_local_asn: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="bgpLocalAsn")
    bgp_neighbor_hold_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="bgpNeighborHoldTime")
    bgp_neighbor_ipv4: Optional[StrictStr] = Field(default=None, alias="bgpNeighborIpv4")
    bgp_neighbor_ipv6: Optional[StrictStr] = Field(default=None, alias="bgpNeighborIpv6")
    dpd_interval: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="dpdInterval")
    dpd_retries: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="dpdRetries")
    graphiant_destination_ip: Optional[StrictStr] = Field(default=None, alias="graphiantDestinationIp")
    graphiant_ike_id: Optional[StrictStr] = Field(default=None, alias="graphiantIkeId")
    graphiant_outer_tunnel_ip: Optional[StrictStr] = Field(default=None, alias="graphiantOuterTunnelIp")
    graphiant_tunnel_ip: Optional[StrictStr] = Field(default=None, alias="graphiantTunnelIp")
    graphiant_tunnel_ipv6: Optional[StrictStr] = Field(default=None, alias="graphiantTunnelIpv6")
    ike_authentication_algorithm: Optional[StrictStr] = Field(default=None, alias="ikeAuthenticationAlgorithm")
    ike_authentication_method: Optional[StrictStr] = Field(default=None, alias="ikeAuthenticationMethod")
    ike_dh_algorithm: Optional[StrictStr] = Field(default=None, alias="ikeDhAlgorithm")
    ike_encryption_algorithm: Optional[StrictStr] = Field(default=None, alias="ikeEncryptionAlgorithm")
    ike_lifetime: Optional[StrictStr] = Field(default=None, alias="ikeLifetime")
    ike_preshared_key: Optional[StrictStr] = Field(default=None, alias="ikePresharedKey")
    ike_version: Optional[StrictInt] = Field(default=None, alias="ikeVersion")
    ipsec_authentication_algorithm: Optional[StrictStr] = Field(default=None, alias="ipsecAuthenticationAlgorithm")
    ipsec_encryption_algorithm: Optional[StrictStr] = Field(default=None, alias="ipsecEncryptionAlgorithm")
    ipsec_extended_sequence_number: Optional[StrictBool] = Field(default=None, alias="ipsecExtendedSequenceNumber")
    ipsec_lifetime: Optional[StrictStr] = Field(default=None, alias="ipsecLifetime")
    ipsec_mode: Optional[StrictStr] = Field(default=None, alias="ipsecMode")
    ipsec_pfs_algorithm: Optional[StrictStr] = Field(default=None, alias="ipsecPfsAlgorithm")
    ipsec_protocol: Optional[StrictStr] = Field(default=None, alias="ipsecProtocol")
    local_ike_id: Optional[StrictStr] = Field(default=None, alias="localIkeId")
    local_outer_tunnel_ip: Optional[StrictStr] = Field(default=None, alias="localOuterTunnelIp")
    local_tunnel_ip: Optional[StrictStr] = Field(default=None, alias="localTunnelIp")
    local_tunnel_ipv6: Optional[StrictStr] = Field(default=None, alias="localTunnelIpv6")
    tcp_mss: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="tcpMss")
    tunnel_mtu: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="tunnelMtu")
    __properties: ClassVar[List[str]] = ["bgpGraphiantAsn", "bgpLocalAsn", "bgpNeighborHoldTime", "bgpNeighborIpv4", "bgpNeighborIpv6", "dpdInterval", "dpdRetries", "graphiantDestinationIp", "graphiantIkeId", "graphiantOuterTunnelIp", "graphiantTunnelIp", "graphiantTunnelIpv6", "ikeAuthenticationAlgorithm", "ikeAuthenticationMethod", "ikeDhAlgorithm", "ikeEncryptionAlgorithm", "ikeLifetime", "ikePresharedKey", "ikeVersion", "ipsecAuthenticationAlgorithm", "ipsecEncryptionAlgorithm", "ipsecExtendedSequenceNumber", "ipsecLifetime", "ipsecMode", "ipsecPfsAlgorithm", "ipsecProtocol", "localIkeId", "localOuterTunnelIp", "localTunnelIp", "localTunnelIpv6", "tcpMss", "tunnelMtu"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsB2bPeeringConsumerCustomerIdConsumerDetailsGet200ResponseIpsecTunnelConfigInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bgpGraphiantAsn": obj.get("bgpGraphiantAsn"),
            "bgpLocalAsn": obj.get("bgpLocalAsn"),
            "bgpNeighborHoldTime": obj.get("bgpNeighborHoldTime"),
            "bgpNeighborIpv4": obj.get("bgpNeighborIpv4"),
            "bgpNeighborIpv6": obj.get("bgpNeighborIpv6"),
            "dpdInterval": obj.get("dpdInterval"),
            "dpdRetries": obj.get("dpdRetries"),
            "graphiantDestinationIp": obj.get("graphiantDestinationIp"),
            "graphiantIkeId": obj.get("graphiantIkeId"),
            "graphiantOuterTunnelIp": obj.get("graphiantOuterTunnelIp"),
            "graphiantTunnelIp": obj.get("graphiantTunnelIp"),
            "graphiantTunnelIpv6": obj.get("graphiantTunnelIpv6"),
            "ikeAuthenticationAlgorithm": obj.get("ikeAuthenticationAlgorithm"),
            "ikeAuthenticationMethod": obj.get("ikeAuthenticationMethod"),
            "ikeDhAlgorithm": obj.get("ikeDhAlgorithm"),
            "ikeEncryptionAlgorithm": obj.get("ikeEncryptionAlgorithm"),
            "ikeLifetime": obj.get("ikeLifetime"),
            "ikePresharedKey": obj.get("ikePresharedKey"),
            "ikeVersion": obj.get("ikeVersion"),
            "ipsecAuthenticationAlgorithm": obj.get("ipsecAuthenticationAlgorithm"),
            "ipsecEncryptionAlgorithm": obj.get("ipsecEncryptionAlgorithm"),
            "ipsecExtendedSequenceNumber": obj.get("ipsecExtendedSequenceNumber"),
            "ipsecLifetime": obj.get("ipsecLifetime"),
            "ipsecMode": obj.get("ipsecMode"),
            "ipsecPfsAlgorithm": obj.get("ipsecPfsAlgorithm"),
            "ipsecProtocol": obj.get("ipsecProtocol"),
            "localIkeId": obj.get("localIkeId"),
            "localOuterTunnelIp": obj.get("localOuterTunnelIp"),
            "localTunnelIp": obj.get("localTunnelIp"),
            "localTunnelIpv6": obj.get("localTunnelIpv6"),
            "tcpMss": obj.get("tcpMss"),
            "tunnelMtu": obj.get("tunnelMtu")
        })
        return _obj


