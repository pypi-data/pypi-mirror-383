# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class V2DeviceDeviceIdTopologyPost200ResponseNodesInnerCircuitInfoInner(BaseModel):
    """
    V2DeviceDeviceIdTopologyPost200ResponseNodesInnerCircuitInfoInner
    """ # noqa: E501
    average_downlink_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageDownlinkUtilization")
    average_uplink_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageUplinkUtilization")
    circuit_carrier: Optional[StrictStr] = Field(default=None, alias="circuitCarrier")
    circuit_name: Optional[StrictStr] = Field(default=None, alias="circuitName")
    current_downlink_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentDownlinkUtilization")
    current_uplink_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentUplinkUtilization")
    device_id: Optional[StrictInt] = Field(default=None, alias="deviceId")
    interface_name: Optional[StrictStr] = Field(default=None, alias="interfaceName")
    jitter: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    label: Optional[StrictStr] = None
    last_resort: Optional[StrictBool] = Field(default=None, alias="lastResort")
    latency: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    loss: Optional[Union[StrictFloat, StrictInt]] = None
    qoe: Optional[Union[StrictFloat, StrictInt]] = None
    quality: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["averageDownlinkUtilization", "averageUplinkUtilization", "circuitCarrier", "circuitName", "currentDownlinkUtilization", "currentUplinkUtilization", "deviceId", "interfaceName", "jitter", "label", "lastResort", "latency", "loss", "qoe", "quality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2DeviceDeviceIdTopologyPost200ResponseNodesInnerCircuitInfoInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2DeviceDeviceIdTopologyPost200ResponseNodesInnerCircuitInfoInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageDownlinkUtilization": obj.get("averageDownlinkUtilization"),
            "averageUplinkUtilization": obj.get("averageUplinkUtilization"),
            "circuitCarrier": obj.get("circuitCarrier"),
            "circuitName": obj.get("circuitName"),
            "currentDownlinkUtilization": obj.get("currentDownlinkUtilization"),
            "currentUplinkUtilization": obj.get("currentUplinkUtilization"),
            "deviceId": obj.get("deviceId"),
            "interfaceName": obj.get("interfaceName"),
            "jitter": obj.get("jitter"),
            "label": obj.get("label"),
            "lastResort": obj.get("lastResort"),
            "latency": obj.get("latency"),
            "loss": obj.get("loss"),
            "qoe": obj.get("qoe"),
            "quality": obj.get("quality")
        })
        return _obj


