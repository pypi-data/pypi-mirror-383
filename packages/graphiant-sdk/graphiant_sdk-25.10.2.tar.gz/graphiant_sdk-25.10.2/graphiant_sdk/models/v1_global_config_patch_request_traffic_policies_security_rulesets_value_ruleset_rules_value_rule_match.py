# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_application import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchApplication
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_content_filter import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchContentFilter
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_destination_network import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationNetwork
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_destination_port_range import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationPortRange
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_domain_list import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDomainList
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_dscp import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDscp
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_protocol import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchProtocol
from graphiant_sdk.models.v1_global_config_patch_request_traffic_policies_security_rulesets_value_ruleset_rules_value_rule_match_source_network import V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchSourceNetwork
from typing import Optional, Set
from typing_extensions import Self

class V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatch(BaseModel):
    """
    V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatch
    """ # noqa: E501
    application: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchApplication] = None
    content_filter: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchContentFilter] = Field(default=None, alias="contentFilter")
    destination_network: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationNetwork] = Field(default=None, alias="destinationNetwork")
    destination_port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="destinationPort")
    destination_port_range: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationPortRange] = Field(default=None, alias="destinationPortRange")
    domain_list: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDomainList] = Field(default=None, alias="domainList")
    dscp: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDscp] = None
    icmp_type: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="icmpType")
    ip_protocol: Optional[StrictStr] = Field(default=None, alias="ipProtocol")
    protocol: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchProtocol] = None
    source_network: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchSourceNetwork] = Field(default=None, alias="sourceNetwork")
    source_port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="sourcePort")
    source_port_range: Optional[V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationPortRange] = Field(default=None, alias="sourcePortRange")
    __properties: ClassVar[List[str]] = ["application", "contentFilter", "destinationNetwork", "destinationPort", "destinationPortRange", "domainList", "dscp", "icmpType", "ipProtocol", "protocol", "sourceNetwork", "sourcePort", "sourcePortRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_filter
        if self.content_filter:
            _dict['contentFilter'] = self.content_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_network
        if self.destination_network:
            _dict['destinationNetwork'] = self.destination_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_port_range
        if self.destination_port_range:
            _dict['destinationPortRange'] = self.destination_port_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain_list
        if self.domain_list:
            _dict['domainList'] = self.domain_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dscp
        if self.dscp:
            _dict['dscp'] = self.dscp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protocol
        if self.protocol:
            _dict['protocol'] = self.protocol.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_network
        if self.source_network:
            _dict['sourceNetwork'] = self.source_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_port_range
        if self.source_port_range:
            _dict['sourcePortRange'] = self.source_port_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchApplication.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "contentFilter": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchContentFilter.from_dict(obj["contentFilter"]) if obj.get("contentFilter") is not None else None,
            "destinationNetwork": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationNetwork.from_dict(obj["destinationNetwork"]) if obj.get("destinationNetwork") is not None else None,
            "destinationPort": obj.get("destinationPort"),
            "destinationPortRange": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationPortRange.from_dict(obj["destinationPortRange"]) if obj.get("destinationPortRange") is not None else None,
            "domainList": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDomainList.from_dict(obj["domainList"]) if obj.get("domainList") is not None else None,
            "dscp": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDscp.from_dict(obj["dscp"]) if obj.get("dscp") is not None else None,
            "icmpType": obj.get("icmpType"),
            "ipProtocol": obj.get("ipProtocol"),
            "protocol": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchProtocol.from_dict(obj["protocol"]) if obj.get("protocol") is not None else None,
            "sourceNetwork": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchSourceNetwork.from_dict(obj["sourceNetwork"]) if obj.get("sourceNetwork") is not None else None,
            "sourcePort": obj.get("sourcePort"),
            "sourcePortRange": V1GlobalConfigPatchRequestTrafficPoliciesSecurityRulesetsValueRulesetRulesValueRuleMatchDestinationPortRange.from_dict(obj["sourcePortRange"]) if obj.get("sourcePortRange") is not None else None
        })
        return _obj


