# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_diagnostic_ping_pause_resume_post204_response_result_ping_result import V1DiagnosticPingPauseResumePost204ResponseResultPingResult
from graphiant_sdk.models.v1_diagnostic_ping_pause_resume_post204_response_result_route_info import V1DiagnosticPingPauseResumePost204ResponseResultRouteInfo
from graphiant_sdk.models.v1_diagnostic_ping_pause_resume_post204_response_result_trace_result import V1DiagnosticPingPauseResumePost204ResponseResultTraceResult
from typing import Optional, Set
from typing_extensions import Self

class V1DiagnosticPingPauseResumePost204ResponseResult(BaseModel):
    """
    V1DiagnosticPingPauseResumePost204ResponseResult
    """ # noqa: E501
    ping_result: Optional[V1DiagnosticPingPauseResumePost204ResponseResultPingResult] = Field(default=None, alias="pingResult")
    route_info: Optional[V1DiagnosticPingPauseResumePost204ResponseResultRouteInfo] = Field(default=None, alias="routeInfo")
    trace_result: Optional[V1DiagnosticPingPauseResumePost204ResponseResultTraceResult] = Field(default=None, alias="traceResult")
    __properties: ClassVar[List[str]] = ["pingResult", "routeInfo", "traceResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DiagnosticPingPauseResumePost204ResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ping_result
        if self.ping_result:
            _dict['pingResult'] = self.ping_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of route_info
        if self.route_info:
            _dict['routeInfo'] = self.route_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trace_result
        if self.trace_result:
            _dict['traceResult'] = self.trace_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DiagnosticPingPauseResumePost204ResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pingResult": V1DiagnosticPingPauseResumePost204ResponseResultPingResult.from_dict(obj["pingResult"]) if obj.get("pingResult") is not None else None,
            "routeInfo": V1DiagnosticPingPauseResumePost204ResponseResultRouteInfo.from_dict(obj["routeInfo"]) if obj.get("routeInfo") is not None else None,
            "traceResult": V1DiagnosticPingPauseResumePost204ResponseResultTraceResult.from_dict(obj["traceResult"]) if obj.get("traceResult") is not None else None
        })
        return _obj


