# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1PolicyRouteTagSetsTagsSummaryGet200ResponseTagsInner(BaseModel):
    """
    V1PolicyRouteTagSetsTagsSummaryGet200ResponseTagsInner
    """ # noqa: E501
    device_count: Optional[StrictInt] = Field(default=None, alias="deviceCount")
    level_one: Optional[StrictInt] = Field(default=None, alias="levelOne")
    level_one_tag: Optional[StrictStr] = Field(default=None, alias="levelOneTag")
    level_two: Optional[StrictInt] = Field(default=None, alias="levelTwo")
    level_two_tag: Optional[StrictStr] = Field(default=None, alias="levelTwoTag")
    level_zero: Optional[StrictInt] = Field(default=None, alias="levelZero")
    level_zero_tag: Optional[StrictStr] = Field(default=None, alias="levelZeroTag")
    __properties: ClassVar[List[str]] = ["deviceCount", "levelOne", "levelOneTag", "levelTwo", "levelTwoTag", "levelZero", "levelZeroTag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1PolicyRouteTagSetsTagsSummaryGet200ResponseTagsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1PolicyRouteTagSetsTagsSummaryGet200ResponseTagsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceCount": obj.get("deviceCount"),
            "levelOne": obj.get("levelOne"),
            "levelOneTag": obj.get("levelOneTag"),
            "levelTwo": obj.get("levelTwo"),
            "levelTwoTag": obj.get("levelTwoTag"),
            "levelZero": obj.get("levelZero"),
            "levelZeroTag": obj.get("levelZeroTag")
        })
        return _obj


