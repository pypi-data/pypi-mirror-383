# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_branches_excluded_devices_inner_region import V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerRegion
from typing import Optional, Set
from typing_extensions import Self

class V1DevicesSummaryGet200ResponseSitesInnerDevicesInner(BaseModel):
    """
    V1DevicesSummaryGet200ResponseSitesInnerDevicesInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    is_virtual: Optional[StrictBool] = Field(default=None, alias="isVirtual")
    name: Optional[StrictStr] = None
    override_region: Optional[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerRegion] = Field(default=None, alias="overrideRegion")
    platform_name: Optional[StrictStr] = Field(default=None, alias="platformName")
    region: Optional[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerRegion] = None
    role: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "isVirtual", "name", "overrideRegion", "platformName", "region", "role", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DevicesSummaryGet200ResponseSitesInnerDevicesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of override_region
        if self.override_region:
            _dict['overrideRegion'] = self.override_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DevicesSummaryGet200ResponseSitesInnerDevicesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isVirtual": obj.get("isVirtual"),
            "name": obj.get("name"),
            "overrideRegion": V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerRegion.from_dict(obj["overrideRegion"]) if obj.get("overrideRegion") is not None else None,
            "platformName": obj.get("platformName"),
            "region": V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerRegion.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "role": obj.get("role"),
            "status": obj.get("status")
        })
        return _obj


