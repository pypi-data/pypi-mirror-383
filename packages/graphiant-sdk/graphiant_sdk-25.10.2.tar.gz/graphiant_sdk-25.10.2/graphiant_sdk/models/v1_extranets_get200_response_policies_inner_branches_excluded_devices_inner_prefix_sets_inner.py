# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_branches_excluded_devices_inner_prefix_sets_inner_entries_inner import V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerEntriesInner
from graphiant_sdk.models.v1_extranets_get200_response_policies_inner_branches_excluded_devices_inner_prefix_sets_inner_policies_inner import V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerPoliciesInner
from typing import Optional, Set
from typing_extensions import Self

class V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInner(BaseModel):
    """
    V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInner
    """ # noqa: E501
    description: Optional[StrictStr] = None
    entries: Optional[List[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerEntriesInner]] = None
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    global_id: Optional[StrictInt] = Field(default=None, alias="globalId")
    id: Optional[StrictInt] = None
    mode: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    policies: Optional[List[V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerPoliciesInner]] = None
    policy_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="policyCount")
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["description", "entries", "errorMessage", "globalId", "id", "mode", "name", "policies", "policyCount", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "entries": [V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerEntriesInner.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "globalId": obj.get("globalId"),
            "id": obj.get("id"),
            "mode": obj.get("mode"),
            "name": obj.get("name"),
            "policies": [V1ExtranetsGet200ResponsePoliciesInnerBranchesExcludedDevicesInnerPrefixSetsInnerPoliciesInner.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None,
            "policyCount": obj.get("policyCount"),
            "status": obj.get("status")
        })
        return _obj


