# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_devices_device_id_slice_peers_get200_response_slices_inner_peers_inner_bgp_connection import V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerBgpConnection
from graphiant_sdk.models.v1_devices_device_id_slice_peers_get200_response_slices_inner_peers_inner_ipsec_connection import V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerIpsecConnection
from typing import Optional, Set
from typing_extensions import Self

class V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInner(BaseModel):
    """
    V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInner
    """ # noqa: E501
    bgp_connection: Optional[V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerBgpConnection] = Field(default=None, alias="bgpConnection")
    connection_quality: Optional[StrictStr] = Field(default=None, alias="connectionQuality")
    device_id: Optional[StrictInt] = Field(default=None, alias="deviceId")
    gdi: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    hostname: Optional[StrictStr] = None
    ipsec_connection: Optional[V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerIpsecConnection] = Field(default=None, alias="ipsecConnection")
    state: Optional[StrictStr] = None
    wan_addresses: Optional[List[StrictStr]] = Field(default=None, alias="wanAddresses")
    __properties: ClassVar[List[str]] = ["bgpConnection", "connectionQuality", "deviceId", "gdi", "hostname", "ipsecConnection", "state", "wanAddresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bgp_connection
        if self.bgp_connection:
            _dict['bgpConnection'] = self.bgp_connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipsec_connection
        if self.ipsec_connection:
            _dict['ipsecConnection'] = self.ipsec_connection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bgpConnection": V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerBgpConnection.from_dict(obj["bgpConnection"]) if obj.get("bgpConnection") is not None else None,
            "connectionQuality": obj.get("connectionQuality"),
            "deviceId": obj.get("deviceId"),
            "gdi": obj.get("gdi"),
            "hostname": obj.get("hostname"),
            "ipsecConnection": V1DevicesDeviceIdSlicePeersGet200ResponseSlicesInnerPeersInnerIpsecConnection.from_dict(obj["ipsecConnection"]) if obj.get("ipsecConnection") is not None else None,
            "state": obj.get("state"),
            "wanAddresses": obj.get("wanAddresses")
        })
        return _obj


