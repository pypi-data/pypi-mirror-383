# coding: utf-8

"""
    Graphiant APIs

    Graphiant API documentation.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from graphiant_sdk.models.v1_device_routing_ospfv2_area_lsdb_get200_response_lsas_inner_asexternal_lsa import V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerAsexternalLsa
from graphiant_sdk.models.v1_device_routing_ospfv2_area_lsdb_get200_response_lsas_inner_network_lsa import V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerNetworkLsa
from graphiant_sdk.models.v1_device_routing_ospfv2_area_lsdb_get200_response_lsas_inner_router_lsa import V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerRouterLsa
from graphiant_sdk.models.v1_device_routing_ospfv2_area_lsdb_get200_response_lsas_inner_summary_lsa import V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerSummaryLsa
from typing import Optional, Set
from typing_extensions import Self

class V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInner(BaseModel):
    """
    V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInner
    """ # noqa: E501
    advertising_router: Optional[StrictStr] = Field(default=None, alias="advertisingRouter")
    age: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    asexternal_lsa: Optional[V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerAsexternalLsa] = Field(default=None, alias="asexternalLsa")
    checksum: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    length: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    link_id: Optional[StrictStr] = Field(default=None, alias="linkId")
    network_lsa: Optional[V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerNetworkLsa] = Field(default=None, alias="networkLsa")
    router_lsa: Optional[V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerRouterLsa] = Field(default=None, alias="routerLsa")
    sequence_number: Optional[StrictStr] = Field(default=None, alias="sequenceNumber")
    summary_lsa: Optional[V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerSummaryLsa] = Field(default=None, alias="summaryLsa")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["advertisingRouter", "age", "asexternalLsa", "checksum", "length", "linkId", "networkLsa", "routerLsa", "sequenceNumber", "summaryLsa", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asexternal_lsa
        if self.asexternal_lsa:
            _dict['asexternalLsa'] = self.asexternal_lsa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_lsa
        if self.network_lsa:
            _dict['networkLsa'] = self.network_lsa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of router_lsa
        if self.router_lsa:
            _dict['routerLsa'] = self.router_lsa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_lsa
        if self.summary_lsa:
            _dict['summaryLsa'] = self.summary_lsa.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertisingRouter": obj.get("advertisingRouter"),
            "age": obj.get("age"),
            "asexternalLsa": V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerAsexternalLsa.from_dict(obj["asexternalLsa"]) if obj.get("asexternalLsa") is not None else None,
            "checksum": obj.get("checksum"),
            "length": obj.get("length"),
            "linkId": obj.get("linkId"),
            "networkLsa": V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerNetworkLsa.from_dict(obj["networkLsa"]) if obj.get("networkLsa") is not None else None,
            "routerLsa": V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerRouterLsa.from_dict(obj["routerLsa"]) if obj.get("routerLsa") is not None else None,
            "sequenceNumber": obj.get("sequenceNumber"),
            "summaryLsa": V1DeviceRoutingOspfv2AreaLsdbGet200ResponseLsasInnerSummaryLsa.from_dict(obj["summaryLsa"]) if obj.get("summaryLsa") is not None else None,
            "type": obj.get("type")
        })
        return _obj


