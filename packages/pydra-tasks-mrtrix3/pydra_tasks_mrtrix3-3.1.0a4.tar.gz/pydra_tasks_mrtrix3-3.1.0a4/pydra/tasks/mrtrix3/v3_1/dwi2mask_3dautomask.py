# Auto-generated by mrtrix3/app.py:print_pydra_code()

import typing
from pathlib import Path  # noqa: F401
from fileformats.generic import FsObject, File, Directory  # noqa: F401
from fileformats.vendor.mrtrix3.medimage import Tracks, ImageIn, ImageOut  # noqa: F401
from pydra.utils.typing import MultiInputObj
from pydra.compose import shell


@shell.define
class Dwi2Mask_3dautomask(shell.Task["Dwi2Mask_3dautomask.Outputs"]):
    """

    References
    ----------

    * RW Cox. AFNI: Software for analysis and visualization of functional magnetic resonance neuroimages. Computers and Biomedical Research, 29:162-173, 1996.

    Tournier, J.-D.; Smith, R. E.; Raffelt, D.; Tabbara, R.; Dhollander, T.; Pietsch, M.; Christiaens, D.; Jeurissen, B.; Yeh, C.-H. & Connelly, A. MRtrix3: A fast, flexible and open software framework for medical image processing and visualisation. NeuroImage, 2019, 202, 116137

    --------------



    **Author:** Ricardo Rios (ricardo.rios@cimat.mx)

    **Copyright:** Copyright (c) 2008-2025 the MRtrix3 contributors.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Covered Software is provided under this License on an "as is"
    basis, without warranty of any kind, either expressed, implied, or
    statutory, including, without limitation, warranties that the
    Covered Software is free of defects, merchantable, fit for a
    particular purpose or non-infringing.
    See the Mozilla Public License v. 2.0 for more details.

    For more details, see http://www.mrtrix.org/.

    """

    executable = ("dwi2mask", "3dautomask")

    in_file: ImageIn = shell.arg(
        position=1,
        argstr="",
        help="The input DWI series",
    )
    clfrac: float | None = shell.arg(
        help='Set the "clip level fraction"; must be a number between 0.1 and 0.9. A small value means to make the initial threshold for clipping smaller, which will tend to make the mask larger.',
        argstr="-clfrac",
        default=None,
    )
    nograd: bool = shell.arg(
        help='The program uses a "gradual" clip level by default. Add this option to use a fixed clip level.',
        argstr="-nograd",
        default=False,
    )
    peels: int | None = shell.arg(
        help="Peel (erode) the mask n times, then unpeel (dilate).",
        argstr="-peels",
        default=None,
    )
    nbhrs: int | None = shell.arg(
        help="Define the number of neighbors needed for a voxel NOT to be eroded. It should be between 6 and 26.",
        argstr="-nbhrs",
        default=None,
    )
    eclip: bool = shell.arg(
        help="After creating the mask, remove exterior voxels below the clip threshold.",
        argstr="-eclip",
        default=False,
    )
    SI: float | None = shell.arg(
        help="After creating the mask, find the most superior voxel, then zero out everything more than SI millimeters inferior to that. 130 seems to be decent (i.e., for Homo Sapiens brains).",
        argstr="-SI",
        default=None,
    )
    dilate: int | None = shell.arg(
        help="Dilate the mask outwards n times",
        argstr="-dilate",
        default=None,
    )
    erode: int | None = shell.arg(
        help="Erode the mask outwards n times",
        argstr="-erode",
        default=None,
    )
    NN1: bool = shell.arg(
        help="Erode and dilate based on mask faces",
        argstr="-NN1",
        default=False,
    )
    NN2: bool = shell.arg(
        help="Erode and dilate based on mask edges",
        argstr="-NN2",
        default=False,
    )
    NN3: bool = shell.arg(
        help="Erode and dilate based on mask corners",
        argstr="-NN3",
        default=False,
    )
    grad: File | None = shell.arg(
        help="Provide the diffusion gradient table in MRtrix format",
        argstr="-grad",
        default=None,
    )
    fslgrad: File | None = shell.arg(
        help="Provide the diffusion gradient table in FSL bvecs/bvals format",
        argstr="-fslgrad",
        default=None,
    )
    nocleanup: bool = shell.arg(
        help="do not delete intermediate files during script execution, and do not delete scratch directory at script completion.",
        argstr="-nocleanup",
        default=False,
    )
    scratch: Directory | None = shell.arg(
        help="manually specify an existing directory in which to generate the scratch directory.",
        argstr="-scratch",
        default=None,
    )
    cont: typing.Any | None = shell.arg(
        help="continue the script from a previous execution; must provide the scratch directory path, and the name of the last successfully-generated file.",
        argstr="-cont",
        default=None,
    )
    info: bool = shell.arg(
        help="display information messages.",
        argstr="-info",
        default=False,
    )
    quiet: bool = shell.arg(
        help="do not display information messages or progress status. Alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.",
        argstr="-quiet",
        default=False,
    )
    debug: bool = shell.arg(
        help="display debugging messages.",
        argstr="-debug",
        default=False,
    )
    force: bool = shell.arg(
        help="force overwrite of output files.",
        argstr="-force",
        default=False,
    )
    nthreads: int | None = shell.arg(
        help="use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).",
        argstr="-nthreads",
        default=None,
    )
    config: MultiInputObj[MultiInputObj] | None = shell.arg(
        help="temporarily set the value of an MRtrix config file entry.",
        argstr="-config",
        default=None,
    )
    help: bool = shell.arg(
        help="display this information page and exit.",
        argstr="-help",
        default=False,
    )
    version: bool = shell.arg(
        help="display version information and exit.",
        argstr="-version",
        default=False,
    )

    class Outputs(shell.Outputs):
        out_file: ImageOut = shell.outarg(
            position=2,
            argstr="",
            help="The output mask image",
            path_template="out_file.mif",
        )
