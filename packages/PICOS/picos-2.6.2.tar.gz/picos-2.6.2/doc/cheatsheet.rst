.. warning::

    This part of the documentation has not been touched for a while. It might
    be incomplete, reference deprecated functions or make a claim that does not
    apply to the latest version of PICOS any more. On the bright side, code
    listings are validated and still work. Watch your step!


.. _cheatsheet:

Cheat Sheet
===========

Manipulate expressions
----------------------

+--------------+--------------------------------+
| **Operator** | **Interpretation**             |
+==============+================================+
|    ``+``     | addition                       |
+--------------+--------------------------------+
|    ``+=``    | inplace addition               |
+--------------+--------------------------------+
|    ``-``     | substraction                   |
+--------------+--------------------------------+
|    ``*``     | multiplication                 |
+--------------+--------------------------------+
|    ``^``     | Hadamard (elementwise) product |
+--------------+--------------------------------+
|    ``@``     | Kronecker product              |
+--------------+--------------------------------+
|    ``|``     | scalar product                 |
+--------------+--------------------------------+
|    ``/``     | division                       |
+--------------+--------------------------------+
|    ``**``    | exponentiation                 |
+--------------+--------------------------------+
|    ``abs()`` | Euclidean (or Frobenius) norm  |
+--------------+--------------------------------+
|    ``[]``    | slicing                        |
+--------------+--------------------------------+
|    ``&``     | horizontal concatenation       |
+--------------+--------------------------------+
|    ``//``    | vertical concatenation         |
+--------------+--------------------------------+
|    ``.T``    | transposition                  |
+--------------+--------------------------------+
|    ``.H``    | Hermitian transposition        |
+--------------+--------------------------------+
|    ``.Tx``   | partial transposition          |
+--------------+--------------------------------+
|    ``.conj`` | complex conjugate              |
+--------------+--------------------------------+
|    ``.real`` | real part                      |
+--------------+--------------------------------+
|    ``.imag`` | imaginary part                 |
+--------------+--------------------------------+

Create constraints
------------------

+-----------------+-----------------------------------+
| **Operator**    | **Interpretation**                |
+=================+===================================+
| ``<`` or ``<=`` | less or equal                     |
+-----------------+-----------------------------------+
| ``>`` or ``>=`` | larger or equal                   |
+-----------------+-----------------------------------+
| ``==``          | equal                             |
+-----------------+-----------------------------------+
| ``<<``          | Löwner ordering  :math:`\preceq`, |
|                 | or set membership  :math:`\in`    |
+-----------------+-----------------------------------+
| ``>>``          | Löwner ordering  :math:`\succeq`, |
|                 | or set membership   :math:`\ni`   |
+-----------------+-----------------------------------+

Create affine expressions
-------------------------

+---------------------------------+-------------------------------------------+
| **function**                    | **short doc**                             |
+=================================+===========================================+
|:func:`~picos.sum`               | sums a list of affine expressions         |
+---------------------------------+-------------------------------------------+
|:func:`~picos.diag`              | diagonal matrix defined by its diagonal   |
+---------------------------------+-------------------------------------------+
|:func:`~picos.diag_vect`         | vector of diagonal elements of a matrix   |
+---------------------------------+-------------------------------------------+
|:func:`~picos.new_param`         | constant affine expression                |
+---------------------------------+-------------------------------------------+
|:func:`~picos.trace`             | trace of a square affine expression       |
+---------------------------------+-------------------------------------------+
|:func:`~picos.partial_transpose` | partial transposition                     |
+---------------------------------+-------------------------------------------+
|:func:`~picos.partial_trace`     | partial trace                             |
+---------------------------------+-------------------------------------------+

Create convex expressions
-------------------------

+-------------------------------------+-----------------------------------------+
| **function**                        | **short doc**                           |
+=====================================+=========================================+
|:func:`~picos.geomean`               | geometric mean                          |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.norm`                  | (generalized) :math:`L_p-` norm         |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.tracepow`              | trace of a *p*-th matrix power          |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.detrootn`              | *n*-th root of determinant              |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.sum_k_largest`         | sum of k largest elements               |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.sum_k_smallest`        | sum of k smallest elements              |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.sum_k_largest_lambda`  | sum of k largest eigenvalues            |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.sum_k_smallest_lambda` | sum of k smallest eigenvalues           |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.lambda_max`            | largest eigenvalue                      |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.lambda_min`            | smallest eigenvalue                     |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.quantrelentr`          | quantum relative entropy                |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.quantkeydist`          | quantum key distribution                |
+-------------------------------------+-----------------------------------------+

Create concave expressions
--------------------------

+-------------------------------------+-----------------------------------------+
| **function**                        | **short doc**                           |
+=====================================+=========================================+
|:func:`~picos.quantentr`             | quantum (von Neumann) entropy           |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.quantcondentr`         | quantum conditional entropy             |
+-------------------------------------+-----------------------------------------+

Create operator convex/concave expressions
------------------------------------------

+-------------------------------------+-----------------------------------------+
| **function**                        | **short doc**                           |
+=====================================+=========================================+
|:func:`~picos.oprelentr`             | operator relative entropy               |
+-------------------------------------+-----------------------------------------+
|:func:`~picos.mtxgeomean`            | (weighted) matrix geometric mean        |
+-------------------------------------+-----------------------------------------+


Create sets
-----------

+-------------------------------------------------------+--------------------------------------------------------------------+
| **function**                                          | **short doc**                                                      |
+=======================================================+====================================================================+
|:func:`ball(r,p) <picos.ball>`                         | a :math:`L_p`- ball of radius ``r``                                |
+-------------------------------------------------------+--------------------------------------------------------------------+
|:func:`simplex(a) <picos.simplex>`                     | a standard simplex                                                 |
|                                                       | :math:`\{x\geq 0: \Vert x \Vert_1 \leq a \}`                       |
+-------------------------------------------------------+--------------------------------------------------------------------+
|:func:`truncated_simplex(a) <picos.truncated_simplex>` | a set of the form                                                  |
|                                                       | :math:`\{ 0\leq x\leq 1: \Vert x \Vert_1 \leq a\}`, or             |
|                                                       | :math:`\{x: \Vert x \Vert_\infty \leq 1; \Vert x \Vert_1 \leq a\}` |
+-------------------------------------------------------+--------------------------------------------------------------------+

Get information on a problem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+--------------------------------------------------------------------------------------------+-------------------------------------------+
| **function**                                                                               | **short doc**                             |
+============================================================================================+===========================================+
|:meth:`get_variable(name) <.problem.Problem.get_variable>`                                  | gets the variable object ``name``         |
+--------------------------------------------------------------------------------------------+-------------------------------------------+
|:meth:`get_valued_variable(name) <.problem.Problem.get_valued_variable>`                    | gets the value of the variable ``name``   |
+--------------------------------------------------------------------------------------------+-------------------------------------------+
|:meth:`check_current_value_feasibility() <.problem.Problem.check_current_value_feasibility>`| are the current variable value feasible?  |
+--------------------------------------------------------------------------------------------+-------------------------------------------+
|:meth:`obj_value() <.problem.Problem.obj_value>`                                            | objective for the current variable values |
+--------------------------------------------------------------------------------------------+-------------------------------------------+
|:attr:`.type <.problem.Problem.type>`                                                       | returns problem's type                    |
+--------------------------------------------------------------------------------------------+-------------------------------------------+

Miscellaneous
~~~~~~~~~~~~~

+---------------------------------------------------------+-------------------------------------------+
| **function**                                            | **short doc**                             |
+=========================================================+===========================================+
|:func:`available_solvers() <picos.available_solvers>`    | lists installed solvers                   |
+---------------------------------------------------------+-------------------------------------------+
|:func:`import_cbf() <picos.import_cbf>`                  | imports data from a .cbf file             |
+---------------------------------------------------------+-------------------------------------------+
|:meth:`write_to_file() <.problem.Problem.write_to_file>` | writes problem to a file                  |
+---------------------------------------------------------+-------------------------------------------+
