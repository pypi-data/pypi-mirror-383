# coding: utf-8

"""PICOS documentation build configuration file for Sphinx."""

import sys
from pathlib import Path

from docutils import nodes

# Enable access to the PICOS module.
sys.path.insert(0, str(Path(__file__).parent.parent))

from version import SHORT, get_version  # noqa isort:skip


# -- General configuration -----------------------------------------------------

# Add Sphinx extensions.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.doctest",
    "sphinx.ext.imgmath",
    "sphinx.ext.viewcode",
    "matplotlib.sphinxext.plot_directive",
    "autoapi.sphinx",  # This is https://github.com/carlos-jenkins/autoapi.
    "picos_sphinx_theme",
]

# Configure imgmath.
imgmath_image_format = "svg"
imgmath_font_size = 14

# Configure autodoc.
autoclass_content = "class"
autodoc_member_order = "groupwise"
autodoc_default_options = {
    "show-inheritance": True,
    "special-members": """
        __new__,
        __init__,

        __pos__,
        __neg__,
        __abs__,

        __add__,      __radd__,
        __sub__,      __rsub__,
        __or__,       __ror__,
        __mul__,      __rmul__,
        __xor__,      __rxor__,
        __matmul__,   __rmatmul__,
        __truediv__,  __rtruediv__,
        __pow__,      __rpow__,
        __and__,      __rand__,
        __floordiv__, __rfloordiv__,
        __lshift__,   __rshift__,

        __eq__,
        __le__,
        __ge__,

        __iadd__,

        __index__,
        __int__,
        __float__,
        __complex__,
        __round__,
        __array__,
    """,
    "exclude-members": """
        Subtype,
        VarSubtype
    """,
}
autodoc_preserve_defaults = True

# Configure intersphinx.
intersphinx_cache_limit = 10
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable", None),
    "cvxopt": ("https://cvxopt.org/userguide", None),
    "scipy": ("https://docs.scipy.org/doc/scipy", None),
}

# Configure matplotlib.
plot_html_show_source_link = False
plot_formats = ["png"]
plot_html_show_formats = False

# Configure autoapi.
autoapi_modules = {"picos": {"output": "api"}}

# HACK: Monkey-patch autoapi to prevent duplicate documentation entries.
# ------------------------------------------------------------------------------
from autoapi import sphinx as autoapi_sphinx  # noqa


def filter_module(obj):  # noqa
    if hasattr(obj, "__module__"):
        return obj.__module__
    else:
        return None


def filter_qualname(obj):  # noqa
    if hasattr(obj, "__qualname__"):
        return obj.__qualname__
    else:
        return None


def wrap_get_template_env(app):  # noqa
    env = autoapi_sphinx._original_get_template_env(app)
    env.filters["module"] = filter_module
    env.filters["qualname"] = filter_qualname
    return env


autoapi_sphinx._original_get_template_env = autoapi_sphinx.get_template_env
autoapi_sphinx.get_template_env = wrap_get_template_env
# ------------------------------------------------------------------------------

# Warn about all invalid references.
nitpicky = True
nitpick_ignore = [("py:class", "mappingproxy")]

# Set the master toctree document.
master_doc = "index"

# Specify general information about the project.
projectname = u"PICOS"
project = u"PICOS"

# Name the version and release strings to use throughout the docuemnt.
version = get_version()
release = get_version(SHORT)

# Set the language for content autogenerated by Sphinx.
language = "en"

# Set the date format to the only one that is both human readable and sortable.
today_fmt = "%Y-%m-%d"

# Disable function parentheses.
add_function_parentheses = False

# Templates path.
templates_path = ["_templates"]


# -- Options for HTML output ---------------------------------------------------

# Select the theme.
html_theme = "picos"

# Only display the PICOS logo in the sidebar.
html_theme_options = {
    "logo_only": True,
    "sticky_navigation": False,
    "navigation_depth": -1,
    "gitlab_ribbon": True,
}

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "{} {} Documentation".format(project, release)

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = "{} Documentation".format(project)

# The name of an image file (relative to this directory) stored in the
# _static directory.
html_logo = "logo_text.png"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "favicon.ico"

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = "%Y-%m-%d"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# If false, no module index is generated.
html_domain_indices = False

# If false, no index is generated.
html_use_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = False


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
    "papersize": "a4paper",
    "pointsize": "10pt",
    "preamble": "",
}

_authors = "Guillaume Sagnol \\and Maximilian Stahlberg"
latex_documents = [
    ("index", "picos.tex", "PICOS Documentation", _authors, "manual", True)
]

latex_logo = "./picos_white.png"


# -- Miscellaneous -------------------------------------------------------------


def mathlink_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
    """Create a hyperlink whose label is a math mode formula."""
    tokens = text.strip().rsplit(maxsplit=1)

    if len(tokens) != 2:
        raise ValueError(
            "Malformed {}: Needs both a formula and a URI.".format(name)
        )

    formula, uri = tokens

    if len(uri) < 3 or not uri.startswith("<") or not uri.endswith(">"):
        raise ValueError(
            "Malformed {}: Did not find URI in angular brackets.".format(name)
        )

    formula = formula.replace("\x00", "\\")
    uri = uri[1:-1]

    mathNode = nodes.math(formula, formula)
    refNode = nodes.reference("", "", mathNode, refuri=uri, **options)
    return [refNode], []


def setup(app):
    """Set up Sphinx."""
    from sphinx.util.texescape import tex_replacements

    app.add_role("mathlink", mathlink_role)

    def em(text):
        return "\\ensuremath{{{}}}".format(text)

    tex_replacements += [
        (u"‖", em("\\Vert{}")),
        (u"≽", em("\\succeq{}")),
        (u"≼", em("\\preceq{}")),
        (u"≤", em("\\leq{}")),
        (u"≥", em("\\geq{}")),
        (u"ᵀ", "\\textsuperscript{T}"),
        (u"ᴴ", "\\textsuperscript{H}"),
        (u"⟨", em("\\langle{}")),
        (u"⟩", em("\\rangle{}")),
        (u"⊙", em("\\odot{}")),
        (u"∘", em("\\circ{}")),
        (u"·", em("\\cdot{}")),
        (u"∑", em("\\sum{}")),
        (u"∈", em("\\in{}")),
        (u"…", "\\ldots{}"),
        (u"∀", em("\\forall{}")),
        (u"➥", em("\\hookrightarrow")),
        (u"λ", em("\\lambda{}")),
        (u"⊗", em("\\otimes{}")),
        (u"∧", em("\\lor{}")),
        (u"α", em("\\alpha{}")),
        (u"θ", em("\\theta{}")),
        (u"Θ", em("\\Theta{}")),
        (u"ρ", em("\\rho{}")),
        (u"ψ", em("\\psi{}")),
    ]
