# (generated with --quick)

import _typeshed
import array
import ctypes
import datetime as _datetime
import hashlib
import io
import json.decoder
import mmap
import os
import unittest.case
import uuid
import zipfile
from fs.googledrivefs import GoogleDriveFS
from fs.opener import registry
from typing import Any, Callable, List, Mapping, Optional, Sequence, Tuple, Type, TypeVar, Union

And: Any
BytesIO: Type[io.BytesIO]
Credentials: Any
DestinationExists: Any
FSTestCases: Any
FileExpected: Any
GoogleDriveFSOpener: Any
MimeTypeEquals: Any
NameEquals: Any
OperationFailed: Any
ResourceNotFound: Any
SubGoogleDriveFS: Any
TestCase: Type[unittest.case.TestCase]
ZipFile: Type[zipfile.ZipFile]
_safeDirForTests: str
datetime: Type[_datetime.datetime]
datetime_to_epoch: Any
default: Any
environ: os._Environ[str]
join: Any
open_fs: Any
raises: Any

AnyStr = TypeVar('AnyStr', str, bytes)
_FT = TypeVar('_FT', bound=Callable)

class TestGoogleDriveFS(Any, unittest.case.TestCase):
    fullFS: Any
    testSubdir: str
    def destroy_fs(self, _) -> None: ...
    def make_fs(self) -> Any: ...
    def test_directory_paging(self) -> None: ...
    def test_download_google_native_format(self) -> None: ...
    def test_hashes(self) -> None: ...
    def test_read_write_google_metadata(self) -> None: ...
    def test_setinfo2(self) -> None: ...
    def test_shortcut(self) -> None: ...
    def test_watch(self) -> None: ...

def CredentialsDict() -> Any: ...
def FullFS() -> Any: ...
def load(fp: _typeshed.SupportsRead[Union[bytes, str]], *, cls: Optional[Type[json.decoder.JSONDecoder]] = ..., object_hook: Optional[Callable[[dict], Any]] = ..., parse_float: Optional[Callable[[str], Any]] = ..., parse_int: Optional[Callable[[str], Any]] = ..., parse_constant: Optional[Callable[[str], Any]] = ..., object_pairs_hook: Optional[Callable[[List[Tuple[Any, Any]]], Any]] = ..., **kwds) -> Any: ...
def loads(s: Union[bytes, str], *, cls: Optional[Type[json.decoder.JSONDecoder]] = ..., object_hook: Optional[Callable[[dict], Any]] = ..., parse_float: Optional[Callable[[str], Any]] = ..., parse_int: Optional[Callable[[str], Any]] = ..., parse_constant: Optional[Callable[[str], Any]] = ..., object_pairs_hook: Optional[Callable[[List[Tuple[Any, Any]]], Any]] = ..., **kwds) -> Any: ...
def md5(string: Union[array.array, bytes, ctypes._CData, mmap.mmap] = ..., *, usedforsecurity: bool = ...) -> hashlib._Hash: ...
def skipUnless(condition: object, reason: str) -> Callable[[_FT], _FT]: ...
def test_makedirs_from_root() -> None: ...
def test_opener() -> None: ...
def test_opener_with_root_id() -> None: ...
def test_root() -> None: ...
def test_search() -> None: ...
def test_write_file_to_root() -> None: ...
def urlencode(query: Union[Mapping, Sequence[Tuple[Any, Any]]], doseq: bool = ..., safe: AnyStr = ..., encoding: str = ..., errors: str = ..., quote_via: Callable[[str, AnyStr, str, str], str] = ...) -> str: ...
def uuid4() -> uuid.UUID: ...
