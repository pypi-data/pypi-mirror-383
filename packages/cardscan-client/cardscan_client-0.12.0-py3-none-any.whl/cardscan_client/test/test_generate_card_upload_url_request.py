# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API Clients.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cardscan_client.models.generate_card_upload_url_request import GenerateCardUploadUrlRequest

class TestGenerateCardUploadUrlRequest(unittest.TestCase):
    """GenerateCardUploadUrlRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenerateCardUploadUrlRequest:
        """Test GenerateCardUploadUrlRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenerateCardUploadUrlRequest`
        """
        model = GenerateCardUploadUrlRequest()
        if include_optional:
            return GenerateCardUploadUrlRequest(
                orientation = 'front',
                capture_type = 'manual',
                metadata = cardscan_client.models.scan_metadata.ScanMetadata(
                    capture_type = 'automatic', 
                    guides = cardscan_client.models.scan_metadata_guides.ScanMetadata_guides(
                        x = 56, 
                        y = 56, 
                        width = 56, 
                        height = 56, ), 
                    capture_canvas = cardscan_client.models.scan_metadata_capture_canvas.ScanMetadata_captureCanvas(
                        width = 56, 
                        height = 56, ), 
                    video_background = cardscan_client.models.scan_metadata_video_background.ScanMetadata_videoBackground(
                        width = 56, 
                        height = 56, ), 
                    window_inner = cardscan_client.models.scan_metadata_window_inner.ScanMetadata_windowInner(
                        width = 56, 
                        height = 56, ), 
                    ml_threshold = 1.337, 
                    laplacian_threshold = 1.337, 
                    package_name = '', 
                    package_version = '', 
                    video_track = cardscan_client.models.scan_metadata_video_track.ScanMetadata_videoTrack(
                        aspect_ratio = 1.337, 
                        device_id = '', 
                        frame_rate = 1.337, 
                        group_id = '', 
                        height = 56, 
                        resize_mode = '', 
                        width = 56, ), 
                    camera_capabilities = cardscan_client.models.scan_metadata_camera_capabilities.ScanMetadata_cameraCapabilities(
                        aspect_ratio = cardscan_client.models.scan_metadata_camera_capabilities_aspect_ratio.ScanMetadata_cameraCapabilities_aspectRatio(
                            max = 1.337, 
                            min = 1.337, ), 
                        device_id = '', 
                        facing_mode = [
                            ''
                            ], 
                        frame_rate = cardscan_client.models.scan_metadata_camera_capabilities_aspect_ratio.ScanMetadata_cameraCapabilities_aspectRatio(
                            max = 1.337, 
                            min = 1.337, ), 
                        group_id = '', 
                        height = , 
                        resize_mode = [
                            ''
                            ], 
                        width = , ), 
                    capture_score = cardscan_client.models.scan_metadata_capture_score.ScanMetadata_capture_score(
                        scores = [
                            cardscan_client.models.scan_metadata_capture_score_scores_inner.ScanMetadata_capture_score_scores_inner(
                                score = 1.337, 
                                laplacian = 1.337, )
                            ], 
                        max_lap_score = 1.337, ), )
            )
        else:
            return GenerateCardUploadUrlRequest(
                orientation = 'front',
        )
        """

    def testGenerateCardUploadUrlRequest(self):
        """Test GenerateCardUploadUrlRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
