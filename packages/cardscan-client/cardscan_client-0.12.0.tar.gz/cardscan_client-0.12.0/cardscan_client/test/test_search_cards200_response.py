# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API Clients.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cardscan_client.models.search_cards200_response import SearchCards200Response

class TestSearchCards200Response(unittest.TestCase):
    """SearchCards200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchCards200Response:
        """Test SearchCards200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchCards200Response`
        """
        model = SearchCards200Response()
        if include_optional:
            return SearchCards200Response(
                cards = [
                    cardscan_client.models.card_api_response.CardApiResponse(
                        card_id = '', 
                        state = 'pending', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error = cardscan_client.models.model_error.ModelError(
                            message = '', 
                            type = '', 
                            code = '', ), 
                        payer_match = cardscan_client.models.payer_match.PayerMatch(
                            cardscan_payer_id = '', 
                            cardscan_payer_name = '', 
                            score = '', 
                            matches = [
                                cardscan_client.models.payer_match_matches_inner.PayerMatch_matches_inner(
                                    clearinghouse = '', 
                                    payer_id = '', 
                                    payer_name = '', 
                                    score = '', 
                                    cardscan_payer_id = '', 
                                    transaction_type = 'professional', 
                                    metadata = cardscan_client.models.payer_match_matches_inner_metadata.PayerMatch_matches_inner_metadata(
                                        last_updated = '', 
                                        source = '', ), )
                                ], 
                            change_healthcare = [
                                cardscan_client.models.chc_payer_record.CHCPayerRecord(
                                    chc_payer_id = '', 
                                    chc_payer_name = '', 
                                    score = '', 
                                    note = '', 
                                    deprecated = True, )
                                ], 
                            custom = [
                                cardscan_client.models.custom_payer_record.CustomPayerRecord(
                                    custom_payer_id = '', 
                                    custom_payer_name = '', 
                                    custom_payer_name_alt = '', 
                                    score = '', 
                                    source = '', )
                                ], 
                            message = '', ), 
                        metadata = cardscan_client.models.card_response_metadata.CardResponseMetadata(
                            insurance_scan_version = '', 
                            payer_match_version = '', ), 
                        images = cardscan_client.models.card_api_response_images.CardApiResponse_images(
                            front = cardscan_client.models.card_api_response_images_front.CardApiResponse_images_front(
                                url = '', ), 
                            back = cardscan_client.models.card_api_response_images_back.CardApiResponse_images_back(
                                url = '', ), ), 
                        deleted = True, 
                        enriched_results = cardscan_client.models.card_api_response_enriched_results.CardApiResponse_enriched_results(
                            addresses = [
                                cardscan_client.models.enriched_address_result_inner.EnrichedAddressResultInner(
                                    label = '', 
                                    type = 'medical_claims_address', 
                                    company_name = '', 
                                    address = '', 
                                    score = '', )
                                ], 
                            phone_numbers = [
                                cardscan_client.models.enriched_phone_number_result_inner.EnrichedPhoneNumberResultInner(
                                    label = '', 
                                    type = 'pcp_phone', 
                                    number = '', 
                                    score = '', )
                                ], 
                            copays_deductibles = [
                                cardscan_client.models.enriched_copay_result_inner.EnrichedCopayResultInner(
                                    service = 'office_visit', 
                                    category = 'copay', 
                                    value = 1.337, 
                                    score = '', )
                                ], 
                            processed_sides = 'front_only', ), 
                        details = cardscan_client.models.card_api_response_details.CardApiResponse_details(
                            group_number = cardscan_client.models.match_score.MatchScore(
                                value = '', 
                                scores = [
                                    ''
                                    ], ), 
                            member_number = cardscan_client.models.match_score.MatchScore(
                                value = '', ), 
                            payer_name = , 
                            rx_bin = , 
                            rx_pcn = , 
                            member_name = , 
                            dependent_names = [
                                
                                ], 
                            plan_name = , 
                            plan_id = , 
                            card_specific_id = , 
                            client_name = , 
                            payer_id = , 
                            plan_details = , 
                            rx_id = , 
                            rx_issuer = , 
                            rx_plan = , 
                            start_date = , 
                            employer = , 
                            medicare_medicaid_id = , 
                            member_dob = , 
                            member_gender = , 
                            member_id_prefix = , 
                            member_id_suffix = , 
                            part_a_effective_date = , 
                            part_b_effective_date = , 
                            pharmacy_benefit_manager = , 
                            plan_type = , ), )
                    ],
                response_metadata = cardscan_client.models.response_metadata.ResponseMetadata(
                    next_cursor = '', 
                    limit = 56, 
                    total = 56, )
            )
        else:
            return SearchCards200Response(
                cards = [
                    cardscan_client.models.card_api_response.CardApiResponse(
                        card_id = '', 
                        state = 'pending', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error = cardscan_client.models.model_error.ModelError(
                            message = '', 
                            type = '', 
                            code = '', ), 
                        payer_match = cardscan_client.models.payer_match.PayerMatch(
                            cardscan_payer_id = '', 
                            cardscan_payer_name = '', 
                            score = '', 
                            matches = [
                                cardscan_client.models.payer_match_matches_inner.PayerMatch_matches_inner(
                                    clearinghouse = '', 
                                    payer_id = '', 
                                    payer_name = '', 
                                    score = '', 
                                    cardscan_payer_id = '', 
                                    transaction_type = 'professional', 
                                    metadata = cardscan_client.models.payer_match_matches_inner_metadata.PayerMatch_matches_inner_metadata(
                                        last_updated = '', 
                                        source = '', ), )
                                ], 
                            change_healthcare = [
                                cardscan_client.models.chc_payer_record.CHCPayerRecord(
                                    chc_payer_id = '', 
                                    chc_payer_name = '', 
                                    score = '', 
                                    note = '', 
                                    deprecated = True, )
                                ], 
                            custom = [
                                cardscan_client.models.custom_payer_record.CustomPayerRecord(
                                    custom_payer_id = '', 
                                    custom_payer_name = '', 
                                    custom_payer_name_alt = '', 
                                    score = '', 
                                    source = '', )
                                ], 
                            message = '', ), 
                        metadata = cardscan_client.models.card_response_metadata.CardResponseMetadata(
                            insurance_scan_version = '', 
                            payer_match_version = '', ), 
                        images = cardscan_client.models.card_api_response_images.CardApiResponse_images(
                            front = cardscan_client.models.card_api_response_images_front.CardApiResponse_images_front(
                                url = '', ), 
                            back = cardscan_client.models.card_api_response_images_back.CardApiResponse_images_back(
                                url = '', ), ), 
                        deleted = True, 
                        enriched_results = cardscan_client.models.card_api_response_enriched_results.CardApiResponse_enriched_results(
                            addresses = [
                                cardscan_client.models.enriched_address_result_inner.EnrichedAddressResultInner(
                                    label = '', 
                                    type = 'medical_claims_address', 
                                    company_name = '', 
                                    address = '', 
                                    score = '', )
                                ], 
                            phone_numbers = [
                                cardscan_client.models.enriched_phone_number_result_inner.EnrichedPhoneNumberResultInner(
                                    label = '', 
                                    type = 'pcp_phone', 
                                    number = '', 
                                    score = '', )
                                ], 
                            copays_deductibles = [
                                cardscan_client.models.enriched_copay_result_inner.EnrichedCopayResultInner(
                                    service = 'office_visit', 
                                    category = 'copay', 
                                    value = 1.337, 
                                    score = '', )
                                ], 
                            processed_sides = 'front_only', ), 
                        details = cardscan_client.models.card_api_response_details.CardApiResponse_details(
                            group_number = cardscan_client.models.match_score.MatchScore(
                                value = '', 
                                scores = [
                                    ''
                                    ], ), 
                            member_number = cardscan_client.models.match_score.MatchScore(
                                value = '', ), 
                            payer_name = , 
                            rx_bin = , 
                            rx_pcn = , 
                            member_name = , 
                            dependent_names = [
                                
                                ], 
                            plan_name = , 
                            plan_id = , 
                            card_specific_id = , 
                            client_name = , 
                            payer_id = , 
                            plan_details = , 
                            rx_id = , 
                            rx_issuer = , 
                            rx_plan = , 
                            start_date = , 
                            employer = , 
                            medicare_medicaid_id = , 
                            member_dob = , 
                            member_gender = , 
                            member_id_prefix = , 
                            member_id_suffix = , 
                            part_a_effective_date = , 
                            part_b_effective_date = , 
                            pharmacy_benefit_manager = , 
                            plan_type = , ), )
                    ],
                response_metadata = cardscan_client.models.response_metadata.ResponseMetadata(
                    next_cursor = '', 
                    limit = 56, 
                    total = 56, ),
        )
        """

    def testSearchCards200Response(self):
        """Test SearchCards200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
