name: ci

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request: {}
  workflow_dispatch: {}

env:
  COLUMNS: 150
  UV_PYTHON: 3.13
  CI: 1

jobs:
  test-python:
    name: test ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"
          - "3.14t"

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - run: uv sync
      - run: make test-release

  test-os:
    name: test on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v6

      - run: uv sync
      - run: make test-release

  # test with a debug build as it picks up errors which optimised release builds do not
  test-debug:
    name: test-debug ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.13"

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v6

      - run: uv sync
      - run: make test

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - uses: astral-sh/setup-uv@v6

      - run: make static-checks

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs:
      [
        test-python,
        test-os,
        test-debug,
        lint,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  build-sdist:
    name: build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable
      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist
          path: dist

  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        os: [linux, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          # manylinux for various platforms
          - os: linux
            manylinux: auto
            target: armv7
          - os: linux
            manylinux: auto
            target: i686
          - os: linux
            manylinux: auto
            target: ppc64le
          - os: linux
            manylinux: auto
            target: s390x

          # musllinux
          - os: linux
            manylinux: musllinux_1_1
            target: x86_64
          - os: linux
            manylinux: musllinux_1_1
            target: aarch64
          - os: linux
            manylinux: musllinux_1_1
            target: armv7

    #runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    runs-on: ${{ (matrix.os == 'linux' && matrix.target == 'aarch64' && 'ubuntu-24.04-arm') ||
                  (matrix.os == 'macos' && matrix.target == 'aarch64' && 'macos-15') ||
                  (matrix.os == 'windows' && matrix.target == 'aarch64' && 'windows-11-arm') ||
                  (matrix.os == 'linux' && matrix.target == 'x86_64' && 'ubuntu-24.04') ||
                  (matrix.os == 'macos' && matrix.target == 'x86_64' && 'macos-15-intel') ||
                  (matrix.os == 'windows' && matrix.target == 'x86_64' && 'windows-2025') ||
                  'ubuntu-24.04' }}
    steps:
      - uses: actions/checkout@v5

      - name: set up python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - run: pip install -U twine 'ruff==0.14.0'

      # https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture
      - name: Setup aws-lc-rs
        if: matrix.target == 'armv7' || matrix.target == 'ppc64le' || matrix.target == 's390x'
        run: |
          echo "REQUIRES_BINDGEN=1" >> $GITHUB_ENV
          cargo add aws-lc-rs --features bindgen

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter 3.11 3.12 3.13 3.14
          rust-toolchain: stable
          docker-options: -e CI
          before-script-linux: |
            [ "${{ env.REQUIRES_BINDGEN }}" == "1" ] && sudo apt-get update && sudo apt-get install -y gcc-multilib

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}_${{ matrix.manylinux }}
          path: dist

  inspect-pypi-assets:
    needs: [build, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
          mkdir sdist-files
          tar -xvf dist/*.tar.gz -C sdist-files
          tree -a sdist-files

      - name: extract and list wheel file
        run: |
          ls dist/*cp311-manylinux*x86_64.whl | head -n 1
          python -m zipfile --list `ls dist/*cp311-manylinux*x86_64.whl | head -n 1`

  test-builds-arch:
    name: test build on ${{ matrix.target }}-${{ matrix.distro }}
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: armv7
            distro: ubuntu24.04
          - target: aarch64
            distro: alpine_latest

    steps:
      - uses: actions/checkout@v5

      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_linux_*
          merge-multiple: true
          path: dist

      - uses: uraimo/run-on-arch-action@v3.0.1
        name: install & test
        with:
          arch: ${{ matrix.target }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            set -x
            if command -v apt-get &> /dev/null; then
              echo "installing python & pip with apt-get..."
              apt-get update
              apt-get install -y --no-install-recommends build-essential libffi-dev python3 python3-dev python3-pip python3-venv git curl
            else
              echo "installing python & pip with apk..."
              apk update
              apk add build-base libffi-dev python3 python3-dev py3-pip git curl
            fi
          env: |
            UV_NO_PROGRESS: '1'
          run: |
            set -x
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source $HOME/.local/bin/env
            uv sync --frozen --no-group bench --no-install-project
            uv pip install pyreqwest --no-index --no-deps --find-links dist --force-reinstall
            uv run --no-sync pytest --ignore=tests/test_examples.py

  test-builds-os:
    name: test build on ${{ matrix.platform.os }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        platform:
          [
            { os: linux, runs-on: ubuntu-24.04 },
            { os: linux_aarch64, runs-on: ubuntu-24.04-arm },
            { os: windows, runs-on: windows-2025 },
            { os: windows_aarch64, runs-on: windows-11-arm },
            { os: macos, runs-on: macos-15 },
          ]

    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6

      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: uv sync
      - run: uv pip install pyreqwest --no-index --no-deps --find-links dist --force-reinstall
      - run: uv run pytest

  release:
    needs: [test-builds-arch, test-builds-os, build-sdist, check]
    if: always() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    environment:
      name: release

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6

      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: uv publish --trusted-publishing always
