{
  "_template_info": {
    "_comment": "COMPREHENSIVE HETERODYNE CONFIGURATION TEMPLATE - Based on current codebase v1.0.0",
    "_creation_date": "2025-10-07",
    "_based_on_analysis": "14-parameter heterodyne model implementing He et al. PNAS 2024 Equation S-95",
    "_usage": "Copy this template and customize the initial_parameters and experimental_data sections for your specific experiment",
    "_model_info": "14-parameter heterodyne model with separate reference and sample transport coefficients"
  },
  "metadata": {
    "_comment": "Template metadata - Customize description for your experiment",
    "config_version": "1.0.0",
    "description": "TEMPLATE: Comprehensive heterodyne scattering analysis configuration",
    "based_on": "He et al. PNAS 2024 - Transport coefficient approach (Equation S-95)",
    "analysis_mode": "heterodyne",
    "plotting_features": {
      "experimental_data_plotting": "Use --plot-experimental-data for validation and comparison",
      "simulated_data_plotting": "Use --plot-simulated-data with --contrast and --offset parameters",
      "phi_angles_override": "Command-line --phi-angles overrides config file settings",
      "multi_method_support": "Separate plots generated for each optimization method (Nelder-Mead, Gurobi, etc.)"
    },
    "parameters_optimized": "[D0_ref, alpha_ref, D_offset_ref, D0_sample, alpha_sample, D_offset_sample, v0, beta, v_offset, f0, f1, f2, f3, phi0]",
    "script_compatibility": "heterodyne v1.0.0 with enhanced Gurobi optimization and code quality improvements",
    "_solver_optimization": {
      "optimized_for": "Large datasets (0.1M - 4M datapoints)",
      "optimization_date": "2025-09-30",
      "key_improvements": [
        "Nelder-Mead maxiter: 15000",
        "Gurobi max_iterations: 2500",
        "Gurobi time_limit: 1800s",
        "Robust TimeLimit: 2400s",
        "Cache size: 2000 MB",
        "Max threads: 16",
        "Memory limit: 32 GB"
      ],
      "expected_performance": "25-60% faster for large datasets",
      "memory_efficiency": "20-35% better memory management"
    }
  },
  "experimental_data": {
    "_comment": "CUSTOMIZE: Update paths and filenames for your experimental data",
    "data_folder_path": "./data/YOUR_SAMPLE_NAME/",
    "data_file_name": "your_experimental_data.hdf",
    "phi_angles_path": "./data/phi_angles/",
    "phi_angles_file": "phi_list.txt",
    "exchange_key": "exchange",
    "cache_file_path": "./data/YOUR_SAMPLE_NAME/",
    "cache_filename_template": "cached_c2_frames_{start_frame}_{end_frame}.npz",
    "cache_compression": true,
    "data_type": "float64",
    "file_format": "NPZ",
    "preprocessing": {
      "apply_diagonal_correction": true,
      "vectorized_correction": true,
      "cache_processed_data": true,
      "normalize_data": true,
      "normalization_method": "baseline"
    }
  },
  "analyzer_parameters": {
    "_comment": "CUSTOMIZE: Core physics parameters for your experiment",
    "temporal": {
      "dt": 0.1,
      "_dt_note": "Time step between frames in seconds - CUSTOMIZE for your acquisition",
      "dt_unit": "seconds",
      "start_frame": 100,
      "_start_frame_note": "CUSTOMIZE: Skip initial frames for equilibration",
      "end_frame": 1000,
      "_end_frame_note": "CUSTOMIZE: Total analysis window",
      "frame_description": "Analysis time window for experiment"
    },
    "scattering": {
      "wavevector_q": 0.001,
      "_q_note": "CUSTOMIZE: Scattering wavevector q = 4π sin(θ/2)/λ",
      "q_unit": "Å⁻¹",
      "typical_range": [0.001, 0.1]
    },
    "geometry": {
      "stator_rotor_gap": 2000000,
      "_gap_note": "CUSTOMIZE: Gap in Angstroms - important for flow geometry",
      "gap_unit": "Å",
      "gap_in_microns": 200
    },
    "computational": {
      "num_threads": "auto",
      "auto_detect_cores": true,
      "max_threads_limit": 16,
      "_max_threads_note": "Increased from 8 to 16 for large dataset optimization",
      "memory_limit_gb": 32,
      "_memory_limit_note": "Optimized for large datasets - adaptive memory management"
    }
  },
  "initial_parameters": {
    "_comment": "CUSTOMIZE: Starting values for 14-parameter heterodyne model - CRITICAL for convergence",
    "values": [
      100.0, 0.0, 10.0, 100.0, 0.0, 10.0, 1.0, 0.0, 0.0, 0.25, 0.25, 0.25, 0.25, 0.0
    ],
    "parameter_names": [
      "D0_ref",
      "alpha_ref",
      "D_offset_ref",
      "D0_sample",
      "alpha_sample",
      "D_offset_sample",
      "v0",
      "beta",
      "v_offset",
      "f0",
      "f1",
      "f2",
      "f3",
      "phi0"
    ],
    "_parameter_definitions": {
      "reference_transport": ["D0_ref", "alpha_ref", "D_offset_ref"],
      "sample_transport": ["D0_sample", "alpha_sample", "D_offset_sample"],
      "velocity": ["v0", "beta", "v_offset"],
      "fractions": ["f0", "f1", "f2", "f3"],
      "flow_angle": ["phi0"]
    },
    "units": [
      "Å²/s",
      "dimensionless",
      "Å²/s",
      "Å²/s",
      "dimensionless",
      "Å²/s",
      "Å/s",
      "dimensionless",
      "Å/s",
      "dimensionless",
      "dimensionless",
      "dimensionless",
      "dimensionless",
      "degrees"
    ],
    "physical_meaning": {
      "D0_ref": "Reference transport coefficient J₀ for reference beam",
      "alpha_ref": "Transport coefficient time-scaling exponent for reference",
      "D_offset_ref": "Baseline transport coefficient J_offset for reference",
      "D0_sample": "Reference transport coefficient J₀ for sample beam",
      "alpha_sample": "Transport coefficient time-scaling exponent for sample",
      "D_offset_sample": "Baseline transport coefficient J_offset for sample",
      "v0": "Reference velocity magnitude",
      "beta": "Power-law exponent for velocity evolution",
      "v_offset": "Baseline velocity offset",
      "f0": "Fraction parameter 0 (sum of f0+f1+f2+f3 should equal 1)",
      "f1": "Fraction parameter 1",
      "f2": "Fraction parameter 2",
      "f3": "Fraction parameter 3",
      "phi0": "Angular offset between flow and scattering"
    },
    "active_parameters": [
      "D0_ref",
      "alpha_ref",
      "D_offset_ref",
      "D0_sample",
      "alpha_sample",
      "D_offset_sample",
      "v0",
      "beta",
      "v_offset",
      "f0",
      "f1",
      "f2",
      "f3",
      "phi0"
    ],
    "parameter_units": {
      "D0_ref": "Å²/s",
      "alpha_ref": "dimensionless",
      "D_offset_ref": "Å²/s",
      "D0_sample": "Å²/s",
      "alpha_sample": "dimensionless",
      "D_offset_sample": "Å²/s",
      "v0": "Å/s",
      "beta": "dimensionless",
      "v_offset": "Å/s",
      "f0": "dimensionless",
      "f1": "dimensionless",
      "f2": "dimensionless",
      "f3": "dimensionless",
      "phi0": "degrees"
    }
  },
  "optimization_config": {
    "_comment": "Comprehensive optimization settings with enhanced Gurobi and robust methods",
    "angle_filtering": {
      "_comment": "Angle filtering for anisotropic analysis - customize ranges for your geometry",
      "enabled": true,
      "target_ranges": [
        {
          "min_angle": -10.0,
          "max_angle": 10.0
        },
        {
          "min_angle": 80.0,
          "max_angle": 100.0
        },
        {
          "min_angle": 170.0,
          "max_angle": 190.0
        },
        {
          "min_angle": 260.0,
          "max_angle": 280.0
        }
      ],
      "fallback_to_all_angles": true,
      "_performance_note": "Provides 3-5x speedup for complex optimization"
    },
    "classical_optimization": {
      "methods": ["Nelder-Mead", "Gurobi"],
      "_methods_note": "Classical methods always available. Robust methods in separate section below.",
      "_method_flags": {
        "--method classical": "Runs ONLY classical methods: Nelder-Mead, Gurobi (if licensed)",
        "--method robust": "Runs ONLY robust methods: Robust-Wasserstein, Robust-Scenario, Robust-Ellipsoidal",
        "--method all": "Runs classical + robust optimization for comprehensive analysis"
      },
      "_gurobi_availability": "Requires Gurobi license (pip install gurobipy). Now uses enhanced Trust Region SQP.",
      "method_options": {
        "Nelder-Mead": {
          "maxiter": 15000,
          "_maxiter_note": "Optimized for large datasets (0.1M-4M datapoints) - increased from original for better convergence",
          "xatol": 1e-10,
          "_xatol_note": "Tight parameter tolerance for precision",
          "fatol": 1e-10,
          "_fatol_note": "Tight function tolerance for convergence",
          "adaptive": true,
          "_adaptive_note": "Adaptive step sizes improve convergence"
        },
        "Gurobi": {
          "_comment": "ENHANCED: Now uses iterative Trust Region SQP instead of single-shot QP (fixes χ² convergence)",
          "_algorithm": "Iterative trust region SQP optimization with quadratic approximation and adaptive radius",
          "max_iterations": 2500,
          "_max_iterations_note": "Optimized for large datasets - increased for better convergence",
          "tolerance": 1e-6,
          "_tolerance_note": "Convergence tolerance for trust region updates",
          "output_flag": 0,
          "_output_flag_note": "Gurobi verbosity (0=silent, 1=verbose)",
          "method": 2,
          "_method_note": "Gurobi solver method (2=barrier recommended for QP subproblems)",
          "time_limit": 1800,
          "_time_limit_note": "Extended time limit for large datasets (0.1M-4M datapoints)",
          "_trust_region_settings": {
            "initial_radius": 1.0,
            "max_radius": 10.0,
            "eta1": 0.25,
            "eta2": 0.75,
            "gamma1": 0.25,
            "gamma2": 2.0,
            "max_trust_iterations": 100,
            "_note": "Trust region hyperparameters for enhanced optimization"
          },
          "_advantages": "Better convergence than old single-shot QP, handles bounds naturally",
          "_requirements": "Gurobi license required for enhanced optimization performance"
        }
      },
      "selection_strategy": "best_chi_squared",
      "_selection_strategy_note": "best_chi_squared, consensus, or first_success when multiple methods used",
      "subsampling": {
        "_comment": "Subsampling configuration for large datasets to improve optimization performance",
        "enabled": true,
        "_enabled_note": "Enable subsampling for datasets exceeding max_data_points. Set to false only for small datasets (<100k points) or when full data fidelity is critical.",
        "max_data_points": 100000,
        "_max_data_points_note": "Maximum data points before subsampling kicks in. For 2000x2000 dataset with 2 angles = 8M points, subsampling is highly recommended.",
        "time_subsample_factor": 4,
        "_time_subsample_note": "Subsample every Nth time point (4 = keep 1 in 4 points). Reduces 2000 frames → 500 frames.",
        "angle_subsample_factor": 2,
        "_angle_subsample_note": "Subsample every Nth angle (2 = keep 1 in 2 angles). Note: angle subsampling is automatically skipped when n_angles < 4 to preserve angular information for anisotropic analysis.",
        "_expected_reduction": "With factors (4, 2): 8M points → ~250k points (32x reduction). Additional reduction applied if still too large.",
        "_performance_impact": "Typical speedup: 20-50x faster optimization with minimal χ² degradation (<10%)",
        "_when_to_disable": "Only disable for small datasets (<100k points) or when you need full resolution for publication-quality fits"
      }
    },
    "robust_optimization": {
      "_comment": "ENHANCED: 100x-5000x performance improvements with caching and optimized solvers",
      "_performance_upgrades": "v1.0.0+ optimizations: adaptive Jacobians, CLARABEL/SCS solvers, smart caching",
      "_usage_examples": [
        "python run_heterodyne.py --method robust  # Run only robust methods",
        "python run_heterodyne.py --method classical  # Include robust in classical analysis",
        "python run_heterodyne.py --method all  # Comprehensive: classical + robust"
      ],
      "enabled": true,
      "uncertainty_model": "wasserstein",
      "_uncertainty_model_note": "Options: wasserstein (recommended), ellipsoidal, scenario",
      "uncertainty_radius": 0.05,
      "_uncertainty_radius_note": "Fraction of data variance for uncertainty set",
      "n_scenarios": 15,
      "_n_scenarios_note": "Bootstrap scenarios - optimized for performance",
      "regularization_alpha": 0.02,
      "_regularization_alpha_note": "L2 regularization for complex 14-parameter space",
      "regularization_beta": 0.001,
      "_regularization_beta_note": "L1 sparsity parameter",
      "jacobian_epsilon": 1e-6,
      "_jacobian_epsilon_note": "Finite difference step for adaptive Jacobians",
      "enable_caching": true,
      "_enable_caching_note": "Smart caching provides major performance gains",
      "preferred_solver": "CLARABEL",
      "_preferred_solver_note": "Optimized CVXPY solver: CLARABEL > SCS > CVXOPT",
      "solver_settings": {
        "_gurobi_settings": "For Gurobi-based robust optimization backend",
        "Method": 2,
        "CrossOver": 0,
        "BarHomogeneous": 1,
        "TimeLimit": 2400,
        "MIPGap": 0.0001,
        "NumericFocus": 2,
        "OutputFlag": 0,
        "_TimeLimit_note": "Extended for large datasets (0.1M-4M datapoints)"
      },
      "method_options": {
        "wasserstein": {
          "uncertainty_radius": 0.05,
          "regularization_alpha": 0.02
        },
        "scenario": {
          "n_scenarios": 15,
          "bootstrap_method": "residual"
        },
        "ellipsoidal": {
          "gamma": 0.15,
          "regularization_alpha": 0.02
        }
      },
      "subsampling": {
        "_comment": "Subsampling for robust optimization with CVXPY memory constraints",
        "enabled": true,
        "_enabled_note": "Robust optimization is memory-intensive with CVXPY. Enable subsampling for large datasets to prevent memory errors. Disable for small datasets (<50k points) or publication-quality fits.",
        "max_data_points": 50000,
        "_max_data_points_note": "Lower than classical (100k) due to CVXPY memory overhead in robust formulations (Wasserstein, Scenario, Ellipsoidal)",
        "time_subsample_factor": 4,
        "_time_subsample_note": "Subsample every Nth time point (4 = keep 1 in 4 points). Reduces 2000 frames → 500 frames.",
        "angle_subsample_factor": 2,
        "_angle_subsample_note": "Subsample every Nth angle (2 = keep 1 in 2 angles). Automatically skipped when n_angles < 4 to preserve angular information.",
        "_memory_note": "Robust methods use CVXPY which requires large contiguous memory. Subsampling reduces memory usage by 16x-64x.",
        "_when_to_enable": "Enable if you encounter CVXPY memory errors, slow convergence, or solver failures. Recommended for datasets > 50k points.",
        "_performance_impact": "Typical speedup: 10-30x faster robust optimization with minimal χ² degradation (<15%)",
        "_when_to_disable": "Disable for small datasets (<50k points) or when you need full resolution for publication-quality robust fits"
      }
    },
    "scaling_parameters": {
      "_comment": "Physical scaling: c2_fitted = c2_theory * contrast + offset",
      "fitted_range": {
        "min": 1.0,
        "max": 2.0
      },
      "theory_range": {
        "min": 0.0,
        "max": 1.0
      },
      "contrast": {
        "min": 0.05,
        "max": 0.5,
        "prior_mu": 0.3,
        "prior_sigma": 0.1,
        "type": "TruncatedNormal"
      },
      "offset": {
        "min": 0.05,
        "max": 1.95,
        "prior_mu": 1.0,
        "prior_sigma": 0.2,
        "type": "TruncatedNormal"
      }
    }
  },
  "parameter_space": {
    "_comment": "CUSTOMIZE: Parameter bounds and priors for 14-parameter heterodyne model - adjust based on your physical system",
    "bounds": [
      {
        "name": "D0_ref",
        "min": 1.0,
        "max": 1000000.0,
        "_customize_note": "Adjust D0_ref bounds based on your expected reference transport coefficients",
        "type": "TruncatedNormal",
        "prior_mu": 10000.0,
        "prior_sigma": 1000.0,
        "unit": "Å²/s"
      },
      {
        "name": "alpha_ref",
        "min": -2.0,
        "max": 2.0,
        "_customize_note": "Power-law exponent for reference - typically [-2, 2] range is sufficient",
        "type": "Normal",
        "prior_mu": -1.5,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "D_offset_ref",
        "min": -100,
        "max": 100,
        "_customize_note": "Baseline transport for reference - adjust based on system",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 10.0,
        "unit": "Å²/s"
      },
      {
        "name": "D0_sample",
        "min": 1.0,
        "max": 1000000.0,
        "_customize_note": "Adjust D0_sample bounds based on your expected sample transport coefficients",
        "type": "TruncatedNormal",
        "prior_mu": 10000.0,
        "prior_sigma": 1000.0,
        "unit": "Å²/s"
      },
      {
        "name": "alpha_sample",
        "min": -2.0,
        "max": 2.0,
        "_customize_note": "Power-law exponent for sample - typically [-2, 2] range is sufficient",
        "type": "Normal",
        "prior_mu": -1.5,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "D_offset_sample",
        "min": -100,
        "max": 100,
        "_customize_note": "Baseline transport for sample - adjust based on system",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 10.0,
        "unit": "Å²/s"
      },
      {
        "name": "v0",
        "min": 0.0,
        "max": 10000.0,
        "_customize_note": "Reference velocity - adjust for your flow conditions",
        "type": "TruncatedNormal",
        "prior_mu": 1000.0,
        "prior_sigma": 100.0,
        "unit": "Å/s"
      },
      {
        "name": "beta",
        "min": -2.0,
        "max": 2.0,
        "_customize_note": "Velocity power-law exponent",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "v_offset",
        "min": -1000.0,
        "max": 1000.0,
        "_customize_note": "Baseline velocity offset",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 100.0,
        "unit": "Å/s"
      },
      {
        "name": "f0",
        "min": 0.0,
        "max": 1.0,
        "_customize_note": "Fraction parameter 0 - sum of all f parameters should equal 1",
        "type": "TruncatedNormal",
        "prior_mu": 0.25,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "f1",
        "min": 0.0,
        "max": 1.0,
        "_customize_note": "Fraction parameter 1",
        "type": "TruncatedNormal",
        "prior_mu": 0.25,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "f2",
        "min": 0.0,
        "max": 1.0,
        "_customize_note": "Fraction parameter 2",
        "type": "TruncatedNormal",
        "prior_mu": 0.25,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "f3",
        "min": 0.0,
        "max": 1.0,
        "_customize_note": "Fraction parameter 3",
        "type": "TruncatedNormal",
        "prior_mu": 0.25,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "phi0",
        "min": -180.0,
        "max": 180.0,
        "_customize_note": "Angular offset - adjust based on geometry",
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 10.0,
        "unit": "degrees"
      }
    ]
  },
  "analysis_settings": {
    "_comment": "14-parameter heterodyne model settings",
    "model_description": "g₂ = heterodyne correlation with separate g₁_ref and g₁_sample field correlations (He et al. PNAS 2024 Eq. S-95)"
  },
  "advanced_settings": {
    "_comment": "Advanced computational and numerical settings",
    "data_loading": {
      "use_diagonal_correction": true,
      "vectorized_diagonal_fix": true
    },
    "chi_squared_calculation": {
      "method": "standard",
      "_scaling_note": "Scaling optimization always enabled for proper chi-squared calculation",
      "uncertainty_estimation_factor": 0.1,
      "minimum_sigma": 1e-10,
      "fast_computation": true,
      "uncertainty_calculation": {
        "enable_uncertainty": true,
        "report_uncertainty": true,
        "minimum_angles_for_uncertainty": 2
      },
      "validity_check": {
        "check_positive_D0": true,
        "check_positive_v0": true,
        "check_positive_time_dependent": true,
        "check_parameter_bounds": true,
        "check_fraction_sum": true
      }
    },
    "numerical_integration": {
      "method": "simpson",
      "relative_tolerance": 1e-8,
      "absolute_tolerance": 1e-12
    },
    "optimization_controls": {
      "convergence_tolerance": 1e-8,
      "max_function_evaluations": 15000,
      "_max_function_evaluations_note": "Higher limits for complex 14-parameter space",
      "parameter_scaling": "auto",
      "finite_difference_step": 1e-8
    }
  },
  "performance_settings": {
    "_comment": "Performance optimization settings for 14-parameter model",
    "caching": {
      "enable_memory_cache": true,
      "enable_disk_cache": true,
      "cache_size_limit_mb": 2000,
      "auto_cleanup": true,
      "_cache_size_note": "Optimized for large datasets (0.1M-4M datapoints)"
    },
    "parallel_processing": {
      "enable_multiprocessing": true,
      "chunk_size": "auto",
      "backend": "threading"
    },
    "memory_management": {
      "low_memory_mode": false,
      "garbage_collection_frequency": 10,
      "memory_monitoring": true,
      "_memory_monitoring_note": "Enabled for large dataset optimization"
    },
    "numba_optimization": {
      "enable_numba": true,
      "warmup_numba": true,
      "parallel_numba": true,
      "cache_numba": true,
      "stability_enhancements": {
        "enable_kernel_warmup": true,
        "warmup_iterations": 5,
        "optimize_memory_layout": true,
        "enable_nogil": true,
        "environment_optimization": {
          "auto_configure": true,
          "max_threads": 16,
          "gc_optimization": true,
          "_max_threads_note": "Increased for large dataset optimization"
        }
      },
      "performance_monitoring": {
        "enable_profiling": true,
        "stable_benchmarking": false,
        "adaptive_benchmarking": false,
        "performance_baselines": false,
        "target_cv": 0.1,
        "memory_monitoring": true,
        "smart_caching": {
          "enabled": true,
          "max_items": 200,
          "max_memory_mb": 1000.0
        },
        "_optimization_note": "Enhanced monitoring for large dataset optimization"
      }
    },
    "noise_model": {
      "use_simple_forward_model": false,
      "_note": "False uses full forward model consistent with classical optimization",
      "sigma_prior": 0.1
    }
  },
  "validation_rules": {
    "_comment": "Quality control and validation thresholds",
    "data_quality": {
      "check_data_range": true,
      "correlation_minimum": 0.0,
      "correlation_maximum": 10.0,
      "check_nan_values": true,
      "nan_handling": "raise"
    },
    "parameter_validation": {
      "check_bounds": true,
      "physics_constraints": true,
      "correlation_checks": true
    },
    "fit_quality": {
      "_comment": "Chi-squared quality thresholds - adjust based on your data quality expectations",
      "overall_chi_squared": {
        "excellent_threshold": 5.0,
        "acceptable_threshold": 10.0,
        "warning_threshold": 20.0,
        "critical_threshold": 50.0
      },
      "per_angle_chi_squared": {
        "excellent_threshold": 5.0,
        "acceptable_threshold": 10.0,
        "warning_threshold": 20.0,
        "outlier_threshold_multiplier": 2.5,
        "max_outlier_fraction": 0.25,
        "min_good_angles": 2
      }
    },
    "frame_range": {
      "minimum_frames": 10,
      "maximum_frames": null,
      "check_continuity": true
    }
  },
  "workflow_integration": {
    "_comment": "Analysis workflow and integration settings",
    "analysis_workflow": {
      "auto_generate_plots": true,
      "plot_integration_enabled": true,
      "plot_experimental_data_on_load": false,
      "cache_plot_data": true,
      "save_intermediate_plots": false
    },
    "data_management": {
      "experimental_data_cache": true,
      "theoretical_data_cache": true,
      "cache_directory": "./cache",
      "auto_cleanup_cache": false,
      "cache_retention_days": 30
    },
    "error_handling": {
      "continue_on_plot_errors": true,
      "log_plot_errors": true,
      "fallback_plotting": true,
      "validate_plot_data": true
    }
  },
  "output_settings": {
    "_comment": "Output and reporting configuration",
    "_output_structure": "heterodyne_analysis_results.json (main summary) saved to output directory root. Method-specific results in subdirectories: classical/[method_name]/ and robust/[method_name]/ containing analysis_results_[method_name].json, parameters.json, fitted_data.npz (c2_experimental, c2_fitted, residuals, parameters, uncertainties, chi_squared, phi_angles, t1, t2), and c2_heatmaps_[method_name].png. Summary files: all_classical_methods_summary.json, all_robust_methods_summary.json.",
    "results_directory": "./heterodyne_results",
    "file_formats": {
      "results_format": "json",
      "save_intermediate": false,
      "compression": true,
      "precision": "float64"
    },
    "file_naming": {
      "timestamp_format": "%Y%m%d_%H%M%S",
      "include_config_name": true,
      "include_chi_squared": true
    },
    "reporting": {
      "generate_plots": true,
      "plot_formats": ["png", "pdf"],
      "detailed_summary": true,
      "convergence_diagnostics": true
    },
    "plotting": {
      "_comment": "Comprehensive plotting configuration with method-specific outputs",
      "general": {
        "create_plots": true,
        "plot_format": "png",
        "dpi": 300,
        "figure_size": [12, 8],
        "_figsize_note": "Larger figures for complex 14-parameter results",
        "style": "publication",
        "save_plots": true,
        "show_plots": false
      },
      "c2_heatmaps": {
        "enabled": true,
        "_method_specific_note": "Separate heatmaps generated for each optimization method (Nelder-Mead, Gurobi, Robust-*, etc.) with method names in filenames",
        "layout": "single_row",
        "include_experimental": true,
        "include_theoretical": true,
        "include_residuals": true,
        "colormap": "viridis",
        "colorbar_position": "right",
        "title_prefix": "C2 Correlation Function (Heterodyne)",
        "figsize": [18, 6]
      },
      "diagnostic_plots": {
        "enabled": true,
        "chi_squared_summary": true,
        "parameter_correlations": true,
        "residual_analysis": true,
        "convergence_history": true
      },
      "output": {
        "base_directory": "./plots",
        "subdirectories": {
          "c2_heatmaps": "c2_correlation",
          "parameter_plots": "parameters",
          "diagnostics": "diagnostics"
        },
        "filename_template": "{analysis_type}_{start_frame}_{end_frame}_{method}_{timestamp}",
        "_filename_template_note": "Frame-aware plotting with method identification: start_frame, end_frame for data range, method name (Nelder-Mead, Gurobi-Iterative-QP, Robust-Wasserstein, etc.), timestamp",
        "include_timestamp": true,
        "overwrite_existing": false
      }
    },
    "logging": {
      "log_level": "INFO",
      "log_to_file": true,
      "log_to_console": true,
      "log_filename": "heterodyne_analysis.log",
      "rotation": {
        "max_bytes": 10485760,
        "backup_count": 3
      }
    }
  },
  "_customization_guide": {
    "_step_1": "Update experimental_data section with your file paths and sample name",
    "_step_2": "Customize analyzer_parameters: dt (time step), q (wavevector), frame range, gap size",
    "_step_3": "Adjust initial_parameters values based on your expected parameter ranges",
    "_step_4": "Modify parameter_space bounds to match your physical system constraints",
    "_step_5": "Adjust performance_settings based on your computational resources",
    "_step_6": "Customize validation_rules thresholds based on your data quality expectations",
    "_step_7": "Update output_settings paths and logging configuration"
  },
  "_recent_enhancements": {
    "_14_parameter_model": "Correctly implements independent g₁_ref and g₁_sample field correlations (He et al. PNAS 2024 Eq. S-95)",
    "_gurobi_optimization": "Enhanced Trust Region SQP algorithm fixes χ² convergence issues in v0.6.5+",
    "_robust_optimization": "100x-5000x performance improvements with smart caching and optimized solvers",
    "_code_quality": "Full codebase formatted with black, linted with flake8, type-checked with mypy",
    "_dependency_management": "Updated pyproject.toml with 'completion' group instead of deprecated 'interactive'",
    "_test_coverage": "Enhanced test suite with better CLI completion testing and error handling"
  }
}
