# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ensync_pb2 as ensync__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ensync_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EnSyncServiceStub(object):
    """Main EnSync service for client communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/ensync.EnSyncService/Connect',
                request_serializer=ensync__pb2.ConnectRequest.SerializeToString,
                response_deserializer=ensync__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/ensync.EnSyncService/Heartbeat',
                request_serializer=ensync__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=ensync__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.PublishEvent = channel.unary_unary(
                '/ensync.EnSyncService/PublishEvent',
                request_serializer=ensync__pb2.PublishEventRequest.SerializeToString,
                response_deserializer=ensync__pb2.PublishEventResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/ensync.EnSyncService/Subscribe',
                request_serializer=ensync__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=ensync__pb2.EventStreamResponse.FromString,
                _registered_method=True)
        self.Unsubscribe = channel.unary_unary(
                '/ensync.EnSyncService/Unsubscribe',
                request_serializer=ensync__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=ensync__pb2.UnsubscribeResponse.FromString,
                _registered_method=True)
        self.AcknowledgeEvent = channel.unary_unary(
                '/ensync.EnSyncService/AcknowledgeEvent',
                request_serializer=ensync__pb2.AcknowledgeRequest.SerializeToString,
                response_deserializer=ensync__pb2.AcknowledgeResponse.FromString,
                _registered_method=True)
        self.DeferEvent = channel.unary_unary(
                '/ensync.EnSyncService/DeferEvent',
                request_serializer=ensync__pb2.DeferRequest.SerializeToString,
                response_deserializer=ensync__pb2.DeferResponse.FromString,
                _registered_method=True)
        self.DiscardEvent = channel.unary_unary(
                '/ensync.EnSyncService/DiscardEvent',
                request_serializer=ensync__pb2.DiscardRequest.SerializeToString,
                response_deserializer=ensync__pb2.DiscardResponse.FromString,
                _registered_method=True)
        self.ReplayEvent = channel.unary_unary(
                '/ensync.EnSyncService/ReplayEvent',
                request_serializer=ensync__pb2.ReplayRequest.SerializeToString,
                response_deserializer=ensync__pb2.ReplayResponse.FromString,
                _registered_method=True)
        self.PauseEvents = channel.unary_unary(
                '/ensync.EnSyncService/PauseEvents',
                request_serializer=ensync__pb2.PauseRequest.SerializeToString,
                response_deserializer=ensync__pb2.PauseResponse.FromString,
                _registered_method=True)
        self.ContinueEvents = channel.unary_unary(
                '/ensync.EnSyncService/ContinueEvents',
                request_serializer=ensync__pb2.ContinueRequest.SerializeToString,
                response_deserializer=ensync__pb2.ContinueResponse.FromString,
                _registered_method=True)


class EnSyncServiceServicer(object):
    """Main EnSync service for client communication
    """

    def Connect(self, request, context):
        """Connection & Authentication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishEvent(self, request, context):
        """Event Publishing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Event Subscription - Returns a stream of events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcknowledgeEvent(self, request, context):
        """Event Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeferEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscardEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplayEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseEvents(self, request, context):
        """Flow Control
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinueEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnSyncServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=ensync__pb2.ConnectRequest.FromString,
                    response_serializer=ensync__pb2.ConnectResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=ensync__pb2.HeartbeatRequest.FromString,
                    response_serializer=ensync__pb2.HeartbeatResponse.SerializeToString,
            ),
            'PublishEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishEvent,
                    request_deserializer=ensync__pb2.PublishEventRequest.FromString,
                    response_serializer=ensync__pb2.PublishEventResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ensync__pb2.SubscribeRequest.FromString,
                    response_serializer=ensync__pb2.EventStreamResponse.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=ensync__pb2.UnsubscribeRequest.FromString,
                    response_serializer=ensync__pb2.UnsubscribeResponse.SerializeToString,
            ),
            'AcknowledgeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AcknowledgeEvent,
                    request_deserializer=ensync__pb2.AcknowledgeRequest.FromString,
                    response_serializer=ensync__pb2.AcknowledgeResponse.SerializeToString,
            ),
            'DeferEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeferEvent,
                    request_deserializer=ensync__pb2.DeferRequest.FromString,
                    response_serializer=ensync__pb2.DeferResponse.SerializeToString,
            ),
            'DiscardEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscardEvent,
                    request_deserializer=ensync__pb2.DiscardRequest.FromString,
                    response_serializer=ensync__pb2.DiscardResponse.SerializeToString,
            ),
            'ReplayEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplayEvent,
                    request_deserializer=ensync__pb2.ReplayRequest.FromString,
                    response_serializer=ensync__pb2.ReplayResponse.SerializeToString,
            ),
            'PauseEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseEvents,
                    request_deserializer=ensync__pb2.PauseRequest.FromString,
                    response_serializer=ensync__pb2.PauseResponse.SerializeToString,
            ),
            'ContinueEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ContinueEvents,
                    request_deserializer=ensync__pb2.ContinueRequest.FromString,
                    response_serializer=ensync__pb2.ContinueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ensync.EnSyncService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ensync.EnSyncService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EnSyncService(object):
    """Main EnSync service for client communication
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/Connect',
            ensync__pb2.ConnectRequest.SerializeToString,
            ensync__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/Heartbeat',
            ensync__pb2.HeartbeatRequest.SerializeToString,
            ensync__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/PublishEvent',
            ensync__pb2.PublishEventRequest.SerializeToString,
            ensync__pb2.PublishEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ensync.EnSyncService/Subscribe',
            ensync__pb2.SubscribeRequest.SerializeToString,
            ensync__pb2.EventStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/Unsubscribe',
            ensync__pb2.UnsubscribeRequest.SerializeToString,
            ensync__pb2.UnsubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcknowledgeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/AcknowledgeEvent',
            ensync__pb2.AcknowledgeRequest.SerializeToString,
            ensync__pb2.AcknowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeferEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/DeferEvent',
            ensync__pb2.DeferRequest.SerializeToString,
            ensync__pb2.DeferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiscardEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/DiscardEvent',
            ensync__pb2.DiscardRequest.SerializeToString,
            ensync__pb2.DiscardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplayEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/ReplayEvent',
            ensync__pb2.ReplayRequest.SerializeToString,
            ensync__pb2.ReplayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/PauseEvents',
            ensync__pb2.PauseRequest.SerializeToString,
            ensync__pb2.PauseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContinueEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ensync.EnSyncService/ContinueEvents',
            ensync__pb2.ContinueRequest.SerializeToString,
            ensync__pb2.ContinueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
