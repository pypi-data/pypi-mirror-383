name: Payment Module Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'openfatture/payment/**'
      - 'tests/payment/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/payment-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'openfatture/payment/**'
      - 'tests/payment/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/payment-tests.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  test-payment:
    name: Test Payment Module
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run payment module tests
        run: |
          uv run pytest tests/payment/ \
            --override-ini=addopts= \
            --cov=openfatture.payment \
            --cov-fail-under=85 \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: payment-module
          name: codecov-payment-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Archive coverage HTML report
        if: always() && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: payment-coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 7

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 85
          MINIMUM_ORANGE: 70

  integration-tests:
    name: Payment Integration Tests
    runs-on: ubuntu-latest
    needs: test-payment

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: openfatture_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@postgres:5432/openfatture_test
        run: |
          uv run pytest tests/payment/integration/ \
            --cov=openfatture.payment \
            --cov-report=term-missing \
            -v

  lint-payment:
    name: Lint Payment Module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync --all-extras --python $(which python3)

      - name: Run Black on payment module
        run: uv run python -m black --check openfatture/payment/ tests/payment/

      - name: Run Ruff on payment module
        run: uv run ruff check openfatture/payment/ tests/payment/

      - name: Run MyPy on payment module
        run: uv run mypy openfatture/payment/
        continue-on-error: true

  test-fixtures:
    name: Test Bank Statement Fixtures
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Validate bank statement fixtures
        run: |
          uv run pytest tests/payment/infrastructure/importers/ \
            --fixtures \
            -v

      - name: Test CSV parsers
        run: |
          uv run pytest tests/payment/infrastructure/importers/test_csv_importer.py \
            -v

      - name: Test OFX parsers
        run: |
          uv run pytest tests/payment/infrastructure/importers/test_ofx_importer.py \
            -v
        continue-on-error: true  # OFX tests may fail if fixtures not ready

  docker-build-test:
    name: Test Docker Build with Payment Module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free disk space for Docker build
        run: docker builder prune -af || true

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: openfatture:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test payment CLI in Docker
        run: |
          docker run --rm openfatture:test payment --help
          docker run --rm openfatture:test payment stats --help

      - name: Test metrics endpoint health
        run: |
          docker run -d --name test-container -p 8000:8000 \
            -e PROMETHEUS_ENABLED=true openfatture:test payment stats
          sleep 5
          curl -f http://localhost:8000/metrics || echo "Metrics endpoint not yet ready"
          docker rm -f test-container || true
        continue-on-error: true
