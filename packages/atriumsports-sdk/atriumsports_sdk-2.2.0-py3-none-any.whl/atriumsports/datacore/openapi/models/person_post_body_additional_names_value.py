# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class PersonPostBodyAdditionalNamesValue(BaseModel):
    """
    The *property name* here can either be `default` (for a non-language specific name) or a two letter (lower-case) ISO 639-1 language code. eg `fr`, `es`
    """  # noqa: E501

    display: Optional[StrictStr] = None
    television: Optional[StrictStr] = Field(default=None, description="The name to be used on television")
    scoreboard: Optional[StrictStr] = Field(default=None, description="The name to be used on the scoreboard")
    pronunciation: Optional[StrictStr] = Field(default=None, description="The description of how to pronounce the name")
    boxscore: Optional[StrictStr] = None
    jersey: Optional[StrictStr] = None
    abbreviated: Optional[StrictStr] = None
    given: Optional[StrictStr] = None
    family: Optional[StrictStr] = None
    full: Optional[StrictStr] = None
    known_as: Optional[StrictStr] = Field(default=None, alias="knownAs")
    __properties: ClassVar[List[str]] = [
        "display",
        "television",
        "scoreboard",
        "pronunciation",
        "boxscore",
        "jersey",
        "abbreviated",
        "given",
        "family",
        "full",
        "knownAs",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonPostBodyAdditionalNamesValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display (nullable) is None
        # and model_fields_set contains the field
        if self.display is None and "display" in self.model_fields_set:
            _dict["display"] = None

        # set to None if television (nullable) is None
        # and model_fields_set contains the field
        if self.television is None and "television" in self.model_fields_set:
            _dict["television"] = None

        # set to None if scoreboard (nullable) is None
        # and model_fields_set contains the field
        if self.scoreboard is None and "scoreboard" in self.model_fields_set:
            _dict["scoreboard"] = None

        # set to None if pronunciation (nullable) is None
        # and model_fields_set contains the field
        if self.pronunciation is None and "pronunciation" in self.model_fields_set:
            _dict["pronunciation"] = None

        # set to None if boxscore (nullable) is None
        # and model_fields_set contains the field
        if self.boxscore is None and "boxscore" in self.model_fields_set:
            _dict["boxscore"] = None

        # set to None if jersey (nullable) is None
        # and model_fields_set contains the field
        if self.jersey is None and "jersey" in self.model_fields_set:
            _dict["jersey"] = None

        # set to None if abbreviated (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviated is None and "abbreviated" in self.model_fields_set:
            _dict["abbreviated"] = None

        # set to None if given (nullable) is None
        # and model_fields_set contains the field
        if self.given is None and "given" in self.model_fields_set:
            _dict["given"] = None

        # set to None if family (nullable) is None
        # and model_fields_set contains the field
        if self.family is None and "family" in self.model_fields_set:
            _dict["family"] = None

        # set to None if full (nullable) is None
        # and model_fields_set contains the field
        if self.full is None and "full" in self.model_fields_set:
            _dict["full"] = None

        # set to None if known_as (nullable) is None
        # and model_fields_set contains the field
        if self.known_as is None and "known_as" in self.model_fields_set:
            _dict["knownAs"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonPostBodyAdditionalNamesValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "display": obj.get("display"),
                "television": obj.get("television"),
                "scoreboard": obj.get("scoreboard"),
                "pronunciation": obj.get("pronunciation"),
                "boxscore": obj.get("boxscore"),
                "jersey": obj.get("jersey"),
                "abbreviated": obj.get("abbreviated"),
                "given": obj.get("given"),
                "family": obj.get("family"),
                "full": obj.get("full"),
                "knownAs": obj.get("knownAs"),
            }
        )
        return _obj
