# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.change_log_model_organization import ChangeLogModelOrganization
from typing import Optional, Set
from typing_extensions import Self


class ChangeLogModel(BaseModel):
    """
    ChangeLogModel
    """  # noqa: E501

    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[ChangeLogModelOrganization] = None
    change_type: Optional[StrictStr] = Field(
        default=None,
        description="The type of change >- `delete` Record Deleted >- `fixture_change` Fixture schedule Change >- `fixture_reset` Fixture Reset >- `fixture_videostream_disable` Enable Video Stream >- `fixture_videostream_enable` Enable Video Stream >- `move` Record Moved >- `post` Record Created >- `put` Record Changed >- `update` Record Updated ",
        alias="changeType",
    )
    primary_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="The primary table changed", alias="primaryType"
    )
    primary_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the primaryType", alias="primaryId"
    )
    child_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="The child table changed", alias="childType"
    )
    change_message: Optional[Any] = Field(default=None, alias="changeMessage")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "organizationId",
        "organization",
        "changeType",
        "primaryType",
        "primaryId",
        "childType",
        "changeMessage",
        "added",
    ]

    @field_validator("change_type")
    def change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "post",
                "put",
                "move",
                "delete",
                "update",
                "fixture_change",
                "fixture_reset",
                "fixture_videostream_enable",
                "fixture_videostream_disable",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('post', 'put', 'move', 'delete', 'update', 'fixture_change', 'fixture_reset', 'fixture_videostream_enable', 'fixture_videostream_disable')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeLogModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # set to None if change_message (nullable) is None
        # and model_fields_set contains the field
        if self.change_message is None and "change_message" in self.model_fields_set:
            _dict["changeMessage"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeLogModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organizationId": obj.get("organizationId"),
                "organization": ChangeLogModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "changeType": obj.get("changeType"),
                "primaryType": obj.get("primaryType"),
                "primaryId": obj.get("primaryId"),
                "childType": obj.get("childType"),
                "changeMessage": obj.get("changeMessage"),
                "added": obj.get("added"),
            }
        )
        return _obj
