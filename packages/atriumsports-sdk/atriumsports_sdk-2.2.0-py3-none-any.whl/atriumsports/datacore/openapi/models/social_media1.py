# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class SocialMedia1(BaseModel):
    """
    Social Media contacts
    """  # noqa: E501

    website: Optional[StrictStr] = None
    facebook: Optional[StrictStr] = None
    twitter: Optional[StrictStr] = None
    wikipedia: Optional[StrictStr] = None
    instagram: Optional[StrictStr] = None
    tiktok: Optional[StrictStr] = None
    ticketing: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "website",
        "facebook",
        "twitter",
        "wikipedia",
        "instagram",
        "tiktok",
        "ticketing",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SocialMedia1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict["website"] = None

        # set to None if facebook (nullable) is None
        # and model_fields_set contains the field
        if self.facebook is None and "facebook" in self.model_fields_set:
            _dict["facebook"] = None

        # set to None if twitter (nullable) is None
        # and model_fields_set contains the field
        if self.twitter is None and "twitter" in self.model_fields_set:
            _dict["twitter"] = None

        # set to None if wikipedia (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia is None and "wikipedia" in self.model_fields_set:
            _dict["wikipedia"] = None

        # set to None if instagram (nullable) is None
        # and model_fields_set contains the field
        if self.instagram is None and "instagram" in self.model_fields_set:
            _dict["instagram"] = None

        # set to None if tiktok (nullable) is None
        # and model_fields_set contains the field
        if self.tiktok is None and "tiktok" in self.model_fields_set:
            _dict["tiktok"] = None

        # set to None if ticketing (nullable) is None
        # and model_fields_set contains the field
        if self.ticketing is None and "ticketing" in self.model_fields_set:
            _dict["ticketing"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SocialMedia1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "website": obj.get("website"),
                "facebook": obj.get("facebook"),
                "twitter": obj.get("twitter"),
                "wikipedia": obj.get("wikipedia"),
                "instagram": obj.get("instagram"),
                "tiktok": obj.get("tiktok"),
                "ticketing": obj.get("ticketing"),
            }
        )
        return _obj
