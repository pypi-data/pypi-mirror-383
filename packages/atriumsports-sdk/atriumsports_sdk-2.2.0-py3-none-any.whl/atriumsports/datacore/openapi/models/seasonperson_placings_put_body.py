# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class SEASONPERSONPlacingsPutBody(BaseModel):
    """
    SEASONPERSONPlacingsPutBody
    """  # noqa: E501

    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    person_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the person", alias="personId"
    )
    result_place: Optional[StrictInt] = Field(default=None, description="Result place", alias="resultPlace")
    points: Optional[StrictInt] = Field(default=None, description="Points awarded")
    prize_money: Optional[StrictInt] = Field(default=None, description="Prize money awarded", alias="prizeMoney")
    __properties: ClassVar[List[str]] = ["seasonId", "personId", "resultPlace", "points", "prizeMoney"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SEASONPERSONPlacingsPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if points (nullable) is None
        # and model_fields_set contains the field
        if self.points is None and "points" in self.model_fields_set:
            _dict["points"] = None

        # set to None if prize_money (nullable) is None
        # and model_fields_set contains the field
        if self.prize_money is None and "prize_money" in self.model_fields_set:
            _dict["prizeMoney"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SEASONPERSONPlacingsPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "seasonId": obj.get("seasonId"),
                "personId": obj.get("personId"),
                "resultPlace": obj.get("resultPlace"),
                "points": obj.get("points"),
                "prizeMoney": obj.get("prizeMoney"),
            }
        )
        return _obj
