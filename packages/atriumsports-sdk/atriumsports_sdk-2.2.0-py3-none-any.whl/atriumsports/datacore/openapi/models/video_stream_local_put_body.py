# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class VideoStreamLocalPutBody(BaseModel):
    """
    VideoStreamLocalPutBody
    """  # noqa: E501

    fixture_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the fixture", alias="fixtureId"
    )
    provider: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The code for the provider of the file"
    )
    source_number: Optional[StrictInt] = Field(
        default=1,
        description="Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
        alias="sourceNumber",
    )
    format: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="The format of the video file >- `HLS` A HLS play list >- `MP4` One MP4 file "
    )
    url: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="The URL where the file can be found"
    )
    __properties: ClassVar[List[str]] = ["fixtureId", "provider", "sourceNumber", "format", "url"]

    @field_validator("format")
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["HLS", "MP4"]):
            raise ValueError("must be one of enum values ('HLS', 'MP4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoStreamLocalPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoStreamLocalPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "fixtureId": obj.get("fixtureId"),
                "provider": obj.get("provider"),
                "sourceNumber": obj.get("sourceNumber") if obj.get("sourceNumber") is not None else 1,
                "format": obj.get("format"),
                "url": obj.get("url"),
            }
        )
        return _obj
