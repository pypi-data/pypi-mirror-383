# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.conferences_model_organization import ConferencesModelOrganization
from atriumsports.datacore.openapi.models.images_model import ImagesModel
from atriumsports.datacore.openapi.models.social_media import SocialMedia
from typing import Optional, Set
from typing_extensions import Self


class ConferencesModel(BaseModel):
    """
    ConferencesModel
    """  # noqa: E501

    conference_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the conference", alias="conferenceId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[ConferencesModelOrganization] = None
    abbreviation_local: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="abbreviationLocal",
    )
    name_local: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the conference in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    abbreviation_latin: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="abbreviationLatin",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the conference in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    social: Optional[SocialMedia] = None
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    images: Optional[List[ImagesModel]] = None
    __properties: ClassVar[List[str]] = [
        "conferenceId",
        "organizationId",
        "organization",
        "abbreviationLocal",
        "nameLocal",
        "abbreviationLatin",
        "nameLatin",
        "social",
        "externalId",
        "updated",
        "added",
        "images",
    ]

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferencesModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social
        if self.social:
            _dict["social"] = self.social.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict["images"] = _items
        # set to None if conference_id (nullable) is None
        # and model_fields_set contains the field
        if self.conference_id is None and "conference_id" in self.model_fields_set:
            _dict["conferenceId"] = None

        # set to None if abbreviation_local (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_local is None and "abbreviation_local" in self.model_fields_set:
            _dict["abbreviationLocal"] = None

        # set to None if abbreviation_latin (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_latin is None and "abbreviation_latin" in self.model_fields_set:
            _dict["abbreviationLatin"] = None

        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if social (nullable) is None
        # and model_fields_set contains the field
        if self.social is None and "social" in self.model_fields_set:
            _dict["social"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferencesModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "conferenceId": obj.get("conferenceId"),
                "organizationId": obj.get("organizationId"),
                "organization": ConferencesModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "abbreviationLocal": obj.get("abbreviationLocal"),
                "nameLocal": obj.get("nameLocal"),
                "abbreviationLatin": obj.get("abbreviationLatin"),
                "nameLatin": obj.get("nameLatin"),
                "social": SocialMedia.from_dict(obj["social"]) if obj.get("social") is not None else None,
                "externalId": obj.get("externalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "images": [ImagesModel.from_dict(_item) for _item in obj["images"]]
                if obj.get("images") is not None
                else None,
            }
        )
        return _obj
