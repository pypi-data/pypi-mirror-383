# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class SeasonSeriesCompetitor(BaseModel):
    """
    SeasonSeriesCompetitor
    """  # noqa: E501

    entity_id: Optional[StrictStr] = Field(default=None, description="The uuid of the entity", alias="entityId")
    person_id: Optional[StrictStr] = Field(default=None, description="The uuid of the person", alias="personId")
    conference_id: Optional[StrictStr] = Field(
        default=None, description="The uuid of the conference the competitor represents", alias="conferenceId"
    )
    division_id: Optional[StrictStr] = Field(
        default=None, description="The uuid of the conference the competitor represents", alias="divisionId"
    )
    pre_series_ranking: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The rank of the competitor coming into the series", alias="preSeriesRanking"
    )
    string_record: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="String record of the competitor", alias="stringRecord"
    )
    series_wins: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Number of wins in the series for the competitor", alias="seriesWins"
    )
    series_losses: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Number of losses in the series for the competitor", alias="seriesLosses"
    )
    series_draws: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Number of draws in the series for the competitor", alias="seriesDraws"
    )
    series_result: Optional[StrictStr] = Field(
        default=None, description="Result for the competitor in the series", alias="seriesResult"
    )
    __properties: ClassVar[List[str]] = [
        "entityId",
        "personId",
        "conferenceId",
        "divisionId",
        "preSeriesRanking",
        "stringRecord",
        "seriesWins",
        "seriesLosses",
        "seriesDraws",
        "seriesResult",
    ]

    @field_validator("series_result")
    def series_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "WON", "LOST", "DRAW"]):
            raise ValueError("must be one of enum values ('PENDING', 'WON', 'LOST', 'DRAW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonSeriesCompetitor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonSeriesCompetitor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "entityId": obj.get("entityId"),
                "personId": obj.get("personId"),
                "conferenceId": obj.get("conferenceId"),
                "divisionId": obj.get("divisionId"),
                "preSeriesRanking": obj.get("preSeriesRanking"),
                "stringRecord": obj.get("stringRecord"),
                "seriesWins": obj.get("seriesWins"),
                "seriesLosses": obj.get("seriesLosses"),
                "seriesDraws": obj.get("seriesDraws"),
                "seriesResult": obj.get("seriesResult"),
            }
        )
        return _obj
