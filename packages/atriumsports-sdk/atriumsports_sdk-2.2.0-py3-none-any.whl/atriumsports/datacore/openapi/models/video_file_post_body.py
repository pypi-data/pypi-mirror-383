# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class VideoFilePostBody(BaseModel):
    """
    VideoFilePostBody
    """  # noqa: E501

    video_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the video", alias="videoId"
    )
    provider: Annotated[str, Field(strict=True, max_length=100)] = Field(
        description="The code for the provider of the file"
    )
    locale: Annotated[str, Field(min_length=5, strict=True, max_length=5)] = Field(
        description="The locale of the video"
    )
    source_number: StrictInt = Field(
        description="Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
        alias="sourceNumber",
    )
    fixture_id: StrictStr = Field(description="The unique identifier of the fixture", alias="fixtureId")
    resolution: Annotated[str, Field(strict=True, max_length=30)] = Field(
        description="The resolution of the video input >- `1080` 1920 x 1080 >- `288` 512 x 288 >- `720` 1280 x 720 "
    )
    name: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="The name/description of the video file"
    )
    feed_type: Annotated[str, Field(strict=True, max_length=30)] = Field(
        description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary ",
        alias="feedType",
    )
    content: Annotated[str, Field(strict=True, max_length=30)] = Field(
        description="Content of the stream >- `CLEAN` Output signal is the same as the input signal >- `PROGRAM` Score overlays and other enhancements have been added to the stream "
    )
    fps: StrictInt = Field(description="fps for the video stream")
    origin: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="The origin of the video file >- None None >- `STREAM` Streamed >- `UPLOAD` Uploaded >- `VENUE` Recorded in venue ",
    )
    format: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="The format of the video file >- `HLS` A HLS play list >- `MP4` One MP4 file "
    )
    storage_provider: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="Where the video file is stored? >- None None >- `5STREAM` 5stream >- `AV_SPORTRADAR` AV Sportradar >- `KEEMOTION` Keemotion >- `SYNERGY` Synergy ",
        alias="storageProvider",
    )
    size: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Size (Mb) of the video (only given if a single file)"
    )
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lenth (mins) of the video")
    encoding: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="How is the video/audio encoded. codecs etc."
    )
    url: Annotated[str, Field(strict=True, max_length=200)] = Field(description="The URL where the file can be found")
    status: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="What is the status of the file? >- None None >- `AVAILABLE` Available for access >- `BUILDABLE` Not currently available - but can be built on request >- `PENDING` Being added - some parts may be available ",
    )
    start_time: datetime = Field(description="The time this recording started (UTC)", alias="startTime")
    expiry: Optional[datetime] = Field(default=None, description="When does this file expire? (UTC)")
    __properties: ClassVar[List[str]] = [
        "videoId",
        "provider",
        "locale",
        "sourceNumber",
        "fixtureId",
        "resolution",
        "name",
        "feedType",
        "content",
        "fps",
        "origin",
        "format",
        "storageProvider",
        "size",
        "length",
        "encoding",
        "url",
        "status",
        "startTime",
        "expiry",
    ]

    @field_validator("locale")
    def locale_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z]{2,2}-[A-Z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2,2}-[A-Z]{2,2}$/")
        return value

    @field_validator("resolution")
    def resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["288", "720", "1080"]):
            raise ValueError("must be one of enum values ('288', '720', '1080')")
        return value

    @field_validator("feed_type")
    def feed_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["PRIMARY", "ADDITIONAL_ANGLE", "LOW_LATENCY"]):
            raise ValueError("must be one of enum values ('PRIMARY', 'ADDITIONAL_ANGLE', 'LOW_LATENCY')")
        return value

    @field_validator("content")
    def content_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["CLEAN", "PROGRAM"]):
            raise ValueError("must be one of enum values ('CLEAN', 'PROGRAM')")
        return value

    @field_validator("origin")
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["STREAM", "VENUE", "UPLOAD"]):
            raise ValueError("must be one of enum values ('STREAM', 'VENUE', 'UPLOAD')")
        return value

    @field_validator("format")
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["HLS", "MP4"]):
            raise ValueError("must be one of enum values ('HLS', 'MP4')")
        return value

    @field_validator("storage_provider")
    def storage_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["5STREAM", "AV_SPORTRADAR", "KEEMOTION", "SYNERGY"]):
            raise ValueError("must be one of enum values ('5STREAM', 'AV_SPORTRADAR', 'KEEMOTION', 'SYNERGY')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["AVAILABLE", "BUILDABLE", "PENDING"]):
            raise ValueError("must be one of enum values ('AVAILABLE', 'BUILDABLE', 'PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoFilePostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict["origin"] = None

        # set to None if storage_provider (nullable) is None
        # and model_fields_set contains the field
        if self.storage_provider is None and "storage_provider" in self.model_fields_set:
            _dict["storageProvider"] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict["size"] = None

        # set to None if length (nullable) is None
        # and model_fields_set contains the field
        if self.length is None and "length" in self.model_fields_set:
            _dict["length"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        # set to None if expiry (nullable) is None
        # and model_fields_set contains the field
        if self.expiry is None and "expiry" in self.model_fields_set:
            _dict["expiry"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoFilePostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "videoId": obj.get("videoId"),
                "provider": obj.get("provider"),
                "locale": obj.get("locale"),
                "sourceNumber": obj.get("sourceNumber") if obj.get("sourceNumber") is not None else 1,
                "fixtureId": obj.get("fixtureId"),
                "resolution": obj.get("resolution"),
                "name": obj.get("name"),
                "feedType": obj.get("feedType"),
                "content": obj.get("content"),
                "fps": obj.get("fps") if obj.get("fps") is not None else 25,
                "origin": obj.get("origin"),
                "format": obj.get("format"),
                "storageProvider": obj.get("storageProvider"),
                "size": obj.get("size"),
                "length": obj.get("length"),
                "encoding": obj.get("encoding"),
                "url": obj.get("url"),
                "status": obj.get("status"),
                "startTime": obj.get("startTime"),
                "expiry": obj.get("expiry"),
            }
        )
        return _obj
