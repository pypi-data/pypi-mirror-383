# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.conference_external_ids_model_organization import (
    ConferenceExternalIdsModelOrganization,
)
from atriumsports.datacore.openapi.models.fixture_entities_model_conference import FixtureEntitiesModelConference
from typing import Optional, Set
from typing_extensions import Self


class ConferenceExternalIdsModel(BaseModel):
    """
    ConferenceExternalIdsModel
    """  # noqa: E501

    conference_external_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the external ids", alias="conferenceExternalId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[ConferenceExternalIdsModelOrganization] = None
    conference_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the conference", alias="conferenceId"
    )
    conference: Optional[FixtureEntitiesModelConference] = None
    source: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The source of the external Id"
    )
    source_type: Optional[StrictStr] = Field(default=None, description="Source type of external Id", alias="sourceType")
    source_external_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Identifier of external source", alias="sourceExternalId"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "conferenceExternalId",
        "organizationId",
        "organization",
        "conferenceId",
        "conference",
        "source",
        "sourceType",
        "sourceExternalId",
        "updated",
        "added",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferenceExternalIdsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conference
        if self.conference:
            _dict["conference"] = self.conference.to_dict()
        # set to None if conference_id (nullable) is None
        # and model_fields_set contains the field
        if self.conference_id is None and "conference_id" in self.model_fields_set:
            _dict["conferenceId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferenceExternalIdsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "conferenceExternalId": obj.get("conferenceExternalId"),
                "organizationId": obj.get("organizationId"),
                "organization": ConferenceExternalIdsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "conferenceId": obj.get("conferenceId"),
                "conference": FixtureEntitiesModelConference.from_dict(obj["conference"])
                if obj.get("conference") is not None
                else None,
                "source": obj.get("source"),
                "sourceType": obj.get("sourceType"),
                "sourceExternalId": obj.get("sourceExternalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
