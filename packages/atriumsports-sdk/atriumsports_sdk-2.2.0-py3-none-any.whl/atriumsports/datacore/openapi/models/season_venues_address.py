# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class SeasonVenuesAddress(BaseModel):
    """
    Street Address for the season venues
    """  # noqa: E501

    address1: Optional[StrictStr] = Field(default=None, description="First line of the address")
    address2: Optional[StrictStr] = Field(default=None, description="Second line of the address")
    address3: Optional[StrictStr] = Field(default=None, description="Third line of the address")
    city: Optional[StrictStr] = Field(default=None, description="The city/suburb of the address")
    state: Optional[StrictStr] = Field(default=None, description="The state of the address")
    postal_code: Optional[StrictStr] = Field(
        default=None, description="The postal code for the address", alias="postalCode"
    )
    country_code: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(
        default=None,
        description="ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
        alias="countryCode",
    )
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "address1",
        "address2",
        "address3",
        "city",
        "state",
        "postalCode",
        "countryCode",
        "longitude",
        "latitude",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonVenuesAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address1 (nullable) is None
        # and model_fields_set contains the field
        if self.address1 is None and "address1" in self.model_fields_set:
            _dict["address1"] = None

        # set to None if address2 (nullable) is None
        # and model_fields_set contains the field
        if self.address2 is None and "address2" in self.model_fields_set:
            _dict["address2"] = None

        # set to None if address3 (nullable) is None
        # and model_fields_set contains the field
        if self.address3 is None and "address3" in self.model_fields_set:
            _dict["address3"] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict["city"] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict["state"] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict["postalCode"] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict["countryCode"] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict["longitude"] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict["latitude"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonVenuesAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "address1": obj.get("address1"),
                "address2": obj.get("address2"),
                "address3": obj.get("address3"),
                "city": obj.get("city"),
                "state": obj.get("state"),
                "postalCode": obj.get("postalCode"),
                "countryCode": obj.get("countryCode"),
                "longitude": obj.get("longitude"),
                "latitude": obj.get("latitude"),
            }
        )
        return _obj
