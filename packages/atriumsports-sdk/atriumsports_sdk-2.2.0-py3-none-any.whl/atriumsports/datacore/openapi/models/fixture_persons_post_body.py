# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class FixturePersonsPostBody(BaseModel):
    """
    FixturePersonsPostBody
    """  # noqa: E501

    fixture_id: StrictStr = Field(description="The unique identifier of the fixture", alias="fixtureId")
    person_id: StrictStr = Field(description="The unique identifier of the person", alias="personId")
    entity_group_id: Optional[StrictStr] = Field(
        default=None, description="The entity group that this entity belongs to", alias="entityGroupId"
    )
    is_home: Optional[StrictBool] = Field(default=None, description="Is competitor the home person ?", alias="isHome")
    draw: Optional[StrictBool] = Field(default=None, description="Result for this competitor was a draw ?")
    result_status: Annotated[str, Field(strict=True, max_length=100)] = Field(
        description="Result status >- `CONFIRMED` Confirmed >- `DID_NOT_FINISH` Did Not Finish >- `DID_NOT_START` Did Not Start >- `DISQUALIFIED` Disqualified >- `FORFEITED` Forfeited >- `IN_PROGRESS` In Progress >- `SCHEDULED` Scheduled >- `WITHDRAWN` Withdrawn >- `WON_BY_FORFEIT` Won By Forfeit ",
        alias="resultStatus",
    )
    result_place: Optional[Annotated[int, Field(strict=True)]] = Field(
        default=None, description="Result placing (1=Won, 2=Lost)", alias="resultPlace"
    )
    result_secondary_score_place: Optional[Annotated[int, Field(strict=True)]] = Field(
        default=None, description="Result placing (1=Won, 2=Lost) of the Shoot Out", alias="resultSecondaryScorePlace"
    )
    starting_number: Optional[Annotated[int, Field(strict=True)]] = Field(
        default=None, description="Starting number", alias="startingNumber"
    )
    score: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Score for competitor in fixture"
    )
    secondary_score: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Secondary score", alias="secondaryScore"
    )
    is_neutral_venue: Optional[StrictBool] = Field(
        default=None, description="Competitor is playing at a neutral venue ?", alias="isNeutralVenue"
    )
    include_in_representation: Optional[StrictBool] = Field(
        default=True, description="Include this fixture in represented statistics?", alias="includeInRepresentation"
    )
    uniform_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the uniform", alias="uniformId"
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    __properties: ClassVar[List[str]] = [
        "fixtureId",
        "personId",
        "entityGroupId",
        "isHome",
        "draw",
        "resultStatus",
        "resultPlace",
        "resultSecondaryScorePlace",
        "startingNumber",
        "score",
        "secondaryScore",
        "isNeutralVenue",
        "includeInRepresentation",
        "uniformId",
        "externalId",
    ]

    @field_validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "SCHEDULED",
                "IN_PROGRESS",
                "CONFIRMED",
                "DISQUALIFIED",
                "FORFEITED",
                "WON_BY_FORFEIT",
                "DID_NOT_FINISH",
                "WITHDRAWN",
                "DID_NOT_START",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('SCHEDULED', 'IN_PROGRESS', 'CONFIRMED', 'DISQUALIFIED', 'FORFEITED', 'WON_BY_FORFEIT', 'DID_NOT_FINISH', 'WITHDRAWN', 'DID_NOT_START')"
            )
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FixturePersonsPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if entity_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_group_id is None and "entity_group_id" in self.model_fields_set:
            _dict["entityGroupId"] = None

        # set to None if result_place (nullable) is None
        # and model_fields_set contains the field
        if self.result_place is None and "result_place" in self.model_fields_set:
            _dict["resultPlace"] = None

        # set to None if result_secondary_score_place (nullable) is None
        # and model_fields_set contains the field
        if self.result_secondary_score_place is None and "result_secondary_score_place" in self.model_fields_set:
            _dict["resultSecondaryScorePlace"] = None

        # set to None if starting_number (nullable) is None
        # and model_fields_set contains the field
        if self.starting_number is None and "starting_number" in self.model_fields_set:
            _dict["startingNumber"] = None

        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict["score"] = None

        # set to None if secondary_score (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_score is None and "secondary_score" in self.model_fields_set:
            _dict["secondaryScore"] = None

        # set to None if uniform_id (nullable) is None
        # and model_fields_set contains the field
        if self.uniform_id is None and "uniform_id" in self.model_fields_set:
            _dict["uniformId"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FixturePersonsPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "fixtureId": obj.get("fixtureId"),
                "personId": obj.get("personId"),
                "entityGroupId": obj.get("entityGroupId"),
                "isHome": obj.get("isHome"),
                "draw": obj.get("draw"),
                "resultStatus": obj.get("resultStatus"),
                "resultPlace": obj.get("resultPlace"),
                "resultSecondaryScorePlace": obj.get("resultSecondaryScorePlace"),
                "startingNumber": obj.get("startingNumber"),
                "score": obj.get("score"),
                "secondaryScore": obj.get("secondaryScore"),
                "isNeutralVenue": obj.get("isNeutralVenue"),
                "includeInRepresentation": obj.get("includeInRepresentation")
                if obj.get("includeInRepresentation") is not None
                else True,
                "uniformId": obj.get("uniformId"),
                "externalId": obj.get("externalId"),
            }
        )
        return _obj
