# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_entities_model_entity import FixtureEntitiesModelEntity
from atriumsports.datacore.openapi.models.fixture_pbp_event_model_organization import FixturePbpEventModelOrganization
from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from atriumsports.datacore.openapi.models.fixture_progressions_model_fixture import FixtureProgressionsModelFixture
from typing import Optional, Set
from typing_extensions import Self


class FixturePbpEventModel(BaseModel):
    """
    FixturePbpEventModel
    """  # noqa: E501

    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[FixturePbpEventModelOrganization] = None
    fixture_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the fixture", alias="fixtureId"
    )
    fixture: Optional[FixtureProgressionsModelFixture] = None
    period_id: Optional[StrictInt] = Field(default=None, description="The identifier for the period", alias="periodId")
    section: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The section of the period (sub-period)"
    )
    events: Optional[Any] = None
    var_class: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default="sport",
        description="The class of the event >- `clock` Information about the current status of the clock fixture >- `sport` A sporting action that relates to the running of the fixture ",
        alias="class",
    )
    event_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="See [Event Types](http://developer.connect.sportradar.com/datacore/streaming.html#section/Message-Types/event) for more information",
        alias="eventType",
    )
    event_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this event", alias="eventId")
    play_id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier of this play (group of events)", alias="playId"
    )
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity", alias="entityId"
    )
    entity: Optional[FixtureEntitiesModelEntity] = None
    person_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the person", alias="personId"
    )
    person: Optional[FixturePersonsModelPerson] = None
    sub_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The Sub Type of event. See <b>Streaming API</b> documenation for more information.",
        alias="subType",
    )
    options: Optional[Any] = None
    received: Optional[StrictInt] = Field(default=None, description="The UNIX timestamp when the event was received.")
    status: Optional[StrictStr] = Field(
        default=None,
        description="The status of this message.  Options are `added` (Default); `updated` - meaning the content of this event has been edited; `deleted` - meaning this event has been deleted; `enriched` - meaning further information has been added to the event (not changed).",
    )
    success: Optional[StrictBool] = Field(default=None, description="Whether the action was successful")
    x: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The x co-ordinate of the event. Represented as percentage from left (0) to right (100).",
    )
    y: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The y co-ordinate of the event. Represented as precentage from top (0) to bottom (100).",
    )
    z: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The z co-ordinate of the event. Represented as precentage from ground (0) to ceiling (100).",
    )
    clock: Optional[StrictStr] = Field(
        default=None, description="The time on the clock when the event occurred. ISO 8601 format. PTmmMss.ccS"
    )
    shot_clock: Optional[StrictStr] = Field(
        default=None,
        description="The time on the shot clock when the event occurred. ISO 8601 format. PTss.ccS",
        alias="shotClock",
    )
    event_time: Optional[datetime] = Field(
        default=None,
        description="The date/time (UTC) this event occurred. For inserted actions, this should be the time the action would have occurred, not the time of insertion.",
        alias="eventTime",
    )
    official_id: Optional[StrictStr] = Field(
        default=None, description="The unique ID of the official making this decision", alias="officialId"
    )
    zone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None, description="See [Event Types]() for more information"
    )
    scores: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=50)]]] = Field(
        default=None, description="The current scores"
    )
    timestamp: Optional[datetime] = Field(default=None, description="The date/time (UTC) this event was sent.")
    client_type: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="Type of the client that sent the event", alias="clientType"
    )
    client_id: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="ID of the client that sent the event", alias="clientId"
    )
    sport: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(
        default=None, description="Sport one letter code"
    )
    topic: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="MQTT topic where the event was sent"
    )
    type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Type of the event message"
    )
    sequence: Optional[StrictInt] = Field(default=None, description="Client event sequence number")
    __properties: ClassVar[List[str]] = [
        "organizationId",
        "organization",
        "fixtureId",
        "fixture",
        "periodId",
        "section",
        "events",
        "class",
        "eventType",
        "eventId",
        "playId",
        "entityId",
        "entity",
        "personId",
        "person",
        "subType",
        "options",
        "received",
        "status",
        "success",
        "x",
        "y",
        "z",
        "clock",
        "shotClock",
        "eventTime",
        "officialId",
        "zone",
        "scores",
        "timestamp",
        "clientType",
        "clientId",
        "sport",
        "topic",
        "type",
        "sequence",
    ]

    @field_validator("var_class")
    def var_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["sport", "clock"]):
            raise ValueError("must be one of enum values ('sport', 'clock')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FixturePbpEventModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixture
        if self.fixture:
            _dict["fixture"] = self.fixture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict["entity"] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # set to None if events (nullable) is None
        # and model_fields_set contains the field
        if self.events is None and "events" in self.model_fields_set:
            _dict["events"] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict["options"] = None

        # set to None if scores (nullable) is None
        # and model_fields_set contains the field
        if self.scores is None and "scores" in self.model_fields_set:
            _dict["scores"] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict["sequence"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FixturePbpEventModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organizationId": obj.get("organizationId"),
                "organization": FixturePbpEventModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "fixtureId": obj.get("fixtureId"),
                "fixture": FixtureProgressionsModelFixture.from_dict(obj["fixture"])
                if obj.get("fixture") is not None
                else None,
                "periodId": obj.get("periodId"),
                "section": obj.get("section"),
                "events": obj.get("events"),
                "class": obj.get("class") if obj.get("class") is not None else "sport",
                "eventType": obj.get("eventType"),
                "eventId": obj.get("eventId"),
                "playId": obj.get("playId"),
                "entityId": obj.get("entityId"),
                "entity": FixtureEntitiesModelEntity.from_dict(obj["entity"])
                if obj.get("entity") is not None
                else None,
                "personId": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj["person"]) if obj.get("person") is not None else None,
                "subType": obj.get("subType"),
                "options": obj.get("options"),
                "received": obj.get("received"),
                "status": obj.get("status"),
                "success": obj.get("success"),
                "x": obj.get("x"),
                "y": obj.get("y"),
                "z": obj.get("z"),
                "clock": obj.get("clock"),
                "shotClock": obj.get("shotClock"),
                "eventTime": obj.get("eventTime"),
                "officialId": obj.get("officialId"),
                "zone": obj.get("zone"),
                "scores": obj.get("scores"),
                "timestamp": obj.get("timestamp"),
                "clientType": obj.get("clientType"),
                "clientId": obj.get("clientId"),
                "sport": obj.get("sport"),
                "topic": obj.get("topic"),
                "type": obj.get("type"),
                "sequence": obj.get("sequence"),
            }
        )
        return _obj
