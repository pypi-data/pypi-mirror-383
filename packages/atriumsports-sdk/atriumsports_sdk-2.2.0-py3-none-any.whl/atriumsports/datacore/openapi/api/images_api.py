# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.images_post_body import ImagesPostBody
from atriumsports.datacore.openapi.models.images_put_body import ImagesPutBody
from atriumsports.datacore.openapi.models.images_response import ImagesResponse

from atriumsports.datacore.openapi.api_client import ApiClient, RequestSerialized
from atriumsports.datacore.openapi.api_response import ApiResponse
from atriumsports.datacore.openapi.rest import RESTResponseType

logger = logging.getLogger("openapi")


class ImagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def images_delete(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Delete an image

        Delete an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_delete_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_delete: %s\n" % e)
            raise

    @validate_call
    def images_delete_with_http_info(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Delete an image

        Delete an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_delete_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_delete: %s\n" % e)
            raise

    @validate_call
    def images_delete_without_preload_content(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an image

        Delete an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_delete_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_delete: %s\n" % e)
            raise

    def _images_delete_serialize(
        self,
        image_id,
        organization_id,
        sport,
        external,
        fields,
        force_delete,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if image_id is not None:
            _path_params["imageId"] = image_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if force_delete is not None:
            _query_params.append(("forceDelete", force_delete))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/{sport}/o/{organizationId}/images/{imageId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_detail(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get an image

        Return detailed information about a specific image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_detail_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_detail: %s\n" % e)
            raise

    @validate_call
    def images_detail_with_http_info(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get an image

        Return detailed information about a specific image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_detail_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_detail: %s\n" % e)
            raise

    @validate_call
    def images_detail_without_preload_content(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an image

        Return detailed information about a specific image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_detail_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_detail: %s\n" % e)
            raise

    def _images_detail_serialize(
        self,
        image_id,
        organization_id,
        sport,
        external,
        fields,
        hide_null,
        include,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if image_id is not None:
            _path_params["imageId"] = image_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/{imageId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_for_fixture_list(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images for a fixture

        Return a list of images for the fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_for_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_for_fixture_list: %s\n" % e)
            raise

    @validate_call
    def images_for_fixture_list_with_http_info(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images for a fixture

        Return a list of images for the fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_for_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_for_fixture_list: %s\n" % e)
            raise

    @validate_call
    def images_for_fixture_list_without_preload_content(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images for a fixture

        Return a list of images for the fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Base Type. Multiple allowed (comma-delimited). >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type. Multiple allowed (comma-delimited). >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_for_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_for_fixture_list: %s\n" % e)
            raise

    def _images_for_fixture_list_serialize(
        self,
        fixture_id,
        organization_id,
        sport,
        added,
        base_type,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if fixture_id is not None:
            _path_params["fixtureId"] = fixture_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if base_type is not None:
            _query_params.append(("baseType", base_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/FIXTURE/{fixtureId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image

         You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert: %s\n" % e)
            raise

    @validate_call
    def images_insert_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image

         You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert: %s\n" % e)
            raise

    @validate_call
    def images_insert_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image

         You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert: %s\n" % e)
            raise

    def _images_insert_serialize(
        self,
        base_id,
        base_type,
        image_type,
        organization_id,
        sport,
        body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/octet-stream"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}/{imageType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert_from_url(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image from a URL

        This method allows a new image to uploaded by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_from_url_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image from a URL

        This method allows a new image to uploaded by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_from_url_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image from a URL

        This method allows a new image to uploaded by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_from_url: %s\n" % e)
            raise

    def _images_insert_from_url_serialize(
        self,
        base_id,
        base_type,
        image_type,
        organization_id,
        sport,
        images_post_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if images_post_body is not None:
            _body_params = images_post_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}/{imageType}/fromURL",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert_organization(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image for the organization

        Add a new image for the organization. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization: %s\n" % e)
            raise

    @validate_call
    def images_insert_organization_with_http_info(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image for the organization

        Add a new image for the organization. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization: %s\n" % e)
            raise

    @validate_call
    def images_insert_organization_without_preload_content(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image for the organization

        Add a new image for the organization. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            body=body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization: %s\n" % e)
            raise

    def _images_insert_organization_serialize(
        self,
        image_type,
        organization_id,
        sport,
        body,
        base_type,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if base_type is not None:
            _query_params.append(("baseType", base_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/octet-stream"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/ORGANIZATION/{imageType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert_organization_from_url(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image for the organization from a URL

        This method allows a new image to be uploaded against the organization type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_from_url_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_organization_from_url_with_http_info(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image for the organization from a URL

        This method allows a new image to be uploaded against the organization type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_from_url_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_organization_from_url_without_preload_content(
        self,
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image for the organization from a URL

        This method allows a new image to be uploaded against the organization type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_organization_from_url_serialize(
            image_type=image_type,
            organization_id=organization_id,
            sport=sport,
            images_post_body=images_post_body,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_organization_from_url: %s\n" % e)
            raise

    def _images_insert_organization_from_url_serialize(
        self,
        image_type,
        organization_id,
        sport,
        images_post_body,
        base_type,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if base_type is not None:
            _query_params.append(("baseType", base_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if images_post_body is not None:
            _body_params = images_post_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/ORGANIZATION/{imageType}/fromURL",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert_secondary(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image in a secondary type

        Add a new image for a type in a secondary type. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary: %s\n" % e)
            raise

    @validate_call
    def images_insert_secondary_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image in a secondary type

        Add a new image for a type in a secondary type. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary: %s\n" % e)
            raise

    @validate_call
    def images_insert_secondary_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        body: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image in a secondary type

        Add a new image for a type in a secondary type. You can upload the image in one of two ways:  - A binary blob in the POST data - A 'file' field in a multipart/form-data   **Binary Blob**  Upload the image by supplying the image as binary in the POST data.  The HTTP request would look like      POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD     Host: example.com     Authorization: Bearer some-token     Content-Length: 808     Content-Type: image/png      [file content goes there]   **Multi-part form**  Upload the image by supplying it as a 'file' field in a multipart form. The file field must be called `filedata` and the content-type must be set to `multipart/form-data`  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param body: (required)
        :type body: bytearray
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            body=body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary: %s\n" % e)
            raise

    def _images_insert_secondary_serialize(
        self,
        base_id,
        base_type,
        image_type,
        organization_id,
        secondary_id,
        secondary_type,
        sport,
        body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if secondary_id is not None:
            _path_params["secondaryId"] = secondary_id
        if secondary_type is not None:
            _path_params["secondaryType"] = secondary_type
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/octet-stream"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}/{imageType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_insert_secondary_from_url(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Upload a new image in a secondary type from a URL

        This method allows a new image to be uploaded against a secondary type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_secondary_from_url_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Upload a new image in a secondary type from a URL

        This method allows a new image to be uploaded against a secondary type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary_from_url: %s\n" % e)
            raise

    @validate_call
    def images_insert_secondary_from_url_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        image_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_post_body: ImagesPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new image in a secondary type from a URL

        This method allows a new image to be uploaded against a secondary type by providing a URL where the image can be downloaded from.  **Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type image_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_post_body: (required)
        :type images_post_body: ImagesPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_insert_secondary_from_url_serialize(
            base_id=base_id,
            base_type=base_type,
            image_type=image_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            images_post_body=images_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_insert_secondary_from_url: %s\n" % e)
            raise

    def _images_insert_secondary_from_url_serialize(
        self,
        base_id,
        base_type,
        image_type,
        organization_id,
        secondary_id,
        secondary_type,
        sport,
        images_post_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if image_type is not None:
            _path_params["imageType"] = image_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if secondary_id is not None:
            _path_params["secondaryId"] = secondary_id
        if secondary_type is not None:
            _path_params["secondaryType"] = secondary_type
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if images_post_body is not None:
            _body_params = images_post_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}/{imageType}/fromURL",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_list(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images

        Return a list of images for the type

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_serialize(
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list: %s\n" % e)
            raise

    @validate_call
    def images_list_with_http_info(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images

        Return a list of images for the type

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_serialize(
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list: %s\n" % e)
            raise

    @validate_call
    def images_list_without_preload_content(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images

        Return a list of images for the type

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_serialize(
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list: %s\n" % e)
            raise

    def _images_list_serialize(
        self,
        base_type,
        organization_id,
        sport,
        added,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_type is not None:
            _path_params["baseType"] = base_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_list_id(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images for a specific type and id

        Return a list of images for the type and id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id: %s\n" % e)
            raise

    @validate_call
    def images_list_id_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images for a specific type and id

        Return a list of images for the type and id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id: %s\n" % e)
            raise

    @validate_call
    def images_list_id_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images for a specific type and id

        Return a list of images for the type and id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id: %s\n" % e)
            raise

    def _images_list_id_serialize(
        self,
        base_id,
        base_type,
        organization_id,
        sport,
        added,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_list_id_secondary(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images for a specific base and secondary id

        Return a list of images for the base id for a secondary id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id_secondary: %s\n" % e)
            raise

    @validate_call
    def images_list_id_secondary_with_http_info(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images for a specific base and secondary id

        Return a list of images for the base id for a secondary id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id_secondary: %s\n" % e)
            raise

    @validate_call
    def images_list_id_secondary_without_preload_content(
        self,
        base_id: Annotated[
            StrictStr, Field(description="The unique identifier of the object associated with this record")
        ],
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images for a specific base and secondary id

        Return a list of images for the base id for a secondary id

        :param base_id: The unique identifier of the object associated with this record (required)
        :type base_id: str
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_id_secondary_serialize(
            base_id=base_id,
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_id_secondary: %s\n" % e)
            raise

    def _images_list_id_secondary_serialize(
        self,
        base_id,
        base_type,
        organization_id,
        secondary_id,
        secondary_type,
        sport,
        added,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_id is not None:
            _path_params["baseId"] = base_id
        if base_type is not None:
            _path_params["baseType"] = base_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if secondary_id is not None:
            _path_params["secondaryId"] = secondary_id
        if secondary_type is not None:
            _path_params["secondaryType"] = secondary_type
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_list_organization(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images for the Organization

        Return a list of images for the Organization

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_organization: %s\n" % e)
            raise

    @validate_call
    def images_list_organization_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images for the Organization

        Return a list of images for the Organization

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_organization: %s\n" % e)
            raise

    @validate_call
    def images_list_organization_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        base_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images for the Organization

        Return a list of images for the Organization

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type base_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            base_type=base_type,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_organization: %s\n" % e)
            raise

    def _images_list_organization_serialize(
        self,
        organization_id,
        sport,
        added,
        base_type,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if base_type is not None:
            _query_params.append(("baseType", base_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/ORGANIZATION",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_list_secondary(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Get a list of images for a type in a secondary Type

        Return a list of images assigned to type for a secondary type and Id

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_secondary_serialize(
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_secondary: %s\n" % e)
            raise

    @validate_call
    def images_list_secondary_with_http_info(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Get a list of images for a type in a secondary Type

        Return a list of images assigned to type for a secondary type and Id

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_secondary_serialize(
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_secondary: %s\n" % e)
            raise

    @validate_call
    def images_list_secondary_without_preload_content(
        self,
        base_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
            ),
        ],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        secondary_id: Annotated[
            StrictStr,
            Field(description="The unique identifier of the secondary object associated with this image record"),
        ],
        secondary_type: Annotated[
            str,
            Field(
                strict=True,
                max_length=100,
                description="Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season ",
            ),
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        image_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(
                description="Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item "
            ),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        rating: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown "),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of images for a type in a secondary Type

        Return a list of images assigned to type for a secondary type and Id

        :param base_type: Media Base Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item  (required)
        :type base_type: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param secondary_id: The unique identifier of the secondary object associated with this image record (required)
        :type secondary_id: str
        :param secondary_type: Media Secondary Type >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `SEASON` Season  (required)
        :type secondary_type: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param image_type: Upload Type >- `LOGO` Logo >- `LOGO_ALTERNATE` Logo - Alternate >- `LOGO_BACKGROUND` Logo Background >- `PERSON_HEAD` Head photo >- `PERSON_POSE` Posing photo >- `PERSON_WAIST` Waist and Head photo >- `TEAM_PHOTO` Team Photo >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item
        :type image_type: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param rating: Media Rating >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium >- `UNKNOWN` Uknown
        :type rating: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_list_secondary_serialize(
            base_type=base_type,
            organization_id=organization_id,
            secondary_id=secondary_id,
            secondary_type=secondary_type,
            sport=sport,
            added=added,
            external=external,
            fields=fields,
            hide_null=hide_null,
            image_type=image_type,
            include=include,
            limit=limit,
            offset=offset,
            rating=rating,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_list_secondary: %s\n" % e)
            raise

    def _images_list_secondary_serialize(
        self,
        base_type,
        organization_id,
        secondary_id,
        secondary_type,
        sport,
        added,
        external,
        fields,
        hide_null,
        image_type,
        include,
        limit,
        offset,
        rating,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if base_type is not None:
            _path_params["baseType"] = base_type
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if secondary_id is not None:
            _path_params["secondaryId"] = secondary_id
        if secondary_type is not None:
            _path_params["secondaryType"] = secondary_type
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if image_type is not None:
            _query_params.append(("imageType", image_type))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if rating is not None:
            _query_params.append(("rating", rating))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/images/for/{baseType}/in/{secondaryType}/{secondaryId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def images_update(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_put_body: ImagesPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesResponse:
        """Update the rating for an image

        Set the rating for an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_put_body: (required)
        :type images_put_body: ImagesPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_update_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            images_put_body=images_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_update: %s\n" % e)
            raise

    @validate_call
    def images_update_with_http_info(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_put_body: ImagesPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesResponse]:
        """Update the rating for an image

        Set the rating for an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_put_body: (required)
        :type images_put_body: ImagesPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_update_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            images_put_body=images_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_update: %s\n" % e)
            raise

    @validate_call
    def images_update_without_preload_content(
        self,
        image_id: Annotated[StrictStr, Field(description="The unique identifier of the image record")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        images_put_body: ImagesPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the rating for an image

        Set the rating for an image

        :param image_id: The unique identifier of the image record (required)
        :type image_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param images_put_body: (required)
        :type images_put_body: ImagesPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._images_update_serialize(
            image_id=image_id,
            organization_id=organization_id,
            sport=sport,
            images_put_body=images_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagesResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ImagesApi->images_update: %s\n" % e)
            raise

    def _images_update_serialize(
        self,
        image_id,
        organization_id,
        sport,
        images_put_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if image_id is not None:
            _path_params["imageId"] = image_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if images_put_body is not None:
            _body_params = images_put_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/{sport}/o/{organizationId}/images/{imageId}/rating",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
