# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.season_entity_statistics_response import SeasonEntityStatisticsResponse
from atriumsports.datacore.openapi.models.season_person_statistics_periods_response import (
    SeasonPersonStatisticsPeriodsResponse,
)
from atriumsports.datacore.openapi.models.season_person_statistics_response import SeasonPersonStatisticsResponse
from atriumsports.datacore.openapi.models.season_person_total_statistics_response import (
    SeasonPersonTotalStatisticsResponse,
)

from atriumsports.datacore.openapi.api_client import ApiClient, RequestSerialized
from atriumsports.datacore.openapi.api_response import ApiResponse
from atriumsports.datacore.openapi.rest import RESTResponseType

logger = logging.getLogger("openapi")


class SeasonStatisticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def pss_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonPersonStatisticsResponse:
        """Person season statistics

        Return a list of person statistics for all seasons

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._pss_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->pss_list: %s\n" % e)
            raise

    @validate_call
    def pss_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonPersonStatisticsResponse]:
        """Person season statistics

        Return a list of person statistics for all seasons

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._pss_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->pss_list: %s\n" % e)
            raise

    @validate_call
    def pss_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Person season statistics

        Return a list of person statistics for all seasons

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._pss_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->pss_list: %s\n" % e)
            raise

    def _pss_list_serialize(
        self,
        organization_id,
        person_id,
        sport,
        age_group,
        competition_id,
        external,
        fields,
        fixture_type,
        hide_null,
        include,
        limit,
        offset,
        representation,
        season_id,
        season_type,
        standard,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if person_id is not None:
            _path_params["personId"] = person_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if age_group is not None:
            _query_params.append(("ageGroup", age_group))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if representation is not None:
            _query_params.append(("representation", representation))

        if season_id is not None:
            _query_params.append(("seasonId", season_id))

        if season_type is not None:
            _query_params.append(("seasonType", season_type))

        if standard is not None:
            _query_params.append(("standard", standard))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/person/{personId}/in/seasons",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def psts_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonPersonTotalStatisticsResponse:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a season.     If a person plays for multiple entities in a season then their statistics are normally     separated out by entity.     For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._psts_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->psts_list: %s\n" % e)
            raise

    @validate_call
    def psts_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonPersonTotalStatisticsResponse]:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a season.     If a person plays for multiple entities in a season then their statistics are normally     separated out by entity.     For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._psts_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->psts_list: %s\n" % e)
            raise

    @validate_call
    def psts_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        person_id: Annotated[StrictStr, Field(description="The unique identifier of the person")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a season.     If a person plays for multiple entities in a season then their statistics are normally     separated out by entity.     For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param person_id: The unique identifier of the person (required)
        :type person_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._psts_list_serialize(
            organization_id=organization_id,
            person_id=person_id,
            sport=sport,
            age_group=age_group,
            competition_id=competition_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            representation=representation,
            season_id=season_id,
            season_type=season_type,
            standard=standard,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->psts_list: %s\n" % e)
            raise

    def _psts_list_serialize(
        self,
        organization_id,
        person_id,
        sport,
        age_group,
        competition_id,
        external,
        fields,
        fixture_type,
        hide_null,
        include,
        limit,
        offset,
        representation,
        season_id,
        season_type,
        standard,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if person_id is not None:
            _path_params["personId"] = person_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if age_group is not None:
            _query_params.append(("ageGroup", age_group))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if representation is not None:
            _query_params.append(("representation", representation))

        if season_id is not None:
            _query_params.append(("seasonId", season_id))

        if season_type is not None:
            _query_params.append(("seasonType", season_type))

        if standard is not None:
            _query_params.append(("standard", standard))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/person/{personId}/in/seasons/combined",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def ses_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonEntityStatisticsResponse:
        """Entity statistics

        Return a list of entity statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_list: %s\n" % e)
            raise

    @validate_call
    def ses_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonEntityStatisticsResponse]:
        """Entity statistics

        Return a list of entity statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_list: %s\n" % e)
            raise

    @validate_call
    def ses_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Entity statistics

        Return a list of entity statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_list: %s\n" % e)
            raise

    def _ses_list_serialize(
        self,
        organization_id,
        season_id,
        sport,
        entity_id,
        external,
        fields,
        fixture_type,
        from_time_utc,
        hide_null,
        home_away,
        include,
        limit,
        offset,
        pool_code,
        round_code,
        round_number,
        stage_code,
        to_time_utc,
        win_loss,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if home_away is not None:
            _query_params.append(("homeAway", home_away))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if pool_code is not None:
            _query_params.append(("poolCode", pool_code))

        if round_code is not None:
            _query_params.append(("roundCode", round_code))

        if round_number is not None:
            _query_params.append(("roundNumber", round_number))

        if stage_code is not None:
            _query_params.append(("stageCode", stage_code))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if win_loss is not None:
            _query_params.append(("winLoss", win_loss))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/entity/in/seasons/{seasonId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def ses_listperiods(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonEntityStatisticsResponse:
        """Entity statistics by period

        Return a list of entity statistics for a season filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            period_id=period_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_listperiods: %s\n" % e)
            raise

    @validate_call
    def ses_listperiods_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonEntityStatisticsResponse]:
        """Entity statistics by period

        Return a list of entity statistics for a season filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            period_id=period_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_listperiods: %s\n" % e)
            raise

    @validate_call
    def ses_listperiods_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Entity statistics by period

        Return a list of entity statistics for a season filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ses_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            limit=limit,
            offset=offset,
            period_id=period_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonEntityStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->ses_listperiods: %s\n" % e)
            raise

    def _ses_listperiods_serialize(
        self,
        organization_id,
        season_id,
        sport,
        entity_id,
        external,
        fields,
        fixture_type,
        from_time_utc,
        hide_null,
        home_away,
        include,
        limit,
        offset,
        period_id,
        pool_code,
        round_code,
        round_number,
        section,
        stage_code,
        to_time_utc,
        win_loss,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if home_away is not None:
            _query_params.append(("homeAway", home_away))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if period_id is not None:
            _query_params.append(("periodId", period_id))

        if pool_code is not None:
            _query_params.append(("poolCode", pool_code))

        if round_code is not None:
            _query_params.append(("roundCode", round_code))

        if round_number is not None:
            _query_params.append(("roundNumber", round_number))

        if section is not None:
            _query_params.append(("section", section))

        if stage_code is not None:
            _query_params.append(("stageCode", stage_code))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if win_loss is not None:
            _query_params.append(("winLoss", win_loss))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/entity/in/seasons/{seasonId}/periods",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def sps_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonPersonStatisticsResponse:
        """Season person statistics

        Return a list of person statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sps_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->sps_list: %s\n" % e)
            raise

    @validate_call
    def sps_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonPersonStatisticsResponse]:
        """Season person statistics

        Return a list of person statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sps_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->sps_list: %s\n" % e)
            raise

    @validate_call
    def sps_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Season person statistics

        Return a list of person statistic totals for a season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sps_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->sps_list: %s\n" % e)
            raise

    def _sps_list_serialize(
        self,
        organization_id,
        season_id,
        sport,
        entity_id,
        external,
        fields,
        fixture_type,
        from_time_utc,
        hide_null,
        home_away,
        include,
        is_player,
        is_team_official,
        limit,
        offset,
        person_id,
        pool_code,
        round_code,
        round_number,
        stage_code,
        starter,
        to_time_utc,
        win_loss,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if home_away is not None:
            _query_params.append(("homeAway", home_away))

        if include is not None:
            _query_params.append(("include", include))

        if is_player is not None:
            _query_params.append(("isPlayer", is_player))

        if is_team_official is not None:
            _query_params.append(("isTeamOfficial", is_team_official))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if person_id is not None:
            _query_params.append(("personId", person_id))

        if pool_code is not None:
            _query_params.append(("poolCode", pool_code))

        if round_code is not None:
            _query_params.append(("roundCode", round_code))

        if round_number is not None:
            _query_params.append(("roundNumber", round_number))

        if stage_code is not None:
            _query_params.append(("stageCode", stage_code))

        if starter is not None:
            _query_params.append(("starter", starter))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if win_loss is not None:
            _query_params.append(("winLoss", win_loss))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/person/in/seasons/{seasonId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def spsp_listperiods(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonPersonStatisticsPeriodsResponse:
        """Person season statistics by period

        Return a list of person statistics for a season broken down and filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spsp_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            period_id=period_id,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsPeriodsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spsp_listperiods: %s\n" % e)
            raise

    @validate_call
    def spsp_listperiods_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonPersonStatisticsPeriodsResponse]:
        """Person season statistics by period

        Return a list of person statistics for a season broken down and filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spsp_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            period_id=period_id,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsPeriodsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spsp_listperiods: %s\n" % e)
            raise

    @validate_call
    def spsp_listperiods_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        period_id: Annotated[Optional[StrictInt], Field(description="The identifier for the period")] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        section: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The section of the period (sub-period)"),
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Person season statistics by period

        Return a list of person statistics for a season broken down and filterable by period.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param period_id: The identifier for the period
        :type period_id: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param section: The section of the period (sub-period)
        :type section: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spsp_listperiods_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            period_id=period_id,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            section=section,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonStatisticsPeriodsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spsp_listperiods: %s\n" % e)
            raise

    def _spsp_listperiods_serialize(
        self,
        organization_id,
        season_id,
        sport,
        entity_id,
        external,
        fields,
        fixture_type,
        from_time_local,
        from_time_utc,
        hide_null,
        home_away,
        include,
        is_player,
        is_team_official,
        limit,
        offset,
        period_id,
        person_id,
        pool_code,
        round_code,
        round_number,
        section,
        stage_code,
        starter,
        to_time_local,
        to_time_utc,
        win_loss,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if from_time_local is not None:
            if isinstance(from_time_local, datetime):
                _query_params.append(
                    ("fromTimeLocal", from_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeLocal", from_time_local))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if home_away is not None:
            _query_params.append(("homeAway", home_away))

        if include is not None:
            _query_params.append(("include", include))

        if is_player is not None:
            _query_params.append(("isPlayer", is_player))

        if is_team_official is not None:
            _query_params.append(("isTeamOfficial", is_team_official))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if period_id is not None:
            _query_params.append(("periodId", period_id))

        if person_id is not None:
            _query_params.append(("personId", person_id))

        if pool_code is not None:
            _query_params.append(("poolCode", pool_code))

        if round_code is not None:
            _query_params.append(("roundCode", round_code))

        if round_number is not None:
            _query_params.append(("roundNumber", round_number))

        if section is not None:
            _query_params.append(("section", section))

        if stage_code is not None:
            _query_params.append(("stageCode", stage_code))

        if starter is not None:
            _query_params.append(("starter", starter))

        if to_time_local is not None:
            if isinstance(to_time_local, datetime):
                _query_params.append(
                    ("toTimeLocal", to_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("toTimeLocal", to_time_local))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if win_loss is not None:
            _query_params.append(("winLoss", win_loss))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/person/in/seasons/{seasonId}/periods",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def spts_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonPersonTotalStatisticsResponse:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a person over multiple seasons.     If a person plays for multiple entities in a season then their statistics are normally separated     out by entity. For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spts_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spts_list: %s\n" % e)
            raise

    @validate_call
    def spts_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonPersonTotalStatisticsResponse]:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a person over multiple seasons.     If a person plays for multiple entities in a season then their statistics are normally separated     out by entity. For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spts_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spts_list: %s\n" % e)
            raise

    @validate_call
    def spts_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular "
            ),
        ] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        home_away: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Where the result was >- `AWAY` Away >- `HOME` Home "),
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        is_player: Annotated[Optional[StrictBool], Field(description="Is the person a player?")] = None,
        is_team_official: Annotated[Optional[StrictBool], Field(description="Is the person a entity official?")] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        pool_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The pool identifier within a season"),
        ] = None,
        round_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The round identifier within a season"),
        ] = None,
        round_number: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="Round number")
        ] = None,
        stage_code: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="The stage identifier within a season"),
        ] = None,
        starter: Annotated[Optional[StrictBool], Field(description="Is the person a starter in the fixture ?")] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        win_loss: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Person season statistics - combined teams

             Return a list of person statistic totals for a person over multiple seasons.     If a person plays for multiple entities in a season then their statistics are normally separated     out by entity. For this call the statistics are combined - and hence entity data is not available.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_type: Type of Fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular
        :type fixture_type: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param home_away: Where the result was >- `AWAY` Away >- `HOME` Home
        :type home_away: str
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param is_player: Is the person a player?
        :type is_player: bool
        :param is_team_official: Is the person a entity official?
        :type is_team_official: bool
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param pool_code: The pool identifier within a season
        :type pool_code: str
        :param round_code: The round identifier within a season
        :type round_code: str
        :param round_number: Round number
        :type round_number: str
        :param stage_code: The stage identifier within a season
        :type stage_code: str
        :param starter: Is the person a starter in the fixture ?
        :type starter: bool
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param win_loss: What the result was >- `DRAW` Draw >- `LOSS` Loss >- `WIN` Win
        :type win_loss: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._spts_list_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_type=fixture_type,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            home_away=home_away,
            include=include,
            is_player=is_player,
            is_team_official=is_team_official,
            limit=limit,
            offset=offset,
            person_id=person_id,
            pool_code=pool_code,
            round_code=round_code,
            round_number=round_number,
            stage_code=stage_code,
            starter=starter,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            win_loss=win_loss,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonPersonTotalStatisticsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonStatisticsApi->spts_list: %s\n" % e)
            raise

    def _spts_list_serialize(
        self,
        organization_id,
        season_id,
        sport,
        entity_id,
        external,
        fields,
        fixture_type,
        from_time_local,
        from_time_utc,
        hide_null,
        home_away,
        include,
        is_player,
        is_team_official,
        limit,
        offset,
        person_id,
        pool_code,
        round_code,
        round_number,
        stage_code,
        starter,
        to_time_local,
        to_time_utc,
        win_loss,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_type is not None:
            _query_params.append(("fixtureType", fixture_type))

        if from_time_local is not None:
            if isinstance(from_time_local, datetime):
                _query_params.append(
                    ("fromTimeLocal", from_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeLocal", from_time_local))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if home_away is not None:
            _query_params.append(("homeAway", home_away))

        if include is not None:
            _query_params.append(("include", include))

        if is_player is not None:
            _query_params.append(("isPlayer", is_player))

        if is_team_official is not None:
            _query_params.append(("isTeamOfficial", is_team_official))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        if person_id is not None:
            _query_params.append(("personId", person_id))

        if pool_code is not None:
            _query_params.append(("poolCode", pool_code))

        if round_code is not None:
            _query_params.append(("roundCode", round_code))

        if round_number is not None:
            _query_params.append(("roundNumber", round_number))

        if stage_code is not None:
            _query_params.append(("stageCode", stage_code))

        if starter is not None:
            _query_params.append(("starter", starter))

        if to_time_local is not None:
            if isinstance(to_time_local, datetime):
                _query_params.append(
                    ("toTimeLocal", to_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("toTimeLocal", to_time_local))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if win_loss is not None:
            _query_params.append(("winLoss", win_loss))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/statistics/for/person/in/seasons/{seasonId}/combined",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
