# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.video_stream_inputs_response import VideoStreamInputsResponse

from atriumsports.datacore.openapi.api_client import ApiClient, RequestSerialized
from atriumsports.datacore.openapi.api_response import ApiResponse
from atriumsports.datacore.openapi.rest import RESTResponseType

logger = logging.getLogger("openapi")


class VideoStreamInputsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def video_stream_inputs_fixture_list(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VideoStreamInputsResponse:
        """List available video inputs for a fixture

        Display the list of video inputs for a fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            feed_type=feed_type,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            source_number=source_number,
            updated=updated,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_fixture_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_fixture_list_with_http_info(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VideoStreamInputsResponse]:
        """List available video inputs for a fixture

        Display the list of video inputs for a fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            feed_type=feed_type,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            source_number=source_number,
            updated=updated,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_fixture_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_fixture_list_without_preload_content(
        self,
        fixture_id: Annotated[StrictStr, Field(description="The unique identifier of the fixture")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List available video inputs for a fixture

        Display the list of video inputs for a fixture

        :param fixture_id: The unique identifier of the fixture (required)
        :type fixture_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_fixture_list_serialize(
            fixture_id=fixture_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            external=external,
            feed_type=feed_type,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            source_number=source_number,
            updated=updated,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_fixture_list: %s\n" % e)
            raise

    def _video_stream_inputs_fixture_list_serialize(
        self,
        fixture_id,
        organization_id,
        sport,
        added,
        external,
        feed_type,
        fields,
        hide_null,
        include,
        limit,
        locale,
        offset,
        provider,
        source_number,
        updated,
        video_input_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if fixture_id is not None:
            _path_params["fixtureId"] = fixture_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if external is not None:
            _query_params.append(("external", external))

        if feed_type is not None:
            _query_params.append(("feedType", feed_type))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if locale is not None:
            _query_params.append(("locale", locale))

        if offset is not None:
            _query_params.append(("offset", offset))

        if provider is not None:
            _query_params.append(("provider", provider))

        if source_number is not None:
            _query_params.append(("sourceNumber", source_number))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        if video_input_id is not None:
            _query_params.append(("videoInputId", video_input_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/fixtures/{fixtureId}/video/streams/inputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def video_stream_inputs_list(
        self,
        master_venue_id: Annotated[StrictStr, Field(description="The unique identifier of the master venue")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VideoStreamInputsResponse:
        """List available video inputs for a master venue

        Display the list of video stream inputs for a master venue. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param master_venue_id: The unique identifier of the master venue (required)
        :type master_venue_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_list_serialize(
            master_venue_id=master_venue_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_list_with_http_info(
        self,
        master_venue_id: Annotated[StrictStr, Field(description="The unique identifier of the master venue")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VideoStreamInputsResponse]:
        """List available video inputs for a master venue

        Display the list of video stream inputs for a master venue. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param master_venue_id: The unique identifier of the master venue (required)
        :type master_venue_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_list_serialize(
            master_venue_id=master_venue_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_list_without_preload_content(
        self,
        master_venue_id: Annotated[StrictStr, Field(description="The unique identifier of the master venue")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List available video inputs for a master venue

        Display the list of video stream inputs for a master venue. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param master_venue_id: The unique identifier of the master venue (required)
        :type master_venue_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_list_serialize(
            master_venue_id=master_venue_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_list: %s\n" % e)
            raise

    def _video_stream_inputs_list_serialize(
        self,
        master_venue_id,
        sport,
        added,
        competition_id,
        external,
        feed_type,
        fields,
        fixture_id,
        from_time_local,
        from_time_utc,
        hide_null,
        include,
        limit,
        locale,
        offset,
        provider,
        season_id,
        source_number,
        to_time_local,
        to_time_utc,
        updated,
        venue_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if master_venue_id is not None:
            _path_params["masterVenueId"] = master_venue_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if external is not None:
            _query_params.append(("external", external))

        if feed_type is not None:
            _query_params.append(("feedType", feed_type))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_id is not None:
            _query_params.append(("fixtureId", fixture_id))

        if from_time_local is not None:
            if isinstance(from_time_local, datetime):
                _query_params.append(
                    ("fromTimeLocal", from_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeLocal", from_time_local))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if locale is not None:
            _query_params.append(("locale", locale))

        if offset is not None:
            _query_params.append(("offset", offset))

        if provider is not None:
            _query_params.append(("provider", provider))

        if season_id is not None:
            _query_params.append(("seasonId", season_id))

        if source_number is not None:
            _query_params.append(("sourceNumber", source_number))

        if to_time_local is not None:
            if isinstance(to_time_local, datetime):
                _query_params.append(
                    ("toTimeLocal", to_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("toTimeLocal", to_time_local))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        if venue_id is not None:
            _query_params.append(("venueId", venue_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/masterVenues/{masterVenueId}/video/streams/inputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def video_stream_inputs_org_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VideoStreamInputsResponse:
        """List available video inputs for an organization

        Display the list of video inputs for an organization. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_org_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_org_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_org_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VideoStreamInputsResponse]:
        """List available video inputs for an organization

        Display the list of video inputs for an organization. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_org_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_org_list: %s\n" % e)
            raise

    @validate_call
    def video_stream_inputs_org_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        feed_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary "
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        from_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) >= this value")
        ] = None,
        from_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) >= this value")
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        locale: Annotated[
            Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]],
            Field(description="The locale of the video"),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        provider: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=100)]],
            Field(description="The unique code for the video provider"),
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        source_number: Annotated[
            Optional[StrictInt], Field(description="Unique identifier for the video source")
        ] = None,
        to_time_local: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in local time) <= this value")
        ] = None,
        to_time_utc: Annotated[
            Optional[datetime], Field(description="Where fixture start time (in UTC) <= this value")
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the venue")] = None,
        video_input_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the video input record")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List available video inputs for an organization

        Display the list of video inputs for an organization. This will only display inputs for fixtures in the future and from 12 hours in the past that have not been completed/cancelled.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param feed_type: Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary
        :type feed_type: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param from_time_local: Where fixture start time (in local time) >= this value
        :type from_time_local: datetime
        :param from_time_utc: Where fixture start time (in UTC) >= this value
        :type from_time_utc: datetime
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param locale: The locale of the video
        :type locale: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param provider: The unique code for the video provider
        :type provider: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param source_number: Unique identifier for the video source
        :type source_number: int
        :param to_time_local: Where fixture start time (in local time) <= this value
        :type to_time_local: datetime
        :param to_time_utc: Where fixture start time (in UTC) <= this value
        :type to_time_utc: datetime
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param venue_id: The unique identifier of the venue
        :type venue_id: str
        :param video_input_id: The unique identifier of the video input record
        :type video_input_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._video_stream_inputs_org_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            external=external,
            feed_type=feed_type,
            fields=fields,
            fixture_id=fixture_id,
            from_time_local=from_time_local,
            from_time_utc=from_time_utc,
            hide_null=hide_null,
            include=include,
            limit=limit,
            locale=locale,
            offset=offset,
            provider=provider,
            season_id=season_id,
            source_number=source_number,
            to_time_local=to_time_local,
            to_time_utc=to_time_utc,
            updated=updated,
            venue_id=venue_id,
            video_input_id=video_input_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VideoStreamInputsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling VideoStreamInputsApi->video_stream_inputs_org_list: %s\n" % e)
            raise

    def _video_stream_inputs_org_list_serialize(
        self,
        organization_id,
        sport,
        added,
        competition_id,
        external,
        feed_type,
        fields,
        fixture_id,
        from_time_local,
        from_time_utc,
        hide_null,
        include,
        limit,
        locale,
        offset,
        provider,
        season_id,
        source_number,
        to_time_local,
        to_time_utc,
        updated,
        venue_id,
        video_input_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if external is not None:
            _query_params.append(("external", external))

        if feed_type is not None:
            _query_params.append(("feedType", feed_type))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_id is not None:
            _query_params.append(("fixtureId", fixture_id))

        if from_time_local is not None:
            if isinstance(from_time_local, datetime):
                _query_params.append(
                    ("fromTimeLocal", from_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeLocal", from_time_local))

        if from_time_utc is not None:
            if isinstance(from_time_utc, datetime):
                _query_params.append(
                    ("fromTimeUTC", from_time_utc.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("fromTimeUTC", from_time_utc))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if locale is not None:
            _query_params.append(("locale", locale))

        if offset is not None:
            _query_params.append(("offset", offset))

        if provider is not None:
            _query_params.append(("provider", provider))

        if season_id is not None:
            _query_params.append(("seasonId", season_id))

        if source_number is not None:
            _query_params.append(("sourceNumber", source_number))

        if to_time_local is not None:
            if isinstance(to_time_local, datetime):
                _query_params.append(
                    ("toTimeLocal", to_time_local.strftime(self.api_client.configuration.datetime_format))
                )
            else:
                _query_params.append(("toTimeLocal", to_time_local))

        if to_time_utc is not None:
            if isinstance(to_time_utc, datetime):
                _query_params.append(("toTimeUTC", to_time_utc.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("toTimeUTC", to_time_utc))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        if venue_id is not None:
            _query_params.append(("venueId", venue_id))

        if video_input_id is not None:
            _query_params.append(("videoInputId", video_input_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/video/streams/inputs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
