# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.season_post_body import SeasonPostBody
from atriumsports.datacore.openapi.models.season_put_body import SeasonPutBody
from atriumsports.datacore.openapi.models.seasons_response import SeasonsResponse

from atriumsports.datacore.openapi.api_client import ApiClient, RequestSerialized
from atriumsports.datacore.openapi.api_response import ApiResponse
from atriumsports.datacore.openapi.rest import RESTResponseType

logger = logging.getLogger("openapi")


class SeasonsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def season_delete(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Delete a season

        Delete a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_delete_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_delete: %s\n" % e)
            raise

    @validate_call
    def season_delete_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Delete a season

        Delete a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_delete_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_delete: %s\n" % e)
            raise

    @validate_call
    def season_delete_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a season

        Delete a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_delete_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_delete: %s\n" % e)
            raise

    def _season_delete_serialize(
        self,
        organization_id,
        season_id,
        sport,
        external,
        fields,
        force_delete,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if force_delete is not None:
            _query_params.append(("forceDelete", force_delete))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/{sport}/o/{organizationId}/seasons/{seasonId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def season_detail(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Get a season

        Return detailed information about a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_detail_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_detail: %s\n" % e)
            raise

    @validate_call
    def season_detail_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Get a season

        Return detailed information about a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_detail_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_detail: %s\n" % e)
            raise

    @validate_call
    def season_detail_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a season

        Return detailed information about a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_detail_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_detail: %s\n" % e)
            raise

    def _season_detail_serialize(
        self,
        organization_id,
        season_id,
        sport,
        external,
        fields,
        hide_null,
        include,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/seasons/{seasonId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def season_insert(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_post_body: SeasonPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Create a new season

        Add a new season

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_post_body: (required)
        :type season_post_body: SeasonPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_insert_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            season_post_body=season_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_insert: %s\n" % e)
            raise

    @validate_call
    def season_insert_with_http_info(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_post_body: SeasonPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Create a new season

        Add a new season

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_post_body: (required)
        :type season_post_body: SeasonPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_insert_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            season_post_body=season_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_insert: %s\n" % e)
            raise

    @validate_call
    def season_insert_without_preload_content(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_post_body: SeasonPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new season

        Add a new season

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_post_body: (required)
        :type season_post_body: SeasonPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_insert_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            season_post_body=season_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_insert: %s\n" % e)
            raise

    def _season_insert_serialize(
        self,
        competition_id,
        organization_id,
        sport,
        season_post_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if competition_id is not None:
            _path_params["competitionId"] = competition_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if season_post_body is not None:
            _body_params = season_post_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/competitions/{competitionId}/seasons",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def season_list(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Get a list of seasons

        Return a list of seasons in the competition.

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list: %s\n" % e)
            raise

    @validate_call
    def season_list_with_http_info(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Get a list of seasons

        Return a list of seasons in the competition.

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list: %s\n" % e)
            raise

    @validate_call
    def season_list_without_preload_content(
        self,
        competition_id: Annotated[StrictStr, Field(description="The unique identifier of the competition")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of seasons

        Return a list of seasons in the competition.

        :param competition_id: The unique identifier of the competition (required)
        :type competition_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_serialize(
            competition_id=competition_id,
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list: %s\n" % e)
            raise

    def _season_list_serialize(
        self,
        competition_id,
        organization_id,
        sport,
        added,
        age_group,
        discipline,
        end_date,
        event_type,
        external,
        fields,
        gender,
        hide_null,
        include,
        limit,
        name_latin_contains,
        name_local_contains,
        offset,
        representation,
        season_type,
        sort_by,
        standard,
        start_date,
        status,
        updated,
        video_production,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if competition_id is not None:
            _path_params["competitionId"] = competition_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if age_group is not None:
            _query_params.append(("ageGroup", age_group))

        if discipline is not None:
            _query_params.append(("discipline", discipline))

        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(("endDate", end_date.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("endDate", end_date))

        if event_type is not None:
            _query_params.append(("eventType", event_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if gender is not None:
            _query_params.append(("gender", gender))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if name_latin_contains is not None:
            _query_params.append(("nameLatinContains", name_latin_contains))

        if name_local_contains is not None:
            _query_params.append(("nameLocalContains", name_local_contains))

        if offset is not None:
            _query_params.append(("offset", offset))

        if representation is not None:
            _query_params.append(("representation", representation))

        if season_type is not None:
            _query_params.append(("seasonType", season_type))

        if sort_by is not None:
            _query_params.append(("sortBy", sort_by))

        if standard is not None:
            _query_params.append(("standard", standard))

        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(("startDate", start_date.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("startDate", start_date))

        if status is not None:
            _query_params.append(("status", status))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        if video_production is not None:
            _query_params.append(("videoProduction", video_production))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/competitions/{competitionId}/seasons",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def season_list_by_organization(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Get a list of seasons for an organization

        Return a list of seasons in an organization.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_by_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            competition_id=competition_id,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list_by_organization: %s\n" % e)
            raise

    @validate_call
    def season_list_by_organization_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Get a list of seasons for an organization

        Return a list of seasons in an organization.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_by_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            competition_id=competition_id,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list_by_organization: %s\n" % e)
            raise

    @validate_call
    def season_list_by_organization_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        age_group: Annotated[
            Optional[StrictStr],
            Field(
                description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth "
            ),
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        discipline: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(
                description="The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey "
            ),
        ] = None,
        end_date: Annotated[Optional[date], Field(description="endDate on or before this date")] = None,
        event_type: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=30)]],
            Field(description="Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice "),
        ] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        gender: Annotated[
            Optional[StrictStr],
            Field(
                description="The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match"
            ),
        ] = None,
        name_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        representation: Annotated[
            Optional[StrictStr],
            Field(
                description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person "
            ),
        ] = None,
        season_type: Annotated[
            Optional[StrictStr],
            Field(
                description="The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament "
            ),
        ] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        standard: Annotated[
            Optional[StrictStr],
            Field(
                description="The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship "
            ),
        ] = None,
        start_date: Annotated[Optional[date], Field(description="startDate on or after this date")] = None,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        video_production: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(
                description="Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None "
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of seasons for an organization

        Return a list of seasons in an organization.

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param age_group: The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth
        :type age_group: str
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param discipline: The discipline for a fixture >- `BEACH` Beach >- `HOCKEY5S` Hockey5s >- `INDOOR` Indoor >- `OUTDOOR` Outdoor >- `PARAHOCKEY` Para hockey
        :type discipline: str
        :param end_date: endDate on or before this date
        :type end_date: date
        :param event_type: Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice
        :type event_type: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param gender: The gender of the season or entity >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown
        :type gender: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLatin=David Johnson nameLatinContains=Dav will match nameLatinContains=John will match nameLatinContains=son will not match
        :type name_latin_contains: str
        :param name_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameLocal=David Johnson nameLocalContains=Dav will match nameLocalContains=John will match nameLocalContains=son will not match
        :type name_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param representation: What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person
        :type representation: str
        :param season_type: The type of matches added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off match >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament
        :type season_type: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param standard: The playing standard of the season or entity >- `APPROVED_TEST_MATCHES` Approved Test matches >- `COMMONWEALTH_GAMES` Commonwealth Games >- `CONTINENTAL_CHAMPIONSHIP` Continental Championship >- `CONTINENTAL_CHAMPIONSHIP_DIV_2` Continental Championship Div 2 >- `CONTINENTAL_CHAMPIONSHIP_DIV_3` Continental Championship Div 3 >- `CONTINENTAL_CHAMPIONSHIP_DIV_4` Continental Championship Div 4 >- `CONTINENTAL_QUALIFIER` Continental Qualifier >- `ELITE` Professional/elite organisation >- `FIH_NATIONS_CUP` FIH Nations Cup >- `FIH_OLYMPIC_QUALIFIERS` FIH Olympic Qualifiers >- `FIH_PRO_LEAGUE` FIH Pro League >- `FIH_WORLD_CUP` FIH World Cup >- `FIH_WORLD_CUP_QUALIFIERS` FIH World Cup Qualifiers >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `HOCKEY_SERIES_OPEN` Hockey Series Open >- `INTERNATIONAL` International >- `INVITATIONAL_TOURNAMENT` Invitational Tournament (3+ teams) >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `OLYMPICS` Olympic Games >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `WORLD_LEAGUE` World League >- `ZONE_CHAMPIONSHIP` International Zone Championship
        :type standard: str
        :param start_date: startDate on or after this date
        :type start_date: date
        :param status: Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending
        :type status: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param video_production: Data synchronization strategy with video production systems. Multiple allowed (comma-delimited). >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None
        :type video_production: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_list_by_organization_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            age_group=age_group,
            competition_id=competition_id,
            discipline=discipline,
            end_date=end_date,
            event_type=event_type,
            external=external,
            fields=fields,
            gender=gender,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_latin_contains=name_latin_contains,
            name_local_contains=name_local_contains,
            offset=offset,
            representation=representation,
            season_type=season_type,
            sort_by=sort_by,
            standard=standard,
            start_date=start_date,
            status=status,
            updated=updated,
            video_production=video_production,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_list_by_organization: %s\n" % e)
            raise

    def _season_list_by_organization_serialize(
        self,
        organization_id,
        sport,
        added,
        age_group,
        competition_id,
        discipline,
        end_date,
        event_type,
        external,
        fields,
        gender,
        hide_null,
        include,
        limit,
        name_latin_contains,
        name_local_contains,
        offset,
        representation,
        season_type,
        sort_by,
        standard,
        start_date,
        status,
        updated,
        video_production,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if age_group is not None:
            _query_params.append(("ageGroup", age_group))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if discipline is not None:
            _query_params.append(("discipline", discipline))

        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(("endDate", end_date.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("endDate", end_date))

        if event_type is not None:
            _query_params.append(("eventType", event_type))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if gender is not None:
            _query_params.append(("gender", gender))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if name_latin_contains is not None:
            _query_params.append(("nameLatinContains", name_latin_contains))

        if name_local_contains is not None:
            _query_params.append(("nameLocalContains", name_local_contains))

        if offset is not None:
            _query_params.append(("offset", offset))

        if representation is not None:
            _query_params.append(("representation", representation))

        if season_type is not None:
            _query_params.append(("seasonType", season_type))

        if sort_by is not None:
            _query_params.append(("sortBy", sort_by))

        if standard is not None:
            _query_params.append(("standard", standard))

        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(("startDate", start_date.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("startDate", start_date))

        if status is not None:
            _query_params.append(("status", status))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        if video_production is not None:
            _query_params.append(("videoProduction", video_production))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/seasons",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def season_update(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_put_body: SeasonPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeasonsResponse:
        """Update a season

        Change the information of a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_put_body: (required)
        :type season_put_body: SeasonPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_update_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            season_put_body=season_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_update: %s\n" % e)
            raise

    @validate_call
    def season_update_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_put_body: SeasonPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeasonsResponse]:
        """Update a season

        Change the information of a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_put_body: (required)
        :type season_put_body: SeasonPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_update_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            season_put_body=season_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_update: %s\n" % e)
            raise

    @validate_call
    def season_update_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        season_id: Annotated[StrictStr, Field(description="The unique identifier of the season")],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        season_put_body: SeasonPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a season

        Change the information of a specific season

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param season_id: The unique identifier of the season (required)
        :type season_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param season_put_body: (required)
        :type season_put_body: SeasonPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._season_update_serialize(
            organization_id=organization_id,
            season_id=season_id,
            sport=sport,
            season_put_body=season_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SeasonsResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling SeasonsApi->season_update: %s\n" % e)
            raise

    def _season_update_serialize(
        self,
        organization_id,
        season_id,
        sport,
        season_put_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if season_id is not None:
            _path_params["seasonId"] = season_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if season_put_body is not None:
            _body_params = season_put_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/{sport}/o/{organizationId}/seasons/{seasonId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
