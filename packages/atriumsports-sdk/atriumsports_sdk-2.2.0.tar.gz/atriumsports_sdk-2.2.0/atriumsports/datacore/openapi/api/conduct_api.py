# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.conduct_post_body import ConductPostBody
from atriumsports.datacore.openapi.models.conduct_put_body import ConductPutBody
from atriumsports.datacore.openapi.models.conduct_response import ConductResponse

from atriumsports.datacore.openapi.api_client import ApiClient, RequestSerialized
from atriumsports.datacore.openapi.api_response import ApiResponse
from atriumsports.datacore.openapi.rest import RESTResponseType

logger = logging.getLogger("openapi")


class ConductApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def conduct_delete(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConductResponse:
        """Delete a conduct

        Delete a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_delete_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_delete: %s\n" % e)
            raise

    @validate_call
    def conduct_delete_with_http_info(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConductResponse]:
        """Delete a conduct

        Delete a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_delete_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_delete: %s\n" % e)
            raise

    @validate_call
    def conduct_delete_without_preload_content(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        force_delete: Annotated[
            Optional[StrictBool],
            Field(
                description="Force a delete command to run and delete child records as well if there are existing records depending on the record."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a conduct

        Delete a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param force_delete: Force a delete command to run and delete child records as well if there are existing records depending on the record.
        :type force_delete: bool
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_delete_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            force_delete=force_delete,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_delete: %s\n" % e)
            raise

    def _conduct_delete_serialize(
        self,
        conduct_id,
        organization_id,
        sport,
        external,
        fields,
        force_delete,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conduct_id is not None:
            _path_params["conductId"] = conduct_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if force_delete is not None:
            _query_params.append(("forceDelete", force_delete))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/{sport}/o/{organizationId}/conduct/{conductId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def conduct_detail(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConductResponse:
        """Get a conduct

        Return detailed information about a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_detail_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_detail: %s\n" % e)
            raise

    @validate_call
    def conduct_detail_with_http_info(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConductResponse]:
        """Get a conduct

        Return detailed information about a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_detail_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_detail: %s\n" % e)
            raise

    @validate_call
    def conduct_detail_without_preload_content(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a conduct

        Return detailed information about a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_detail_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_detail: %s\n" % e)
            raise

    def _conduct_detail_serialize(
        self,
        conduct_id,
        organization_id,
        sport,
        external,
        fields,
        hide_null,
        include,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conduct_id is not None:
            _path_params["conductId"] = conduct_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if offset is not None:
            _query_params.append(("offset", offset))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/conduct/{conductId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def conduct_insert(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_post_body: ConductPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConductResponse:
        """Create a conduct

        Insert a new conduct

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_post_body: (required)
        :type conduct_post_body: ConductPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_insert_serialize(
            organization_id=organization_id,
            sport=sport,
            conduct_post_body=conduct_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_insert: %s\n" % e)
            raise

    @validate_call
    def conduct_insert_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_post_body: ConductPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConductResponse]:
        """Create a conduct

        Insert a new conduct

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_post_body: (required)
        :type conduct_post_body: ConductPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_insert_serialize(
            organization_id=organization_id,
            sport=sport,
            conduct_post_body=conduct_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_insert: %s\n" % e)
            raise

    @validate_call
    def conduct_insert_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_post_body: ConductPostBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a conduct

        Insert a new conduct

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_post_body: (required)
        :type conduct_post_body: ConductPostBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_insert_serialize(
            organization_id=organization_id,
            sport=sport,
            conduct_post_body=conduct_post_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_insert: %s\n" % e)
            raise

    def _conduct_insert_serialize(
        self,
        organization_id,
        sport,
        conduct_post_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if conduct_post_body is not None:
            _body_params = conduct_post_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/{sport}/o/{organizationId}/conduct",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def conduct_list(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        conduct_status: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(
                description="Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        conduct_type: Annotated[
            Optional[StrictStr],
            Field(
                description="Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct "
            ),
        ] = None,
        date_offence_local_end: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is before this value")
        ] = None,
        date_offence_local_start: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is after this value")
        ] = None,
        date_suspended_from_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom <= this value")
        ] = None,
        date_suspended_from_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom >= this value")
        ] = None,
        date_suspended_to_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo <= this value")
        ] = None,
        date_suspended_to_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo >= this value")
        ] = None,
        entity_group_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the entity group")
        ] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_family_latin_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family latin name starts with"),
        ] = None,
        name_family_local_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family local name starts with"),
        ] = None,
        name_full_latin: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person in latin characters"),
        ] = None,
        name_full_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match"
            ),
        ] = None,
        name_full_local: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person"),
        ] = None,
        name_full_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        person_ids: Annotated[
            Optional[StrictStr], Field(description="The unique identifiers of the persons (comma-delimited).")
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConductResponse:
        """Get a list of conduct

        Return a list of available conduct records

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param conduct_status: Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending
        :type conduct_status: str
        :param conduct_type: Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct
        :type conduct_type: str
        :param date_offence_local_end: Where dateOffenceLocal is before this value
        :type date_offence_local_end: datetime
        :param date_offence_local_start: Where dateOffenceLocal is after this value
        :type date_offence_local_start: datetime
        :param date_suspended_from_end: Where dateSuspendedFrom <= this value
        :type date_suspended_from_end: date
        :param date_suspended_from_start: Where dateSuspendedFrom >= this value
        :type date_suspended_from_start: date
        :param date_suspended_to_end: Where dateSuspendedTo <= this value
        :type date_suspended_to_end: date
        :param date_suspended_to_start: Where dateSuspendedTo >= this value
        :type date_suspended_to_start: date
        :param entity_group_id: The unique identifier of the entity group
        :type entity_group_id: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_family_latin_starts_with: Family latin name starts with
        :type name_family_latin_starts_with: str
        :param name_family_local_starts_with: Family local name starts with
        :type name_family_local_starts_with: str
        :param name_full_latin: The full name of the person in latin characters
        :type name_full_latin: str
        :param name_full_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match
        :type name_full_latin_contains: str
        :param name_full_local: The full name of the person
        :type name_full_local: str
        :param name_full_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match
        :type name_full_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param person_ids: The unique identifiers of the persons (comma-delimited).
        :type person_ids: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            conduct_status=conduct_status,
            conduct_type=conduct_type,
            date_offence_local_end=date_offence_local_end,
            date_offence_local_start=date_offence_local_start,
            date_suspended_from_end=date_suspended_from_end,
            date_suspended_from_start=date_suspended_from_start,
            date_suspended_to_end=date_suspended_to_end,
            date_suspended_to_start=date_suspended_to_start,
            entity_group_id=entity_group_id,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_id=fixture_id,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_family_latin_starts_with=name_family_latin_starts_with,
            name_family_local_starts_with=name_family_local_starts_with,
            name_full_latin=name_full_latin,
            name_full_latin_contains=name_full_latin_contains,
            name_full_local=name_full_local,
            name_full_local_contains=name_full_local_contains,
            offset=offset,
            person_id=person_id,
            person_ids=person_ids,
            season_id=season_id,
            sort_by=sort_by,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_list: %s\n" % e)
            raise

    @validate_call
    def conduct_list_with_http_info(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        conduct_status: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(
                description="Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        conduct_type: Annotated[
            Optional[StrictStr],
            Field(
                description="Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct "
            ),
        ] = None,
        date_offence_local_end: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is before this value")
        ] = None,
        date_offence_local_start: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is after this value")
        ] = None,
        date_suspended_from_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom <= this value")
        ] = None,
        date_suspended_from_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom >= this value")
        ] = None,
        date_suspended_to_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo <= this value")
        ] = None,
        date_suspended_to_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo >= this value")
        ] = None,
        entity_group_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the entity group")
        ] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_family_latin_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family latin name starts with"),
        ] = None,
        name_family_local_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family local name starts with"),
        ] = None,
        name_full_latin: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person in latin characters"),
        ] = None,
        name_full_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match"
            ),
        ] = None,
        name_full_local: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person"),
        ] = None,
        name_full_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        person_ids: Annotated[
            Optional[StrictStr], Field(description="The unique identifiers of the persons (comma-delimited).")
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConductResponse]:
        """Get a list of conduct

        Return a list of available conduct records

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param conduct_status: Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending
        :type conduct_status: str
        :param conduct_type: Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct
        :type conduct_type: str
        :param date_offence_local_end: Where dateOffenceLocal is before this value
        :type date_offence_local_end: datetime
        :param date_offence_local_start: Where dateOffenceLocal is after this value
        :type date_offence_local_start: datetime
        :param date_suspended_from_end: Where dateSuspendedFrom <= this value
        :type date_suspended_from_end: date
        :param date_suspended_from_start: Where dateSuspendedFrom >= this value
        :type date_suspended_from_start: date
        :param date_suspended_to_end: Where dateSuspendedTo <= this value
        :type date_suspended_to_end: date
        :param date_suspended_to_start: Where dateSuspendedTo >= this value
        :type date_suspended_to_start: date
        :param entity_group_id: The unique identifier of the entity group
        :type entity_group_id: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_family_latin_starts_with: Family latin name starts with
        :type name_family_latin_starts_with: str
        :param name_family_local_starts_with: Family local name starts with
        :type name_family_local_starts_with: str
        :param name_full_latin: The full name of the person in latin characters
        :type name_full_latin: str
        :param name_full_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match
        :type name_full_latin_contains: str
        :param name_full_local: The full name of the person
        :type name_full_local: str
        :param name_full_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match
        :type name_full_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param person_ids: The unique identifiers of the persons (comma-delimited).
        :type person_ids: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            conduct_status=conduct_status,
            conduct_type=conduct_type,
            date_offence_local_end=date_offence_local_end,
            date_offence_local_start=date_offence_local_start,
            date_suspended_from_end=date_suspended_from_end,
            date_suspended_from_start=date_suspended_from_start,
            date_suspended_to_end=date_suspended_to_end,
            date_suspended_to_start=date_suspended_to_start,
            entity_group_id=entity_group_id,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_id=fixture_id,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_family_latin_starts_with=name_family_latin_starts_with,
            name_family_local_starts_with=name_family_local_starts_with,
            name_full_latin=name_full_latin,
            name_full_latin_contains=name_full_latin_contains,
            name_full_local=name_full_local,
            name_full_local_contains=name_full_local_contains,
            offset=offset,
            person_id=person_id,
            person_ids=person_ids,
            season_id=season_id,
            sort_by=sort_by,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_list: %s\n" % e)
            raise

    @validate_call
    def conduct_list_without_preload_content(
        self,
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        added: Annotated[
            Optional[datetime], Field(description="Record was added after this date/time. In UTC.")
        ] = None,
        competition_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the competition")
        ] = None,
        conduct_status: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(
                description="Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending "
            ),
        ] = None,
        conduct_type: Annotated[
            Optional[StrictStr],
            Field(
                description="Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct "
            ),
        ] = None,
        date_offence_local_end: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is before this value")
        ] = None,
        date_offence_local_start: Annotated[
            Optional[datetime], Field(description="Where dateOffenceLocal is after this value")
        ] = None,
        date_suspended_from_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom <= this value")
        ] = None,
        date_suspended_from_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedFrom >= this value")
        ] = None,
        date_suspended_to_end: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo <= this value")
        ] = None,
        date_suspended_to_start: Annotated[
            Optional[date], Field(description="Where dateSuspendedTo >= this value")
        ] = None,
        entity_group_id: Annotated[
            Optional[StrictStr], Field(description="The unique identifier of the entity group")
        ] = None,
        entity_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the entity")] = None,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        fixture_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the fixture")] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]],
            Field(
                description="The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        name_family_latin_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family latin name starts with"),
        ] = None,
        name_family_local_starts_with: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="Family local name starts with"),
        ] = None,
        name_full_latin: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person in latin characters"),
        ] = None,
        name_full_latin_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match"
            ),
        ] = None,
        name_full_local: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=50)]],
            Field(description="The full name of the person"),
        ] = None,
        name_full_local_contains: Annotated[
            Optional[Annotated[str, Field(min_length=2, strict=True, max_length=50)]],
            Field(
                description="Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match"
            ),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information."
            ),
        ] = None,
        person_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the person")] = None,
        person_ids: Annotated[
            Optional[StrictStr], Field(description="The unique identifiers of the persons (comma-delimited).")
        ] = None,
        season_id: Annotated[Optional[StrictStr], Field(description="The unique identifier of the season")] = None,
        sort_by: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order."
            ),
        ] = None,
        updated: Annotated[
            Optional[datetime], Field(description="Record was modified after this date/time. In UTC.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of conduct

        Return a list of available conduct records

        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param added: Record was added after this date/time. In UTC.
        :type added: datetime
        :param competition_id: The unique identifier of the competition
        :type competition_id: str
        :param conduct_status: Conduct status. Multiple allowed (comma-delimited). >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending
        :type conduct_status: str
        :param conduct_type: Conduct type. Multiple allowed (comma-delimited). >- `CITATION` Citation >- `CONCUSSION` Concussion >- `CORRUPTION` Corruption >- `DOPING` Doping >- `FITNESS` Fitness >- `MATCH_FIXING` Match Fixing >- `MEDICAL` Medical >- `NA_REQUEST` National Association Request >- `SWEARING` Swearing >- `TOUCHLINE_SUSPENSION` Touchline Suspension >- `UNSPORTSMANLIKE_CONDUCT` Unsportsmanlike Conduct >- `VIOLENT_CONDUCT` Violent Conduct
        :type conduct_type: str
        :param date_offence_local_end: Where dateOffenceLocal is before this value
        :type date_offence_local_end: datetime
        :param date_offence_local_start: Where dateOffenceLocal is after this value
        :type date_offence_local_start: datetime
        :param date_suspended_from_end: Where dateSuspendedFrom <= this value
        :type date_suspended_from_end: date
        :param date_suspended_from_start: Where dateSuspendedFrom >= this value
        :type date_suspended_from_start: date
        :param date_suspended_to_end: Where dateSuspendedTo <= this value
        :type date_suspended_to_end: date
        :param date_suspended_to_start: Where dateSuspendedTo >= this value
        :type date_suspended_to_start: date
        :param entity_group_id: The unique identifier of the entity group
        :type entity_group_id: str
        :param entity_id: The unique identifier of the entity
        :type entity_id: str
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param fixture_id: The unique identifier of the fixture
        :type fixture_id: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param limit: The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.
        :type limit: int
        :param name_family_latin_starts_with: Family latin name starts with
        :type name_family_latin_starts_with: str
        :param name_family_local_starts_with: Family local name starts with
        :type name_family_local_starts_with: str
        :param name_full_latin: The full name of the person in latin characters
        :type name_full_latin: str
        :param name_full_latin_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLatin=David Johnson nameFullLatinContains=Dav will match nameFullLatinContains=John will match nameFullLatinContains=son will not match
        :type name_full_latin_contains: str
        :param name_full_local: The full name of the person
        :type name_full_local: str
        :param name_full_local_contains: Fields that allow a 'Contains' query string parameter search for words separated by a space, matching characters left to right. Example: nameFullLocal=David Johnson nameFullLocalContains=Dav will match nameFullLocalContains=John will match nameFullLocalContains=son will not match
        :type name_full_local_contains: str
        :param offset: The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.
        :type offset: int
        :param person_id: The unique identifier of the person
        :type person_id: str
        :param person_ids: The unique identifiers of the persons (comma-delimited).
        :type person_ids: str
        :param season_id: The unique identifier of the season
        :type season_id: str
        :param sort_by: Comma-delimited list of one or more fields to sort by. Each field can have '-' as prefix to sort in descending order and no prefix to sort in ascending order.
        :type sort_by: str
        :param updated: Record was modified after this date/time. In UTC.
        :type updated: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_list_serialize(
            organization_id=organization_id,
            sport=sport,
            added=added,
            competition_id=competition_id,
            conduct_status=conduct_status,
            conduct_type=conduct_type,
            date_offence_local_end=date_offence_local_end,
            date_offence_local_start=date_offence_local_start,
            date_suspended_from_end=date_suspended_from_end,
            date_suspended_from_start=date_suspended_from_start,
            date_suspended_to_end=date_suspended_to_end,
            date_suspended_to_start=date_suspended_to_start,
            entity_group_id=entity_group_id,
            entity_id=entity_id,
            external=external,
            fields=fields,
            fixture_id=fixture_id,
            hide_null=hide_null,
            include=include,
            limit=limit,
            name_family_latin_starts_with=name_family_latin_starts_with,
            name_family_local_starts_with=name_family_local_starts_with,
            name_full_latin=name_full_latin,
            name_full_latin_contains=name_full_latin_contains,
            name_full_local=name_full_local,
            name_full_local_contains=name_full_local_contains,
            offset=offset,
            person_id=person_id,
            person_ids=person_ids,
            season_id=season_id,
            sort_by=sort_by,
            updated=updated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_list: %s\n" % e)
            raise

    def _conduct_list_serialize(
        self,
        organization_id,
        sport,
        added,
        competition_id,
        conduct_status,
        conduct_type,
        date_offence_local_end,
        date_offence_local_start,
        date_suspended_from_end,
        date_suspended_from_start,
        date_suspended_to_end,
        date_suspended_to_start,
        entity_group_id,
        entity_id,
        external,
        fields,
        fixture_id,
        hide_null,
        include,
        limit,
        name_family_latin_starts_with,
        name_family_local_starts_with,
        name_full_latin,
        name_full_latin_contains,
        name_full_local,
        name_full_local_contains,
        offset,
        person_id,
        person_ids,
        season_id,
        sort_by,
        updated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if added is not None:
            if isinstance(added, datetime):
                _query_params.append(("added", added.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("added", added))

        if competition_id is not None:
            _query_params.append(("competitionId", competition_id))

        if conduct_status is not None:
            _query_params.append(("conductStatus", conduct_status))

        if conduct_type is not None:
            _query_params.append(("conductType", conduct_type))

        if date_offence_local_end is not None:
            if isinstance(date_offence_local_end, datetime):
                _query_params.append(
                    (
                        "dateOffenceLocalEnd",
                        date_offence_local_end.strftime(self.api_client.configuration.datetime_format),
                    )
                )
            else:
                _query_params.append(("dateOffenceLocalEnd", date_offence_local_end))

        if date_offence_local_start is not None:
            if isinstance(date_offence_local_start, datetime):
                _query_params.append(
                    (
                        "dateOffenceLocalStart",
                        date_offence_local_start.strftime(self.api_client.configuration.datetime_format),
                    )
                )
            else:
                _query_params.append(("dateOffenceLocalStart", date_offence_local_start))

        if date_suspended_from_end is not None:
            if isinstance(date_suspended_from_end, date):
                _query_params.append(
                    (
                        "dateSuspendedFromEnd",
                        date_suspended_from_end.strftime(self.api_client.configuration.date_format),
                    )
                )
            else:
                _query_params.append(("dateSuspendedFromEnd", date_suspended_from_end))

        if date_suspended_from_start is not None:
            if isinstance(date_suspended_from_start, date):
                _query_params.append(
                    (
                        "dateSuspendedFromStart",
                        date_suspended_from_start.strftime(self.api_client.configuration.date_format),
                    )
                )
            else:
                _query_params.append(("dateSuspendedFromStart", date_suspended_from_start))

        if date_suspended_to_end is not None:
            if isinstance(date_suspended_to_end, date):
                _query_params.append(
                    ("dateSuspendedToEnd", date_suspended_to_end.strftime(self.api_client.configuration.date_format))
                )
            else:
                _query_params.append(("dateSuspendedToEnd", date_suspended_to_end))

        if date_suspended_to_start is not None:
            if isinstance(date_suspended_to_start, date):
                _query_params.append(
                    (
                        "dateSuspendedToStart",
                        date_suspended_to_start.strftime(self.api_client.configuration.date_format),
                    )
                )
            else:
                _query_params.append(("dateSuspendedToStart", date_suspended_to_start))

        if entity_group_id is not None:
            _query_params.append(("entityGroupId", entity_group_id))

        if entity_id is not None:
            _query_params.append(("entityId", entity_id))

        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if fixture_id is not None:
            _query_params.append(("fixtureId", fixture_id))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        if limit is not None:
            _query_params.append(("limit", limit))

        if name_family_latin_starts_with is not None:
            _query_params.append(("nameFamilyLatinStartsWith", name_family_latin_starts_with))

        if name_family_local_starts_with is not None:
            _query_params.append(("nameFamilyLocalStartsWith", name_family_local_starts_with))

        if name_full_latin is not None:
            _query_params.append(("nameFullLatin", name_full_latin))

        if name_full_latin_contains is not None:
            _query_params.append(("nameFullLatinContains", name_full_latin_contains))

        if name_full_local is not None:
            _query_params.append(("nameFullLocal", name_full_local))

        if name_full_local_contains is not None:
            _query_params.append(("nameFullLocalContains", name_full_local_contains))

        if offset is not None:
            _query_params.append(("offset", offset))

        if person_id is not None:
            _query_params.append(("personId", person_id))

        if person_ids is not None:
            _query_params.append(("personIds", person_ids))

        if season_id is not None:
            _query_params.append(("seasonId", season_id))

        if sort_by is not None:
            _query_params.append(("sortBy", sort_by))

        if updated is not None:
            if isinstance(updated, datetime):
                _query_params.append(("updated", updated.strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(("updated", updated))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/{sport}/o/{organizationId}/conduct",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def conduct_update(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_put_body: ConductPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConductResponse:
        """Update a conduct

        Change the information of a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_put_body: (required)
        :type conduct_put_body: ConductPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_update_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            conduct_put_body=conduct_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            ).data
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_update: %s\n" % e)
            raise

    @validate_call
    def conduct_update_with_http_info(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_put_body: ConductPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConductResponse]:
        """Update a conduct

        Change the information of a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_put_body: (required)
        :type conduct_put_body: ConductPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_update_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            conduct_put_body=conduct_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            response_data.read()
            return self.api_client.response_deserialize(
                response_data=response_data,
                response_types_map=_response_types_map,
            )
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_update: %s\n" % e)
            raise

    @validate_call
    def conduct_update_without_preload_content(
        self,
        conduct_id: Annotated[StrictStr, Field(description="The unique identifier of the conduct")],
        organization_id: Annotated[
            str, Field(min_length=5, strict=True, max_length=5, description="The unique identifier of the organization")
        ],
        sport: Annotated[StrictStr, Field(description="Sport name")],
        conduct_put_body: ConductPutBody,
        external: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information."
            ),
        ] = None,
        fields: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information."
            ),
        ] = None,
        hide_null: Annotated[
            Optional[StrictBool], Field(description="Don't display data fields with null values or empty structures")
        ] = None,
        include: Annotated[
            Optional[StrictStr],
            Field(
                description="A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a conduct

        Change the information of a specific conduct

        :param conduct_id: The unique identifier of the conduct (required)
        :type conduct_id: str
        :param organization_id: The unique identifier of the organization (required)
        :type organization_id: str
        :param sport: Sport name (required)
        :type sport: str
        :param conduct_put_body: (required)
        :type conduct_put_body: ConductPutBody
        :param external: A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.
        :type external: str
        :param fields: A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.
        :type fields: str
        :param hide_null: Don't display data fields with null values or empty structures
        :type hide_null: bool
        :param include: A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._conduct_update_serialize(
            conduct_id=conduct_id,
            organization_id=organization_id,
            sport=sport,
            conduct_put_body=conduct_put_body,
            external=external,
            fields=fields,
            hide_null=hide_null,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ConductResponse",
        }
        try:
            response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
            return response_data.response
        except Exception as e:
            logger.error("Exception when calling ConductApi->conduct_update: %s\n" % e)
            raise

    def _conduct_update_serialize(
        self,
        conduct_id,
        organization_id,
        sport,
        conduct_put_body,
        external,
        fields,
        hide_null,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conduct_id is not None:
            _path_params["conductId"] = conduct_id
        if organization_id is not None:
            _path_params["organizationId"] = organization_id
        if sport is not None:
            _path_params["sport"] = sport
        # process the query parameters
        if external is not None:
            _query_params.append(("external", external))

        if fields is not None:
            _query_params.append(("fields", fields))

        if hide_null is not None:
            _query_params.append(("hideNull", hide_null))

        if include is not None:
            _query_params.append(("include", include))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if conduct_put_body is not None:
            _body_params = conduct_put_body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["OAuth2"]

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/{sport}/o/{organizationId}/conduct/{conductId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
