# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.season_post_body_promotion_relegation_rules_inner import (
    SeasonPostBodyPromotionRelegationRulesInner,
)
from atriumsports.datacore.openapi.models.seasonroster_configuration import SEASONROSTERConfiguration
from atriumsports.datacore.openapi.models.social_media import SocialMedia
from typing import Optional, Set
from typing_extensions import Self


class SeasonPostBody(BaseModel):
    """
    SeasonPostBody
    """  # noqa: E501

    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    competition_id: StrictStr = Field(description="The unique identifier of the competition", alias="competitionId")
    leader_criteria_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the ~LeaderCriteria~", alias="leaderCriteriaId"
    )
    international_reference: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="The international reference for this season given by the sport governing body",
        alias="internationalReference",
    )
    event_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default="FIXTURE",
        description="Primary Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice ",
        alias="eventType",
    )
    season_type: Annotated[str, Field(strict=True, max_length=30)] = Field(
        description="The type of fixtures added to this season >- `MULTI_YEAR_HISTORICAL` Mulit-Year Historical >- `ONE_OFF` One off >- `PRESEASON` Pre Season >- `SEASON` Season >- `TOURNAMENT` Tournament ",
        alias="seasonType",
    )
    year: Optional[Annotated[int, Field(strict=True)]] = Field(default=None, description="Year of the season")
    grade: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None, description="The playing grade of the fixtures in this season"
    )
    status: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="Status >- `ACTIVE` Active >- `COMPLETE` Complete >- `DRAFT` Draft >- `INACTIVE` Inactive >- `PENDING` Pending ",
    )
    include_in_statistics: Optional[StrictBool] = Field(
        default=True, description="Include this season in calculated statistics?", alias="includeInStatistics"
    )
    live_video_available: Optional[StrictBool] = Field(
        default=None,
        description="If no 'liveVideoAvailable' flag passed to a new fixture this value is used",
        alias="liveVideoAvailable",
    )
    live_data_available: Optional[StrictBool] = Field(
        default=None,
        description="If no 'liveDataAvailable' flag passed to a new fixture this value is used",
        alias="liveDataAvailable",
    )
    duration_full: Optional[StrictInt] = Field(
        default=None,
        description="If no 'durationFull' is passed to a new fixture this value is used",
        alias="durationFull",
    )
    discipline: Optional[StrictStr] = Field(
        default=None,
        description="If no 'discipline' is passed to a new fixture this value is used >- None None >- `INDOOR` Indoor >- `OUTDOOR` Outdoor ",
    )
    name_local: Annotated[str, Field(strict=True, max_length=150)] = Field(
        description="The name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    name_short_local: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="The abbreviated name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameShortLocal",
    )
    name_short_latin: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="The abbreviated name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameShortLatin",
    )
    start_date: date = Field(description="Season start date", alias="startDate")
    end_date: Optional[date] = Field(default=None, description="Season end date", alias="endDate")
    gender: Annotated[str, Field(strict=True, max_length=20)] = Field(
        description="The gender of the participants in the season >- `FEMALE` Female >- `MALE` Male >- `MIXED` Mixed >- `UNKNOWN` Unknown "
    )
    age_group: Annotated[str, Field(strict=True, max_length=50)] = Field(
        description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth ",
        alias="ageGroup",
    )
    standard: Annotated[str, Field(strict=True, max_length=50)] = Field(
        description="The playing standard of the season >- `ELITE` Professional/elite organisation >- `FRIENDLY` International Friendly >- `GRASS_ROOT` Normal >- `HISTORICAL_BASELINE` Historical Baseline >- `INTERNATIONAL` International >- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship >- `OLYMPIC` Olympics >- `REGION` Regional >- `TIER2` lesser standard than elite >- `TIER3` lesser standard than tier 2 >- `WORLD_CHAMPIONSHIP` World Championship >- `ZONE_CHAMPIONSHIP` International Zone Championship "
    )
    representation: Annotated[str, Field(strict=True, max_length=50)] = Field(
        description="What level are the competitors representing >- `CLUB` Club >- `COUNTRY` Country >- `PERSON` Person >- `REGION` Region >- `STATE` State "
    )
    standing_configuration_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique identifier of the ~standingConfiguration~",
        alias="standingConfigurationId",
    )
    lock_standings: Optional[StrictBool] = Field(
        default=None, description="Is the standings generation locked ?", alias="lockStandings"
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    social: Optional[SocialMedia] = None
    configuration: Optional[Dict[str, Any]] = Field(default=None, description="Season Configuration settings")
    profile_id: Optional[StrictStr] = Field(
        default=None, description="The profile that this season belongs to", alias="profileId"
    )
    video_production: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default="NONE",
        description="Data synchronization strategy with video production systems >- `AUTOMATED` Automated >- `MANUAL` Manual >- `NONE` None ",
        alias="videoProduction",
    )
    promotion_relegation_rules: Optional[List[SeasonPostBodyPromotionRelegationRulesInner]] = Field(
        default=None, alias="promotionRelegationRules"
    )
    roster_configuration: Optional[SEASONROSTERConfiguration] = Field(default=None, alias="rosterConfiguration")
    __properties: ClassVar[List[str]] = [
        "seasonId",
        "competitionId",
        "leaderCriteriaId",
        "internationalReference",
        "eventType",
        "seasonType",
        "year",
        "grade",
        "status",
        "includeInStatistics",
        "liveVideoAvailable",
        "liveDataAvailable",
        "durationFull",
        "discipline",
        "nameLocal",
        "nameLatin",
        "nameShortLocal",
        "nameShortLatin",
        "startDate",
        "endDate",
        "gender",
        "ageGroup",
        "standard",
        "representation",
        "standingConfigurationId",
        "lockStandings",
        "externalId",
        "social",
        "configuration",
        "profileId",
        "videoProduction",
        "promotionRelegationRules",
        "rosterConfiguration",
    ]

    @field_validator("event_type")
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["FIXTURE", "PRACTICE"]):
            raise ValueError("must be one of enum values ('FIXTURE', 'PRACTICE')")
        return value

    @field_validator("season_type")
    def season_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["SEASON", "TOURNAMENT", "ONE_OFF", "PRESEASON", "MULTI_YEAR_HISTORICAL"]):
            raise ValueError(
                "must be one of enum values ('SEASON', 'TOURNAMENT', 'ONE_OFF', 'PRESEASON', 'MULTI_YEAR_HISTORICAL')"
            )
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ACTIVE", "COMPLETE", "DRAFT", "INACTIVE", "PENDING"]):
            raise ValueError("must be one of enum values ('ACTIVE', 'COMPLETE', 'DRAFT', 'INACTIVE', 'PENDING')")
        return value

    @field_validator("discipline")
    def discipline_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["INDOOR", "OUTDOOR"]):
            raise ValueError("must be one of enum values ('INDOOR', 'OUTDOOR')")
        return value

    @field_validator("gender")
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["FEMALE", "MALE", "MIXED", "UNKNOWN"]):
            raise ValueError("must be one of enum values ('FEMALE', 'MALE', 'MIXED', 'UNKNOWN')")
        return value

    @field_validator("age_group")
    def age_group_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "JUNIOR",
                "YOUTH",
                "UNDER_15",
                "UNDER_16",
                "UNDER_17",
                "UNDER_18",
                "UNDER_19",
                "UNDER_20",
                "UNDER_21",
                "UNDER_22",
                "UNDER_23",
                "SENIOR",
                "MASTERS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('JUNIOR', 'YOUTH', 'UNDER_15', 'UNDER_16', 'UNDER_17', 'UNDER_18', 'UNDER_19', 'UNDER_20', 'UNDER_21', 'UNDER_22', 'UNDER_23', 'SENIOR', 'MASTERS')"
            )
        return value

    @field_validator("standard")
    def standard_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ELITE",
                "FRIENDLY",
                "GRASS_ROOT",
                "INTERNATIONAL",
                "NONCONTINENTAL_CHAMPIONSHIP",
                "OLYMPIC",
                "REGION",
                "TIER2",
                "TIER3",
                "WORLD_CHAMPIONSHIP",
                "ZONE_CHAMPIONSHIP",
                "HISTORICAL_BASELINE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ELITE', 'FRIENDLY', 'GRASS_ROOT', 'INTERNATIONAL', 'NONCONTINENTAL_CHAMPIONSHIP', 'OLYMPIC', 'REGION', 'TIER2', 'TIER3', 'WORLD_CHAMPIONSHIP', 'ZONE_CHAMPIONSHIP', 'HISTORICAL_BASELINE')"
            )
        return value

    @field_validator("representation")
    def representation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["CLUB", "STATE", "REGION", "COUNTRY", "PERSON"]):
            raise ValueError("must be one of enum values ('CLUB', 'STATE', 'REGION', 'COUNTRY', 'PERSON')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    @field_validator("video_production")
    def video_production_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NONE", "AUTOMATED", "MANUAL"]):
            raise ValueError("must be one of enum values ('NONE', 'AUTOMATED', 'MANUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of social
        if self.social:
            _dict["social"] = self.social.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotion_relegation_rules (list)
        _items = []
        if self.promotion_relegation_rules:
            for _item_promotion_relegation_rules in self.promotion_relegation_rules:
                if _item_promotion_relegation_rules:
                    _items.append(_item_promotion_relegation_rules.to_dict())
            _dict["promotionRelegationRules"] = _items
        # override the default output from pydantic by calling `to_dict()` of roster_configuration
        if self.roster_configuration:
            _dict["rosterConfiguration"] = self.roster_configuration.to_dict()
        # set to None if leader_criteria_id (nullable) is None
        # and model_fields_set contains the field
        if self.leader_criteria_id is None and "leader_criteria_id" in self.model_fields_set:
            _dict["leaderCriteriaId"] = None

        # set to None if international_reference (nullable) is None
        # and model_fields_set contains the field
        if self.international_reference is None and "international_reference" in self.model_fields_set:
            _dict["internationalReference"] = None

        # set to None if grade (nullable) is None
        # and model_fields_set contains the field
        if self.grade is None and "grade" in self.model_fields_set:
            _dict["grade"] = None

        # set to None if duration_full (nullable) is None
        # and model_fields_set contains the field
        if self.duration_full is None and "duration_full" in self.model_fields_set:
            _dict["durationFull"] = None

        # set to None if discipline (nullable) is None
        # and model_fields_set contains the field
        if self.discipline is None and "discipline" in self.model_fields_set:
            _dict["discipline"] = None

        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if name_short_local (nullable) is None
        # and model_fields_set contains the field
        if self.name_short_local is None and "name_short_local" in self.model_fields_set:
            _dict["nameShortLocal"] = None

        # set to None if name_short_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_short_latin is None and "name_short_latin" in self.model_fields_set:
            _dict["nameShortLatin"] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict["endDate"] = None

        # set to None if standing_configuration_id (nullable) is None
        # and model_fields_set contains the field
        if self.standing_configuration_id is None and "standing_configuration_id" in self.model_fields_set:
            _dict["standingConfigurationId"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        # set to None if social (nullable) is None
        # and model_fields_set contains the field
        if self.social is None and "social" in self.model_fields_set:
            _dict["social"] = None

        # set to None if configuration (nullable) is None
        # and model_fields_set contains the field
        if self.configuration is None and "configuration" in self.model_fields_set:
            _dict["configuration"] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict["profileId"] = None

        # set to None if promotion_relegation_rules (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_relegation_rules is None and "promotion_relegation_rules" in self.model_fields_set:
            _dict["promotionRelegationRules"] = None

        # set to None if roster_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.roster_configuration is None and "roster_configuration" in self.model_fields_set:
            _dict["rosterConfiguration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "seasonId": obj.get("seasonId"),
                "competitionId": obj.get("competitionId"),
                "leaderCriteriaId": obj.get("leaderCriteriaId"),
                "internationalReference": obj.get("internationalReference"),
                "eventType": obj.get("eventType") if obj.get("eventType") is not None else "FIXTURE",
                "seasonType": obj.get("seasonType"),
                "year": obj.get("year"),
                "grade": obj.get("grade"),
                "status": obj.get("status"),
                "includeInStatistics": obj.get("includeInStatistics")
                if obj.get("includeInStatistics") is not None
                else True,
                "liveVideoAvailable": obj.get("liveVideoAvailable"),
                "liveDataAvailable": obj.get("liveDataAvailable"),
                "durationFull": obj.get("durationFull"),
                "discipline": obj.get("discipline"),
                "nameLocal": obj.get("nameLocal"),
                "nameLatin": obj.get("nameLatin"),
                "nameShortLocal": obj.get("nameShortLocal"),
                "nameShortLatin": obj.get("nameShortLatin"),
                "startDate": obj.get("startDate"),
                "endDate": obj.get("endDate"),
                "gender": obj.get("gender"),
                "ageGroup": obj.get("ageGroup"),
                "standard": obj.get("standard"),
                "representation": obj.get("representation"),
                "standingConfigurationId": obj.get("standingConfigurationId"),
                "lockStandings": obj.get("lockStandings"),
                "externalId": obj.get("externalId"),
                "social": SocialMedia.from_dict(obj["social"]) if obj.get("social") is not None else None,
                "configuration": obj.get("configuration"),
                "profileId": obj.get("profileId"),
                "videoProduction": obj.get("videoProduction") if obj.get("videoProduction") is not None else "NONE",
                "promotionRelegationRules": [
                    SeasonPostBodyPromotionRelegationRulesInner.from_dict(_item)
                    for _item in obj["promotionRelegationRules"]
                ]
                if obj.get("promotionRelegationRules") is not None
                else None,
                "rosterConfiguration": SEASONROSTERConfiguration.from_dict(obj["rosterConfiguration"])
                if obj.get("rosterConfiguration") is not None
                else None,
            }
        )
        return _obj
