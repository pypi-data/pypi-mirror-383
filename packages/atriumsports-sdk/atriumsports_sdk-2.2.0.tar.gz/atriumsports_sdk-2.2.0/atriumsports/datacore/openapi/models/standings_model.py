# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_entities_model_conference import FixtureEntitiesModelConference
from atriumsports.datacore.openapi.models.fixture_entities_model_division import FixtureEntitiesModelDivision
from atriumsports.datacore.openapi.models.fixture_entities_model_entity import FixtureEntitiesModelEntity
from atriumsports.datacore.openapi.models.fixture_progressions_model_season import FixtureProgressionsModelSeason
from atriumsports.datacore.openapi.models.fixtures_model_round import FixturesModelRound
from atriumsports.datacore.openapi.models.season_fixture_stages_pools_list_model_pool import (
    SeasonFixtureStagesPoolsListModelPool,
)
from atriumsports.datacore.openapi.models.season_fixture_stages_pools_list_model_stage import (
    SeasonFixtureStagesPoolsListModelStage,
)
from atriumsports.datacore.openapi.models.seasons_model_standing_configuration import SeasonsModelStandingConfiguration
from atriumsports.datacore.openapi.models.standing_post_body_calculated_value import StandingPostBodyCalculatedValue
from atriumsports.datacore.openapi.models.standing_post_body_points_value import StandingPostBodyPointsValue
from atriumsports.datacore.openapi.models.standings_model_organization import StandingsModelOrganization
from typing import Optional, Set
from typing_extensions import Self


class StandingsModel(BaseModel):
    """
    StandingsModel
    """  # noqa: E501

    standing_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the standing", alias="standingId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[StandingsModelOrganization] = None
    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    season: Optional[FixtureProgressionsModelSeason] = None
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity", alias="entityId"
    )
    entity: Optional[FixtureEntitiesModelEntity] = None
    division_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the division", alias="divisionId"
    )
    division: Optional[FixtureEntitiesModelDivision] = None
    conference_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the conference", alias="conferenceId"
    )
    conference: Optional[FixtureEntitiesModelConference] = None
    latest: Optional[StrictBool] = Field(default=None, description="Standing is part of the latest round?")
    in_progress: Optional[StrictBool] = Field(
        default=None, description="Is the competitor in a current In-Progress fixture?", alias="inProgress"
    )
    live: Optional[StrictBool] = Field(default=None, description="Is this including live fixtures?")
    locked: Optional[StrictBool] = Field(default=None, description="Has the standing been locked (to prevent editing)?")
    grouping_base: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="Base grouping of standings row >- `OVERALL` Overall >- `ROUND` Round ",
        alias="groupingBase",
    )
    grouping_conference_division: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="Conference/Division grouping of standings row >- `CONFERENCE` Conference >- `DIVISION` Division >- `OVERALL` Overall ",
        alias="groupingConferenceDivision",
    )
    grouping_stage_pool: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="Stage/Pool grouping of standings row >- `OVERALL` Overall >- `STAGE` Stage >- `STAGEPOOL` Stage/Pool ",
        alias="groupingStagePool",
    )
    stage_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the stage. (Unique for season)", alias="stageCode"
    )
    stage: Optional[SeasonFixtureStagesPoolsListModelStage] = None
    pool_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the pool. (Unique for season)", alias="poolCode"
    )
    pool: Optional[SeasonFixtureStagesPoolsListModelPool] = None
    round_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the round. (Unique for season)", alias="roundCode"
    )
    round: Optional[FixturesModelRound] = None
    round_number: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="The number given to the round", alias="roundNumber"
    )
    standing_configuration_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique identifier of the ~standingConfiguration~",
        alias="standingConfigurationId",
    )
    standing_configuration: Optional[SeasonsModelStandingConfiguration] = Field(
        default=None, alias="standingConfiguration"
    )
    fixture_type: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="Type of fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular ",
        alias="fixtureType",
    )
    position: Optional[StrictInt] = Field(default=None, description="Position of the competitors standing record")
    secured_finals: Optional[StrictStr] = Field(
        default=None, description="Has competitor secured a finals position", alias="securedFinals"
    )
    points: Optional[Dict[str, StandingPostBodyPointsValue]] = Field(
        default=None, description="standings points fields"
    )
    calculated: Optional[Dict[str, StandingPostBodyCalculatedValue]] = Field(
        default=None, description="standings points fields"
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    auto_generated: Optional[StrictBool] = Field(
        default=None, description="Was this row auto generated?", alias="autoGenerated"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "standingId",
        "organizationId",
        "organization",
        "seasonId",
        "season",
        "entityId",
        "entity",
        "divisionId",
        "division",
        "conferenceId",
        "conference",
        "latest",
        "inProgress",
        "live",
        "locked",
        "groupingBase",
        "groupingConferenceDivision",
        "groupingStagePool",
        "stageCode",
        "stage",
        "poolCode",
        "pool",
        "roundCode",
        "round",
        "roundNumber",
        "standingConfigurationId",
        "standingConfiguration",
        "fixtureType",
        "position",
        "securedFinals",
        "points",
        "calculated",
        "externalId",
        "autoGenerated",
        "updated",
        "added",
    ]

    @field_validator("grouping_base")
    def grouping_base_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["OVERALL", "ROUND"]):
            raise ValueError("must be one of enum values ('OVERALL', 'ROUND')")
        return value

    @field_validator("grouping_conference_division")
    def grouping_conference_division_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["OVERALL", "CONFERENCE", "DIVISION"]):
            raise ValueError("must be one of enum values ('OVERALL', 'CONFERENCE', 'DIVISION')")
        return value

    @field_validator("grouping_stage_pool")
    def grouping_stage_pool_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["OVERALL", "STAGE", "STAGEPOOL"]):
            raise ValueError("must be one of enum values ('OVERALL', 'STAGE', 'STAGEPOOL')")
        return value

    @field_validator("fixture_type")
    def fixture_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ALL_STAR", "PRESEASON", "REGULAR", "FINAL", "PLAYOFF", "FRIENDLY", "DEMONSTRATION"]):
            raise ValueError(
                "must be one of enum values ('ALL_STAR', 'PRESEASON', 'REGULAR', 'FINAL', 'PLAYOFF', 'FRIENDLY', 'DEMONSTRATION')"
            )
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandingsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "auto_generated",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict["season"] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict["entity"] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of division
        if self.division:
            _dict["division"] = self.division.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conference
        if self.conference:
            _dict["conference"] = self.conference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict["stage"] = self.stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool
        if self.pool:
            _dict["pool"] = self.pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of round
        if self.round:
            _dict["round"] = self.round.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standing_configuration
        if self.standing_configuration:
            _dict["standingConfiguration"] = self.standing_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in points (dict)
        _field_dict = {}
        if self.points:
            for _key_points in self.points:
                if self.points[_key_points]:
                    _field_dict[_key_points] = self.points[_key_points].to_dict()
            _dict["points"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in calculated (dict)
        _field_dict = {}
        if self.calculated:
            for _key_calculated in self.calculated:
                if self.calculated[_key_calculated]:
                    _field_dict[_key_calculated] = self.calculated[_key_calculated].to_dict()
            _dict["calculated"] = _field_dict
        # set to None if division_id (nullable) is None
        # and model_fields_set contains the field
        if self.division_id is None and "division_id" in self.model_fields_set:
            _dict["divisionId"] = None

        # set to None if conference_id (nullable) is None
        # and model_fields_set contains the field
        if self.conference_id is None and "conference_id" in self.model_fields_set:
            _dict["conferenceId"] = None

        # set to None if stage_code (nullable) is None
        # and model_fields_set contains the field
        if self.stage_code is None and "stage_code" in self.model_fields_set:
            _dict["stageCode"] = None

        # set to None if pool_code (nullable) is None
        # and model_fields_set contains the field
        if self.pool_code is None and "pool_code" in self.model_fields_set:
            _dict["poolCode"] = None

        # set to None if round_code (nullable) is None
        # and model_fields_set contains the field
        if self.round_code is None and "round_code" in self.model_fields_set:
            _dict["roundCode"] = None

        # set to None if round_number (nullable) is None
        # and model_fields_set contains the field
        if self.round_number is None and "round_number" in self.model_fields_set:
            _dict["roundNumber"] = None

        # set to None if standing_configuration_id (nullable) is None
        # and model_fields_set contains the field
        if self.standing_configuration_id is None and "standing_configuration_id" in self.model_fields_set:
            _dict["standingConfigurationId"] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict["position"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandingsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "standingId": obj.get("standingId"),
                "organizationId": obj.get("organizationId"),
                "organization": StandingsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "seasonId": obj.get("seasonId"),
                "season": FixtureProgressionsModelSeason.from_dict(obj["season"])
                if obj.get("season") is not None
                else None,
                "entityId": obj.get("entityId"),
                "entity": FixtureEntitiesModelEntity.from_dict(obj["entity"])
                if obj.get("entity") is not None
                else None,
                "divisionId": obj.get("divisionId"),
                "division": FixtureEntitiesModelDivision.from_dict(obj["division"])
                if obj.get("division") is not None
                else None,
                "conferenceId": obj.get("conferenceId"),
                "conference": FixtureEntitiesModelConference.from_dict(obj["conference"])
                if obj.get("conference") is not None
                else None,
                "latest": obj.get("latest"),
                "inProgress": obj.get("inProgress"),
                "live": obj.get("live"),
                "locked": obj.get("locked"),
                "groupingBase": obj.get("groupingBase"),
                "groupingConferenceDivision": obj.get("groupingConferenceDivision"),
                "groupingStagePool": obj.get("groupingStagePool"),
                "stageCode": obj.get("stageCode"),
                "stage": SeasonFixtureStagesPoolsListModelStage.from_dict(obj["stage"])
                if obj.get("stage") is not None
                else None,
                "poolCode": obj.get("poolCode"),
                "pool": SeasonFixtureStagesPoolsListModelPool.from_dict(obj["pool"])
                if obj.get("pool") is not None
                else None,
                "roundCode": obj.get("roundCode"),
                "round": FixturesModelRound.from_dict(obj["round"]) if obj.get("round") is not None else None,
                "roundNumber": obj.get("roundNumber"),
                "standingConfigurationId": obj.get("standingConfigurationId"),
                "standingConfiguration": SeasonsModelStandingConfiguration.from_dict(obj["standingConfiguration"])
                if obj.get("standingConfiguration") is not None
                else None,
                "fixtureType": obj.get("fixtureType"),
                "position": obj.get("position"),
                "securedFinals": obj.get("securedFinals"),
                "points": dict((_k, StandingPostBodyPointsValue.from_dict(_v)) for _k, _v in obj["points"].items())
                if obj.get("points") is not None
                else None,
                "calculated": dict(
                    (_k, StandingPostBodyCalculatedValue.from_dict(_v)) for _k, _v in obj["calculated"].items()
                )
                if obj.get("calculated") is not None
                else None,
                "externalId": obj.get("externalId"),
                "autoGenerated": obj.get("autoGenerated"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
