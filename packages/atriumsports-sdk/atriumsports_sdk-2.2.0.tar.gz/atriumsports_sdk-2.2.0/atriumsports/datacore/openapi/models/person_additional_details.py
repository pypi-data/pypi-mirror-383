# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class PersonAdditionalDetails(BaseModel):
    """
    Additional person detail fields
    """  # noqa: E501

    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Height in cms")
    height_imperial: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="Height in feet & inches", alias="heightImperial"
    )
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight in kgs")
    weight_imperial: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Weight in pounds", alias="weightImperial"
    )
    dominant_hand: Optional[StrictStr] = Field(default=None, description="Dominant hand", alias="dominantHand")
    dominant_foot: Optional[StrictStr] = Field(default=None, description="Dominant foot", alias="dominantFoot")
    home_town: Optional[StrictStr] = Field(default=None, description="Hometown", alias="homeTown")
    school: Optional[StrictStr] = Field(default=None, description="School")
    school_class: Optional[StrictStr] = Field(default=None, description="School Class", alias="schoolClass")
    college: Optional[StrictStr] = Field(default=None, description="College")
    college_class: Optional[StrictStr] = Field(default=None, description="College Class", alias="collegeClass")
    representation: Optional[StrictStr] = Field(default=None, description="Representation")
    junior_association_league: Optional[StrictStr] = Field(
        default=None, description="Junior Association / League", alias="juniorAssociationLeague"
    )
    __properties: ClassVar[List[str]] = [
        "height",
        "heightImperial",
        "weight",
        "weightImperial",
        "dominantHand",
        "dominantFoot",
        "homeTown",
        "school",
        "schoolClass",
        "college",
        "collegeClass",
        "representation",
        "juniorAssociationLeague",
    ]

    @field_validator("height_imperial")
    def height_imperial_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([4-7])\'([0-9]|1[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^([4-7])'([0-9]|1[0-1])$/")
        return value

    @field_validator("dominant_hand")
    def dominant_hand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["LEFT", "RIGHT"]):
            raise ValueError("must be one of enum values ('LEFT', 'RIGHT')")
        return value

    @field_validator("dominant_foot")
    def dominant_foot_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["LEFT", "RIGHT"]):
            raise ValueError("must be one of enum values ('LEFT', 'RIGHT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonAdditionalDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict["height"] = None

        # set to None if height_imperial (nullable) is None
        # and model_fields_set contains the field
        if self.height_imperial is None and "height_imperial" in self.model_fields_set:
            _dict["heightImperial"] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict["weight"] = None

        # set to None if weight_imperial (nullable) is None
        # and model_fields_set contains the field
        if self.weight_imperial is None and "weight_imperial" in self.model_fields_set:
            _dict["weightImperial"] = None

        # set to None if dominant_hand (nullable) is None
        # and model_fields_set contains the field
        if self.dominant_hand is None and "dominant_hand" in self.model_fields_set:
            _dict["dominantHand"] = None

        # set to None if dominant_foot (nullable) is None
        # and model_fields_set contains the field
        if self.dominant_foot is None and "dominant_foot" in self.model_fields_set:
            _dict["dominantFoot"] = None

        # set to None if home_town (nullable) is None
        # and model_fields_set contains the field
        if self.home_town is None and "home_town" in self.model_fields_set:
            _dict["homeTown"] = None

        # set to None if school (nullable) is None
        # and model_fields_set contains the field
        if self.school is None and "school" in self.model_fields_set:
            _dict["school"] = None

        # set to None if school_class (nullable) is None
        # and model_fields_set contains the field
        if self.school_class is None and "school_class" in self.model_fields_set:
            _dict["schoolClass"] = None

        # set to None if college (nullable) is None
        # and model_fields_set contains the field
        if self.college is None and "college" in self.model_fields_set:
            _dict["college"] = None

        # set to None if college_class (nullable) is None
        # and model_fields_set contains the field
        if self.college_class is None and "college_class" in self.model_fields_set:
            _dict["collegeClass"] = None

        # set to None if representation (nullable) is None
        # and model_fields_set contains the field
        if self.representation is None and "representation" in self.model_fields_set:
            _dict["representation"] = None

        # set to None if junior_association_league (nullable) is None
        # and model_fields_set contains the field
        if self.junior_association_league is None and "junior_association_league" in self.model_fields_set:
            _dict["juniorAssociationLeague"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonAdditionalDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "height": obj.get("height"),
                "heightImperial": obj.get("heightImperial"),
                "weight": obj.get("weight"),
                "weightImperial": obj.get("weightImperial"),
                "dominantHand": obj.get("dominantHand"),
                "dominantFoot": obj.get("dominantFoot"),
                "homeTown": obj.get("homeTown"),
                "school": obj.get("school"),
                "schoolClass": obj.get("schoolClass"),
                "college": obj.get("college"),
                "collegeClass": obj.get("collegeClass"),
                "representation": obj.get("representation"),
                "juniorAssociationLeague": obj.get("juniorAssociationLeague"),
            }
        )
        return _obj
