# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.career_person_representational_statistics_model_organization import (
    CareerPersonRepresentationalStatisticsModelOrganization,
)
from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from typing import Optional, Set
from typing_extensions import Self


class CareerPersonRepresentationalStatisticsModel(BaseModel):
    """
    CareerPersonRepresentationalStatisticsModel
    """  # noqa: E501

    person_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the person", alias="personId"
    )
    person: Optional[FixturePersonsModelPerson] = None
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[CareerPersonRepresentationalStatisticsModelOrganization] = None
    age_group: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth ",
        alias="ageGroup",
    )
    discipline: Optional[StrictStr] = Field(
        default=None, description="fixture discipline >- None None >- `INDOOR` Indoor >- `OUTDOOR` Outdoor "
    )
    representing: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Who the person or entity was representing"
    )
    statistics: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "personId",
        "person",
        "organizationId",
        "organization",
        "ageGroup",
        "discipline",
        "representing",
        "statistics",
    ]

    @field_validator("age_group")
    def age_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "JUNIOR",
                "YOUTH",
                "UNDER_15",
                "UNDER_16",
                "UNDER_17",
                "UNDER_18",
                "UNDER_19",
                "UNDER_20",
                "UNDER_21",
                "UNDER_22",
                "UNDER_23",
                "SENIOR",
                "MASTERS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('JUNIOR', 'YOUTH', 'UNDER_15', 'UNDER_16', 'UNDER_17', 'UNDER_18', 'UNDER_19', 'UNDER_20', 'UNDER_21', 'UNDER_22', 'UNDER_23', 'SENIOR', 'MASTERS')"
            )
        return value

    @field_validator("discipline")
    def discipline_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["INDOOR", "OUTDOOR"]):
            raise ValueError("must be one of enum values ('INDOOR', 'OUTDOOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CareerPersonRepresentationalStatisticsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # set to None if discipline (nullable) is None
        # and model_fields_set contains the field
        if self.discipline is None and "discipline" in self.model_fields_set:
            _dict["discipline"] = None

        # set to None if representing (nullable) is None
        # and model_fields_set contains the field
        if self.representing is None and "representing" in self.model_fields_set:
            _dict["representing"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CareerPersonRepresentationalStatisticsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "personId": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj["person"]) if obj.get("person") is not None else None,
                "organizationId": obj.get("organizationId"),
                "organization": CareerPersonRepresentationalStatisticsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "ageGroup": obj.get("ageGroup"),
                "discipline": obj.get("discipline"),
                "representing": obj.get("representing"),
                "statistics": obj.get("statistics"),
            }
        )
        return _obj
