# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.transfer_component import TransferComponent
from typing import Optional, Set
from typing_extensions import Self


class TransferPutBody(BaseModel):
    """
    TransferPutBody
    """  # noqa: E501

    competition_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the competition", alias="competitionId"
    )
    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    components: Optional[List[TransferComponent]] = Field(default=None, description="List of transfer components")
    status: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="Transfer Status >- None None >- `APPROVED` Approved >- `DECLINED` Decline >- `PENDING` Pending ",
    )
    reference: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Transfer reference number"
    )
    transfer_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="Type of transfer >- `DROPPED` Dropped >- `OTHER` Other >- `PERMIT` Permit >- `TRADE` Trade >- `TRANSFER` Transfer ",
        alias="transferType",
    )
    date_transfer: Optional[date] = Field(default=None, description="Date of transfer", alias="dateTransfer")
    date_permit_from: Optional[date] = Field(
        default=None, description="Date the permit started", alias="datePermitFrom"
    )
    date_permit_to: Optional[date] = Field(default=None, description="Date the permit ended", alias="datePermitTo")
    notes: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Notes")
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    __properties: ClassVar[List[str]] = [
        "competitionId",
        "seasonId",
        "components",
        "status",
        "reference",
        "transferType",
        "dateTransfer",
        "datePermitFrom",
        "datePermitTo",
        "notes",
        "externalId",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["APPROVED", "PENDING", "DECLINED"]):
            raise ValueError("must be one of enum values ('APPROVED', 'PENDING', 'DECLINED')")
        return value

    @field_validator("transfer_type")
    def transfer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["TRADE", "TRANSFER", "DROPPED", "PERMIT", "OTHER"]):
            raise ValueError("must be one of enum values ('TRADE', 'TRANSFER', 'DROPPED', 'PERMIT', 'OTHER')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item_components in self.components:
                if _item_components:
                    _items.append(_item_components.to_dict())
            _dict["components"] = _items
        # set to None if components (nullable) is None
        # and model_fields_set contains the field
        if self.components is None and "components" in self.model_fields_set:
            _dict["components"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        # set to None if date_transfer (nullable) is None
        # and model_fields_set contains the field
        if self.date_transfer is None and "date_transfer" in self.model_fields_set:
            _dict["dateTransfer"] = None

        # set to None if date_permit_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_permit_from is None and "date_permit_from" in self.model_fields_set:
            _dict["datePermitFrom"] = None

        # set to None if date_permit_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_permit_to is None and "date_permit_to" in self.model_fields_set:
            _dict["datePermitTo"] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict["notes"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "competitionId": obj.get("competitionId"),
                "seasonId": obj.get("seasonId"),
                "components": [TransferComponent.from_dict(_item) for _item in obj["components"]]
                if obj.get("components") is not None
                else None,
                "status": obj.get("status"),
                "reference": obj.get("reference"),
                "transferType": obj.get("transferType"),
                "dateTransfer": obj.get("dateTransfer"),
                "datePermitFrom": obj.get("datePermitFrom"),
                "datePermitTo": obj.get("datePermitTo"),
                "notes": obj.get("notes"),
                "externalId": obj.get("externalId"),
            }
        )
        return _obj
