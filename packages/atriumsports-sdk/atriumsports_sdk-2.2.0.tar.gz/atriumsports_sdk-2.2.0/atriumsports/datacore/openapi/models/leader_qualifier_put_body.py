# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class LeaderQualifierPutBody(BaseModel):
    """
    LeaderQualifierPutBody
    """  # noqa: E501

    leader_criteria_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the ~LeaderCriteria~", alias="leaderCriteriaId"
    )
    statistic_field: Optional[StrictStr] = Field(
        default=None, description="The statistic field that this qualifier is for.", alias="statisticField"
    )
    comparison_field: Optional[StrictStr] = Field(
        default=None, description="The statistic field to compare against.", alias="comparisonField"
    )
    comparison_type: Optional[StrictStr] = Field(
        default=None,
        description="Comparison type for the qualifier >- `EQUAL` Equal >- `GREATER_THAN` Greater than >- `GREATER_THAN_EQUAL` Greater than or equal >- `LESS_THAN` Less than >- `LESS_THAN_EQUAL` Less than or equal ",
        alias="comparisonType",
    )
    comparison_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Comparison value for the qualifier", alias="comparisonValue"
    )
    __properties: ClassVar[List[str]] = [
        "leaderCriteriaId",
        "statisticField",
        "comparisonField",
        "comparisonType",
        "comparisonValue",
    ]

    @field_validator("comparison_type")
    def comparison_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["GREATER_THAN", "LESS_THAN", "EQUAL", "GREATER_THAN_EQUAL", "LESS_THAN_EQUAL"]):
            raise ValueError(
                "must be one of enum values ('GREATER_THAN', 'LESS_THAN', 'EQUAL', 'GREATER_THAN_EQUAL', 'LESS_THAN_EQUAL')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderQualifierPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderQualifierPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "leaderCriteriaId": obj.get("leaderCriteriaId"),
                "statisticField": obj.get("statisticField"),
                "comparisonField": obj.get("comparisonField"),
                "comparisonType": obj.get("comparisonType"),
                "comparisonValue": obj.get("comparisonValue"),
            }
        )
        return _obj
