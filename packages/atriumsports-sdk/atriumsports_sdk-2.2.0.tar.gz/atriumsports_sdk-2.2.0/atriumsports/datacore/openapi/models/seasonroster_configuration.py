# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class SEASONROSTERConfiguration(BaseModel):
    """
    Configuration for the SEASON ROSTER
    """  # noqa: E501

    window_open_date: Optional[date] = Field(
        default=None,
        description="What date can a SEASON ROSTER be submitted from for this SEASON?",
        alias="windowOpenDate",
    )
    window_close_date: Optional[date] = Field(
        default=None,
        description="What is the last date a SEASON ROSTER can be submitted from for this SEASON?",
        alias="windowCloseDate",
    )
    season_roster_lock: Optional[StrictBool] = Field(
        default=None,
        description="Make SEASON ROSTERS un-editable when SEASON ROSTER Registration Window Close Date has elapsed.",
        alias="seasonRosterLock",
    )
    fixture_roster_lock: Optional[StrictBool] = Field(
        default=None,
        description="Make FIXTURE ROSTERS un-editable when FIXTURE Status is set to Scheduled",
        alias="fixtureRosterLock",
    )
    fixture_bib_edit: Optional[StrictBool] = Field(
        default=None, description="Allow Add/Edit of FIXTURE ROSTERS bib", alias="fixtureBibEdit"
    )
    season_roster_status_allowed: Optional[List[StrictStr]] = Field(
        default=None, description="Season Roster status allowed", alias="seasonRosterStatusAllowed"
    )
    publish_season_roster_roles_in_hours: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="How long before SEASON starts can rosters or roles be published (in hours)",
        alias="publishSeasonRosterRolesInHours",
    )
    publish_fixture_roster_roles_in_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="How long before a FIXTURE starts can rosters or roles be published (in minutes)",
        alias="publishFixtureRosterRolesInMinutes",
    )
    __properties: ClassVar[List[str]] = [
        "windowOpenDate",
        "windowCloseDate",
        "seasonRosterLock",
        "fixtureRosterLock",
        "fixtureBibEdit",
        "seasonRosterStatusAllowed",
        "publishSeasonRosterRolesInHours",
        "publishFixtureRosterRolesInMinutes",
    ]

    @field_validator("season_roster_status_allowed")
    def season_roster_status_allowed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["ACTIVE", "INJURED", "OTHER_NOT_PARTICIPATING", "OUT", "SUSPENDED"]):
                raise ValueError(
                    "each list item must be one of ('ACTIVE', 'INJURED', 'OTHER_NOT_PARTICIPATING', 'OUT', 'SUSPENDED')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SEASONROSTERConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if window_open_date (nullable) is None
        # and model_fields_set contains the field
        if self.window_open_date is None and "window_open_date" in self.model_fields_set:
            _dict["windowOpenDate"] = None

        # set to None if window_close_date (nullable) is None
        # and model_fields_set contains the field
        if self.window_close_date is None and "window_close_date" in self.model_fields_set:
            _dict["windowCloseDate"] = None

        # set to None if season_roster_lock (nullable) is None
        # and model_fields_set contains the field
        if self.season_roster_lock is None and "season_roster_lock" in self.model_fields_set:
            _dict["seasonRosterLock"] = None

        # set to None if fixture_roster_lock (nullable) is None
        # and model_fields_set contains the field
        if self.fixture_roster_lock is None and "fixture_roster_lock" in self.model_fields_set:
            _dict["fixtureRosterLock"] = None

        # set to None if fixture_bib_edit (nullable) is None
        # and model_fields_set contains the field
        if self.fixture_bib_edit is None and "fixture_bib_edit" in self.model_fields_set:
            _dict["fixtureBibEdit"] = None

        # set to None if publish_season_roster_roles_in_hours (nullable) is None
        # and model_fields_set contains the field
        if (
            self.publish_season_roster_roles_in_hours is None
            and "publish_season_roster_roles_in_hours" in self.model_fields_set
        ):
            _dict["publishSeasonRosterRolesInHours"] = None

        # set to None if publish_fixture_roster_roles_in_minutes (nullable) is None
        # and model_fields_set contains the field
        if (
            self.publish_fixture_roster_roles_in_minutes is None
            and "publish_fixture_roster_roles_in_minutes" in self.model_fields_set
        ):
            _dict["publishFixtureRosterRolesInMinutes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SEASONROSTERConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "windowOpenDate": obj.get("windowOpenDate"),
                "windowCloseDate": obj.get("windowCloseDate"),
                "seasonRosterLock": obj.get("seasonRosterLock"),
                "fixtureRosterLock": obj.get("fixtureRosterLock"),
                "fixtureBibEdit": obj.get("fixtureBibEdit"),
                "seasonRosterStatusAllowed": obj.get("seasonRosterStatusAllowed"),
                "publishSeasonRosterRolesInHours": obj.get("publishSeasonRosterRolesInHours"),
                "publishFixtureRosterRolesInMinutes": obj.get("publishFixtureRosterRolesInMinutes"),
            }
        )
        return _obj
