# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class PersonHistoricalName(BaseModel):
    """
    PersonHistoricalName
    """  # noqa: E501

    date_start: Optional[date] = Field(default=None, description="Start date", alias="dateStart")
    date_end: Optional[date] = Field(default=None, description="End date", alias="dateEnd")
    name_full_local: Optional[StrictStr] = Field(
        default=None,
        description="The full name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameFullLocal",
    )
    name_given_local: Optional[StrictStr] = Field(
        default=None,
        description="Given name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameGivenLocal",
    )
    name_family_local: Optional[StrictStr] = Field(
        default=None,
        description="Family name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameFamilyLocal",
    )
    name_full_latin: Optional[StrictStr] = Field(
        default=None,
        description="The full name of the person in [latin](##section/Introduction/Character-Sets-and-Names) characters",
        alias="nameFullLatin",
    )
    name_given_latin: Optional[StrictStr] = Field(
        default=None,
        description="Given name of the person in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameGivenLatin",
    )
    name_family_latin: Optional[StrictStr] = Field(
        default=None,
        description="Family name of the person in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameFamilyLatin",
    )
    __properties: ClassVar[List[str]] = [
        "dateStart",
        "dateEnd",
        "nameFullLocal",
        "nameGivenLocal",
        "nameFamilyLocal",
        "nameFullLatin",
        "nameGivenLatin",
        "nameFamilyLatin",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonHistoricalName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if date_start (nullable) is None
        # and model_fields_set contains the field
        if self.date_start is None and "date_start" in self.model_fields_set:
            _dict["dateStart"] = None

        # set to None if date_end (nullable) is None
        # and model_fields_set contains the field
        if self.date_end is None and "date_end" in self.model_fields_set:
            _dict["dateEnd"] = None

        # set to None if name_full_local (nullable) is None
        # and model_fields_set contains the field
        if self.name_full_local is None and "name_full_local" in self.model_fields_set:
            _dict["nameFullLocal"] = None

        # set to None if name_given_local (nullable) is None
        # and model_fields_set contains the field
        if self.name_given_local is None and "name_given_local" in self.model_fields_set:
            _dict["nameGivenLocal"] = None

        # set to None if name_family_local (nullable) is None
        # and model_fields_set contains the field
        if self.name_family_local is None and "name_family_local" in self.model_fields_set:
            _dict["nameFamilyLocal"] = None

        # set to None if name_full_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_full_latin is None and "name_full_latin" in self.model_fields_set:
            _dict["nameFullLatin"] = None

        # set to None if name_given_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_given_latin is None and "name_given_latin" in self.model_fields_set:
            _dict["nameGivenLatin"] = None

        # set to None if name_family_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_family_latin is None and "name_family_latin" in self.model_fields_set:
            _dict["nameFamilyLatin"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonHistoricalName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dateStart": obj.get("dateStart"),
                "dateEnd": obj.get("dateEnd"),
                "nameFullLocal": obj.get("nameFullLocal"),
                "nameGivenLocal": obj.get("nameGivenLocal"),
                "nameFamilyLocal": obj.get("nameFamilyLocal"),
                "nameFullLatin": obj.get("nameFullLatin"),
                "nameGivenLatin": obj.get("nameGivenLatin"),
                "nameFamilyLatin": obj.get("nameFamilyLatin"),
            }
        )
        return _obj
