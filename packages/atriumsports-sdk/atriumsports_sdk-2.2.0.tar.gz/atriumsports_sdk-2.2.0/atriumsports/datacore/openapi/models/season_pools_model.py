# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_progressions_model_season import FixtureProgressionsModelSeason
from atriumsports.datacore.openapi.models.season_fixture_stages_pools_list_model_stage import (
    SeasonFixtureStagesPoolsListModelStage,
)
from atriumsports.datacore.openapi.models.season_pools_model_organization import SeasonPoolsModelOrganization
from typing import Optional, Set
from typing_extensions import Self


class SeasonPoolsModel(BaseModel):
    """
    SeasonPoolsModel
    """  # noqa: E501

    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[SeasonPoolsModelOrganization] = None
    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    season: Optional[FixtureProgressionsModelSeason] = None
    pool_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the pool. (Unique for season)", alias="poolCode"
    )
    stage_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the stage. (Unique for season)", alias="stageCode"
    )
    stage: Optional[SeasonFixtureStagesPoolsListModelStage] = None
    name_local: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The name of the pool in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    abbreviation_local: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(
        default=None,
        description="An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="abbreviationLocal",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The name of the pool in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    abbreviation_latin: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(
        default=None,
        description="An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="abbreviationLatin",
    )
    pool_order: Optional[StrictInt] = Field(
        default=None, description="User defined sort order of the ~pool~", alias="poolOrder"
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "organizationId",
        "organization",
        "seasonId",
        "season",
        "poolCode",
        "stageCode",
        "stage",
        "nameLocal",
        "abbreviationLocal",
        "nameLatin",
        "abbreviationLatin",
        "poolOrder",
        "externalId",
        "updated",
        "added",
    ]

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonPoolsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict["season"] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict["stage"] = self.stage.to_dict()
        # set to None if stage_code (nullable) is None
        # and model_fields_set contains the field
        if self.stage_code is None and "stage_code" in self.model_fields_set:
            _dict["stageCode"] = None

        # set to None if name_local (nullable) is None
        # and model_fields_set contains the field
        if self.name_local is None and "name_local" in self.model_fields_set:
            _dict["nameLocal"] = None

        # set to None if abbreviation_local (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_local is None and "abbreviation_local" in self.model_fields_set:
            _dict["abbreviationLocal"] = None

        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if abbreviation_latin (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_latin is None and "abbreviation_latin" in self.model_fields_set:
            _dict["abbreviationLatin"] = None

        # set to None if pool_order (nullable) is None
        # and model_fields_set contains the field
        if self.pool_order is None and "pool_order" in self.model_fields_set:
            _dict["poolOrder"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonPoolsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organizationId": obj.get("organizationId"),
                "organization": SeasonPoolsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "seasonId": obj.get("seasonId"),
                "season": FixtureProgressionsModelSeason.from_dict(obj["season"])
                if obj.get("season") is not None
                else None,
                "poolCode": obj.get("poolCode"),
                "stageCode": obj.get("stageCode"),
                "stage": SeasonFixtureStagesPoolsListModelStage.from_dict(obj["stage"])
                if obj.get("stage") is not None
                else None,
                "nameLocal": obj.get("nameLocal"),
                "abbreviationLocal": obj.get("abbreviationLocal"),
                "nameLatin": obj.get("nameLatin"),
                "abbreviationLatin": obj.get("abbreviationLatin"),
                "poolOrder": obj.get("poolOrder"),
                "externalId": obj.get("externalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
