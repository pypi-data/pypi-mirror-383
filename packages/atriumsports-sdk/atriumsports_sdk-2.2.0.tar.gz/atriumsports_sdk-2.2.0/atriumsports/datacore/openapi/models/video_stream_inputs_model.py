# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_progressions_model_fixture import FixtureProgressionsModelFixture
from atriumsports.datacore.openapi.models.fixtures_model_venue import FixturesModelVenue
from atriumsports.datacore.openapi.models.seasons_model_competition import SeasonsModelCompetition
from atriumsports.datacore.openapi.models.video_stream_inputs_model_organization import (
    VideoStreamInputsModelOrganization,
)
from typing import Optional, Set
from typing_extensions import Self


class VideoStreamInputsModel(BaseModel):
    """
    VideoStreamInputsModel
    """  # noqa: E501

    video_input_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the video input", alias="videoInputId"
    )
    master_venue_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the master venue", alias="masterVenueId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[VideoStreamInputsModelOrganization] = None
    venue_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the venue", alias="venueId"
    )
    venue: Optional[FixturesModelVenue] = None
    competition_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the competition", alias="competitionId"
    )
    competition: Optional[SeasonsModelCompetition] = None
    fixture_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the fixture", alias="fixtureId"
    )
    fixture: Optional[FixtureProgressionsModelFixture] = None
    start_time_local: Optional[datetime] = Field(
        default=None, description="Start time (Local).", alias="startTimeLocal"
    )
    start_time_utc: Optional[datetime] = Field(
        default=None,
        description="Start time (UTC). This is automatically generated based on the timezone of the venue.",
        alias="startTimeUTC",
    )
    finish_recording_time_utc: Optional[datetime] = Field(
        default=None,
        description="(TO BE REMOVED) Finish Recording time of the stream (if not set, is calculated as startTimeUTC + durationFull from fixtures)",
        alias="finishRecordingTimeUTC",
    )
    estimated_finish_time_utc: Optional[datetime] = Field(
        default=None,
        description="Finish Recording time of the stream (if not set, is calculated as startTimeUTC + durationFull from fixtures)",
        alias="estimatedFinishTimeUTC",
    )
    provider: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The code for the provider of the file"
    )
    locale: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]] = Field(
        default=None, description="The locale of the video"
    )
    source_number: Optional[StrictInt] = Field(
        default=1,
        description="Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
        alias="sourceNumber",
    )
    feed_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="Type of video input >- `ADDITIONAL_ANGLE` Additional angle >- `LOW_LATENCY` Low Latency >- `PRIMARY` Primary ",
        alias="feedType",
    )
    input_resolution: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="The resolution of the video input >- `1080` 1920 x 1080 >- `288` 512 x 288 >- `720` 1280 x 720 ",
        alias="inputResolution",
    )
    fps: Optional[StrictInt] = Field(default=25, description="fps for the video stream")
    name: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="The name of the video source"
    )
    audio_ambience_channel: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="audioAmbienceChannel >- `CHANNEL_BOTH` Both channels >- `CHANNEL_LEFT` Channel left >- `CHANNEL_RIGHT` Channel right >- `NONE` None ",
        alias="audioAmbienceChannel",
    )
    audio_commentary_channel: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="audioCommentaryChannel >- `CHANNEL_BOTH` Both channels >- `CHANNEL_LEFT` Channel left >- `CHANNEL_RIGHT` Channel right >- `NONE` None ",
        alias="audioCommentaryChannel",
    )
    platform_provider_override: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=30)]] = Field(
        default=None, description="Override Video Provider configuration", alias="platformProviderOverride"
    )
    input_url: Optional[StrictStr] = Field(
        default=None, description="The URL where the video should be sent", alias="inputURL"
    )
    stream_name: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(
        default=None,
        description="The name/stream key of the RTMP stream. This is an optional part of the RTMP url - not a text description.",
        alias="streamName",
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "videoInputId",
        "masterVenueId",
        "organizationId",
        "organization",
        "venueId",
        "venue",
        "competitionId",
        "competition",
        "fixtureId",
        "fixture",
        "startTimeLocal",
        "startTimeUTC",
        "finishRecordingTimeUTC",
        "estimatedFinishTimeUTC",
        "provider",
        "locale",
        "sourceNumber",
        "feedType",
        "inputResolution",
        "fps",
        "name",
        "audioAmbienceChannel",
        "audioCommentaryChannel",
        "platformProviderOverride",
        "inputURL",
        "streamName",
        "updated",
        "added",
    ]

    @field_validator("locale")
    def locale_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z]{2,2}-[A-Z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2,2}-[A-Z]{2,2}$/")
        return value

    @field_validator("feed_type")
    def feed_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PRIMARY", "ADDITIONAL_ANGLE", "LOW_LATENCY"]):
            raise ValueError("must be one of enum values ('PRIMARY', 'ADDITIONAL_ANGLE', 'LOW_LATENCY')")
        return value

    @field_validator("input_resolution")
    def input_resolution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["288", "720", "1080"]):
            raise ValueError("must be one of enum values ('288', '720', '1080')")
        return value

    @field_validator("audio_ambience_channel")
    def audio_ambience_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["CHANNEL_LEFT", "CHANNEL_RIGHT", "CHANNEL_BOTH", "NONE"]):
            raise ValueError("must be one of enum values ('CHANNEL_LEFT', 'CHANNEL_RIGHT', 'CHANNEL_BOTH', 'NONE')")
        return value

    @field_validator("audio_commentary_channel")
    def audio_commentary_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["CHANNEL_LEFT", "CHANNEL_RIGHT", "CHANNEL_BOTH", "NONE"]):
            raise ValueError("must be one of enum values ('CHANNEL_LEFT', 'CHANNEL_RIGHT', 'CHANNEL_BOTH', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoStreamInputsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of venue
        if self.venue:
            _dict["venue"] = self.venue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of competition
        if self.competition:
            _dict["competition"] = self.competition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixture
        if self.fixture:
            _dict["fixture"] = self.fixture.to_dict()
        # set to None if platform_provider_override (nullable) is None
        # and model_fields_set contains the field
        if self.platform_provider_override is None and "platform_provider_override" in self.model_fields_set:
            _dict["platformProviderOverride"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoStreamInputsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "videoInputId": obj.get("videoInputId"),
                "masterVenueId": obj.get("masterVenueId"),
                "organizationId": obj.get("organizationId"),
                "organization": VideoStreamInputsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "venueId": obj.get("venueId"),
                "venue": FixturesModelVenue.from_dict(obj["venue"]) if obj.get("venue") is not None else None,
                "competitionId": obj.get("competitionId"),
                "competition": SeasonsModelCompetition.from_dict(obj["competition"])
                if obj.get("competition") is not None
                else None,
                "fixtureId": obj.get("fixtureId"),
                "fixture": FixtureProgressionsModelFixture.from_dict(obj["fixture"])
                if obj.get("fixture") is not None
                else None,
                "startTimeLocal": obj.get("startTimeLocal"),
                "startTimeUTC": obj.get("startTimeUTC"),
                "finishRecordingTimeUTC": obj.get("finishRecordingTimeUTC"),
                "estimatedFinishTimeUTC": obj.get("estimatedFinishTimeUTC"),
                "provider": obj.get("provider"),
                "locale": obj.get("locale"),
                "sourceNumber": obj.get("sourceNumber") if obj.get("sourceNumber") is not None else 1,
                "feedType": obj.get("feedType"),
                "inputResolution": obj.get("inputResolution"),
                "fps": obj.get("fps") if obj.get("fps") is not None else 25,
                "name": obj.get("name"),
                "audioAmbienceChannel": obj.get("audioAmbienceChannel"),
                "audioCommentaryChannel": obj.get("audioCommentaryChannel"),
                "platformProviderOverride": obj.get("platformProviderOverride"),
                "inputURL": obj.get("inputURL"),
                "streamName": obj.get("streamName"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
