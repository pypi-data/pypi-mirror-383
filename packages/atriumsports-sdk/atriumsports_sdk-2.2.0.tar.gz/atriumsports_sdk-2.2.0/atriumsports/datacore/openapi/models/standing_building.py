# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class StandingBuilding(BaseModel):
    """
    Suilding definitions
    """  # noqa: E501

    build_type: StrictStr = Field(
        description="Overall standing Type (ROUND not used on live Standings)", alias="buildType"
    )
    build_overall: Optional[StrictBool] = Field(
        default=None, description="Build overall standings", alias="buildOverall"
    )
    build_conferences: Optional[StrictBool] = Field(
        default=None, description="Build standings by conference", alias="buildConferences"
    )
    build_divisions: Optional[StrictBool] = Field(
        default=None, description="Build standings by division", alias="buildDivisions"
    )
    grouping: StrictStr = Field(description="How to Group")
    blank_standing: Optional[StrictBool] = Field(
        default=None, description="Give entity blank row if no played", alias="blankStanding"
    )
    include_live_fixtures: Optional[StrictBool] = Field(
        default=None, description="Include live fixtures", alias="includeLiveFixtures"
    )
    generate_live_standings: Optional[StrictBool] = Field(
        default=None, description="Generate live fixtures", alias="generateLiveStandings"
    )
    validate_entities_structure: Optional[StrictBool] = Field(
        default=None, description="Validate Entities against Fixture structure?", alias="validateEntitiesStructure"
    )
    fixture_types: List[StrictStr] = Field(alias="fixtureTypes")
    decimal_places: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=4, description="Number of decimal places for percentage calculations", alias="decimalPlaces"
    )
    skip_latest_flag: Optional[StrictBool] = Field(
        default=None, description="Skip setting latest=True for ROUND standings?", alias="skipLatestFlag"
    )
    skip_clean_round_flag: Optional[StrictBool] = Field(
        default=None, description="Skip cleaning future blank rounds?", alias="skipCleanRoundFlag"
    )
    force_head_to_head: Optional[StrictBool] = Field(
        default=None,
        description="Set to true in order to force head-to-head resolution even when there aren't enough mutual fixtures between entities in a h2h group",
        alias="forceHeadToHead",
    )
    __properties: ClassVar[List[str]] = [
        "buildType",
        "buildOverall",
        "buildConferences",
        "buildDivisions",
        "grouping",
        "blankStanding",
        "includeLiveFixtures",
        "generateLiveStandings",
        "validateEntitiesStructure",
        "fixtureTypes",
        "decimalPlaces",
        "skipLatestFlag",
        "skipCleanRoundFlag",
        "forceHeadToHead",
    ]

    @field_validator("build_type")
    def build_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["ROUND", "OVERALL"]):
            raise ValueError("must be one of enum values ('ROUND', 'OVERALL')")
        return value

    @field_validator("grouping")
    def grouping_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["STAGE", "STAGEPOOL", "NONE"]):
            raise ValueError("must be one of enum values ('STAGE', 'STAGEPOOL', 'NONE')")
        return value

    @field_validator("fixture_types")
    def fixture_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(["ALL_STAR", "PRESEASON", "REGULAR", "FINAL", "PLAYOFF", "FRIENDLY", "DEMONSTRATION"]):
                raise ValueError(
                    "each list item must be one of ('ALL_STAR', 'PRESEASON', 'REGULAR', 'FINAL', 'PLAYOFF', 'FRIENDLY', 'DEMONSTRATION')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandingBuilding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandingBuilding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "buildType": obj.get("buildType"),
                "buildOverall": obj.get("buildOverall"),
                "buildConferences": obj.get("buildConferences"),
                "buildDivisions": obj.get("buildDivisions"),
                "grouping": obj.get("grouping"),
                "blankStanding": obj.get("blankStanding"),
                "includeLiveFixtures": obj.get("includeLiveFixtures"),
                "generateLiveStandings": obj.get("generateLiveStandings"),
                "validateEntitiesStructure": obj.get("validateEntitiesStructure"),
                "fixtureTypes": obj.get("fixtureTypes"),
                "decimalPlaces": obj.get("decimalPlaces") if obj.get("decimalPlaces") is not None else 4,
                "skipLatestFlag": obj.get("skipLatestFlag"),
                "skipCleanRoundFlag": obj.get("skipCleanRoundFlag"),
                "forceHeadToHead": obj.get("forceHeadToHead"),
            }
        )
        return _obj
