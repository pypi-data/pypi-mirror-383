# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class ResponseMetaData(BaseModel):
    """
    ResponseMetaData
    """  # noqa: E501

    version: Optional[StrictInt] = Field(default=None, description="The version of the API in use for this call")
    code_version: Optional[StrictStr] = Field(
        default=None,
        description="A string indicating the version of the code that handled this request",
        alias="codeVersion",
    )
    code: Optional[StrictInt] = Field(default=None, description="The HTTP response code for this request")
    time: Optional[datetime] = Field(default=None, description="The date/time this request was made (in UTC).")
    from_cache: Optional[StrictBool] = Field(
        default=None, description="Was this request served directly from the cache?", alias="fromCache"
    )
    count: Optional[StrictInt] = Field(default=None, description="The number of records being returned")
    limit: Optional[StrictInt] = Field(default=None, description="The record limit in place for this request")
    offset: Optional[StrictInt] = Field(default=None, description="The record offset in place for this request")
    generation_time: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The number of seconds taken to generate this request.", alias="generationTime"
    )
    __properties: ClassVar[List[str]] = [
        "version",
        "codeVersion",
        "code",
        "time",
        "fromCache",
        "count",
        "limit",
        "offset",
        "generationTime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseMetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseMetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "version": obj.get("version"),
                "codeVersion": obj.get("codeVersion"),
                "code": obj.get("code"),
                "time": obj.get("time"),
                "fromCache": obj.get("fromCache"),
                "count": obj.get("count"),
                "limit": obj.get("limit"),
                "offset": obj.get("offset"),
                "generationTime": obj.get("generationTime"),
            }
        )
        return _obj
