# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_entities_model_conference import FixtureEntitiesModelConference
from atriumsports.datacore.openapi.models.fixture_entities_model_division import FixtureEntitiesModelDivision
from atriumsports.datacore.openapi.models.fixture_entities_model_entity import FixtureEntitiesModelEntity
from atriumsports.datacore.openapi.models.fixture_progressions_model_season import FixtureProgressionsModelSeason
from atriumsports.datacore.openapi.models.season_entities_list_model_organization import (
    SeasonEntitiesListModelOrganization,
)
from typing import Optional, Set
from typing_extensions import Self


class SeasonEntitiesListModel(BaseModel):
    """
    SeasonEntitiesListModel
    """  # noqa: E501

    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    season: Optional[FixtureProgressionsModelSeason] = None
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[SeasonEntitiesListModelOrganization] = None
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity", alias="entityId"
    )
    entity: Optional[FixtureEntitiesModelEntity] = None
    conference_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the conference", alias="conferenceId"
    )
    conference: Optional[FixtureEntitiesModelConference] = None
    division_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the division", alias="divisionId"
    )
    division: Optional[FixtureEntitiesModelDivision] = None
    status: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="Status >- `ACTIVE` Active >- `INACTIVE` Inactive >- `PENDING` Pending "
    )
    seed: Optional[StrictInt] = Field(default=None, description="Initial seeding")
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    roster_status: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default="UNKNOWN",
        description="The status of the ENTITY season entities >- `APPROVED` Approved >- `PENDING` Pending >- `REJECTED` Rejected >- `SUBMITTED` Submitted >- `UNKNOWN` Unknown ",
        alias="rosterStatus",
    )
    __properties: ClassVar[List[str]] = [
        "seasonId",
        "season",
        "organizationId",
        "organization",
        "entityId",
        "entity",
        "conferenceId",
        "conference",
        "divisionId",
        "division",
        "status",
        "seed",
        "externalId",
        "updated",
        "added",
        "rosterStatus",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ACTIVE", "INACTIVE", "PENDING"]):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'PENDING')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    @field_validator("roster_status")
    def roster_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["UNKNOWN", "SUBMITTED", "PENDING", "APPROVED", "REJECTED"]):
            raise ValueError("must be one of enum values ('UNKNOWN', 'SUBMITTED', 'PENDING', 'APPROVED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonEntitiesListModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict["season"] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict["entity"] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conference
        if self.conference:
            _dict["conference"] = self.conference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of division
        if self.division:
            _dict["division"] = self.division.to_dict()
        # set to None if conference_id (nullable) is None
        # and model_fields_set contains the field
        if self.conference_id is None and "conference_id" in self.model_fields_set:
            _dict["conferenceId"] = None

        # set to None if division_id (nullable) is None
        # and model_fields_set contains the field
        if self.division_id is None and "division_id" in self.model_fields_set:
            _dict["divisionId"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonEntitiesListModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "seasonId": obj.get("seasonId"),
                "season": FixtureProgressionsModelSeason.from_dict(obj["season"])
                if obj.get("season") is not None
                else None,
                "organizationId": obj.get("organizationId"),
                "organization": SeasonEntitiesListModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "entityId": obj.get("entityId"),
                "entity": FixtureEntitiesModelEntity.from_dict(obj["entity"])
                if obj.get("entity") is not None
                else None,
                "conferenceId": obj.get("conferenceId"),
                "conference": FixtureEntitiesModelConference.from_dict(obj["conference"])
                if obj.get("conference") is not None
                else None,
                "divisionId": obj.get("divisionId"),
                "division": FixtureEntitiesModelDivision.from_dict(obj["division"])
                if obj.get("division") is not None
                else None,
                "status": obj.get("status"),
                "seed": obj.get("seed"),
                "externalId": obj.get("externalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "rosterStatus": obj.get("rosterStatus") if obj.get("rosterStatus") is not None else "UNKNOWN",
            }
        )
        return _obj
