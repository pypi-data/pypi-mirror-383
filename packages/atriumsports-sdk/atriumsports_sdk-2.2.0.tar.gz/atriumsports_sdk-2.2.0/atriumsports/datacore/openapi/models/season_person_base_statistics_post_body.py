# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class SeasonPersonBaseStatisticsPostBody(BaseModel):
    """
    SeasonPersonBaseStatisticsPostBody
    """  # noqa: E501

    season_id: StrictStr = Field(description="The unique identifier of the season", alias="seasonId")
    person_id: StrictStr = Field(description="The unique identifier of the person", alias="personId")
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity", alias="entityId"
    )
    fixture_type: Annotated[str, Field(strict=True, max_length=50)] = Field(
        description="Type of fixture >- `ALL_STAR` All Star >- `DEMONSTRATION` Demonstration >- `FINAL` Final >- `FRIENDLY` Friendly >- `PLAYOFF` Playoff >- `PRESEASON` Pre Season >- `REGULAR` Regular ",
        alias="fixtureType",
    )
    competitor_type: Annotated[str, Field(strict=True, max_length=50)] = Field(
        description="The type of competitors in this fixture >- `ENTITY` Entity >- `PERSON` Person ",
        alias="competitorType",
    )
    representing: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Who was being represented for the season base statistics"
    )
    statistics: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "seasonId",
        "personId",
        "entityId",
        "fixtureType",
        "competitorType",
        "representing",
        "statistics",
    ]

    @field_validator("fixture_type")
    def fixture_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["ALL_STAR", "PRESEASON", "REGULAR", "FINAL", "PLAYOFF", "FRIENDLY", "DEMONSTRATION"]):
            raise ValueError(
                "must be one of enum values ('ALL_STAR', 'PRESEASON', 'REGULAR', 'FINAL', 'PLAYOFF', 'FRIENDLY', 'DEMONSTRATION')"
            )
        return value

    @field_validator("competitor_type")
    def competitor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["PERSON", "ENTITY"]):
            raise ValueError("must be one of enum values ('PERSON', 'ENTITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonPersonBaseStatisticsPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonPersonBaseStatisticsPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "seasonId": obj.get("seasonId"),
                "personId": obj.get("personId"),
                "entityId": obj.get("entityId"),
                "fixtureType": obj.get("fixtureType"),
                "competitorType": obj.get("competitorType"),
                "representing": obj.get("representing"),
                "statistics": obj.get("statistics"),
            }
        )
        return _obj
