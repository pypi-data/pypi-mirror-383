# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.competition_historical_name import CompetitionHistoricalName
from atriumsports.datacore.openapi.models.competitions_season_status_model_league import (
    CompetitionsSeasonStatusModelLeague,
)
from atriumsports.datacore.openapi.models.competitions_season_status_model_organization import (
    CompetitionsSeasonStatusModelOrganization,
)
from atriumsports.datacore.openapi.models.images_model import ImagesModel
from atriumsports.datacore.openapi.models.social_media import SocialMedia
from typing import Optional, Set
from typing_extensions import Self


class CompetitionsSeasonStatusModel(BaseModel):
    """
    CompetitionsSeasonStatusModel
    """  # noqa: E501

    competition_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the competition", alias="competitionId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[CompetitionsSeasonStatusModelOrganization] = None
    league_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the league", alias="leagueId"
    )
    league: Optional[CompetitionsSeasonStatusModelLeague] = None
    international_reference: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="The international reference for this competition season status given by the sport governing body",
        alias="internationalReference",
    )
    abbreviation_local: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="abbreviationLocal",
    )
    name_local: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the competition season status in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    event_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default="FIXTURE",
        description="Primary Type of Fixtures >- `FIXTURE` Fixture >- `PRACTICE` Practice ",
        alias="eventType",
    )
    abbreviation_latin: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="abbreviationLatin",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the competition season status in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    social: Optional[SocialMedia] = None
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    historical_names: Optional[List[CompetitionHistoricalName]] = Field(
        default=None, description="Array of competition historical names", alias="historicalNames"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    age_group: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None,
        description="The age group of the competition >- None None >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth ",
        alias="ageGroup",
    )
    images: Optional[List[ImagesModel]] = None
    __properties: ClassVar[List[str]] = [
        "competitionId",
        "organizationId",
        "organization",
        "leagueId",
        "league",
        "internationalReference",
        "abbreviationLocal",
        "nameLocal",
        "eventType",
        "abbreviationLatin",
        "nameLatin",
        "social",
        "externalId",
        "historicalNames",
        "updated",
        "added",
        "ageGroup",
        "images",
    ]

    @field_validator("event_type")
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["FIXTURE", "PRACTICE"]):
            raise ValueError("must be one of enum values ('FIXTURE', 'PRACTICE')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    @field_validator("age_group")
    def age_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "JUNIOR",
                "YOUTH",
                "UNDER_15",
                "UNDER_16",
                "UNDER_17",
                "UNDER_18",
                "UNDER_19",
                "UNDER_20",
                "UNDER_21",
                "UNDER_22",
                "UNDER_23",
                "SENIOR",
                "MASTERS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('JUNIOR', 'YOUTH', 'UNDER_15', 'UNDER_16', 'UNDER_17', 'UNDER_18', 'UNDER_19', 'UNDER_20', 'UNDER_21', 'UNDER_22', 'UNDER_23', 'SENIOR', 'MASTERS')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitionsSeasonStatusModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict["league"] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social
        if self.social:
            _dict["social"] = self.social.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in historical_names (list)
        _items = []
        if self.historical_names:
            for _item_historical_names in self.historical_names:
                if _item_historical_names:
                    _items.append(_item_historical_names.to_dict())
            _dict["historicalNames"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict["images"] = _items
        # set to None if international_reference (nullable) is None
        # and model_fields_set contains the field
        if self.international_reference is None and "international_reference" in self.model_fields_set:
            _dict["internationalReference"] = None

        # set to None if abbreviation_local (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_local is None and "abbreviation_local" in self.model_fields_set:
            _dict["abbreviationLocal"] = None

        # set to None if abbreviation_latin (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_latin is None and "abbreviation_latin" in self.model_fields_set:
            _dict["abbreviationLatin"] = None

        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if social (nullable) is None
        # and model_fields_set contains the field
        if self.social is None and "social" in self.model_fields_set:
            _dict["social"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        # set to None if historical_names (nullable) is None
        # and model_fields_set contains the field
        if self.historical_names is None and "historical_names" in self.model_fields_set:
            _dict["historicalNames"] = None

        # set to None if age_group (nullable) is None
        # and model_fields_set contains the field
        if self.age_group is None and "age_group" in self.model_fields_set:
            _dict["ageGroup"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitionsSeasonStatusModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "competitionId": obj.get("competitionId"),
                "organizationId": obj.get("organizationId"),
                "organization": CompetitionsSeasonStatusModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "leagueId": obj.get("leagueId"),
                "league": CompetitionsSeasonStatusModelLeague.from_dict(obj["league"])
                if obj.get("league") is not None
                else None,
                "internationalReference": obj.get("internationalReference"),
                "abbreviationLocal": obj.get("abbreviationLocal"),
                "nameLocal": obj.get("nameLocal"),
                "eventType": obj.get("eventType") if obj.get("eventType") is not None else "FIXTURE",
                "abbreviationLatin": obj.get("abbreviationLatin"),
                "nameLatin": obj.get("nameLatin"),
                "social": SocialMedia.from_dict(obj["social"]) if obj.get("social") is not None else None,
                "externalId": obj.get("externalId"),
                "historicalNames": [CompetitionHistoricalName.from_dict(_item) for _item in obj["historicalNames"]]
                if obj.get("historicalNames") is not None
                else None,
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "ageGroup": obj.get("ageGroup"),
                "images": [ImagesModel.from_dict(_item) for _item in obj["images"]]
                if obj.get("images") is not None
                else None,
            }
        )
        return _obj
