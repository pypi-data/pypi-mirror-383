# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class AwardPostBody(BaseModel):
    """
    AwardPostBody
    """  # noqa: E501

    award_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the award", alias="awardId"
    )
    person_id: StrictStr = Field(description="The person that this award is for", alias="personId")
    entity_group_id: Optional[StrictStr] = Field(
        default=None, description="The entity group that this award is linked to", alias="entityGroupId"
    )
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The entity that this award is linked to", alias="entityId"
    )
    competition_id: Optional[StrictStr] = Field(
        default=None, description="The competition that this award is linked to", alias="competitionId"
    )
    season_id: Optional[StrictStr] = Field(
        default=None, description="The season that this award is linked to", alias="seasonId"
    )
    fixture_id: Optional[StrictStr] = Field(
        default=None, description="The fixture that this award is linked to", alias="fixtureId"
    )
    votes: Optional[StrictInt] = Field(default=None, description="Number of votes")
    date_from: Optional[date] = Field(default=None, description="Date the award is from", alias="dateFrom")
    date_to: Optional[date] = Field(default=None, description="Date the award is until", alias="dateTo")
    award: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Award")
    award_sub_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="Award sub type", alias="awardSubType"
    )
    notes: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Award Notes")
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    __properties: ClassVar[List[str]] = [
        "awardId",
        "personId",
        "entityGroupId",
        "entityId",
        "competitionId",
        "seasonId",
        "fixtureId",
        "votes",
        "dateFrom",
        "dateTo",
        "award",
        "awardSubType",
        "notes",
        "externalId",
    ]

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwardPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if votes (nullable) is None
        # and model_fields_set contains the field
        if self.votes is None and "votes" in self.model_fields_set:
            _dict["votes"] = None

        # set to None if date_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_from is None and "date_from" in self.model_fields_set:
            _dict["dateFrom"] = None

        # set to None if date_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_to is None and "date_to" in self.model_fields_set:
            _dict["dateTo"] = None

        # set to None if award_sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.award_sub_type is None and "award_sub_type" in self.model_fields_set:
            _dict["awardSubType"] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict["notes"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwardPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "awardId": obj.get("awardId"),
                "personId": obj.get("personId"),
                "entityGroupId": obj.get("entityGroupId"),
                "entityId": obj.get("entityId"),
                "competitionId": obj.get("competitionId"),
                "seasonId": obj.get("seasonId"),
                "fixtureId": obj.get("fixtureId"),
                "votes": obj.get("votes"),
                "dateFrom": obj.get("dateFrom"),
                "dateTo": obj.get("dateTo"),
                "award": obj.get("award"),
                "awardSubType": obj.get("awardSubType"),
                "notes": obj.get("notes"),
                "externalId": obj.get("externalId"),
            }
        )
        return _obj
