# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_entities_model_uniform import FixtureEntitiesModelUniform
from atriumsports.datacore.openapi.models.images_model import ImagesModel
from atriumsports.datacore.openapi.models.uniform_items_model_organization import UniformItemsModelOrganization
from atriumsports.datacore.openapi.models.uniform_items_post_body_colors import UniformItemsPostBodyColors
from typing import Optional, Set
from typing_extensions import Self


class UniformItemsModel(BaseModel):
    """
    UniformItemsModel
    """  # noqa: E501

    uniform_item_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the Uniform Item", alias="uniformItemId"
    )
    uniform_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the uniform", alias="uniformId"
    )
    uniform: Optional[FixtureEntitiesModelUniform] = None
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[UniformItemsModelOrganization] = None
    item_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The type of Uniform Item >- `BOTTOM` Bottom >- `GOALKEEPER_BOTTOM` Goal Keeper Bottom >- `GOALKEEPER_TOP` Goal Keeper Top >- `HELMET` Helmet >- `SOCKS` Socks >- `TOP` Top >- `WARMUP_BOTTOM` Warmup Bottom >- `WARMUP_TOP` Warmup Top ",
        alias="itemType",
    )
    name_local: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the uniform_items in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the uniform_items in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    colors: Optional[UniformItemsPostBodyColors] = None
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    images: Optional[List[ImagesModel]] = None
    __properties: ClassVar[List[str]] = [
        "uniformItemId",
        "uniformId",
        "uniform",
        "organizationId",
        "organization",
        "itemType",
        "nameLocal",
        "nameLatin",
        "colors",
        "updated",
        "added",
        "images",
    ]

    @field_validator("item_type")
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["TOP", "WARMUP_TOP", "WARMUP_BOTTOM", "BOTTOM", "GOALKEEPER_TOP", "GOALKEEPER_BOTTOM", "HELMET", "SOCKS"]
        ):
            raise ValueError(
                "must be one of enum values ('TOP', 'WARMUP_TOP', 'WARMUP_BOTTOM', 'BOTTOM', 'GOALKEEPER_TOP', 'GOALKEEPER_BOTTOM', 'HELMET', 'SOCKS')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniformItemsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of uniform
        if self.uniform:
            _dict["uniform"] = self.uniform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of colors
        if self.colors:
            _dict["colors"] = self.colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict["images"] = _items
        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniformItemsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "uniformItemId": obj.get("uniformItemId"),
                "uniformId": obj.get("uniformId"),
                "uniform": FixtureEntitiesModelUniform.from_dict(obj["uniform"])
                if obj.get("uniform") is not None
                else None,
                "organizationId": obj.get("organizationId"),
                "organization": UniformItemsModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "itemType": obj.get("itemType"),
                "nameLocal": obj.get("nameLocal"),
                "nameLatin": obj.get("nameLatin"),
                "colors": UniformItemsPostBodyColors.from_dict(obj["colors"])
                if obj.get("colors") is not None
                else None,
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "images": [ImagesModel.from_dict(_item) for _item in obj["images"]]
                if obj.get("images") is not None
                else None,
            }
        )
        return _obj
