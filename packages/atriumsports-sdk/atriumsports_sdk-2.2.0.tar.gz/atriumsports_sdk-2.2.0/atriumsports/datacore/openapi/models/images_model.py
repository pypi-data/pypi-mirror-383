# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.images_model_organization import ImagesModelOrganization
from typing import Optional, Set
from typing_extensions import Self


class ImagesModel(BaseModel):
    """
    ImagesModel
    """  # noqa: E501

    image_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the image record", alias="imageId"
    )
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[ImagesModelOrganization] = None
    base_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The object that this image relates to >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `ORGANIZATION` Organization >- `PERSON` Person >- `SEASON` Season >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
        alias="baseType",
    )
    base_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique identifier of the object associated with this image's record. If the `baseType` is `PERSON` then this would be the value of `personId`.",
        alias="baseId",
    )
    file_type: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(
        default=None, description="The type of file >- `JPG` jpg >- `PNG` png >- `SVG` svg ", alias="fileType"
    )
    image_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="Upload Type >- `LOGO` Logo - Not valid for 'PERSON' baseType >- `LOGO_ALTERNATE` Logo (alternate) - Not valid for 'PERSON' baseType >- `LOGO_BACKGROUND` Stylised logo for background purposes - Not valid for 'PERSON' baseType >- `PERSON_HEAD` Head shot (shoulders and head) - Only valid for 'PERSON' baseType >- `PERSON_POSE` Person posing - Only valid for 'PERSON' baseType >- `PERSON_WAIST` Head shot from the waist up - Only valid for 'PERSON' baseType >- `TEAM_PHOTO` Team Photo - Only valid for 'ENTITY' baseType >- `UNIFORM` Uniform >- `UNIFORM_ITEM` Uniform Item ",
        alias="imageType",
    )
    secondary_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="If the image relates to a secondary object. Such as a photo of a person in an entity, then baseType would be PERSON and secondaryType would be ENTITY. >- None None >- `COMPETITION` Competition >- `CONFERENCE` Conference >- `DIVISION` Division >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `LEAGUE` League >- `SEASON` Season ",
        alias="secondaryType",
    )
    secondary_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique identifier of the object associated with the secondaryType",
        alias="secondaryId",
    )
    rating: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The rating given to the quality of the image.  All images are LOW by default but are set ad MEDIUM if they are large enough and have transparency.  Images are only marked as HIGH if they have been manually reviewed.  You should take your use-case into account when you go to use the image. >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium ",
    )
    url: Optional[StrictStr] = Field(
        default=None,
        description="The URL of the image. See [Images](#section/Introduction/Images) for more information.",
    )
    maximum_height: Optional[StrictInt] = Field(
        default=None, description="The maximum height (in pixels) of this image.", alias="maximumHeight"
    )
    maximum_width: Optional[StrictInt] = Field(
        default=None, description="The maximum width (in pixels) of this image.", alias="maximumWidth"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    __properties: ClassVar[List[str]] = [
        "imageId",
        "organizationId",
        "organization",
        "baseType",
        "baseId",
        "fileType",
        "imageType",
        "secondaryType",
        "secondaryId",
        "rating",
        "url",
        "maximumHeight",
        "maximumWidth",
        "updated",
        "added",
    ]

    @field_validator("base_type")
    def base_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE",
                "UNIFORM",
                "UNIFORM_ITEM",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('PERSON', 'ENTITY', 'ENTITYGROUP', 'COMPETITION', 'SEASON', 'LEAGUE', 'ORGANIZATION', 'DIVISION', 'CONFERENCE', 'UNIFORM', 'UNIFORM_ITEM')"
            )
        return value

    @field_validator("file_type")
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["JPG", "PNG", "SVG"]):
            raise ValueError("must be one of enum values ('JPG', 'PNG', 'SVG')")
        return value

    @field_validator("image_type")
    def image_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "LOGO",
                "LOGO_ALTERNATE",
                "LOGO_BACKGROUND",
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "TEAM_PHOTO",
                "UNIFORM",
                "UNIFORM_ITEM",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('LOGO', 'LOGO_ALTERNATE', 'LOGO_BACKGROUND', 'PERSON_HEAD', 'PERSON_WAIST', 'PERSON_POSE', 'TEAM_PHOTO', 'UNIFORM', 'UNIFORM_ITEM')"
            )
        return value

    @field_validator("secondary_type")
    def secondary_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ENTITY", "ENTITYGROUP", "COMPETITION", "SEASON", "LEAGUE", "DIVISION", "CONFERENCE"]):
            raise ValueError(
                "must be one of enum values ('ENTITY', 'ENTITYGROUP', 'COMPETITION', 'SEASON', 'LEAGUE', 'DIVISION', 'CONFERENCE')"
            )
        return value

    @field_validator("rating")
    def rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["LOW", "MEDIUM", "HIGH"]):
            raise ValueError("must be one of enum values ('LOW', 'MEDIUM', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImagesModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "image_id",
                "organization_id",
                "file_type",
                "rating",
                "url",
                "maximum_height",
                "maximum_width",
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # set to None if secondary_type (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_type is None and "secondary_type" in self.model_fields_set:
            _dict["secondaryType"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImagesModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "imageId": obj.get("imageId"),
                "organizationId": obj.get("organizationId"),
                "organization": ImagesModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "baseType": obj.get("baseType"),
                "baseId": obj.get("baseId"),
                "fileType": obj.get("fileType"),
                "imageType": obj.get("imageType"),
                "secondaryType": obj.get("secondaryType"),
                "secondaryId": obj.get("secondaryId"),
                "rating": obj.get("rating"),
                "url": obj.get("url"),
                "maximumHeight": obj.get("maximumHeight"),
                "maximumWidth": obj.get("maximumWidth"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
