# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.fixture_progressions_model_season import FixtureProgressionsModelSeason
from atriumsports.datacore.openapi.models.season_fixture_stages_pools_list_model_pool import (
    SeasonFixtureStagesPoolsListModelPool,
)
from atriumsports.datacore.openapi.models.season_fixture_stages_pools_list_model_stage import (
    SeasonFixtureStagesPoolsListModelStage,
)
from atriumsports.datacore.openapi.models.season_standings_stages_pools_list_model_organization import (
    SeasonStandingsStagesPoolsListModelOrganization,
)
from typing import Optional, Set
from typing_extensions import Self


class SeasonStandingsStagesPoolsListModel(BaseModel):
    """
    SeasonStandingsStagesPoolsListModel
    """  # noqa: E501

    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    season: Optional[FixtureProgressionsModelSeason] = None
    organization_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    organization: Optional[SeasonStandingsStagesPoolsListModelOrganization] = None
    stage_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the stage. (Unique for season)", alias="stageCode"
    )
    stage: Optional[SeasonFixtureStagesPoolsListModelStage] = None
    pool_code: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="A unique code for the pool. (Unique for season)", alias="poolCode"
    )
    pool: Optional[SeasonFixtureStagesPoolsListModelPool] = None
    __properties: ClassVar[List[str]] = [
        "seasonId",
        "season",
        "organizationId",
        "organization",
        "stageCode",
        "stage",
        "poolCode",
        "pool",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeasonStandingsStagesPoolsListModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "organization_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict["season"] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict["stage"] = self.stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool
        if self.pool:
            _dict["pool"] = self.pool.to_dict()
        # set to None if stage_code (nullable) is None
        # and model_fields_set contains the field
        if self.stage_code is None and "stage_code" in self.model_fields_set:
            _dict["stageCode"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeasonStandingsStagesPoolsListModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "seasonId": obj.get("seasonId"),
                "season": FixtureProgressionsModelSeason.from_dict(obj["season"])
                if obj.get("season") is not None
                else None,
                "organizationId": obj.get("organizationId"),
                "organization": SeasonStandingsStagesPoolsListModelOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "stageCode": obj.get("stageCode"),
                "stage": SeasonFixtureStagesPoolsListModelStage.from_dict(obj["stage"])
                if obj.get("stage") is not None
                else None,
                "poolCode": obj.get("poolCode"),
                "pool": SeasonFixtureStagesPoolsListModelPool.from_dict(obj["pool"])
                if obj.get("pool") is not None
                else None,
            }
        )
        return _obj
