# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class UniformsPutBody(BaseModel):
    """
    UniformsPutBody
    """  # noqa: E501

    base_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The object that this uniform relates to >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `PERSON` Person ",
        alias="baseType",
    )
    base_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique identifier of the object associated with this record. If the `baseType` is `ENTITY` then this would be the value of `entityId`.",
        alias="baseId",
    )
    name_local: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the uniforms in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the uniforms in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    date_from: Optional[date] = Field(default=None, description="Date the Uniform is valid from", alias="dateFrom")
    date_to: Optional[date] = Field(default=None, description="Date the Uniform is valid until", alias="dateTo")
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    __properties: ClassVar[List[str]] = [
        "baseType",
        "baseId",
        "nameLocal",
        "nameLatin",
        "dateFrom",
        "dateTo",
        "externalId",
    ]

    @field_validator("base_type")
    def base_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PERSON", "ENTITY", "ENTITYGROUP"]):
            raise ValueError("must be one of enum values ('PERSON', 'ENTITY', 'ENTITYGROUP')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniformsPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if date_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_from is None and "date_from" in self.model_fields_set:
            _dict["dateFrom"] = None

        # set to None if date_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_to is None and "date_to" in self.model_fields_set:
            _dict["dateTo"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniformsPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "baseType": obj.get("baseType"),
                "baseId": obj.get("baseId"),
                "nameLocal": obj.get("nameLocal"),
                "nameLatin": obj.get("nameLatin"),
                "dateFrom": obj.get("dateFrom"),
                "dateTo": obj.get("dateTo"),
                "externalId": obj.get("externalId"),
            }
        )
        return _obj
