# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from atriumsports.datacore.openapi.models.conferences_model import ConferencesModel
from atriumsports.datacore.openapi.models.included_data import IncludedData
from atriumsports.datacore.openapi.models.response_links import ResponseLinks
from atriumsports.datacore.openapi.models.response_meta_data import ResponseMetaData
from typing import Optional, Set
from typing_extensions import Self


class ConferencesResponse(BaseModel):
    """
    ConferencesResponse
    """  # noqa: E501

    meta: Optional[ResponseMetaData] = None
    links: Optional[ResponseLinks] = None
    included: Optional[IncludedData] = None
    data: Optional[List[ConferencesModel]] = None
    __properties: ClassVar[List[str]] = ["meta", "links", "included", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferencesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict["meta"] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict["links"] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of included
        if self.included:
            _dict["included"] = self.included.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict["data"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferencesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "meta": ResponseMetaData.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
                "links": ResponseLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
                "included": IncludedData.from_dict(obj["included"]) if obj.get("included") is not None else None,
                "data": [ConferencesModel.from_dict(_item) for _item in obj["data"]]
                if obj.get("data") is not None
                else None,
            }
        )
        return _obj
