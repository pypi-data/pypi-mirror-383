# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class Broadcasts(BaseModel):
    """
    Broadcasts
    """  # noqa: E501

    broadcast_type: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="Broadcast Type", alias="broadcastType"
    )
    broadcaster: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None, description="Broadcaster Name Local"
    )
    broadcaster_url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(
        default=None, description="Broadcaster Home URL", alias="broadcasterURL"
    )
    broadcast_url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(
        default=None, description="Fixture Broadcast URL", alias="broadcastURL"
    )
    broadcast_timezone: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(
        default=None, description="Timezone of the broadcast", alias="broadcastTimezone"
    )
    locale: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(
        default=None, description="Locale of the broadcast"
    )
    start_time_local: Optional[Any] = Field(
        default=None, description="Start Time of the broadcast", alias="startTimeLocal"
    )
    __properties: ClassVar[List[str]] = [
        "broadcastType",
        "broadcaster",
        "broadcasterURL",
        "broadcastURL",
        "broadcastTimezone",
        "locale",
        "startTimeLocal",
    ]

    @field_validator("broadcast_type")
    def broadcast_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PAY_PER_VIEW", "TV", "RADIO", "STREAMING_AUDIO", "STREAMING_VIDEO"]):
            raise ValueError(
                "must be one of enum values ('PAY_PER_VIEW', 'TV', 'RADIO', 'STREAMING_AUDIO', 'STREAMING_VIDEO')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Broadcasts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_time_local (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_local is None and "start_time_local" in self.model_fields_set:
            _dict["startTimeLocal"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Broadcasts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "broadcastType": obj.get("broadcastType"),
                "broadcaster": obj.get("broadcaster"),
                "broadcasterURL": obj.get("broadcasterURL"),
                "broadcastURL": obj.get("broadcastURL"),
                "broadcastTimezone": obj.get("broadcastTimezone"),
                "locale": obj.get("locale"),
                "startTimeLocal": obj.get("startTimeLocal"),
            }
        )
        return _obj
