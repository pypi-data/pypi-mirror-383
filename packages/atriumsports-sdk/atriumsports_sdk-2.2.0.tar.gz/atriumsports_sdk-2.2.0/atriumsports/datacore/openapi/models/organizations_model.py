# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.images_model import ImagesModel
from typing import Optional, Set
from typing_extensions import Self


class OrganizationsModel(BaseModel):
    """
    OrganizationsModel
    """  # noqa: E501

    organization_id: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]] = Field(
        default=None, description="The unique identifier of the organization", alias="organizationId"
    )
    abbreviation_local: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="abbreviationLocal",
    )
    name_local: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the organization in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameLocal",
    )
    abbreviation_latin: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="abbreviationLatin",
    )
    name_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The name of the organization in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameLatin",
    )
    country_code: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(
        default=None,
        description="Country code of the organization. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
        alias="countryCode",
    )
    region_type: Optional[StrictStr] = Field(
        default=None,
        description="How geographically relevant is this organization >- `INTERNATIONAL` Multiple countries >- `INTERSTATE` Cross state >- `LOCAL` Local area >- `NATIONAL` One country >- `STATE` One state ",
        alias="regionType",
    )
    default_locale: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=5)]] = Field(
        default=None, description="The locale of the video", alias="defaultLocale"
    )
    updated: Optional[datetime] = Field(default=None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(default=None, description="Date/time added. In UTC")
    images: Optional[List[ImagesModel]] = None
    __properties: ClassVar[List[str]] = [
        "organizationId",
        "abbreviationLocal",
        "nameLocal",
        "abbreviationLatin",
        "nameLatin",
        "countryCode",
        "regionType",
        "defaultLocale",
        "updated",
        "added",
        "images",
    ]

    @field_validator("region_type")
    def region_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["LOCAL", "STATE", "INTERSTATE", "NATIONAL", "INTERNATIONAL"]):
            raise ValueError("must be one of enum values ('LOCAL', 'STATE', 'INTERSTATE', 'NATIONAL', 'INTERNATIONAL')")
        return value

    @field_validator("default_locale")
    def default_locale_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z]{2,2}-[A-Z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2,2}-[A-Z]{2,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "updated",
                "added",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict["images"] = _items
        # set to None if abbreviation_local (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_local is None and "abbreviation_local" in self.model_fields_set:
            _dict["abbreviationLocal"] = None

        # set to None if abbreviation_latin (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation_latin is None and "abbreviation_latin" in self.model_fields_set:
            _dict["abbreviationLatin"] = None

        # set to None if name_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_latin is None and "name_latin" in self.model_fields_set:
            _dict["nameLatin"] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict["countryCode"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organizationId": obj.get("organizationId"),
                "abbreviationLocal": obj.get("abbreviationLocal"),
                "nameLocal": obj.get("nameLocal"),
                "abbreviationLatin": obj.get("abbreviationLatin"),
                "nameLatin": obj.get("nameLatin"),
                "countryCode": obj.get("countryCode"),
                "regionType": obj.get("regionType"),
                "defaultLocale": obj.get("defaultLocale"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "images": [ImagesModel.from_dict(_item) for _item in obj["images"]]
                if obj.get("images") is not None
                else None,
            }
        )
        return _obj
