# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.contact_details import ContactDetails
from atriumsports.datacore.openapi.models.entity_additional_details import EntityAdditionalDetails
from atriumsports.datacore.openapi.models.entity_group_address import EntityGroupAddress
from atriumsports.datacore.openapi.models.entity_group_historical_name import EntityGroupHistoricalName
from atriumsports.datacore.openapi.models.entity_group_post_body_additional_names import (
    EntityGroupPostBodyAdditionalNames,
)
from atriumsports.datacore.openapi.models.entity_group_post_body_colors import EntityGroupPostBodyColors
from atriumsports.datacore.openapi.models.social_media import SocialMedia
from typing import Optional, Set
from typing_extensions import Self


class EntityGroupPostBody(BaseModel):
    """
    EntityGroupPostBody
    """  # noqa: E501

    entity_group_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity group", alias="entityGroupId"
    )
    international_reference: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="The international reference for this entity group given by the sport governing body",
        alias="internationalReference",
    )
    status: Annotated[str, Field(strict=True, max_length=30)] = Field(
        description="Status >- `ACTIVE` Active >- `INACTIVE` Inactive >- `PENDING` Pending "
    )
    name_full_local: Annotated[str, Field(strict=True, max_length=150)] = Field(
        description="The full name of the entity group in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="nameFullLocal",
    )
    additional_names: Optional[EntityGroupPostBodyAdditionalNames] = Field(default=None, alias="additionalNames")
    name_full_latin: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None,
        description="The full name of the entity group in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="nameFullLatin",
    )
    code_local: Optional[Annotated[str, Field(strict=True, max_length=5)]] = Field(
        default=None,
        description="The code of the entity group in the [local](#section/Introduction/Character-Sets-and-Names) language",
        alias="codeLocal",
    )
    code_latin: Optional[Annotated[str, Field(strict=True, max_length=5)]] = Field(
        default=None,
        description="The code of the entity group in [latin](#section/Introduction/Character-Sets-and-Names) characters",
        alias="codeLatin",
    )
    address: Optional[EntityGroupAddress] = None
    social: Optional[SocialMedia] = None
    details: Optional[EntityAdditionalDetails] = None
    contacts: Optional[ContactDetails] = None
    colors: Optional[EntityGroupPostBodyColors] = None
    historical_names: Optional[List[EntityGroupHistoricalName]] = Field(
        default=None, description="Array of entity group historical names", alias="historicalNames"
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    default_venue_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the default venue", alias="defaultVenueId"
    )
    alternate_venue_ids: Optional[List[StrictStr]] = Field(default=None, alias="alternateVenueIds")
    __properties: ClassVar[List[str]] = [
        "entityGroupId",
        "internationalReference",
        "status",
        "nameFullLocal",
        "additionalNames",
        "nameFullLatin",
        "codeLocal",
        "codeLatin",
        "address",
        "social",
        "details",
        "contacts",
        "colors",
        "historicalNames",
        "externalId",
        "defaultVenueId",
        "alternateVenueIds",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["ACTIVE", "INACTIVE", "PENDING"]):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'PENDING')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityGroupPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_names
        if self.additional_names:
            _dict["additionalNames"] = self.additional_names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict["address"] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social
        if self.social:
            _dict["social"] = self.social.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict["details"] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict["contacts"] = self.contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of colors
        if self.colors:
            _dict["colors"] = self.colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in historical_names (list)
        _items = []
        if self.historical_names:
            for _item_historical_names in self.historical_names:
                if _item_historical_names:
                    _items.append(_item_historical_names.to_dict())
            _dict["historicalNames"] = _items
        # set to None if international_reference (nullable) is None
        # and model_fields_set contains the field
        if self.international_reference is None and "international_reference" in self.model_fields_set:
            _dict["internationalReference"] = None

        # set to None if name_full_latin (nullable) is None
        # and model_fields_set contains the field
        if self.name_full_latin is None and "name_full_latin" in self.model_fields_set:
            _dict["nameFullLatin"] = None

        # set to None if code_local (nullable) is None
        # and model_fields_set contains the field
        if self.code_local is None and "code_local" in self.model_fields_set:
            _dict["codeLocal"] = None

        # set to None if code_latin (nullable) is None
        # and model_fields_set contains the field
        if self.code_latin is None and "code_latin" in self.model_fields_set:
            _dict["codeLatin"] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict["address"] = None

        # set to None if social (nullable) is None
        # and model_fields_set contains the field
        if self.social is None and "social" in self.model_fields_set:
            _dict["social"] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict["details"] = None

        # set to None if contacts (nullable) is None
        # and model_fields_set contains the field
        if self.contacts is None and "contacts" in self.model_fields_set:
            _dict["contacts"] = None

        # set to None if historical_names (nullable) is None
        # and model_fields_set contains the field
        if self.historical_names is None and "historical_names" in self.model_fields_set:
            _dict["historicalNames"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        # set to None if default_venue_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_venue_id is None and "default_venue_id" in self.model_fields_set:
            _dict["defaultVenueId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityGroupPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "entityGroupId": obj.get("entityGroupId"),
                "internationalReference": obj.get("internationalReference"),
                "status": obj.get("status"),
                "nameFullLocal": obj.get("nameFullLocal"),
                "additionalNames": EntityGroupPostBodyAdditionalNames.from_dict(obj["additionalNames"])
                if obj.get("additionalNames") is not None
                else None,
                "nameFullLatin": obj.get("nameFullLatin"),
                "codeLocal": obj.get("codeLocal"),
                "codeLatin": obj.get("codeLatin"),
                "address": EntityGroupAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
                "social": SocialMedia.from_dict(obj["social"]) if obj.get("social") is not None else None,
                "details": EntityAdditionalDetails.from_dict(obj["details"])
                if obj.get("details") is not None
                else None,
                "contacts": ContactDetails.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
                "colors": EntityGroupPostBodyColors.from_dict(obj["colors"]) if obj.get("colors") is not None else None,
                "historicalNames": [EntityGroupHistoricalName.from_dict(_item) for _item in obj["historicalNames"]]
                if obj.get("historicalNames") is not None
                else None,
                "externalId": obj.get("externalId"),
                "defaultVenueId": obj.get("defaultVenueId"),
                "alternateVenueIds": obj.get("alternateVenueIds"),
            }
        )
        return _obj
