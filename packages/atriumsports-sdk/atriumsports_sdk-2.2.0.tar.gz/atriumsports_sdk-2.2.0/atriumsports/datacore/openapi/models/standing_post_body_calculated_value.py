# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class StandingPostBodyCalculatedValue(BaseModel):
    """
    Type of points
    """  # noqa: E501

    played: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixtures played")
    played_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures played at home", alias="playedHome"
    )
    played_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures played away", alias="playedAway"
    )
    washouts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of washed out fixtures")
    wins: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixtures Won")
    wins_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Won at home", alias="winsHome"
    )
    wins_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Won away", alias="winsAway"
    )
    wins_secondary_score: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Won via Secondary Score", alias="winsSecondaryScore"
    )
    wins_secondary_score_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Won at home via Secondary Score", alias="winsSecondaryScoreHome"
    )
    wins_secondary_score_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Won away via Secondary Score", alias="winsSecondaryScoreAway"
    )
    losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixtures Lost")
    losses_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Lost at home", alias="lossesHome"
    )
    losses_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Lost away", alias="lossesAway"
    )
    losses_secondary_score: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Lost via Secondary Score", alias="lossesSecondaryScore"
    )
    losses_secondary_score_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Lost at home via Secondary Score", alias="lossesSecondaryScoreHome"
    )
    losses_secondary_score_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Lost away via Secondary Score", alias="lossesSecondaryScoreAway"
    )
    draws: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixtures Drawn")
    draws_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Drawn at home", alias="drawsHome"
    )
    draws_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Drawn away", alias="drawsAway"
    )
    byes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fixtures Byes")
    forfeits_given: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Forfeits Given", alias="forfeitsGiven"
    )
    forfeits_won_by: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Fixtures Forfeits Won", alias="forfeitsWonBy"
    )
    win_percentage_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage (wins/played) (Display Value)", alias="winPercentageDisplay"
    )
    win_percentage_home_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage Home (wins/played) (Display Value)", alias="winPercentageHomeDisplay"
    )
    win_percentage_away_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage Away (wins/played) (Display Value)", alias="winPercentageAwayDisplay"
    )
    win_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage (wins/played)", alias="winPercentage"
    )
    win_percentage_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage Home (wins/played)", alias="winPercentageHome"
    )
    win_percentage_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Win Percentage Away (wins/played)", alias="winPercentageAway"
    )
    scored_for: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For", alias="scoredFor"
    )
    scored_for_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For at home", alias="scoredForHome"
    )
    scored_for_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For away", alias="scoredForAway"
    )
    scored_for_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For Average", alias="scoredForAverage"
    )
    scored_for_home_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For Average at home", alias="scoredForHomeAverage"
    )
    scored_for_away_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored For Average away", alias="scoredForAwayAverage"
    )
    scored_against: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against", alias="scoredAgainst"
    )
    scored_against_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against at home", alias="scoredAgainstHome"
    )
    scored_against_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against away", alias="scoredAgainstAway"
    )
    scored_against_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against Average", alias="scoredAgainstAverage"
    )
    scored_against_home_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against Average at home", alias="scoredAgainstHomeAverage"
    )
    scored_against_away_average: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Scored Against Average away", alias="scoredAgainstAwayAverage"
    )
    percentage_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="For versus Against (Display Value)", alias="percentageDisplay"
    )
    percentage_home_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="For versus Against at home (Display Value)", alias="percentageHomeDisplay"
    )
    percentage_away_display: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="For versus Against away (Display Value)", alias="percentageAwayDisplay"
    )
    percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For versus Against")
    percentage_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="For versus Against at home", alias="percentageHome"
    )
    percentage_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="For versus Against away", alias="percentageAway"
    )
    point_difference: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Point Difference for competitor", alias="pointDifference"
    )
    point_difference_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Point Difference for competitor at Home", alias="pointDifferenceHome"
    )
    point_difference_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Point Difference for competitor away", alias="pointDifferenceAway"
    )
    lowest_score_for: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score for competitor", alias="lowestScoreFor"
    )
    lowest_score_for_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score for competitor at Home", alias="lowestScoreForHome"
    )
    lowest_score_for_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score for competitor away", alias="lowestScoreForAway"
    )
    highest_score_for: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score for competitor", alias="highestScoreFor"
    )
    highest_score_for_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score for competitor at Home", alias="highestScoreForHome"
    )
    highest_score_for_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score for competitor away", alias="highestScoreForAway"
    )
    lowest_score_against: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score against competitor", alias="lowestScoreAgainst"
    )
    lowest_score_against_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score against competitor at Home", alias="lowestScoreAgainstHome"
    )
    lowest_score_against_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lowest Score against competitor away", alias="lowestScoreAgainstAway"
    )
    highest_score_against: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score against competitor", alias="highestScoreAgainst"
    )
    highest_score_against_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score against competitor at Home", alias="highestScoreAgainstHome"
    )
    highest_score_against_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Highest Score against competitor away", alias="highestScoreAgainstAway"
    )
    streak: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Winning streak for competitor")
    streak_home: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Winning streak for competitor at Home", alias="streakHome"
    )
    streak_away: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Winning streak for competitor away", alias="streakAway"
    )
    result_string: Optional[StrictStr] = Field(
        default=None, description="Result string for competitor (W,L,D per match)", alias="resultString"
    )
    result_string_home: Optional[StrictStr] = Field(
        default=None, description="Result string for competitor at Home (W,L,D per match)", alias="resultStringHome"
    )
    result_string_away: Optional[StrictStr] = Field(
        default=None, description="Result string for competitor away (W,L,D per match)", alias="resultStringAway"
    )
    __properties: ClassVar[List[str]] = [
        "played",
        "playedHome",
        "playedAway",
        "washouts",
        "wins",
        "winsHome",
        "winsAway",
        "winsSecondaryScore",
        "winsSecondaryScoreHome",
        "winsSecondaryScoreAway",
        "losses",
        "lossesHome",
        "lossesAway",
        "lossesSecondaryScore",
        "lossesSecondaryScoreHome",
        "lossesSecondaryScoreAway",
        "draws",
        "drawsHome",
        "drawsAway",
        "byes",
        "forfeitsGiven",
        "forfeitsWonBy",
        "winPercentageDisplay",
        "winPercentageHomeDisplay",
        "winPercentageAwayDisplay",
        "winPercentage",
        "winPercentageHome",
        "winPercentageAway",
        "scoredFor",
        "scoredForHome",
        "scoredForAway",
        "scoredForAverage",
        "scoredForHomeAverage",
        "scoredForAwayAverage",
        "scoredAgainst",
        "scoredAgainstHome",
        "scoredAgainstAway",
        "scoredAgainstAverage",
        "scoredAgainstHomeAverage",
        "scoredAgainstAwayAverage",
        "percentageDisplay",
        "percentageHomeDisplay",
        "percentageAwayDisplay",
        "percentage",
        "percentageHome",
        "percentageAway",
        "pointDifference",
        "pointDifferenceHome",
        "pointDifferenceAway",
        "lowestScoreFor",
        "lowestScoreForHome",
        "lowestScoreForAway",
        "highestScoreFor",
        "highestScoreForHome",
        "highestScoreForAway",
        "lowestScoreAgainst",
        "lowestScoreAgainstHome",
        "lowestScoreAgainstAway",
        "highestScoreAgainst",
        "highestScoreAgainstHome",
        "highestScoreAgainstAway",
        "streak",
        "streakHome",
        "streakAway",
        "resultString",
        "resultStringHome",
        "resultStringAway",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandingPostBodyCalculatedValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if lowest_score_for (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_for is None and "lowest_score_for" in self.model_fields_set:
            _dict["lowestScoreFor"] = None

        # set to None if lowest_score_for_home (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_for_home is None and "lowest_score_for_home" in self.model_fields_set:
            _dict["lowestScoreForHome"] = None

        # set to None if lowest_score_for_away (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_for_away is None and "lowest_score_for_away" in self.model_fields_set:
            _dict["lowestScoreForAway"] = None

        # set to None if highest_score_for (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_for is None and "highest_score_for" in self.model_fields_set:
            _dict["highestScoreFor"] = None

        # set to None if highest_score_for_home (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_for_home is None and "highest_score_for_home" in self.model_fields_set:
            _dict["highestScoreForHome"] = None

        # set to None if highest_score_for_away (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_for_away is None and "highest_score_for_away" in self.model_fields_set:
            _dict["highestScoreForAway"] = None

        # set to None if lowest_score_against (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_against is None and "lowest_score_against" in self.model_fields_set:
            _dict["lowestScoreAgainst"] = None

        # set to None if lowest_score_against_home (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_against_home is None and "lowest_score_against_home" in self.model_fields_set:
            _dict["lowestScoreAgainstHome"] = None

        # set to None if lowest_score_against_away (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_score_against_away is None and "lowest_score_against_away" in self.model_fields_set:
            _dict["lowestScoreAgainstAway"] = None

        # set to None if highest_score_against (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_against is None and "highest_score_against" in self.model_fields_set:
            _dict["highestScoreAgainst"] = None

        # set to None if highest_score_against_home (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_against_home is None and "highest_score_against_home" in self.model_fields_set:
            _dict["highestScoreAgainstHome"] = None

        # set to None if highest_score_against_away (nullable) is None
        # and model_fields_set contains the field
        if self.highest_score_against_away is None and "highest_score_against_away" in self.model_fields_set:
            _dict["highestScoreAgainstAway"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandingPostBodyCalculatedValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "played": obj.get("played"),
                "playedHome": obj.get("playedHome"),
                "playedAway": obj.get("playedAway"),
                "washouts": obj.get("washouts"),
                "wins": obj.get("wins"),
                "winsHome": obj.get("winsHome"),
                "winsAway": obj.get("winsAway"),
                "winsSecondaryScore": obj.get("winsSecondaryScore"),
                "winsSecondaryScoreHome": obj.get("winsSecondaryScoreHome"),
                "winsSecondaryScoreAway": obj.get("winsSecondaryScoreAway"),
                "losses": obj.get("losses"),
                "lossesHome": obj.get("lossesHome"),
                "lossesAway": obj.get("lossesAway"),
                "lossesSecondaryScore": obj.get("lossesSecondaryScore"),
                "lossesSecondaryScoreHome": obj.get("lossesSecondaryScoreHome"),
                "lossesSecondaryScoreAway": obj.get("lossesSecondaryScoreAway"),
                "draws": obj.get("draws"),
                "drawsHome": obj.get("drawsHome"),
                "drawsAway": obj.get("drawsAway"),
                "byes": obj.get("byes"),
                "forfeitsGiven": obj.get("forfeitsGiven"),
                "forfeitsWonBy": obj.get("forfeitsWonBy"),
                "winPercentageDisplay": obj.get("winPercentageDisplay"),
                "winPercentageHomeDisplay": obj.get("winPercentageHomeDisplay"),
                "winPercentageAwayDisplay": obj.get("winPercentageAwayDisplay"),
                "winPercentage": obj.get("winPercentage"),
                "winPercentageHome": obj.get("winPercentageHome"),
                "winPercentageAway": obj.get("winPercentageAway"),
                "scoredFor": obj.get("scoredFor"),
                "scoredForHome": obj.get("scoredForHome"),
                "scoredForAway": obj.get("scoredForAway"),
                "scoredForAverage": obj.get("scoredForAverage"),
                "scoredForHomeAverage": obj.get("scoredForHomeAverage"),
                "scoredForAwayAverage": obj.get("scoredForAwayAverage"),
                "scoredAgainst": obj.get("scoredAgainst"),
                "scoredAgainstHome": obj.get("scoredAgainstHome"),
                "scoredAgainstAway": obj.get("scoredAgainstAway"),
                "scoredAgainstAverage": obj.get("scoredAgainstAverage"),
                "scoredAgainstHomeAverage": obj.get("scoredAgainstHomeAverage"),
                "scoredAgainstAwayAverage": obj.get("scoredAgainstAwayAverage"),
                "percentageDisplay": obj.get("percentageDisplay"),
                "percentageHomeDisplay": obj.get("percentageHomeDisplay"),
                "percentageAwayDisplay": obj.get("percentageAwayDisplay"),
                "percentage": obj.get("percentage"),
                "percentageHome": obj.get("percentageHome"),
                "percentageAway": obj.get("percentageAway"),
                "pointDifference": obj.get("pointDifference"),
                "pointDifferenceHome": obj.get("pointDifferenceHome"),
                "pointDifferenceAway": obj.get("pointDifferenceAway"),
                "lowestScoreFor": obj.get("lowestScoreFor"),
                "lowestScoreForHome": obj.get("lowestScoreForHome"),
                "lowestScoreForAway": obj.get("lowestScoreForAway"),
                "highestScoreFor": obj.get("highestScoreFor"),
                "highestScoreForHome": obj.get("highestScoreForHome"),
                "highestScoreForAway": obj.get("highestScoreForAway"),
                "lowestScoreAgainst": obj.get("lowestScoreAgainst"),
                "lowestScoreAgainstHome": obj.get("lowestScoreAgainstHome"),
                "lowestScoreAgainstAway": obj.get("lowestScoreAgainstAway"),
                "highestScoreAgainst": obj.get("highestScoreAgainst"),
                "highestScoreAgainstHome": obj.get("highestScoreAgainstHome"),
                "highestScoreAgainstAway": obj.get("highestScoreAgainstAway"),
                "streak": obj.get("streak"),
                "streakHome": obj.get("streakHome"),
                "streakAway": obj.get("streakAway"),
                "resultString": obj.get("resultString"),
                "resultStringHome": obj.get("resultStringHome"),
                "resultStringAway": obj.get("resultStringAway"),
            }
        )
        return _obj
