# coding: utf-8

"""
DataCore API  - Sport

For more details, see openapi/init.py

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from atriumsports.datacore.openapi.models.conduct_penalty_result import ConductPenaltyResult
from typing import Optional, Set
from typing_extensions import Self


class ConductPostBody(BaseModel):
    """
    ConductPostBody
    """  # noqa: E501

    conduct_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the conduct", alias="conductId"
    )
    person_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the person", alias="personId"
    )
    entity_group_id: Optional[StrictStr] = Field(
        default=None, description="The entity group that this entity belongs to", alias="entityGroupId"
    )
    entity_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the entity", alias="entityId"
    )
    venue_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the venue", alias="venueId"
    )
    fixture_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the fixture", alias="fixtureId"
    )
    season_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the season", alias="seasonId"
    )
    competition_id: Optional[StrictStr] = Field(
        default=None, description="The unique identifier of the competition", alias="competitionId"
    )
    bib: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The number displayed on the jersey"
    )
    location_other: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The location where the incident occurred", alias="locationOther"
    )
    event_id: Optional[StrictStr] = Field(
        default=None, description="The ~event~ that this conduct is linked to", alias="eventId"
    )
    period_id: Optional[StrictInt] = Field(default=None, description="The identifier for the period", alias="periodId")
    section: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description="The section of the period (sub-period)"
    )
    fixture_clock: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(
        default=None, description="Fixture clock when the incident occurred", alias="fixtureClock"
    )
    role: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None,
        description="The role of person >- None None >- `CAPTAIN` Captain >- `CAPTAIN_VICE` Vice Captain >- `CEO` CEO >- `COACH` Coach >- `COACH_ASSISTANT` Assistant Coach >- `COACH_ASSISTANT_HEAD` Assistant Head Coach >- `COACH_ASSOCIATE_HEAD` Associate Head Coach >- `COACH_DEVELOPMENT` Development Coach >- `COACH_HEAD` Head Coach >- `COACH_HEAD_INTERIM` Interim Head Coach >- `COACH_OTHER` Other coaching staff >- `COACH_SC` Strengh and Conditioning Coach >- `COACH_SENIOR` Senior Coach >- `COACH_SPECIALIST` Specialist Coach >- `COMMISSIONER` Commissioner >- `COMMITTEE` Committee >- `CREW_CHIEF` Crew Chief >- `DIRECTOR` Director >- `DOCTOR` Doctor >- `GENERAL` General >- `GROUNDSKEEPER` Groundskeeper >- `JUDGE_SCORING` Scoring Judge (SJ) >- `JUDGE_TIMING` Timing Judge (TJ) >- `MANAGER` Manager >- `MATCH_OFFICIAL` Match Official >- `MEDIA_OFFICER` Media Officer >- `MEDICAL_STAFF` Medical Staff >- `OTHER` Other >- `PHYSIOTHERAPIST` Physiotherapist >- `PRESIDENT` President >- `PRESIDENT_VICE` Vice President >- `REFEREE` Referee >- `REFEREE_ASSISTANT` Referee Assistant >- `REFEREE_ASSISTANT_RESERVE` Reserve Assistant Referee >- `REFEREE_RESERVE` Reserve Referee >- `SCOREKEEPER` Scorekeeper >- `SCOREKEEPER_ASSISTANT` Assistant Scorekeeper >- `SCORER` Scorer >- `SCORER_ASSISTANT` Assistant Scorer >- `SECRETARY` Secretary >- `STATISTICIAN` Statistician >- `TECHNICAL_OFFICIAL` Technical Official (TO) >- `TIMEKEEPER` Timekeeper >- `TIMER` Timer >- `TRAINER` Trainer >- `TRAINER_ASSISTANT` Assitant Trainer >- `TRANSLATOR` Translator >- `TREASURER` Treasurer >- `UMPIRE` Umpire >- `UMPIRE_RESERVE` Reserve Umpire (RU) >- `UMPIRE_VIDEO` Video Umpire (VU) >- `VIDEO_TECHNICIAN` Video Technician (VT) ",
    )
    date_offence_local: Optional[datetime] = Field(
        default=None, description="Date & Time of the Offence in the local timezone", alias="dateOffenceLocal"
    )
    conduct_type: Annotated[List[StrictStr], Field(min_length=1)] = Field(alias="conductType")
    conduct_notes: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(
        default=None, description="Notes of the Conduct incident", alias="conductNotes"
    )
    date_hearing_local: Optional[date] = Field(default=None, description="Date hearing", alias="dateHearingLocal")
    hearing_notes: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(
        default=None, description="Notes from the conduct hearing", alias="hearingNotes"
    )
    hearing_status: Optional[StrictStr] = Field(
        default=None,
        description="Conduct hearing status >- None None >- `FINALIZED` Finalized >- `PENDING` Pending ",
        alias="hearingStatus",
    )
    life_sentence: Optional[StrictBool] = Field(
        default=None, description="Was the result of the conduct hearing a life sentence?", alias="lifeSentence"
    )
    penalty_results: Optional[List[Optional[ConductPenaltyResult]]] = Field(default=None, alias="penaltyResults")
    fine_amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Conduct fine amount", alias="fineAmount"
    )
    fine_currency: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(
        default=None, description="Fine currency", alias="fineCurrency"
    )
    fine_status: Optional[StrictStr] = Field(
        default=None,
        description="Conduct fine due status >- None None >- `CANCELLED` Cancelled >- `ISSUED` Issued >- `OTHER` Other >- `PAID` Paid >- `UNPAID` Unpaid ",
        alias="fineStatus",
    )
    date_suspended_to: Optional[date] = Field(
        default=None, description="Date the suspension ended", alias="dateSuspendedTo"
    )
    date_suspended_from: Optional[date] = Field(
        default=None, description="Date the suspension started", alias="dateSuspendedFrom"
    )
    date_fine_paid_local: Optional[date] = Field(
        default=None, description="Date the fine was paid", alias="dateFinePaidLocal"
    )
    status: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(
        default=None,
        description="Conduct status >- None None >- `ACTIVE` Active >- `CLOSED` Closed >- `COMPLETE` Complete >- `INACTIVE` Inactive >- `PENDING` Pending ",
    )
    external_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description="The Id of the data as set by the provider of the data", alias="externalId"
    )
    __properties: ClassVar[List[str]] = [
        "conductId",
        "personId",
        "entityGroupId",
        "entityId",
        "venueId",
        "fixtureId",
        "seasonId",
        "competitionId",
        "bib",
        "locationOther",
        "eventId",
        "periodId",
        "section",
        "fixtureClock",
        "role",
        "dateOffenceLocal",
        "conductType",
        "conductNotes",
        "dateHearingLocal",
        "hearingNotes",
        "hearingStatus",
        "lifeSentence",
        "penaltyResults",
        "fineAmount",
        "fineCurrency",
        "fineStatus",
        "dateSuspendedTo",
        "dateSuspendedFrom",
        "dateFinePaidLocal",
        "status",
        "externalId",
    ]

    @field_validator("role")
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "COACH",
                "COACH_HEAD",
                "COACH_HEAD_INTERIM",
                "COACH_ASSISTANT",
                "COACH_ASSISTANT_HEAD",
                "COACH_ASSOCIATE_HEAD",
                "COACH_SC",
                "COACH_SENIOR",
                "COACH_DEVELOPMENT",
                "COACH_SPECIALIST",
                "COACH_OTHER",
                "CAPTAIN",
                "CAPTAIN_VICE",
                "DOCTOR",
                "PHYSIOTHERAPIST",
                "MEDICAL_STAFF",
                "TRAINER",
                "TRAINER_ASSISTANT",
                "MATCH_OFFICIAL",
                "COMMISSIONER",
                "STATISTICIAN",
                "SCOREKEEPER",
                "SCOREKEEPER_ASSISTANT",
                "TIMEKEEPER",
                "SCORER",
                "SCORER_ASSISTANT",
                "TIMER",
                "GROUNDSKEEPER",
                "CEO",
                "COMMITTEE",
                "PRESIDENT",
                "DIRECTOR",
                "PRESIDENT_VICE",
                "SECRETARY",
                "TREASURER",
                "MANAGER",
                "GENERAL",
                "OTHER",
                "REFEREE",
                "UMPIRE",
                "REFEREE_ASSISTANT",
                "REFEREE_RESERVE",
                "REFEREE_ASSISTANT_RESERVE",
                "CREW_CHIEF",
                "UMPIRE_RESERVE",
                "UMPIRE_VIDEO",
                "JUDGE_SCORING",
                "JUDGE_TIMING",
                "TECHNICAL_OFFICIAL",
                "VIDEO_TECHNICIAN",
                "TRANSLATOR",
                "MEDIA_OFFICER",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('COACH', 'COACH_HEAD', 'COACH_HEAD_INTERIM', 'COACH_ASSISTANT', 'COACH_ASSISTANT_HEAD', 'COACH_ASSOCIATE_HEAD', 'COACH_SC', 'COACH_SENIOR', 'COACH_DEVELOPMENT', 'COACH_SPECIALIST', 'COACH_OTHER', 'CAPTAIN', 'CAPTAIN_VICE', 'DOCTOR', 'PHYSIOTHERAPIST', 'MEDICAL_STAFF', 'TRAINER', 'TRAINER_ASSISTANT', 'MATCH_OFFICIAL', 'COMMISSIONER', 'STATISTICIAN', 'SCOREKEEPER', 'SCOREKEEPER_ASSISTANT', 'TIMEKEEPER', 'SCORER', 'SCORER_ASSISTANT', 'TIMER', 'GROUNDSKEEPER', 'CEO', 'COMMITTEE', 'PRESIDENT', 'DIRECTOR', 'PRESIDENT_VICE', 'SECRETARY', 'TREASURER', 'MANAGER', 'GENERAL', 'OTHER', 'REFEREE', 'UMPIRE', 'REFEREE_ASSISTANT', 'REFEREE_RESERVE', 'REFEREE_ASSISTANT_RESERVE', 'CREW_CHIEF', 'UMPIRE_RESERVE', 'UMPIRE_VIDEO', 'JUDGE_SCORING', 'JUDGE_TIMING', 'TECHNICAL_OFFICIAL', 'VIDEO_TECHNICIAN', 'TRANSLATOR', 'MEDIA_OFFICER')"
            )
        return value

    @field_validator("conduct_type")
    def conduct_type_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(
                [
                    "SWEARING",
                    "CORRUPTION",
                    "VIOLENT_CONDUCT",
                    "MATCH_FIXING",
                    "CITATION",
                    "UNSPORTSMANLIKE_CONDUCT",
                    "DOPING",
                    "CONCUSSION",
                ]
            ):
                raise ValueError(
                    "each list item must be one of ('SWEARING', 'CORRUPTION', 'VIOLENT_CONDUCT', 'MATCH_FIXING', 'CITATION', 'UNSPORTSMANLIKE_CONDUCT', 'DOPING', 'CONCUSSION')"
                )
        return value

    @field_validator("hearing_status")
    def hearing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "FINALIZED"]):
            raise ValueError("must be one of enum values ('PENDING', 'FINALIZED')")
        return value

    @field_validator("fine_status")
    def fine_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ISSUED", "PAID", "UNPAID", "CANCELLED", "OTHER"]):
            raise ValueError("must be one of enum values ('ISSUED', 'PAID', 'UNPAID', 'CANCELLED', 'OTHER')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ACTIVE", "INACTIVE", "PENDING", "COMPLETE", "CLOSED"]):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'PENDING', 'COMPLETE', 'CLOSED')")
        return value

    @field_validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConductPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in penalty_results (list)
        _items = []
        if self.penalty_results:
            for _item_penalty_results in self.penalty_results:
                if _item_penalty_results:
                    _items.append(_item_penalty_results.to_dict())
            _dict["penaltyResults"] = _items
        # set to None if bib (nullable) is None
        # and model_fields_set contains the field
        if self.bib is None and "bib" in self.model_fields_set:
            _dict["bib"] = None

        # set to None if location_other (nullable) is None
        # and model_fields_set contains the field
        if self.location_other is None and "location_other" in self.model_fields_set:
            _dict["locationOther"] = None

        # set to None if fixture_clock (nullable) is None
        # and model_fields_set contains the field
        if self.fixture_clock is None and "fixture_clock" in self.model_fields_set:
            _dict["fixtureClock"] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict["role"] = None

        # set to None if date_offence_local (nullable) is None
        # and model_fields_set contains the field
        if self.date_offence_local is None and "date_offence_local" in self.model_fields_set:
            _dict["dateOffenceLocal"] = None

        # set to None if conduct_notes (nullable) is None
        # and model_fields_set contains the field
        if self.conduct_notes is None and "conduct_notes" in self.model_fields_set:
            _dict["conductNotes"] = None

        # set to None if date_hearing_local (nullable) is None
        # and model_fields_set contains the field
        if self.date_hearing_local is None and "date_hearing_local" in self.model_fields_set:
            _dict["dateHearingLocal"] = None

        # set to None if hearing_notes (nullable) is None
        # and model_fields_set contains the field
        if self.hearing_notes is None and "hearing_notes" in self.model_fields_set:
            _dict["hearingNotes"] = None

        # set to None if hearing_status (nullable) is None
        # and model_fields_set contains the field
        if self.hearing_status is None and "hearing_status" in self.model_fields_set:
            _dict["hearingStatus"] = None

        # set to None if fine_currency (nullable) is None
        # and model_fields_set contains the field
        if self.fine_currency is None and "fine_currency" in self.model_fields_set:
            _dict["fineCurrency"] = None

        # set to None if fine_status (nullable) is None
        # and model_fields_set contains the field
        if self.fine_status is None and "fine_status" in self.model_fields_set:
            _dict["fineStatus"] = None

        # set to None if date_suspended_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_suspended_to is None and "date_suspended_to" in self.model_fields_set:
            _dict["dateSuspendedTo"] = None

        # set to None if date_suspended_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_suspended_from is None and "date_suspended_from" in self.model_fields_set:
            _dict["dateSuspendedFrom"] = None

        # set to None if date_fine_paid_local (nullable) is None
        # and model_fields_set contains the field
        if self.date_fine_paid_local is None and "date_fine_paid_local" in self.model_fields_set:
            _dict["dateFinePaidLocal"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConductPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "conductId": obj.get("conductId"),
                "personId": obj.get("personId"),
                "entityGroupId": obj.get("entityGroupId"),
                "entityId": obj.get("entityId"),
                "venueId": obj.get("venueId"),
                "fixtureId": obj.get("fixtureId"),
                "seasonId": obj.get("seasonId"),
                "competitionId": obj.get("competitionId"),
                "bib": obj.get("bib"),
                "locationOther": obj.get("locationOther"),
                "eventId": obj.get("eventId"),
                "periodId": obj.get("periodId"),
                "section": obj.get("section"),
                "fixtureClock": obj.get("fixtureClock"),
                "role": obj.get("role"),
                "dateOffenceLocal": obj.get("dateOffenceLocal"),
                "conductType": obj.get("conductType"),
                "conductNotes": obj.get("conductNotes"),
                "dateHearingLocal": obj.get("dateHearingLocal"),
                "hearingNotes": obj.get("hearingNotes"),
                "hearingStatus": obj.get("hearingStatus"),
                "lifeSentence": obj.get("lifeSentence"),
                "penaltyResults": [ConductPenaltyResult.from_dict(_item) for _item in obj["penaltyResults"]]
                if obj.get("penaltyResults") is not None
                else None,
                "fineAmount": obj.get("fineAmount"),
                "fineCurrency": obj.get("fineCurrency"),
                "fineStatus": obj.get("fineStatus"),
                "dateSuspendedTo": obj.get("dateSuspendedTo"),
                "dateSuspendedFrom": obj.get("dateSuspendedFrom"),
                "dateFinePaidLocal": obj.get("dateFinePaidLocal"),
                "status": obj.get("status"),
                "externalId": obj.get("externalId"),
            }
        )
        return _obj
