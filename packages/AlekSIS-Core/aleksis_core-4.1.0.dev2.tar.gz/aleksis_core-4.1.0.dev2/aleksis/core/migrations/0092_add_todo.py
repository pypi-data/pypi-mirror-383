# Generated by Django 5.2.1 on 2025-05-18 10:30

import aleksis.core.mixins
import ckeditor.fields
import colorfield.fields
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0091_add_ical_vcard_role'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('calendarevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.calendarevent')),
                ('percent_complete', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Percent completed')),
                ('completed', models.DateTimeField(blank=True, null=True, verbose_name='Completed on')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Location')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_todos', to='core.todo', verbose_name='Parent todo')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.calendarevent',),
        ),
        migrations.CreateModel(
            name='PersonalTodo',
            fields=[
                ('todo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.todo')),
                ('groups', models.ManyToManyField(blank=True, related_name='+', to='core.group')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_personal_todos', to='core.person', verbose_name='Owner')),
                ('persons', models.ManyToManyField(blank=True, related_name='+', to='core.person')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.todo',),
        ),
    ]
