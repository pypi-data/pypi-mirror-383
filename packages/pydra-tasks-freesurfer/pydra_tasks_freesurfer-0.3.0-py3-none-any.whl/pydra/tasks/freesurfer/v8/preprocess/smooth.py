import attrs
from fileformats.generic import Directory
from fileformats.medimage import Nifti1
from fileformats.vendor.freesurfer.medimage import Dat
import logging
from pydra.tasks.freesurfer.v8.nipype_ports.utils.filemanip import fname_presuffix
from pathlib import Path
from pathlib import Path
from pydra.compose import shell
import typing as ty


logger = logging.getLogger(__name__)


def _gen_filename(name, inputs):
    if name == "smoothed_file":
        return _list_outputs(
            in_file=inputs["in_file"], smoothed_file=inputs["smoothed_file"]
        )[name]
    return None


def smoothed_file_default(inputs):
    return _gen_filename("smoothed_file", inputs=inputs)


@shell.define(xor=[["num_iters", "surface_fwhm"], ["proj_frac", "proj_frac_avg"]])
class Smooth(shell.Task["Smooth.Outputs"]):
    """
    Examples
    -------

    >>> from fileformats.generic import Directory
    >>> from fileformats.medimage import Nifti1
    >>> from fileformats.vendor.freesurfer.medimage import Dat
    >>> from pathlib import Path
    >>> from pydra.tasks.freesurfer.v8.preprocess.smooth import Smooth

    >>> task = Smooth()
    >>> task.in_file = Nifti1.mock("functional.nii")
    >>> task.reg_file = Dat.mock("register.dat")
    >>> task.smoothed_file = "foo_out.nii"
    >>> task.surface_fwhm = 10
    >>> task.vol_fwhm = 6
    >>> task.subjects_dir = Directory.mock()
    >>> task.cmdline
    'mris_volsmooth --i functional.nii --reg register.dat --o foo_out.nii --fwhm 10.000000 --vol-fwhm 6.000000'


    """

    executable = "mris_volsmooth"
    in_file: Nifti1 = shell.arg(help="source volume", argstr="--i {in_file}")
    reg_file: Dat = shell.arg(
        help="registers volume to surface anatomical ", argstr="--reg {reg_file}"
    )
    proj_frac_avg: ty.Any | None = shell.arg(
        help="average a long normal min max delta",
        argstr="--projfrac-avg {proj_frac_avg[0]:.2} {proj_frac_avg[1]:.2} {proj_frac_avg[2]:.2}",
    )
    proj_frac: float | None = shell.arg(
        help="project frac of thickness a long surface normal",
        argstr="--projfrac {proj_frac}",
    )
    surface_fwhm: ty.Any | None = shell.arg(
        help="surface FWHM in mm", argstr="--fwhm {surface_fwhm}", requires=["reg_file"]
    )
    num_iters: ty.Any | None = shell.arg(
        help="number of iterations instead of fwhm", argstr="--niters {num_iters}"
    )
    vol_fwhm: ty.Any = shell.arg(
        help="volume smoothing outside of surface", argstr="--vol-fwhm {vol_fwhm}"
    )
    subjects_dir: Directory = shell.arg(help="subjects directory")

    class Outputs(shell.Outputs):
        smoothed_file: Path = shell.outarg(
            help="output volume",
            argstr="--o {smoothed_file}",
            path_template='"foo_out.nii"',
        )


def _gen_fname(basename, fname=None, cwd=None, suffix="_fs", use_ext=True):
    """Define a generic mapping for a single outfile

    The filename is potentially autogenerated by suffixing inputs.infile

    Parameters
    ----------
    basename : string (required)
        filename to base the new filename on
    fname : string
        if not None, just use this fname
    cwd : string
        prefix paths with cwd, otherwise output_dir
    suffix : string
        default suffix
    """
    if basename == "":
        msg = "Unable to generate filename for command %s. " % "mris_volsmooth"
        msg += "basename is not set!"
        raise ValueError(msg)
    if cwd is None:
        cwd = output_dir
    fname = fname_presuffix(basename, suffix=suffix, use_ext=use_ext, newpath=cwd)
    return fname


def _list_outputs(in_file=None, smoothed_file=None):
    outputs = {}
    outfile = smoothed_file
    if outfile is attrs.NOTHING:
        outfile = _gen_fname(in_file, suffix="_smooth")
    outputs["smoothed_file"] = outfile
    return outputs
