import attrs
from fileformats.generic import Directory, File
from fileformats.medimage import MghGz
import logging
from pydra.tasks.freesurfer.v8.nipype_ports.utils.filemanip import fname_presuffix
from pathlib import Path
from pathlib import Path
from pydra.compose import shell


logger = logging.getLogger(__name__)


def _gen_filename(name, inputs):
    if name == "out_file":
        return _list_outputs(
            flip_angle=inputs["flip_angle"], out_file=inputs["out_file"]
        )["out_file"]
    return None


def out_file_default(inputs):
    return _gen_filename("out_file", inputs=inputs)


@shell.define
class SynthesizeFLASH(shell.Task["SynthesizeFLASH.Outputs"]):
    """
    Examples
    -------

    >>> from fileformats.generic import Directory, File
    >>> from fileformats.medimage import MghGz
    >>> from pathlib import Path
    >>> from pydra.tasks.freesurfer.v8.preprocess.synthesize_flash import SynthesizeFLASH

    >>> task = SynthesizeFLASH()
    >>> task.tr = 20
    >>> task.flip_angle = 30
    >>> task.te = 3
    >>> task.t1_image = MghGz.mock("T1.mgz")
    >>> task.pd_image = File.mock()
    >>> task.out_file = "flash_30syn.mgz"
    >>> task.subjects_dir = Directory.mock()
    >>> task.cmdline
    'None'


    """

    executable = "mri_synthesize"
    fixed_weighting: bool = shell.arg(
        help="use a fixed weighting to generate optimal gray/white contrast",
        argstr="-w",
        position=1,
    )
    tr: float = shell.arg(
        help="repetition time (in msec)", argstr="{tr:.2}", position=2
    )
    flip_angle: float = shell.arg(
        help="flip angle (in degrees)", argstr="{flip_angle:.2}", position=3
    )
    te: float = shell.arg(help="echo time (in msec)", argstr="{te:.3}", position=4)
    t1_image: MghGz = shell.arg(
        help="image of T1 values", argstr="{t1_image}", position=5
    )
    pd_image: File = shell.arg(
        help="image of proton density values", argstr="{pd_image}", position=6
    )
    subjects_dir: Directory = shell.arg(help="subjects directory")

    class Outputs(shell.Outputs):
        out_file: Path = shell.outarg(
            help="image to write",
            argstr="{out_file}",
            path_template='"flash_30syn.mgz"',
        )


def _gen_fname(basename, fname=None, cwd=None, suffix="_fs", use_ext=True):
    """Define a generic mapping for a single outfile

    The filename is potentially autogenerated by suffixing inputs.infile

    Parameters
    ----------
    basename : string (required)
        filename to base the new filename on
    fname : string
        if not None, just use this fname
    cwd : string
        prefix paths with cwd, otherwise output_dir
    suffix : string
        default suffix
    """
    if basename == "":
        msg = "Unable to generate filename for command %s. " % "mri_synthesize"
        msg += "basename is not set!"
        raise ValueError(msg)
    if cwd is None:
        cwd = output_dir
    fname = fname_presuffix(basename, suffix=suffix, use_ext=use_ext, newpath=cwd)
    return fname


def _list_outputs(flip_angle=None, out_file=None):
    outputs = {}
    if out_file is not attrs.NOTHING:
        outputs["out_file"] = out_file
    else:
        outputs["out_file"] = _gen_fname("synth-flash_%02d.mgz" % flip_angle, suffix="")
    return outputs
