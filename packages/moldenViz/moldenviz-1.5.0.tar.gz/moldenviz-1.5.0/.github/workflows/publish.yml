name: Publish to PyPI and Create Release
permissions:
  contents: write  # Changed from 'read' to 'write' to allow creating releases

on:
  push:
    tags:
      - '*'

jobs:
  test-and-publish:
    # Only run on tag pushes
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for release notes generation
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk gh
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch

    - name: Run Ruff
      run: |
        hatch run lint

    - name: Run Basedpyright
      run: |
        hatch run typecheck

    - name: Run Pytest
      run: |
        hatch run test
        
    - name: Verify package version matches tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        TAG_VERSION_STRIPPED=${TAG_VERSION#v}
        PACKAGE_VERSION=$(hatch run python -c "from moldenViz.__about__ import __version__; print(__version__)")
        if [ "$TAG_VERSION_STRIPPED" != "$PACKAGE_VERSION" ]; then
          echo "Tag version ($TAG_VERSION) does not match package version ($PACKAGE_VERSION)"
          exit 1
        fi
        echo "Version check passed: $PACKAGE_VERSION"
        
    - name: Build package
      run: |
        hatch build
        
    - name: Verify build artifacts
      run: |
        ls -la dist/
        
    - name: Create GitHub Release
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        # Extract changelog or create release notes
        if [ -f CHANGELOG.md ]; then
          # Try to extract changelog for this version
          RELEASE_NOTES=$(awk "/^## \[?${TAG_VERSION}\]?/,/^## /" CHANGELOG.md | sed '1d;$d' | head -20)
        elif [ -f CHANGES.md ]; then
          RELEASE_NOTES=$(awk "/^## \[?${TAG_VERSION}\]?/,/^## /" CHANGES.md | sed '1d;$d' | head -20)
        else
          # Generate release notes from recent commits
          RELEASE_NOTES="Release ${TAG_VERSION}"$'\n\n'"**What's Changed:**"$'\n'
          RELEASE_NOTES+=$(git log --oneline --since="2 weeks ago" --pretty=format:"* %s" | head -10)
        fi
        
        # Create the release
        gh release create "$TAG_VERSION" \
          --title "$TAG_VERSION" \
          --notes "$RELEASE_NOTES" \
          --verify-tag
        
    - name: Publish to PyPI
      if: success()
      env:
        HATCH_INDEX_USER: __token__
        HATCH_INDEX_AUTH: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        hatch publish
