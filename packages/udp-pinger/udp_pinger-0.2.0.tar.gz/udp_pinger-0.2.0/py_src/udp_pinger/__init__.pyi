from __future__ import annotations
from ipaddress import IPv4Address, IPv6Address

class PingSample:
    at: str
    ok: bool
    latency_ms: float | None
    error: str | None

    def __str__(self) -> str: ...

class PingStats:
    total: int
    up: int
    down: int
    uptime_percent: float
    avg_latency_ms: float | None

    def __str__(self) -> str: ...

class Pinger:
    def __init__(self, addr: str | IPv4Address | IPv6Address) -> None: ...
    def start_periodic(
        self, interval_secs: float, per_ping_timeout_secs: float
    ) -> None: ...
    def stop_periodic(self) -> None: ...
    def wait_for_sample(self, timeout_secs: float = 5.0) -> PingSample | None: ...
    def ping(self, timeout_secs: float = 1.0) -> PingSample | None: ...
    def is_reachable(self, window: int) -> bool: ...
    def latency_ms(self) -> float | None: ...
    def stats(self) -> PingStats: ...

class TimeSync:
    def __init__(self, remote_time_ms: float, latency_ms: float = 0.0) -> None: ...
    def set_latency(self, latency_ms: float) -> None: ...
    def add_offset(self, offset_ms: float) -> None: ...
    def sub_offset(self, offset_ms: float) -> None: ...
    def system_time_during_remote(self, remote_time_ms: float) -> float: ...
    def remote_time_during_system(self, system_time_ms: float) -> float: ...

def system_from_ms(ms: float) -> float: ...
def ms_from_system(system_time: float) -> float: ...
def now_ms() -> float: ...
