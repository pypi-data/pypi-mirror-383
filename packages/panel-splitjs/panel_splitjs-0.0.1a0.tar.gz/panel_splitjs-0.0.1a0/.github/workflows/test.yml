name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: "0 19 * * SUN"

# Automatically stop old builds on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -e {0}

env:
  COV: "--cov=./src/panel_splitjs --cov-report=xml --cov-append"


jobs:
  pre_commit:
    name: Run pre-commit
    needs: [setup]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v5
      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.1
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0
      - uses: pre-commit/action@v3.0.1
        if: needs.setup.outputs.img_change == 'true'
        with:
          extra_args: -a --hook-stage manual oxipng || true --
      - uses: stefanzweifel/git-auto-commit-action@v6
        if: needs.setup.outputs.img_change == 'true'
        with:
          commit_message: "Optimize PNG images (lossless)"
          file_pattern: "*.png"
  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      code_change: ${{ steps.filter.outputs.code }}
      matrix: ${{ env.MATRIX }}
    steps:
      - uses: actions/checkout@v5
        if: github.event_name != 'pull_request'
      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - 'examples/**'
              - 'pyproject.toml'
              - '.github/workflows/ci.yaml'
              - 'pixi.toml'
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-310", "test-312"],
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-310", "test-311", "test-312"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "environment": ["test-311"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
  pixi_lock:
    name: Pixi lock
    runs-on: ubuntu-latest
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_lock@v0
        with:
          cache: ${{ github.event.inputs.cache == 'true' || github.event.inputs.cache == '' }}
  unit_test:
    name: unit:${{ matrix.environment }}:${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 30
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_install@v0
        with:
          environments: ${{ matrix.environment }}
          install: false
        id: install
      - name: Unit tests with coverage
        run: pixi run -e ${{ matrix.environment }} test-coverage --color=yes $COV
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: panel-extensions/panel-splitjs
