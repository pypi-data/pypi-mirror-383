import torch

def build_rz_gate(angle: torch.Tensor) -> torch.Tensor: ...
def build_y_gates(y_angles: torch.Tensor) -> torch.Tensor: ...
def build_rot_gates(params: torch.Tensor) -> torch.Tensor: ...
def get_unused_letter(used_letters) -> str: ...
def apply_y_rotations_einsum(psi: torch.Tensor, u: torch.Tensor, box_size: int) -> torch.Tensor: ...
def build_xx_gates(thetas: torch.Tensor) -> torch.Tensor: ...
def apply_xx_chain(psi: torch.Tensor, thetas: torch.Tensor, box_size: int) -> torch.Tensor: ...
def parse_params(params: torch.Tensor, box_size: int, box_depth: int, n_bond_qubits_out: int): ...
def apply_box_circuit(params: torch.Tensor, psi: torch.Tensor, box_size: int, n_bond_qubits_out: int, box_depth: int) -> torch.Tensor: ...
def get_initial_state(x: torch.Tensor, n_bond_qubits_in: int, box_size: int) -> torch.Tensor: ...
def get_mps(x: torch.Tensor, params: torch.Tensor, box_size: int, box_depth: int, box_shift: int, n_qubits: int): ...
def apply_Z(box: torch.Tensor, dimension_to_modify: int): ...
def measure_z_all_qubits(mps): ...
def compute_param_len(n_qubits, box_size, box_depth, box_shift): ...
