import matplotlib.pyplot as plt
import numpy as np
from tqml.tqnet.layers import CPHN as CPHN

def plot_average_fisher_matrix(max_layers: int, folder_path: str, save_plot: bool = True) -> plt.Figure: ...
def plot_ranks(ranks: list, folder_path: str, save_plot: bool = True) -> tuple[int, plt.Figure, str]: ...
def get_optimal_depth(max_layers: int, trainability_threshold: float, min_grad_value: float, folder_path: str, plot_eigenspectrum: bool = True) -> tuple[int, plt.Figure, str]: ...
def detect_useless_parameters(min_grad_value: float, layers_num: int, folder_path: str) -> str: ...
def measurement_matrix(num_qubits: int) -> np.ndarray: ...
def fisher_matrix(weights: np.ndarray, dataset: np.ndarray, num_qubits: int, quantum_func) -> np.ndarray: ...
def analyze(layer, max_depth: int = 5, num_samples: int = 10, ev_samples: int = 10, trainability_prob_boundary: float = 0.1, min_grad_value: float = 0.0001, save_plots: bool = True, return_figs: bool = False, model_name: str = 'model'): ...
