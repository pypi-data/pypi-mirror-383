from _typeshed import Incomplete

def timer(f, *args, return_out: bool = False, **kwargs): ...
def tensor_product(matrices): ...
def binary_matrix(n_qubits, device: Incomplete | None = None, dtype=...): ...
def rz_eigenvals(X, n_qubits: Incomplete | None = None, mask: Incomplete | None = None, ones: bool = True): ...
def kron_batch(R): ...
def rx_small(psi, theta): ...
def rx_big(psi, theta): ...
def ry_small(psi, theta): ...
def ry_medium(psi, theta): ...
def ry_big(psi, theta): ...
def build_sign_mask(n_qubits, dtype=...): ...
def fast_meas_z(phi, sign_mask): ...
def fwht(x): ...
def build_phase_mask_vector(n_qubits, dtype=...): ...
def fast_meas_x(phi, sign_mask): ...
def fast_meas_y(phi, sign_mask, phase_mask_vec: Incomplete | None = None): ...
def build_perm_array(n, mode: str = 'single'): ...
def ring_cnot(n, dtype=...): ...
def cnot_ring_small(phi, U: Incomplete | None = None): ...
def had_small(phi, H: Incomplete | None = None): ...
def had_medium(phi, H: Incomplete | None = None): ...
def had_einsum(psi): ...
def had(phi, H: Incomplete | None = None): ...
