from ._speedy_qml import build_perm_array as build_perm_array, build_phase_mask_vector as build_phase_mask_vector, build_sign_mask as build_sign_mask, cnot_ring_small as cnot_ring_small, fast_meas_x as fast_meas_x, fast_meas_y as fast_meas_y, fast_meas_z as fast_meas_z, had_einsum as had_einsum, had_medium as had_medium, had_small as had_small, ring_cnot as ring_cnot, rx_big as rx_big, ry_big as ry_big, tensor_product as tensor_product
from _typeshed import Incomplete
from functools import cached_property as cached_property
from torch import nn

class SpeedyLayer(nn.Module):
    in_features: Incomplete
    n_qubits: Incomplete
    depth: Incomplete
    measurement_mode: Incomplete
    rotation: Incomplete
    entangling: Incomplete
    measure: Incomplete
    device: Incomplete
    out_features: int
    entanglers: Incomplete
    basis: Incomplete
    measurement_mods: Incomplete
    def __init__(self, in_features, n_qubits, depth: int = 1, measurement_mode: str = 'None', rotation: str = 'Z', entangling: str = 'strong', measure: str = 'Y', device: Incomplete | None = None) -> None: ...
    @cached_property
    def H(self): ...
    @cached_property
    def U_small(self): ...
    @cached_property
    def sqrtZ(self): ...
    @cached_property
    def sign_mask(self): ...
    @cached_property
    def phase_mask_vec(self): ...
    @cached_property
    def binary_matrix(self, ones: bool = True): ...
    @cached_property
    def cnot_ring(self): ...
    @cached_property
    def init_state(self): ...
    def meas(self, phi): ...
    def cnot(self, phi): ...
    def had(self, phi): ...
    def rz(self, phi, eigenvals, angles: Incomplete | None = None): ...
    def rx(self, phi, eigenvals, angles: Incomplete | None = None): ...
    def ry(self, phi, eigenvals, angles: Incomplete | None = None): ...
    def bel_forward(self, phi, eigenvals_w, angles: Incomplete | None = None): ...
    def sel_forward(self, phi, eigenvals_w, angles: Incomplete | None = None): ...
