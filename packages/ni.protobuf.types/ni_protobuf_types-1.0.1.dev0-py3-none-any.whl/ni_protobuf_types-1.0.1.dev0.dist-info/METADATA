Metadata-Version: 2.3
Name: ni.protobuf.types
Version: 1.0.1.dev0
Summary: Protobuf data types for NI gRPC APIs
License: MIT
Keywords: ni-apis,protobuf
Author: NI
Author-email: opensource@ni.com
Maintainer: Joe Friedrichsen
Maintainer-email: joe.friedrichsen@emerson.com
Requires-Python: >=3.9,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Manufacturing
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Dist: nitypes (>=1.1.0dev0)
Requires-Dist: protobuf (>=4.21)
Project-URL: Documentation, https://niprotobuftypes.readthedocs.io/en/latest/
Project-URL: Repository, https://github.com/ni/ni-apis-python
Description-Content-Type: text/markdown

# Table of Contents

- [Table of Contents](#table-of-contents)
- [About](#about)
  - [Operating System Support](#operating-system-support)
  - [Python Version Support](#python-version-support)

# About

`ni.protobuf.types` is a Python package that provides Protobuf data types for NI gRPC APIs in
the [ni.protobuf.types package](https://github.com/ni/ni-apis/tree/main/ni/protobuf/types).
Additionally, this package contains methods for converting between Python and protobuf types.

NI created and supports this package.

## Operating System Support

`ni.protobuf.types` supports Windows and Linux operating systems.

## Python Version Support

`ni.protobuf.types` supports CPython 3.9+.

## Installation

You can directly install the `ni.protobuf.types` package using `pip` or by listing it as a
dependency in your project's `pyproject.toml` file.
