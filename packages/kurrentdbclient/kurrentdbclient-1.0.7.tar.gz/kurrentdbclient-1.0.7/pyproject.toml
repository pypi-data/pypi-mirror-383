[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "kurrentdbclient"
version = "1.0.7"
description = "Python gRPC Client for KurrentDB"
license = { text = "BSD-3-Clause" }
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { "name" = "John Bywater", "email" = "john.bywater@appropriatesoftware.net" },
]
classifiers = [
#    "Development Status :: 3 - Alpha",
#    "Development Status :: 4 - Beta",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
]
dependencies = [
  "grpcio[protobuf]>=1.71.0,<2.0",
  "typing_extensions",
]

[project.optional-dependencies]
opentelemetry = [
  "opentelemetry-api>=1.28.0,<2.0",
  "opentelemetry-instrumentation>=0.49b0",
  "opentelemetry-semantic-conventions>=0.49b0",
]

[project.urls]
homepage = "https://github.com/pyeventsourcing/kurrentdbclient"
repository = "https://github.com/pyeventsourcing/kurrentdbclient"

[tool.poetry]
include = ["kurrentdbclient/py.typed"]

[tool.poetry.group.dev.dependencies]
black = { version = "*", allow-prereleases = true }
ruff = "^0.1.14"
isort = "*"
mypy = "*"
grpcio-tools = "*"
grpc-stubs = "*"
types-protobuf = "*"
mypy-protobuf = "*"
coverage = "^7.8.0"
fastapi = "*"
opentelemetry-exporter-otlp-proto-http = "*"
opentelemetry-exporter-otlp-proto-grpc = "*"
opentelemetry-instrumentation-grpc = "*"

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
preview = true
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pip-cache
  | \.poetry
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
  | kurrentdbclient/protos
)/
'''

[tool.ruff]
exclude = [
    "kurrentdbclient/protos",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 88
#indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Todo: "D"
#select = ["E", "F", "W", "I", "N", "UP"]
select = [
    "ALL",
#    "RUF012",
]
ignore = [
     "PD011", # Use `.to_numpy()` instead of `.values`  <- this is for pandas
#    "UP006",  # [*] Use `type` instead of `Type` for type annotation / Use `tuple` instead of `tuple` for type annotation / etc  <- ignore while supporting Python3.8
    "A003",  # "Class attribute `id/type` is shadowing a Python builtin
    "ANN",
    "D",
    "PT",
    "ERA",
    "COM812",
    "T201",
    "FIX",
    "S608",
    "B027",
    "ARG002",
    "I001",

    "TRY",
    "BLE",
    "SLF",
    "C901",
    "SLF",
    "TD",
    "PTH",
    "PTH",
    "DTZ005",
    "PLR0915",
    "PLR0912",
    "SLOT",
    "S101",
    "FBT002",
    "PLR0913",
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR2004", # Magic value used in comparison

]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
#docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
#docstring-code-line-length = "dynamic"

[tool.ruff.pydocstyle]
convention = "google"

[tool.coverage.run]
source = ["kurrentdbclient"]
branch = true
omit = [
    "kurrentdbclient/protos/*"
]
relative_files = true


[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Comments to turn coverage on and off:
  "no cover: start(?s:.)*?no cover: stop",
#  # Don't complain about missing debug-only code:
#  "def __repr__",
#  "if self.debug",
#  # Don't complain about some magic methods:
#  "def __str__",
#  # Don't complain if tests don't hit defensive assertion code:
#  "raise AssertionError",
#  "raise NotImplementedError",
#  # Don't complain if non-runnable code isn't run:
#  "if 0:",
#  "if __name__ == .__main__.:",
#  # Don't complain about empty realizations
#  "pass",
#  # Don't complain about abstract methods
#  "@abc.abstractmethod"
  # Don't complain about type checking import blocks.
  "if TYPE_CHECKING:",
]
#ignore_errors = true
#precision = 2

[tool.isort]
combine_as_imports = true
profile = "black"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
skip = ".eggs,.pip-cache,.poetry,venv,.venv,dist,kurrentdbclient/protos"
