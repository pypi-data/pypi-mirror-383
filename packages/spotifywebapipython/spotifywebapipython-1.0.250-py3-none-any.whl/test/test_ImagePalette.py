# our imports.
from spotifywebapipython.vibrant import ColorThiefFast

# load SmartInspect settings from a configuration settings file.
from smartinspectpython.siauto import *
import threading 

# trace.
print("** Loading SmartInspect configuration settings")
siConfigPath:str = "./test/smartinspect.cfg"
SIAuto.Si.LoadConfiguration(siConfigPath)
SIAuto.Main.LogSeparator(SILevel.Debug)
SIAuto.Main.LogThread(SILevel.Debug, "Main Thread information", threading.current_thread())
_logsi:SISession = SIAuto.Main

### HTML results generator code (generated from chatGPT).

from typing import Iterable, Tuple, List, Union
import os
import html

RGB = Tuple[Union[int, float], Union[int, float], Union[int, float]]

def _normalize_rgb(rgb: RGB) -> Tuple[int, int, int]:
    """Accepts (r,g,b) where each channel is 0-255 or 0.0-1.0, returns ints 0-255."""
    r, g, b = rgb
    def norm(v):
        if isinstance(v, float) and 0.0 <= v <= 1.0:
            return int(round(v * 255))
        return int(v)
    return (max(0, min(255, norm(r))),
            max(0, min(255, norm(g))),
            max(0, min(255, norm(b))))

def rgb_to_hex(rgb: RGB) -> str:
    r, g, b = _normalize_rgb(rgb)
    return f"#{r:02X}{g:02X}{b:02X}"

def rgb_to_css(rgb: RGB) -> str:
    r, g, b = _normalize_rgb(rgb)
    return f"rgb({r}, {g}, {b})"

def generate_palette_html(
    colors: Iterable[RGB],
    title: str = "Color Palette",
    image_path: str = None,
    save_path: str = "palette.html",
    box_size: int = 140,
    show_labels: bool = True
) -> str:
    """
    Generates an HTML string for a list of RGB values and writes it to `save_path`.
    Returns the HTML string.
    """
    color_list: List[RGB] = [ _normalize_rgb(c) for c in colors ]
    safe_title = html.escape(title)

    # Inline CSS for simple, responsive grid
    css = f"""
    <style>
      body {{
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        margin: 24px;
        background: #f7f7f7;
        color: #111;
      }}
      h1 {{ font-size: 20px; margin-bottom: 12px; }}
      .grid {{
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax({box_size}px, 1fr));
        gap: 12px;
        align-items: stretch;
      }}
      .swatch {{
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        background: white;
        display: flex;
        flex-direction: column;
        height: 100%;
      }}
      .color {{ height: {box_size}px; flex-shrink:0; }}
      .meta {{
        padding: 10px;
        font-size: 13px;
        display:flex;
        justify-content:space-between;
        gap:8px;
        align-items:center;
      }}
      .label {{
        white-space:nowrap;
        overflow:hidden;
        text-overflow:ellipsis;
      }}
      .chip {{
        font-family: monospace;
        background: rgba(0,0,0,0.05);
        border-radius: 6px;
        padding: 4px 8px;
        font-size:12px;
      }}
      footer {{ margin-top: 18px; font-size:12px; color:#666; }}
    </style>
    """

    # Build swatches
    swatches_html = []
    for r,g,b in color_list:
        hexval = f"#{r:02X}{g:02X}{b:02X}"
        rgbval = f"rgb({r}, {g}, {b})"
        contrast_text = "#000" if (r*0.299 + g*0.587 + b*0.114) > 186 else "#fff"
        sw = f"""
        <div class="swatch">
          <div class="color" style="background:{hexval}; color:{contrast_text}; display:flex; align-items:center; justify-content:center; font-weight:600;">
            <!-- optional inside-text -->
          </div>
          <div class="meta">
            <div class="label">{html.escape(hexval)}</div>
            {"<div class='chip'>" + html.escape(rgbval) + "</div>" if show_labels else ""}
          </div>
        </div>
        """
        swatches_html.append(sw)

    html_str = f"""<!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width,initial-scale=1"/>
      <title>{safe_title}</title>
      {css}
    </head>
    <body>
      <h1>{safe_title}</h1>
      <div class="grid">
        {''.join(swatches_html)}
      </div>
      <h3>Image Source: {image_path}</h3>
      <img src="{image_path}" alt="Source Image" />
      <footer>Generated by generate_palette_html()</footer>
    </body>
    </html>
    """

    # Write to disk
    with open(save_path, "w", encoding="utf-8") as f:
        f.write(html_str)

    abs_path = os.path.abspath(save_path)
    print(f"Wrote palette to: {abs_path}")
    return html_str

###

# image path to process

#imagePath:str = "https://i.scdn.co/image/ab67616d0000b273ec3db5825471d1c0f8bc3619"   # Zach Williams
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b273b3f691a43c5d139895f8cc3d"   # Jeremy Camp, Restored (spotify:track:7rcgBqWrTTSgt4wSuzq2rk)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b2730c255b1049c859f19b55ff66"   # Matthew West, The Story of Your Life (spotify:track:xxxxx)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b2733deaee5f76ab2da15dd8db86"   # Mercy Me, Almost There

# from Ben's youtube video: https://www.youtube.com/watch?v=Hh0ZYO6yrW4
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b27374b19c16057d91830979d43d"   # Francis Lai Laven, La lecon particuliere (`spotify:track:3NWRapFZSlpHXO38LW21rw`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b27336eaa88d33968ee025d0b3d1"   # Dezko, Ascend (`spotify:track:199wv1uOJYZ1XyK8FTzwh2`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b2739a69906b91b18801e18e42c2"   # Orbit, Summer Someday (`spotify:track:2uETu1hY79BdvX9wRqQgrh`)

# from Ben's test playlist: https://open.spotify.com/playlist/10zDRUNVBUnxMRkXPQTr9X?si=1WA65tZgRWq5qD7xP2Vfpg&pi=vL45YVPwR9ia3
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b273a310d79b3ab4304e7d363afe"   # Forrester, MoonLight (`spotify:track:1y2PkgJWyNF39Djta5BaPe`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b27333d63fa24cabd82d6c7c676f"   # The MidNight, Days of Thunder (`spotify:track:4loXMor75kKVBB03ygwDlh`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b2731ce9547e2191494e0a7313d5"   # Know Good, Fire Inside (`spotify:track:3An32L74nhnYRDJrx1fW6O`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b273bb4325d269632efa08956036"   # HeyZ, Turn the Tide (`spotify:track:7r5s7HP6dJvcQjYrb0ZsoK`)
imagePath:str = "https://i.scdn.co/image/ab67616d0000b27347941121dc059eb9412ca872"   # Barry Can't Swim, When Will We Land (`spotify:track:1WaiCFnNlnpy6NFf3Ga00R`)
#imagePath:str = "https://i.scdn.co/image/ab67616d0000b2734e8dbbdfe7768629efce4a03"   # Last Island, Don't Even Think About It (`spotify:track:5nZaDgnU3rcqwDlVYOOItT`)


# process image.
color_thief = ColorThiefFast(imagePath)

# get the dominant color
# dominant_color = color_thief.get_color(quality=1)
# _logsi.LogObject(SILevel.Verbose, "Dominant color info", dominant_color)
# _logsi.LogArray(SILevel.Verbose, "Dominant color info array", dominant_color)

# build a color palette
#palette = color_thief.get_palette(color_count=10, quality=1)
palette = color_thief.get_palette(color_count=10, quality=1, brightness_filter_low=100, brightness_filter_high=600, hue_distance_filter=10)
#palette = color_thief.get_palette(color_count=20)
_logsi.LogArray(SILevel.Message,"Image Palette Colors (count=%d)" % (len(palette)), palette, colorValue=SIColors.LightGreen)

# generate html sample page.
generate_palette_html(palette, title="Example Palette:", image_path=imagePath, save_path="./test/testdata/downloads/imagePalette.html")
print("Open the above file path in your browser to view the result.")

# unwire events, and dispose of SmartInspect.
print("** Disposing of SmartInspect resources")
SIAuto.Si.Dispose()
