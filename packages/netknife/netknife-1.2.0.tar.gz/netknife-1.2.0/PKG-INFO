Metadata-Version: 2.4
Name: netknife
Version: 1.2.0
Summary: A CLI toolkit to manage FortiGate via REST API (policies, addresses, addrgrps, VIPs, etc.)
Project-URL: Homepage, https://github.com/yourname/netknife
Project-URL: Issues, https://github.com/yourname/netknife/issues
Author-email: "Berners.lk" <Berners.lk@gmail.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
License-File: LICENSE
Keywords: api,cli,firewall,fortigate,network
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: System :: Networking :: Firewalls
Requires-Python: >=3.8
Requires-Dist: requests>=2.28
Requires-Dist: urllib3>=1.26
Description-Content-Type: text/markdown

# FortiGate Policy & Address Toolkit — **README (v1.1.3)**

A single-file Python CLI that talks to FortiGate’s REST API to manage **policies**, **addresses**, **address groups**, and **virtual IPs (VIPs)** — plus a few productivity helpers (smart grouping, bulk attach, quick search).

> Tested against FortiOS **7.4.4** and **7.2.7**. The script includes compatibility shims for common response/payload differences between these versions.

## ✨ Highlights

- **Policies**: inspect by ID/name, search, create, update, mutate `srcaddr`/`dstaddr` quickly, attach address-group families.
- **Addresses**: full CRUD, JSON and no-JSON shortcuts, resilient subnet handling.
- **Address Groups**: full CRUD, validate members, add/remove members, “find groups containing X”.
- **Smart chunking**: keep each group ≤ **255** members; auto-create `-2`, `-3`, … suffix groups.
- **VIPs (Virtual IPs)**: list/search/get/create/update/delete. Supports **1:1 static NAT** and **port forward** (tcp/udp/sctp). FortiOS 7.2/7.4 payload compatibility built in.
- **Robustness**: VDOM fallback for `424`, graceful retries for common 5xx validation shapes, “remove `all` when mixed” safeguard.

## 🧩 Requirements

- Python **3.8+**

- Packages: `requests`, `urllib3`

  ```
  pip install requests urllib3
  ```

No other third-party deps. `ipaddress` is stdlib.

## 🔐 Authentication & Connectivity

- Pass your API token with **both** headers and query: the tool sets `Authorization: Bearer`, `X-Auth-Token`, and `?access_token=...` automatically. It's recommended to grand the API administrator permission.
- **Self-signed certs**: use `--insecure` (or import the FortiGate CA into your OS trust store).

> ❗ Place `--insecure` **before** the subcommand, otherwise it won’t apply.

------

## Example 1:  remove IPs from ip_addr_group with prefix "Blacklist_"

```python
from netknife.adapters.fortigate import FortiGateClient
import ipaddress
import re

BLACK_PREFIX = "Blacklist_"

###
The fw_map you pass in only needs to include host/token/vdom (policy information is not required).
If your address objects are indeed uniformly named as BAN-<ip>, this code will first try to use that name; if there are exceptions in naming, it will fall back to searching the full address list to find the object name matching that /32 and remove it.
If you also want to delete the address object itself (after it has been successfully removed from the group and is no longer referenced), you can add one more step: check the reference relations and then call client.delete_address(name). If you’d like, I can also integrate this “orphan object cleanup” into the process.
###

# --------- helpers ----------
def _names(lst):
    out = []
    for x in (lst or []):
        out.append(x.get("name") if isinstance(x, dict) else x)
    return out

def _valid_ip_list(ips):
    ok, bad = [], []
    for ip in sorted(set(map(str, ips))):
        try:
            ipaddress.ip_address(ip)
            ok.append(ip)
        except Exception:
            bad.append(ip)
    return ok, bad

def _address_matches_ip(addr: dict, ip: str) -> bool:
    if not isinstance(addr, dict) or (addr.get("type") != "ipmask"):
        return False
    subnet = addr.get("subnet")
    if isinstance(subnet, str):
        # "A.B.C.D MASK"
        return subnet.strip().startswith(ip + " ")
    if isinstance(subnet, list) and len(subnet) == 2:
        return str(subnet[0]) == ip and str(subnet[1]) in ("255.255.255.255", "255.255.255.255 ")
    return False

def _candidate_addr_names_for_ip(client: FortiGateClient, ip: str):
    """
    Return a list of address object names that should be removed.
    Give priority to BAN-<ip>; if it does not exist, then scan the address library for an object name matching the /32.
    """
    names = []
    ban_name = f"BAN-{ip}"
    a = client.get_address(ban_name)
    if a:
        names.append(ban_name)
    else:
        # Scan all address objects and find the one whose /32 equals the IP.
        for addr in client.list_addresses():
            if _address_matches_ip(addr, ip):
                nm = addr.get("name")
                if nm:
                    names.append(nm)
    # remove duplicate
    return sorted(set(names))

def _blacklist_groups(client: FortiGateClient):
    """
    Return all address group names that start with Blacklist_ (including shards, such as Blacklist_info-2).
    """
    groups = client.list_addrgrps()
    pat = re.compile(rf"^{re.escape(BLACK_PREFIX)}.*$")
    return sorted([g.get("name") for g in groups if g.get("name") and pat.match(g["name"])])

def _verify_member_not_in_group(client: FortiGateClient, group_name: str, member_name: str) -> bool:
    g = client.get_addrgrp(group_name)
    mems = set(_names(g.get("member"))) if g else set()
    return member_name not in mems

# --------- main API ----------
def unban_ips(fw_map, ips):
    """
    Remove the address member corresponding to the given IP from all address groups whose names start with Blacklist_.
    The fw_map structure is the same as in ban_ip, but here it only requires host/token/vdom.
    Return: (all_ok: bool, report: dict)
    """
    valid_ips, invalid_ips = _valid_ip_list(ips)
    if not valid_ips:
        return False, {"global_error": "no valid IPs", "invalid_ips": invalid_ips}

    overall_ok = True
    report = {"invalid_ips": invalid_ips, "devices": {}}

    for fw_name, cfg in fw_map.items():
        host  = cfg["host"]
        token = cfg["token"]
        vdom  = cfg.get("vdom")

        dev = {
            "groups": [],
            "ips": {},
            "errors": [],
            "ok": False,
        }
        report["devices"][fw_name] = dev

        client = FortiGateClient(host=host, token=token, vdom=vdom, verify_ssl=False)
        try:
            # 1) Find all groups starting with Blacklist_
            groups = _blacklist_groups(client)
            dev["groups"] = groups
            if not groups:
                dev["errors"].append("no Blacklist_* groups found")
                overall_ok = False
                continue

            # 2) Process each IP individually.
            for ip in valid_ips:
                ipres = {
                    "addr_candidates": [],
                    "per_group": [],   # [{group, attempted, removed, verified, note}]
                    "ok": False,
                }
                dev["ips"][ip] = ipres

                # 2.1 Parse the possible address object name(s).
                candidates = _candidate_addr_names_for_ip(client, ip)
                ipres["addr_candidates"] = candidates

                if not candidates:
                    # If there are no candidate object names, it means that the address library also has no address object for this IP; for the purpose of “removing a member,” treat it as already absent from all groups.
                    ipres["ok"] = True
                    continue

                # 2.2 Iterate over each group to perform removal and verification.
                group_all_ok = True
                for gname in groups:
                    # Only initiate a change if the group actually contains any of them.
                    g = client.get_addrgrp(gname)
                    cur = set(_names(g.get("member"))) if g else set()
                    targets = [nm for nm in candidates if nm in cur]

                    attempted = False
                    removed = False
                    verified = False
                    note = ""

                    if targets:
                        attempted = True
                        try:
                            # Use the library’s idempotent removal (you can also pass multiple at once).
                            client.remove_members_from_addrgrp(gname, targets)
                            # Verify that the removal was successful.
                            ok_now = all(_verify_member_not_in_group(client, gname, nm) for nm in targets)
                            removed = True
                            verified = ok_now
                            if not ok_now:
                                note = f"verify failed for {targets}"
                                group_all_ok = False
                                overall_ok = False
                        except Exception as e:
                            note = f"remove error: {e}"
                            group_all_ok = False
                            overall_ok = False
                    else:
                        note = "not in group"

                    ipres["per_group"].append({
                        "group": gname,
                        "attempted": attempted,
                        "removed": removed,
                        "verified": verified,
                        "note": note,
                    })

                ipres["ok"] = group_all_ok

            # 3) Device level OK?
            dev["ok"] = all(v.get("ok") for v in dev["ips"].values())
            if not dev["ok"]:
                overall_ok = False

        finally:
            try:
                client.session.close()
            except Exception:
                pass

    return overall_ok, report


# ---------------- demo ----------------
if __name__ == "__main__":
    fw_info = {
        "DC146": {
            "host": "https://10.146.1.1:10443",
            "token": "4Gps3rzsn5twq7js6ckyxzfQ",
            "vdom":  "SL-Internet",
        },
        "DC145": {
            "host": "https://10.1.1.1:10443",
            "token": "gqw4dnhhfscN67hddksc5mj",
            "vdom":  None,
        },
    }

    to_unban = ["1.1.1.1"]
    ok, rep = unban_ips(fw_info, to_unban)
    import json
    print(json.dumps(rep, ensure_ascii=False, indent=2))
    print("ALL OK?", ok)

```



## ▶️ Quick Start

```
# Show version
python <SCRIPT>.py --version

# Inspect a policy by ID (with VDOM)
python <SCRIPT>.py --host https://10.1.1.1:10443 --token <TOKEN> --vdom test-vdom --insecure \
  policy-id --policy-id 209

# Search address groups by substring
python <SCRIPT>.py --host https://10.1.1.1:10443 --token <TOKEN> --vdom test-vdom --insecure \
  search-addrgrps --q Black
```

> Replace `<SCRIPT>.py` with your filename.
>  Windows CMD line continuation: use `^`; PowerShell: use backtick ``` or split lines.

------

## 🧭 Global CLI Syntax

```
python <SCRIPT>.py --host https://<ip>:<port> --token <TOKEN> [--vdom <VDOM>] [--insecure] <SUBCOMMAND> [OPTIONS]
```

**Global options**

- `--host` (required) – e.g. `https://10.1.1.1:10443`
- `--token` (required) – FortiGate API token
- `--vdom` (optional) – VDOM name (e.g. `test-vdom`)
- `--insecure` – disable SSL verification (self-signed)
- `--version` – print tool version (`v1.1.0`)

**Output**: JSON to stdout.
 **Exit codes**: `0` success, `1` runtime/API/SSL errors, `2` usage/help.

------

## 📚 Subcommands & Examples

### 1) Policies

#### Inspect / Search

```
# By ID
policy-id --policy-id 231

# By name
policy-name --policy-name "From-internet"

# Search by name substring
search-policies --q "blacklist"

# Find policies referencing a given object (addr/addrgrp/vip name)
find-policies-with --object-name "Blacklist"
```

#### Create

```
# JSON payload
create-policy --data @policy.json

# No-JSON “simple” creation
create-policy-simple \
  --name "From-internet-副本" \
  --srcintf "any" \
  --dstintf "any" \
  --srcaddr "blacklist-must-deny,blacklist-auto,Blacklist" \
  --dstaddr "all" \
  --service "ALL" \
  --action deny \
  --schedule always \
  --status enable \
  --logtraffic all \
  --comment "created by script"
```

`create-policy-simple` wraps comma-lists into FortiGate’s `[{ "name": ... }]` form automatically.

#### Update

```
# Full JSON replace/merge (FortiGate semantics)
update-policy --policy-id 263 --data @update.json

# Field-level updates (no JSON)
update-policy-fields --policy-id 263 \
  --srcaddr "Blacklist,Code_Group_BlackList" \
  --dstaddr "all" \
  --logtraffic all \
  --comment "updated by script"

# Enable/Disable (note spelling)
update-policy-fields --policy-id 263 --status disable
```

#### Quickly mutate src/dst address lists

```
# Add/remove names (addresses or groups)
policy-set-addrs --policy-id 263 --add-dst "Blacklist" --remove-src "OldGroup"
```

> Safeguard: if a list contains `all` **and** other members, the tool removes `all` to avoid FortiOS `500 -7`.
>  **VIP notice**: VIPs may be used **only** in **dstaddr** (destination). Using a VIP in `srcaddr` will fail (`500 -3`).

#### Attach an address-group family to a policy

```
# Will attach base and its -2/-3/... siblings (if present)
attach-grps-to-policy --policy-id 263 --base-name "Blacklist" --direction dst
```

------

### 2) Addresses

```
# List (brief)
list-addresses

# Search by substring
search-addresses --q "BAN-"

# Get one (full)
get-address --name "crl.pki.goog"

# Create (JSON)
create-address --data '{"name":"A-10.0.0.0_24","type":"ipmask","subnet":"10.0.0.0 255.255.255.0","comment":"demo"}'

# Create ipmask (no JSON)
create-address-ipmask --name "A-10.0.0.0_24" --cidr 10.0.0.0/24

# Update (JSON)
update-address --name "BAN-77.90.151.5" --data '{"comment":"updated"}'

# Update comment (no JSON)
update-address-comment --name "BAN-77.90.151.5" --comment "updated"

# Delete
delete-address --name "*.microsoft.com.akadns.net"
```

> Address creation auto-converts `subnet` between `"IP MASK"` and `["IP","MASK"]` to bypass `500 -5`.

------

### 3) Address Groups

```
# List
list-addrgrps

# Search by substring
search-addrgrps --q "Black"

# Get one (shows members & count)
get-addrgrp --name "Blacklist"

# Create (validate members by default)
create-addrgrp --name "HQ-NETWORKS" --members "A1,A2,A3" --comment "demo"

# Replace fields/members (full replacement)
update-addrgrp --name "HQ-NETWORKS" --members "A-10.0.0.0_24,Another-Addr" --comment "updated"

# Rename
update-addrgrp --name "HQ-NETWORKS" --new-name "HQ-NETWORKS-NEW"

# Add members (idempotent)
add-to-addrgrp --name "HQ-NETWORKS" --members "10.1.6.0/23"

# Remove members
remove-from-addrgrp --name "HQ-NETWORKS" --members "10.1.6.0/23"

# Delete
delete-addrgrp --name "HQ-NETWORKS"

# Find groups that contain a given object
find-groups-with-member --name "BAN-131.226.102.110"
```

**Skip member validation** (when you’re sure members exist or are created out of band): add `--skip-validate-members`.

------

### 4) Smart chunking for groups (≤255 members each)

```
# Provide members inline and/or via file (one per line)
smart-fill-addrgrps \
  --base-name "Blacklist" \
  --members "A-10.0.0.0_24,HQ-NETWORKS" \
  --members-file C:\path\ips.txt \
  --chunk-size 255 \
  --comment "auto-chunked"

# Then attach all -N groups to a policy (dst or src)
attach-grps-to-policy --policy-id 263 --base-name "Blacklist" --direction dst
```

The tool:

- reads existing `base` and `base-2/-3/...` groups,
- fills up to `chunk-size`,
- creates new groups as needed,
- skips members already present.

------

### 5) VIPs (Virtual IPs)

> **VIPs belong in `dstaddr`** of policies. They represent “what external users hit”.
>  For DNAT/port-forward scenarios, policy `nat` is usually **disable** (VIP does the translation); use `service` to restrict ports.

#### List / Search / Get

```
list-vips
search-vips --q "openvpn"
get-vip --name "to-internet"
```

#### Create (JSON)

```
# 1:1 static NAT
create-vip --data '{
  "name": "Pub_1.1.1.1_1to1_10.1.1.1",
  "extip": "1.1.1.1",
  "mappedip": [{"range": "10.1.1.1"}],   // can also be "10.1.1.1"
  "extintf": "any",
  "type": "static-nat",
  "comment": "by API"
}'

# Port forward (tcp/udp/sctp)
create-vip --data '{
  "name": "Pub_1.1.1.1_1to1_10.1.1.1",
  "extip": "1.1.1.1_1",
  "mappedip": "10.1.1.1",
  "portforward": "enable",
  "protocol": "tcp",
  "extport": "943",
  "mappedport": "943",
  "extintf": "any",
  "type": "static-nat"
}'
```

#### Create (no JSON)

```
# Static 1:1
create-vip-simple \
  --name "Pub_1.1.1.1_1to1_10.1.1.1" \
  --extip 1.1.1.1 \
  --mappedip 10.1.1.1 \
  --extintf any \
  --comment "by API"

# Port forward
create-vip-portforward \
  --name "Pub_1.1.1.1_943_10.1.1.1_943" \
  --extip 1.1.1.1 \
  --mappedip 10.1.1.1 \
  --protocol tcp \
  --extport 943 \
  --mappedport 943 \
  --extintf any \
  --comment "by API"
```

> `create-vip-simple` is **for 1:1 static NAT** only (no port args).
>  For port forwarding, use `create-vip-portforward` or `update-vip-fields`.

#### Update

```
# JSON
update-vip --name "Pub_..." --data @vip-update.json

# Field-level (no JSON)
update-vip-fields --name "Pub_..." \
  --portforward true \
  --protocol tcp \
  --extport 943 \
  --mappedport 943 \
  --mappedip 10.1.1.1 \
  --extintf any \
  --comment "443 only"
```

#### Delete

```
delete-vip --name "Pub_..."
```

#### Attach VIP to policy (destination)

```
# Add VIP to dstaddr; remove old internal object if present
policy-set-addrs --policy-id 209 --add-dst "Pub_1.1.1.1_943_10.1.1.1_943" --remove-dst "demo"
```

**Version compatibility built in**

- `extip` may be given with `/32` — the tool strips CIDR.
- `mappedip` accepts `"x.x.x.x"`, `["x.x.x.x"]`, or `[{"range":"x.x.x.x"}]` — normalized internally.
- Ports coerced to strings to satisfy both 7.2/7.4 JSON validators.

------

## 🧪 End-to-End Example: Expose OpenVPN on 943

```
# 1) Create VIP (port forward 943 → 10.1.1.1:943)
create-vip-portforward \
  --name "Pub_1.1.1.1_943_10.1.1.1_943" \
  --extip 1.1.1.1 --mappedip 10.1.1.1 \
  --protocol tcp --extport 943 --mappedport 943 --extintf any

# 2) Attach it to policy 209 (dstaddr), drop old target
policy-set-addrs --policy-id 209 \
  --add-dst "Pub_1.1.1.1_943_10.1.1.1_943" \
  --remove-dst "demo"

# 3) Verify
policy-id --policy-id 209
```

------

## 🛠️ Troubleshooting

- **SSL: `CERTIFICATE_VERIFY_FAILED`**
   Put `--insecure` **before** the subcommand:

  ```
  python <SCRIPT>.py --host ... --token ... --vdom test-vdom --insecure list-vips
  ```

  Or import the FortiGate CA into your system trust store.

- **`424` with VDOM**
   Usually wrong/absent VDOM or per-endpoint limitation. The tool auto-retries list calls without VDOM; ensure your `--vdom` is correct (e.g., `test-vdom`).

- **`500 -7` on policy update**
   Mixing `all` with other members is invalid. The tool auto-removes `all` when you add other names.

- **`500 -5` creating addresses**
   Subnet shape mismatch. The tool retries between `"IP MASK"` and `["IP","MASK"]`. Use `create-address-ipmask` to avoid format issues.

- **`500 -3` when mutating policy addrs**
   Typically caused by putting a **VIP** into `srcaddr`. VIPs belong in **dstaddr** only.

- **`-8` creating VIP** (e.g., “Mapped-ip range is not specified”)
   Provide `--mappedip` or correct JSON shape; the tool normalizes but requires an actual value.

- **“unrecognized arguments”**
   Ensure global flags (`--host --token [--vdom] [--insecure]`) come **before** the subcommand.

------

## 🔒 Best Practices

- Treat API tokens like passwords; avoid shell history leaks.
- Prefer **port-forward VIPs** if you only need specific ports; otherwise use 1:1 and restrict by `service`.
- For DNAT policies, keep `nat` **disable** and rely on VIP; use `service` to allow intended ports only.
- Use `--skip-validate-members` only when you’re sure objects exist.

------

## 🔁 Changelog (SemVer)

### **v1.1.0**

- **New**: VIP CRUD/search, simple creators (1:1 & port-forward), field-level updates.
- **Compat**: Normalize `extip`, `mappedip`, `portforward`, and port types across 7.2/7.4.
- **Polish**: Stronger policy update fallback (light PUT → full merge PUT), auto-remove `all` when mixed.
- **UX**: `--version`, clearer SSL error guidance, better “not found” suggestions.

### v1.0.0

- Policies, addresses, address groups CRUD.
- Smart chunking (≤255 per group) and attach-groups-to-policy.

------

## 📦 Files & JSON Payload Examples

**`policy.json`**

```
{
  "name": "Example-Policy",
  "srcintf": [{"name": "any"}],
  "dstintf": [{"name": "any"}],
  "srcaddr": [{"name": "all"}],
  "dstaddr": [{"name": "all"}],
  "service": [{"name": "ALL"}],
  "action": "accept",
  "schedule": "always",
  "status": "enable",
  "logtraffic": "all",
  "comments": "created by API"
}
```

**`vip-update.json`**

```
{
  "portforward": "enable",
  "protocol": "tcp",
  "extport": "443",
  "mappedport": "443",
  "mappedip": [{"range": "10.146.42.239"}],
  "extintf": "any",
  "comment": "443 only"
}
```

------

## 🧭 Roadmap (optional)

- `--cafile <path>` to validate against a custom CA (safer than `--insecure`).
- `--dry-run` to preview changes without applying.
- Retry/backoff knobs and `--timeout` override.
- VIP groups (`vipgrp`) if needed.

------

## 📄 License

Add your preferred license here (e.g., MIT/Apache-2.0). If omitted, assume “all rights reserved”.
