"use strict";exports.id=592,exports.ids=[592],exports.modules={3592:(a,b,c)=>{c.d(b,{fromSSO:()=>l});var d=c(96742),e=c(38043),f=c(3014),g=c(88352),h=c(75162),i=c(8310),j=c(52471);let k=async({ssoStartUrl:a,ssoSession:b,ssoAccountId:e,ssoRegion:f,ssoRoleName:g,ssoClient:k,clientConfig:l,parentClientConfig:m,profile:n,logger:o})=>{let p,q,r="To refresh this SSO session run aws sso login with the corresponding profile.";if(b)try{let a=await (0,i.Y)({profile:n})();p={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new d.C(a.message,{tryNextLink:!1,logger:o})}else try{p=await (0,j.v)(a)}catch(a){throw new d.C(`The SSO session associated with this profile is invalid. ${r}`,{tryNextLink:!1,logger:o})}if(new Date(p.expiresAt).getTime()-Date.now()<=0)throw new d.C(`The SSO session associated with this profile has expired. ${r}`,{tryNextLink:!1,logger:o});let{accessToken:s}=p,{SSOClient:t,GetRoleCredentialsCommand:u}=await c.e(288).then(c.bind(c,51288)),v=k||new t(Object.assign({},l??{},{logger:l?.logger??m?.logger,region:l?.region??f}));try{q=await v.send(new u({accountId:e,roleName:g,accessToken:s}))}catch(a){throw new d.C(a,{tryNextLink:!1,logger:o})}let{roleCredentials:{accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:z,credentialScope:A,accountId:B}={}}=q;if(!w||!x||!y||!z)throw new d.C("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:o});let C={accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:new Date(z),...A&&{credentialScope:A},...B&&{accountId:B}};return b?(0,h.g)(C,"CREDENTIALS_SSO","s"):(0,h.g)(C,"CREDENTIALS_SSO_LEGACY","u"),C},l=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoSession:l}=a,{ssoClient:m}=a,n=(0,e.Bz)({profile:a.profile??b?.profile});if(c||h||i||j||l)if(c&&h&&i&&j)return k({ssoStartUrl:c,ssoSession:l,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoClient:m,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:n});else throw new d.C('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,f.Y)(a))[n];if(!b)throw new d.C(`Profile ${n} was not found.`,{logger:a.logger});if(!(a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name))(b))throw new d.C(`Profile ${n} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let e=(await (0,g.q)(a))[b.sso_session],f=` configurations in profile ${n} and sso-session ${b.sso_session}`;if(i&&i!==e.sso_region)throw new d.C("Conflicting SSO region"+f,{tryNextLink:!1,logger:a.logger});if(c&&c!==e.sso_start_url)throw new d.C("Conflicting SSO start_url"+f,{tryNextLink:!1,logger:a.logger});b.sso_region=e.sso_region,b.sso_start_url=e.sso_start_url}let{sso_start_url:e,sso_account_id:h,sso_region:j,sso_role_name:l,sso_session:o}=((a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.C(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a})(b,a.logger);return k({ssoStartUrl:e,ssoSession:o,ssoAccountId:h,ssoRegion:j,ssoRoleName:l,ssoClient:m,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:n})}}}};