"use strict";exports.id=828,exports.ids=[828],exports.modules={46828:(a,b,c)=>{c.d(b,{ENV_CMDS_FULL_URI:()=>r,ENV_CMDS_RELATIVE_URI:()=>s,fromContainerMetadata:()=>u,fromInstanceMetadata:()=>M,getInstanceMetadataEndpoint:()=>E,httpRequest:()=>k});var d,e,f=c(96742),g=c(79551),h=c(10168),i=c(79428),j=c(81630);function k(a){return new Promise((b,c)=>{let d=(0,j.request)({method:"GET",...a,hostname:a.hostname?.replace(/^\[(.+)\]$/,"$1")});d.on("error",a=>{c(Object.assign(new h.m("Unable to connect to instance metadata service"),a)),d.destroy()}),d.on("timeout",()=>{c(new h.m("TimeoutError from instance metadata service")),d.destroy()}),d.on("response",a=>{let{statusCode:e=400}=a;(e<200||300<=e)&&(c(Object.assign(new h.m("Error response received from instance metadata service"),{statusCode:e})),d.destroy());let f=[];a.on("data",a=>{f.push(a)}),a.on("end",()=>{b(i.Buffer.concat(f)),d.destroy()})}),d.end()})}let l=a=>!!a&&"object"==typeof a&&"string"==typeof a.AccessKeyId&&"string"==typeof a.SecretAccessKey&&"string"==typeof a.Token&&"string"==typeof a.Expiration,m=a=>({accessKeyId:a.AccessKeyId,secretAccessKey:a.SecretAccessKey,sessionToken:a.Token,expiration:new Date(a.Expiration),...a.AccountId&&{accountId:a.AccountId}}),n=1e3,o=0,p=({maxRetries:a=o,timeout:b=n})=>({maxRetries:a,timeout:b}),q=(a,b)=>{let c=a();for(let d=0;d<b;d++)c=c.catch(a);return c},r="AWS_CONTAINER_CREDENTIALS_FULL_URI",s="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",t="AWS_CONTAINER_AUTHORIZATION_TOKEN",u=(a={})=>{let{timeout:b,maxRetries:c}=p(a);return()=>q(async()=>{let c=await y({logger:a.logger}),d=JSON.parse(await v(b,c));if(!l(d))throw new f.C("Invalid response received from instance metadata service.",{logger:a.logger});return m(d)},c)},v=async(a,b)=>(process.env[t]&&(b.headers={...b.headers,Authorization:process.env[t]}),(await k({...b,timeout:a})).toString()),w={localhost:!0,"127.0.0.1":!0},x={"http:":!0,"https:":!0},y=async({logger:a})=>{if(process.env[s])return{hostname:"169.254.170.2",path:process.env[s]};if(process.env[r]){let b=(0,g.parse)(process.env[r]);if(!b.hostname||!(b.hostname in w))throw new f.C(`${b.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:a});if(!b.protocol||!(b.protocol in x))throw new f.C(`${b.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:a});return{...b,port:b.port?parseInt(b.port,10):void 0}}throw new f.C(`The container metadata credential provider cannot be used unless the ${s} or ${r} environment variable is set`,{tryNextLink:!1,logger:a})};var z=c(55250);class A extends f.C{constructor(a,b=!0){super(a,b),this.tryNextLink=b,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,A.prototype)}}var B=c(45874);!function(a){a.IPv4="http://169.254.169.254",a.IPv6="http://[fd00:ec2::254]"}(d||(d={}));let C={environmentVariableSelector:a=>a.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:a=>a.ec2_metadata_service_endpoint,default:void 0};!function(a){a.IPv4="IPv4",a.IPv6="IPv6"}(e||(e={}));let D={environmentVariableSelector:a=>a.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:a=>a.ec2_metadata_service_endpoint_mode,default:e.IPv4},E=async()=>(0,B.D)(await F()||await G()),F=async()=>(0,z.Z)(C)(),G=async()=>{let a=await (0,z.Z)(D)();switch(a){case e.IPv4:return d.IPv4;case e.IPv6:return d.IPv6;default:throw Error(`Unsupported endpoint mode: ${a}. Select from ${Object.values(e)}`)}},H=(a,b)=>{let c=300+Math.floor(300*Math.random()),d=new Date(Date.now()+1e3*c);b.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(d)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let e=a.originalExpiration??a.expiration;return{...a,...e?{originalExpiration:e}:{},expiration:d}},I="/latest/meta-data/iam/security-credentials/",J="AWS_EC2_METADATA_V1_DISABLED",K="ec2_metadata_v1_disabled",L="x-aws-ec2-metadata-token",M=(a={})=>((a,b={})=>{let c,d=b?.logger||console;return async()=>{let b;try{(b=await a()).expiration&&b.expiration.getTime()<Date.now()&&(b=H(b,d))}catch(a){if(c)d.warn("Credential renew failed: ",a),b=H(c,d);else throw a}return c=b,b}})(N(a),{logger:a.logger}),N=(a={})=>{let b=!1,{logger:c,profile:d}=a,{timeout:e,maxRetries:g}=p(a),h=async(c,e)=>{if(b||e.headers?.[L]==null){let b=!1,c=!1,e=await (0,z.Z)({environmentVariableSelector:b=>{let d=b[J];if(c=!!d&&"false"!==d,void 0===d)throw new f.C(`${J} not set in env, checking config file next.`,{logger:a.logger});return c},configFileSelector:a=>{let c=a[K];return b=!!c&&"false"!==c},default:!1},{profile:d})();if(a.ec2MetadataV1Disabled||e){let d=[];throw a.ec2MetadataV1Disabled&&d.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),b&&d.push(`config file profile (${K})`),c&&d.push(`process environment variable (${J})`),new A(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${d.join(", ")}].`)}}let g=(await q(async()=>{let a;try{a=await P(e)}catch(a){throw 401===a.statusCode&&(b=!1),a}return a},c)).trim();return q(async()=>{let c;try{c=await Q(g,e,a)}catch(a){throw 401===a.statusCode&&(b=!1),a}return c},c)};return async()=>{let a=await E();if(b)return c?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),h(g,{...a,timeout:e});{let d;try{d=(await O({...a,timeout:e})).toString()}catch(d){if(d?.statusCode===400)throw Object.assign(d,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===d.message||[403,404,405].includes(d.statusCode))&&(b=!0),c?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),h(g,{...a,timeout:e})}return h(g,{...a,headers:{[L]:d},timeout:e})}}},O=async a=>k({...a,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),P=async a=>(await k({...a,path:I})).toString(),Q=async(a,b,c)=>{let d=JSON.parse((await k({...b,path:I+a})).toString());if(!l(d))throw new f.C("Invalid response received from instance metadata service.",{logger:c.logger});return m(d)}}};