__version__ = "3.0.40.4695"

if __package__ or "." in __name__:
    from . import _DynamsoftCodeParser
else:
    import _DynamsoftCodeParser

from typing import List

from enum import IntEnum, Enum

if __package__ or "." in __name__:
    from .core import *
else:
    from core import *



class EnumMappingStatus(IntEnum):
    MS_NONE = _DynamsoftCodeParser.MS_NONE
    MS_SUCCEEDED = _DynamsoftCodeParser.MS_SUCCEEDED
    MS_FAILED = _DynamsoftCodeParser.MS_FAILED


class EnumValidationStatus(IntEnum):
    VS_NONE = _DynamsoftCodeParser.VS_NONE
    VS_SUCCEEDED = _DynamsoftCodeParser.VS_SUCCEEDED
    VS_FAILED = _DynamsoftCodeParser.VS_FAILED

class EnumCodeType(str, Enum):
    CT_MRTD_TD1_ID = _DynamsoftCodeParser.getCT_MRTD_TD1_ID()
    CT_MRTD_TD2_ID = _DynamsoftCodeParser.getCT_MRTD_TD2_ID()
    CT_MRTD_TD2_VISA = _DynamsoftCodeParser.getCT_MRTD_TD2_VISA()
    CT_MRTD_TD3_PASSPORT = _DynamsoftCodeParser.getCT_MRTD_TD3_PASSPORT()
    CT_MRTD_TD3_VISA = _DynamsoftCodeParser.getCT_MRTD_TD3_VISA()
    CT_MRTD_TD2_FRENCH_ID = _DynamsoftCodeParser.getCT_MRTD_TD2_FRENCH_ID()
    CT_AAMVA_DL_ID = _DynamsoftCodeParser.getCT_AAMVA_DL_ID()
    CT_AAMVA_DL_ID_WITH_MAG_STRIPE = _DynamsoftCodeParser.getCT_AAMVA_DL_ID_WITH_MAG_STRIPE()
    CT_SOUTH_AFRICA_DL = _DynamsoftCodeParser.getCT_SOUTH_AFRICA_DL()
    CT_AADHAAR = _DynamsoftCodeParser.getCT_AADHAAR()
    CT_VIN = _DynamsoftCodeParser.getCT_VIN()
    CT_GS1_AI = _DynamsoftCodeParser.getCT_GS1_AI()

class ParsedResultItem(CapturedResultItem):
    """
    The ParsedResultItem class represents a parsed result item generated by code parser engine.

    Methods:
        get_code_type(self) -> str: Gets the code type of the parsed result.
        get_field_value(self, field_name: str) -> str: Gets the value of a specified field from the parsed result.
        get_field_mapping_status(self, field_name: str) -> int: Gets the mapping status of a specified field from the parsed result.
        get_field_validation_status(self, field_name: str) -> int: Gets the validation status of a specified field from the parsed result.
        get_json_string(self) -> str: Gets the parsed result as a JSON formatted string.
    """
    _thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self):
        raise AttributeError("No constructor defined - class is abstract")

    def get_json_string(self) -> str:
        """
        Gets the parsed result as a JSON formatted string.

        Returns:
            A JSON formatted string representing the full parsed result.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetJsonString(self)

    def get_code_type(self) -> str:
        """
        Gets the code type of the parsed result.

        Returns:
            A string value representing the code type.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetCodeType(self)

    def get_field_value(self, field_name: str) -> str:
        """
        Gets the value of a specified field from the parsed result.

        Args:
            field_name(str): The name of the field.

        Returns:
            A string representing the specified field value.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetFieldValue(self, field_name)

    def get_field_mapping_status(self, field_name: str) -> int:
        """
        Gets the mapping status of a specified field from the parsed result.

        Args:
            field_name(str): The name of the field.

        Returns:
            An EnumMappingStatus value representing the mapping status of a specified field.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetFieldMappingStatus(
            self, field_name
        )

    def get_field_validation_status(self, field_name: str) -> int:
        """
        Gets the validation status of a specified field from the parsed result.

        Args:
            field_name(str): The name of the field.

        Returns:
            An EnumValidationStatus value representing the validation status of a specified field.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetFieldValidationStatus(
            self, field_name
        )

    def get_field_raw_value(self, field_name: str) -> str:
        """
        Gets the raw string of a specified field from the parsed result.

        Args:
            field_name(str): The name of the field.

        Returns:
            A string representing the specified field raw string.
        """
        return _DynamsoftCodeParser.CParsedResultItem_GetFieldRawValue(self, field_name)

    def get_all_field_names(self)->List[str]:
        """
        Gets the field names of the parsed result.

        Returns:
            A list of strings representing the field names.
        """
        list = []
        count = _DynamsoftCodeParser.CParsedResultItem_GetFieldCount(self)
        for i in range(count):
            list.append(_DynamsoftCodeParser.CParsedResultItem_GetFieldName(self, i))
        return list

_DynamsoftCodeParser.CParsedResultItem_register(ParsedResultItem)


class ParsedResult(CapturedResultBase):
    """
    The ParsedResult class represents the results of a code parser process.

    Methods:
        get_items(self) -> List[ParsedResultItem]: Gets all the parsed result items.
    """
    _thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __destroy__ = _DynamsoftCodeParser.CParsedResult_Release

    def __init__(self):
        raise AttributeError("No constructor defined - class is abstract")

    def get_items(self) -> List[ParsedResultItem]:
        """
        Gets all the parsed result items.

        Returns:
            A ParsedResultItem list.
        """
        list = []
        count = _DynamsoftCodeParser.CParsedResult_GetItemsCount(self)
        for i in range(count):
            list.append(_DynamsoftCodeParser.CParsedResult_GetItem(self, i))
        return list

_DynamsoftCodeParser.CParsedResult_register(ParsedResult)


class CodeParserModule:
    """
    The CodeParserModule class defines general functions in the code parser module.

    Methods:
        get_version() -> str: Returns a string representing the version of the code parser module.
    """
    _thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    @staticmethod
    def get_version() -> str:
        """
        Returns a string representing the version of the code parser module.

        Returns:
            A string representing the version of the code parser module.
        """
        return __version__ + " (Algotithm " + _DynamsoftCodeParser.CCodeParserModule_GetVersion() + ")"

    def __init__(self):
        _DynamsoftCodeParser.Class_init(
            self, _DynamsoftCodeParser.new_CCodeParserModule()
        )

    __destroy__ = _DynamsoftCodeParser.delete_CCodeParserModule


_DynamsoftCodeParser.CCodeParserModule_register(CodeParserModule)
