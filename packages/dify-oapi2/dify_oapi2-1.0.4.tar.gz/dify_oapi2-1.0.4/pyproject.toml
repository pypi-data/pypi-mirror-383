[tool.poetry]
name = "dify-oapi2"
version = "1.0.4"
description = "A package for interacting with the Dify Service-API"
authors = ["Oscaner Miao <oscaner1997@gmail.com>", "QiMington <qimington@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = ["dify", "nlp", "ai", "language-processing"]
homepage = 'https://github.com/nodite/dify-oapi2'
packages = [{include = "dify_oapi"}]
include = ["README.md", "LICENSE"]
exclude = [".vscode", "docs", "examples", "tests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.urls]
Source = 'https://github.com/nodite/dify-oapi2'

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "A",  # flake8-annotations
    "B", # flake8-bugbear rules
    "F", # pyflakes rules
    "N",  #  name style rules
    "I", # isort rules
    "UP",   # pyupgrade rules
    "E101", # mixed-spaces-and-tabs
    "RUF019", # unnecessary-key-check
    "RUF100", # unused-noqa
    "RUF101", # redirected-noqa
    "S506", # unsafe-yaml-load
    "W191", # tab-indentation
    "W605", # invalid-escape-sequence
]
ignore = [
    "A002", # argument-is-shadowing-builtin
    "B904", # raise-without-from-inside-except
    "N805", # First argument of a method should be named `self`
    "N806", # Variable in function should be lowercase
]

fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_[a-zA-Z0-9_]*|)$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.pylint]
disable = ["all"]  # diable all rule first
enable = ["too-many-statements"]  # then enable too-many-statements rule
max-statements = 50  # function max statement

############################################################
# Dependency group
############################################################

[tool.poetry.dependencies]
python = ">=3.10"
pydantic = "^2"
httpx = "^0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
pytest = "^8"
pytest-env = "^1"
pytest-asyncio = "^1"
pre-commit = "^4"
commitizen = "^4"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra"
]













[tool.poetry.group.format]
optional = true
[tool.poetry.group.format.dependencies]
pre-commit = "^4"
mypy = "^1"
ruff = "^0"
black = "^25"

[tool.commitizen]
name = "cz_conventional_commits"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true

[tool.mypy]
files = ["dify_oapi"] # 只检查主要代码
exclude = [".venv", "venv", "examples", "tests"]

python_version = "3.10"
strict_optional = true
ignore_missing_imports = true
allow_untyped_globals = false

check_untyped_defs = true
disallow_any_unimported = false

warn_return_any = true
warn_unreachable = true
warn_redundant_casts = true

strict_equality = true

# plugins = ["pydantic.mypy"]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
(
  ^/build/          # exclude a directory named build in the root of the project
  | ^/dist/         # exclude a directory named dist in the root of the project
  | \.venv/         # exclude .venv directories anywhere in the project
  | venv/           # exclude venv directories anywhere in the project
)
'''
