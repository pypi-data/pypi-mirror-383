from typing import Dict, Any

from .base import BaseResource
from pesapal_sdk.models import (
    OrderRequest, SubscriptionPayment,
    RefundRequest
)
from pesapal_sdk.constants import (
    SUBMIT_ORDER_REQUEST_ENDPOINT, TRANSACTION_STATUS_ENDPOINT, 
    REFUND_REQUEST_ENDPOINT, ORDER_CANCELLATION_ENDPOINT
)

class Transactions(BaseResource):
    def submit_order(self, order: OrderRequest) -> Dict[Any, Any]:
        """
        Create a payment request

        Args:
            order: OrderRequest instance
        Returns:
            Dict
        """
        return self._make_request(
            method="POST",
            endpoint=SUBMIT_ORDER_REQUEST_ENDPOINT,
            json=order.to_dict(),
        )

    def get_status(self, order_tracking_id: str) -> Dict[Any, Any]:
        """
        Check the status of the payment using the OrderTrackingId

        Args:
            order_tracking_id: Unique order id generated by Pesapal
        
        Returns:
            Dict
        """
        return self._make_request(
            method='GET',
            endpoint=TRANSACTION_STATUS_ENDPOINT,
            params={'orderTrackingId': order_tracking_id}
        )
    
    def create_subscription(self, subscription: SubscriptionPayment) -> Dict[Any, Any]:
        """
        Set up recurring/subscription-based payments

        Args:
            subscription: SubscriptionPayment instance
        
        Returns:
            Dict
        """
        return self._make_request(
            method="POST",
            endpoint=SUBMIT_ORDER_REQUEST_ENDPOINT,
            json=subscription.to_dict()
        )
    
    def refund_request(self, refund: RefundRequest) -> Dict[Any, Any]:
        """
        Refund a charge that has previously been processed but not yet refunded. 
        Funds are be refunded to the credit / debit card or mobile money wallet that was originally charged.

        Args:
            refund: RefundRequest instance

        Returns:
            Dict
        """
        return self._make_request(
            method="POST",
            endpoint=REFUND_REQUEST_ENDPOINT,
            json=refund.to_dict()
        )
    
    def cancel_order(self, order_tracking_id: str) -> Dict[Any, Any]:
        """
        Revoke a previously placed order request that remains incomplete on our end. 
        This API facilitates the cancellation of orders that have encountered failures or are pending transactions.
        he original Pesapal Order tracking ID that was returned after submitting your order request earlier during the initial submit order request api call
        
        Args:
            order_tracking_id: The original Pesapal Order tracking ID that was returned after submitting your order request earlier during the initial submit order request api call
        
        Returns:
            Dict
        """
        return self._make_request(
            method="POST",
            endpoint=ORDER_CANCELLATION_ENDPOINT,
            json={'order_tracking_id': order_tracking_id}
        )