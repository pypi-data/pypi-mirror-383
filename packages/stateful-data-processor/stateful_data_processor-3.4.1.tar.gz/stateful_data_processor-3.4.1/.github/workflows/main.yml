name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write   # needed to push tags & create releases

jobs:
  tests:
    name: tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test] || true
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest -q \
            --cov=stateful_data_processor \
            --cov-report=term \
            --cov-report=xml

      - name: Coveralls (parallel)
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.xml
          format: cobertura
          flag-name: py${{ matrix.python-version }}
          parallel: true

  coveralls-finish:
    name: coveralls finish
    needs: tests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Finalize parallel coverage
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  release:
    name: Tag, release & publish
    # only on pushes to master; still run even if tests fail -> change to "needs: tests" if you want to gate on CI
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    env:
      DEFAULT_BUMP: MINOR
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    steps:
      - name: Check out (with full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # we need tags

      - name: Set up Git author (for tagging)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine bump type from commit message
        id: bump
        shell: bash
        run: |
          msg="${{ github.event.head_commit.message }}"
          shopt -s nocasematch
          if [[ "$msg" =~ ^MAJOR:|[[:space:]]MAJOR: ]]; then
            echo "level=major" >> $GITHUB_OUTPUT
          elif [[ "$msg" =~ ^MINOR:|[[:space:]]MINOR: ]]; then
            echo "level=minor" >> $GITHUB_OUTPUT
          elif [[ "$msg" =~ ^PATCH:|[[:space:]]PATCH: ]]; then
            echo "level=patch" >> $GITHUB_OUTPUT
          else
            echo "level=${DEFAULT_BUMP,,}" >> $GITHUB_OUTPUT
          fi

      - name: Compute next version & tag
        id: semver
        shell: bash
        run: |
          # Get latest tag (assumes tags like vX.Y.Z or X.Y.Z). If none, start from 0.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          latest_tag=${latest_tag#v}
          IFS='.' read -r MA MI PA <<< "$latest_tag"

          bump="${{ steps.bump.outputs.level }}"
          case "$bump" in
            major) MA=$((MA+1)); MI=0; PA=0;;
            minor) MI=$((MI+1)); PA=0;;
            patch) PA=$((PA+1));;
            *) echo "Unknown bump '$bump'"; exit 1;;
          esac

          new_ver="${MA}.${MI}.${PA}"
          new_tag="v${new_ver}"

          echo "latest=$latest_tag" >> $GITHUB_OUTPUT
          echo "version=$new_ver" >> $GITHUB_OUTPUT
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

          # Create tag if it doesn't already exist
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists; skipping create."
          else
            git tag -a "$new_tag" -m "Release $new_tag"
            git push origin "$new_tag"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install tox and build deps
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Build (tox)
        run: tox -e build

      - name: Docs (tox)
        run: tox -e docs

      - name: Publish to PyPI (tox)
        env:
          TWINE_USERNAME: ${{ env.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ env.TWINE_PASSWORD }}
        run: tox -e publish -- --repository pypi --verbose

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semver.outputs.tag }}
          name: ${{ steps.semver.outputs.tag }}
          body: |
            Automated release ${{ steps.semver.outputs.tag }}.
            Bump level: ${{ steps.bump.outputs.level }}.
          generate_release_notes: true
