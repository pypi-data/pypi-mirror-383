[tox]
envlist = python
minversion = 3.21.0
isolated_build = true


[testenv:just-pytest]
allowlist_externals =
isolated_build = true
usedevelop = false
deps =
  # NOTE: `coverage` is a transitive dep but we need a minimum version boundary
  # NOTE: to get a version supporting `source_pkgs`.
  coverage >= 5.3
  pytest
  pytest-cov
  pytest-xdist
passenv =
  PYTHONPATH
commands_pre =
commands =
  {envpython} -m \
    pytest \
    {tty:--color=yes} \
    --no-cov \
    {posargs:}


[testenv]
allowlist_externals =
  {env:CATCHSEGV_BINARY:}
  env
  sh
isolated_build = true
usedevelop = false
deps =
  coverage >= 5.3
  Cython
  expandvars
  pytest
  pytest-cov
  pytest-xdist
setenv =
  ANSIBLE_PYLIBSSH_CYTHON_TRACING = {env:ANSIBLE_PYLIBSSH_CYTHON_TRACING:1}
  CATCHSEGV_BINARY = {env:CATCHSEGV_BINARY:}
  SEGFAULT_SIGNALS = all
commands =
  env PYTHONPATH=packaging/ {envpython} -m pep517_backend.cli translate-cython
  {env:CATCHSEGV_BINARY:} {envpython} -m \
    pytest \
    {tty:--color=yes} \
    {posargs:}

[dists]
install_command =
  env PIP_CONSTRAINT= \
    {envpython} -m pip install {opts} {packages}
setenv =
  {[testenv]setenv}
  PEP517_OUT_DIR = {env:PEP517_OUT_DIR:{toxinidir}{/}dist}
  PIP_CONSTRAINT = {toxinidir}/requirements-build.txt


[testenv:cleanup-dists]
allowlist_externals =
  rm
description =
  Wipe the the dists/ folder
usedevelop = false
skip_install = true
deps =
install_command =
  {[dists]install_command}
setenv =
  {[dists]setenv}
commands =
  rm -rfv {env:PEP517_OUT_DIR}


[testenv:build-dists]
description =
  Build non-universal dists and put them into the dists/ folder
depends =
  cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  build ~= 0.9.0
install_command =
  {[dists]install_command}
passenv =
  PEP517_BUILD_ARGS
setenv =
  {[dists]setenv}
commands =
  {envpython} -m build \
    --outdir '{env:PEP517_OUT_DIR}{/}' \
    {posargs:{env:PEP517_BUILD_ARGS:}} \
    '{toxinidir}'


[testenv:build-wheels-pip]
description =
  Build non-universal wheels dists and
  put them into the dists/ folder
depends =
  cleanup-dists
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  # NOTE: v20 added support for backend-path
  # NOTE: in pyproject.toml and we use it
  pip >= 20
install_command =
  {[dists]install_command}
setenv =
  {[dists]setenv}
commands =
  env PIP_CONSTRAINT= \
    {envpython} -m pip wheel \
    --no-deps \
    --wheel-dir "{env:PEP517_OUT_DIR}" \
    "{toxinidir}"


[testenv:delocate-macos-wheels]
description = Vendor external deps into macOS wheels
# only run under macOS
platform = ^darwin
depends =
  build-dists
  build-wheels-pip
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
skip_install = true
deps =
  delocate
install_command =
  {[dists]install_command}
setenv =
  {[dists]setenv}
commands =
  sh -c "\
    {envpython} -m \
    delocate.cmd.delocate_listdeps \
    --all \
    {posargs:'{env:PEP517_OUT_DIR}'/*.whl}"

  sh -c "\
    {envpython} -m \
    delocate.cmd.delocate_wheel \
    -v \
    {posargs:'{env:PEP517_OUT_DIR}'/*.whl}"

  sh -c "\
    {envpython} -m \
    delocate.cmd.delocate_listdeps \
    --all \
    {posargs:'{env:PEP517_OUT_DIR}'/*.whl}"


[testenv:metadata-validation]
description =
  Verify that dists under the dist/ dir have valid metadata
depends =
  build-dists
  cibuildwheel
  build-wheels-pip
  delocate-macos-wheels
deps =
  twine
install_command =
  {[dists]install_command}
usedevelop = false
skip_install = true
setenv =
  {[dists]setenv}
commands =
  twine check --strict {env:PEP517_OUT_DIR}/*


[testenv:cibuildwheel]
description =
  Build publishable wheel dists using `cibuildwheel` and
  put them into the dists/ folder
commands =
  {envpython} -Im cibuildwheel {posargs}
deps =
  cibuildwheel
package = skip
set_env =
  CIBW_CONFIG_SETTINGS = with-cython-tracing={env:ANSIBLE_PYLIBSSH_CYTHON_TRACING:true}


[testenv:lint]
basepython = python3
commands =
  {envpython} -m pre_commit run --show-diff-on-failure {posargs:--all-files}

  # Print out the advice on how to install pre-commit from this env into Git:
  -{envpython} -c \
  'cmd = "{envpython} -m pre_commit install"; scr_width = len(cmd) + 10; sep = "=" * scr_width; cmd_str = "    $ " + cmd; '\
  'print("\n" + sep + "\nTo install pre-commit hooks into the Git repo, run:\n\n" + cmd_str + "\n\n" + sep + "\n")'
deps =
  pre-commit
  # pylint
isolated_build = true
skip_install = true


[testenv:build-docs]
allowlist_externals =
  git
basepython = python3
depends =
  make-changelog
deps =
  -r{toxinidir}/docs/requirements.txt
  # FIXME: re-enable the "-r" + "-c" paradigm once the pip bug is fixed.
  # Ref: https://github.com/pypa/pip/issues/9243
  # -r{toxinidir}/docs/requirements.in
  # -c{toxinidir}/docs/requirements.txt
description = Build The Docs
commands =
  # Retrieve possibly missing commits:
  -git fetch --unshallow
  -git fetch --tags

  # Build the html docs with Sphinx:
  {envpython} -Im sphinx \
  {posargs:\
    -j auto \
    -b {env:SPHINX_BUILDER:html} \
    {tty:--color} \
    -a \
    -n \
    -W --keep-going \
    -d "{temp_dir}/.doctrees" \
    . \
    {env:SPHINX_BUILD_OUTPUT_DIRECTORY:"{envdir}/docs_out"} \
  }

  # Print out the output docs dir and a way to serve html:
  -{envpython} -c\
  'import pathlib;\
  docs_dir = pathlib.Path(r"{envdir}") / "docs_out";\
  index_file = docs_dir / "index.html";\
  print("\n" + "=" * 120 +\
  f"\n\nDocumentation available under:\n\n\
  \tfile://\{index_file\}\n\nTo serve docs, use\n\n\
  \t$ python3 -Im http.server --directory \
  \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0\n\n" +\
  "=" * 120)'
changedir = {toxinidir}/docs
isolated_build = true
passenv =
  READTHEDOCS*
  SPHINX_BUILDER
  SPHINX_BUILD_OUTPUT_DIRECTORY
  SSH_AUTH_SOCK
setenv =
  # NOTE: `pip` vendors deprecated `setuptools`' `pkg_resources`, causing
  # NOTE: an unfixable deprecation error, so it's suppressed here. Older
  # NOTE: `towncrier` versions hit it too. Some `sphinxcontrib` namespace
  # NOTE: extensions haven't yet been upgraded to using PEP 420 either.
  # NOTE: Also, one of the warnings comes from the `click-default-group` build:
  PYTHONWARNINGS = error,once:pkg_resources is deprecated as an API.:DeprecationWarning:pip._internal.metadata.importlib._envs,once:pkg_resources is deprecated as an API.:DeprecationWarning:setuptools.command.test,once:pkg_resources is deprecated as an API.:DeprecationWarning:towncrier._settings.load,once:Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.:DeprecationWarning,once:setup.py install is deprecated.:
skip_install = true


[testenv:check-changelog]
basepython = {[testenv:make-changelog]basepython}
description =
  Check Towncrier change notes
commands =
  {envpython} -m \
    towncrier.check \
    --compare-with origin/devel {posargs:}
deps =
  {[testenv:make-changelog]deps}
envdir = {[testenv:make-changelog]envdir}
isolated_build = {[testenv:make-changelog]isolated_build}
skip_install = {[testenv:make-changelog]skip_install}


[testenv:make-changelog]
basepython = python3
depends =
  check-changelog
description =
  Generate a changelog from fragments using Towncrier. Getting an
  unreleased changelog preview does not require extra arguments.
  When invoking to update the changelog, pass the desired version as an
  argument after `--`. For example, `tox -e {envname} -- 1.3.2`.
envdir = {toxworkdir}/changelog
commands =
  {envpython} -m \
    towncrier build \
    --version \
    {posargs:'[UNRELEASED DRAFT]' --draft}
deps =
  -r{toxinidir}/docs/requirements.txt
  # FIXME: re-enable the "-r" + "-c" paradigm once the pip bug is fixed.
  # Ref: https://github.com/pypa/pip/issues/9243
  # towncrier
  # -r{toxinidir}/docs/requirements.in
  # -c{toxinidir}/docs/requirements.txt
isolated_build = true
skip_install = true


[testenv:draft-changelog]
basepython = {[testenv:make-changelog]basepython}
description =
  Print out the Towncrier-managed change notes
  draft for the next release to stdout
commands =
  # NOTE: `sh` invocation is required to suppress stderr from
  # NOTE: towncrier since it does not have own CLI flags for
  # NOTE: doing this.
  sh -c "2>/dev/null \
    {envpython} -m \
    towncrier.build \
    --version '[UNRELEASED DRAFT]' \
    --draft"
envdir = {[testenv:make-changelog]envdir}
deps =
  {[testenv:make-changelog]deps}
isolated_build = {[testenv:make-changelog]isolated_build}
skip_install = {[testenv:make-changelog]skip_install}


[testenv:clean]
allowlist_externals =
  git
description =
  Clean the Git repo workdir
commands =
  git clean -fxd \
    -- \
    build/ \
    packaging/__pycache__/ \
    src/build/ \
    src/*.egg-info/

  git clean -iXd
deps =
isolated_build = true
skip_install = true
