"""{{ class_name }} middleware for FastAPI application"""
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp
import time
from typing import Callable


class {{ class_name }}Middleware(BaseHTTPMiddleware):
    """
    {{ class_name }} middleware

    This middleware processes requests before they reach your endpoints
    and responses before they're returned to clients.

    Usage:
        Add to your FastAPI app in app.py:
        from .middleware.{{ file_name }} import {{ class_name }}Middleware
        app.add_middleware({{ class_name }}Middleware)
    """

    def __init__(self, app: ASGIApp):
        super().__init__(app)
        # Add any initialization logic here
        # Example: self.config = load_config()

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """
        Process the request and response

        Args:
            request: The incoming request
            call_next: Function to call the next middleware or endpoint

        Returns:
            Response object
        """
        # ==========================================
        # BEFORE REQUEST - Add your logic here
        # ==========================================
        # Example: Log request
        # print(f"Incoming request: {request.method} {request.url}")

        # Example: Add custom headers
        # request.state.custom_data = "some value"

        # Example: Measure request time
        start_time = time.time()

        # ==========================================
        # PROCESS REQUEST
        # ==========================================
        response = await call_next(request)

        # ==========================================
        # AFTER REQUEST - Add your logic here
        # ==========================================
        # Example: Add custom response headers
        # response.headers["X-Process-Time"] = str(time.time() - start_time)

        # Example: Log response
        process_time = time.time() - start_time
        # print(f"Request completed in {process_time:.4f}s")

        return response
