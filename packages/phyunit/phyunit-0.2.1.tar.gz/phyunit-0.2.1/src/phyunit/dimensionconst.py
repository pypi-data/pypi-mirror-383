from collections import defaultdict

from .dimension import DIMENSIONLESS, Dimension
from .utils.constclass import ConstClass


class DimensionConst(ConstClass):
    '''
    use this class to access commonly used `Dimension` constants.

    >>> print(DimensionConst.VELOCITY)
    T⁻¹L

    >>> print(DimensionConst.FORCE)
    T⁻²LM

    NOTE
    different physical quantities may have the same dimension,
    like _energy_ and _work_.

    Be careful when using these dimensions,
    especially in `set` or as keys in `dict`:

    >>> {DimensionConst.ENERGY: 1, DimensionConst.WORK: 2}  # same key!
    {Dimension(T=-2, L=2, M=1): 2}
    '''

    DIMENSIONLESS = DIMENSIONLESS

    # 7 eigen SI base units

    TIME = Dimension(T=1)
    LENGTH = Dimension(L=1)
    MASS = Dimension(M=1)
    ELECTRIC_CURRENT = Dimension(I=1)
    THERMODYNAMIC_TEMPERATURE = Dimension(Theta=1)
    AMOUNT_OF_SUBSTANCE = Dimension(N=1)
    LUMINOUS_INTENSITY = Dimension(J=1)

    # straight derived

    ANGLE = PHASE_ANGLE = PLANE_ANGLE = SOLID_ANGLE = DIMENSIONLESS
    WAVENUMBER = VERGENCE = OPTICAL_POWER = CURVATURE = SPATIAL_FREQUENCY = 1 / LENGTH
    AREA = LENGTH**2
    VOLUME = LENGTH**3
    FREQUENCY = 1 / TIME
    TEMPERATURE = THERMODYNAMIC_TEMPERATURE

    # kinematics

    VELOCITY = SPEED = LENGTH / TIME
    ACCELERATION = VELOCITY / TIME
    JERK = JOLT = ACCELERATION / TIME
    SNAP = JOUNCE = JERK / TIME
    CRACKLE = SNAP / TIME
    POP = CRACKLE / TIME
    ANGULAR_VELOCITY = ANGULAR_FREQUENCY = ANGLE / TIME
    ANGULAR_ACCELERATION = ANGULAR_VELOCITY / TIME
    FREQUENCY_DRIFT = FREQUENCY / TIME
    VOLUMETRIC_FLOW = VOLUME / TIME

    # mechanics

    FORCE = WEIGHT = MASS * ACCELERATION
    SURFACE_TENSION = STIFFNESS = FORCE / LENGTH
    YANK = FORCE / TIME
    ENERGY = WORK = HEAT = FORCE * LENGTH
    POWER = RADIANT_FLUX = ENERGY / TIME
    ACTION = ENERGY * TIME
    MOMENTUM = MASS * VELOCITY
    IMPULSE = FORCE * TIME
    ANGULAR_MOMENTUM = LENGTH * MOMENTUM
    MOMENT_OF_INERTIA = ANGULAR_MOMENTUM / ANGULAR_VELOCITY
    MOMENT_OF_FORCE = TORQUE = FORCE * LENGTH

    # material properties

    DENSITY = MASS_CONCENTRATION = MASS / VOLUME
    SURFACE_DENSITY = AREA_DENSITY = MASS / AREA
    LINEAR_DENSITY = MASS / LENGTH
    FUEL_EFFICIENCY = LENGTH / VOLUME
    SPECIFIC_VOLUME = VOLUME / MASS
    SPECIFIC_ENERGY = ENERGY / MASS
    SPECIFIC_ANGULAR_MOMENTUM = ANGULAR_MOMENTUM / MASS
    ENERGY_DENSITY = ENERGY / VOLUME
    RADIANT_EXPOSURE = ENERGY / AREA
    POWER_DENSITY = POWER / VOLUME
    HEAT_FLUX_DENSITY = IRRADIANCE = POWER / AREA
    SPECTRAL_IRRADIANCE = IRRADIANCE / LENGTH
    SPECTRAL_POWER = POWER / LENGTH
    PRESSURE = STRESS = FORCE / AREA
    COMPRESSIBILITY = 1 / PRESSURE
    VISCOSITY = DYNAMIC_VISCOSITY = PRESSURE * TIME
    KINEMATIC_VISCOSITY = DYNAMIC_VISCOSITY / DENSITY
    DIFFUSION_COEFFICIENT = AREA / TIME

    # thermodynamics

    HEAT_CAPACITY = ENTROPY = ENERGY / TEMPERATURE
    SPECIFIC_HEAT_CAPACITY = SPECIFIC_ENTROPY = HEAT_CAPACITY / MASS
    THERMAL_CONDUCTIVITY = HEAT_FLUX_DENSITY * LENGTH / TEMPERATURE
    THERMAL_DIFFUSIVITY = THERMAL_CONDUCTIVITY / (DENSITY * SPECIFIC_HEAT_CAPACITY)
    THERMAL_RESISTANCE = TEMPERATURE / POWER
    THERMAL_EXPANSION_COEFFICIENT = 1 / TEMPERATURE
    TEMPERATURE_GRADIENT = TEMPERATURE / LENGTH

    # electromagnetics

    ELECTRIC_CHARGE = ELECTRIC_CURRENT * TIME
    CHARGE_DENSITY = ELECTRIC_CHARGE / VOLUME
    CURRENT_DENSITY = ELECTRIC_CURRENT / AREA
    SURFACE_CHARGE_DENSITY = ELECTRIC_CHARGE / AREA
    LINEAR_CHARGE_DENSITY = ELECTRIC_CHARGE / LENGTH
    ELECTRIC_DIPOLE_MOMENT = ELECTRIC_CHARGE * LENGTH
    POLARIZATION = ELECTRIC_POLARIZATION = POLARIZATION_DENSITY = ELECTRIC_FLUX_DENSITY = ELECTRIC_DISPLACEMENT_FIELD = ELECTRIC_DIPOLE_MOMENT / VOLUME
    VOLTAGE = ELECTRIC_POTENTIAL = ELECTROMOTIVE_FORCE = POWER / ELECTRIC_CURRENT
    ELECTRIC_FIELD_STRENGTH = VOLTAGE / LENGTH
    PERMITTIVITY = ELECTRIC_DISPLACEMENT_FIELD / ELECTRIC_FIELD_STRENGTH
    CAPACITANCE = ELECTRIC_CHARGE / VOLTAGE
    RESISTANCE = IMPEDANCE = REACTANCE = VOLTAGE / ELECTRIC_CURRENT
    RESISTIVITY = VOLUME_RESISTIVITY = SPECIFIC_ELECTRICAL_RESISTANCE = RESISTANCE * AREA / LENGTH
    CONDUCTANCE = 1 / RESISTANCE
    CONDUCTIVITY = SPECIFIC_CONDUCTANCE = 1 / RESISTIVITY
    ELECTRICAL_MOBILITY = VELOCITY / ELECTRIC_FIELD_STRENGTH
    MAGNETIC_FLUX = VOLTAGE * TIME
    MAGNETIC_FLUX_DENSITY = MAGNETIC_INDUCTION = MAGNETIC_FLUX / AREA
    MAGNETIC_DIPOLE_MOMENT = ELECTRIC_CURRENT * AREA
    MAGNETIC_FIELD_STRENGTH = ELECTRIC_CURRENT / LENGTH
    MAGNETIC_VECTOR_POTENTIAL = MAGNETIC_FLUX_DENSITY * LENGTH
    MAGNETIC_DIPOLE_MOMENT = TORQUE / MAGNETIC_FLUX_DENSITY
    MAGNETIC_RIGIDITY = MAGNETIC_FLUX_DENSITY * LENGTH
    MAGNETIZATION = MAGNETIC_DIPOLE_MOMENT / VOLUME
    MAGNETOMOTIVE_FORCE = ELECTRIC_CURRENT
    PERMEABILITY = MAGNETIC_FIELD_STRENGTH / MAGNETIC_INDUCTION
    INDUCTANCE = MAGNETIC_FLUX / ELECTRIC_CURRENT
    MAGNETIC_RELUCTANCE = 1 / INDUCTANCE

    # photometry

    LUMINOUS_FLUX = LUMINOUS_INTENSITY * SOLID_ANGLE
    ILLUMINANCE = LUMINOUS_FLUX / AREA
    LUMINANCE = LUMINOUS_INTENSITY / AREA
    LUMINOUS_ENERGY = LUMINOUS_FLUX * TIME
    LUMINOUS_EXPOSURE = ILLUMINANCE * TIME
    LUMINOUS_EFFICACY = LUMINOUS_FLUX / POWER
    RADIANT_INTENSITY = POWER / SOLID_ANGLE
    SPECTRAL_INTENSITY = RADIANT_INTENSITY / LENGTH
    RADIANCE = RADIANT_INTENSITY / AREA

    # nuclear radiation

    RADIOACTIVITY = ACTIVITY = DECAY_CONSTANT = 1 / TIME
    KERMA = ABSORBED_DOSE = EQUIVALENT_DOSE = ENERGY / MASS  # of ionising radiation
    EXPOSURE = ELECTRIC_CHARGE / MASS  # X-ray and γ-ray
    ABSORBED_DOSE_RATE = ABSORBED_DOSE / TIME
    EQUIVALENT_DOSE_RATE = EQUIVALENT_DOSE / TIME

    # chemistry

    MOLARITY = CONCENTRATION = AMOUNT_OF_SUBSTANCE / VOLUME
    MOLAR_VOLUME = VOLUME / AMOUNT_OF_SUBSTANCE
    MOLAR_HEAT_CAPACITY = MOLAR_ENTROPY = HEAT_CAPACITY / AMOUNT_OF_SUBSTANCE
    MOLAR_ENERGY = ENERGY / AMOUNT_OF_SUBSTANCE
    MOLAR_CONDUCTIVITY = CONDUCTIVITY / AMOUNT_OF_SUBSTANCE
    MOLALITY = AMOUNT_OF_SUBSTANCE / MASS
    MOLAR_MASS = MASS / AMOUNT_OF_SUBSTANCE
    CATALYTIC_ACTIVITY = AMOUNT_OF_SUBSTANCE / TIME
    CATALYTIC_ACTIVITY_CONCENTRATION = CATALYTIC_ACTIVITY / VOLUME
    CATALYTIC_EFFICIENCY = MOLAR_VOLUME / TIME



_CORR_QUANTITY = defaultdict(list)
for name, dim in DimensionConst.__dict__.items():
    if isinstance(dim, Dimension):
        _CORR_QUANTITY[dim].append(name.lower().replace('_', ' '))
_CORR_QUANTITY = {k: tuple(v) for k, v in _CORR_QUANTITY.items()}


    