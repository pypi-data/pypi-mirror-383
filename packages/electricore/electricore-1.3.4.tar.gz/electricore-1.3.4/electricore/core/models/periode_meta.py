"""
Mod√®le Pandera Polars pour les m√©ta-p√©riodes de facturation.

Ce mod√®le d√©finit la structure des donn√©es pour les m√©ta-p√©riodes mensuelles
agr√©g√©es de facturation, combinant abonnements et √©nergies en utilisant Polars
pour des performances optimis√©es.
"""

import polars as pl
import pandera.polars as pa
from pandera.typing.polars import DataFrame
from pandera.engines.polars_engine import DateTime
from typing import Optional


class PeriodeMeta(pa.DataFrameModel):
    """
    üìå Mod√®le Pandera pour les m√©ta-p√©riodes de facturation - Version Polars.

    Repr√©sente une m√©ta-p√©riode mensuelle agr√©g√©e combinant les donn√©es
    d'abonnement et d'√©nergie pour une facturation simplifi√©e, optimis√©e pour Polars.

    L'agr√©gation utilise :
    - Puissance moyenne pond√©r√©e par nb_jours (math√©matiquement √©quivalente)
    - Somme simple pour les √©nergies et montants TURPE
    - M√©tadonn√©es pour tra√ßabilit√© des changements et compl√©tude
    """

    # Identifiants principaux
    ref_situation_contractuelle: pl.Utf8 = pa.Field(nullable=False)
    pdl: pl.Utf8 = pa.Field(nullable=False)
    mois_annee: pl.Utf8 = pa.Field(nullable=False)  # ex: "mars 2025"

    # Bornes temporelles de la m√©ta-p√©riode (timezone Europe/Paris)
    debut: DateTime = pa.Field(
        nullable=False,
        dtype_kwargs={"time_unit": "us", "time_zone": "Europe/Paris"}
    )
    fin: DateTime = pa.Field(
        nullable=False,
        dtype_kwargs={"time_unit": "us", "time_zone": "Europe/Paris"}
    )

    # Param√®tres tarifaires agr√©g√©s
    puissance_moyenne_kva: pl.Float64 = pa.Field(nullable=False, ge=0.0)
    formule_tarifaire_acheminement: pl.Utf8 = pa.Field(nullable=False)
    nb_jours: pl.Int32 = pa.Field(nullable=False, ge=1)

    # √ânergies consomm√©es par cadran en kWh (optionnelles selon le type de compteur)
    energie_base_kwh: Optional[pl.Float64] = pa.Field(nullable=True, ge=0.0)
    energie_hp_kwh: Optional[pl.Float64] = pa.Field(nullable=True, ge=0.0)
    energie_hc_kwh: Optional[pl.Float64] = pa.Field(nullable=True, ge=0.0)

    # Montants TURPE en euros
    turpe_fixe_eur: Optional[pl.Float64] = pa.Field(nullable=True, ge=0.0)
    turpe_variable_eur: Optional[pl.Float64] = pa.Field(nullable=True, ge=0.0)

    # M√©tadonn√©es de tra√ßabilit√© des sous-p√©riodes
    nb_sous_periodes_abo: pl.Int32 = pa.Field(nullable=False, ge=1)
    nb_sous_periodes_energie: pl.Int32 = pa.Field(nullable=False, ge=0)
    has_changement: pl.Boolean = pa.Field(nullable=False)

    # üÜï M√©tadonn√©es de couverture temporelle pour tracer l'incompl√©tude
    coverage_abo: pl.Float64 = pa.Field(nullable=False, ge=0.0, le=1.0)  # 0.0 √† 1.0
    coverage_energie: pl.Float64 = pa.Field(nullable=False, ge=0.0, le=1.0)  # 0.0 √† 1.0
    data_complete: pl.Boolean = pa.Field(nullable=False)  # True si coverage_abo=1.0 ET coverage_energie=1.0

    # M√©tadonn√©es optionnelles pour lisibilit√©
    debut_lisible: Optional[pl.Utf8] = pa.Field(nullable=True)
    fin_lisible: Optional[pl.Utf8] = pa.Field(nullable=True)

    # M√©mo des changements de puissance (optionnel, pratique pour facturation)
    memo_puissance: Optional[pl.Utf8] = pa.Field(nullable=True)

    @pa.dataframe_check
    def verifier_coherence_periode(cls, data) -> pl.LazyFrame:
        """
        V√©rifie que les m√©ta-p√©riodes sont coh√©rentes (d√©but < fin).
        """
        df_lazy = data.lazyframe

        condition = pl.col("debut") < pl.col("fin")
        return df_lazy.select(condition.alias("periode_coherente"))

    @pa.dataframe_check
    def verifier_nb_jours_coherent(cls, data) -> pl.LazyFrame:
        """
        V√©rifie que nb_jours correspond √† la diff√©rence debut-fin.
        """
        df_lazy = data.lazyframe

        # Calculer nb_jours attendu
        nb_jours_calcule = (
            pl.col("fin").dt.date() - pl.col("debut").dt.date()
        ).dt.total_days().cast(pl.Int32)

        condition = pl.col("nb_jours") == nb_jours_calcule
        return df_lazy.select(condition.alias("nb_jours_coherent"))

    @pa.dataframe_check
    def verifier_data_complete_coherent(cls, data) -> pl.LazyFrame:
        """
        V√©rifie que data_complete est coh√©rent avec les coverage.
        data_complete doit √™tre True ssi coverage_abo=1.0 ET coverage_energie=1.0
        """
        df_lazy = data.lazyframe

        condition = (
            pl.col("data_complete") == (
                (pl.col("coverage_abo") == 1.0) & (pl.col("coverage_energie") == 1.0)
            )
        )
        return df_lazy.select(condition.alias("data_complete_coherent"))

    @pa.dataframe_check
    def verifier_has_changement_coherent(cls, data) -> pl.LazyFrame:
        """
        V√©rifie que has_changement est coh√©rent avec le nombre de sous-p√©riodes.
        has_changement doit √™tre True ssi nb_sous_periodes_abo > 1 OU nb_sous_periodes_energie > 1
        """
        df_lazy = data.lazyframe

        condition = (
            pl.col("has_changement") == (
                (pl.col("nb_sous_periodes_abo") > 1) | (pl.col("nb_sous_periodes_energie") > 1)
            )
        )
        return df_lazy.select(condition.alias("has_changement_coherent"))

    class Config:
        """Configuration du mod√®le Pandera."""
        strict = False  # Permet colonnes suppl√©mentaires pour compatibilit√©
        coerce = True   # Conversion automatique des types compatibles