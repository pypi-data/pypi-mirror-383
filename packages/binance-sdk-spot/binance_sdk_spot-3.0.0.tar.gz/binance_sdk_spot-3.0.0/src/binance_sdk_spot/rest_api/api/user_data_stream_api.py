"""
Binance Spot REST API

OpenAPI Specifications for the Binance Spot REST API

API documents:
  - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
  - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request


from ..models import NewUserDataStreamResponse


class UserDataStreamApi:
    """API Client for UserDataStreamApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def delete_user_data_stream(
        self,
        listen_key: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Close user data stream
                DELETE /api/v3/userDataStream
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#close-user-data-stream-user_stream

                Close out a user data stream.
        Weight: 2

                Args:
                    listen_key (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        payload = {"listen_key": listen_key}

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/api/v3/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )

    def new_user_data_stream(
        self,
    ) -> ApiResponse[NewUserDataStreamResponse]:
        """
                Start user data stream
                POST /api/v3/userDataStream
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#start-user-data-stream-user_stream

                Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
        This request does not require `signature`.
        Weight: 2

                Args:

                Returns:
                    ApiResponse[NewUserDataStreamResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = None

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=NewUserDataStreamResponse,
        )

    def put_user_data_stream(
        self,
        listen_key: Union[str, None],
    ) -> ApiResponse[None]:
        """
                Keepalive user data stream
                PUT /api/v3/userDataStream
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#keepalive-user-data-stream-user_stream

                Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.

        This request does not require `signature`.
        Weight: 2

                Args:
                    listen_key (Union[str, None]):

                Returns:
                    ApiResponse[None]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if listen_key is None:
            raise RequiredError(
                field="listen_key",
                error_message="Missing required parameter 'listen_key'",
            )

        payload = {"listen_key": listen_key}

        return send_request(
            self._session,
            self._configuration,
            method="PUT",
            path="/api/v3/userDataStream",
            payload=payload,
            time_unit=self._configuration.time_unit,
        )
