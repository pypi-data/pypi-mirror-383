# coding: utf-8

"""
Binance Spot WebSocket Streams

OpenAPI Specifications for the Binance Spot WebSocket Streams

API documents:
  - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
  - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import json
import pprint
from pydantic import (
    BaseModel,
    ConfigDict,
    ValidationError,
    field_validator,
)
from typing import Any, Optional
from binance_sdk_spot.websocket_streams.models.iceberg_parts_filter import (
    IcebergPartsFilter,
)
from binance_sdk_spot.websocket_streams.models.lot_size_filter import LotSizeFilter
from binance_sdk_spot.websocket_streams.models.market_lot_size_filter import (
    MarketLotSizeFilter,
)
from binance_sdk_spot.websocket_streams.models.max_num_algo_orders_filter import (
    MaxNumAlgoOrdersFilter,
)
from binance_sdk_spot.websocket_streams.models.max_num_iceberg_orders_filter import (
    MaxNumIcebergOrdersFilter,
)
from binance_sdk_spot.websocket_streams.models.max_num_order_amends_filter import (
    MaxNumOrderAmendsFilter,
)
from binance_sdk_spot.websocket_streams.models.max_num_order_lists_filter import (
    MaxNumOrderListsFilter,
)
from binance_sdk_spot.websocket_streams.models.max_num_orders_filter import (
    MaxNumOrdersFilter,
)
from binance_sdk_spot.websocket_streams.models.max_position_filter import (
    MaxPositionFilter,
)
from binance_sdk_spot.websocket_streams.models.min_notional_filter import (
    MinNotionalFilter,
)
from binance_sdk_spot.websocket_streams.models.notional_filter import NotionalFilter
from binance_sdk_spot.websocket_streams.models.percent_price_by_side_filter import (
    PercentPriceBySideFilter,
)
from binance_sdk_spot.websocket_streams.models.percent_price_filter import (
    PercentPriceFilter,
)
from binance_sdk_spot.websocket_streams.models.price_filter import PriceFilter
from binance_sdk_spot.websocket_streams.models.t_plus_sell_filter import TPlusSellFilter
from binance_sdk_spot.websocket_streams.models.trailing_delta_filter import (
    TrailingDeltaFilter,
)
from typing import Union, Set, Dict
from typing_extensions import Self

SYMBOLFILTERS_ONE_OF_SCHEMAS = [
    "IcebergPartsFilter",
    "LotSizeFilter",
    "MarketLotSizeFilter",
    "MaxNumAlgoOrdersFilter",
    "MaxNumIcebergOrdersFilter",
    "MaxNumOrderAmendsFilter",
    "MaxNumOrderListsFilter",
    "MaxNumOrdersFilter",
    "MaxPositionFilter",
    "MinNotionalFilter",
    "NotionalFilter",
    "PercentPriceBySideFilter",
    "PercentPriceFilter",
    "PriceFilter",
    "TPlusSellFilter",
    "TrailingDeltaFilter",
]


class SymbolFilters(BaseModel):
    """
    SymbolFilters
    """

    # data type: PriceFilter
    oneof_schema_1_validator: Optional[PriceFilter] = None
    # data type: PercentPriceFilter
    oneof_schema_2_validator: Optional[PercentPriceFilter] = None
    # data type: PercentPriceBySideFilter
    oneof_schema_3_validator: Optional[PercentPriceBySideFilter] = None
    # data type: LotSizeFilter
    oneof_schema_4_validator: Optional[LotSizeFilter] = None
    # data type: MinNotionalFilter
    oneof_schema_5_validator: Optional[MinNotionalFilter] = None
    # data type: NotionalFilter
    oneof_schema_6_validator: Optional[NotionalFilter] = None
    # data type: IcebergPartsFilter
    oneof_schema_7_validator: Optional[IcebergPartsFilter] = None
    # data type: MarketLotSizeFilter
    oneof_schema_8_validator: Optional[MarketLotSizeFilter] = None
    # data type: MaxNumOrdersFilter
    oneof_schema_9_validator: Optional[MaxNumOrdersFilter] = None
    # data type: MaxNumAlgoOrdersFilter
    oneof_schema_10_validator: Optional[MaxNumAlgoOrdersFilter] = None
    # data type: MaxNumIcebergOrdersFilter
    oneof_schema_11_validator: Optional[MaxNumIcebergOrdersFilter] = None
    # data type: MaxPositionFilter
    oneof_schema_12_validator: Optional[MaxPositionFilter] = None
    # data type: TrailingDeltaFilter
    oneof_schema_13_validator: Optional[TrailingDeltaFilter] = None
    # data type: TPlusSellFilter
    oneof_schema_14_validator: Optional[TPlusSellFilter] = None
    # data type: MaxNumOrderListsFilter
    oneof_schema_15_validator: Optional[MaxNumOrderListsFilter] = None
    # data type: MaxNumOrderAmendsFilter
    oneof_schema_16_validator: Optional[MaxNumOrderAmendsFilter] = None
    actual_instance: Optional[
        Union[
            IcebergPartsFilter,
            LotSizeFilter,
            MarketLotSizeFilter,
            MaxNumAlgoOrdersFilter,
            MaxNumIcebergOrdersFilter,
            MaxNumOrderAmendsFilter,
            MaxNumOrderListsFilter,
            MaxNumOrdersFilter,
            MaxPositionFilter,
            MinNotionalFilter,
            NotionalFilter,
            PercentPriceBySideFilter,
            PercentPriceFilter,
            PriceFilter,
            TPlusSellFilter,
            TrailingDeltaFilter,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "IcebergPartsFilter",
        "LotSizeFilter",
        "MarketLotSizeFilter",
        "MaxNumAlgoOrdersFilter",
        "MaxNumIcebergOrdersFilter",
        "MaxNumOrderAmendsFilter",
        "MaxNumOrderListsFilter",
        "MaxNumOrdersFilter",
        "MaxPositionFilter",
        "MinNotionalFilter",
        "NotionalFilter",
        "PercentPriceBySideFilter",
        "PercentPriceFilter",
        "PriceFilter",
        "TPlusSellFilter",
        "TrailingDeltaFilter",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):

        error_messages = []
        match = 0
        # validate data type: PriceFilter
        if not isinstance(v, PriceFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PriceFilter`")
        else:
            match += 1
        # validate data type: PercentPriceFilter
        if not isinstance(v, PercentPriceFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `PercentPriceFilter`"
            )
        else:
            match += 1
        # validate data type: PercentPriceBySideFilter
        if not isinstance(v, PercentPriceBySideFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `PercentPriceBySideFilter`"
            )
        else:
            match += 1
        # validate data type: LotSizeFilter
        if not isinstance(v, LotSizeFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `LotSizeFilter`"
            )
        else:
            match += 1
        # validate data type: MinNotionalFilter
        if not isinstance(v, MinNotionalFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MinNotionalFilter`"
            )
        else:
            match += 1
        # validate data type: NotionalFilter
        if not isinstance(v, NotionalFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `NotionalFilter`"
            )
        else:
            match += 1
        # validate data type: IcebergPartsFilter
        if not isinstance(v, IcebergPartsFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `IcebergPartsFilter`"
            )
        else:
            match += 1
        # validate data type: MarketLotSizeFilter
        if not isinstance(v, MarketLotSizeFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MarketLotSizeFilter`"
            )
        else:
            match += 1
        # validate data type: MaxNumOrdersFilter
        if not isinstance(v, MaxNumOrdersFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxNumOrdersFilter`"
            )
        else:
            match += 1
        # validate data type: MaxNumAlgoOrdersFilter
        if not isinstance(v, MaxNumAlgoOrdersFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxNumAlgoOrdersFilter`"
            )
        else:
            match += 1
        # validate data type: MaxNumIcebergOrdersFilter
        if not isinstance(v, MaxNumIcebergOrdersFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxNumIcebergOrdersFilter`"
            )
        else:
            match += 1
        # validate data type: MaxPositionFilter
        if not isinstance(v, MaxPositionFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxPositionFilter`"
            )
        else:
            match += 1
        # validate data type: TrailingDeltaFilter
        if not isinstance(v, TrailingDeltaFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `TrailingDeltaFilter`"
            )
        else:
            match += 1
        # validate data type: TPlusSellFilter
        if not isinstance(v, TPlusSellFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `TPlusSellFilter`"
            )
        else:
            match += 1
        # validate data type: MaxNumOrderListsFilter
        if not isinstance(v, MaxNumOrderListsFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxNumOrderListsFilter`"
            )
        else:
            match += 1
        # validate data type: MaxNumOrderAmendsFilter
        if not isinstance(v, MaxNumOrderAmendsFilter):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MaxNumOrderAmendsFilter`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in SymbolFilters with oneOf schemas: IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter, NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter, TrailingDeltaFilter. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in SymbolFilters with oneOf schemas: IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter, NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter, TrailingDeltaFilter. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PriceFilter
        try:
            instance.actual_instance = PriceFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PercentPriceFilter
        try:
            instance.actual_instance = PercentPriceFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PercentPriceBySideFilter
        try:
            instance.actual_instance = PercentPriceBySideFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LotSizeFilter
        try:
            instance.actual_instance = LotSizeFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MinNotionalFilter
        try:
            instance.actual_instance = MinNotionalFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionalFilter
        try:
            instance.actual_instance = NotionalFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IcebergPartsFilter
        try:
            instance.actual_instance = IcebergPartsFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarketLotSizeFilter
        try:
            instance.actual_instance = MarketLotSizeFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxNumOrdersFilter
        try:
            instance.actual_instance = MaxNumOrdersFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxNumAlgoOrdersFilter
        try:
            instance.actual_instance = MaxNumAlgoOrdersFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxNumIcebergOrdersFilter
        try:
            instance.actual_instance = MaxNumIcebergOrdersFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxPositionFilter
        try:
            instance.actual_instance = MaxPositionFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TrailingDeltaFilter
        try:
            instance.actual_instance = TrailingDeltaFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TPlusSellFilter
        try:
            instance.actual_instance = TPlusSellFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxNumOrderListsFilter
        try:
            instance.actual_instance = MaxNumOrderListsFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MaxNumOrderAmendsFilter
        try:
            instance.actual_instance = MaxNumOrderAmendsFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into SymbolFilters with oneOf schemas: IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter, NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter, TrailingDeltaFilter. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into SymbolFilters with oneOf schemas: IcebergPartsFilter, LotSizeFilter, MarketLotSizeFilter, MaxNumAlgoOrdersFilter, MaxNumIcebergOrdersFilter, MaxNumOrderAmendsFilter, MaxNumOrderListsFilter, MaxNumOrdersFilter, MaxPositionFilter, MinNotionalFilter, NotionalFilter, PercentPriceBySideFilter, PercentPriceFilter, PriceFilter, TPlusSellFilter, TrailingDeltaFilter. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            IcebergPartsFilter,
            LotSizeFilter,
            MarketLotSizeFilter,
            MaxNumAlgoOrdersFilter,
            MaxNumIcebergOrdersFilter,
            MaxNumOrderAmendsFilter,
            MaxNumOrderListsFilter,
            MaxNumOrdersFilter,
            MaxPositionFilter,
            MinNotionalFilter,
            NotionalFilter,
            PercentPriceBySideFilter,
            PercentPriceFilter,
            PriceFilter,
            TPlusSellFilter,
            TrailingDeltaFilter,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
