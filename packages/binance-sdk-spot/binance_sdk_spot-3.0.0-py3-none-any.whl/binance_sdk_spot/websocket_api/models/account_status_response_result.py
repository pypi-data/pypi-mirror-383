# coding: utf-8

"""
Binance Spot WebSocket API

OpenAPI Specifications for the Binance Spot WebSocket API

API documents:
  - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
  - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance_sdk_spot.websocket_api.models.account_status_response_result_balances_inner import (
    AccountStatusResponseResultBalancesInner,
)
from binance_sdk_spot.websocket_api.models.account_status_response_result_commission_rates import (
    AccountStatusResponseResultCommissionRates,
)
from typing import Set
from typing_extensions import Self


class AccountStatusResponseResult(BaseModel):
    """
    AccountStatusResponseResult
    """  # noqa: E501

    maker_commission: Optional[StrictInt] = Field(default=None, alias="makerCommission")
    taker_commission: Optional[StrictInt] = Field(default=None, alias="takerCommission")
    buyer_commission: Optional[StrictInt] = Field(default=None, alias="buyerCommission")
    seller_commission: Optional[StrictInt] = Field(
        default=None, alias="sellerCommission"
    )
    can_trade: Optional[StrictBool] = Field(default=None, alias="canTrade")
    can_withdraw: Optional[StrictBool] = Field(default=None, alias="canWithdraw")
    can_deposit: Optional[StrictBool] = Field(default=None, alias="canDeposit")
    commission_rates: Optional[AccountStatusResponseResultCommissionRates] = Field(
        default=None, alias="commissionRates"
    )
    brokered: Optional[StrictBool] = None
    require_self_trade_prevention: Optional[StrictBool] = Field(
        default=None, alias="requireSelfTradePrevention"
    )
    prevent_sor: Optional[StrictBool] = Field(default=None, alias="preventSor")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    account_type: Optional[StrictStr] = Field(default=None, alias="accountType")
    balances: Optional[List[AccountStatusResponseResultBalancesInner]] = Field(
        default=None, alias="balances"
    )

    permissions: Optional[List[str]] = Field(default=None, alias="permissions")

    uid: Optional[StrictInt] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "makerCommission",
        "takerCommission",
        "buyerCommission",
        "sellerCommission",
        "canTrade",
        "canWithdraw",
        "canDeposit",
        "commissionRates",
        "brokered",
        "requireSelfTradePrevention",
        "preventSor",
        "updateTime",
        "accountType",
        "balances",
        "permissions",
        "uid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountStatusResponseResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commission_rates
        if self.commission_rates:
            _dict["commissionRates"] = self.commission_rates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item_balances in self.balances:
                if _item_balances:
                    _items.append(_item_balances.to_dict())
            _dict["balances"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountStatusResponseResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "makerCommission": obj.get("makerCommission"),
                "takerCommission": obj.get("takerCommission"),
                "buyerCommission": obj.get("buyerCommission"),
                "sellerCommission": obj.get("sellerCommission"),
                "canTrade": obj.get("canTrade"),
                "canWithdraw": obj.get("canWithdraw"),
                "canDeposit": obj.get("canDeposit"),
                "commissionRates": (
                    AccountStatusResponseResultCommissionRates.from_dict(
                        obj["commissionRates"]
                    )
                    if obj.get("commissionRates") is not None
                    else None
                ),
                "brokered": obj.get("brokered"),
                "requireSelfTradePrevention": obj.get("requireSelfTradePrevention"),
                "preventSor": obj.get("preventSor"),
                "updateTime": obj.get("updateTime"),
                "accountType": obj.get("accountType"),
                "balances": (
                    [
                        AccountStatusResponseResultBalancesInner.from_dict(_item)
                        for _item in obj["balances"]
                    ]
                    if obj.get("balances") is not None
                    else None
                ),
                "permissions": obj.get("permissions"),
                "uid": obj.get("uid"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
