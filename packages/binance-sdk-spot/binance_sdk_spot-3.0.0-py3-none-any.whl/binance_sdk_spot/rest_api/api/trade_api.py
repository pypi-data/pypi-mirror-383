"""
Binance Spot REST API

OpenAPI Specifications for the Binance Spot REST API

API documents:
  - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
  - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Optional, Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request

from ..models import DeleteOpenOrdersResponse
from ..models import DeleteOrderResponse
from ..models import DeleteOrderListResponse
from ..models import NewOrderResponse
from ..models import OrderAmendKeepPriorityResponse
from ..models import OrderCancelReplaceResponse
from ..models import OrderListOcoResponse
from ..models import OrderListOtoResponse
from ..models import OrderListOtocoResponse
from ..models import OrderOcoResponse
from ..models import OrderTestResponse
from ..models import SorOrderResponse
from ..models import SorOrderTestResponse


from ..models import DeleteOrderCancelRestrictionsEnum
from ..models import NewOrderSideEnum
from ..models import NewOrderTypeEnum
from ..models import NewOrderTimeInForceEnum
from ..models import NewOrderNewOrderRespTypeEnum
from ..models import NewOrderSelfTradePreventionModeEnum
from ..models import NewOrderPegPriceTypeEnum
from ..models import NewOrderPegOffsetTypeEnum
from ..models import OrderCancelReplaceSideEnum
from ..models import OrderCancelReplaceTypeEnum
from ..models import OrderCancelReplaceCancelReplaceModeEnum
from ..models import OrderCancelReplaceTimeInForceEnum
from ..models import OrderCancelReplaceNewOrderRespTypeEnum
from ..models import OrderCancelReplaceSelfTradePreventionModeEnum
from ..models import OrderCancelReplaceCancelRestrictionsEnum
from ..models import OrderCancelReplaceOrderRateLimitExceededModeEnum
from ..models import OrderCancelReplacePegPriceTypeEnum
from ..models import OrderCancelReplacePegOffsetTypeEnum
from ..models import OrderListOcoSideEnum
from ..models import OrderListOcoAboveTypeEnum
from ..models import OrderListOcoBelowTypeEnum
from ..models import OrderListOcoAboveTimeInForceEnum
from ..models import OrderListOcoAbovePegPriceTypeEnum
from ..models import OrderListOcoAbovePegOffsetTypeEnum
from ..models import OrderListOcoBelowTimeInForceEnum
from ..models import OrderListOcoBelowPegPriceTypeEnum
from ..models import OrderListOcoBelowPegOffsetTypeEnum
from ..models import OrderListOcoNewOrderRespTypeEnum
from ..models import OrderListOcoSelfTradePreventionModeEnum
from ..models import OrderListOtoWorkingTypeEnum
from ..models import OrderListOtoWorkingSideEnum
from ..models import OrderListOtoPendingTypeEnum
from ..models import OrderListOtoPendingSideEnum
from ..models import OrderListOtoNewOrderRespTypeEnum
from ..models import OrderListOtoSelfTradePreventionModeEnum
from ..models import OrderListOtoWorkingTimeInForceEnum
from ..models import OrderListOtoWorkingPegPriceTypeEnum
from ..models import OrderListOtoWorkingPegOffsetTypeEnum
from ..models import OrderListOtoPendingTimeInForceEnum
from ..models import OrderListOtoPendingPegPriceTypeEnum
from ..models import OrderListOtoPendingPegOffsetTypeEnum
from ..models import OrderListOtocoWorkingTypeEnum
from ..models import OrderListOtocoWorkingSideEnum
from ..models import OrderListOtocoPendingSideEnum
from ..models import OrderListOtocoPendingAboveTypeEnum
from ..models import OrderListOtocoNewOrderRespTypeEnum
from ..models import OrderListOtocoSelfTradePreventionModeEnum
from ..models import OrderListOtocoWorkingTimeInForceEnum
from ..models import OrderListOtocoWorkingPegPriceTypeEnum
from ..models import OrderListOtocoWorkingPegOffsetTypeEnum
from ..models import OrderListOtocoPendingAboveTimeInForceEnum
from ..models import OrderListOtocoPendingAbovePegPriceTypeEnum
from ..models import OrderListOtocoPendingAbovePegOffsetTypeEnum
from ..models import OrderListOtocoPendingBelowTypeEnum
from ..models import OrderListOtocoPendingBelowTimeInForceEnum
from ..models import OrderListOtocoPendingBelowPegPriceTypeEnum
from ..models import OrderListOtocoPendingBelowPegOffsetTypeEnum
from ..models import OrderOcoSideEnum
from ..models import OrderOcoStopLimitTimeInForceEnum
from ..models import OrderOcoNewOrderRespTypeEnum
from ..models import OrderOcoSelfTradePreventionModeEnum
from ..models import OrderTestSideEnum
from ..models import OrderTestTypeEnum
from ..models import OrderTestTimeInForceEnum
from ..models import OrderTestNewOrderRespTypeEnum
from ..models import OrderTestSelfTradePreventionModeEnum
from ..models import OrderTestPegPriceTypeEnum
from ..models import OrderTestPegOffsetTypeEnum
from ..models import SorOrderSideEnum
from ..models import SorOrderTypeEnum
from ..models import SorOrderTimeInForceEnum
from ..models import SorOrderNewOrderRespTypeEnum
from ..models import SorOrderSelfTradePreventionModeEnum
from ..models import SorOrderTestSideEnum
from ..models import SorOrderTestTypeEnum
from ..models import SorOrderTestTimeInForceEnum
from ..models import SorOrderTestNewOrderRespTypeEnum
from ..models import SorOrderTestSelfTradePreventionModeEnum


class TradeApi:
    """API Client for TradeApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def delete_open_orders(
        self,
        symbol: Union[str, None],
        recv_window: Optional[float] = None,
    ) -> ApiResponse[DeleteOpenOrdersResponse]:
        """
                Cancel All Open Orders on a Symbol
                DELETE /api/v3/openOrders
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-all-open-orders-on-a-symbol-trade

                Cancels all active orders on a symbol.
        This includes orders that are part of an order list.
        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[DeleteOpenOrdersResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {"symbol": symbol, "recv_window": recv_window}

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/api/v3/openOrders",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=DeleteOpenOrdersResponse,
            is_signed=True,
            signer=self._signer,
        )

    def delete_order(
        self,
        symbol: Union[str, None],
        order_id: Optional[int] = None,
        orig_client_order_id: Optional[str] = None,
        new_client_order_id: Optional[str] = None,
        cancel_restrictions: Optional[DeleteOrderCancelRestrictionsEnum] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[DeleteOrderResponse]:
        """
                Cancel order
                DELETE /api/v3/order
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-order-trade

                Cancel an active order.
        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    order_id (Optional[int] = None):
                    orig_client_order_id (Optional[str] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    cancel_restrictions (Optional[DeleteOrderCancelRestrictionsEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[DeleteOrderResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {
            "symbol": symbol,
            "order_id": order_id,
            "orig_client_order_id": orig_client_order_id,
            "new_client_order_id": new_client_order_id,
            "cancel_restrictions": cancel_restrictions,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/api/v3/order",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=DeleteOrderResponse,
            is_signed=True,
            signer=self._signer,
        )

    def delete_order_list(
        self,
        symbol: Union[str, None],
        order_list_id: Optional[int] = None,
        list_client_order_id: Optional[str] = None,
        new_client_order_id: Optional[str] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[DeleteOrderListResponse]:
        """
                Cancel Order list
                DELETE /api/v3/orderList
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-order-list-trade

                Cancel an entire Order list
        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    order_list_id (Optional[int] = None): Either `orderListId` or `listClientOrderId` must be provided
                    list_client_order_id (Optional[str] = None): A unique Id for the entire orderList
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[DeleteOrderListResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )

        payload = {
            "symbol": symbol,
            "order_list_id": order_list_id,
            "list_client_order_id": list_client_order_id,
            "new_client_order_id": new_client_order_id,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="DELETE",
            path="/api/v3/orderList",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=DeleteOrderListResponse,
            is_signed=True,
            signer=self._signer,
        )

    def new_order(
        self,
        symbol: Union[str, None],
        side: Union[NewOrderSideEnum, None],
        type: Union[NewOrderTypeEnum, None],
        time_in_force: Optional[NewOrderTimeInForceEnum] = None,
        quantity: Optional[float] = None,
        quote_order_qty: Optional[float] = None,
        price: Optional[float] = None,
        new_client_order_id: Optional[str] = None,
        strategy_id: Optional[int] = None,
        strategy_type: Optional[int] = None,
        stop_price: Optional[float] = None,
        trailing_delta: Optional[int] = None,
        iceberg_qty: Optional[float] = None,
        new_order_resp_type: Optional[NewOrderNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            NewOrderSelfTradePreventionModeEnum
        ] = None,
        peg_price_type: Optional[NewOrderPegPriceTypeEnum] = None,
        peg_offset_value: Optional[int] = None,
        peg_offset_type: Optional[NewOrderPegOffsetTypeEnum] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[NewOrderResponse]:
        """
                New order
                POST /api/v3/order
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-trade

                Send in a new order.

        This adds 1 order to the `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.
        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    side (Union[NewOrderSideEnum, None]):
                    type (Union[NewOrderTypeEnum, None]):
                    time_in_force (Optional[NewOrderTimeInForceEnum] = None):
                    quantity (Optional[float] = None):
                    quote_order_qty (Optional[float] = None):
                    price (Optional[float] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    strategy_id (Optional[int] = None):
                    strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    stop_price (Optional[float] = None): Used with `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, and `TAKE_PROFIT_LIMIT` orders.
                    trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    iceberg_qty (Optional[float] = None): Used with `LIMIT`, `STOP_LOSS_LIMIT`, and `TAKE_PROFIT_LIMIT` to create an iceberg order.
                    new_order_resp_type (Optional[NewOrderNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[NewOrderSelfTradePreventionModeEnum] = None):
                    peg_price_type (Optional[NewOrderPegPriceTypeEnum] = None):
                    peg_offset_value (Optional[int] = None): Priceleveltopegthepriceto(max:100).<br>See[PeggedOrdersInfo](#pegged-orders-info)
                    peg_offset_type (Optional[NewOrderPegOffsetTypeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[NewOrderResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if type is None:
            raise RequiredError(
                field="type", error_message="Missing required parameter 'type'"
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "type": type,
            "time_in_force": time_in_force,
            "quantity": quantity,
            "quote_order_qty": quote_order_qty,
            "price": price,
            "new_client_order_id": new_client_order_id,
            "strategy_id": strategy_id,
            "strategy_type": strategy_type,
            "stop_price": stop_price,
            "trailing_delta": trailing_delta,
            "iceberg_qty": iceberg_qty,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "peg_price_type": peg_price_type,
            "peg_offset_value": peg_offset_value,
            "peg_offset_type": peg_offset_type,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/order",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=NewOrderResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_amend_keep_priority(
        self,
        symbol: Union[str, None],
        new_qty: Union[float, None],
        order_id: Optional[int] = None,
        orig_client_order_id: Optional[str] = None,
        new_client_order_id: Optional[str] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderAmendKeepPriorityResponse]:
        """
                Order Amend Keep Priority
                PUT /api/v3/order/amend/keepPriority
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#order-amend-keep-priority-trade

                Reduce the quantity of an existing open order.

        This adds 0 orders to the `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.

        Read [Order Amend Keep Priority FAQ](faqs/order_amend_keep_priority.md) to learn more.
        Weight: 4

                Args:
                    symbol (Union[str, None]):
                    new_qty (Union[float, None]): `newQty` must be greater than 0 and less than the order's quantity.
                    order_id (Optional[int] = None):
                    orig_client_order_id (Optional[str] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderAmendKeepPriorityResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if new_qty is None:
            raise RequiredError(
                field="new_qty", error_message="Missing required parameter 'new_qty'"
            )

        payload = {
            "symbol": symbol,
            "new_qty": new_qty,
            "order_id": order_id,
            "orig_client_order_id": orig_client_order_id,
            "new_client_order_id": new_client_order_id,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="PUT",
            path="/api/v3/order/amend/keepPriority",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderAmendKeepPriorityResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_cancel_replace(
        self,
        symbol: Union[str, None],
        side: Union[OrderCancelReplaceSideEnum, None],
        type: Union[OrderCancelReplaceTypeEnum, None],
        cancel_replace_mode: Union[OrderCancelReplaceCancelReplaceModeEnum, None],
        time_in_force: Optional[OrderCancelReplaceTimeInForceEnum] = None,
        quantity: Optional[float] = None,
        quote_order_qty: Optional[float] = None,
        price: Optional[float] = None,
        cancel_new_client_order_id: Optional[str] = None,
        cancel_orig_client_order_id: Optional[str] = None,
        cancel_order_id: Optional[int] = None,
        new_client_order_id: Optional[str] = None,
        strategy_id: Optional[int] = None,
        strategy_type: Optional[int] = None,
        stop_price: Optional[float] = None,
        trailing_delta: Optional[int] = None,
        iceberg_qty: Optional[float] = None,
        new_order_resp_type: Optional[OrderCancelReplaceNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderCancelReplaceSelfTradePreventionModeEnum
        ] = None,
        cancel_restrictions: Optional[OrderCancelReplaceCancelRestrictionsEnum] = None,
        order_rate_limit_exceeded_mode: Optional[
            OrderCancelReplaceOrderRateLimitExceededModeEnum
        ] = None,
        peg_price_type: Optional[OrderCancelReplacePegPriceTypeEnum] = None,
        peg_offset_value: Optional[int] = None,
        peg_offset_type: Optional[OrderCancelReplacePegOffsetTypeEnum] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderCancelReplaceResponse]:
        """
                Cancel an Existing Order and Send a New Order
                POST /api/v3/order/cancelReplace
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-an-existing-order-and-send-a-new-order-trade

                Cancels an existing order and places a new order on the same symbol.

        Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs.

        A new order that was not attempted (i.e. when `newOrderResult: NOT_ATTEMPTED`), will still increase the unfilled order count by 1.
        Weight: 1

                Args:
                    symbol (Union[str, None]):
                    side (Union[OrderCancelReplaceSideEnum, None]):
                    type (Union[OrderCancelReplaceTypeEnum, None]):
                    cancel_replace_mode (Union[OrderCancelReplaceCancelReplaceModeEnum, None]):
                    time_in_force (Optional[OrderCancelReplaceTimeInForceEnum] = None):
                    quantity (Optional[float] = None):
                    quote_order_qty (Optional[float] = None):
                    price (Optional[float] = None):
                    cancel_new_client_order_id (Optional[str] = None): Used to uniquely identify this cancel. Automatically generated by default.
                    cancel_orig_client_order_id (Optional[str] = None): Either `cancelOrderId` or `cancelOrigClientOrderId` must be sent. <br></br> If both `cancelOrderId` and `cancelOrigClientOrderId` parameters are provided, the `cancelOrderId` is searched first, then the `cancelOrigClientOrderId` from that result is checked against that order. <br></br> If both conditions are not met the request will be rejected.
                    cancel_order_id (Optional[int] = None): Either `cancelOrderId` or `cancelOrigClientOrderId` must be sent. <br></br>If both `cancelOrderId` and `cancelOrigClientOrderId` parameters are provided, the `cancelOrderId` is searched first, then the `cancelOrigClientOrderId` from that result is checked against that order. <br></br>If both conditions are not met the request will be rejected.
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    strategy_id (Optional[int] = None):
                    strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    stop_price (Optional[float] = None): Used with `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, and `TAKE_PROFIT_LIMIT` orders.
                    trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    iceberg_qty (Optional[float] = None): Used with `LIMIT`, `STOP_LOSS_LIMIT`, and `TAKE_PROFIT_LIMIT` to create an iceberg order.
                    new_order_resp_type (Optional[OrderCancelReplaceNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderCancelReplaceSelfTradePreventionModeEnum] = None):
                    cancel_restrictions (Optional[OrderCancelReplaceCancelRestrictionsEnum] = None):
                    order_rate_limit_exceeded_mode (Optional[OrderCancelReplaceOrderRateLimitExceededModeEnum] = None):
                    peg_price_type (Optional[OrderCancelReplacePegPriceTypeEnum] = None):
                    peg_offset_value (Optional[int] = None): Priceleveltopegthepriceto(max:100).<br>See[PeggedOrdersInfo](#pegged-orders-info)
                    peg_offset_type (Optional[OrderCancelReplacePegOffsetTypeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderCancelReplaceResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if type is None:
            raise RequiredError(
                field="type", error_message="Missing required parameter 'type'"
            )
        if cancel_replace_mode is None:
            raise RequiredError(
                field="cancel_replace_mode",
                error_message="Missing required parameter 'cancel_replace_mode'",
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "type": type,
            "cancel_replace_mode": cancel_replace_mode,
            "time_in_force": time_in_force,
            "quantity": quantity,
            "quote_order_qty": quote_order_qty,
            "price": price,
            "cancel_new_client_order_id": cancel_new_client_order_id,
            "cancel_orig_client_order_id": cancel_orig_client_order_id,
            "cancel_order_id": cancel_order_id,
            "new_client_order_id": new_client_order_id,
            "strategy_id": strategy_id,
            "strategy_type": strategy_type,
            "stop_price": stop_price,
            "trailing_delta": trailing_delta,
            "iceberg_qty": iceberg_qty,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "cancel_restrictions": cancel_restrictions,
            "order_rate_limit_exceeded_mode": order_rate_limit_exceeded_mode,
            "peg_price_type": peg_price_type,
            "peg_offset_value": peg_offset_value,
            "peg_offset_type": peg_offset_type,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/order/cancelReplace",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderCancelReplaceResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_list_oco(
        self,
        symbol: Union[str, None],
        side: Union[OrderListOcoSideEnum, None],
        quantity: Union[float, None],
        above_type: Union[OrderListOcoAboveTypeEnum, None],
        below_type: Union[OrderListOcoBelowTypeEnum, None],
        list_client_order_id: Optional[str] = None,
        above_client_order_id: Optional[str] = None,
        above_iceberg_qty: Optional[int] = None,
        above_price: Optional[float] = None,
        above_stop_price: Optional[float] = None,
        above_trailing_delta: Optional[int] = None,
        above_time_in_force: Optional[OrderListOcoAboveTimeInForceEnum] = None,
        above_strategy_id: Optional[int] = None,
        above_strategy_type: Optional[int] = None,
        above_peg_price_type: Optional[OrderListOcoAbovePegPriceTypeEnum] = None,
        above_peg_offset_type: Optional[OrderListOcoAbovePegOffsetTypeEnum] = None,
        above_peg_offset_value: Optional[int] = None,
        below_client_order_id: Optional[str] = None,
        below_iceberg_qty: Optional[int] = None,
        below_price: Optional[float] = None,
        below_stop_price: Optional[float] = None,
        below_trailing_delta: Optional[int] = None,
        below_time_in_force: Optional[OrderListOcoBelowTimeInForceEnum] = None,
        below_strategy_id: Optional[int] = None,
        below_strategy_type: Optional[int] = None,
        below_peg_price_type: Optional[OrderListOcoBelowPegPriceTypeEnum] = None,
        below_peg_offset_type: Optional[OrderListOcoBelowPegOffsetTypeEnum] = None,
        below_peg_offset_value: Optional[int] = None,
        new_order_resp_type: Optional[OrderListOcoNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderListOcoSelfTradePreventionModeEnum
        ] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderListOcoResponse]:
        """
                New Order list - OCO
                POST /api/v3/orderList/oco
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---oco-trade

                Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.

        * An OCO has 2 orders called the **above order** and **below order**.
        * One of the orders must be a `LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT` order and the other must be `STOP_LOSS` or `STOP_LOSS_LIMIT` order.
        * Price restrictions
          * If the OCO is on the `SELL` side:
            * `LIMIT_MAKER/TAKE_PROFIT_LIMIT` `price` > Last Traded Price >  `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
            * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
          * If the OCO is on the `BUY` side:
            * `LIMIT_MAKER/TAKE_PROFIT_LIMIT price` < Last Traded Price < `stopPrice`
            * `TAKE_PROFIT stopPrice` < Last Traded Price < `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
        * OCOs add **2 orders** to the `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.
        Weight: 1

        Unfilled Order Count: 2

                Args:
                    symbol (Union[str, None]):
                    side (Union[OrderListOcoSideEnum, None]):
                    quantity (Union[float, None]):
                    above_type (Union[OrderListOcoAboveTypeEnum, None]):
                    below_type (Union[OrderListOcoBelowTypeEnum, None]):
                    list_client_order_id (Optional[str] = None): A unique Id for the entire orderList
                    above_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the above order. Automatically generated if not sent
                    above_iceberg_qty (Optional[int] = None): Note that this can only be used if `aboveTimeInForce` is `GTC`.
                    above_price (Optional[float] = None): Can be used if `aboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                    above_stop_price (Optional[float] = None): Can be used if `aboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`. <br>Either `aboveStopPrice` or `aboveTrailingDelta` or both, must be specified.
                    above_trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    above_time_in_force (Optional[OrderListOcoAboveTimeInForceEnum] = None):
                    above_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the above order within an order strategy.
                    above_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the above order strategy. <br>Values smaller than 1000000 are reserved and cannot be used.
                    above_peg_price_type (Optional[OrderListOcoAbovePegPriceTypeEnum] = None):
                    above_peg_offset_type (Optional[OrderListOcoAbovePegOffsetTypeEnum] = None):
                    above_peg_offset_value (Optional[int] = None):
                    below_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the below order. Automatically generated if not sent
                    below_iceberg_qty (Optional[int] = None): Note that this can only be used if `belowTimeInForce` is `GTC`.
                    below_price (Optional[float] = None): Can be used if `belowType` is `STOP_LOSS_LIMIT`, `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                    below_stop_price (Optional[float] = None): Can be used if `belowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT` or `TAKE_PROFIT_LIMIT` <br>Either belowStopPrice or belowTrailingDelta or both, must be specified.
                    below_trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    below_time_in_force (Optional[OrderListOcoBelowTimeInForceEnum] = None):
                    below_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the below order within an order strategy.
                    below_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the below order strategy. <br>Values smaller than 1000000 are reserved and cannot be used.
                    below_peg_price_type (Optional[OrderListOcoBelowPegPriceTypeEnum] = None):
                    below_peg_offset_type (Optional[OrderListOcoBelowPegOffsetTypeEnum] = None):
                    below_peg_offset_value (Optional[int] = None):
                    new_order_resp_type (Optional[OrderListOcoNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderListOcoSelfTradePreventionModeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderListOcoResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if quantity is None:
            raise RequiredError(
                field="quantity", error_message="Missing required parameter 'quantity'"
            )
        if above_type is None:
            raise RequiredError(
                field="above_type",
                error_message="Missing required parameter 'above_type'",
            )
        if below_type is None:
            raise RequiredError(
                field="below_type",
                error_message="Missing required parameter 'below_type'",
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "quantity": quantity,
            "above_type": above_type,
            "below_type": below_type,
            "list_client_order_id": list_client_order_id,
            "above_client_order_id": above_client_order_id,
            "above_iceberg_qty": above_iceberg_qty,
            "above_price": above_price,
            "above_stop_price": above_stop_price,
            "above_trailing_delta": above_trailing_delta,
            "above_time_in_force": above_time_in_force,
            "above_strategy_id": above_strategy_id,
            "above_strategy_type": above_strategy_type,
            "above_peg_price_type": above_peg_price_type,
            "above_peg_offset_type": above_peg_offset_type,
            "above_peg_offset_value": above_peg_offset_value,
            "below_client_order_id": below_client_order_id,
            "below_iceberg_qty": below_iceberg_qty,
            "below_price": below_price,
            "below_stop_price": below_stop_price,
            "below_trailing_delta": below_trailing_delta,
            "below_time_in_force": below_time_in_force,
            "below_strategy_id": below_strategy_id,
            "below_strategy_type": below_strategy_type,
            "below_peg_price_type": below_peg_price_type,
            "below_peg_offset_type": below_peg_offset_type,
            "below_peg_offset_value": below_peg_offset_value,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/orderList/oco",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderListOcoResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_list_oto(
        self,
        symbol: Union[str, None],
        working_type: Union[OrderListOtoWorkingTypeEnum, None],
        working_side: Union[OrderListOtoWorkingSideEnum, None],
        working_price: Union[float, None],
        working_quantity: Union[float, None],
        pending_type: Union[OrderListOtoPendingTypeEnum, None],
        pending_side: Union[OrderListOtoPendingSideEnum, None],
        pending_quantity: Union[float, None],
        list_client_order_id: Optional[str] = None,
        new_order_resp_type: Optional[OrderListOtoNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderListOtoSelfTradePreventionModeEnum
        ] = None,
        working_client_order_id: Optional[str] = None,
        working_iceberg_qty: Optional[float] = None,
        working_time_in_force: Optional[OrderListOtoWorkingTimeInForceEnum] = None,
        working_strategy_id: Optional[int] = None,
        working_strategy_type: Optional[int] = None,
        working_peg_price_type: Optional[OrderListOtoWorkingPegPriceTypeEnum] = None,
        working_peg_offset_type: Optional[OrderListOtoWorkingPegOffsetTypeEnum] = None,
        working_peg_offset_value: Optional[int] = None,
        pending_client_order_id: Optional[str] = None,
        pending_price: Optional[float] = None,
        pending_stop_price: Optional[float] = None,
        pending_trailing_delta: Optional[float] = None,
        pending_iceberg_qty: Optional[float] = None,
        pending_time_in_force: Optional[OrderListOtoPendingTimeInForceEnum] = None,
        pending_strategy_id: Optional[int] = None,
        pending_strategy_type: Optional[int] = None,
        pending_peg_price_type: Optional[OrderListOtoPendingPegPriceTypeEnum] = None,
        pending_peg_offset_type: Optional[OrderListOtoPendingPegOffsetTypeEnum] = None,
        pending_peg_offset_value: Optional[int] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderListOtoResponse]:
        """
                New Order list - OTO
                POST /api/v3/orderList/oto
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---oto-trade

                Place an OTO.

        * An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
        * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
        * The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
        * If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
        * When the order list is placed, if the working order gets **immediately fully filled**, the placement response will show the working order as `FILLED` but the pending order will still appear as `PENDING_NEW`. You need to query the status of the pending order again to see its updated status.
        * OTOs add **2 orders** to the `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
        Weight: 1

        Unfilled Order Count: 2

                Args:
                    symbol (Union[str, None]):
                    working_type (Union[OrderListOtoWorkingTypeEnum, None]):
                    working_side (Union[OrderListOtoWorkingSideEnum, None]):
                    working_price (Union[float, None]):
                    working_quantity (Union[float, None]): Sets the quantity for the working order.
                    pending_type (Union[OrderListOtoPendingTypeEnum, None]):
                    pending_side (Union[OrderListOtoPendingSideEnum, None]):
                    pending_quantity (Union[float, None]): Sets the quantity for the pending order.
                    list_client_order_id (Optional[str] = None): A unique Id for the entire orderList
                    new_order_resp_type (Optional[OrderListOtoNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderListOtoSelfTradePreventionModeEnum] = None):
                    working_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the working order.<br> Automatically generated if not sent.
                    working_iceberg_qty (Optional[float] = None): This can only be used if `workingTimeInForce` is `GTC`, or if `workingType` is `LIMIT_MAKER`.
                    working_time_in_force (Optional[OrderListOtoWorkingTimeInForceEnum] = None):
                    working_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the working order within an order strategy.
                    working_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the working order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
                    working_peg_price_type (Optional[OrderListOtoWorkingPegPriceTypeEnum] = None):
                    working_peg_offset_type (Optional[OrderListOtoWorkingPegOffsetTypeEnum] = None):
                    working_peg_offset_value (Optional[int] = None):
                    pending_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the pending order.<br> Automatically generated if not sent.
                    pending_price (Optional[float] = None):
                    pending_stop_price (Optional[float] = None):
                    pending_trailing_delta (Optional[float] = None):
                    pending_iceberg_qty (Optional[float] = None): This can only be used if `pendingTimeInForce` is `GTC` or if `pendingType` is `LIMIT_MAKER`.
                    pending_time_in_force (Optional[OrderListOtoPendingTimeInForceEnum] = None):
                    pending_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the pending order within an order strategy.
                    pending_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the pending order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
                    pending_peg_price_type (Optional[OrderListOtoPendingPegPriceTypeEnum] = None):
                    pending_peg_offset_type (Optional[OrderListOtoPendingPegOffsetTypeEnum] = None):
                    pending_peg_offset_value (Optional[int] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderListOtoResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if working_type is None:
            raise RequiredError(
                field="working_type",
                error_message="Missing required parameter 'working_type'",
            )
        if working_side is None:
            raise RequiredError(
                field="working_side",
                error_message="Missing required parameter 'working_side'",
            )
        if working_price is None:
            raise RequiredError(
                field="working_price",
                error_message="Missing required parameter 'working_price'",
            )
        if working_quantity is None:
            raise RequiredError(
                field="working_quantity",
                error_message="Missing required parameter 'working_quantity'",
            )
        if pending_type is None:
            raise RequiredError(
                field="pending_type",
                error_message="Missing required parameter 'pending_type'",
            )
        if pending_side is None:
            raise RequiredError(
                field="pending_side",
                error_message="Missing required parameter 'pending_side'",
            )
        if pending_quantity is None:
            raise RequiredError(
                field="pending_quantity",
                error_message="Missing required parameter 'pending_quantity'",
            )

        payload = {
            "symbol": symbol,
            "working_type": working_type,
            "working_side": working_side,
            "working_price": working_price,
            "working_quantity": working_quantity,
            "pending_type": pending_type,
            "pending_side": pending_side,
            "pending_quantity": pending_quantity,
            "list_client_order_id": list_client_order_id,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "working_client_order_id": working_client_order_id,
            "working_iceberg_qty": working_iceberg_qty,
            "working_time_in_force": working_time_in_force,
            "working_strategy_id": working_strategy_id,
            "working_strategy_type": working_strategy_type,
            "working_peg_price_type": working_peg_price_type,
            "working_peg_offset_type": working_peg_offset_type,
            "working_peg_offset_value": working_peg_offset_value,
            "pending_client_order_id": pending_client_order_id,
            "pending_price": pending_price,
            "pending_stop_price": pending_stop_price,
            "pending_trailing_delta": pending_trailing_delta,
            "pending_iceberg_qty": pending_iceberg_qty,
            "pending_time_in_force": pending_time_in_force,
            "pending_strategy_id": pending_strategy_id,
            "pending_strategy_type": pending_strategy_type,
            "pending_peg_price_type": pending_peg_price_type,
            "pending_peg_offset_type": pending_peg_offset_type,
            "pending_peg_offset_value": pending_peg_offset_value,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/orderList/oto",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderListOtoResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_list_otoco(
        self,
        symbol: Union[str, None],
        working_type: Union[OrderListOtocoWorkingTypeEnum, None],
        working_side: Union[OrderListOtocoWorkingSideEnum, None],
        working_price: Union[float, None],
        working_quantity: Union[float, None],
        pending_side: Union[OrderListOtocoPendingSideEnum, None],
        pending_quantity: Union[float, None],
        pending_above_type: Union[OrderListOtocoPendingAboveTypeEnum, None],
        list_client_order_id: Optional[str] = None,
        new_order_resp_type: Optional[OrderListOtocoNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderListOtocoSelfTradePreventionModeEnum
        ] = None,
        working_client_order_id: Optional[str] = None,
        working_iceberg_qty: Optional[float] = None,
        working_time_in_force: Optional[OrderListOtocoWorkingTimeInForceEnum] = None,
        working_strategy_id: Optional[int] = None,
        working_strategy_type: Optional[int] = None,
        working_peg_price_type: Optional[OrderListOtocoWorkingPegPriceTypeEnum] = None,
        working_peg_offset_type: Optional[
            OrderListOtocoWorkingPegOffsetTypeEnum
        ] = None,
        working_peg_offset_value: Optional[int] = None,
        pending_above_client_order_id: Optional[str] = None,
        pending_above_price: Optional[float] = None,
        pending_above_stop_price: Optional[float] = None,
        pending_above_trailing_delta: Optional[float] = None,
        pending_above_iceberg_qty: Optional[float] = None,
        pending_above_time_in_force: Optional[
            OrderListOtocoPendingAboveTimeInForceEnum
        ] = None,
        pending_above_strategy_id: Optional[int] = None,
        pending_above_strategy_type: Optional[int] = None,
        pending_above_peg_price_type: Optional[
            OrderListOtocoPendingAbovePegPriceTypeEnum
        ] = None,
        pending_above_peg_offset_type: Optional[
            OrderListOtocoPendingAbovePegOffsetTypeEnum
        ] = None,
        pending_above_peg_offset_value: Optional[int] = None,
        pending_below_type: Optional[OrderListOtocoPendingBelowTypeEnum] = None,
        pending_below_client_order_id: Optional[str] = None,
        pending_below_price: Optional[float] = None,
        pending_below_stop_price: Optional[float] = None,
        pending_below_trailing_delta: Optional[float] = None,
        pending_below_iceberg_qty: Optional[float] = None,
        pending_below_time_in_force: Optional[
            OrderListOtocoPendingBelowTimeInForceEnum
        ] = None,
        pending_below_strategy_id: Optional[int] = None,
        pending_below_strategy_type: Optional[int] = None,
        pending_below_peg_price_type: Optional[
            OrderListOtocoPendingBelowPegPriceTypeEnum
        ] = None,
        pending_below_peg_offset_type: Optional[
            OrderListOtocoPendingBelowPegOffsetTypeEnum
        ] = None,
        pending_below_peg_offset_value: Optional[int] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderListOtocoResponse]:
        """
                New Order list - OTOCO
                POST /api/v3/orderList/otoco
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---otoco-trade

                Place an OTOCO.

        * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
        * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
          * The behavior of the working order is the same as the [OTO](#new-order-list---oto-trade).
        * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
            * The rules of the pending above and pending below follow the same rules as the [Order list OCO](#new-order-list---oco-trade).
        * OTOCOs add **3 orders** to the `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
        Weight: 1

        Unfilled Order Count: 3

                Args:
                    symbol (Union[str, None]):
                    working_type (Union[OrderListOtocoWorkingTypeEnum, None]):
                    working_side (Union[OrderListOtocoWorkingSideEnum, None]):
                    working_price (Union[float, None]):
                    working_quantity (Union[float, None]): Sets the quantity for the working order.
                    pending_side (Union[OrderListOtocoPendingSideEnum, None]):
                    pending_quantity (Union[float, None]): Sets the quantity for the pending order.
                    pending_above_type (Union[OrderListOtocoPendingAboveTypeEnum, None]):
                    list_client_order_id (Optional[str] = None): A unique Id for the entire orderList
                    new_order_resp_type (Optional[OrderListOtocoNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderListOtocoSelfTradePreventionModeEnum] = None):
                    working_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the working order.<br> Automatically generated if not sent.
                    working_iceberg_qty (Optional[float] = None): This can only be used if `workingTimeInForce` is `GTC`, or if `workingType` is `LIMIT_MAKER`.
                    working_time_in_force (Optional[OrderListOtocoWorkingTimeInForceEnum] = None):
                    working_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the working order within an order strategy.
                    working_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the working order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
                    working_peg_price_type (Optional[OrderListOtocoWorkingPegPriceTypeEnum] = None):
                    working_peg_offset_type (Optional[OrderListOtocoWorkingPegOffsetTypeEnum] = None):
                    working_peg_offset_value (Optional[int] = None):
                    pending_above_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the pending above order.<br> Automatically generated if not sent.
                    pending_above_price (Optional[float] = None): Can be used if `pendingAboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                    pending_above_stop_price (Optional[float] = None): Can be used if `pendingAboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`
                    pending_above_trailing_delta (Optional[float] = None): See [Trailing Stop FAQ](faqs/trailing-stop-faq.md)
                    pending_above_iceberg_qty (Optional[float] = None): This can only be used if `pendingAboveTimeInForce` is `GTC` or if `pendingAboveType` is `LIMIT_MAKER`.
                    pending_above_time_in_force (Optional[OrderListOtocoPendingAboveTimeInForceEnum] = None):
                    pending_above_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the pending above order within an order strategy.
                    pending_above_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the pending above order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
                    pending_above_peg_price_type (Optional[OrderListOtocoPendingAbovePegPriceTypeEnum] = None):
                    pending_above_peg_offset_type (Optional[OrderListOtocoPendingAbovePegOffsetTypeEnum] = None):
                    pending_above_peg_offset_value (Optional[int] = None):
                    pending_below_type (Optional[OrderListOtocoPendingBelowTypeEnum] = None):
                    pending_below_client_order_id (Optional[str] = None): Arbitrary unique ID among open orders for the pending below order.<br> Automatically generated if not sent.
                    pending_below_price (Optional[float] = None): Can be used if `pendingBelowType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT` to specify limit price
                    pending_below_stop_price (Optional[float] = None): Can be used if `pendingBelowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT or TAKE_PROFIT_LIMIT`. <br>Either `pendingBelowStopPrice` or `pendingBelowTrailingDelta` or both, must be specified.
                    pending_below_trailing_delta (Optional[float] = None):
                    pending_below_iceberg_qty (Optional[float] = None): This can only be used if `pendingBelowTimeInForce` is `GTC`, or if `pendingBelowType` is `LIMIT_MAKER`.
                    pending_below_time_in_force (Optional[OrderListOtocoPendingBelowTimeInForceEnum] = None):
                    pending_below_strategy_id (Optional[int] = None): Arbitrary numeric value identifying the pending below order within an order strategy.
                    pending_below_strategy_type (Optional[int] = None): Arbitrary numeric value identifying the pending below order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
                    pending_below_peg_price_type (Optional[OrderListOtocoPendingBelowPegPriceTypeEnum] = None):
                    pending_below_peg_offset_type (Optional[OrderListOtocoPendingBelowPegOffsetTypeEnum] = None):
                    pending_below_peg_offset_value (Optional[int] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderListOtocoResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if working_type is None:
            raise RequiredError(
                field="working_type",
                error_message="Missing required parameter 'working_type'",
            )
        if working_side is None:
            raise RequiredError(
                field="working_side",
                error_message="Missing required parameter 'working_side'",
            )
        if working_price is None:
            raise RequiredError(
                field="working_price",
                error_message="Missing required parameter 'working_price'",
            )
        if working_quantity is None:
            raise RequiredError(
                field="working_quantity",
                error_message="Missing required parameter 'working_quantity'",
            )
        if pending_side is None:
            raise RequiredError(
                field="pending_side",
                error_message="Missing required parameter 'pending_side'",
            )
        if pending_quantity is None:
            raise RequiredError(
                field="pending_quantity",
                error_message="Missing required parameter 'pending_quantity'",
            )
        if pending_above_type is None:
            raise RequiredError(
                field="pending_above_type",
                error_message="Missing required parameter 'pending_above_type'",
            )

        payload = {
            "symbol": symbol,
            "working_type": working_type,
            "working_side": working_side,
            "working_price": working_price,
            "working_quantity": working_quantity,
            "pending_side": pending_side,
            "pending_quantity": pending_quantity,
            "pending_above_type": pending_above_type,
            "list_client_order_id": list_client_order_id,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "working_client_order_id": working_client_order_id,
            "working_iceberg_qty": working_iceberg_qty,
            "working_time_in_force": working_time_in_force,
            "working_strategy_id": working_strategy_id,
            "working_strategy_type": working_strategy_type,
            "working_peg_price_type": working_peg_price_type,
            "working_peg_offset_type": working_peg_offset_type,
            "working_peg_offset_value": working_peg_offset_value,
            "pending_above_client_order_id": pending_above_client_order_id,
            "pending_above_price": pending_above_price,
            "pending_above_stop_price": pending_above_stop_price,
            "pending_above_trailing_delta": pending_above_trailing_delta,
            "pending_above_iceberg_qty": pending_above_iceberg_qty,
            "pending_above_time_in_force": pending_above_time_in_force,
            "pending_above_strategy_id": pending_above_strategy_id,
            "pending_above_strategy_type": pending_above_strategy_type,
            "pending_above_peg_price_type": pending_above_peg_price_type,
            "pending_above_peg_offset_type": pending_above_peg_offset_type,
            "pending_above_peg_offset_value": pending_above_peg_offset_value,
            "pending_below_type": pending_below_type,
            "pending_below_client_order_id": pending_below_client_order_id,
            "pending_below_price": pending_below_price,
            "pending_below_stop_price": pending_below_stop_price,
            "pending_below_trailing_delta": pending_below_trailing_delta,
            "pending_below_iceberg_qty": pending_below_iceberg_qty,
            "pending_below_time_in_force": pending_below_time_in_force,
            "pending_below_strategy_id": pending_below_strategy_id,
            "pending_below_strategy_type": pending_below_strategy_type,
            "pending_below_peg_price_type": pending_below_peg_price_type,
            "pending_below_peg_offset_type": pending_below_peg_offset_type,
            "pending_below_peg_offset_value": pending_below_peg_offset_value,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/orderList/otoco",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderListOtocoResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_oco(
        self,
        symbol: Union[str, None],
        side: Union[OrderOcoSideEnum, None],
        quantity: Union[float, None],
        price: Union[float, None],
        stop_price: Union[float, None],
        list_client_order_id: Optional[str] = None,
        limit_client_order_id: Optional[str] = None,
        limit_strategy_id: Optional[int] = None,
        limit_strategy_type: Optional[int] = None,
        limit_iceberg_qty: Optional[float] = None,
        trailing_delta: Optional[int] = None,
        stop_client_order_id: Optional[str] = None,
        stop_strategy_id: Optional[int] = None,
        stop_strategy_type: Optional[int] = None,
        stop_limit_price: Optional[float] = None,
        stop_iceberg_qty: Optional[float] = None,
        stop_limit_time_in_force: Optional[OrderOcoStopLimitTimeInForceEnum] = None,
        new_order_resp_type: Optional[OrderOcoNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderOcoSelfTradePreventionModeEnum
        ] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderOcoResponse]:
        """
                New OCO - Deprecated
                POST /api/v3/order/oco
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-oco---deprecated-trade

                Send in a new OCO.

        * Price Restrictions:
            * `SELL`: Limit Price > Last Price > Stop Price
            * `BUY`: Limit Price < Last Price < Stop Price
        * Quantity Restrictions:
            * Both legs must have the same quantity.
            * `ICEBERG` quantities however do not have to be the same
        * `OCO` adds **2 orders** to the `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.
        Weight: 1

        Unfilled Order Count: 2

                Args:
                    symbol (Union[str, None]):
                    side (Union[OrderOcoSideEnum, None]):
                    quantity (Union[float, None]):
                    price (Union[float, None]):
                    stop_price (Union[float, None]):
                    list_client_order_id (Optional[str] = None): A unique Id for the entire orderList
                    limit_client_order_id (Optional[str] = None): A unique Id for the limit order
                    limit_strategy_id (Optional[int] = None):
                    limit_strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    limit_iceberg_qty (Optional[float] = None): Used to make the `LIMIT_MAKER` leg an iceberg order.
                    trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    stop_client_order_id (Optional[str] = None): A unique Id for the stop loss/stop loss limit leg
                    stop_strategy_id (Optional[int] = None):
                    stop_strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    stop_limit_price (Optional[float] = None): If provided, `stopLimitTimeInForce` is required.
                    stop_iceberg_qty (Optional[float] = None): Used with `STOP_LOSS_LIMIT` leg to make an iceberg order.
                    stop_limit_time_in_force (Optional[OrderOcoStopLimitTimeInForceEnum] = None):
                    new_order_resp_type (Optional[OrderOcoNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderOcoSelfTradePreventionModeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderOcoResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if quantity is None:
            raise RequiredError(
                field="quantity", error_message="Missing required parameter 'quantity'"
            )
        if price is None:
            raise RequiredError(
                field="price", error_message="Missing required parameter 'price'"
            )
        if stop_price is None:
            raise RequiredError(
                field="stop_price",
                error_message="Missing required parameter 'stop_price'",
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "quantity": quantity,
            "price": price,
            "stop_price": stop_price,
            "list_client_order_id": list_client_order_id,
            "limit_client_order_id": limit_client_order_id,
            "limit_strategy_id": limit_strategy_id,
            "limit_strategy_type": limit_strategy_type,
            "limit_iceberg_qty": limit_iceberg_qty,
            "trailing_delta": trailing_delta,
            "stop_client_order_id": stop_client_order_id,
            "stop_strategy_id": stop_strategy_id,
            "stop_strategy_type": stop_strategy_type,
            "stop_limit_price": stop_limit_price,
            "stop_iceberg_qty": stop_iceberg_qty,
            "stop_limit_time_in_force": stop_limit_time_in_force,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/order/oco",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderOcoResponse,
            is_signed=True,
            signer=self._signer,
        )

    def order_test(
        self,
        symbol: Union[str, None],
        side: Union[OrderTestSideEnum, None],
        type: Union[OrderTestTypeEnum, None],
        compute_commission_rates: Optional[bool] = None,
        time_in_force: Optional[OrderTestTimeInForceEnum] = None,
        quantity: Optional[float] = None,
        quote_order_qty: Optional[float] = None,
        price: Optional[float] = None,
        new_client_order_id: Optional[str] = None,
        strategy_id: Optional[int] = None,
        strategy_type: Optional[int] = None,
        stop_price: Optional[float] = None,
        trailing_delta: Optional[int] = None,
        iceberg_qty: Optional[float] = None,
        new_order_resp_type: Optional[OrderTestNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            OrderTestSelfTradePreventionModeEnum
        ] = None,
        peg_price_type: Optional[OrderTestPegPriceTypeEnum] = None,
        peg_offset_value: Optional[int] = None,
        peg_offset_type: Optional[OrderTestPegOffsetTypeEnum] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[OrderTestResponse]:
        """
                Test new order
                POST /api/v3/order/test
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#test-new-order-trade

                Test new order creation and signature/recvWindow long.
        Creates and validates a new order but does not send it into the matching engine.
        Weight: |Condition| Request Weight|
        |------------           | ------------ |
        |Without `computeCommissionRates`| 1|
        |With `computeCommissionRates`|20|

                Args:
                    symbol (Union[str, None]):
                    side (Union[OrderTestSideEnum, None]):
                    type (Union[OrderTestTypeEnum, None]):
                    compute_commission_rates (Optional[bool] = None): Default: `false` <br> See [Commissions FAQ](faqs/commission_faq.md#test-order-diferences) to learn more.
                    time_in_force (Optional[OrderTestTimeInForceEnum] = None):
                    quantity (Optional[float] = None):
                    quote_order_qty (Optional[float] = None):
                    price (Optional[float] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    strategy_id (Optional[int] = None):
                    strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    stop_price (Optional[float] = None): Used with `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, and `TAKE_PROFIT_LIMIT` orders.
                    trailing_delta (Optional[int] = None): See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
                    iceberg_qty (Optional[float] = None): Used with `LIMIT`, `STOP_LOSS_LIMIT`, and `TAKE_PROFIT_LIMIT` to create an iceberg order.
                    new_order_resp_type (Optional[OrderTestNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[OrderTestSelfTradePreventionModeEnum] = None):
                    peg_price_type (Optional[OrderTestPegPriceTypeEnum] = None):
                    peg_offset_value (Optional[int] = None): Priceleveltopegthepriceto(max:100).<br>See[PeggedOrdersInfo](#pegged-orders-info)
                    peg_offset_type (Optional[OrderTestPegOffsetTypeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[OrderTestResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if type is None:
            raise RequiredError(
                field="type", error_message="Missing required parameter 'type'"
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "type": type,
            "compute_commission_rates": compute_commission_rates,
            "time_in_force": time_in_force,
            "quantity": quantity,
            "quote_order_qty": quote_order_qty,
            "price": price,
            "new_client_order_id": new_client_order_id,
            "strategy_id": strategy_id,
            "strategy_type": strategy_type,
            "stop_price": stop_price,
            "trailing_delta": trailing_delta,
            "iceberg_qty": iceberg_qty,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "peg_price_type": peg_price_type,
            "peg_offset_value": peg_offset_value,
            "peg_offset_type": peg_offset_type,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/order/test",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=OrderTestResponse,
            is_signed=True,
            signer=self._signer,
        )

    def sor_order(
        self,
        symbol: Union[str, None],
        side: Union[SorOrderSideEnum, None],
        type: Union[SorOrderTypeEnum, None],
        quantity: Union[float, None],
        time_in_force: Optional[SorOrderTimeInForceEnum] = None,
        price: Optional[float] = None,
        new_client_order_id: Optional[str] = None,
        strategy_id: Optional[int] = None,
        strategy_type: Optional[int] = None,
        iceberg_qty: Optional[float] = None,
        new_order_resp_type: Optional[SorOrderNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            SorOrderSelfTradePreventionModeEnum
        ] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[SorOrderResponse]:
        """
                New order using SOR
                POST /api/v3/sor/order
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-using-sor-trade

                Places an order using smart order routing (SOR).

        This adds 1 order to the `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.

        Read [SOR FAQ](faqs/sor_faq.md) to learn more.
        Weight: 1

        Unfilled Order Count: 1

                Args:
                    symbol (Union[str, None]):
                    side (Union[SorOrderSideEnum, None]):
                    type (Union[SorOrderTypeEnum, None]):
                    quantity (Union[float, None]):
                    time_in_force (Optional[SorOrderTimeInForceEnum] = None):
                    price (Optional[float] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    strategy_id (Optional[int] = None):
                    strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    iceberg_qty (Optional[float] = None): Used with `LIMIT`, `STOP_LOSS_LIMIT`, and `TAKE_PROFIT_LIMIT` to create an iceberg order.
                    new_order_resp_type (Optional[SorOrderNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[SorOrderSelfTradePreventionModeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[SorOrderResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if type is None:
            raise RequiredError(
                field="type", error_message="Missing required parameter 'type'"
            )
        if quantity is None:
            raise RequiredError(
                field="quantity", error_message="Missing required parameter 'quantity'"
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "type": type,
            "quantity": quantity,
            "time_in_force": time_in_force,
            "price": price,
            "new_client_order_id": new_client_order_id,
            "strategy_id": strategy_id,
            "strategy_type": strategy_type,
            "iceberg_qty": iceberg_qty,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/sor/order",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SorOrderResponse,
            is_signed=True,
            signer=self._signer,
        )

    def sor_order_test(
        self,
        symbol: Union[str, None],
        side: Union[SorOrderTestSideEnum, None],
        type: Union[SorOrderTestTypeEnum, None],
        quantity: Union[float, None],
        compute_commission_rates: Optional[bool] = None,
        time_in_force: Optional[SorOrderTestTimeInForceEnum] = None,
        price: Optional[float] = None,
        new_client_order_id: Optional[str] = None,
        strategy_id: Optional[int] = None,
        strategy_type: Optional[int] = None,
        iceberg_qty: Optional[float] = None,
        new_order_resp_type: Optional[SorOrderTestNewOrderRespTypeEnum] = None,
        self_trade_prevention_mode: Optional[
            SorOrderTestSelfTradePreventionModeEnum
        ] = None,
        recv_window: Optional[float] = None,
    ) -> ApiResponse[SorOrderTestResponse]:
        """
                Test new order using SOR
                POST /api/v3/sor/order/test
                https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#test-new-order-using-sor-trade

                Test new order creation and signature/recvWindow using smart order routing (SOR).
        Creates and validates a new order but does not send it into the matching engine.
        Weight: | Condition | Request Weight |
        | --------- | -------------- |
        | Without `computeCommissionRates`  |  1 |
        | With `computeCommissionRates`     | 20 |

                Args:
                    symbol (Union[str, None]):
                    side (Union[SorOrderTestSideEnum, None]):
                    type (Union[SorOrderTestTypeEnum, None]):
                    quantity (Union[float, None]):
                    compute_commission_rates (Optional[bool] = None): Default: `false` <br> See [Commissions FAQ](faqs/commission_faq.md#test-order-diferences) to learn more.
                    time_in_force (Optional[SorOrderTestTimeInForceEnum] = None):
                    price (Optional[float] = None):
                    new_client_order_id (Optional[str] = None): A unique id among open orders. Automatically generated if not sent.<br/> Orders with the same `newClientOrderID` can be accepted only when the previous one is filled, otherwise the order will be rejected.
                    strategy_id (Optional[int] = None):
                    strategy_type (Optional[int] = None): The value cannot be less than `1000000`.
                    iceberg_qty (Optional[float] = None): Used with `LIMIT`, `STOP_LOSS_LIMIT`, and `TAKE_PROFIT_LIMIT` to create an iceberg order.
                    new_order_resp_type (Optional[SorOrderTestNewOrderRespTypeEnum] = None):
                    self_trade_prevention_mode (Optional[SorOrderTestSelfTradePreventionModeEnum] = None):
                    recv_window (Optional[float] = None): The value cannot be greater than `60000`. <br> Supports up to three decimal places of precision (e.g., 6000.346) so that microseconds may be specified.

                Returns:
                    ApiResponse[SorOrderTestResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if symbol is None:
            raise RequiredError(
                field="symbol", error_message="Missing required parameter 'symbol'"
            )
        if side is None:
            raise RequiredError(
                field="side", error_message="Missing required parameter 'side'"
            )
        if type is None:
            raise RequiredError(
                field="type", error_message="Missing required parameter 'type'"
            )
        if quantity is None:
            raise RequiredError(
                field="quantity", error_message="Missing required parameter 'quantity'"
            )

        payload = {
            "symbol": symbol,
            "side": side,
            "type": type,
            "quantity": quantity,
            "compute_commission_rates": compute_commission_rates,
            "time_in_force": time_in_force,
            "price": price,
            "new_client_order_id": new_client_order_id,
            "strategy_id": strategy_id,
            "strategy_type": strategy_type,
            "iceberg_qty": iceberg_qty,
            "new_order_resp_type": new_order_resp_type,
            "self_trade_prevention_mode": self_trade_prevention_mode,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/api/v3/sor/order/test",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SorOrderTestResponse,
            is_signed=True,
            signer=self._signer,
        )
