# coding: utf-8

"""
Binance Spot REST API

OpenAPI Specifications for the Binance Spot REST API

API documents:
  - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
  - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import json
import pprint
from pydantic import (
    BaseModel,
    ConfigDict,
    ValidationError,
)
from typing import Any, Optional
from binance_sdk_spot.rest_api.models.max_asset_filter import MaxAssetFilter
from typing import Union, Set, Dict
from typing_extensions import Self

ASSETFILTERS_ONE_OF_SCHEMAS = ["MaxAssetFilter"]


class AssetFilters(BaseModel):
    """
    AssetFilters
    """

    # data type: MaxAssetFilter
    oneof_schema_1_validator: Optional[MaxAssetFilter] = None
    actual_instance: Optional[Union[MaxAssetFilter]] = None
    one_of_schemas: Set[str] = {"MaxAssetFilter"}

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @classmethod
    def is_oneof_model(cls) -> bool:
        return True

    @classmethod
    def from_dict(cls, parsed) -> Self:
        """Returns the object represented by the json string"""
        if parsed is None:
            return None

        if isinstance(parsed, dict) and "filterType" in parsed:
            filter_type_map = {"MAX_ASSET": MaxAssetFilter}

            ft = parsed.get("filterType")
            target_cls = filter_type_map.get(ft)

            if target_cls is not None:
                # Deserialize directly into the proper schema
                instance = cls.model_construct()
                instance.actual_instance = target_cls.from_dict(parsed)
                return instance

        instance = cls.model_construct()
        error_messages = []
        match = 0
        is_list = isinstance(parsed, list)

        for subcls in ["MaxAssetFilter"]:
            if is_list == subcls.is_array():
                try:
                    instance.actual_instance = subcls.from_dict(parsed)
                    match += 1
                except (ValidationError, ValueError) as e:
                    error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AssetFilters with oneOf schemas: MaxAssetFilter. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AssetFilters with oneOf schemas: MaxAssetFilter. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], MaxAssetFilter]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
