# coding: utf-8

"""
Binance Spot REST API

OpenAPI Specifications for the Binance Spot REST API

API documents:
  - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
  - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binance_sdk_spot.rest_api.models.symbol_filters import SymbolFilters
from typing import Set
from typing_extensions import Self


class ExchangeInfoResponseSymbolsInner(BaseModel):
    """
    ExchangeInfoResponseSymbolsInner
    """  # noqa: E501

    symbol: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    base_asset: Optional[StrictStr] = Field(default=None, alias="baseAsset")
    base_asset_precision: Optional[StrictInt] = Field(
        default=None, alias="baseAssetPrecision"
    )
    quote_asset: Optional[StrictStr] = Field(default=None, alias="quoteAsset")
    quote_precision: Optional[StrictInt] = Field(default=None, alias="quotePrecision")
    quote_asset_precision: Optional[StrictInt] = Field(
        default=None, alias="quoteAssetPrecision"
    )
    base_commission_precision: Optional[StrictInt] = Field(
        default=None, alias="baseCommissionPrecision"
    )
    quote_commission_precision: Optional[StrictInt] = Field(
        default=None, alias="quoteCommissionPrecision"
    )
    order_types: Optional[List[StrictStr]] = Field(default=None, alias="orderTypes")
    iceberg_allowed: Optional[StrictBool] = Field(default=None, alias="icebergAllowed")
    oco_allowed: Optional[StrictBool] = Field(default=None, alias="ocoAllowed")
    oto_allowed: Optional[StrictBool] = Field(default=None, alias="otoAllowed")
    quote_order_qty_market_allowed: Optional[StrictBool] = Field(
        default=None, alias="quoteOrderQtyMarketAllowed"
    )
    allow_trailing_stop: Optional[StrictBool] = Field(
        default=None, alias="allowTrailingStop"
    )
    cancel_replace_allowed: Optional[StrictBool] = Field(
        default=None, alias="cancelReplaceAllowed"
    )
    amend_allowed: Optional[StrictBool] = Field(default=None, alias="amendAllowed")
    peg_instructions_allowed: Optional[StrictBool] = Field(
        default=None, alias="pegInstructionsAllowed"
    )
    is_spot_trading_allowed: Optional[StrictBool] = Field(
        default=None, alias="isSpotTradingAllowed"
    )
    is_margin_trading_allowed: Optional[StrictBool] = Field(
        default=None, alias="isMarginTradingAllowed"
    )
    filters: Optional[List[SymbolFilters]] = None
    permissions: Optional[List[StrictStr]] = None
    permission_sets: Optional[List[List[StrictStr]]] = Field(
        default=None, alias="permissionSets"
    )
    default_self_trade_prevention_mode: Optional[StrictStr] = Field(
        default=None, alias="defaultSelfTradePreventionMode"
    )
    allowed_self_trade_prevention_modes: Optional[List[StrictStr]] = Field(
        default=None, alias="allowedSelfTradePreventionModes"
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "symbol",
        "status",
        "baseAsset",
        "baseAssetPrecision",
        "quoteAsset",
        "quotePrecision",
        "quoteAssetPrecision",
        "baseCommissionPrecision",
        "quoteCommissionPrecision",
        "orderTypes",
        "icebergAllowed",
        "ocoAllowed",
        "otoAllowed",
        "quoteOrderQtyMarketAllowed",
        "allowTrailingStop",
        "cancelReplaceAllowed",
        "amendAllowed",
        "pegInstructionsAllowed",
        "isSpotTradingAllowed",
        "isMarginTradingAllowed",
        "filters",
        "permissions",
        "permissionSets",
        "defaultSelfTradePreventionMode",
        "allowedSelfTradePreventionModes",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def is_array(cls) -> bool:
        return False

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeInfoResponseSymbolsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict["filters"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeInfoResponseSymbolsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "symbol": obj.get("symbol"),
                "status": obj.get("status"),
                "baseAsset": obj.get("baseAsset"),
                "baseAssetPrecision": obj.get("baseAssetPrecision"),
                "quoteAsset": obj.get("quoteAsset"),
                "quotePrecision": obj.get("quotePrecision"),
                "quoteAssetPrecision": obj.get("quoteAssetPrecision"),
                "baseCommissionPrecision": obj.get("baseCommissionPrecision"),
                "quoteCommissionPrecision": obj.get("quoteCommissionPrecision"),
                "orderTypes": obj.get("orderTypes"),
                "icebergAllowed": obj.get("icebergAllowed"),
                "ocoAllowed": obj.get("ocoAllowed"),
                "otoAllowed": obj.get("otoAllowed"),
                "quoteOrderQtyMarketAllowed": obj.get("quoteOrderQtyMarketAllowed"),
                "allowTrailingStop": obj.get("allowTrailingStop"),
                "cancelReplaceAllowed": obj.get("cancelReplaceAllowed"),
                "amendAllowed": obj.get("amendAllowed"),
                "pegInstructionsAllowed": obj.get("pegInstructionsAllowed"),
                "isSpotTradingAllowed": obj.get("isSpotTradingAllowed"),
                "isMarginTradingAllowed": obj.get("isMarginTradingAllowed"),
                "filters": (
                    [SymbolFilters.from_dict(_item) for _item in obj["filters"]]
                    if obj.get("filters") is not None
                    else None
                ),
                "permissions": obj.get("permissions"),
                "permissionSets": obj.get("permissionSets"),
                "defaultSelfTradePreventionMode": obj.get(
                    "defaultSelfTradePreventionMode"
                ),
                "allowedSelfTradePreventionModes": obj.get(
                    "allowedSelfTradePreventionModes"
                ),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
