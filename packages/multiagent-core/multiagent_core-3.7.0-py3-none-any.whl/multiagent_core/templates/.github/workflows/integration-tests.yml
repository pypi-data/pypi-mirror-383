name: Integration Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  multiagent-init-tests:
    name: Test multiagent init workflow
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pipx
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        python -m pipx ensurepath

    - name: Install pytest
      run: pip install pytest

    - name: Install multiagent-core via pipx
      run: pipx install .

    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short

    - name: Run quick dev test script
      run: ./scripts/dev-test.sh

  integration-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Python ${{ matrix.python-version }}
      if: hashFiles('**/*.py') != ''
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then npm ci; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f pyproject.toml ]; then pip install -e .; fi

    - name: Run integration tests
      run: |
        if [ -f scripts/ops ]; then
          ./scripts/ops test:integration
        elif [ -f package.json ] && npm run | grep -q "test:integration"; then
          npm run test:integration
        elif command -v pytest >/dev/null 2>&1; then
          pytest -m integration || pytest tests/integration/ || echo "No integration tests found"
        else
          echo "No integration test command found"
        fi
    
    - name: Build and test production build
      run: |
        if [ -f scripts/ops ]; then
          ./scripts/ops build --target /tmp/test-build
          ./scripts/ops verify-prod /tmp/test-build
        elif [ -f package.json ] && npm run | grep -q build; then
          npm run build
        elif [ -f pyproject.toml ]; then
          python -m build
        else
          echo "No build command found"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node${{ matrix.node-version }}-python${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage-reports/
          build-logs/
        retention-days: 7