from django.db import models


class YandexAdBlock(models.Model):
    class AdBlockType(models.TextChoices):
        BANNER = "banner"
        FULL_SCREEN = "fullscreen"
        FLOOR_FULL = "floorAd"
        TOP_FULL = "topAd"
        CAROUSEL = "feed"
        IN_IMAGE = "inImage"

    class PushOn(models.TextChoices):
        ON_LOAD = "on-load"
        ON_INTERSECTION = "on-intersection"

    class PlaceholderAction(models.TextChoices):
        KEEP = "keep"
        DELETE = "delete"

    class PlatformToDisplay(models.TextChoices):
        CROSSPLATFORM = "crossplatform"
        DESKTOP = "desktop"
        MOBILE = "touch"

    adblock_name = models.CharField(max_length=50, default="YandexAdBlock name")
    adblock_type = models.CharField(max_length=50, choices=AdBlockType, default=AdBlockType.BANNER)
    adblock_id = models.CharField(max_length=50, default="ID-0000000-0", help_text="An ID for block generated by Ad Network. Please do not forget to change.")
    adblock_push_on = models.CharField(max_length=50, choices=PushOn, default=PushOn.ON_LOAD, help_text="Does not affect IN_IMAGE type of block")
    adblock_placeholder_action = models.CharField(max_length=10, choices=PlaceholderAction, default=PlaceholderAction.KEEP, help_text="Affects only those blocks which has an element to place add, like feed or banner")
    adblock_platform_for_use = models.CharField(max_length=20, choices=PlatformToDisplay, default=PlatformToDisplay.CROSSPLATFORM, help_text="On which platform to use this block, by default on both.")
    adblock_template = models.CharField(
        max_length=200,
        default="YandexAdManager/admanager_element_default.html",
        help_text="Путь к шаблону для отрисовки оболочки рекламного блока"
    )

    def __str__(self):
        return f"({self.adblock_type}) -> {self.adblock_name}"

class YandexAdLocation(models.Model):
    adlocation_name = models.CharField(max_length=100, unique=True)
    adblock = models.ForeignKey(YandexAdBlock, on_delete=models.DO_NOTHING)

    def __str__(self):
        return f"{self.adlocation_name}  |{self.adblock}"

class YandexAdBlockConfiguration(models.Model):
    brand_name = models.CharField(max_length=100, blank=False, null=True, unique=True)
    adnetwork_locations = models.ManyToManyField(YandexAdLocation)
    adnetwork_step_by = models.IntegerField(default=3, help_text="To display an YandexAdBlock every N iteration")

    def __str__(self):
        return self.brand_name

class YandexCurrentAdBlockConfiguration(models.Model):
    current = models.OneToOneField(
        YandexAdBlockConfiguration,
        on_delete=models.CASCADE,
        null=True,  # Allow no item to be selected initially
        blank=True,
        related_name='current_ad_network' # Optional: for reverse access
    )

    def __str__(self):
        return f"Current selection: { self.current.brand_name if self.current else 'None'}"

    def save(self, *args, **kwargs):
        # Ensure only one CurrentSelection object exists
        if not self.pk and YandexCurrentAdBlockConfiguration.objects.exists():
            raise Exception("Only one YandexCurrentAdBlockConfiguration object can exist.")
        super().save(*args, **kwargs)

    @classmethod
    def get_current(cls):
        # Helper method to get the single CurrentSelection instance
        try:
            obj = cls.objects.all()[0] # Use a fixed PK for single instance
            return obj
        except:
            return None 

    @classmethod
    def set_current_item(cls, item_instance):
        current_selection = cls.get_current()
        current_selection.current = item_instance
        current_selection.save()