[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grimoire-model"
version = "0.3.0"
description = "Dict-like model system with schema validation, derived fields, and inheritance for Grimoire"
authors = [{name = "The Wyrd One", email = "wyrdbound@proton.me"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Role-Playing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["gaming", "rpg", "tabletop", "model", "validation", "schema"]
dependencies = [
    "pydantic>=2.0.0",
    "pyrsistent>=0.19.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    "grimoire-logging>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "hypothesis>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.0.290",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-napoleon>=0.7",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "hypothesis>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/wyrdbound/grimoire-model"
Repository = "https://github.com/wyrdbound/grimoire-model"
Issues = "https://github.com/wyrdbound/grimoire-model/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=grimoire_model --cov-report=term-missing --cov-report=html"

[tool.ruff]
target-version = "py38"
line-length = 88
preview = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "UP007",  # Use `X | Y` for type annotations (requires Python 3.10+)
]

[tool.ruff.format]
# Use Ruff's formatter instead of Black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
strict_equality = true

[tool.coverage.run]
source = ["src/grimoire_model"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
