# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on publish
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-python-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-
      - name: Install dependencies
        run: uv sync --dev
      - name: Build package
        uses: PyO3/maturin-action@v1
        with:
          command: develop
          args: --release
      - name: Cache figures repository
        uses: actions/cache@v4
        with:
          path: ellip
          key: figures-${{ hashFiles('**/docs/source/_static/figures/**') }}
          restore-keys: |
            figures-
      - name: Clone figures repository
        run: |
          if [ ! -d "ellip" ]; then
            git clone https://github.com/p-sira/ellip.git
          fi
          mkdir -p docs/source/_static/figures/
          cp -r ellip/figures/* docs/source/_static/figures/
      - name: Build documentation
        run: |
          cd docs
          uv run make html
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/build/html/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
