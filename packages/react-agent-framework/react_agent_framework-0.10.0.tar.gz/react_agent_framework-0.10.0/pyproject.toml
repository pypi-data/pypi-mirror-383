[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "react-agent-framework"
version = "0.10.0"
description = "Complete AI agent framework with MCP support, environments, reasoning strategies, objectives, memory, and built-in tools"
authors = [
    {name = "Marcos", email = "marcosf63@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["ai", "agent", "react", "llm", "openai", "framework"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "duckduckgo-search>=4.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
mcp = [
    "mcp>=1.0.0",
]
anthropic = [
    "anthropic>=0.18.0",
]
google = [
    "google-generativeai>=0.3.0",
]
all-providers = [
    "anthropic>=0.18.0",
    "google-generativeai>=0.3.0",
]
search = [
    "duckduckgo-search>=4.0.0",
]
computation = [
    # No extra dependencies - uses stdlib
]
filesystem = [
    # No extra dependencies - uses stdlib
]
all-tools = [
    "duckduckgo-search>=4.0.0",
]
# Chat memory (conversation history)
chat-sqlite = [
    # SQLite is stdlib - no dependencies needed
]
chat-postgres = [
    "psycopg2-binary>=2.9.0",
]
all-chat = [
    "psycopg2-binary>=2.9.0",
]
# Knowledge memory (RAG / semantic search)
knowledge-chroma = [
    "chromadb>=0.4.0",
]
knowledge-faiss = [
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
]
all-knowledge = [
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
]
# Legacy memory (backward compatibility)
memory-chroma = [
    "chromadb>=0.4.0",
]
memory-faiss = [
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
]
all-memory = [
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
    "psycopg2-binary>=2.9.0",
]
all = [
    "anthropic>=0.18.0",
    "google-generativeai>=0.3.0",
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
    "psycopg2-binary>=2.9.0",
    "mcp>=1.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.urls]
Homepage = "https://marcosf63.github.io/react-agent-framework/"
Documentation = "https://marcosf63.github.io/react-agent-framework/"
Repository = "https://github.com/marcosf63/react-agent-framework"
Issues = "https://github.com/marcosf63/react-agent-framework/issues"

[project.scripts]
react-agent = "react_agent_framework.cli.app:main"

[tool.setuptools.packages.find]
include = ["react_agent_framework*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
