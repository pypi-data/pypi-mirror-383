name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install cibuildwheel
      run: python -m pip install --upgrade pip cibuildwheel

    - name: Preinstall maturin for non-isolated build
      run: python -m pip install maturin

    - name: Set up QEMU (for cross-arch Linux builds)
      if: startsWith(matrix.os, 'ubuntu')
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Build wheels
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: pp* *-musllinux*
        CIBW_TEST_COMMAND: python -c "import hl7conv2; from hl7conv2 import Hl7Json, JsonHl7"
        CIBW_ARCHS_LINUX: x86_64 aarch64
        CIBW_ARCHS_MACOS: auto
        CIBW_BUILD_FRONTEND: pip
        CIBW_BUILD_FRONTEND_ARGS: --no-build-isolation
        CIBW_BEFORE_BUILD_LINUX: >-
          python -m pip install -U maturin[patchelf]
          && curl https://sh.rustup.rs -sSf | sh -s -- -y
          && . "$HOME/.cargo/env"
          && rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu
        CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.12
        CIBW_MACOSX_DEPLOYMENT_TARGET: 10.12
        CIBW_BEFORE_BUILD_MACOS: python -m pip install -U maturin
        CIBW_BEFORE_BUILD_WINDOWS: python -m pip install -U maturin
      run: python -m cibuildwheel --output-dir wheelhouse

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl

  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build
      run: python -m pip install --upgrade build

    - name: Build sdist
      run: python -m build --sdist --outdir dist

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build_wheels, sdist]
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist

    - name: Download sdist
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist
