# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MEDCoupling
else:
    import _MEDCoupling

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_SwigPyIterator

    def value(self):
        return _MEDCoupling.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MEDCoupling.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MEDCoupling.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MEDCoupling.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MEDCoupling.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MEDCoupling.SwigPyIterator_copy(self)

    def next(self):
        return _MEDCoupling.SwigPyIterator_next(self)

    def __next__(self):
        return _MEDCoupling.SwigPyIterator___next__(self)

    def previous(self):
        return _MEDCoupling.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MEDCoupling.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MEDCoupling.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MEDCoupling.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MEDCoupling.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MEDCoupling.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MEDCoupling.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MEDCoupling.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MEDCoupling:
_MEDCoupling.SwigPyIterator_swigregister(SwigPyIterator)
class dvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MEDCoupling.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MEDCoupling.dvec___nonzero__(self)

    def __bool__(self):
        return _MEDCoupling.dvec___bool__(self)

    def __len__(self):
        return _MEDCoupling.dvec___len__(self)

    def __getslice__(self, i, j):
        return _MEDCoupling.dvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MEDCoupling.dvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MEDCoupling.dvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MEDCoupling.dvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MEDCoupling.dvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MEDCoupling.dvec___setitem__(self, *args)

    def pop(self):
        return _MEDCoupling.dvec_pop(self)

    def append(self, x):
        return _MEDCoupling.dvec_append(self, x)

    def empty(self):
        return _MEDCoupling.dvec_empty(self)

    def size(self):
        return _MEDCoupling.dvec_size(self)

    def swap(self, v):
        return _MEDCoupling.dvec_swap(self, v)

    def begin(self):
        return _MEDCoupling.dvec_begin(self)

    def end(self):
        return _MEDCoupling.dvec_end(self)

    def rbegin(self):
        return _MEDCoupling.dvec_rbegin(self)

    def rend(self):
        return _MEDCoupling.dvec_rend(self)

    def clear(self):
        return _MEDCoupling.dvec_clear(self)

    def get_allocator(self):
        return _MEDCoupling.dvec_get_allocator(self)

    def pop_back(self):
        return _MEDCoupling.dvec_pop_back(self)

    def erase(self, *args):
        return _MEDCoupling.dvec_erase(self, *args)

    def __init__(self, *args):
        _MEDCoupling.dvec_swiginit(self, _MEDCoupling.new_dvec(*args))

    def push_back(self, x):
        return _MEDCoupling.dvec_push_back(self, x)

    def front(self):
        return _MEDCoupling.dvec_front(self)

    def back(self):
        return _MEDCoupling.dvec_back(self)

    def assign(self, n, x):
        return _MEDCoupling.dvec_assign(self, n, x)

    def resize(self, *args):
        return _MEDCoupling.dvec_resize(self, *args)

    def insert(self, *args):
        return _MEDCoupling.dvec_insert(self, *args)

    def reserve(self, n):
        return _MEDCoupling.dvec_reserve(self, n)

    def capacity(self):
        return _MEDCoupling.dvec_capacity(self)
    __swig_destroy__ = _MEDCoupling.delete_dvec

# Register dvec in _MEDCoupling:
_MEDCoupling.dvec_swigregister(dvec)
class svec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MEDCoupling.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MEDCoupling.svec___nonzero__(self)

    def __bool__(self):
        return _MEDCoupling.svec___bool__(self)

    def __len__(self):
        return _MEDCoupling.svec___len__(self)

    def __getslice__(self, i, j):
        return _MEDCoupling.svec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MEDCoupling.svec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MEDCoupling.svec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MEDCoupling.svec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MEDCoupling.svec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MEDCoupling.svec___setitem__(self, *args)

    def pop(self):
        return _MEDCoupling.svec_pop(self)

    def append(self, x):
        return _MEDCoupling.svec_append(self, x)

    def empty(self):
        return _MEDCoupling.svec_empty(self)

    def size(self):
        return _MEDCoupling.svec_size(self)

    def swap(self, v):
        return _MEDCoupling.svec_swap(self, v)

    def begin(self):
        return _MEDCoupling.svec_begin(self)

    def end(self):
        return _MEDCoupling.svec_end(self)

    def rbegin(self):
        return _MEDCoupling.svec_rbegin(self)

    def rend(self):
        return _MEDCoupling.svec_rend(self)

    def clear(self):
        return _MEDCoupling.svec_clear(self)

    def get_allocator(self):
        return _MEDCoupling.svec_get_allocator(self)

    def pop_back(self):
        return _MEDCoupling.svec_pop_back(self)

    def erase(self, *args):
        return _MEDCoupling.svec_erase(self, *args)

    def __init__(self, *args):
        _MEDCoupling.svec_swiginit(self, _MEDCoupling.new_svec(*args))

    def push_back(self, x):
        return _MEDCoupling.svec_push_back(self, x)

    def front(self):
        return _MEDCoupling.svec_front(self)

    def back(self):
        return _MEDCoupling.svec_back(self)

    def assign(self, n, x):
        return _MEDCoupling.svec_assign(self, n, x)

    def resize(self, *args):
        return _MEDCoupling.svec_resize(self, *args)

    def insert(self, *args):
        return _MEDCoupling.svec_insert(self, *args)

    def reserve(self, n):
        return _MEDCoupling.svec_reserve(self, n)

    def capacity(self):
        return _MEDCoupling.svec_capacity(self)
    __swig_destroy__ = _MEDCoupling.delete_svec

# Register svec in _MEDCoupling:
_MEDCoupling.svec_swigregister(svec)
class ivec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MEDCoupling.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MEDCoupling.ivec___nonzero__(self)

    def __bool__(self):
        return _MEDCoupling.ivec___bool__(self)

    def __len__(self):
        return _MEDCoupling.ivec___len__(self)

    def __getslice__(self, i, j):
        return _MEDCoupling.ivec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MEDCoupling.ivec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MEDCoupling.ivec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MEDCoupling.ivec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MEDCoupling.ivec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MEDCoupling.ivec___setitem__(self, *args)

    def pop(self):
        return _MEDCoupling.ivec_pop(self)

    def append(self, x):
        return _MEDCoupling.ivec_append(self, x)

    def empty(self):
        return _MEDCoupling.ivec_empty(self)

    def size(self):
        return _MEDCoupling.ivec_size(self)

    def swap(self, v):
        return _MEDCoupling.ivec_swap(self, v)

    def begin(self):
        return _MEDCoupling.ivec_begin(self)

    def end(self):
        return _MEDCoupling.ivec_end(self)

    def rbegin(self):
        return _MEDCoupling.ivec_rbegin(self)

    def rend(self):
        return _MEDCoupling.ivec_rend(self)

    def clear(self):
        return _MEDCoupling.ivec_clear(self)

    def get_allocator(self):
        return _MEDCoupling.ivec_get_allocator(self)

    def pop_back(self):
        return _MEDCoupling.ivec_pop_back(self)

    def erase(self, *args):
        return _MEDCoupling.ivec_erase(self, *args)

    def __init__(self, *args):
        _MEDCoupling.ivec_swiginit(self, _MEDCoupling.new_ivec(*args))

    def push_back(self, x):
        return _MEDCoupling.ivec_push_back(self, x)

    def front(self):
        return _MEDCoupling.ivec_front(self)

    def back(self):
        return _MEDCoupling.ivec_back(self)

    def assign(self, n, x):
        return _MEDCoupling.ivec_assign(self, n, x)

    def resize(self, *args):
        return _MEDCoupling.ivec_resize(self, *args)

    def insert(self, *args):
        return _MEDCoupling.ivec_insert(self, *args)

    def reserve(self, n):
        return _MEDCoupling.ivec_reserve(self, n)

    def capacity(self):
        return _MEDCoupling.ivec_capacity(self)
    __swig_destroy__ = _MEDCoupling.delete_ivec

# Register ivec in _MEDCoupling:
_MEDCoupling.ivec_swigregister(ivec)
class i32vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MEDCoupling.i32vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MEDCoupling.i32vec___nonzero__(self)

    def __bool__(self):
        return _MEDCoupling.i32vec___bool__(self)

    def __len__(self):
        return _MEDCoupling.i32vec___len__(self)

    def __getslice__(self, i, j):
        return _MEDCoupling.i32vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MEDCoupling.i32vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MEDCoupling.i32vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MEDCoupling.i32vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MEDCoupling.i32vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MEDCoupling.i32vec___setitem__(self, *args)

    def pop(self):
        return _MEDCoupling.i32vec_pop(self)

    def append(self, x):
        return _MEDCoupling.i32vec_append(self, x)

    def empty(self):
        return _MEDCoupling.i32vec_empty(self)

    def size(self):
        return _MEDCoupling.i32vec_size(self)

    def swap(self, v):
        return _MEDCoupling.i32vec_swap(self, v)

    def begin(self):
        return _MEDCoupling.i32vec_begin(self)

    def end(self):
        return _MEDCoupling.i32vec_end(self)

    def rbegin(self):
        return _MEDCoupling.i32vec_rbegin(self)

    def rend(self):
        return _MEDCoupling.i32vec_rend(self)

    def clear(self):
        return _MEDCoupling.i32vec_clear(self)

    def get_allocator(self):
        return _MEDCoupling.i32vec_get_allocator(self)

    def pop_back(self):
        return _MEDCoupling.i32vec_pop_back(self)

    def erase(self, *args):
        return _MEDCoupling.i32vec_erase(self, *args)

    def __init__(self, *args):
        _MEDCoupling.i32vec_swiginit(self, _MEDCoupling.new_i32vec(*args))

    def push_back(self, x):
        return _MEDCoupling.i32vec_push_back(self, x)

    def front(self):
        return _MEDCoupling.i32vec_front(self)

    def back(self):
        return _MEDCoupling.i32vec_back(self)

    def assign(self, n, x):
        return _MEDCoupling.i32vec_assign(self, n, x)

    def resize(self, *args):
        return _MEDCoupling.i32vec_resize(self, *args)

    def insert(self, *args):
        return _MEDCoupling.i32vec_insert(self, *args)

    def reserve(self, n):
        return _MEDCoupling.i32vec_reserve(self, n)

    def capacity(self):
        return _MEDCoupling.i32vec_capacity(self)
    __swig_destroy__ = _MEDCoupling.delete_i32vec

# Register i32vec in _MEDCoupling:
_MEDCoupling.i32vec_swigregister(i32vec)
class InterpKernelException(Exception):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        r"""
        __init__(InterpKernelException self, char const * what) -> InterpKernelException
        1
        """
        _MEDCoupling.InterpKernelException_swiginit(self, _MEDCoupling.new_InterpKernelException(what))
    __swig_destroy__ = _MEDCoupling.delete_InterpKernelException

    def what(self):
        r"""
        what(InterpKernelException self) -> char const *
        1
        """
        return _MEDCoupling.InterpKernelException_what(self)

    def __str__(self):
        r"""
        __str__(InterpKernelException self) -> std::string
        1
        """
        return _MEDCoupling.InterpKernelException___str__(self)

# Register InterpKernelException in _MEDCoupling:
_MEDCoupling.InterpKernelException_swigregister(InterpKernelException)
class TimeLabel(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def declareAsNew(self):
        r"""
        declareAsNew(TimeLabel self)
        1
        """
        return _MEDCoupling.TimeLabel_declareAsNew(self)

    def updateTime(self):
        r"""
        updateTime(TimeLabel self)
        1
        """
        return _MEDCoupling.TimeLabel_updateTime(self)

    def getTimeOfThis(self):
        r"""
        getTimeOfThis(TimeLabel self) -> unsigned int
        1
        """
        return _MEDCoupling.TimeLabel_getTimeOfThis(self)

# Register TimeLabel in _MEDCoupling:
_MEDCoupling.TimeLabel_swigregister(TimeLabel)
DeallocType_C_DEALLOC = _MEDCoupling.DeallocType_C_DEALLOC
r"""1"""
DeallocType_CPP_DEALLOC = _MEDCoupling.DeallocType_CPP_DEALLOC
r"""1"""

def MEDCouplingVersionStr():
    r"""
    MEDCouplingVersionStr() -> char const *
    1
    """
    return _MEDCoupling.MEDCouplingVersionStr()

def MEDCouplingVersion():
    r"""
    MEDCouplingVersion() -> int
    1
    """
    return _MEDCoupling.MEDCouplingVersion()

def MEDCouplingSizeOfVoidStar():
    r"""
    MEDCouplingSizeOfVoidStar() -> int
    1
    """
    return _MEDCoupling.MEDCouplingSizeOfVoidStar()

def MEDCouplingSizeOfIDs():
    r"""
    MEDCouplingSizeOfIDs() -> int
    1
    """
    return _MEDCoupling.MEDCouplingSizeOfIDs()

def MEDCouplingByteOrder():
    r"""
    MEDCouplingByteOrder() -> bool
    1
    """
    return _MEDCoupling.MEDCouplingByteOrder()

def MEDCouplingByteOrderStr():
    r"""
    MEDCouplingByteOrderStr() -> char const *
    1
    """
    return _MEDCoupling.MEDCouplingByteOrderStr()

def IsCXX11Compiled():
    r"""
    IsCXX11Compiled() -> bool
    1
    """
    return _MEDCoupling.IsCXX11Compiled()
class BigMemoryObject(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHeapMemorySize(self):
        r"""
        getHeapMemorySize(BigMemoryObject self) -> std::size_t
        1
        """
        return _MEDCoupling.BigMemoryObject_getHeapMemorySize(self)

    def getHeapMemorySizeStr(self):
        r"""
        getHeapMemorySizeStr(BigMemoryObject self) -> std::string
        1
        """
        return _MEDCoupling.BigMemoryObject_getHeapMemorySizeStr(self)

    def isObjectInTheProgeny(self, obj):
        r"""
        isObjectInTheProgeny(BigMemoryObject self, BigMemoryObject obj) -> bool
        1
        """
        return _MEDCoupling.BigMemoryObject_isObjectInTheProgeny(self, obj)

    def getHeapMemorySizeWithoutChildren(self):
        r"""
        getHeapMemorySizeWithoutChildren(BigMemoryObject self) -> std::size_t
        1
        """
        return _MEDCoupling.BigMemoryObject_getHeapMemorySizeWithoutChildren(self)

    def debugHeapMemorySize(self):
        r"""
        debugHeapMemorySize(BigMemoryObject self) -> std::string
        1
        """
        return _MEDCoupling.BigMemoryObject_debugHeapMemorySize(self)

    def getClassName(self):
        r"""
        getClassName(BigMemoryObject self) -> std::string
        1
        """
        return _MEDCoupling.BigMemoryObject_getClassName(self)
    __swig_destroy__ = _MEDCoupling.delete_BigMemoryObject

    def getDirectChildren(self):
        r"""
        getDirectChildren(BigMemoryObject self) -> PyObject *
        1
        """
        return _MEDCoupling.BigMemoryObject_getDirectChildren(self)

    def getAllTheProgeny(self):
        r"""
        getAllTheProgeny(BigMemoryObject self) -> PyObject *
        1
        """
        return _MEDCoupling.BigMemoryObject_getAllTheProgeny(self)

    @staticmethod
    def GetHeapMemorySizeOfObjs(objs):
        r"""
        GetHeapMemorySizeOfObjs(PyObject * objs) -> std::size_t
        1
        """
        return _MEDCoupling.BigMemoryObject_GetHeapMemorySizeOfObjs(objs)

# Register BigMemoryObject in _MEDCoupling:
_MEDCoupling.BigMemoryObject_swigregister(BigMemoryObject)
class RefCountObjectOnly(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def decrRef(self):
        r"""
        decrRef(RefCountObjectOnly self) -> bool
        1
        """
        return _MEDCoupling.RefCountObjectOnly_decrRef(self)

    def incrRef(self):
        r"""
        incrRef(RefCountObjectOnly self)
        1
        """
        return _MEDCoupling.RefCountObjectOnly_incrRef(self)

    def getRCValue(self):
        r"""
        getRCValue(RefCountObjectOnly self) -> int
        1
        """
        return _MEDCoupling.RefCountObjectOnly_getRCValue(self)

# Register RefCountObjectOnly in _MEDCoupling:
_MEDCoupling.RefCountObjectOnly_swigregister(RefCountObjectOnly)
class RefCountObject(RefCountObjectOnly, BigMemoryObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHiddenCppPointer(self):
        r"""
        getHiddenCppPointer(RefCountObject self) -> std::string
        1
        """
        return _MEDCoupling.RefCountObject_getHiddenCppPointer(self)

    def getHiddenCppPointerAsLongLong(self):
        r"""
        getHiddenCppPointerAsLongLong(RefCountObject self) -> long long
        1
        """
        return _MEDCoupling.RefCountObject_getHiddenCppPointerAsLongLong(self)

# Register RefCountObject in _MEDCoupling:
_MEDCoupling.RefCountObject_swigregister(RefCountObject)
class GlobalDict(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetInstance():
        r"""
        GetInstance() -> GlobalDict
        1
        """
        return _MEDCoupling.GlobalDict_GetInstance()

    def hasKey(self, key):
        r"""
        hasKey(GlobalDict self, std::string const & key) -> bool
        1
        """
        return _MEDCoupling.GlobalDict_hasKey(self, key)

    def value(self, key):
        r"""
        value(GlobalDict self, std::string const & key) -> std::string
        1
        """
        return _MEDCoupling.GlobalDict_value(self, key)

    def keys(self):
        r"""
        keys(GlobalDict self) -> svec
        1
        """
        return _MEDCoupling.GlobalDict_keys(self)

    def erase(self, key):
        r"""
        erase(GlobalDict self, std::string const & key)
        1
        """
        return _MEDCoupling.GlobalDict_erase(self, key)

    def clear(self):
        r"""
        clear(GlobalDict self)
        1
        """
        return _MEDCoupling.GlobalDict_clear(self)

    def setKeyValue(self, key, value):
        r"""
        setKeyValue(GlobalDict self, std::string const & key, std::string const & value)
        1
        """
        return _MEDCoupling.GlobalDict_setKeyValue(self, key, value)

    def setKeyValueForce(self, key, value):
        r"""
        setKeyValueForce(GlobalDict self, std::string const & key, std::string const & value)
        1
        """
        return _MEDCoupling.GlobalDict_setKeyValueForce(self, key, value)

    def __str__(self):
        r"""
        __str__(GlobalDict self) -> std::string
        1
        """
        return _MEDCoupling.GlobalDict___str__(self)
    __swig_destroy__ = _MEDCoupling.delete_GlobalDict

# Register GlobalDict in _MEDCoupling:
_MEDCoupling.GlobalDict_swigregister(GlobalDict)

def MEDCouplingVersionMajMinRel():
    r"""
    MEDCouplingVersionMajMinRel() -> PyObject *
    1
    """
    return _MEDCoupling.MEDCouplingVersionMajMinRel()

def MEDCouplingHasNumPyBindings():
    r"""
    MEDCouplingHasNumPyBindings() -> bool
    1
    """
    return _MEDCoupling.MEDCouplingHasNumPyBindings()

def MEDCouplingHasSciPyBindings():
    r"""
    MEDCouplingHasSciPyBindings() -> bool
    1
    """
    return _MEDCoupling.MEDCouplingHasSciPyBindings()

def MEDCouplingUse64BitIDs():
    r"""
    MEDCouplingUse64BitIDs() -> bool
    1
    """
    return _MEDCoupling.MEDCouplingUse64BitIDs()

def MEDCouplingCompletionScript():
    r"""
    MEDCouplingCompletionScript() -> std::string
    1
    """
    return _MEDCoupling.MEDCouplingCompletionScript()

def INTERPKERNELExceptionReduceFunct(a,b):
    ret=InterpKernelException.__new__(a)
    ret.__init__(*b)
    return ret
def INTERPKERNELExceptionReduce(self):
    return INTERPKERNELExceptionReduceFunct,(InterpKernelException,(self.what(),))

AX_CART = _MEDCoupling.AX_CART
r"""1"""
AX_CYL = _MEDCoupling.AX_CYL
r"""1"""
AX_SPHER = _MEDCoupling.AX_SPHER
r"""1"""
class MapII(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""
        New() -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCoupling.MapII_New()
    __swig_destroy__ = _MEDCoupling.delete_MapII

# Register MapII in _MEDCoupling:
_MEDCoupling.MapII_swigregister(MapII)
class PartDefinition(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        r"""
        New(int start, int stop, int step) -> PartDefinition
        New(DataArrayInt64 listOfIds) -> PartDefinition
        1
        """
        return _MEDCoupling.PartDefinition_New(*args)

    def toDAI(self):
        r"""
        toDAI(PartDefinition self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.PartDefinition_toDAI(self)

    def getNumberOfElems(self):
        r"""
        getNumberOfElems(PartDefinition self) -> int
        1
        """
        return _MEDCoupling.PartDefinition_getNumberOfElems(self)

    def getRepr(self):
        r"""
        getRepr(PartDefinition self) -> std::string
        1
        """
        return _MEDCoupling.PartDefinition_getRepr(self)

    def composeWith(self, other):
        r"""
        composeWith(PartDefinition self, PartDefinition other) -> PartDefinition
        1
        """
        return _MEDCoupling.PartDefinition_composeWith(self, other)

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(PartDefinition self)
        1
        """
        return _MEDCoupling.PartDefinition_checkConsistencyLight(self)

    def tryToSimplify(self):
        r"""
        tryToSimplify(PartDefinition self) -> PartDefinition
        1
        """
        return _MEDCoupling.PartDefinition_tryToSimplify(self)

    def __add__(self, other):
        r"""
        __add__(PartDefinition self, PartDefinition other) -> PartDefinition
        1
        """
        return _MEDCoupling.PartDefinition___add__(self, other)

    def isEqual(self, other):
        r"""
        isEqual(PartDefinition self, PartDefinition other) -> PyObject *
        1
        """
        return _MEDCoupling.PartDefinition_isEqual(self, other)

    def deepCopy(self):
        r"""
        deepCopy(PartDefinition self) -> PyObject *
        1
        """
        return _MEDCoupling.PartDefinition_deepCopy(self)
    __swig_destroy__ = _MEDCoupling.delete_PartDefinition

# Register PartDefinition in _MEDCoupling:
_MEDCoupling.PartDefinition_swigregister(PartDefinition)
class DataArrayPartDefinition(PartDefinition):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(listOfIds):
        r"""
        New(DataArrayInt64 listOfIds) -> DataArrayPartDefinition
        1
        """
        return _MEDCoupling.DataArrayPartDefinition_New(listOfIds)

    def __init__(self, listOfIds):
        r"""
        __init__(DataArrayPartDefinition self, DataArrayInt64 listOfIds) -> DataArrayPartDefinition
        1
        """
        _MEDCoupling.DataArrayPartDefinition_swiginit(self, _MEDCoupling.new_DataArrayPartDefinition(listOfIds))

    def __str__(self):
        r"""
        __str__(DataArrayPartDefinition self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayPartDefinition___str__(self)

    def __repr__(self):
        r"""
        __repr__(DataArrayPartDefinition self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayPartDefinition___repr__(self)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayPartDefinition

# Register DataArrayPartDefinition in _MEDCoupling:
_MEDCoupling.DataArrayPartDefinition_swigregister(DataArrayPartDefinition)
class SlicePartDefinition(PartDefinition):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(start, stop, step):
        r"""
        New(int start, int stop, int step) -> SlicePartDefinition
        1
        """
        return _MEDCoupling.SlicePartDefinition_New(start, stop, step)

    def getEffectiveStop(self):
        r"""
        getEffectiveStop(SlicePartDefinition self) -> int
        1
        """
        return _MEDCoupling.SlicePartDefinition_getEffectiveStop(self)

    def __init__(self, start, stop, step):
        r"""
        __init__(SlicePartDefinition self, mcIdType start, mcIdType stop, mcIdType step) -> SlicePartDefinition
        1
        """
        _MEDCoupling.SlicePartDefinition_swiginit(self, _MEDCoupling.new_SlicePartDefinition(start, stop, step))

    def getSlice(self):
        r"""
        getSlice(SlicePartDefinition self) -> PyObject *
        1
        """
        return _MEDCoupling.SlicePartDefinition_getSlice(self)

    def __str__(self):
        r"""
        __str__(SlicePartDefinition self) -> std::string
        1
        """
        return _MEDCoupling.SlicePartDefinition___str__(self)

    def __repr__(self):
        r"""
        __repr__(SlicePartDefinition self) -> std::string
        1
        """
        return _MEDCoupling.SlicePartDefinition___repr__(self)
    __swig_destroy__ = _MEDCoupling.delete_SlicePartDefinition

# Register SlicePartDefinition in _MEDCoupling:
_MEDCoupling.SlicePartDefinition_swigregister(SlicePartDefinition)
class DataArray(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name):
        r"""
        setName(DataArray self, std::string const & name)
        1
        """
        return _MEDCoupling.DataArray_setName(self, name)

    def copyStringInfoFrom(self, other):
        r"""
        copyStringInfoFrom(DataArray self, DataArray other)
        1
        """
        return _MEDCoupling.DataArray_copyStringInfoFrom(self, other)

    def areInfoEqualsIfNotWhy(self, other, reason):
        r"""
        areInfoEqualsIfNotWhy(DataArray self, DataArray other, std::string & reason) -> bool
        1
        """
        return _MEDCoupling.DataArray_areInfoEqualsIfNotWhy(self, other, reason)

    def areInfoEquals(self, other):
        r"""
        areInfoEquals(DataArray self, DataArray other) -> bool
        1
        """
        return _MEDCoupling.DataArray_areInfoEquals(self, other)

    def cppRepr(self, varName):
        r"""
        cppRepr(DataArray self, std::string const & varName) -> std::string
        1
        """
        return _MEDCoupling.DataArray_cppRepr(self, varName)

    def getName(self):
        r"""
        getName(DataArray self) -> std::string
        1
        """
        return _MEDCoupling.DataArray_getName(self)

    def setInfoOnComponents(self, info):
        r"""
        setInfoOnComponents(DataArray self, svec info)
        1
        """
        return _MEDCoupling.DataArray_setInfoOnComponents(self, info)

    def setInfoAndChangeNbOfCompo(self, info):
        r"""
        setInfoAndChangeNbOfCompo(DataArray self, svec info)
        1
        """
        return _MEDCoupling.DataArray_setInfoAndChangeNbOfCompo(self, info)

    def getVarsOnComponent(self):
        r"""
        getVarsOnComponent(DataArray self) -> svec
        1
        """
        return _MEDCoupling.DataArray_getVarsOnComponent(self)

    def getUnitsOnComponent(self):
        r"""
        getUnitsOnComponent(DataArray self) -> svec
        1
        """
        return _MEDCoupling.DataArray_getUnitsOnComponent(self)

    def getInfoOnComponent(self, i):
        r"""
        getInfoOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCoupling.DataArray_getInfoOnComponent(self, i)

    def getVarOnComponent(self, i):
        r"""
        getVarOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCoupling.DataArray_getVarOnComponent(self, i)

    def getUnitOnComponent(self, i):
        r"""
        getUnitOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCoupling.DataArray_getUnitOnComponent(self, i)

    def setInfoOnComponent(self, i, info):
        r"""
        setInfoOnComponent(DataArray self, int i, std::string const & info)
        1
        """
        return _MEDCoupling.DataArray_setInfoOnComponent(self, i, info)

    def getNumberOfComponents(self):
        r"""
        getNumberOfComponents(DataArray self) -> int
        1
        """
        return _MEDCoupling.DataArray_getNumberOfComponents(self)

    def alloc(self, nbOfTuple, nbOfCompo=1):
        r"""
        alloc(DataArray self, int nbOfTuple, int nbOfCompo=1)
        1
        """
        return _MEDCoupling.DataArray_alloc(self, nbOfTuple, nbOfCompo)

    def reAlloc(self, nbOfTuples):
        r"""
        reAlloc(DataArray self, int nbOfTuples)
        1
        """
        return _MEDCoupling.DataArray_reAlloc(self, nbOfTuples)

    def isAllocated(self):
        r"""
        isAllocated(DataArray self) -> bool
        1
        """
        return _MEDCoupling.DataArray_isAllocated(self)

    def checkAllocated(self):
        r"""
        checkAllocated(DataArray self)
        1
        """
        return _MEDCoupling.DataArray_checkAllocated(self)

    def desallocate(self):
        r"""
        desallocate(DataArray self)
        1
        """
        return _MEDCoupling.DataArray_desallocate(self)

    def getNumberOfTuples(self):
        r"""
        getNumberOfTuples(DataArray self) -> int
        1
        """
        return _MEDCoupling.DataArray_getNumberOfTuples(self)

    def getNbOfElems(self):
        r"""
        getNbOfElems(DataArray self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArray_getNbOfElems(self)

    def getNbOfElemAllocated(self):
        r"""
        getNbOfElemAllocated(DataArray self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArray_getNbOfElemAllocated(self)

    def deepCopy(self):
        r"""
        deepCopy(DataArray self) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_deepCopy(self)

    def copySorted(self):
        r"""
        copySorted(DataArray self) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_copySorted(self)

    def buildNewEmptyInstance(self):
        r"""
        buildNewEmptyInstance(DataArray self) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_buildNewEmptyInstance(self)

    def selectByTupleIdSafeSlice(self, bg, end2, step):
        r"""
        selectByTupleIdSafeSlice(DataArray self, int bg, int end2, int step) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_selectByTupleIdSafeSlice(self, bg, end2, step)

    def rearrange(self, newNbOfCompo):
        r"""
        rearrange(DataArray self, int newNbOfCompo)
        1
        """
        return _MEDCoupling.DataArray_rearrange(self, newNbOfCompo)

    def circularPermutation(self, nbOfShift=1):
        r"""
        circularPermutation(DataArray self, int nbOfShift=1)
        1
        """
        return _MEDCoupling.DataArray_circularPermutation(self, nbOfShift)

    def circularPermutationPerTuple(self, nbOfShift=1):
        r"""
        circularPermutationPerTuple(DataArray self, int nbOfShift=1)
        1
        """
        return _MEDCoupling.DataArray_circularPermutationPerTuple(self, nbOfShift)

    def reversePerTuple(self):
        r"""
        reversePerTuple(DataArray self)
        1
        """
        return _MEDCoupling.DataArray_reversePerTuple(self)

    def checkNbOfTuples(self, nbOfTuples, msg):
        r"""
        checkNbOfTuples(DataArray self, int nbOfTuples, std::string const & msg)
        1
        """
        return _MEDCoupling.DataArray_checkNbOfTuples(self, nbOfTuples, msg)

    def checkNbOfComps(self, nbOfCompo, msg):
        r"""
        checkNbOfComps(DataArray self, int nbOfCompo, std::string const & msg)
        1
        """
        return _MEDCoupling.DataArray_checkNbOfComps(self, nbOfCompo, msg)

    def checkNbOfTuplesAndComp(self, *args):
        r"""
        checkNbOfTuplesAndComp(DataArray self, DataArray other, std::string const & msg)
        checkNbOfTuplesAndComp(DataArray self, int nbOfTuples, int nbOfCompo, std::string const & msg)
        1
        """
        return _MEDCoupling.DataArray_checkNbOfTuplesAndComp(self, *args)

    def checkNbOfElems(self, nbOfElems, msg):
        r"""
        checkNbOfElems(DataArray self, mcIdType nbOfElems, std::string const & msg)
        1
        """
        return _MEDCoupling.DataArray_checkNbOfElems(self, nbOfElems, msg)

    @staticmethod
    def GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step):
        r"""
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int
        1
        """
        return _MEDCoupling.DataArray_GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step)

    @staticmethod
    def GetVarNameFromInfo(info):
        r"""
        GetVarNameFromInfo(std::string const & info) -> std::string
        1
        """
        return _MEDCoupling.DataArray_GetVarNameFromInfo(info)

    @staticmethod
    def GetUnitFromInfo(info):
        r"""
        GetUnitFromInfo(std::string const & info) -> std::string
        1
        """
        return _MEDCoupling.DataArray_GetUnitFromInfo(info)

    @staticmethod
    def BuildInfoFromVarAndUnit(var, unit):
        r"""
        BuildInfoFromVarAndUnit(std::string const & var, std::string const & unit) -> std::string
        1
        """
        return _MEDCoupling.DataArray_BuildInfoFromVarAndUnit(var, unit)

    @staticmethod
    def GetAxisTypeRepr(at):
        r"""
        GetAxisTypeRepr(MEDCoupling::MEDCouplingAxisType at) -> std::string
        1
        """
        return _MEDCoupling.DataArray_GetAxisTypeRepr(at)

    def updateTime(self):
        r"""
        updateTime(DataArray self)
        1
        """
        return _MEDCoupling.DataArray_updateTime(self)

    def getInfoOnComponents(self):
        r"""
        getInfoOnComponents(DataArray self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArray_getInfoOnComponents(self)

    def copyPartOfStringInfoFrom(self, *args):
        r"""
        copyPartOfStringInfoFrom(DataArray self, DataArray other, std::vector< std::size_t,std::allocator< std::size_t > > const & compoIds)
        copyPartOfStringInfoFrom(DataArray self, DataArray other, PyObject * li)
        1
        """
        return _MEDCoupling.DataArray_copyPartOfStringInfoFrom(self, *args)

    def copyPartOfStringInfoFrom2(self, *args):
        r"""
        copyPartOfStringInfoFrom2(DataArray self, std::vector< std::size_t,std::allocator< std::size_t > > const & compoIds, DataArray other)
        copyPartOfStringInfoFrom2(DataArray self, PyObject * li, DataArray other)
        1
        """
        return _MEDCoupling.DataArray_copyPartOfStringInfoFrom2(self, *args)

    def renumberInPlace(self, li):
        r"""
        renumberInPlace(DataArray self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArray_renumberInPlace(self, li)

    def renumberInPlaceR(self, li):
        r"""
        renumberInPlaceR(DataArray self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArray_renumberInPlaceR(self, li)

    def setContigPartOfSelectedValues(self, tupleIdStart, aBase, tuplesSelec):
        r"""
        setContigPartOfSelectedValues(DataArray self, mcIdType tupleIdStart, PyObject * aBase, PyObject * tuplesSelec)
        1
        """
        return _MEDCoupling.DataArray_setContigPartOfSelectedValues(self, tupleIdStart, aBase, tuplesSelec)

    def setContigPartOfSelectedValuesSlice(self, tupleIdStart, aBase, bg, end2, step):
        r"""
        setContigPartOfSelectedValuesSlice(DataArray self, mcIdType tupleIdStart, PyObject * aBase, mcIdType bg, mcIdType end2, mcIdType step)
        1
        """
        return _MEDCoupling.DataArray_setContigPartOfSelectedValuesSlice(self, tupleIdStart, aBase, bg, end2, step)

    def selectByTupleRanges(self, li):
        r"""
        selectByTupleRanges(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_selectByTupleRanges(self, li)

    def selectByTupleId(self, li):
        r"""
        selectByTupleId(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_selectByTupleId(self, li)

    def selectByTupleIdSafe(self, li):
        r"""
        selectByTupleIdSafe(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_selectByTupleIdSafe(self, li)

    def keepSelectedComponents(self, li):
        r"""
        keepSelectedComponents(DataArray self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.DataArray_keepSelectedComponents(self, li)

    @staticmethod
    def GetSlice(slic, sliceId, nbOfSlices):
        r"""
        GetSlice(PyObject * slic, mcIdType sliceId, mcIdType nbOfSlices) -> PyObject *
        1
        """
        return _MEDCoupling.DataArray_GetSlice(slic, sliceId, nbOfSlices)

    def getSlice(self, slic, sliceId, nbOfSlices):
        r"""
        getSlice(DataArray self, PyObject * slic, mcIdType sliceId, mcIdType nbOfSlices) -> PyObject *
        1
        """
        return _MEDCoupling.DataArray_getSlice(self, slic, sliceId, nbOfSlices)

    @staticmethod
    def GetNumberOfItemGivenBES(*args):
        r"""
        GetNumberOfItemGivenBES(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBES(PyObject * slic) -> mcIdType
        1
        """
        return _MEDCoupling.DataArray_GetNumberOfItemGivenBES(*args)

    @staticmethod
    def GetNumberOfItemGivenBESRelative(*args):
        r"""
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBESRelative(PyObject * slic) -> mcIdType
        1
        """
        return _MEDCoupling.DataArray_GetNumberOfItemGivenBESRelative(*args)

    @staticmethod
    def Aggregate(arrs):
        r"""
        Aggregate(PyObject * arrs) -> DataArray
        1
        """
        return _MEDCoupling.DataArray_Aggregate(arrs)

    def getNumberOfItemGivenBES(self, slic):
        r"""
        getNumberOfItemGivenBES(DataArray self, PyObject * slic) -> mcIdType
        1
        """
        return _MEDCoupling.DataArray_getNumberOfItemGivenBES(self, slic)

    def getNumberOfItemGivenBESRelative(self, slic):
        r"""
        getNumberOfItemGivenBESRelative(DataArray self, PyObject * slic) -> mcIdType
        1
        """
        return _MEDCoupling.DataArray_getNumberOfItemGivenBESRelative(self, slic)

    def __getstate__(self):
        r"""
        __getstate__(DataArray self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArray___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(DataArray self, PyObject * inp)
        1
        """
        return _MEDCoupling.DataArray___setstate__(self, inp)
    __swig_destroy__ = _MEDCoupling.delete_DataArray

# Register DataArray in _MEDCoupling:
_MEDCoupling.DataArray_swigregister(DataArray)
class DataArrayFloat(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def fillWithValue(self, val):
        r"""
        fillWithValue(DataArrayFloat self, float val)
        1
        """
        return _MEDCoupling.DataArrayFloat_fillWithValue(self, val)

    def isEqual(self, other, prec):
        r"""
        isEqual(DataArrayFloat self, DataArrayFloat other, float prec) -> bool
        1
        """
        return _MEDCoupling.DataArrayFloat_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other, prec):
        r"""
        isEqualWithoutConsideringStr(DataArrayFloat self, DataArrayFloat other, float prec) -> bool
        1
        """
        return _MEDCoupling.DataArrayFloat_isEqualWithoutConsideringStr(self, other, prec)

    def isUniform(self, val, eps):
        r"""
        isUniform(DataArrayFloat self, float val, float eps) -> bool
        1
        """
        return _MEDCoupling.DataArrayFloat_isUniform(self, val, eps)

    def pushBackSilent(self, val):
        r"""
        pushBackSilent(DataArrayFloat self, float val)
        1
        """
        return _MEDCoupling.DataArrayFloat_pushBackSilent(self, val)

    def iota(self, init=0.):
        r"""
        iota(DataArrayFloat self, float init=0.)
        1
        """
        return _MEDCoupling.DataArrayFloat_iota(self, init)

    def iterator(self):
        r"""
        iterator(DataArrayFloat self) -> DataArrayFloatIterator *
        1
        """
        return _MEDCoupling.DataArrayFloat_iterator(self)

    def convertToDblArr(self):
        r"""
        convertToDblArr(DataArrayFloat self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayFloat_convertToDblArr(self)

    @staticmethod
    def Meld(a1, a2):
        r"""
        Meld(DataArrayFloat a1, DataArrayFloat a2) -> DataArrayFloat
        1
        """
        return _MEDCoupling.DataArrayFloat_Meld(a1, a2)

    @staticmethod
    def LoadForDbg(fileName):
        r"""
        LoadForDbg(std::string const & fileName) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCoupling.DataArrayFloat_LoadForDbg(fileName)

    def writeForDbg(self, fileName):
        r"""
        writeForDbg(DataArrayFloat self, std::string const & fileName)
        1
        """
        return _MEDCoupling.DataArrayFloat_writeForDbg(self, fileName)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayFloat
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        1
        """
        return _MEDCoupling.DataArrayFloat_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayFloat self) -> DataArrayFloat
        __init__(DataArrayFloat self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        1
        """
        _MEDCoupling.DataArrayFloat_swiginit(self, _MEDCoupling.new_DataArrayFloat(*args))

    def __iter__(self):
        r"""
        __iter__(DataArrayFloat self) -> DataArrayFloatIterator *
        1
        """
        return _MEDCoupling.DataArrayFloat___iter__(self)

    def __repr__(self):
        r"""
        __repr__(DataArrayFloat self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayFloat___repr__(self)

    def __str__(self):
        r"""
        __str__(DataArrayFloat self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayFloat___str__(self)

    def __len__(self):
        r"""
        __len__(DataArrayFloat self) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayFloat___len__(self)

    def getValues(self):
        r"""
        getValues(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat_getValues(self)

    def getValuesAsTuple(self):
        r"""
        getValuesAsTuple(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat_getValuesAsTuple(self)

    def isEqualIfNotWhy(self, other, prec):
        r"""
        isEqualIfNotWhy(DataArrayFloat self, DataArrayFloat other, float prec) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat_isEqualIfNotWhy(self, other, prec)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayFloat self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayFloat self, PyObject * obj, PyObject * value) -> DataArrayFloat
        1
        """
        return _MEDCoupling.DataArrayFloat___setitem__(self, obj, value)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat____imul___(self, trueSelf, obj)

    def __rmul__(self, obj):
        r"""
        __rmul__(DataArrayFloat self, PyObject * obj) -> DataArrayFloat
        1
        """
        return _MEDCoupling.DataArrayFloat___rmul__(self, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat____idiv___(self, trueSelf, obj)

    def toNumPyArray(self):
        r"""
        toNumPyArray(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloat_toNumPyArray(self)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayFloat

# Register DataArrayFloat in _MEDCoupling:
_MEDCoupling.DataArrayFloat_swigregister(DataArrayFloat)
class DataArrayFloatIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayFloatIterator self, DataArrayFloat da) -> DataArrayFloatIterator
        1
        """
        _MEDCoupling.DataArrayFloatIterator_swiginit(self, _MEDCoupling.new_DataArrayFloatIterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayFloatIterator

    def next(self):
        r"""
        next(DataArrayFloatIterator self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloatIterator_next(self)

# Register DataArrayFloatIterator in _MEDCoupling:
_MEDCoupling.DataArrayFloatIterator_swigregister(DataArrayFloatIterator)
class DataArrayFloatTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self):
        r"""
        getNumberOfCompo(DataArrayFloatTuple self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArrayFloatTuple_getNumberOfCompo(self)

    def __str__(self):
        r"""
        __str__(DataArrayFloatTuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayFloatTuple___str__(self)

    def __float__(self):
        r"""
        __float__(DataArrayFloatTuple self) -> float
        1
        """
        return _MEDCoupling.DataArrayFloatTuple___float__(self)

    def buildDAFloat(self, *args):
        r"""
        buildDAFloat(DataArrayFloatTuple self, mcIdType nbOfTuples, mcIdType nbOfCompo) -> DataArrayFloat
        buildDAFloat(DataArrayFloatTuple self) -> DataArrayFloat
        1
        """
        return _MEDCoupling.DataArrayFloatTuple_buildDAFloat(self, *args)

    def __len__(self):
        r"""
        __len__(DataArrayFloatTuple self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayFloatTuple___len__(self)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayFloatTuple

# Register DataArrayFloatTuple in _MEDCoupling:
_MEDCoupling.DataArrayFloatTuple_swigregister(DataArrayFloatTuple)
class DataArrayDouble(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def doubleValue(self):
        r"""
        doubleValue(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_doubleValue(self)

    def empty(self):
        r"""
        empty(DataArrayDouble self) -> bool
        1
        """
        return _MEDCoupling.DataArrayDouble_empty(self)

    def aggregate(self, other):
        r"""
        aggregate(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_aggregate(self, other)

    def performCopyOrIncrRef(self, deepCopy):
        r"""
        performCopyOrIncrRef(DataArrayDouble self, bool deepCopy) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_performCopyOrIncrRef(self, deepCopy)

    def deepCopyFrom(self, other):
        r"""
        deepCopyFrom(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_deepCopyFrom(self, other)

    def reserve(self, nbOfElems):
        r"""
        reserve(DataArrayDouble self, std::size_t nbOfElems)
        1
        """
        return _MEDCoupling.DataArrayDouble_reserve(self, nbOfElems)

    def pushBackSilent(self, val):
        r"""
        pushBackSilent(DataArrayDouble self, double val)
        1
        """
        return _MEDCoupling.DataArrayDouble_pushBackSilent(self, val)

    def popBackSilent(self):
        r"""
        popBackSilent(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_popBackSilent(self)

    def pack(self):
        r"""
        pack(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_pack(self)

    def allocIfNecessary(self, nbOfTuple, nbOfCompo):
        r"""
        allocIfNecessary(DataArrayDouble self, int nbOfTuple, int nbOfCompo)
        1
        """
        return _MEDCoupling.DataArrayDouble_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def fillWithZero(self):
        r"""
        fillWithZero(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_fillWithZero(self)

    def fillWithValue(self, val):
        r"""
        fillWithValue(DataArrayDouble self, double val)
        1
        """
        return _MEDCoupling.DataArrayDouble_fillWithValue(self, val)

    def iota(self, init=0.):
        r"""
        iota(DataArrayDouble self, double init=0.)
        1
        """
        return _MEDCoupling.DataArrayDouble_iota(self, init)

    def isUniform(self, val, eps):
        r"""
        isUniform(DataArrayDouble self, double val, double eps) -> bool
        1
        """
        return _MEDCoupling.DataArrayDouble_isUniform(self, val, eps)

    def sort(self, asc=True):
        r"""
        sort(DataArrayDouble self, bool asc=True)
        1
        """
        return _MEDCoupling.DataArrayDouble_sort(self, asc)

    def reverse(self):
        r"""
        reverse(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_reverse(self)

    def checkMonotonic(self, increasing, eps):
        r"""
        checkMonotonic(DataArrayDouble self, bool increasing, double eps)
        1
        """
        return _MEDCoupling.DataArrayDouble_checkMonotonic(self, increasing, eps)

    def isMonotonic(self, increasing, eps):
        r"""
        isMonotonic(DataArrayDouble self, bool increasing, double eps) -> bool
        1
        """
        return _MEDCoupling.DataArrayDouble_isMonotonic(self, increasing, eps)

    def repr(self):
        r"""
        repr(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDouble_repr(self)

    def reprZip(self):
        r"""
        reprZip(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDouble_reprZip(self)

    def reprNotTooLong(self):
        r"""
        reprNotTooLong(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDouble_reprNotTooLong(self)

    def isEqual(self, other, prec):
        r"""
        isEqual(DataArrayDouble self, DataArrayDouble other, double prec) -> bool
        1
        """
        return _MEDCoupling.DataArrayDouble_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other, prec):
        r"""
        isEqualWithoutConsideringStr(DataArrayDouble self, DataArrayDouble other, double prec) -> bool
        1
        """
        return _MEDCoupling.DataArrayDouble_isEqualWithoutConsideringStr(self, other, prec)

    def fromNoInterlace(self):
        r"""
        fromNoInterlace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromNoInterlace(self)

    def toNoInterlace(self):
        r"""
        toNoInterlace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_toNoInterlace(self)

    def subArray(self, tupleIdBg, tupleIdEnd=-1):
        r"""
        subArray(DataArrayDouble self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_subArray(self, tupleIdBg, tupleIdEnd)

    def transpose(self):
        r"""
        transpose(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_transpose(self)

    def changeNbOfComponents(self, newNbOfComp, dftValue):
        r"""
        changeNbOfComponents(DataArrayDouble self, std::size_t newNbOfComp, double dftValue) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other):
        r"""
        meldWith(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_meldWith(self, other)

    def duplicateEachTupleNTimes(self, nbTimes):
        r"""
        duplicateEachTupleNTimes(DataArrayDouble self, int nbTimes) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_duplicateEachTupleNTimes(self, nbTimes)

    def duplicateNTimes(self, nbTimes):
        r"""
        duplicateNTimes(DataArrayDouble self, mcIdType nbTimes) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayDouble_duplicateNTimes(self, nbTimes)

    def getDifferentValues(self, prec, limitTupleId=-1):
        r"""
        getDifferentValues(DataArrayDouble self, double prec, int limitTupleId=-1) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_getDifferentValues(self, prec, limitTupleId)

    def findClosestTupleId(self, other):
        r"""
        findClosestTupleId(DataArrayDouble self, DataArrayDouble other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayDouble_findClosestTupleId(self, other)

    def computeNbOfInteractionsWith(self, otherBBoxFrmt, eps):
        r"""
        computeNbOfInteractionsWith(DataArrayDouble self, DataArrayDouble otherBBoxFrmt, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayDouble_computeNbOfInteractionsWith(self, otherBBoxFrmt, eps)

    def setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare=True):
        r"""
        setPartOfValues1(DataArrayDouble self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp, bool strictCompoCompare=True)
        1
        """
        return _MEDCoupling.DataArrayDouble_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)

    def setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp):
        r"""
        setPartOfValuesSimple1(DataArrayDouble self, double a, mcIdType bgTuples, mcIdType endTuples, mcIdType stepTuples, mcIdType bgComp, mcIdType endComp, mcIdType stepComp)
        1
        """
        return _MEDCoupling.DataArrayDouble_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)

    def setPartOfValuesAdv(self, a, tuplesSelec):
        r"""
        setPartOfValuesAdv(DataArrayDouble self, DataArrayDouble a, DataArrayInt64 tuplesSelec)
        1
        """
        return _MEDCoupling.DataArrayDouble_setPartOfValuesAdv(self, a, tuplesSelec)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(DataArrayDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getIJ(self, tupleId, compoId)

    def front(self):
        r"""
        front(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_front(self)

    def back(self):
        r"""
        back(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_back(self)

    def getIJSafe(self, tupleId, compoId):
        r"""
        getIJSafe(DataArrayDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getIJSafe(self, tupleId, compoId)

    def setIJ(self, tupleId, compoId, newVal):
        r"""
        setIJ(DataArrayDouble self, int tupleId, int compoId, double newVal)
        1
        """
        return _MEDCoupling.DataArrayDouble_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId, compoId, newVal):
        r"""
        setIJSilent(DataArrayDouble self, int tupleId, int compoId, double newVal)
        1
        """
        return _MEDCoupling.DataArrayDouble_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self):
        r"""
        getPointer(DataArrayDouble self) -> double *
        1
        """
        return _MEDCoupling.DataArrayDouble_getPointer(self)

    def checkNoNullValues(self):
        r"""
        checkNoNullValues(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_checkNoNullValues(self)

    def computeBBoxPerTuple(self, epsilon=0.0):
        r"""
        computeBBoxPerTuple(DataArrayDouble self, double epsilon=0.0) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_computeBBoxPerTuple(self, epsilon)

    def recenterForMaxPrecision(self, eps):
        r"""
        recenterForMaxPrecision(DataArrayDouble self, double eps)
        1
        """
        return _MEDCoupling.DataArrayDouble_recenterForMaxPrecision(self, eps)

    def getMaxValueInArray(self):
        r"""
        getMaxValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getMaxValueInArray(self)

    def getMaxAbsValueInArray(self):
        r"""
        getMaxAbsValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getMaxAbsValueInArray(self)

    def getMinValueInArray(self):
        r"""
        getMinValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getMinValueInArray(self)

    def count(self, value, eps):
        r"""
        count(DataArrayDouble self, double value, double eps) -> int
        1
        """
        return _MEDCoupling.DataArrayDouble_count(self, value, eps)

    def getAverageValue(self):
        r"""
        getAverageValue(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_getAverageValue(self)

    def norm2(self):
        r"""
        norm2(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_norm2(self)

    def normMax(self):
        r"""
        normMax(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_normMax(self)

    def normMin(self):
        r"""
        normMin(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble_normMin(self)

    def fromPolarToCart(self):
        r"""
        fromPolarToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromPolarToCart(self)

    def fromCylToCart(self):
        r"""
        fromCylToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromCylToCart(self)

    def fromSpherToCart(self):
        r"""
        fromSpherToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromSpherToCart(self)

    def fromCartToPolar(self):
        r"""
        fromCartToPolar(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromCartToPolar(self)

    def fromCartToCyl(self):
        r"""
        fromCartToCyl(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromCartToCyl(self)

    def fromCartToSpher(self):
        r"""
        fromCartToSpher(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromCartToSpher(self)

    def cartesianize(self, atOfThis):
        r"""
        cartesianize(DataArrayDouble self, MEDCoupling::MEDCouplingAxisType atOfThis) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_cartesianize(self, atOfThis)

    def doublyContractedProduct(self):
        r"""
        doublyContractedProduct(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_doublyContractedProduct(self)

    def determinant(self):
        r"""
        determinant(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_determinant(self)

    def eigenValues(self):
        r"""
        eigenValues(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_eigenValues(self)

    def eigenVectors(self):
        r"""
        eigenVectors(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_eigenVectors(self)

    def inverse(self):
        r"""
        inverse(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_inverse(self)

    def trace(self):
        r"""
        trace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_trace(self)

    def deviator(self):
        r"""
        deviator(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_deviator(self)

    def magnitude(self):
        r"""
        magnitude(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_magnitude(self)

    def maxPerTuple(self):
        r"""
        maxPerTuple(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_maxPerTuple(self)

    def minPerTuple(self):
        r"""
        minPerTuple(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_minPerTuple(self)

    def sumPerTuple(self):
        r"""
        sumPerTuple(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_sumPerTuple(self)

    def buildEuclidianDistanceDenseMatrix(self):
        r"""
        buildEuclidianDistanceDenseMatrix(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)

    def buildEuclidianDistanceDenseMatrixWith(self, other):
        r"""
        buildEuclidianDistanceDenseMatrixWith(DataArrayDouble self, DataArrayDouble other) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, other)

    def sortPerTuple(self, asc):
        r"""
        sortPerTuple(DataArrayDouble self, bool asc)
        1
        """
        return _MEDCoupling.DataArrayDouble_sortPerTuple(self, asc)

    def abs(self):
        r"""
        abs(DataArrayDouble self)
        1
        """
        return _MEDCoupling.DataArrayDouble_abs(self)

    def computeAbs(self):
        r"""
        computeAbs(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_computeAbs(self)

    def applyLin(self, *args):
        r"""
        applyLin(DataArrayDouble self, double a, double b, int compoId)
        applyLin(DataArrayDouble self, double a, double b)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyLin(self, *args)

    def applyInv(self, numerator):
        r"""
        applyInv(DataArrayDouble self, double numerator)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyInv(self, numerator)

    def applyPow(self, val):
        r"""
        applyPow(DataArrayDouble self, double val)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyPow(self, val)

    def applyRPow(self, val):
        r"""
        applyRPow(DataArrayDouble self, double val)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyRPow(self, val)

    def negate(self):
        r"""
        negate(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_negate(self)

    def applyFunc(self, *args):
        r"""
        applyFunc(DataArrayDouble self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFunc(DataArrayDouble self, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFunc(self, *args)

    def applyFuncOnThis(self, func, isSafe=True):
        r"""
        applyFuncOnThis(DataArrayDouble self, std::string const & func, bool isSafe=True)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFuncOnThis(self, func, isSafe)

    def applyFuncCompo(self, nbOfComp, func, isSafe=True):
        r"""
        applyFuncCompo(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFuncCompo(self, nbOfComp, func, isSafe)

    def applyFuncNamedCompo(self, nbOfComp, varsOrder, func, isSafe=True):
        r"""
        applyFuncNamedCompo(DataArrayDouble self, int nbOfComp, svec varsOrder, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func, isSafe)

    def applyFuncFast32(self, func):
        r"""
        applyFuncFast32(DataArrayDouble self, std::string const & func)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFuncFast32(self, func)

    def applyFuncFast64(self, func):
        r"""
        applyFuncFast64(DataArrayDouble self, std::string const & func)
        1
        """
        return _MEDCoupling.DataArrayDouble_applyFuncFast64(self, func)

    def findIdsInRange(self, vmin, vmax):
        r"""
        findIdsInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsInRange(self, vmin, vmax)

    def findIdsNotInRange(self, vmin, vmax):
        r"""
        findIdsNotInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsNotInRange(self, vmin, vmax)

    def findIdsStrictlyNegative(self):
        r"""
        findIdsStrictlyNegative(DataArrayDouble self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsStrictlyNegative(self)

    @staticmethod
    def Dot(a1, a2):
        r"""
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Dot(a1, a2)

    @staticmethod
    def CrossProduct(a1, a2):
        r"""
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_CrossProduct(a1, a2)

    @staticmethod
    def Max(a1, a2):
        r"""
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Max(a1, a2)

    @staticmethod
    def Min(a1, a2):
        r"""
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Min(a1, a2)

    @staticmethod
    def Add(a1, a2):
        r"""
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Add(a1, a2)

    def addEqual(self, other):
        r"""
        addEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_addEqual(self, other)

    @staticmethod
    def Substract(a1, a2):
        r"""
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Substract(a1, a2)

    def substractEqual(self, other):
        r"""
        substractEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_substractEqual(self, other)

    @staticmethod
    def Multiply(a1, a2):
        r"""
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Multiply(a1, a2)

    def multiplyEqual(self, other):
        r"""
        multiplyEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_multiplyEqual(self, other)

    @staticmethod
    def Divide(a1, a2):
        r"""
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Divide(a1, a2)

    def divideEqual(self, other):
        r"""
        divideEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_divideEqual(self, other)

    @staticmethod
    def Pow(a1, a2):
        r"""
        Pow(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Pow(a1, a2)

    def powEqual(self, other):
        r"""
        powEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCoupling.DataArrayDouble_powEqual(self, other)

    def findIdsGreaterOrEqualTo(self, val):
        r"""
        findIdsGreaterOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsGreaterOrEqualTo(self, val)

    def findIdsGreaterThan(self, val):
        r"""
        findIdsGreaterThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsGreaterThan(self, val)

    def findIdsLowerOrEqualTo(self, val):
        r"""
        findIdsLowerOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsLowerOrEqualTo(self, val)

    def findIdsLowerThan(self, val):
        r"""
        findIdsLowerThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayDouble_findIdsLowerThan(self, val)

    def convertToIntArr(self):
        r"""
        convertToIntArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayInt32 >
        1
        """
        return _MEDCoupling.DataArrayDouble_convertToIntArr(self)

    def convertToInt64Arr(self):
        r"""
        convertToInt64Arr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayDouble_convertToInt64Arr(self)

    def selectPartDef(self, pd):
        r"""
        selectPartDef(DataArrayDouble self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayDouble_selectPartDef(self, pd)

    def cumSum(self):
        r"""
        cumSum(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayDouble_cumSum(self)

    def convertToFloatArr(self):
        r"""
        convertToFloatArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCoupling.DataArrayDouble_convertToFloatArr(self)

    @staticmethod
    def LoadForDbg(fileName):
        r"""
        LoadForDbg(std::string const & fileName) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayDouble_LoadForDbg(fileName)

    def writeForDbg(self, fileName):
        r"""
        writeForDbg(DataArrayDouble self, std::string const & fileName)
        1
        """
        return _MEDCoupling.DataArrayDouble_writeForDbg(self, fileName)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayDouble
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayDouble self) -> DataArrayDouble
        __init__(DataArrayDouble self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        1
        """
        _MEDCoupling.DataArrayDouble_swiginit(self, _MEDCoupling.new_DataArrayDouble(*args))

    def pushBackValsSilent(self, li):
        r"""
        pushBackValsSilent(DataArrayDouble self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayDouble_pushBackValsSilent(self, li)

    def __repr__(self):
        r"""
        __repr__(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDouble___repr__(self)

    def __str__(self):
        r"""
        __str__(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDouble___str__(self)

    def __float__(self):
        r"""
        __float__(DataArrayDouble self) -> double
        1
        """
        return _MEDCoupling.DataArrayDouble___float__(self)

    def __len__(self):
        r"""
        __len__(DataArrayDouble self) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayDouble___len__(self)

    def asArcOfCircle(self):
        r"""
        asArcOfCircle(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_asArcOfCircle(self)

    def __iter__(self):
        r"""
        __iter__(DataArrayDouble self) -> DataArrayDoubleIterator
        1
        """
        return _MEDCoupling.DataArrayDouble___iter__(self)

    def setValues(self, li, nbOfTuples=None, nbOfComp=None):
        r"""
        setValues(DataArrayDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCoupling.DataArrayDouble_setValues(self, li, nbOfTuples, nbOfComp)

    def getValues(self):
        r"""
        getValues(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getValues(self)

    def toNumPyArray(self):
        r"""
        toNumPyArray(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_toNumPyArray(self)

    def isEqualIfNotWhy(self, other, prec):
        r"""
        isEqualIfNotWhy(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_isEqualIfNotWhy(self, other, prec)

    def getValuesAsTuple(self):
        r"""
        getValuesAsTuple(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getValuesAsTuple(self)

    @staticmethod
    def ComputeIntegralOfSeg2IntoTri3(seg2, tri3):
        r"""
        ComputeIntegralOfSeg2IntoTri3(PyObject * seg2, PyObject * tri3) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2, tri3)

    def symmetry3DPlane(self, point, normalVector):
        r"""
        symmetry3DPlane(DataArrayDouble self, PyObject * point, PyObject * normalVector) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_symmetry3DPlane(self, point, normalVector)

    @staticmethod
    def GiveBaseForPlane(normalVector):
        r"""
        GiveBaseForPlane(PyObject * normalVector) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_GiveBaseForPlane(normalVector)

    def fromCartToCylGiven(self, coords, center, vector):
        r"""
        fromCartToCylGiven(DataArrayDouble self, DataArrayDouble coords, PyObject * center, PyObject * vector) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_fromCartToCylGiven(self, coords, center, vector)

    def renumber(self, li):
        r"""
        renumber(DataArrayDouble self, PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_renumber(self, li)

    def renumberR(self, li):
        r"""
        renumberR(DataArrayDouble self, PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_renumberR(self, li)

    def renumberAndReduce(self, li, newNbOfTuple):
        r"""
        renumberAndReduce(DataArrayDouble self, PyObject * li, mcIdType newNbOfTuple) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_renumberAndReduce(self, li, newNbOfTuple)

    def minimalDistanceTo(self, other):
        r"""
        minimalDistanceTo(DataArrayDouble self, DataArrayDouble other) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_minimalDistanceTo(self, other)

    def getMaxValue(self):
        r"""
        getMaxValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMaxValue(self)

    def getMaxAbsValue(self):
        r"""
        getMaxAbsValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMaxAbsValue(self)

    def getMaxValue2(self):
        r"""
        getMaxValue2(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMaxValue2(self)

    def getMinValue(self):
        r"""
        getMinValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMinValue(self)

    def getMinValue2(self):
        r"""
        getMinValue2(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMinValue2(self)

    def getMinMaxPerComponent(self):
        r"""
        getMinMaxPerComponent(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getMinMaxPerComponent(self)

    def normMaxPerComponent(self):
        r"""
        normMaxPerComponent(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_normMaxPerComponent(self)

    def accumulate(self, *args):
        r"""
        accumulate(DataArrayDouble self, int compId) -> double
        accumulate(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_accumulate(self, *args)

    def accumulatePerChunck(self, indexArr):
        r"""
        accumulatePerChunck(DataArrayDouble self, PyObject * indexArr) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_accumulatePerChunck(self, indexArr)

    def findCommonTuples(self, prec, limitNodeId=-1):
        r"""
        findCommonTuples(DataArrayDouble self, double prec, mcIdType limitNodeId=-1) -> PyObject
        1
        """
        return _MEDCoupling.DataArrayDouble_findCommonTuples(self, prec, limitNodeId)

    def distanceToTuple(self, tuple):
        r"""
        distanceToTuple(DataArrayDouble self, PyObject * tuple) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_distanceToTuple(self, tuple)

    def setSelectedComponents(self, a, li):
        r"""
        setSelectedComponents(DataArrayDouble self, DataArrayDouble a, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayDouble_setSelectedComponents(self, a, li)

    def explodeComponents(self):
        r"""
        explodeComponents(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_explodeComponents(self)

    def getTuple(self, tupleId):
        r"""
        getTuple(DataArrayDouble self, mcIdType tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_getTuple(self, tupleId)

    @staticmethod
    def Aggregate(*args):
        r"""
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Aggregate(*args)

    @staticmethod
    def Meld(*args):
        r"""
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble_Meld(*args)

    def areIncludedInMe(self, other, prec):
        r"""
        areIncludedInMe(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_areIncludedInMe(self, other, prec)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayDouble self, PyObject * obj, PyObject * value) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___setitem__(self, obj, value)

    def __neg__(self):
        r"""
        __neg__(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___neg__(self)

    def __add__(self, obj):
        r"""
        __add__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble___add__(self, obj)

    def __radd__(self, obj):
        r"""
        __radd__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___radd__(self, obj)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble____iadd___(self, trueSelf, obj)

    def __sub__(self, obj):
        r"""
        __sub__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble___sub__(self, obj)

    def __rsub__(self, obj):
        r"""
        __rsub__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___rsub__(self, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble____isub___(self, trueSelf, obj)

    def __mul__(self, obj):
        r"""
        __mul__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble___mul__(self, obj)

    def __rmul__(self, obj):
        r"""
        __rmul__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___rmul__(self, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble____imul___(self, trueSelf, obj)

    def __div__(self, obj):
        r"""
        __div__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble___div__(self, obj)

    def __rdiv__(self, obj):
        r"""
        __rdiv__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___rdiv__(self, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble____idiv___(self, trueSelf, obj)

    def __pow__(self, obj):
        r"""
        __pow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___pow__(self, obj)

    def __rpow__(self, obj):
        r"""
        __rpow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDouble___rpow__(self, obj)

    def ___ipow___(self, trueSelf, obj):
        r"""
        ___ipow___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble____ipow___(self, trueSelf, obj)

    def computeTupleIdsNearTuples(self, *args):
        r"""
        computeTupleIdsNearTuples(DataArrayDouble self, PyObject * pt, double eps) -> PyObject
        computeTupleIdsNearTuples(DataArrayDouble self, DataArrayDouble other, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_computeTupleIdsNearTuples(self, *args)

    def maxPerTupleWithCompoId(self):
        r"""
        maxPerTupleWithCompoId(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDouble_maxPerTupleWithCompoId(self)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayDouble

# Register DataArrayDouble in _MEDCoupling:
_MEDCoupling.DataArrayDouble_swigregister(DataArrayDouble)
class DataArrayDoubleIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayDoubleIterator self, DataArrayDouble da) -> DataArrayDoubleIterator
        1
        """
        _MEDCoupling.DataArrayDoubleIterator_swiginit(self, _MEDCoupling.new_DataArrayDoubleIterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayDoubleIterator

    def next(self):
        r"""
        next(DataArrayDoubleIterator self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleIterator_next(self)

# Register DataArrayDoubleIterator in _MEDCoupling:
_MEDCoupling.DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)
class DataArrayDoubleTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self):
        r"""
        getNumberOfCompo(DataArrayDoubleTuple self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple_getNumberOfCompo(self)

    def __str__(self):
        r"""
        __str__(DataArrayDoubleTuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple___str__(self)

    def __float__(self):
        r"""
        __float__(DataArrayDoubleTuple self) -> double
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple___float__(self)

    def buildDADouble(self, *args):
        r"""
        buildDADouble(DataArrayDoubleTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(DataArrayDoubleTuple self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple_buildDADouble(self, *args)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple____idiv___(self, trueSelf, obj)

    def __len__(self):
        r"""
        __len__(DataArrayDoubleTuple self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple___len__(self)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayDoubleTuple self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayDoubleTuple self, PyObject * obj, PyObject * value) -> DataArrayDoubleTuple
        1
        """
        return _MEDCoupling.DataArrayDoubleTuple___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayDoubleTuple

# Register DataArrayDoubleTuple in _MEDCoupling:
_MEDCoupling.DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)
class DataArrayChar(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def buildEmptySpecializedDAChar(self):
        r"""
        buildEmptySpecializedDAChar(DataArrayChar self) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_buildEmptySpecializedDAChar(self)

    def getHashCode(self):
        r"""
        getHashCode(DataArrayChar self) -> int
        1
        """
        return _MEDCoupling.DataArrayChar_getHashCode(self)

    def empty(self):
        r"""
        empty(DataArrayChar self) -> bool
        1
        """
        return _MEDCoupling.DataArrayChar_empty(self)

    def deepCopyFrom(self, other):
        r"""
        deepCopyFrom(DataArrayChar self, DataArrayChar other)
        1
        """
        return _MEDCoupling.DataArrayChar_deepCopyFrom(self, other)

    def reserve(self, nbOfElems):
        r"""
        reserve(DataArrayChar self, std::size_t nbOfElems)
        1
        """
        return _MEDCoupling.DataArrayChar_reserve(self, nbOfElems)

    def pushBackSilent(self, val):
        r"""
        pushBackSilent(DataArrayChar self, char val)
        1
        """
        return _MEDCoupling.DataArrayChar_pushBackSilent(self, val)

    def popBackSilent(self):
        r"""
        popBackSilent(DataArrayChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_popBackSilent(self)

    def pack(self):
        r"""
        pack(DataArrayChar self)
        1
        """
        return _MEDCoupling.DataArrayChar_pack(self)

    def allocIfNecessary(self, nbOfTuple, nbOfCompo):
        r"""
        allocIfNecessary(DataArrayChar self, int nbOfTuple, int nbOfCompo)
        1
        """
        return _MEDCoupling.DataArrayChar_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def isEqual(self, other):
        r"""
        isEqual(DataArrayChar self, DataArrayChar other) -> bool
        1
        """
        return _MEDCoupling.DataArrayChar_isEqual(self, other)

    def isEqualWithoutConsideringStr(self, other):
        r"""
        isEqualWithoutConsideringStr(DataArrayChar self, DataArrayChar other) -> bool
        1
        """
        return _MEDCoupling.DataArrayChar_isEqualWithoutConsideringStr(self, other)

    def reverse(self):
        r"""
        reverse(DataArrayChar self)
        1
        """
        return _MEDCoupling.DataArrayChar_reverse(self)

    def fillWithZero(self):
        r"""
        fillWithZero(DataArrayChar self)
        1
        """
        return _MEDCoupling.DataArrayChar_fillWithZero(self)

    def fillWithValue(self, val):
        r"""
        fillWithValue(DataArrayChar self, char val)
        1
        """
        return _MEDCoupling.DataArrayChar_fillWithValue(self, val)

    def repr(self):
        r"""
        repr(DataArrayChar self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayChar_repr(self)

    def reprZip(self):
        r"""
        reprZip(DataArrayChar self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayChar_reprZip(self)

    def convertToIntArr(self):
        r"""
        convertToIntArr(DataArrayChar self) -> DataArrayInt *
        1
        """
        return _MEDCoupling.DataArrayChar_convertToIntArr(self)

    def isUniform(self, val):
        r"""
        isUniform(DataArrayChar self, char val) -> bool
        1
        """
        return _MEDCoupling.DataArrayChar_isUniform(self, val)

    def sort(self, asc=True):
        r"""
        sort(DataArrayChar self, bool asc=True)
        1
        """
        return _MEDCoupling.DataArrayChar_sort(self, asc)

    def subArray(self, tupleIdBg, tupleIdEnd=-1):
        r"""
        subArray(DataArrayChar self, mcIdType tupleIdBg, mcIdType tupleIdEnd=-1) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_subArray(self, tupleIdBg, tupleIdEnd)

    def changeNbOfComponents(self, newNbOfComp, dftValue):
        r"""
        changeNbOfComponents(DataArrayChar self, std::size_t newNbOfComp, char dftValue) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other):
        r"""
        meldWith(DataArrayChar self, DataArrayChar other)
        1
        """
        return _MEDCoupling.DataArrayChar_meldWith(self, other)

    def setPartOfValuesAdv(self, a, tuplesSelec):
        r"""
        setPartOfValuesAdv(DataArrayChar self, DataArrayChar a, DataArrayInt64 tuplesSelec)
        1
        """
        return _MEDCoupling.DataArrayChar_setPartOfValuesAdv(self, a, tuplesSelec)

    def front(self):
        r"""
        front(DataArrayChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_front(self)

    def back(self):
        r"""
        back(DataArrayChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_back(self)

    def setIJ(self, tupleId, compoId, newVal):
        r"""
        setIJ(DataArrayChar self, mcIdType tupleId, int compoId, char newVal)
        1
        """
        return _MEDCoupling.DataArrayChar_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId, compoId, newVal):
        r"""
        setIJSilent(DataArrayChar self, mcIdType tupleId, int compoId, char newVal)
        1
        """
        return _MEDCoupling.DataArrayChar_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self):
        r"""
        getPointer(DataArrayChar self) -> char *
        1
        """
        return _MEDCoupling.DataArrayChar_getPointer(self)

    def findIdsEqual(self, val):
        r"""
        findIdsEqual(DataArrayChar self, char val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayChar_findIdsEqual(self, val)

    def findIdsNotEqual(self, val):
        r"""
        findIdsNotEqual(DataArrayChar self, char val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayChar_findIdsNotEqual(self, val)

    def findIdFirstEqualTuple(self, tupl):
        r"""
        findIdFirstEqualTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> int
        1
        """
        return _MEDCoupling.DataArrayChar_findIdFirstEqualTuple(self, tupl)

    def presenceOfTuple(self, tupl):
        r"""
        presenceOfTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> bool
        1
        """
        return _MEDCoupling.DataArrayChar_presenceOfTuple(self, tupl)

    def getMaxValue(self, tupleId):
        r"""
        getMaxValue(DataArrayChar self, mcIdType & tupleId) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_getMaxValue(self, tupleId)

    def getMaxValueInArray(self):
        r"""
        getMaxValueInArray(DataArrayChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_getMaxValueInArray(self)

    def getMinValue(self, tupleId):
        r"""
        getMinValue(DataArrayChar self, mcIdType & tupleId) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_getMinValue(self, tupleId)

    def getMinValueInArray(self):
        r"""
        getMinValueInArray(DataArrayChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayChar_getMinValueInArray(self)

    def findIdsInRange(self, vmin, vmax):
        r"""
        findIdsInRange(DataArrayChar self, char vmin, char vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayChar_findIdsInRange(self, vmin, vmax)

    def __len__(self):
        r"""
        __len__(DataArrayChar self) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayChar___len__(self)

    def isEqualIfNotWhy(self, other):
        r"""
        isEqualIfNotWhy(DataArrayChar self, DataArrayChar other) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayChar_isEqualIfNotWhy(self, other)

    def renumber(self, *args):
        r"""
        renumber(DataArrayChar self, mcIdType const * old2New) -> DataArrayChar
        renumber(DataArrayChar self, PyObject * li) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_renumber(self, *args)

    def renumberR(self, *args):
        r"""
        renumberR(DataArrayChar self, mcIdType const * new2Old) -> DataArrayChar
        renumberR(DataArrayChar self, PyObject * li) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_renumberR(self, *args)

    def renumberAndReduce(self, *args):
        r"""
        renumberAndReduce(DataArrayChar self, mcIdType const * old2NewBg, mcIdType newNbOfTuple) -> DataArrayChar
        renumberAndReduce(DataArrayChar self, PyObject * li, mcIdType newNbOfTuple) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_renumberAndReduce(self, *args)

    @staticmethod
    def Aggregate(*args):
        r"""
        Aggregate(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Aggregate(PyObject * dachs) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_Aggregate(*args)

    @staticmethod
    def Meld(*args):
        r"""
        Meld(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Meld(PyObject * dachs) -> DataArrayChar
        1
        """
        return _MEDCoupling.DataArrayChar_Meld(*args)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayChar

# Register DataArrayChar in _MEDCoupling:
_MEDCoupling.DataArrayChar_swigregister(DataArrayChar)
class DataArrayByte(DataArrayChar):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""
        iterator(DataArrayByte self) -> DataArrayByteIterator
        1
        """
        return _MEDCoupling.DataArrayByte_iterator(self)

    def performCopyOrIncrRef(self, deepCopy):
        r"""
        performCopyOrIncrRef(DataArrayByte self, bool deepCopy) -> DataArrayByte
        1
        """
        return _MEDCoupling.DataArrayByte_performCopyOrIncrRef(self, deepCopy)

    def byteValue(self):
        r"""
        byteValue(DataArrayByte self) -> char
        1
        """
        return _MEDCoupling.DataArrayByte_byteValue(self)

    @staticmethod
    def LoadForDbg(fileName):
        r"""
        LoadForDbg(std::string const & fileName) -> MCAuto< MEDCoupling::DataArrayByte >
        1
        """
        return _MEDCoupling.DataArrayByte_LoadForDbg(fileName)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayByte
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        1
        """
        return _MEDCoupling.DataArrayByte_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayByte self) -> DataArrayByte
        __init__(DataArrayByte self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        1
        """
        _MEDCoupling.DataArrayByte_swiginit(self, _MEDCoupling.new_DataArrayByte(*args))

    def __repr__(self):
        r"""
        __repr__(DataArrayByte self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayByte___repr__(self)

    def __int__(self):
        r"""
        __int__(DataArrayByte self) -> int
        1
        """
        return _MEDCoupling.DataArrayByte___int__(self)

    def __iter__(self):
        r"""
        __iter__(DataArrayByte self) -> DataArrayByteIterator
        1
        """
        return _MEDCoupling.DataArrayByte___iter__(self)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(DataArrayByte self, mcIdType tupleId, mcIdType compoId) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId, compoId):
        r"""
        getIJSafe(DataArrayByte self, mcIdType tupleId, mcIdType compoId) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_getIJSafe(self, tupleId, compoId)

    def __str__(self):
        r"""
        __str__(DataArrayByte self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayByte___str__(self)

    def toStrList(self):
        r"""
        toStrList(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayByte_toStrList(self)

    def presenceOfTuple(self, tupl):
        r"""
        presenceOfTuple(DataArrayByte self, PyObject * tupl) -> bool
        1
        """
        return _MEDCoupling.DataArrayByte_presenceOfTuple(self, tupl)

    def presenceOfValue(self, vals):
        r"""
        presenceOfValue(DataArrayByte self, PyObject * vals) -> bool
        1
        """
        return _MEDCoupling.DataArrayByte_presenceOfValue(self, vals)

    def findIdFirstEqual(self, vals):
        r"""
        findIdFirstEqual(DataArrayByte self, PyObject * vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_findIdFirstEqual(self, vals)

    def findIdFirstEqualTuple(self, tupl):
        r"""
        findIdFirstEqualTuple(DataArrayByte self, PyObject * tupl) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_findIdFirstEqualTuple(self, tupl)

    def findIdSequence(self, strOrListOfInt):
        r"""
        findIdSequence(DataArrayByte self, PyObject * strOrListOfInt) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_findIdSequence(self, strOrListOfInt)

    def getTuple(self, tupleId):
        r"""
        getTuple(DataArrayByte self, mcIdType tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayByte_getTuple(self, tupleId)

    def getMaxValue(self):
        r"""
        getMaxValue(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayByte_getMaxValue(self)

    def getMinValue(self):
        r"""
        getMinValue(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayByte_getMinValue(self)

    def index(self, obj):
        r"""
        index(DataArrayByte self, PyObject * obj) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayByte_index(self, obj)

    def __contains__(self, obj):
        r"""
        __contains__(DataArrayByte self, PyObject * obj) -> bool
        1
        """
        return _MEDCoupling.DataArrayByte___contains__(self, obj)

    def toNumPyArray(self):
        r"""
        toNumPyArray(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayByte_toNumPyArray(self)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayByte self, PyObject * obj, PyObject * value) -> DataArrayByte
        1
        """
        return _MEDCoupling.DataArrayByte___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayByte

# Register DataArrayByte in _MEDCoupling:
_MEDCoupling.DataArrayByte_swigregister(DataArrayByte)
class DataArrayByteIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayByteIterator self, DataArrayByte da) -> DataArrayByteIterator
        1
        """
        _MEDCoupling.DataArrayByteIterator_swiginit(self, _MEDCoupling.new_DataArrayByteIterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayByteIterator

# Register DataArrayByteIterator in _MEDCoupling:
_MEDCoupling.DataArrayByteIterator_swigregister(DataArrayByteIterator)
class DataArrayByteTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def repr(self):
        r"""
        repr(DataArrayByteTuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayByteTuple_repr(self)

    def __str__(self):
        r"""
        __str__(DataArrayByteTuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayByteTuple___str__(self)

    def __int__(self):
        r"""
        __int__(DataArrayByteTuple self) -> char
        1
        """
        return _MEDCoupling.DataArrayByteTuple___int__(self)

    def buildDAByte(self, *args):
        r"""
        buildDAByte(DataArrayByteTuple self, mcIdType nbOfTuples, mcIdType nbOfCompo) -> DataArrayByte
        buildDAByte(DataArrayByteTuple self) -> DataArrayByte
        1
        """
        return _MEDCoupling.DataArrayByteTuple_buildDAByte(self, *args)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayByteTuple

# Register DataArrayByteTuple in _MEDCoupling:
_MEDCoupling.DataArrayByteTuple_swigregister(DataArrayByteTuple)
class DataArrayAsciiChar(DataArrayChar):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""
        iterator(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_iterator(self)

    def performCopyOrIncrRef(self, deepCopy):
        r"""
        performCopyOrIncrRef(DataArrayAsciiChar self, bool deepCopy) -> DataArrayAsciiChar
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_performCopyOrIncrRef(self, deepCopy)

    def asciiCharValue(self):
        r"""
        asciiCharValue(DataArrayAsciiChar self) -> char
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_asciiCharValue(self)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayAsciiChar
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayAsciiChar self) -> DataArrayAsciiChar
        __init__(DataArrayAsciiChar self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        1
        """
        _MEDCoupling.DataArrayAsciiChar_swiginit(self, _MEDCoupling.new_DataArrayAsciiChar(*args))

    def __repr__(self):
        r"""
        __repr__(DataArrayAsciiChar self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___repr__(self)

    def __iter__(self):
        r"""
        __iter__(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___iter__(self)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(DataArrayAsciiChar self, mcIdType tupleId, mcIdType compoId) -> std::string
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId, compoId):
        r"""
        getIJSafe(DataArrayAsciiChar self, mcIdType tupleId, mcIdType compoId) -> std::string
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_getIJSafe(self, tupleId, compoId)

    def __str__(self):
        r"""
        __str__(DataArrayAsciiChar self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___str__(self)

    def toStrList(self):
        r"""
        toStrList(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_toStrList(self)

    def presenceOfTuple(self, tupl):
        r"""
        presenceOfTuple(DataArrayAsciiChar self, PyObject * tupl) -> bool
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_presenceOfTuple(self, tupl)

    def presenceOfValue(self, vals):
        r"""
        presenceOfValue(DataArrayAsciiChar self, PyObject * vals) -> bool
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_presenceOfValue(self, vals)

    def findIdFirstEqual(self, vals):
        r"""
        findIdFirstEqual(DataArrayAsciiChar self, PyObject * vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_findIdFirstEqual(self, vals)

    def findIdFirstEqualTuple(self, tupl):
        r"""
        findIdFirstEqualTuple(DataArrayAsciiChar self, PyObject * tupl) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_findIdFirstEqualTuple(self, tupl)

    def findIdSequence(self, strOrListOfInt):
        r"""
        findIdSequence(DataArrayAsciiChar self, PyObject * strOrListOfInt) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_findIdSequence(self, strOrListOfInt)

    def getTuple(self, tupleId):
        r"""
        getTuple(DataArrayAsciiChar self, mcIdType tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_getTuple(self, tupleId)

    def getMaxValue(self):
        r"""
        getMaxValue(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_getMaxValue(self)

    def getMinValue(self):
        r"""
        getMinValue(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_getMinValue(self)

    def index(self, obj):
        r"""
        index(DataArrayAsciiChar self, PyObject * obj) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayAsciiChar_index(self, obj)

    def __contains__(self, obj):
        r"""
        __contains__(DataArrayAsciiChar self, PyObject * obj) -> bool
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___contains__(self, obj)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayAsciiChar self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayAsciiChar self, PyObject * obj, PyObject * value) -> DataArrayAsciiChar
        1
        """
        return _MEDCoupling.DataArrayAsciiChar___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayAsciiChar

# Register DataArrayAsciiChar in _MEDCoupling:
_MEDCoupling.DataArrayAsciiChar_swigregister(DataArrayAsciiChar)
class DataArrayAsciiCharIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayAsciiCharIterator self, DataArrayAsciiChar da) -> DataArrayAsciiCharIterator
        1
        """
        _MEDCoupling.DataArrayAsciiCharIterator_swiginit(self, _MEDCoupling.new_DataArrayAsciiCharIterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayAsciiCharIterator

    def next(self):
        r"""
        next(DataArrayAsciiCharIterator self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayAsciiCharIterator_next(self)

# Register DataArrayAsciiCharIterator in _MEDCoupling:
_MEDCoupling.DataArrayAsciiCharIterator_swigregister(DataArrayAsciiCharIterator)
class DataArrayAsciiCharTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self):
        r"""
        getNumberOfCompo(DataArrayAsciiCharTuple self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArrayAsciiCharTuple_getNumberOfCompo(self)

    def __str__(self):
        r"""
        __str__(DataArrayAsciiCharTuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayAsciiCharTuple___str__(self)

    def buildDAAsciiChar(self, *args):
        r"""
        buildDAAsciiChar(DataArrayAsciiCharTuple self, mcIdType nbOfTuples, mcIdType nbOfCompo) -> DataArrayAsciiChar
        buildDAAsciiChar(DataArrayAsciiCharTuple self) -> DataArrayAsciiChar
        1
        """
        return _MEDCoupling.DataArrayAsciiCharTuple_buildDAAsciiChar(self, *args)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayAsciiCharTuple

# Register DataArrayAsciiCharTuple in _MEDCoupling:
_MEDCoupling.DataArrayAsciiCharTuple_swigregister(DataArrayAsciiCharTuple)

def FromPyIntPtrToDataArrayByte(intPtr):
    r"""
    FromPyIntPtrToDataArrayByte(mcPyPtrType intPtr) -> DataArrayByte
    1
    """
    return _MEDCoupling.FromPyIntPtrToDataArrayByte(intPtr)
class DataArrayInt32(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def intValue(self):
        r"""
        intValue(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_intValue(self)

    def getHashCode(self):
        r"""
        getHashCode(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getHashCode(self)

    def empty(self):
        r"""
        empty(DataArrayInt32 self) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_empty(self)

    def aggregate(self, other):
        r"""
        aggregate(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_aggregate(self, other)

    def performCopyOrIncrRef(self, deepCopy):
        r"""
        performCopyOrIncrRef(DataArrayInt32 self, bool deepCopy) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_performCopyOrIncrRef(self, deepCopy)

    def deepCopyFrom(self, other):
        r"""
        deepCopyFrom(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_deepCopyFrom(self, other)

    def reserve(self, nbOfElems):
        r"""
        reserve(DataArrayInt32 self, std::size_t nbOfElems)
        1
        """
        return _MEDCoupling.DataArrayInt32_reserve(self, nbOfElems)

    def pushBackSilent(self, val):
        r"""
        pushBackSilent(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_pushBackSilent(self, val)

    def popBackSilent(self):
        r"""
        popBackSilent(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_popBackSilent(self)

    def pack(self):
        r"""
        pack(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_pack(self)

    def allocIfNecessary(self, nbOfTuple, nbOfCompo):
        r"""
        allocIfNecessary(DataArrayInt32 self, MEDCoupling::Int32 nbOfTuple, MEDCoupling::Int32 nbOfCompo)
        1
        """
        return _MEDCoupling.DataArrayInt32_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def isEqual(self, other):
        r"""
        isEqual(DataArrayInt32 self, DataArrayInt32 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isEqual(self, other)

    def isEqualWithoutConsideringStr(self, other):
        r"""
        isEqualWithoutConsideringStr(DataArrayInt32 self, DataArrayInt32 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isEqualWithoutConsideringStr(self, other)

    def isEqualWithoutConsideringStrAndOrder(self, other):
        r"""
        isEqualWithoutConsideringStrAndOrder(DataArrayInt32 self, DataArrayInt32 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isEqualWithoutConsideringStrAndOrder(self, other)

    def occurenceRankInThis(self):
        r"""
        occurenceRankInThis(DataArrayInt32 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_occurenceRankInThis(self)

    def buildPermutationArr(self, other):
        r"""
        buildPermutationArr(DataArrayInt32 self, DataArrayInt32 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_buildPermutationArr(self, other)

    def sumPerTuple(self):
        r"""
        sumPerTuple(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_sumPerTuple(self)

    def sort(self, asc=True):
        r"""
        sort(DataArrayInt32 self, bool asc=True)
        1
        """
        return _MEDCoupling.DataArrayInt32_sort(self, asc)

    def reverse(self):
        r"""
        reverse(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_reverse(self)

    def checkMonotonic(self, increasing):
        r"""
        checkMonotonic(DataArrayInt32 self, bool increasing)
        1
        """
        return _MEDCoupling.DataArrayInt32_checkMonotonic(self, increasing)

    def isMonotonic(self, increasing):
        r"""
        isMonotonic(DataArrayInt32 self, bool increasing) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isMonotonic(self, increasing)

    def checkStrictlyMonotonic(self, increasing):
        r"""
        checkStrictlyMonotonic(DataArrayInt32 self, bool increasing)
        1
        """
        return _MEDCoupling.DataArrayInt32_checkStrictlyMonotonic(self, increasing)

    def isStrictlyMonotonic(self, increasing):
        r"""
        isStrictlyMonotonic(DataArrayInt32 self, bool increasing) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isStrictlyMonotonic(self, increasing)

    def fillWithZero(self):
        r"""
        fillWithZero(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_fillWithZero(self)

    def fillWithValue(self, val):
        r"""
        fillWithValue(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_fillWithValue(self, val)

    def iota(self, init=0):
        r"""
        iota(DataArrayInt32 self, MEDCoupling::Int32 init=0)
        1
        """
        return _MEDCoupling.DataArrayInt32_iota(self, init)

    def repr(self):
        r"""
        repr(DataArrayInt32 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32_repr(self)

    def reprZip(self):
        r"""
        reprZip(DataArrayInt32 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32_reprZip(self)

    def reprNotTooLong(self):
        r"""
        reprNotTooLong(DataArrayInt32 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32_reprNotTooLong(self)

    def invertArrayO2N2N2O(self, newNbOfElem):
        r"""
        invertArrayO2N2N2O(DataArrayInt32 self, mcIdType newNbOfElem) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_invertArrayO2N2N2O(self, newNbOfElem)

    def invertArrayN2O2O2N(self, oldNbOfElem):
        r"""
        invertArrayN2O2O2N(DataArrayInt32 self, mcIdType oldNbOfElem) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_invertArrayN2O2O2N(self, oldNbOfElem)

    def invertArrayO2N2N2OBis(self, newNbOfElem):
        r"""
        invertArrayO2N2N2OBis(DataArrayInt32 self, mcIdType newNbOfElem) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_invertArrayO2N2N2OBis(self, newNbOfElem)

    def indicesOfSubPart(self, partOfThis):
        r"""
        indicesOfSubPart(DataArrayInt32 self, DataArrayInt32 partOfThis) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_indicesOfSubPart(self, partOfThis)

    def fromNoInterlace(self):
        r"""
        fromNoInterlace(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_fromNoInterlace(self)

    def toNoInterlace(self):
        r"""
        toNoInterlace(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_toNoInterlace(self)

    def selectByTupleIdSafeSlice(self, bg, end, step):
        r"""
        selectByTupleIdSafeSlice(DataArrayInt32 self, mcIdType bg, mcIdType end, mcIdType step) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_selectByTupleIdSafeSlice(self, bg, end, step)

    def checkAndPreparePermutation(self):
        r"""
        checkAndPreparePermutation(DataArrayInt32 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self):
        r"""
        buildPermArrPerLevel(DataArrayInt32 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_buildPermArrPerLevel(self)

    def isIota(self, sizeExpected):
        r"""
        isIota(DataArrayInt32 self, mcIdType sizeExpected) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isIota(self, sizeExpected)

    def isUniform(self, val):
        r"""
        isUniform(DataArrayInt32 self, MEDCoupling::Int32 val) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_isUniform(self, val)

    def checkUniformAndGuess(self):
        r"""
        checkUniformAndGuess(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_checkUniformAndGuess(self)

    def hasUniqueValues(self):
        r"""
        hasUniqueValues(DataArrayInt32 self) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_hasUniqueValues(self)

    def subArray(self, tupleIdBg, tupleIdEnd=-1):
        r"""
        subArray(DataArrayInt32 self, mcIdType tupleIdBg, mcIdType tupleIdEnd=-1) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_subArray(self, tupleIdBg, tupleIdEnd)

    def transpose(self):
        r"""
        transpose(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_transpose(self)

    def changeNbOfComponents(self, newNbOfComp, dftValue):
        r"""
        changeNbOfComponents(DataArrayInt32 self, std::size_t newNbOfComp, MEDCoupling::Int32 dftValue) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other):
        r"""
        meldWith(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_meldWith(self, other)

    def setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare=True):
        r"""
        setPartOfValues1(DataArrayInt32 self, DataArrayInt32 a, mcIdType bgTuples, mcIdType endTuples, mcIdType stepTuples, mcIdType bgComp, mcIdType endComp, mcIdType stepComp, bool strictCompoCompare=True)
        1
        """
        return _MEDCoupling.DataArrayInt32_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)

    def setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp):
        r"""
        setPartOfValuesSimple1(DataArrayInt32 self, MEDCoupling::Int32 a, mcIdType bgTuples, mcIdType endTuples, mcIdType stepTuples, mcIdType bgComp, mcIdType endComp, mcIdType stepComp)
        1
        """
        return _MEDCoupling.DataArrayInt32_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)

    def setPartOfValuesAdv(self, a, tuplesSelec):
        r"""
        setPartOfValuesAdv(DataArrayInt32 self, DataArrayInt32 a, DataArrayInt64 tuplesSelec)
        1
        """
        return _MEDCoupling.DataArrayInt32_setPartOfValuesAdv(self, a, tuplesSelec)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(DataArrayInt32 self, std::size_t tupleId, std::size_t compoId) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId, compoId):
        r"""
        getIJSafe(DataArrayInt32 self, std::size_t tupleId, std::size_t compoId) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getIJSafe(self, tupleId, compoId)

    def front(self):
        r"""
        front(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_front(self)

    def back(self):
        r"""
        back(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_back(self)

    def setIJ(self, tupleId, compoId, newVal):
        r"""
        setIJ(DataArrayInt32 self, mcIdType tupleId, mcIdType compoId, MEDCoupling::Int32 newVal)
        1
        """
        return _MEDCoupling.DataArrayInt32_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId, compoId, newVal):
        r"""
        setIJSilent(DataArrayInt32 self, mcIdType tupleId, mcIdType compoId, MEDCoupling::Int32 newVal)
        1
        """
        return _MEDCoupling.DataArrayInt32_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self):
        r"""
        getPointer(DataArrayInt32 self) -> MEDCoupling::Int32 *
        1
        """
        return _MEDCoupling.DataArrayInt32_getPointer(self)

    def getConstPointer(self):
        r"""
        getConstPointer(DataArrayInt32 self) -> MEDCoupling::Int32 const *
        1
        """
        return _MEDCoupling.DataArrayInt32_getConstPointer(self)

    def iterator(self):
        r"""
        iterator(DataArrayInt32 self) -> DataArrayInt32Iterator
        1
        """
        return _MEDCoupling.DataArrayInt32_iterator(self)

    def begin(self):
        r"""
        begin(DataArrayInt32 self) -> MEDCoupling::Int32 const *
        1
        """
        return _MEDCoupling.DataArrayInt32_begin(self)

    def end(self):
        r"""
        end(DataArrayInt32 self) -> MEDCoupling::Int32 const *
        1
        """
        return _MEDCoupling.DataArrayInt32_end(self)

    def findIdsEqual(self, val):
        r"""
        findIdsEqual(DataArrayInt32 self, MEDCoupling::Int32 val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsEqual(self, val)

    def findIdsNotEqual(self, val):
        r"""
        findIdsNotEqual(DataArrayInt32 self, MEDCoupling::Int32 val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsNotEqual(self, val)

    def changeValue(self, oldValue, newValue):
        r"""
        changeValue(DataArrayInt32 self, MEDCoupling::Int32 oldValue, MEDCoupling::Int32 newValue) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32_changeValue(self, oldValue, newValue)

    def findIdFirstEqualTuple(self, tupl):
        r"""
        findIdFirstEqualTuple(DataArrayInt32 self, i32vec tupl) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdFirstEqualTuple(self, tupl)

    def findIdFirstEqual(self, *args):
        r"""
        findIdFirstEqual(DataArrayInt32 self, MEDCoupling::Int32 value) -> mcIdType
        findIdFirstEqual(DataArrayInt32 self, i32vec vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdFirstEqual(self, *args)

    def findIdSequence(self, vals):
        r"""
        findIdSequence(DataArrayInt32 self, i32vec vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdSequence(self, vals)

    def presenceOfTuple(self, tupl):
        r"""
        presenceOfTuple(DataArrayInt32 self, i32vec tupl) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_presenceOfTuple(self, tupl)

    def presenceOfValue(self, *args):
        r"""
        presenceOfValue(DataArrayInt32 self, MEDCoupling::Int32 value) -> bool
        presenceOfValue(DataArrayInt32 self, i32vec vals) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_presenceOfValue(self, *args)

    def count(self, value):
        r"""
        count(DataArrayInt32 self, MEDCoupling::Int32 value) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_count(self, value)

    def getMaxValueInArray(self):
        r"""
        getMaxValueInArray(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getMaxValueInArray(self)

    def getMaxAbsValueInArray(self):
        r"""
        getMaxAbsValueInArray(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getMaxAbsValueInArray(self)

    def getMinValueInArray(self):
        r"""
        getMinValueInArray(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32_getMinValueInArray(self)

    def abs(self):
        r"""
        abs(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_abs(self)

    def sortPerTuple(self, asc):
        r"""
        sortPerTuple(DataArrayInt32 self, bool asc)
        1
        """
        return _MEDCoupling.DataArrayInt32_sortPerTuple(self, asc)

    def computeAbs(self):
        r"""
        computeAbs(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_computeAbs(self)

    def applyLin(self, *args):
        r"""
        applyLin(DataArrayInt32 self, MEDCoupling::Int32 a, MEDCoupling::Int32 b, MEDCoupling::Int32 compoId)
        applyLin(DataArrayInt32 self, MEDCoupling::Int32 a, MEDCoupling::Int32 b)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyLin(self, *args)

    def applyInv(self, numerator):
        r"""
        applyInv(DataArrayInt32 self, MEDCoupling::Int32 numerator)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyInv(self, numerator)

    def negate(self):
        r"""
        negate(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_negate(self)

    def applyDivideBy(self, val):
        r"""
        applyDivideBy(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyDivideBy(self, val)

    def applyModulus(self, val):
        r"""
        applyModulus(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyModulus(self, val)

    def applyRModulus(self, val):
        r"""
        applyRModulus(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyRModulus(self, val)

    def applyPow(self, val):
        r"""
        applyPow(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyPow(self, val)

    def applyRPow(self, val):
        r"""
        applyRPow(DataArrayInt32 self, MEDCoupling::Int32 val)
        1
        """
        return _MEDCoupling.DataArrayInt32_applyRPow(self, val)

    def findIdsInRange(self, vmin, vmax):
        r"""
        findIdsInRange(DataArrayInt32 self, MEDCoupling::Int32 vmin, MEDCoupling::Int32 vmax) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsInRange(self, vmin, vmax)

    def findIdsNotInRange(self, vmin, vmax):
        r"""
        findIdsNotInRange(DataArrayInt32 self, MEDCoupling::Int32 vmin, MEDCoupling::Int32 vmax) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsNotInRange(self, vmin, vmax)

    def findIdsStrictlyNegative(self):
        r"""
        findIdsStrictlyNegative(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsStrictlyNegative(self)

    def checkAllIdsInRange(self, vmin, vmax):
        r"""
        checkAllIdsInRange(DataArrayInt32 self, MEDCoupling::Int32 vmin, MEDCoupling::Int32 vmax) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_checkAllIdsInRange(self, vmin, vmax)

    @staticmethod
    def FindPermutationFromFirstToSecond(ids1, ids2):
        r"""
        FindPermutationFromFirstToSecond(DataArrayInt32 ids1, DataArrayInt32 ids2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_FindPermutationFromFirstToSecond(ids1, ids2)

    @staticmethod
    def FindPermutationFromFirstToSecondDuplicate(ids1, ids2):
        r"""
        FindPermutationFromFirstToSecondDuplicate(DataArrayInt32 ids1, DataArrayInt32 ids2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_FindPermutationFromFirstToSecondDuplicate(ids1, ids2)

    def buildComplement(self, nbOfElement):
        r"""
        buildComplement(DataArrayInt32 self, mcIdType nbOfElement) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_buildComplement(self, nbOfElement)

    def buildSubstraction(self, other):
        r"""
        buildSubstraction(DataArrayInt32 self, DataArrayInt32 other) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildSubstraction(self, other)

    def buildSubstractionOptimized(self, other):
        r"""
        buildSubstractionOptimized(DataArrayInt32 self, DataArrayInt32 other) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildSubstractionOptimized(self, other)

    def buildUnion(self, other):
        r"""
        buildUnion(DataArrayInt32 self, DataArrayInt32 other) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildUnion(self, other)

    def buildIntersection(self, other):
        r"""
        buildIntersection(DataArrayInt32 self, DataArrayInt32 other) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildIntersection(self, other)

    def indexOfSameConsecutiveValueGroups(self):
        r"""
        indexOfSameConsecutiveValueGroups(DataArrayInt32 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_indexOfSameConsecutiveValueGroups(self)

    def buildUnique(self):
        r"""
        buildUnique(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildUnique(self)

    def buildUniqueNotSorted(self):
        r"""
        buildUniqueNotSorted(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildUniqueNotSorted(self)

    def deltaShiftIndex(self):
        r"""
        deltaShiftIndex(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_deltaShiftIndex(self)

    def computeOffsets(self):
        r"""
        computeOffsets(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_computeOffsets(self)

    def computeOffsetsFull(self):
        r"""
        computeOffsetsFull(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_computeOffsetsFull(self)

    def buildExplicitArrByRanges(self, offsets):
        r"""
        buildExplicitArrByRanges(DataArrayInt32 self, DataArrayInt32 offsets) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildExplicitArrByRanges(self, offsets)

    def findRangeIdForEachTuple(self, ranges):
        r"""
        findRangeIdForEachTuple(DataArrayInt32 self, DataArrayInt32 ranges) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findRangeIdForEachTuple(self, ranges)

    def findIdInRangeForEachTuple(self, ranges):
        r"""
        findIdInRangeForEachTuple(DataArrayInt32 self, DataArrayInt32 ranges) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdInRangeForEachTuple(self, ranges)

    def sortEachPairToMakeALinkedList(self):
        r"""
        sortEachPairToMakeALinkedList(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_sortEachPairToMakeALinkedList(self)

    def sortToHaveConsecutivePairs(self):
        r"""
        sortToHaveConsecutivePairs(DataArrayInt32 self)
        1
        """
        return _MEDCoupling.DataArrayInt32_sortToHaveConsecutivePairs(self)

    def duplicateEachTupleNTimes(self, nbTimes):
        r"""
        duplicateEachTupleNTimes(DataArrayInt32 self, mcIdType nbTimes) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_duplicateEachTupleNTimes(self, nbTimes)

    def duplicateNTimes(self, nbTimes):
        r"""
        duplicateNTimes(DataArrayInt32 self, mcIdType nbTimes) -> MCAuto< MEDCoupling::DataArrayInt32 >
        1
        """
        return _MEDCoupling.DataArrayInt32_duplicateNTimes(self, nbTimes)

    def getDifferentValues(self):
        r"""
        getDifferentValues(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_getDifferentValues(self)

    @staticmethod
    def Add(a1, a2):
        r"""
        Add(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Add(a1, a2)

    def addEqual(self, other):
        r"""
        addEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_addEqual(self, other)

    @staticmethod
    def Substract(a1, a2):
        r"""
        Substract(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Substract(a1, a2)

    def substractEqual(self, other):
        r"""
        substractEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_substractEqual(self, other)

    @staticmethod
    def Multiply(a1, a2):
        r"""
        Multiply(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Multiply(a1, a2)

    def multiplyEqual(self, other):
        r"""
        multiplyEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_multiplyEqual(self, other)

    @staticmethod
    def Divide(a1, a2):
        r"""
        Divide(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Divide(a1, a2)

    def divideEqual(self, other):
        r"""
        divideEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_divideEqual(self, other)

    @staticmethod
    def Modulus(a1, a2):
        r"""
        Modulus(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Modulus(a1, a2)

    def modulusEqual(self, other):
        r"""
        modulusEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_modulusEqual(self, other)

    @staticmethod
    def Pow(a1, a2):
        r"""
        Pow(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Pow(a1, a2)

    def powEqual(self, other):
        r"""
        powEqual(DataArrayInt32 self, DataArrayInt32 other)
        1
        """
        return _MEDCoupling.DataArrayInt32_powEqual(self, other)

    @staticmethod
    def LoadForDbg(fileName):
        r"""
        LoadForDbg(std::string const & fileName) -> MCAuto< MEDCoupling::DataArrayInt32 >
        1
        """
        return _MEDCoupling.DataArrayInt32_LoadForDbg(fileName)

    def writeForDbg(self, fileName):
        r"""
        writeForDbg(DataArrayInt32 self, std::string const & fileName)
        1
        """
        return _MEDCoupling.DataArrayInt32_writeForDbg(self, fileName)

    def fromLinkedListOfPairToList(self):
        r"""
        fromLinkedListOfPairToList(DataArrayInt32 self) -> MCAuto< MEDCoupling::DataArrayInt32 >
        1
        """
        return _MEDCoupling.DataArrayInt32_fromLinkedListOfPairToList(self)

    def findIdsGreaterOrEqualTo(self, val):
        r"""
        findIdsGreaterOrEqualTo(DataArrayInt32 self, MEDCoupling::Int32 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsGreaterOrEqualTo(self, val)

    def findIdsGreaterThan(self, val):
        r"""
        findIdsGreaterThan(DataArrayInt32 self, MEDCoupling::Int32 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsGreaterThan(self, val)

    def findIdsLowerOrEqualTo(self, val):
        r"""
        findIdsLowerOrEqualTo(DataArrayInt32 self, MEDCoupling::Int32 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsLowerOrEqualTo(self, val)

    def findIdsLowerThan(self, val):
        r"""
        findIdsLowerThan(DataArrayInt32 self, MEDCoupling::Int32 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsLowerThan(self, val)

    def selectPartDef(self, pd):
        r"""
        selectPartDef(DataArrayInt32 self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayInt32 >
        1
        """
        return _MEDCoupling.DataArrayInt32_selectPartDef(self, pd)

    def convertToDblArr(self):
        r"""
        convertToDblArr(DataArrayInt32 self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayInt32_convertToDblArr(self)

    def convertToFloatArr(self):
        r"""
        convertToFloatArr(DataArrayInt32 self) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCoupling.DataArrayInt32_convertToFloatArr(self)

    @staticmethod
    def Range(begin, end, step):
        r"""
        Range(MEDCoupling::Int32 begin, MEDCoupling::Int32 end, MEDCoupling::Int32 step) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Range(begin, end, step)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayInt32
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayInt32 self) -> DataArrayInt32
        __init__(DataArrayInt32 self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt32
        1
        """
        _MEDCoupling.DataArrayInt32_swiginit(self, _MEDCoupling.new_DataArrayInt32(*args))

    def __str__(self):
        r"""
        __str__(DataArrayInt32 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32___str__(self)

    def __len__(self):
        r"""
        __len__(DataArrayInt32 self) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32___len__(self)

    def __int__(self):
        r"""
        __int__(DataArrayInt32 self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32___int__(self)

    def __iter__(self):
        r"""
        __iter__(DataArrayInt32 self) -> DataArrayInt32Iterator
        1
        """
        return _MEDCoupling.DataArrayInt32___iter__(self)

    def accumulate(self, *args):
        r"""
        accumulate(DataArrayInt32 self, MEDCoupling::Int32 compId) -> MEDCoupling::Int32
        accumulate(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_accumulate(self, *args)

    def accumulatePerChunck(self, indexArr):
        r"""
        accumulatePerChunck(DataArrayInt32 self, PyObject * indexArr) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_accumulatePerChunck(self, indexArr)

    def findIdsEqualTuple(self, inputTuple):
        r"""
        findIdsEqualTuple(DataArrayInt32 self, PyObject * inputTuple) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsEqualTuple(self, inputTuple)

    def findIdForEach(self, vals):
        r"""
        findIdForEach(DataArrayInt32 self, PyObject * vals) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdForEach(self, vals)

    def splitInBalancedSlices(self, nbOfSlices):
        r"""
        splitInBalancedSlices(DataArrayInt32 self, mcIdType nbOfSlices) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_splitInBalancedSlices(self, nbOfSlices)

    def buildExplicitArrOfSliceOnScaledArr(self, slic):
        r"""
        buildExplicitArrOfSliceOnScaledArr(DataArrayInt32 self, PyObject * slic) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_buildExplicitArrOfSliceOnScaledArr(self, slic)

    def getMinMaxValues(self):
        r"""
        getMinMaxValues(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getMinMaxValues(self)

    @staticmethod
    def ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI):
        r"""
        ConvertIndexArrayToO2N(mcIdType nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

    @staticmethod
    def CheckAndPreparePermutation(arr):
        r"""
        CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_CheckAndPreparePermutation(arr)

    def setValues(self, li, nbOfTuples=None, nbOfComp=None):
        r"""
        setValues(DataArrayInt32 self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCoupling.DataArrayInt32_setValues(self, li, nbOfTuples, nbOfComp)

    def getValues(self):
        r"""
        getValues(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getValues(self)

    def isEqualIfNotWhy(self, other):
        r"""
        isEqualIfNotWhy(DataArrayInt32 self, DataArrayInt32 other) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_isEqualIfNotWhy(self, other)

    def getValuesAsTuple(self):
        r"""
        getValuesAsTuple(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getValuesAsTuple(self)

    @staticmethod
    def MakePartition(*args):
        r"""
        MakePartition(std::vector< MEDCoupling::DataArrayInt32 const *,std::allocator< MEDCoupling::DataArrayInt32 const * > > const & groups, mcIdType newNb, std::vector< std::vector< mcIdType,std::allocator< mcIdType > >,std::allocator< std::vector< mcIdType,std::allocator< mcIdType > > > > & fidsOfGroups) -> DataArrayInt64
        MakePartition(PyObject * gps, mcIdType newNb) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_MakePartition(*args)

    def findIdsEqualList(self, obj):
        r"""
        findIdsEqualList(DataArrayInt32 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsEqualList(self, obj)

    def findIdsNotEqualList(self, obj):
        r"""
        findIdsNotEqualList(DataArrayInt32 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsNotEqualList(self, obj)

    def splitByValueRange(self, li):
        r"""
        splitByValueRange(DataArrayInt32 self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_splitByValueRange(self, li)

    def transformWithIndArrR(self, li):
        r"""
        transformWithIndArrR(DataArrayInt32 self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_transformWithIndArrR(self, li)

    def renumberAndReduce(self, li, newNbOfTuple):
        r"""
        renumberAndReduce(DataArrayInt32 self, PyObject * li, mcIdType newNbOfTuple) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_renumberAndReduce(self, li, newNbOfTuple)

    def renumber(self, li):
        r"""
        renumber(DataArrayInt32 self, PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_renumber(self, li)

    def renumberR(self, li):
        r"""
        renumberR(DataArrayInt32 self, PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_renumberR(self, li)

    def setSelectedComponents(self, a, li):
        r"""
        setSelectedComponents(DataArrayInt32 self, DataArrayInt32 a, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayInt32_setSelectedComponents(self, a, li)

    def explodeComponents(self):
        r"""
        explodeComponents(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_explodeComponents(self)

    def getTuple(self, *args):
        r"""
        getTuple(DataArrayInt32 self, mcIdType tupleId, MEDCoupling::Int32 * res)
        getTuple(DataArrayInt32 self, mcIdType tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getTuple(self, *args)

    def changeSurjectiveFormat(self, targetNb):
        r"""
        changeSurjectiveFormat(DataArrayInt32 self, MEDCoupling::Int32 targetNb) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_changeSurjectiveFormat(self, targetNb)

    @staticmethod
    def Meld(*args):
        r"""
        Meld(DataArrayInt32 a1, DataArrayInt32 a2) -> DataArrayInt32
        Meld(PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Meld(*args)

    @staticmethod
    def Aggregate(*args):
        r"""
        Aggregate(DataArrayInt32 a1, DataArrayInt32 a2, MEDCoupling::Int32 offsetA2) -> DataArrayInt32
        Aggregate(PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_Aggregate(*args)

    @staticmethod
    def AggregateIndexes(li):
        r"""
        AggregateIndexes(PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_AggregateIndexes(li)

    @staticmethod
    def BuildUnion(*args):
        r"""
        BuildUnion(std::vector< MEDCoupling::DataArrayInt32 const *,std::allocator< MEDCoupling::DataArrayInt32 const * > > const & arr) -> DataArrayInt32
        BuildUnion(PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_BuildUnion(*args)

    @staticmethod
    def BuildIntersection(*args):
        r"""
        BuildIntersection(std::vector< MEDCoupling::DataArrayInt32 const *,std::allocator< MEDCoupling::DataArrayInt32 const * > > const & arr) -> DataArrayInt32
        BuildIntersection(PyObject * li) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32_BuildIntersection(*args)

    def getMaxValue(self):
        r"""
        getMaxValue(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getMaxValue(self)

    def getMaxAbsValue(self, tupleId):
        r"""
        getMaxAbsValue(DataArrayInt32 self, std::size_t & tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getMaxAbsValue(self, tupleId)

    def getMinValue(self):
        r"""
        getMinValue(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_getMinValue(self)

    def index(self, obj):
        r"""
        index(DataArrayInt32 self, PyObject * obj) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt32_index(self, obj)

    def __contains__(self, obj):
        r"""
        __contains__(DataArrayInt32 self, PyObject * obj) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32___contains__(self, obj)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayInt32 self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayInt32 self, PyObject * obj, PyObject * value) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___setitem__(self, obj, value)

    def __neg__(self):
        r"""
        __neg__(DataArrayInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___neg__(self)

    def __add__(self, obj):
        r"""
        __add__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___add__(self, obj)

    def __radd__(self, obj):
        r"""
        __radd__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___radd__(self, obj)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____iadd___(self, trueSelf, obj)

    def __sub__(self, obj):
        r"""
        __sub__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___sub__(self, obj)

    def __rsub__(self, obj):
        r"""
        __rsub__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___rsub__(self, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____isub___(self, trueSelf, obj)

    def __mul__(self, obj):
        r"""
        __mul__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___mul__(self, obj)

    def __rmul__(self, obj):
        r"""
        __rmul__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___rmul__(self, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____imul___(self, trueSelf, obj)

    def __div__(self, obj):
        r"""
        __div__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___div__(self, obj)

    def __rdiv__(self, obj):
        r"""
        __rdiv__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___rdiv__(self, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____idiv___(self, trueSelf, obj)

    def __mod__(self, obj):
        r"""
        __mod__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___mod__(self, obj)

    def __rmod__(self, obj):
        r"""
        __rmod__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___rmod__(self, obj)

    def ___imod___(self, trueSelf, obj):
        r"""
        ___imod___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____imod___(self, trueSelf, obj)

    def __pow__(self, obj):
        r"""
        __pow__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___pow__(self, obj)

    def __rpow__(self, obj):
        r"""
        __rpow__(DataArrayInt32 self, PyObject * obj) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32___rpow__(self, obj)

    def ___ipow___(self, trueSelf, obj):
        r"""
        ___ipow___(DataArrayInt32 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32____ipow___(self, trueSelf, obj)

    def __repr__(self):
        r"""
        __repr__(DataArrayInt32 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32___repr__(self)

    def pushBackValsSilent(self, li):
        r"""
        pushBackValsSilent(DataArrayInt32 self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayInt32_pushBackValsSilent(self, li)

    def partitionByDifferentValues(self):
        r"""
        partitionByDifferentValues(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_partitionByDifferentValues(self)

    def locateComponentId(self, valToSearchIntoTuples, tupleIdHint):
        r"""
        locateComponentId(DataArrayInt32 self, DataArrayInt32 valToSearchIntoTuples, DataArrayInt64 tupleIdHint) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_locateComponentId(self, valToSearchIntoTuples, tupleIdHint)

    def findIdsRangesInListOfIds(self, listOfIds):
        r"""
        findIdsRangesInListOfIds(DataArrayInt32 self, DataArrayInt32 listOfIds) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_findIdsRangesInListOfIds(self, listOfIds)

    def forThisAsPartitionBuildReduction(self, commonEntities, commonEntitiesIndex):
        r"""
        forThisAsPartitionBuildReduction(DataArrayInt32 self, DataArrayInt64 commonEntities, DataArrayInt64 commonEntitiesIndex) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_forThisAsPartitionBuildReduction(self, commonEntities, commonEntitiesIndex)

    def fromListOfPairsToIndexArray(self):
        r"""
        fromListOfPairsToIndexArray(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_fromListOfPairsToIndexArray(self)

    def isRange(self):
        r"""
        isRange(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_isRange(self)

    @staticmethod
    def RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval=0):
        r"""
        RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt32 arr, DataArrayInt64 arrIndx, mcIdType offsetForRemoval=0) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt32_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

    def findCommonTuples(self, limitNodeId=-1):
        r"""
        findCommonTuples(DataArrayInt32 self, mcIdType limitNodeId=-1) -> PyObject
        1
        """
        return _MEDCoupling.DataArrayInt32_findCommonTuples(self, limitNodeId)

    @staticmethod
    def ExtractFromIndexedArrays(li, arrIn, arrIndxIn):
        r"""
        ExtractFromIndexedArrays(PyObject * li, DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

    @staticmethod
    def ExtractFromIndexedArraysSlice(*args):
        r"""
        ExtractFromIndexedArraysSlice(mcIdType strt, mcIdType stp, mcIdType step, DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn) -> PyObject
        ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_ExtractFromIndexedArraysSlice(*args)

    @staticmethod
    def SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex):
        r"""
        SetPartOfIndexedArrays(PyObject * li, DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt32 srcArr, DataArrayInt64 srcArrIndex) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    @staticmethod
    def FromVTKInternalReprOfPolyedra(arrIn, arrIndxIn):
        r"""
        FromVTKInternalReprOfPolyedra(DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_FromVTKInternalReprOfPolyedra(arrIn, arrIndxIn)

    @staticmethod
    def FromVTK94InternalReprOfPolyedra(arrIn, arrIndxIn, arrIndxIn2):
        r"""
        FromVTK94InternalReprOfPolyedra(DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt64 arrIndxIn2) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_FromVTK94InternalReprOfPolyedra(arrIn, arrIndxIn, arrIndxIn2)

    @staticmethod
    def FromVTK93To94FacesInternaReprOfPolyedra(arrIn, arrIndxIn):
        r"""
        FromVTK93To94FacesInternaReprOfPolyedra(DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_FromVTK93To94FacesInternaReprOfPolyedra(arrIn, arrIndxIn)

    @staticmethod
    def SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex):
        r"""
        SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt32 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt32 srcArr, DataArrayInt64 srcArrIndex)
        1
        """
        return _MEDCoupling.DataArrayInt32_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    def convertToInt64Arr(self):
        r"""
        convertToInt64Arr(DataArrayInt32 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt32_convertToInt64Arr(self)

    def toNumPyArray(self):
        r"""
        toNumPyArray(DataArrayInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32_toNumPyArray(self)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt32

# Register DataArrayInt32 in _MEDCoupling:
_MEDCoupling.DataArrayInt32_swigregister(DataArrayInt32)
class DataArrayInt32Iterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayInt32Iterator self, DataArrayInt32 da) -> DataArrayInt32Iterator
        1
        """
        _MEDCoupling.DataArrayInt32Iterator_swiginit(self, _MEDCoupling.new_DataArrayInt32Iterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt32Iterator

    def next(self):
        r"""
        next(DataArrayInt32Iterator self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Iterator_next(self)

# Register DataArrayInt32Iterator in _MEDCoupling:
_MEDCoupling.DataArrayInt32Iterator_swigregister(DataArrayInt32Iterator)
class DataArrayInt32Tuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self):
        r"""
        getNumberOfCompo(DataArrayInt32Tuple self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple_getNumberOfCompo(self)

    def __str__(self):
        r"""
        __str__(DataArrayInt32Tuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple___str__(self)

    def __int__(self):
        r"""
        __int__(DataArrayInt32Tuple self) -> MEDCoupling::Int32
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple___int__(self)

    def buildDAInt(self, *args):
        r"""
        buildDAInt(DataArrayInt32Tuple self, MEDCoupling::Int32 nbOfTuples, MEDCoupling::Int32 nbOfCompo) -> DataArrayInt32
        buildDAInt(DataArrayInt32Tuple self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple_buildDAInt(self, *args)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayInt32Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayInt32Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayInt32Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayInt32Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple____idiv___(self, trueSelf, obj)

    def ___imod___(self, trueSelf, obj):
        r"""
        ___imod___(DataArrayInt32Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple____imod___(self, trueSelf, obj)

    def __len__(self):
        r"""
        __len__(DataArrayInt32Tuple self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple___len__(self)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayInt32Tuple self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayInt32Tuple self, PyObject * obj, PyObject * value) -> DataArrayInt32Tuple
        1
        """
        return _MEDCoupling.DataArrayInt32Tuple___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt32Tuple

# Register DataArrayInt32Tuple in _MEDCoupling:
_MEDCoupling.DataArrayInt32Tuple_swigregister(DataArrayInt32Tuple)
class DataArrayInt64(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def intValue(self):
        r"""
        intValue(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_intValue(self)

    def getHashCode(self):
        r"""
        getHashCode(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getHashCode(self)

    def empty(self):
        r"""
        empty(DataArrayInt64 self) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_empty(self)

    def aggregate(self, other):
        r"""
        aggregate(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_aggregate(self, other)

    def performCopyOrIncrRef(self, deepCopy):
        r"""
        performCopyOrIncrRef(DataArrayInt64 self, bool deepCopy) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_performCopyOrIncrRef(self, deepCopy)

    def deepCopyFrom(self, other):
        r"""
        deepCopyFrom(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_deepCopyFrom(self, other)

    def reserve(self, nbOfElems):
        r"""
        reserve(DataArrayInt64 self, std::size_t nbOfElems)
        1
        """
        return _MEDCoupling.DataArrayInt64_reserve(self, nbOfElems)

    def pushBackSilent(self, val):
        r"""
        pushBackSilent(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_pushBackSilent(self, val)

    def popBackSilent(self):
        r"""
        popBackSilent(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_popBackSilent(self)

    def pack(self):
        r"""
        pack(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_pack(self)

    def allocIfNecessary(self, nbOfTuple, nbOfCompo):
        r"""
        allocIfNecessary(DataArrayInt64 self, MEDCoupling::Int64 nbOfTuple, MEDCoupling::Int64 nbOfCompo)
        1
        """
        return _MEDCoupling.DataArrayInt64_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def isEqual(self, other):
        r"""
        isEqual(DataArrayInt64 self, DataArrayInt64 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isEqual(self, other)

    def isEqualWithoutConsideringStr(self, other):
        r"""
        isEqualWithoutConsideringStr(DataArrayInt64 self, DataArrayInt64 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isEqualWithoutConsideringStr(self, other)

    def isEqualWithoutConsideringStrAndOrder(self, other):
        r"""
        isEqualWithoutConsideringStrAndOrder(DataArrayInt64 self, DataArrayInt64 other) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isEqualWithoutConsideringStrAndOrder(self, other)

    def occurenceRankInThis(self):
        r"""
        occurenceRankInThis(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_occurenceRankInThis(self)

    def buildPermutationArr(self, other):
        r"""
        buildPermutationArr(DataArrayInt64 self, DataArrayInt64 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildPermutationArr(self, other)

    def sumPerTuple(self):
        r"""
        sumPerTuple(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_sumPerTuple(self)

    def sort(self, asc=True):
        r"""
        sort(DataArrayInt64 self, bool asc=True)
        1
        """
        return _MEDCoupling.DataArrayInt64_sort(self, asc)

    def reverse(self):
        r"""
        reverse(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_reverse(self)

    def checkMonotonic(self, increasing):
        r"""
        checkMonotonic(DataArrayInt64 self, bool increasing)
        1
        """
        return _MEDCoupling.DataArrayInt64_checkMonotonic(self, increasing)

    def isMonotonic(self, increasing):
        r"""
        isMonotonic(DataArrayInt64 self, bool increasing) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isMonotonic(self, increasing)

    def checkStrictlyMonotonic(self, increasing):
        r"""
        checkStrictlyMonotonic(DataArrayInt64 self, bool increasing)
        1
        """
        return _MEDCoupling.DataArrayInt64_checkStrictlyMonotonic(self, increasing)

    def isStrictlyMonotonic(self, increasing):
        r"""
        isStrictlyMonotonic(DataArrayInt64 self, bool increasing) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isStrictlyMonotonic(self, increasing)

    def fillWithZero(self):
        r"""
        fillWithZero(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_fillWithZero(self)

    def fillWithValue(self, val):
        r"""
        fillWithValue(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_fillWithValue(self, val)

    def iota(self, init=0):
        r"""
        iota(DataArrayInt64 self, MEDCoupling::Int64 init=0)
        1
        """
        return _MEDCoupling.DataArrayInt64_iota(self, init)

    def repr(self):
        r"""
        repr(DataArrayInt64 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64_repr(self)

    def reprZip(self):
        r"""
        reprZip(DataArrayInt64 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64_reprZip(self)

    def reprNotTooLong(self):
        r"""
        reprNotTooLong(DataArrayInt64 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64_reprNotTooLong(self)

    def invertArrayO2N2N2O(self, newNbOfElem):
        r"""
        invertArrayO2N2N2O(DataArrayInt64 self, mcIdType newNbOfElem) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_invertArrayO2N2N2O(self, newNbOfElem)

    def invertArrayN2O2O2N(self, oldNbOfElem):
        r"""
        invertArrayN2O2O2N(DataArrayInt64 self, mcIdType oldNbOfElem) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_invertArrayN2O2O2N(self, oldNbOfElem)

    def invertArrayO2N2N2OBis(self, newNbOfElem):
        r"""
        invertArrayO2N2N2OBis(DataArrayInt64 self, mcIdType newNbOfElem) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_invertArrayO2N2N2OBis(self, newNbOfElem)

    def indicesOfSubPart(self, partOfThis):
        r"""
        indicesOfSubPart(DataArrayInt64 self, DataArrayInt64 partOfThis) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_indicesOfSubPart(self, partOfThis)

    def fromNoInterlace(self):
        r"""
        fromNoInterlace(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_fromNoInterlace(self)

    def toNoInterlace(self):
        r"""
        toNoInterlace(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_toNoInterlace(self)

    def selectByTupleIdSafeSlice(self, bg, end, step):
        r"""
        selectByTupleIdSafeSlice(DataArrayInt64 self, mcIdType bg, mcIdType end, mcIdType step) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_selectByTupleIdSafeSlice(self, bg, end, step)

    def checkAndPreparePermutation(self):
        r"""
        checkAndPreparePermutation(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self):
        r"""
        buildPermArrPerLevel(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildPermArrPerLevel(self)

    def isIota(self, sizeExpected):
        r"""
        isIota(DataArrayInt64 self, mcIdType sizeExpected) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isIota(self, sizeExpected)

    def isUniform(self, val):
        r"""
        isUniform(DataArrayInt64 self, MEDCoupling::Int64 val) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_isUniform(self, val)

    def checkUniformAndGuess(self):
        r"""
        checkUniformAndGuess(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_checkUniformAndGuess(self)

    def hasUniqueValues(self):
        r"""
        hasUniqueValues(DataArrayInt64 self) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_hasUniqueValues(self)

    def subArray(self, tupleIdBg, tupleIdEnd=-1):
        r"""
        subArray(DataArrayInt64 self, mcIdType tupleIdBg, mcIdType tupleIdEnd=-1) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_subArray(self, tupleIdBg, tupleIdEnd)

    def transpose(self):
        r"""
        transpose(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_transpose(self)

    def changeNbOfComponents(self, newNbOfComp, dftValue):
        r"""
        changeNbOfComponents(DataArrayInt64 self, std::size_t newNbOfComp, MEDCoupling::Int64 dftValue) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other):
        r"""
        meldWith(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_meldWith(self, other)

    def setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare=True):
        r"""
        setPartOfValues1(DataArrayInt64 self, DataArrayInt64 a, mcIdType bgTuples, mcIdType endTuples, mcIdType stepTuples, mcIdType bgComp, mcIdType endComp, mcIdType stepComp, bool strictCompoCompare=True)
        1
        """
        return _MEDCoupling.DataArrayInt64_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)

    def setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp):
        r"""
        setPartOfValuesSimple1(DataArrayInt64 self, MEDCoupling::Int64 a, mcIdType bgTuples, mcIdType endTuples, mcIdType stepTuples, mcIdType bgComp, mcIdType endComp, mcIdType stepComp)
        1
        """
        return _MEDCoupling.DataArrayInt64_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)

    def setPartOfValuesAdv(self, a, tuplesSelec):
        r"""
        setPartOfValuesAdv(DataArrayInt64 self, DataArrayInt64 a, DataArrayInt64 tuplesSelec)
        1
        """
        return _MEDCoupling.DataArrayInt64_setPartOfValuesAdv(self, a, tuplesSelec)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(DataArrayInt64 self, std::size_t tupleId, std::size_t compoId) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId, compoId):
        r"""
        getIJSafe(DataArrayInt64 self, std::size_t tupleId, std::size_t compoId) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getIJSafe(self, tupleId, compoId)

    def front(self):
        r"""
        front(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_front(self)

    def back(self):
        r"""
        back(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_back(self)

    def setIJ(self, tupleId, compoId, newVal):
        r"""
        setIJ(DataArrayInt64 self, mcIdType tupleId, mcIdType compoId, MEDCoupling::Int64 newVal)
        1
        """
        return _MEDCoupling.DataArrayInt64_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId, compoId, newVal):
        r"""
        setIJSilent(DataArrayInt64 self, mcIdType tupleId, mcIdType compoId, MEDCoupling::Int64 newVal)
        1
        """
        return _MEDCoupling.DataArrayInt64_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self):
        r"""
        getPointer(DataArrayInt64 self) -> MEDCoupling::Int64 *
        1
        """
        return _MEDCoupling.DataArrayInt64_getPointer(self)

    def getConstPointer(self):
        r"""
        getConstPointer(DataArrayInt64 self) -> MEDCoupling::Int64 const *
        1
        """
        return _MEDCoupling.DataArrayInt64_getConstPointer(self)

    def iterator(self):
        r"""
        iterator(DataArrayInt64 self) -> DataArrayInt64Iterator
        1
        """
        return _MEDCoupling.DataArrayInt64_iterator(self)

    def begin(self):
        r"""
        begin(DataArrayInt64 self) -> MEDCoupling::Int64 const *
        1
        """
        return _MEDCoupling.DataArrayInt64_begin(self)

    def end(self):
        r"""
        end(DataArrayInt64 self) -> MEDCoupling::Int64 const *
        1
        """
        return _MEDCoupling.DataArrayInt64_end(self)

    def findIdsEqual(self, val):
        r"""
        findIdsEqual(DataArrayInt64 self, MEDCoupling::Int64 val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsEqual(self, val)

    def findIdsNotEqual(self, val):
        r"""
        findIdsNotEqual(DataArrayInt64 self, MEDCoupling::Int64 val) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsNotEqual(self, val)

    def changeValue(self, oldValue, newValue):
        r"""
        changeValue(DataArrayInt64 self, MEDCoupling::Int64 oldValue, MEDCoupling::Int64 newValue) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64_changeValue(self, oldValue, newValue)

    def findIdFirstEqualTuple(self, tupl):
        r"""
        findIdFirstEqualTuple(DataArrayInt64 self, ivec tupl) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdFirstEqualTuple(self, tupl)

    def findIdFirstEqual(self, *args):
        r"""
        findIdFirstEqual(DataArrayInt64 self, MEDCoupling::Int64 value) -> mcIdType
        findIdFirstEqual(DataArrayInt64 self, ivec vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdFirstEqual(self, *args)

    def findIdSequence(self, vals):
        r"""
        findIdSequence(DataArrayInt64 self, ivec vals) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdSequence(self, vals)

    def presenceOfTuple(self, tupl):
        r"""
        presenceOfTuple(DataArrayInt64 self, ivec tupl) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_presenceOfTuple(self, tupl)

    def presenceOfValue(self, *args):
        r"""
        presenceOfValue(DataArrayInt64 self, MEDCoupling::Int64 value) -> bool
        presenceOfValue(DataArrayInt64 self, ivec vals) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_presenceOfValue(self, *args)

    def count(self, value):
        r"""
        count(DataArrayInt64 self, MEDCoupling::Int64 value) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_count(self, value)

    def getMaxValueInArray(self):
        r"""
        getMaxValueInArray(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getMaxValueInArray(self)

    def getMaxAbsValueInArray(self):
        r"""
        getMaxAbsValueInArray(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getMaxAbsValueInArray(self)

    def getMinValueInArray(self):
        r"""
        getMinValueInArray(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64_getMinValueInArray(self)

    def abs(self):
        r"""
        abs(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_abs(self)

    def sortPerTuple(self, asc):
        r"""
        sortPerTuple(DataArrayInt64 self, bool asc)
        1
        """
        return _MEDCoupling.DataArrayInt64_sortPerTuple(self, asc)

    def computeAbs(self):
        r"""
        computeAbs(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_computeAbs(self)

    def applyLin(self, *args):
        r"""
        applyLin(DataArrayInt64 self, MEDCoupling::Int64 a, MEDCoupling::Int64 b, MEDCoupling::Int64 compoId)
        applyLin(DataArrayInt64 self, MEDCoupling::Int64 a, MEDCoupling::Int64 b)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyLin(self, *args)

    def applyInv(self, numerator):
        r"""
        applyInv(DataArrayInt64 self, MEDCoupling::Int64 numerator)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyInv(self, numerator)

    def negate(self):
        r"""
        negate(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_negate(self)

    def applyDivideBy(self, val):
        r"""
        applyDivideBy(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyDivideBy(self, val)

    def applyModulus(self, val):
        r"""
        applyModulus(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyModulus(self, val)

    def applyRModulus(self, val):
        r"""
        applyRModulus(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyRModulus(self, val)

    def applyPow(self, val):
        r"""
        applyPow(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyPow(self, val)

    def applyRPow(self, val):
        r"""
        applyRPow(DataArrayInt64 self, MEDCoupling::Int64 val)
        1
        """
        return _MEDCoupling.DataArrayInt64_applyRPow(self, val)

    def findIdsInRange(self, vmin, vmax):
        r"""
        findIdsInRange(DataArrayInt64 self, MEDCoupling::Int64 vmin, MEDCoupling::Int64 vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsInRange(self, vmin, vmax)

    def findIdsNotInRange(self, vmin, vmax):
        r"""
        findIdsNotInRange(DataArrayInt64 self, MEDCoupling::Int64 vmin, MEDCoupling::Int64 vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsNotInRange(self, vmin, vmax)

    def findIdsStrictlyNegative(self):
        r"""
        findIdsStrictlyNegative(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsStrictlyNegative(self)

    def checkAllIdsInRange(self, vmin, vmax):
        r"""
        checkAllIdsInRange(DataArrayInt64 self, MEDCoupling::Int64 vmin, MEDCoupling::Int64 vmax) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_checkAllIdsInRange(self, vmin, vmax)

    @staticmethod
    def FindPermutationFromFirstToSecond(ids1, ids2):
        r"""
        FindPermutationFromFirstToSecond(DataArrayInt64 ids1, DataArrayInt64 ids2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_FindPermutationFromFirstToSecond(ids1, ids2)

    @staticmethod
    def FindPermutationFromFirstToSecondDuplicate(ids1, ids2):
        r"""
        FindPermutationFromFirstToSecondDuplicate(DataArrayInt64 ids1, DataArrayInt64 ids2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_FindPermutationFromFirstToSecondDuplicate(ids1, ids2)

    def buildComplement(self, nbOfElement):
        r"""
        buildComplement(DataArrayInt64 self, mcIdType nbOfElement) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildComplement(self, nbOfElement)

    def buildSubstraction(self, other):
        r"""
        buildSubstraction(DataArrayInt64 self, DataArrayInt64 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildSubstraction(self, other)

    def buildSubstractionOptimized(self, other):
        r"""
        buildSubstractionOptimized(DataArrayInt64 self, DataArrayInt64 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildSubstractionOptimized(self, other)

    def buildUnion(self, other):
        r"""
        buildUnion(DataArrayInt64 self, DataArrayInt64 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildUnion(self, other)

    def buildIntersection(self, other):
        r"""
        buildIntersection(DataArrayInt64 self, DataArrayInt64 other) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildIntersection(self, other)

    def indexOfSameConsecutiveValueGroups(self):
        r"""
        indexOfSameConsecutiveValueGroups(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_indexOfSameConsecutiveValueGroups(self)

    def buildUnique(self):
        r"""
        buildUnique(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildUnique(self)

    def buildUniqueNotSorted(self):
        r"""
        buildUniqueNotSorted(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildUniqueNotSorted(self)

    def deltaShiftIndex(self):
        r"""
        deltaShiftIndex(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_deltaShiftIndex(self)

    def computeOffsets(self):
        r"""
        computeOffsets(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_computeOffsets(self)

    def computeOffsetsFull(self):
        r"""
        computeOffsetsFull(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_computeOffsetsFull(self)

    def buildExplicitArrByRanges(self, offsets):
        r"""
        buildExplicitArrByRanges(DataArrayInt64 self, DataArrayInt64 offsets) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildExplicitArrByRanges(self, offsets)

    def findRangeIdForEachTuple(self, ranges):
        r"""
        findRangeIdForEachTuple(DataArrayInt64 self, DataArrayInt64 ranges) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findRangeIdForEachTuple(self, ranges)

    def findIdInRangeForEachTuple(self, ranges):
        r"""
        findIdInRangeForEachTuple(DataArrayInt64 self, DataArrayInt64 ranges) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdInRangeForEachTuple(self, ranges)

    def sortEachPairToMakeALinkedList(self):
        r"""
        sortEachPairToMakeALinkedList(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_sortEachPairToMakeALinkedList(self)

    def sortToHaveConsecutivePairs(self):
        r"""
        sortToHaveConsecutivePairs(DataArrayInt64 self)
        1
        """
        return _MEDCoupling.DataArrayInt64_sortToHaveConsecutivePairs(self)

    def duplicateEachTupleNTimes(self, nbTimes):
        r"""
        duplicateEachTupleNTimes(DataArrayInt64 self, mcIdType nbTimes) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_duplicateEachTupleNTimes(self, nbTimes)

    def duplicateNTimes(self, nbTimes):
        r"""
        duplicateNTimes(DataArrayInt64 self, mcIdType nbTimes) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_duplicateNTimes(self, nbTimes)

    def getDifferentValues(self):
        r"""
        getDifferentValues(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_getDifferentValues(self)

    @staticmethod
    def Add(a1, a2):
        r"""
        Add(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Add(a1, a2)

    def addEqual(self, other):
        r"""
        addEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_addEqual(self, other)

    @staticmethod
    def Substract(a1, a2):
        r"""
        Substract(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Substract(a1, a2)

    def substractEqual(self, other):
        r"""
        substractEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_substractEqual(self, other)

    @staticmethod
    def Multiply(a1, a2):
        r"""
        Multiply(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Multiply(a1, a2)

    def multiplyEqual(self, other):
        r"""
        multiplyEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_multiplyEqual(self, other)

    @staticmethod
    def Divide(a1, a2):
        r"""
        Divide(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Divide(a1, a2)

    def divideEqual(self, other):
        r"""
        divideEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_divideEqual(self, other)

    @staticmethod
    def Modulus(a1, a2):
        r"""
        Modulus(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Modulus(a1, a2)

    def modulusEqual(self, other):
        r"""
        modulusEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_modulusEqual(self, other)

    @staticmethod
    def Pow(a1, a2):
        r"""
        Pow(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Pow(a1, a2)

    def powEqual(self, other):
        r"""
        powEqual(DataArrayInt64 self, DataArrayInt64 other)
        1
        """
        return _MEDCoupling.DataArrayInt64_powEqual(self, other)

    @staticmethod
    def LoadForDbg(fileName):
        r"""
        LoadForDbg(std::string const & fileName) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_LoadForDbg(fileName)

    def writeForDbg(self, fileName):
        r"""
        writeForDbg(DataArrayInt64 self, std::string const & fileName)
        1
        """
        return _MEDCoupling.DataArrayInt64_writeForDbg(self, fileName)

    def fromLinkedListOfPairToList(self):
        r"""
        fromLinkedListOfPairToList(DataArrayInt64 self) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_fromLinkedListOfPairToList(self)

    def findIdsGreaterOrEqualTo(self, val):
        r"""
        findIdsGreaterOrEqualTo(DataArrayInt64 self, MEDCoupling::Int64 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsGreaterOrEqualTo(self, val)

    def findIdsGreaterThan(self, val):
        r"""
        findIdsGreaterThan(DataArrayInt64 self, MEDCoupling::Int64 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsGreaterThan(self, val)

    def findIdsLowerOrEqualTo(self, val):
        r"""
        findIdsLowerOrEqualTo(DataArrayInt64 self, MEDCoupling::Int64 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsLowerOrEqualTo(self, val)

    def findIdsLowerThan(self, val):
        r"""
        findIdsLowerThan(DataArrayInt64 self, MEDCoupling::Int64 val) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsLowerThan(self, val)

    def selectPartDef(self, pd):
        r"""
        selectPartDef(DataArrayInt64 self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayInt64 >
        1
        """
        return _MEDCoupling.DataArrayInt64_selectPartDef(self, pd)

    def convertToDblArr(self):
        r"""
        convertToDblArr(DataArrayInt64 self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCoupling.DataArrayInt64_convertToDblArr(self)

    def convertToFloatArr(self):
        r"""
        convertToFloatArr(DataArrayInt64 self) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCoupling.DataArrayInt64_convertToFloatArr(self)

    @staticmethod
    def Range(begin, end, step):
        r"""
        Range(MEDCoupling::Int64 begin, MEDCoupling::Int64 end, MEDCoupling::Int64 step) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Range(begin, end, step)

    @staticmethod
    def New(*args):
        r"""
        New() -> DataArrayInt64
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayInt64 self) -> DataArrayInt64
        __init__(DataArrayInt64 self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt64
        1
        """
        _MEDCoupling.DataArrayInt64_swiginit(self, _MEDCoupling.new_DataArrayInt64(*args))

    def __str__(self):
        r"""
        __str__(DataArrayInt64 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64___str__(self)

    def __len__(self):
        r"""
        __len__(DataArrayInt64 self) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64___len__(self)

    def __int__(self):
        r"""
        __int__(DataArrayInt64 self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64___int__(self)

    def __iter__(self):
        r"""
        __iter__(DataArrayInt64 self) -> DataArrayInt64Iterator
        1
        """
        return _MEDCoupling.DataArrayInt64___iter__(self)

    def accumulate(self, *args):
        r"""
        accumulate(DataArrayInt64 self, MEDCoupling::Int64 compId) -> MEDCoupling::Int64
        accumulate(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_accumulate(self, *args)

    def accumulatePerChunck(self, indexArr):
        r"""
        accumulatePerChunck(DataArrayInt64 self, PyObject * indexArr) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_accumulatePerChunck(self, indexArr)

    def findIdsEqualTuple(self, inputTuple):
        r"""
        findIdsEqualTuple(DataArrayInt64 self, PyObject * inputTuple) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsEqualTuple(self, inputTuple)

    def findIdForEach(self, vals):
        r"""
        findIdForEach(DataArrayInt64 self, PyObject * vals) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdForEach(self, vals)

    def splitInBalancedSlices(self, nbOfSlices):
        r"""
        splitInBalancedSlices(DataArrayInt64 self, mcIdType nbOfSlices) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_splitInBalancedSlices(self, nbOfSlices)

    def buildExplicitArrOfSliceOnScaledArr(self, slic):
        r"""
        buildExplicitArrOfSliceOnScaledArr(DataArrayInt64 self, PyObject * slic) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_buildExplicitArrOfSliceOnScaledArr(self, slic)

    def getMinMaxValues(self):
        r"""
        getMinMaxValues(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getMinMaxValues(self)

    @staticmethod
    def ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI):
        r"""
        ConvertIndexArrayToO2N(mcIdType nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

    @staticmethod
    def CheckAndPreparePermutation(arr):
        r"""
        CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_CheckAndPreparePermutation(arr)

    def setValues(self, li, nbOfTuples=None, nbOfComp=None):
        r"""
        setValues(DataArrayInt64 self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCoupling.DataArrayInt64_setValues(self, li, nbOfTuples, nbOfComp)

    def getValues(self):
        r"""
        getValues(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getValues(self)

    def isEqualIfNotWhy(self, other):
        r"""
        isEqualIfNotWhy(DataArrayInt64 self, DataArrayInt64 other) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_isEqualIfNotWhy(self, other)

    def getValuesAsTuple(self):
        r"""
        getValuesAsTuple(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getValuesAsTuple(self)

    @staticmethod
    def MakePartition(*args):
        r"""
        MakePartition(std::vector< MEDCoupling::DataArrayInt64 const *,std::allocator< MEDCoupling::DataArrayInt64 const * > > const & groups, mcIdType newNb, std::vector< std::vector< mcIdType,std::allocator< mcIdType > >,std::allocator< std::vector< mcIdType,std::allocator< mcIdType > > > > & fidsOfGroups) -> DataArrayInt64
        MakePartition(PyObject * gps, mcIdType newNb) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_MakePartition(*args)

    def findIdsEqualList(self, obj):
        r"""
        findIdsEqualList(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsEqualList(self, obj)

    def findIdsNotEqualList(self, obj):
        r"""
        findIdsNotEqualList(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsNotEqualList(self, obj)

    def splitByValueRange(self, li):
        r"""
        splitByValueRange(DataArrayInt64 self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_splitByValueRange(self, li)

    def transformWithIndArrR(self, li):
        r"""
        transformWithIndArrR(DataArrayInt64 self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_transformWithIndArrR(self, li)

    def renumberAndReduce(self, li, newNbOfTuple):
        r"""
        renumberAndReduce(DataArrayInt64 self, PyObject * li, mcIdType newNbOfTuple) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_renumberAndReduce(self, li, newNbOfTuple)

    def renumber(self, li):
        r"""
        renumber(DataArrayInt64 self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_renumber(self, li)

    def renumberR(self, li):
        r"""
        renumberR(DataArrayInt64 self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_renumberR(self, li)

    def setSelectedComponents(self, a, li):
        r"""
        setSelectedComponents(DataArrayInt64 self, DataArrayInt64 a, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayInt64_setSelectedComponents(self, a, li)

    def explodeComponents(self):
        r"""
        explodeComponents(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_explodeComponents(self)

    def getTuple(self, *args):
        r"""
        getTuple(DataArrayInt64 self, mcIdType tupleId, MEDCoupling::Int64 * res)
        getTuple(DataArrayInt64 self, mcIdType tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getTuple(self, *args)

    def changeSurjectiveFormat(self, targetNb):
        r"""
        changeSurjectiveFormat(DataArrayInt64 self, MEDCoupling::Int64 targetNb) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_changeSurjectiveFormat(self, targetNb)

    @staticmethod
    def Meld(*args):
        r"""
        Meld(DataArrayInt64 a1, DataArrayInt64 a2) -> DataArrayInt64
        Meld(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Meld(*args)

    @staticmethod
    def Aggregate(*args):
        r"""
        Aggregate(DataArrayInt64 a1, DataArrayInt64 a2, MEDCoupling::Int64 offsetA2) -> DataArrayInt64
        Aggregate(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_Aggregate(*args)

    @staticmethod
    def AggregateIndexes(li):
        r"""
        AggregateIndexes(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_AggregateIndexes(li)

    @staticmethod
    def BuildUnion(*args):
        r"""
        BuildUnion(std::vector< MEDCoupling::DataArrayInt64 const *,std::allocator< MEDCoupling::DataArrayInt64 const * > > const & arr) -> DataArrayInt64
        BuildUnion(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_BuildUnion(*args)

    @staticmethod
    def BuildIntersection(*args):
        r"""
        BuildIntersection(std::vector< MEDCoupling::DataArrayInt64 const *,std::allocator< MEDCoupling::DataArrayInt64 const * > > const & arr) -> DataArrayInt64
        BuildIntersection(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_BuildIntersection(*args)

    def getMaxValue(self):
        r"""
        getMaxValue(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getMaxValue(self)

    def getMaxAbsValue(self, tupleId):
        r"""
        getMaxAbsValue(DataArrayInt64 self, std::size_t & tupleId) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getMaxAbsValue(self, tupleId)

    def getMinValue(self):
        r"""
        getMinValue(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_getMinValue(self)

    def index(self, obj):
        r"""
        index(DataArrayInt64 self, PyObject * obj) -> mcIdType
        1
        """
        return _MEDCoupling.DataArrayInt64_index(self, obj)

    def __contains__(self, obj):
        r"""
        __contains__(DataArrayInt64 self, PyObject * obj) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64___contains__(self, obj)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayInt64 self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayInt64 self, PyObject * obj, PyObject * value) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___setitem__(self, obj, value)

    def __neg__(self):
        r"""
        __neg__(DataArrayInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___neg__(self)

    def __add__(self, obj):
        r"""
        __add__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___add__(self, obj)

    def __radd__(self, obj):
        r"""
        __radd__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___radd__(self, obj)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____iadd___(self, trueSelf, obj)

    def __sub__(self, obj):
        r"""
        __sub__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___sub__(self, obj)

    def __rsub__(self, obj):
        r"""
        __rsub__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___rsub__(self, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____isub___(self, trueSelf, obj)

    def __mul__(self, obj):
        r"""
        __mul__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___mul__(self, obj)

    def __rmul__(self, obj):
        r"""
        __rmul__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___rmul__(self, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____imul___(self, trueSelf, obj)

    def __div__(self, obj):
        r"""
        __div__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___div__(self, obj)

    def __rdiv__(self, obj):
        r"""
        __rdiv__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___rdiv__(self, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____idiv___(self, trueSelf, obj)

    def __mod__(self, obj):
        r"""
        __mod__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___mod__(self, obj)

    def __rmod__(self, obj):
        r"""
        __rmod__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___rmod__(self, obj)

    def ___imod___(self, trueSelf, obj):
        r"""
        ___imod___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____imod___(self, trueSelf, obj)

    def __pow__(self, obj):
        r"""
        __pow__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___pow__(self, obj)

    def __rpow__(self, obj):
        r"""
        __rpow__(DataArrayInt64 self, PyObject * obj) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64___rpow__(self, obj)

    def ___ipow___(self, trueSelf, obj):
        r"""
        ___ipow___(DataArrayInt64 self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64____ipow___(self, trueSelf, obj)

    def __repr__(self):
        r"""
        __repr__(DataArrayInt64 self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64___repr__(self)

    def pushBackValsSilent(self, li):
        r"""
        pushBackValsSilent(DataArrayInt64 self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayInt64_pushBackValsSilent(self, li)

    def partitionByDifferentValues(self):
        r"""
        partitionByDifferentValues(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_partitionByDifferentValues(self)

    def locateComponentId(self, valToSearchIntoTuples, tupleIdHint):
        r"""
        locateComponentId(DataArrayInt64 self, DataArrayInt64 valToSearchIntoTuples, DataArrayInt64 tupleIdHint) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64_locateComponentId(self, valToSearchIntoTuples, tupleIdHint)

    def findIdsRangesInListOfIds(self, listOfIds):
        r"""
        findIdsRangesInListOfIds(DataArrayInt64 self, DataArrayInt64 listOfIds) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_findIdsRangesInListOfIds(self, listOfIds)

    def forThisAsPartitionBuildReduction(self, commonEntities, commonEntitiesIndex):
        r"""
        forThisAsPartitionBuildReduction(DataArrayInt64 self, DataArrayInt64 commonEntities, DataArrayInt64 commonEntitiesIndex) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_forThisAsPartitionBuildReduction(self, commonEntities, commonEntitiesIndex)

    def fromListOfPairsToIndexArray(self):
        r"""
        fromListOfPairsToIndexArray(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_fromListOfPairsToIndexArray(self)

    def isRange(self):
        r"""
        isRange(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_isRange(self)

    @staticmethod
    def RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval=0):
        r"""
        RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt64 arr, DataArrayInt64 arrIndx, mcIdType offsetForRemoval=0) -> bool
        1
        """
        return _MEDCoupling.DataArrayInt64_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

    def findCommonTuples(self, limitNodeId=-1):
        r"""
        findCommonTuples(DataArrayInt64 self, mcIdType limitNodeId=-1) -> PyObject
        1
        """
        return _MEDCoupling.DataArrayInt64_findCommonTuples(self, limitNodeId)

    @staticmethod
    def ExtractFromIndexedArrays(li, arrIn, arrIndxIn):
        r"""
        ExtractFromIndexedArrays(PyObject * li, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

    @staticmethod
    def ExtractFromIndexedArraysSlice(*args):
        r"""
        ExtractFromIndexedArraysSlice(mcIdType strt, mcIdType stp, mcIdType step, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject
        ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_ExtractFromIndexedArraysSlice(*args)

    @staticmethod
    def SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex):
        r"""
        SetPartOfIndexedArrays(PyObject * li, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt64 srcArr, DataArrayInt64 srcArrIndex) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    @staticmethod
    def FromVTKInternalReprOfPolyedra(arrIn, arrIndxIn):
        r"""
        FromVTKInternalReprOfPolyedra(DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_FromVTKInternalReprOfPolyedra(arrIn, arrIndxIn)

    @staticmethod
    def FromVTK94InternalReprOfPolyedra(arrIn, arrIndxIn, arrIndxIn2):
        r"""
        FromVTK94InternalReprOfPolyedra(DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt64 arrIndxIn2) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_FromVTK94InternalReprOfPolyedra(arrIn, arrIndxIn, arrIndxIn2)

    @staticmethod
    def FromVTK93To94FacesInternaReprOfPolyedra(arrIn, arrIndxIn):
        r"""
        FromVTK93To94FacesInternaReprOfPolyedra(DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_FromVTK93To94FacesInternaReprOfPolyedra(arrIn, arrIndxIn)

    @staticmethod
    def SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex):
        r"""
        SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn, DataArrayInt64 srcArr, DataArrayInt64 srcArrIndex)
        1
        """
        return _MEDCoupling.DataArrayInt64_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    def convertToInt32Arr(self):
        r"""
        convertToInt32Arr(DataArrayInt64 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.DataArrayInt64_convertToInt32Arr(self)

    def toNumPyArray(self):
        r"""
        toNumPyArray(DataArrayInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64_toNumPyArray(self)

    def invertArrayN2O2O2NOptimized(self):
        r"""
        invertArrayN2O2O2NOptimized(DataArrayInt64 self) -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCoupling.DataArrayInt64_invertArrayN2O2O2NOptimized(self)

    def giveN2OOptimized(self):
        r"""
        giveN2OOptimized(DataArrayInt64 self) -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCoupling.DataArrayInt64_giveN2OOptimized(self)

    def transformWithIndArr(self, li):
        r"""
        transformWithIndArr(DataArrayInt64 self, PyObject * li)
        1
        """
        return _MEDCoupling.DataArrayInt64_transformWithIndArr(self, li)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt64

# Register DataArrayInt64 in _MEDCoupling:
_MEDCoupling.DataArrayInt64_swigregister(DataArrayInt64)
class DataArrayInt64Iterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, da):
        r"""
        __init__(DataArrayInt64Iterator self, DataArrayInt64 da) -> DataArrayInt64Iterator
        1
        """
        _MEDCoupling.DataArrayInt64Iterator_swiginit(self, _MEDCoupling.new_DataArrayInt64Iterator(da))
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt64Iterator

    def next(self):
        r"""
        next(DataArrayInt64Iterator self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Iterator_next(self)

# Register DataArrayInt64Iterator in _MEDCoupling:
_MEDCoupling.DataArrayInt64Iterator_swigregister(DataArrayInt64Iterator)
class DataArrayInt64Tuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self):
        r"""
        getNumberOfCompo(DataArrayInt64Tuple self) -> std::size_t
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple_getNumberOfCompo(self)

    def __str__(self):
        r"""
        __str__(DataArrayInt64Tuple self) -> std::string
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple___str__(self)

    def __int__(self):
        r"""
        __int__(DataArrayInt64Tuple self) -> MEDCoupling::Int64
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple___int__(self)

    def buildDAInt(self, *args):
        r"""
        buildDAInt(DataArrayInt64Tuple self, MEDCoupling::Int64 nbOfTuples, MEDCoupling::Int64 nbOfCompo) -> DataArrayInt64
        buildDAInt(DataArrayInt64Tuple self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple_buildDAInt(self, *args)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(DataArrayInt64Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(DataArrayInt64Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(DataArrayInt64Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(DataArrayInt64Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple____idiv___(self, trueSelf, obj)

    def ___imod___(self, trueSelf, obj):
        r"""
        ___imod___(DataArrayInt64Tuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple____imod___(self, trueSelf, obj)

    def __len__(self):
        r"""
        __len__(DataArrayInt64Tuple self) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple___len__(self)

    def __getitem__(self, obj):
        r"""
        __getitem__(DataArrayInt64Tuple self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple___getitem__(self, obj)

    def __setitem__(self, obj, value):
        r"""
        __setitem__(DataArrayInt64Tuple self, PyObject * obj, PyObject * value) -> DataArrayInt64Tuple
        1
        """
        return _MEDCoupling.DataArrayInt64Tuple___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCoupling.delete_DataArrayInt64Tuple

# Register DataArrayInt64Tuple in _MEDCoupling:
_MEDCoupling.DataArrayInt64Tuple_swigregister(DataArrayInt64Tuple)

def MEDCouplingStdReduceFunct(cls,params):
    a,b=params
    ret=object.__new__(cls)
    ret.__init__(*a)
    ret.__setstate__(b)
    return ret

def MEDCouplingDataArrayDoubleReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayDouble.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayDouble,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayInt32Reduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayIdType.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayInt32,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayInt64Reduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayIdType.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayInt64,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayByteReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayByte.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayByte,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayFloatReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayFloat.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayFloat,((self.toNumPyArray(),),(self.__getstate__()),))

if MEDCouplingUse64BitIDs():
  DataArrayInt=DataArrayInt64
else:
  DataArrayInt=DataArrayInt32
pass



def med2vtk_cell_types():
    r"""
    med2vtk_cell_types() -> PyObject *
    1
    """
    return _MEDCoupling.med2vtk_cell_types()

def vtk2med_cell_types():
    r"""
    vtk2med_cell_types() -> PyObject *
    1
    """
    return _MEDCoupling.vtk2med_cell_types()

def AllGeometricTypes():
    r"""
    AllGeometricTypes() -> PyObject *
    1
    """
    return _MEDCoupling.AllGeometricTypes()
class BoxSplittingOptions(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(BoxSplittingOptions self) -> BoxSplittingOptions
        1
        """
        _MEDCoupling.BoxSplittingOptions_swiginit(self, _MEDCoupling.new_BoxSplittingOptions())

    def init(self):
        r"""
        init(BoxSplittingOptions self)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_init(self)

    def getEfficiencyGoal(self):
        r"""
        getEfficiencyGoal(BoxSplittingOptions self) -> double
        1
        """
        return _MEDCoupling.BoxSplittingOptions_getEfficiencyGoal(self)

    def setEfficiencyGoal(self, efficiency):
        r"""
        setEfficiencyGoal(BoxSplittingOptions self, double efficiency)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_setEfficiencyGoal(self, efficiency)

    def getEfficiencyThreshold(self):
        r"""
        getEfficiencyThreshold(BoxSplittingOptions self) -> double
        1
        """
        return _MEDCoupling.BoxSplittingOptions_getEfficiencyThreshold(self)

    def setEfficiencyThreshold(self, efficiencyThreshold):
        r"""
        setEfficiencyThreshold(BoxSplittingOptions self, double efficiencyThreshold)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_setEfficiencyThreshold(self, efficiencyThreshold)

    def getMinimumPatchLength(self):
        r"""
        getMinimumPatchLength(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCoupling.BoxSplittingOptions_getMinimumPatchLength(self)

    def setMinimumPatchLength(self, minPatchLength):
        r"""
        setMinimumPatchLength(BoxSplittingOptions self, int minPatchLength)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_setMinimumPatchLength(self, minPatchLength)

    def getMaximumPatchLength(self):
        r"""
        getMaximumPatchLength(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCoupling.BoxSplittingOptions_getMaximumPatchLength(self)

    def setMaximumPatchLength(self, maxPatchLength):
        r"""
        setMaximumPatchLength(BoxSplittingOptions self, int maxPatchLength)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_setMaximumPatchLength(self, maxPatchLength)

    def getMaximumNbOfCellsInPatch(self):
        r"""
        getMaximumNbOfCellsInPatch(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCoupling.BoxSplittingOptions_getMaximumNbOfCellsInPatch(self)

    def setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch):
        r"""
        setMaximumNbOfCellsInPatch(BoxSplittingOptions self, int maxNbCellsInPatch)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch)

    def copyOptions(self, other):
        r"""
        copyOptions(BoxSplittingOptions self, BoxSplittingOptions other)
        1
        """
        return _MEDCoupling.BoxSplittingOptions_copyOptions(self, other)

    def printOptions(self):
        r"""
        printOptions(BoxSplittingOptions self) -> std::string
        1
        """
        return _MEDCoupling.BoxSplittingOptions_printOptions(self)

    def __str__(self):
        r"""
        __str__(BoxSplittingOptions self) -> std::string
        1
        """
        return _MEDCoupling.BoxSplittingOptions___str__(self)
    __swig_destroy__ = _MEDCoupling.delete_BoxSplittingOptions

# Register BoxSplittingOptions in _MEDCoupling:
_MEDCoupling.BoxSplittingOptions_swigregister(BoxSplittingOptions)
ON_CELLS = _MEDCoupling.ON_CELLS
r"""1"""
ON_NODES = _MEDCoupling.ON_NODES
r"""1"""
ON_GAUSS_PT = _MEDCoupling.ON_GAUSS_PT
r"""1"""
ON_GAUSS_NE = _MEDCoupling.ON_GAUSS_NE
r"""1"""
ON_NODES_KR = _MEDCoupling.ON_NODES_KR
r"""1"""
ON_NODES_FE = _MEDCoupling.ON_NODES_FE
r"""1"""
NO_TIME = _MEDCoupling.NO_TIME
r"""1"""
ONE_TIME = _MEDCoupling.ONE_TIME
r"""1"""
LINEAR_TIME = _MEDCoupling.LINEAR_TIME
r"""1"""
CONST_ON_TIME_INTERVAL = _MEDCoupling.CONST_ON_TIME_INTERVAL
r"""1"""
UNSTRUCTURED = _MEDCoupling.UNSTRUCTURED
r"""1"""
CARTESIAN = _MEDCoupling.CARTESIAN
r"""1"""
EXTRUDED = _MEDCoupling.EXTRUDED
r"""1"""
CURVE_LINEAR = _MEDCoupling.CURVE_LINEAR
r"""1"""
SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED = _MEDCoupling.SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED
r"""1"""
SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED = _MEDCoupling.SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED
r"""1"""
IMAGE_GRID = _MEDCoupling.IMAGE_GRID
r"""1"""
class MEDCouplingMesh(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name):
        r"""
        setName(MEDCouplingMesh self, std::string const & name)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_setName(self, name)

    def getName(self):
        r"""
        getName(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getName(self)

    def setDescription(self, descr):
        r"""
        setDescription(MEDCouplingMesh self, std::string const & descr)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_setDescription(self, descr)

    def getDescription(self):
        r"""
        getDescription(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getDescription(self)

    def setTime(self, val, iteration, order):
        r"""
        setTime(MEDCouplingMesh self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_setTime(self, val, iteration, order)

    def setTimeUnit(self, unit):
        r"""
        setTimeUnit(MEDCouplingMesh self, std::string const & unit)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_setTimeUnit(self, unit)

    def getTimeUnit(self):
        r"""
        getTimeUnit(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getTimeUnit(self)

    def getType(self):
        r"""
        getType(MEDCouplingMesh self) -> MEDCoupling::MEDCouplingMeshType
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getType(self)

    def isStructured(self):
        r"""
        isStructured(MEDCouplingMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_isStructured(self)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingMesh self) -> MEDCouplingMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_deepCopy(self)

    def clone(self, recDeepCpy):
        r"""
        clone(MEDCouplingMesh self, bool recDeepCpy) -> MEDCouplingMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_clone(self, recDeepCpy)

    def isEqual(self, other, prec):
        r"""
        isEqual(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other, prec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_isEqualWithoutConsideringStr(self, other, prec)

    def checkFastEquivalWith(self, other, prec):
        r"""
        checkFastEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, double prec)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkFastEquivalWith(self, other, prec)

    def copyTinyStringsFrom(self, other):
        r"""
        copyTinyStringsFrom(MEDCouplingMesh self, MEDCouplingMesh other)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_copyTinyStringsFrom(self, other)

    def copyTinyInfoFrom(self, other):
        r"""
        copyTinyInfoFrom(MEDCouplingMesh self, MEDCouplingMesh other)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_copyTinyInfoFrom(self, other)

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(MEDCouplingMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkConsistencyLight(self)

    def checkConsistency(self, eps=1e-12):
        r"""
        checkConsistency(MEDCouplingMesh self, double eps=1e-12)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkConsistency(self, eps)

    def getNumberOfCells(self):
        r"""
        getNumberOfCells(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getNumberOfCells(self)

    def getNumberOfNodes(self):
        r"""
        getNumberOfNodes(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getNumberOfNodes(self)

    def getSpaceDimension(self):
        r"""
        getSpaceDimension(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getSpaceDimension(self)

    def getMeshDimension(self):
        r"""
        getMeshDimension(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getMeshDimension(self)

    def getCoordinatesAndOwner(self):
        r"""
        getCoordinatesAndOwner(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCoordinatesAndOwner(self)

    def computeCellCenterOfMass(self):
        r"""
        computeCellCenterOfMass(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeCellCenterOfMass(self)

    def computeIsoBarycenterOfNodesPerCell(self):
        r"""
        computeIsoBarycenterOfNodesPerCell(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeIsoBarycenterOfNodesPerCell(self)

    def giveCellsWithType(self, type):
        r"""
        giveCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_giveCellsWithType(self, type)

    def computeNbOfNodesPerCell(self):
        r"""
        computeNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeNbOfNodesPerCell(self)

    def computeNbOfFacesPerCell(self):
        r"""
        computeNbOfFacesPerCell(MEDCouplingMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeNbOfFacesPerCell(self)

    def computeEffectiveNbOfNodesPerCell(self):
        r"""
        computeEffectiveNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeEffectiveNbOfNodesPerCell(self)

    def buildPartRange(self, beginCellIds, endCellIds, stepCellIds):
        r"""
        buildPartRange(MEDCouplingMesh self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildPartRange(self, beginCellIds, endCellIds, stepCellIds)

    def getNumberOfCellsWithType(self, type):
        r"""
        getNumberOfCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getNumberOfCellsWithType(self, type)

    def getTypeOfCell(self, cellId):
        r"""
        getTypeOfCell(MEDCouplingMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getTypeOfCell(self, cellId)

    def simpleRepr(self):
        r"""
        simpleRepr(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_simpleRepr(self)

    def advancedRepr(self):
        r"""
        advancedRepr(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_advancedRepr(self)

    def writeVTK(self, fileName, isBinary=True):
        r"""
        writeVTK(MEDCouplingMesh self, std::string const & fileName, bool isBinary=True) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_writeVTK(self, fileName, isBinary)

    def getVTKFileExtension(self):
        r"""
        getVTKFileExtension(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getVTKFileExtension(self)

    def getVTKFileNameOf(self, fileName):
        r"""
        getVTKFileNameOf(MEDCouplingMesh self, std::string const & fileName) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getVTKFileNameOf(self, fileName)

    def getMeasureField(self, isAbs):
        r"""
        getMeasureField(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getMeasureField(self, isAbs)

    def getMeasureFieldOnNode(self, isAbs):
        r"""
        getMeasureFieldOnNode(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getMeasureFieldOnNode(self, isAbs)

    def fillFromAnalytic(self, t, nbOfComp, func):
        r"""
        fillFromAnalytic(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_fillFromAnalytic(self, t, nbOfComp, func)

    def fillFromAnalyticCompo(self, t, nbOfComp, func):
        r"""
        fillFromAnalyticCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_fillFromAnalyticCompo(self, t, nbOfComp, func)

    def fillFromAnalyticNamedCompo(self, t, nbOfComp, varsOrder, func):
        r"""
        fillFromAnalyticNamedCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, svec varsOrder, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_fillFromAnalyticNamedCompo(self, t, nbOfComp, varsOrder, func)

    def buildOrthogonalField(self):
        r"""
        buildOrthogonalField(MEDCouplingMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildOrthogonalField(self)

    def buildUnstructured(self):
        r"""
        buildUnstructured(MEDCouplingMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildUnstructured(self)

    def mergeMyselfWith(self, other):
        r"""
        mergeMyselfWith(MEDCouplingMesh self, MEDCouplingMesh other) -> MEDCouplingMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_mergeMyselfWith(self, other)

    def areCompatibleForMerge(self, other):
        r"""
        areCompatibleForMerge(MEDCouplingMesh self, MEDCouplingMesh other) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_areCompatibleForMerge(self, other)

    def simplexize(self, policy):
        r"""
        simplexize(MEDCouplingMesh self, int policy) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_simplexize(self, policy)

    def unserialization(self, tinyInfoD, tinyInfo, a1, a2, littleStrings):
        r"""
        unserialization(MEDCouplingMesh self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt64 a1, DataArrayDouble a2, svec littleStrings)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_unserialization(self, tinyInfoD, tinyInfo, a1, a2, littleStrings)

    @staticmethod
    def IsStaticGeometricType(type):
        r"""
        IsStaticGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_IsStaticGeometricType(type)

    @staticmethod
    def IsLinearGeometricType(type):
        r"""
        IsLinearGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMesh_IsLinearGeometricType(type)

    @staticmethod
    def GetCorrespondingPolyType(type):
        r"""
        GetCorrespondingPolyType(INTERP_KERNEL::NormalizedCellType type) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingMesh_GetCorrespondingPolyType(type)

    @staticmethod
    def GetNumberOfNodesOfGeometricType(type):
        r"""
        GetNumberOfNodesOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type)

    @staticmethod
    def GetDimensionOfGeometricType(type):
        r"""
        GetDimensionOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMesh_GetDimensionOfGeometricType(type)

    @staticmethod
    def GetReprOfGeometricType(type):
        r"""
        GetReprOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> char const *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_GetReprOfGeometricType(type)

    def __str__(self):
        r"""
        __str__(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMesh___str__(self)

    def computeMeshCenterOfMass(self):
        r"""
        computeMeshCenterOfMass(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_computeMeshCenterOfMass(self)

    def getTime(self):
        r"""
        getTime(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getTime(self)

    def getDirectAccessOfCoordsArrIfInStructure(self):
        r"""
        getDirectAccessOfCoordsArrIfInStructure(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getDirectAccessOfCoordsArrIfInStructure(self)

    def getCellContainingPoint(self, p, eps):
        r"""
        getCellContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCellContainingPoint(self, p, eps)

    def getCellsContainingPoints(self, *args):
        r"""
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCellsContainingPoints(self, *args)

    def getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args):
        r"""
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args)

    def getCellsContainingPoint(self, p, eps):
        r"""
        getCellsContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCellsContainingPoint(self, p, eps)

    def getReverseNodalConnectivity(self):
        r"""
        getReverseNodalConnectivity(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getReverseNodalConnectivity(self)

    def renumberCells(self, li, check=True):
        r"""
        renumberCells(MEDCouplingMesh self, PyObject * li, bool check=True)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_renumberCells(self, li, check)

    def checkGeoEquivalWith(self, other, levOfCheck, prec):
        r"""
        checkGeoEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkGeoEquivalWith(self, other, levOfCheck, prec)

    def checkDeepEquivalWith(self, other, cellCompPol, prec):
        r"""
        checkDeepEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkDeepEquivalWith(self, other, cellCompPol, prec)

    def checkDeepEquivalOnSameNodesWith(self, other, cellCompPol, prec):
        r"""
        checkDeepEquivalOnSameNodesWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkDeepEquivalOnSameNodesWith(self, other, cellCompPol, prec)

    def getCellIdsFullyIncludedInNodeIds(self, li):
        r"""
        getCellIdsFullyIncludedInNodeIds(MEDCouplingMesh self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, li)

    def getNodeIdsOfCell(self, cellId):
        r"""
        getNodeIdsOfCell(MEDCouplingMesh self, int cellId) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getNodeIdsOfCell(self, cellId)

    def getCoordinatesOfNode(self, nodeId):
        r"""
        getCoordinatesOfNode(MEDCouplingMesh self, mcIdType nodeId) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getCoordinatesOfNode(self, nodeId)

    def scale(self, point, factor):
        r"""
        scale(MEDCouplingMesh self, PyObject * point, double factor)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_scale(self, point, factor)

    def getBoundingBox(self):
        r"""
        getBoundingBox(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getBoundingBox(self)

    def isEqualIfNotWhy(self, other, prec):
        r"""
        isEqualIfNotWhy(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_isEqualIfNotWhy(self, other, prec)

    def buildPart(self, li):
        r"""
        buildPart(MEDCouplingMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildPart(self, li)

    def buildPartAndReduceNodes(self, li):
        r"""
        buildPartAndReduceNodes(MEDCouplingMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildPartAndReduceNodes(self, li)

    def buildPartRangeAndReduceNodes(self, beginCellIds, endCellIds, stepCellIds):
        r"""
        buildPartRangeAndReduceNodes(MEDCouplingMesh self, mcIdType beginCellIds, mcIdType endCellIds, mcIdType stepCellIds) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_buildPartRangeAndReduceNodes(self, beginCellIds, endCellIds, stepCellIds)

    def getDistributionOfTypes(self):
        r"""
        getDistributionOfTypes(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getDistributionOfTypes(self)

    def checkTypeConsistencyAndContig(self, li, li2):
        r"""
        checkTypeConsistencyAndContig(MEDCouplingMesh self, PyObject * li, PyObject * li2) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingMesh_checkTypeConsistencyAndContig(self, li, li2)

    def splitProfilePerType(self, profile, smartPflKiller=True):
        r"""
        splitProfilePerType(MEDCouplingMesh self, DataArrayInt64 profile, bool smartPflKiller=True) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingMesh_splitProfilePerType(self, profile, smartPflKiller)

    def translate(self, vector):
        r"""
        translate(MEDCouplingMesh self, PyObject * vector)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_translate(self, vector)

    def rotate(self, *args):
        r"""
        rotate(MEDCouplingMesh self, PyObject * center, double alpha)
        rotate(MEDCouplingMesh self, PyObject * center, PyObject * vector, double alpha)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_rotate(self, *args)

    def getAllGeoTypes(self):
        r"""
        getAllGeoTypes(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getAllGeoTypes(self)

    def getTinySerializationInformation(self):
        r"""
        getTinySerializationInformation(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_getTinySerializationInformation(self)

    def serialize(self):
        r"""
        serialize(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh_serialize(self)

    def resizeForUnserialization(self, tinyInfo, a1, a2):
        r"""
        resizeForUnserialization(MEDCouplingMesh self, ivec tinyInfo, DataArrayInt64 a1, DataArrayDouble a2)
        1
        """
        return _MEDCoupling.MEDCouplingMesh_resizeForUnserialization(self, tinyInfo, a1, a2)

    def __getstate__(self):
        r"""
        __getstate__(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMesh___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(MEDCouplingMesh self, PyObject * inp)
        1
        """
        return _MEDCoupling.MEDCouplingMesh___setstate__(self, inp)

    @staticmethod
    def MergeMeshes(*args):
        r"""
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject * li) -> MEDCouplingMesh
        1
        """
        return _MEDCoupling.MEDCouplingMesh_MergeMeshes(*args)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingMesh

# Register MEDCouplingMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingMesh_swigregister(MEDCouplingMesh)
NORM_POINT1 = _MEDCoupling.NORM_POINT1
r"""1"""
NORM_SEG2 = _MEDCoupling.NORM_SEG2
r"""1"""
NORM_SEG3 = _MEDCoupling.NORM_SEG3
r"""1"""
NORM_SEG4 = _MEDCoupling.NORM_SEG4
r"""1"""
NORM_POLYL = _MEDCoupling.NORM_POLYL
r"""1"""
NORM_TRI3 = _MEDCoupling.NORM_TRI3
r"""1"""
NORM_QUAD4 = _MEDCoupling.NORM_QUAD4
r"""1"""
NORM_POLYGON = _MEDCoupling.NORM_POLYGON
r"""1"""
NORM_TRI6 = _MEDCoupling.NORM_TRI6
r"""1"""
NORM_TRI7 = _MEDCoupling.NORM_TRI7
r"""1"""
NORM_QUAD8 = _MEDCoupling.NORM_QUAD8
r"""1"""
NORM_QUAD9 = _MEDCoupling.NORM_QUAD9
r"""1"""
NORM_QPOLYG = _MEDCoupling.NORM_QPOLYG
r"""1"""
NORM_TETRA4 = _MEDCoupling.NORM_TETRA4
r"""1"""
NORM_PYRA5 = _MEDCoupling.NORM_PYRA5
r"""1"""
NORM_PENTA6 = _MEDCoupling.NORM_PENTA6
r"""1"""
NORM_HEXA8 = _MEDCoupling.NORM_HEXA8
r"""1"""
NORM_TETRA10 = _MEDCoupling.NORM_TETRA10
r"""1"""
NORM_HEXGP12 = _MEDCoupling.NORM_HEXGP12
r"""1"""
NORM_PYRA13 = _MEDCoupling.NORM_PYRA13
r"""1"""
NORM_PENTA15 = _MEDCoupling.NORM_PENTA15
r"""1"""
NORM_PENTA18 = _MEDCoupling.NORM_PENTA18
r"""1"""
NORM_HEXA20 = _MEDCoupling.NORM_HEXA20
r"""1"""
NORM_HEXA27 = _MEDCoupling.NORM_HEXA27
r"""1"""
NORM_POLYHED = _MEDCoupling.NORM_POLYHED
r"""1"""
NORM_ERROR = _MEDCoupling.NORM_ERROR
r"""1"""
NORM_MAXTYPE = _MEDCoupling.NORM_MAXTYPE
r"""1"""
PLANAR_FACE_5 = _MEDCoupling.PLANAR_FACE_5
r"""1"""
PLANAR_FACE_6 = _MEDCoupling.PLANAR_FACE_6
r"""1"""
GENERAL_24 = _MEDCoupling.GENERAL_24
r"""1"""
GENERAL_48 = _MEDCoupling.GENERAL_48
r"""1"""
NoNature = _MEDCoupling.NoNature
r"""1"""
IntensiveMaximum = _MEDCoupling.IntensiveMaximum
r"""1"""
ExtensiveMaximum = _MEDCoupling.ExtensiveMaximum
r"""1"""
ExtensiveConservation = _MEDCoupling.ExtensiveConservation
r"""1"""
IntensiveConservation = _MEDCoupling.IntensiveConservation
r"""1"""
class MEDCouplingNatureOfField(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetRepr(nat):
        r"""
        GetRepr(MEDCoupling::NatureOfField nat) -> char const *
        1
        """
        return _MEDCoupling.MEDCouplingNatureOfField_GetRepr(nat)

    @staticmethod
    def GetReprNoThrow(nat):
        r"""
        GetReprNoThrow(MEDCoupling::NatureOfField nat) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingNatureOfField_GetReprNoThrow(nat)

    @staticmethod
    def GetAllPossibilitiesStr():
        r"""
        GetAllPossibilitiesStr() -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingNatureOfField_GetAllPossibilitiesStr()
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingNatureOfField

# Register MEDCouplingNatureOfField in _MEDCoupling:
_MEDCoupling.MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)
class MEDCouplingGaussLocalization(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization
        __init__(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ) -> MEDCouplingGaussLocalization
        1
        """
        _MEDCoupling.MEDCouplingGaussLocalization_swiginit(self, _MEDCoupling.new_MEDCouplingGaussLocalization(*args))

    def getType(self):
        r"""
        getType(MEDCouplingGaussLocalization self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getType(self)

    def setType(self, typ):
        r"""
        setType(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setType(self, typ)

    def getNumberOfGaussPt(self):
        r"""
        getNumberOfGaussPt(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)

    def getDimension(self):
        r"""
        getDimension(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getDimension(self)

    def getNumberOfPtsInRefCell(self):
        r"""
        getNumberOfPtsInRefCell(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)

    def getStringRepr(self):
        r"""
        getStringRepr(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getStringRepr(self)

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(MEDCouplingGaussLocalization self)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_checkConsistencyLight(self)

    def isEqual(self, other, eps):
        r"""
        isEqual(MEDCouplingGaussLocalization self, MEDCouplingGaussLocalization other, double eps) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_isEqual(self, other, eps)

    def getRefCoords(self):
        r"""
        getRefCoords(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getRefCoords(self)

    def getRefCoord(self, ptIdInCell, comp):
        r"""
        getRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp) -> double
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getRefCoord(self, ptIdInCell, comp)

    def getGaussCoords(self):
        r"""
        getGaussCoords(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getGaussCoords(self)

    def getGaussCoord(self, gaussPtIdInCell, comp):
        r"""
        getGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp) -> double
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getGaussCoord(self, gaussPtIdInCell, comp)

    def getWeights(self):
        r"""
        getWeights(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getWeights(self)

    def getWeight(self, gaussPtIdInCell):
        r"""
        getWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell) -> double
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getWeight(self, gaussPtIdInCell)

    def setRefCoord(self, ptIdInCell, comp, newVal):
        r"""
        setRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp, double newVal)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setRefCoord(self, ptIdInCell, comp, newVal)

    def setGaussCoord(self, gaussPtIdInCell, comp, newVal):
        r"""
        setGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp, double newVal)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setGaussCoord(self, gaussPtIdInCell, comp, newVal)

    def setWeight(self, gaussPtIdInCell, newVal):
        r"""
        setWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell, double newVal)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setWeight(self, gaussPtIdInCell, newVal)

    def setRefCoords(self, refCoo):
        r"""
        setRefCoords(MEDCouplingGaussLocalization self, dvec refCoo)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setRefCoords(self, refCoo)

    def setGaussCoords(self, gsCoo):
        r"""
        setGaussCoords(MEDCouplingGaussLocalization self, dvec gsCoo)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setGaussCoords(self, gsCoo)

    def setWeights(self, w):
        r"""
        setWeights(MEDCouplingGaussLocalization self, dvec w)
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_setWeights(self, w)

    @staticmethod
    def AreAlmostEqual(v1, v2, eps):
        r"""
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_AreAlmostEqual(v1, v2, eps)

    def localizePtsInRefCooForEachCell(self, ptsInRefCoo, mesh):
        r"""
        localizePtsInRefCooForEachCell(MEDCouplingGaussLocalization self, DataArrayDouble ptsInRefCoo, MEDCouplingUMesh mesh) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_localizePtsInRefCooForEachCell(self, ptsInRefCoo, mesh)

    def buildRefCell(self):
        r"""
        buildRefCell(MEDCouplingGaussLocalization self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_buildRefCell(self)

    def getShapeFunctionValues(self):
        r"""
        getShapeFunctionValues(MEDCouplingGaussLocalization self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getShapeFunctionValues(self)

    def getDerivativeOfShapeFunctionValues(self):
        r"""
        getDerivativeOfShapeFunctionValues(MEDCouplingGaussLocalization self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_getDerivativeOfShapeFunctionValues(self)

    @staticmethod
    def GetDefaultReferenceCoordinatesOf(type):
        r"""
        GetDefaultReferenceCoordinatesOf(INTERP_KERNEL::NormalizedCellType type) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization_GetDefaultReferenceCoordinatesOf(type)

    def __str__(self):
        r"""
        __str__(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingGaussLocalization___repr__(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingGaussLocalization

# Register MEDCouplingGaussLocalization in _MEDCoupling:
_MEDCoupling.MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)
class MEDCouplingSkyLineArray(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BuildFromPolyhedronConn(c, cI):
        r"""
        BuildFromPolyhedronConn(DataArrayInt64 c, DataArrayInt64 cI) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c, cI)

    def set(self, index, value):
        r"""
        set(MEDCouplingSkyLineArray self, DataArrayInt64 index, DataArrayInt64 value)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_set(self, index, value)

    def set3(self, superIndex, index, value):
        r"""
        set3(MEDCouplingSkyLineArray self, DataArrayInt64 superIndex, DataArrayInt64 index, DataArrayInt64 value)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_set3(self, superIndex, index, value)

    def getSuperNumberOf(self):
        r"""
        getSuperNumberOf(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getSuperNumberOf(self)

    def getNumberOf(self):
        r"""
        getNumberOf(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getNumberOf(self)

    def getLength(self):
        r"""
        getLength(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getLength(self)

    def deletePack(self, i, j):
        r"""
        deletePack(MEDCouplingSkyLineArray self, int const i, int const j)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_deletePack(self, i, j)

    def deleteSimplePack(self, i):
        r"""
        deleteSimplePack(MEDCouplingSkyLineArray self, int const i)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_deleteSimplePack(self, i)

    def deleteSimplePacks(self, idx):
        r"""
        deleteSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt64 idx)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_deleteSimplePacks(self, idx)

    def groupPacks(self, indexedPacks):
        r"""
        groupPacks(MEDCouplingSkyLineArray self, DataArrayInt64 indexedPacks) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_groupPacks(self, indexedPacks)

    def uniqueNotSortedByPack(self):
        r"""
        uniqueNotSortedByPack(MEDCouplingSkyLineArray self) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_uniqueNotSortedByPack(self)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingSkyLineArray self) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_deepCopy(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingSkyLineArray self) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, ivec index, ivec value) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, DataArrayInt64 index, DataArrayInt64 value) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, MEDCouplingSkyLineArray other) -> MEDCouplingSkyLineArray
        1
        """
        _MEDCoupling.MEDCouplingSkyLineArray_swiginit(self, _MEDCoupling.new_MEDCouplingSkyLineArray(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingSkyLineArray self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray___str__(self)

    def getSuperIndexArray(self):
        r"""
        getSuperIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getSuperIndexArray(self)

    def getIndexArray(self):
        r"""
        getIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getIndexArray(self)

    def getValuesArray(self):
        r"""
        getValuesArray(MEDCouplingSkyLineArray self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getValuesArray(self)

    def getSimplePackSafe(self, absolutePackId):
        r"""
        getSimplePackSafe(MEDCouplingSkyLineArray self, mcIdType absolutePackId) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_getSimplePackSafe(self, absolutePackId)

    def findPackIds(self, superPackIndices, pack):
        r"""
        findPackIds(MEDCouplingSkyLineArray self, PyObject * superPackIndices, PyObject * pack) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_findPackIds(self, superPackIndices, pack)

    def pushBackPack(self, i, pack):
        r"""
        pushBackPack(MEDCouplingSkyLineArray self, mcIdType const i, PyObject * pack)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_pushBackPack(self, i, pack)

    def replaceSimplePack(self, idx, pack):
        r"""
        replaceSimplePack(MEDCouplingSkyLineArray self, mcIdType const idx, PyObject * pack)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_replaceSimplePack(self, idx, pack)

    def replaceSimplePacks(self, idx, listePacks):
        r"""
        replaceSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt64 idx, PyObject * listePacks)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_replaceSimplePacks(self, idx, listePacks)

    @staticmethod
    def AggregatePacks(sks):
        r"""
        AggregatePacks(PyObject * sks) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_AggregatePacks(sks)

    def replacePack(self, superIdx, idx, pack):
        r"""
        replacePack(MEDCouplingSkyLineArray self, mcIdType const superIdx, mcIdType const idx, PyObject * pack)
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_replacePack(self, superIdx, idx, pack)

    def convertToPolyhedronConn(self):
        r"""
        convertToPolyhedronConn(MEDCouplingSkyLineArray self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_convertToPolyhedronConn(self)

    def thresholdPerPack(self, threshold):
        r"""
        thresholdPerPack(MEDCouplingSkyLineArray self, mcIdType threshold) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingSkyLineArray_thresholdPerPack(self, threshold)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingSkyLineArray

# Register MEDCouplingSkyLineArray in _MEDCoupling:
_MEDCoupling.MEDCouplingSkyLineArray_swigregister(MEDCouplingSkyLineArray)
class MEDCouplingFieldDiscretization(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(type):
        r"""
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_New(type)

    def getPrecision(self):
        r"""
        getPrecision(MEDCouplingFieldDiscretization self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getPrecision(self)

    def setPrecision(self, val):
        r"""
        setPrecision(MEDCouplingFieldDiscretization self, double val)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_setPrecision(self, val)

    @staticmethod
    def GetTypeOfFieldFromStringRepr(repr):
        r"""
        GetTypeOfFieldFromStringRepr(std::string const & repr) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr)

    def getEnum(self):
        r"""
        getEnum(MEDCouplingFieldDiscretization self) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getEnum(self)

    def isEqual(self, other, eps):
        r"""
        isEqual(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_isEqual(self, other, eps)

    def isEqualIfNotWhy(self, other, eps, reason):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps, std::string & reason) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, other, eps, reason)

    def isEqualWithoutConsideringStr(self, other, eps):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, other, eps)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_deepCopy(self)

    def clone(self):
        r"""
        clone(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_clone(self)

    def clonePartRange(self, beginCellIds, endCellIds, stepCellIds):
        r"""
        clonePartRange(MEDCouplingFieldDiscretization self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_clonePartRange(self, beginCellIds, endCellIds, stepCellIds)

    def getStringRepr(self):
        r"""
        getStringRepr(MEDCouplingFieldDiscretization self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getStringRepr(self)

    def getRepr(self):
        r"""
        getRepr(MEDCouplingFieldDiscretization self) -> char const *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getRepr(self)

    def getNumberOfTuples(self, mesh):
        r"""
        getNumberOfTuples(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getNumberOfTuples(self, mesh)

    def getNumberOfMeshPlaces(self, mesh):
        r"""
        getNumberOfMeshPlaces(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, mesh)

    def getOffsetArr(self, mesh):
        r"""
        getOffsetArr(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getOffsetArr(self, mesh)

    def getLocalizationOfDiscValues(self, mesh):
        r"""
        getLocalizationOfDiscValues(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, mesh)

    def checkCompatibilityWithNature(self, nat):
        r"""
        checkCompatibilityWithNature(MEDCouplingFieldDiscretization self, MEDCoupling::NatureOfField nat)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, nat)

    def getIJK(self, mesh, da, cellId, nodeIdInCell, compoId):
        r"""
        getIJK(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, int nodeIdInCell, int compoId) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getIJK(self, mesh, da, cellId, nodeIdInCell, compoId)

    def checkCoherencyBetween(self, mesh, da):
        r"""
        checkCoherencyBetween(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArray da)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, mesh, da)

    def getMeasureField(self, mesh, isAbs):
        r"""
        getMeasureField(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getMeasureField(self, mesh, isAbs)

    def setGaussLocalizationOnType(self, m, type, refCoo, gsCoo, wg):
        r"""
        setGaussLocalizationOnType(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, m, type, refCoo, gsCoo, wg)

    def clearGaussLocalizations(self):
        r"""
        clearGaussLocalizations(MEDCouplingFieldDiscretization self)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)

    def getGaussLocalization(self, locId):
        r"""
        getGaussLocalization(MEDCouplingFieldDiscretization self, int locId) -> MEDCouplingGaussLocalization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getGaussLocalization(self, locId)

    def getNbOfGaussLocalization(self):
        r"""
        getNbOfGaussLocalization(MEDCouplingFieldDiscretization self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, cellId):
        r"""
        getGaussLocalizationIdOfOneCell(MEDCouplingFieldDiscretization self, int cellId) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, cellId)

    def getGaussLocalizationIdOfOneType(self, type):
        r"""
        getGaussLocalizationIdOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, type)

    def clonePart(self, li):
        r"""
        clonePart(MEDCouplingFieldDiscretization self, PyObject * li) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_clonePart(self, li)

    def buildSubMeshDataRange(self, mesh, beginCellIds, endCellIds, stepCellIds, beginOut, endOut, stepOut, di):
        r"""
        buildSubMeshDataRange(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, mcIdType beginCellIds, mcIdType endCellIds, mcIdType stepCellIds, mcIdType & beginOut, mcIdType & endOut, mcIdType & stepOut, MEDCoupling::DataArrayInt64 *& di) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_buildSubMeshDataRange(self, mesh, beginCellIds, endCellIds, stepCellIds, beginOut, endOut, stepOut, di)

    def getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType):
        r"""
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingFieldDiscretization self, PyObject * code, PyObject * idsPerType) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)

    def computeMeshRestrictionFromTupleIds(self, mesh, tupleIds):
        r"""
        computeMeshRestrictionFromTupleIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * tupleIds) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, mesh, tupleIds)

    def normL1(self, mesh, arr):
        r"""
        normL1(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_normL1(self, mesh, arr)

    def normL2(self, mesh, arr):
        r"""
        normL2(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_normL2(self, mesh, arr)

    def integral(self, mesh, arr, isWAbs):
        r"""
        integral(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_integral(self, mesh, arr, isWAbs)

    def getCellIdsHavingGaussLocalization(self, locId):
        r"""
        getCellIdsHavingGaussLocalization(MEDCouplingFieldDiscretization self, mcIdType locId) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, locId)

    def setGaussLocalizationOnCells(self, m, li, refCoo, gsCoo, wg):
        r"""
        setGaussLocalizationOnCells(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, m, li, refCoo, gsCoo, wg)

    def getGaussLocalizationIdsOfOneType(self, type):
        r"""
        getGaussLocalizationIdsOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, type)

    def getValueOn(self, arr, mesh, sl):
        r"""
        getValueOn(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * sl) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getValueOn(self, arr, mesh, sl)

    def getValueOnPos(self, arr, mesh, i, j, k):
        r"""
        getValueOnPos(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, mcIdType i, mcIdType j, mcIdType k) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getValueOnPos(self, arr, mesh, i, j, k)

    def getValueOnMulti(self, arr, mesh, loc):
        r"""
        getValueOnMulti(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * loc) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_getValueOnMulti(self, arr, mesh, loc)

    def renumberCells(self, li, check=True):
        r"""
        renumberCells(MEDCouplingFieldDiscretization self, PyObject * li, bool check=True)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_renumberCells(self, li, check)

    def renumberArraysForCell(self, mesh, arrays, old2New, check):
        r"""
        renumberArraysForCell(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * arrays, PyObject * old2New, bool check)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_renumberArraysForCell(self, mesh, arrays, old2New, check)

    def computeTupleIdsToSelectFromCellIds(self, mesh, cellIds):
        r"""
        computeTupleIdsToSelectFromCellIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * cellIds) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, mesh, cellIds)

    def buildSubMeshData(self, mesh, ids):
        r"""
        buildSubMeshData(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * ids) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_buildSubMeshData(self, mesh, ids)

    def renumberValuesOnNodes(self, epsOnVals, old2New, newNbOfNodes, arr):
        r"""
        renumberValuesOnNodes(MEDCouplingFieldDiscretization self, double epsOnVals, PyObject * old2New, mcIdType newNbOfNodes, DataArrayDouble arr)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, epsOnVals, old2New, newNbOfNodes, arr)

    def renumberValuesOnCells(self, epsOnVals, mesh, old2New, newSz, arr):
        r"""
        renumberValuesOnCells(MEDCouplingFieldDiscretization self, double epsOnVals, MEDCouplingMesh mesh, PyObject * old2New, mcIdType newSz, DataArrayDouble arr)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, epsOnVals, mesh, old2New, newSz, arr)

    def renumberValuesOnCellsR(self, mesh, new2old, newSz, arr):
        r"""
        renumberValuesOnCellsR(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * new2old, mcIdType newSz, DataArrayDouble arr)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, mesh, new2old, newSz, arr)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretization

# Register MEDCouplingFieldDiscretization in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)
class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationP0

# Register MEDCouplingFieldDiscretizationP0 in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)
class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationOnNodes

# Register MEDCouplingFieldDiscretizationOnNodes in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)
class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationP1

# Register MEDCouplingFieldDiscretizationP1 in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)
class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setArrayOfDiscIds(self, adids):
        r"""
        setArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self, DataArrayInt64 adids)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationPerCell_setArrayOfDiscIds(self, adids)

    def checkNoOrphanCells(self):
        r"""
        checkNoOrphanCells(MEDCouplingFieldDiscretizationPerCell self)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationPerCell_checkNoOrphanCells(self)

    def getArrayOfDiscIds(self):
        r"""
        getArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)

    def splitIntoSingleGaussDicrPerCellType(self):
        r"""
        splitIntoSingleGaussDicrPerCellType(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationPerCell_splitIntoSingleGaussDicrPerCellType(self)

# Register MEDCouplingFieldDiscretizationPerCell in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)
class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MEDCouplingFieldDiscretizationGauss self) -> MEDCouplingFieldDiscretizationGauss
        1
        """
        _MEDCoupling.MEDCouplingFieldDiscretizationGauss_swiginit(self, _MEDCoupling.new_MEDCouplingFieldDiscretizationGauss())
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationGauss

# Register MEDCouplingFieldDiscretizationGauss in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)
class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetWeightArrayFromGeometricType(geoType):
        r"""
        GetWeightArrayFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType)

    @staticmethod
    def GetRefCoordsFromGeometricType(geoType):
        r"""
        GetRefCoordsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType)

    @staticmethod
    def GetLocsFromGeometricType(geoType):
        r"""
        GetLocsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationGaussNE

# Register MEDCouplingFieldDiscretizationGaussNE in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)
class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def PerformDriftOfVec(arr, isDrift):
        r"""
        PerformDriftOfVec(DataArrayDouble arr, mcIdType isDrift) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr, isDrift)

    def computeVectorOfCoefficients(self, mesh, arr):
        r"""
        computeVectorOfCoefficients(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, mesh, arr)

    def computeInverseMatrix(self, mesh):
        r"""
        computeInverseMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_computeInverseMatrix(self, mesh)

    def computeMatrix(self, mesh):
        r"""
        computeMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_computeMatrix(self, mesh)

    def computeEvaluationMatrixOnGivenPts(self, mesh, locs):
        r"""
        computeEvaluationMatrixOnGivenPts(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, PyObject * locs) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_computeEvaluationMatrixOnGivenPts(self, mesh, locs)

    def operateOnDenseMatrix(self, spaceDimension, myMatrix):
        r"""
        operateOnDenseMatrix(MEDCouplingFieldDiscretizationKriging self, int spaceDimension, DataArrayDouble myMatrix)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_operateOnDenseMatrix(self, spaceDimension, myMatrix)

    def performDrift(self, matr, arr):
        r"""
        performDrift(MEDCouplingFieldDiscretizationKriging self, DataArrayDouble matr, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_performDrift(self, matr, arr)

    @staticmethod
    def PerformDriftRect(matr, arr):
        r"""
        PerformDriftRect(DataArrayDouble matr, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr, arr)

    @staticmethod
    def OperateOnDenseMatrixH3(myMatrix):
        r"""
        OperateOnDenseMatrixH3(DataArrayDouble myMatrix)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix)

    @staticmethod
    def OperateOnDenseMatrixH2Ln(myMatrix):
        r"""
        OperateOnDenseMatrixH2Ln(DataArrayDouble myMatrix)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationKriging

# Register MEDCouplingFieldDiscretizationKriging in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)
class MEDCouplingFieldDiscretizationOnNodesFE(MEDCouplingFieldDiscretizationOnNodes):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCooInRefElement(self, mesh, locs):
        r"""
        getCooInRefElement(MEDCouplingFieldDiscretizationOnNodesFE self, MEDCouplingMesh mesh, PyObject * locs) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationOnNodesFE_getCooInRefElement(self, mesh, locs)

    def getClosestCooInRefElement(self, mesh, locs):
        r"""
        getClosestCooInRefElement(MEDCouplingFieldDiscretizationOnNodesFE self, MEDCouplingMesh mesh, PyObject * locs) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDiscretizationOnNodesFE_getClosestCooInRefElement(self, mesh, locs)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDiscretizationOnNodesFE

# Register MEDCouplingFieldDiscretizationOnNodesFE in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDiscretizationOnNodesFE_swigregister(MEDCouplingFieldDiscretizationOnNodesFE)
class MEDCouplingPointSet(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setCoords(self, coords):
        r"""
        setCoords(MEDCouplingPointSet self, DataArrayDouble coords)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_setCoords(self, coords)

    def getCoordinatesAndOwner(self):
        r"""
        getCoordinatesAndOwner(MEDCouplingPointSet self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getCoordinatesAndOwner(self)

    def areCoordsEqual(self, other, prec):
        r"""
        areCoordsEqual(MEDCouplingPointSet self, MEDCouplingPointSet other, double prec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_areCoordsEqual(self, other, prec)

    def zipCoords(self):
        r"""
        zipCoords(MEDCouplingPointSet self)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_zipCoords(self)

    def getCaracteristicDimension(self):
        r"""
        getCaracteristicDimension(MEDCouplingPointSet self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getCaracteristicDimension(self)

    def recenterForMaxPrecision(self, eps):
        r"""
        recenterForMaxPrecision(MEDCouplingPointSet self, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_recenterForMaxPrecision(self, eps)

    def changeSpaceDimension(self, newSpaceDim, dftVal=0.):
        r"""
        changeSpaceDimension(MEDCouplingPointSet self, int newSpaceDim, double dftVal=0.)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_changeSpaceDimension(self, newSpaceDim, dftVal)

    def tryToShareSameCoords(self, other, epsilon):
        r"""
        tryToShareSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_tryToShareSameCoords(self, other, epsilon)

    def shallowCopyConnectivityFrom(self, other):
        r"""
        shallowCopyConnectivityFrom(MEDCouplingPointSet self, MEDCouplingPointSet other)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_shallowCopyConnectivityFrom(self, other)

    def buildPartOfMySelfSlice(self, start, end, step):
        r"""
        buildPartOfMySelfSlice(MEDCouplingPointSet self, int start, int end, int step) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildPartOfMySelfSlice(self, start, end, step)

    def tryToShareSameCoordsPermute(self, other, epsilon):
        r"""
        tryToShareSameCoordsPermute(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, other, epsilon)

    @staticmethod
    def MergeNodesArray(m1, m2):
        r"""
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_MergeNodesArray(m1, m2)

    @staticmethod
    def BuildInstanceFromMeshType(type):
        r"""
        BuildInstanceFromMeshType(MEDCoupling::MEDCouplingMeshType type) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_BuildInstanceFromMeshType(type)

    @staticmethod
    def ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps):
        r"""
        ComputeNbOfInteractionsWithSrcCells(MEDCouplingPointSet srcMesh, MEDCouplingPointSet trgMesh, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps)

    def computeFetchedNodeIds(self):
        r"""
        computeFetchedNodeIds(MEDCouplingPointSet self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_computeFetchedNodeIds(self)

    def getNumberOfNodesInCell(self, cellId):
        r"""
        getNumberOfNodesInCell(MEDCouplingPointSet self, int cellId) -> int
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getNumberOfNodesInCell(self, cellId)

    def buildBoundaryMesh(self, keepCoords):
        r"""
        buildBoundaryMesh(MEDCouplingPointSet self, bool keepCoords) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildBoundaryMesh(self, keepCoords)

    def zipCoordsTraducer(self):
        r"""
        zipCoordsTraducer(MEDCouplingPointSet self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_zipCoordsTraducer(self)

    def findBoundaryNodes(self):
        r"""
        findBoundaryNodes(MEDCouplingPointSet self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_findBoundaryNodes(self)

    def zipConnectivityTraducer(self, compType, startCellId=0):
        r"""
        zipConnectivityTraducer(MEDCouplingPointSet self, int compType, int startCellId=0) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_zipConnectivityTraducer(self, compType, startCellId)

    def mergeMyselfWithOnSameCoords(self, other):
        r"""
        mergeMyselfWithOnSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_mergeMyselfWithOnSameCoords(self, other)

    def checkFullyDefined(self):
        r"""
        checkFullyDefined(MEDCouplingPointSet self)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_checkFullyDefined(self)

    def isEmptyMesh(self, tinyInfo):
        r"""
        isEmptyMesh(MEDCouplingPointSet self, ivec tinyInfo) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_isEmptyMesh(self, tinyInfo)

    def deepCopyConnectivityOnly(self):
        r"""
        deepCopyConnectivityOnly(MEDCouplingPointSet self) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_deepCopyConnectivityOnly(self)

    def getBoundingBoxForBBTree(self, arcDetEps=1e-12):
        r"""
        getBoundingBoxForBBTree(MEDCouplingPointSet self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getBoundingBoxForBBTree(self, arcDetEps)

    def renumberNodesWithOffsetInConn(self, offset):
        r"""
        renumberNodesWithOffsetInConn(MEDCouplingPointSet self, int offset)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_renumberNodesWithOffsetInConn(self, offset)

    def areAllNodesFetched(self):
        r"""
        areAllNodesFetched(MEDCouplingPointSet self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_areAllNodesFetched(self)

    def computeDiameterField(self):
        r"""
        computeDiameterField(MEDCouplingPointSet self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_computeDiameterField(self)

    def invertOrientationOfAllCells(self):
        r"""
        invertOrientationOfAllCells(MEDCouplingPointSet self)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_invertOrientationOfAllCells(self)

    def __str__(self):
        r"""
        __str__(MEDCouplingPointSet self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingPointSet___str__(self)

    def buildNewNumberingFromCommonNodesFormat(self, comm, commIndex):
        r"""
        buildNewNumberingFromCommonNodesFormat(MEDCouplingPointSet self, DataArrayInt64 comm, DataArrayInt64 commIndex) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, comm, commIndex)

    def findCommonNodes(self, prec, limitTupleId=-1):
        r"""
        findCommonNodes(MEDCouplingPointSet self, double prec, mcIdType limitTupleId=-1) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_findCommonNodes(self, prec, limitTupleId)

    def getCoords(self):
        r"""
        getCoords(MEDCouplingPointSet self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getCoords(self)

    def buildPartOfMySelf(self, li, keepCoords=True):
        r"""
        buildPartOfMySelf(MEDCouplingPointSet self, PyObject * li, bool keepCoords=True) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildPartOfMySelf(self, li, keepCoords)

    def buildPartOfMySelfNode(self, li, fullyIn):
        r"""
        buildPartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildPartOfMySelfNode(self, li, fullyIn)

    def buildPartOfMySelfKeepCoords(self, li):
        r"""
        buildPartOfMySelfKeepCoords(MEDCouplingPointSet self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildPartOfMySelfKeepCoords(self, li)

    def buildPartOfMySelfKeepCoordsSlice(self, start, end, step):
        r"""
        buildPartOfMySelfKeepCoordsSlice(MEDCouplingPointSet self, mcIdType start, mcIdType end, mcIdType step) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildPartOfMySelfKeepCoordsSlice(self, start, end, step)

    def buildFacePartOfMySelfNode(self, li, fullyIn):
        r"""
        buildFacePartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, li, fullyIn)

    def renumberNodes(self, li, newNbOfNodes):
        r"""
        renumberNodes(MEDCouplingPointSet self, PyObject * li, mcIdType newNbOfNodes)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_renumberNodes(self, li, newNbOfNodes)

    def renumberNodesCenter(self, li, newNbOfNodes):
        r"""
        renumberNodesCenter(MEDCouplingPointSet self, PyObject * li, mcIdType newNbOfNodes)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_renumberNodesCenter(self, li, newNbOfNodes)

    def findNodesOnLine(self, pt, vec, eps):
        r"""
        findNodesOnLine(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_findNodesOnLine(self, pt, vec, eps)

    def findNodesOnPlane(self, pt, vec, eps):
        r"""
        findNodesOnPlane(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_findNodesOnPlane(self, pt, vec, eps)

    def getNodeIdsNearPoint(self, pt, eps):
        r"""
        getNodeIdsNearPoint(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getNodeIdsNearPoint(self, pt, eps)

    def getNodeIdsNearPoints(self, *args):
        r"""
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, mcIdType nbOfPoints, double eps) -> PyObject
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)

    def getCellsInBoundingBox(self, *args):
        r"""
        getCellsInBoundingBox(MEDCouplingPointSet self, INTERP_KERNEL::DirectedBoundingBox const & bbox, double eps) -> DataArrayInt64
        getCellsInBoundingBox(MEDCouplingPointSet self, PyObject * bbox, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)

    def duplicateNodesInCoords(self, li):
        r"""
        duplicateNodesInCoords(MEDCouplingPointSet self, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_duplicateNodesInCoords(self, li)

    def findCommonCells(self, compType, startCellId=0):
        r"""
        findCommonCells(MEDCouplingPointSet self, int compType, mcIdType startCellId=0) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_findCommonCells(self, compType, startCellId)

    def renumberNodesInConn(self, li):
        r"""
        renumberNodesInConn(MEDCouplingPointSet self, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_renumberNodesInConn(self, li)

    def getNodeIdsInUse(self):
        r"""
        getNodeIdsInUse(MEDCouplingPointSet self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getNodeIdsInUse(self)

    def fillCellIdsToKeepFromNodeIds(self, li, fullyIn):
        r"""
        fillCellIdsToKeepFromNodeIds(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_fillCellIdsToKeepFromNodeIds(self, li, fullyIn)

    def mergeNodes(self, precision):
        r"""
        mergeNodes(MEDCouplingPointSet self, double precision) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_mergeNodes(self, precision)

    def mergeNodesCenter(self, precision):
        r"""
        mergeNodesCenter(MEDCouplingPointSet self, double precision) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_mergeNodesCenter(self, precision)

    def getCellIdsLyingOnNodes(self, li, fullyIn):
        r"""
        getCellIdsLyingOnNodes(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_getCellIdsLyingOnNodes(self, li, fullyIn)

    def __getitem__(self, listOrDataArrI):
        r"""
        __getitem__(MEDCouplingPointSet self, PyObject * listOrDataArrI) -> MEDCouplingPointSet
        1
        """
        return _MEDCoupling.MEDCouplingPointSet___getitem__(self, listOrDataArrI)

    @staticmethod
    def Rotate2DAlg(*args):
        r"""
        Rotate2DAlg(PyObject * center, double angle, mcIdType nbNodes, PyObject * coords)
        Rotate2DAlg(PyObject * center, double angle, PyObject * coords)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_Rotate2DAlg(*args)

    @staticmethod
    def Rotate3DAlg(*args):
        r"""
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, mcIdType nbNodes, PyObject * coords)
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, PyObject * coords)
        1
        """
        return _MEDCoupling.MEDCouplingPointSet_Rotate3DAlg(*args)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingPointSet

# Register MEDCouplingPointSet in _MEDCoupling:
_MEDCoupling.MEDCouplingPointSet_swigregister(MEDCouplingPointSet)
class MEDCouplingUMeshCell(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self):
        r"""
        getType(MEDCouplingUMeshCell self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCell_getType(self)

    def __str__(self):
        r"""
        __str__(MEDCouplingUMeshCell self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCell___str__(self)

    def getAllConn(self):
        r"""
        getAllConn(MEDCouplingUMeshCell self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCell_getAllConn(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMeshCell

# Register MEDCouplingUMeshCell in _MEDCoupling:
_MEDCoupling.MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)
class MEDCouplingUMeshCellIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def next(self):
        r"""
        next(MEDCouplingUMeshCellIterator self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellIterator_next(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMeshCellIterator

# Register MEDCouplingUMeshCellIterator in _MEDCoupling:
_MEDCoupling.MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)
class MEDCouplingUMeshCellByTypeIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMeshCellByTypeIterator

    def next(self):
        r"""
        next(MEDCouplingUMeshCellByTypeIterator self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellByTypeIterator_next(self)

# Register MEDCouplingUMeshCellByTypeIterator in _MEDCoupling:
_MEDCoupling.MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)
class MEDCouplingUMeshCellByTypeEntry(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMeshCellByTypeEntry

    def __iter__(self):
        r"""
        __iter__(MEDCouplingUMeshCellByTypeEntry self) -> MEDCouplingUMeshCellByTypeIterator
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellByTypeEntry___iter__(self)

# Register MEDCouplingUMeshCellByTypeEntry in _MEDCoupling:
_MEDCoupling.MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)
class MEDCouplingUMeshCellEntry(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self):
        r"""
        getType(MEDCouplingUMeshCellEntry self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellEntry_getType(self)

    def getNumberOfElems(self):
        r"""
        getNumberOfElems(MEDCouplingUMeshCellEntry self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellEntry_getNumberOfElems(self)

    def __iter__(self):
        r"""
        __iter__(MEDCouplingUMeshCellEntry self) -> MEDCouplingUMeshCellIterator
        1
        """
        return _MEDCoupling.MEDCouplingUMeshCellEntry___iter__(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMeshCellEntry

# Register MEDCouplingUMeshCellEntry in _MEDCoupling:
_MEDCoupling.MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)
class MEDCouplingUMesh(MEDCouplingPointSet):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New() -> MEDCouplingUMesh
        New(char const * meshName, int meshDim) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_New(*args)

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkConsistencyLight(self)

    def checkGeomConsistency(self, eps=1e-12):
        r"""
        checkGeomConsistency(MEDCouplingUMesh self, double eps=1e-12)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkGeomConsistency(self, eps)

    def setMeshDimension(self, meshDim):
        r"""
        setMeshDimension(MEDCouplingUMesh self, int meshDim)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_setMeshDimension(self, meshDim)

    def allocateCells(self, nbOfCells=0):
        r"""
        allocateCells(MEDCouplingUMesh self, int nbOfCells=0)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_allocateCells(self, nbOfCells)

    def finishInsertingCells(self):
        r"""
        finishInsertingCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_finishInsertingCells(self)

    def cellsByType(self):
        r"""
        cellsByType(MEDCouplingUMesh self) -> MEDCouplingUMeshCellByTypeEntry
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_cellsByType(self)

    def setConnectivity(self, conn, connIndex, isComputingTypes=True):
        r"""
        setConnectivity(MEDCouplingUMesh self, DataArrayInt64 conn, DataArrayInt64 connIndex, bool isComputingTypes=True)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_setConnectivity(self, conn, connIndex, isComputingTypes)

    def getTypeOfCell(self, cellId):
        r"""
        getTypeOfCell(MEDCouplingUMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getTypeOfCell(self, cellId)

    def setPartOfMySelfSlice(self, start, end, step, otherOnSameCoordsThanThis):
        r"""
        setPartOfMySelfSlice(MEDCouplingUMesh self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_setPartOfMySelfSlice(self, start, end, step, otherOnSameCoordsThanThis)

    def getNodalConnectivityArrayLen(self):
        r"""
        getNodalConnectivityArrayLen(MEDCouplingUMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getNodalConnectivityArrayLen(self)

    def computeTypes(self):
        r"""
        computeTypes(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeTypes(self)

    def reprConnectivityOfThis(self):
        r"""
        reprConnectivityOfThis(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_reprConnectivityOfThis(self)

    def buildSetInstanceFromThis(self, spaceDim):
        r"""
        buildSetInstanceFromThis(MEDCouplingUMesh self, int spaceDim) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildSetInstanceFromThis(self, spaceDim)

    def conformize2D(self, eps):
        r"""
        conformize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_conformize2D(self, eps)

    def conformize3D(self, eps):
        r"""
        conformize3D(MEDCouplingUMesh self, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_conformize3D(self, eps)

    def colinearize2D(self, eps):
        r"""
        colinearize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_colinearize2D(self, eps)

    def colinearizeKeepingConform2D(self, eps):
        r"""
        colinearizeKeepingConform2D(MEDCouplingUMesh self, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_colinearizeKeepingConform2D(self, eps)

    def shiftNodeNumbersInConn(self, delta):
        r"""
        shiftNodeNumbersInConn(MEDCouplingUMesh self, int delta)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_shiftNodeNumbersInConn(self, delta)

    def getQuadraticStatus(self):
        r"""
        getQuadraticStatus(MEDCouplingUMesh self) -> std::vector< bool,std::allocator< bool > >
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getQuadraticStatus(self)

    def findCellIdsOnBoundary(self):
        r"""
        findCellIdsOnBoundary(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findCellIdsOnBoundary(self)

    def computeSkin(self):
        r"""
        computeSkin(MEDCouplingUMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeSkin(self)

    def checkConsecutiveCellTypes(self):
        r"""
        checkConsecutiveCellTypes(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkConsecutiveCellTypes(self)

    def checkConsecutiveCellTypesForMEDFileFrmt(self):
        r"""
        checkConsecutiveCellTypesForMEDFileFrmt(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkConsecutiveCellTypesForMEDFileFrmt(self)

    def rearrange2ConsecutiveCellTypes(self):
        r"""
        rearrange2ConsecutiveCellTypes(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)

    def sortCellsInMEDFileFrmt(self):
        r"""
        sortCellsInMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)

    def getRenumArrForMEDFileFrmt(self):
        r"""
        getRenumArrForMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getRenumArrForMEDFileFrmt(self)

    def convertCellArrayPerGeoType(self, da):
        r"""
        convertCellArrayPerGeoType(MEDCouplingUMesh self, DataArrayInt64 da) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertCellArrayPerGeoType(self, da)

    def orientCorrectlyPolyhedrons(self):
        r"""
        orientCorrectlyPolyhedrons(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)

    def isPresenceOfQuadratic(self):
        r"""
        isPresenceOfQuadratic(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_isPresenceOfQuadratic(self)

    def isFullyQuadratic(self):
        r"""
        isFullyQuadratic(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_isFullyQuadratic(self)

    def buildDirectionVectorField(self):
        r"""
        buildDirectionVectorField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildDirectionVectorField(self)

    def isContiguous1D(self):
        r"""
        isContiguous1D(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_isContiguous1D(self)

    def tessellate2D(self, eps):
        r"""
        tessellate2D(MEDCouplingUMesh self, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_tessellate2D(self, eps)

    def convertQuadraticCellsToLinear(self):
        r"""
        convertQuadraticCellsToLinear(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)

    def convertLinearCellsToQuadratic(self, conversionType=0):
        r"""
        convertLinearCellsToQuadratic(MEDCouplingUMesh self, int conversionType=0) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertLinearCellsToQuadratic(self, conversionType)

    def convertDegeneratedCells(self):
        r"""
        convertDegeneratedCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertDegeneratedCells(self)

    def convertDegeneratedCellsAndRemoveFlatOnes(self):
        r"""
        convertDegeneratedCellsAndRemoveFlatOnes(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertDegeneratedCellsAndRemoveFlatOnes(self)

    def removeDegenerated1DCells(self):
        r"""
        removeDegenerated1DCells(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_removeDegenerated1DCells(self)

    def areOnlySimplexCells(self):
        r"""
        areOnlySimplexCells(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_areOnlySimplexCells(self)

    def getEdgeRatioField(self):
        r"""
        getEdgeRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getEdgeRatioField(self)

    def getAspectRatioField(self):
        r"""
        getAspectRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getAspectRatioField(self)

    def getWarpField(self):
        r"""
        getWarpField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getWarpField(self)

    def getSkewField(self):
        r"""
        getSkewField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getSkewField(self)

    def computePlaneEquationOf3DFaces(self):
        r"""
        computePlaneEquationOf3DFaces(MEDCouplingUMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computePlaneEquationOf3DFaces(self)

    def convexEnvelop2D(self):
        r"""
        convexEnvelop2D(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convexEnvelop2D(self)

    def cppRepr(self):
        r"""
        cppRepr(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_cppRepr(self)

    def findAndCorrectBadOriented3DExtrudedCells(self):
        r"""
        findAndCorrectBadOriented3DExtrudedCells(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)

    def findAndCorrectBadOriented3DCells(self):
        r"""
        findAndCorrectBadOriented3DCells(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findAndCorrectBadOriented3DCells(self)

    def convertIntoSingleGeoTypeMesh(self):
        r"""
        convertIntoSingleGeoTypeMesh(MEDCouplingUMesh self) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertIntoSingleGeoTypeMesh(self)

    def generateGraph(self):
        r"""
        generateGraph(MEDCouplingUMesh self) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_generateGraph(self)

    def convertNodalConnectivityToStaticGeoTypeMesh(self):
        r"""
        convertNodalConnectivityToStaticGeoTypeMesh(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertNodalConnectivityToStaticGeoTypeMesh(self)

    def buildUnionOf2DMesh(self):
        r"""
        buildUnionOf2DMesh(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildUnionOf2DMesh(self)

    def buildUnionOf3DMesh(self):
        r"""
        buildUnionOf3DMesh(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildUnionOf3DMesh(self)

    def orderConsecutiveCells1D(self):
        r"""
        orderConsecutiveCells1D(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_orderConsecutiveCells1D(self)

    def getBoundingBoxForBBTreeFast(self):
        r"""
        getBoundingBoxForBBTreeFast(MEDCouplingUMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getBoundingBoxForBBTreeFast(self)

    def getBoundingBoxForBBTree2DQuadratic(self, arcDetEps=1e-12):
        r"""
        getBoundingBoxForBBTree2DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getBoundingBoxForBBTree2DQuadratic(self, arcDetEps)

    def getBoundingBoxForBBTree1DQuadratic(self, arcDetEps=1e-12):
        r"""
        getBoundingBoxForBBTree1DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getBoundingBoxForBBTree1DQuadratic(self, arcDetEps)

    def changeOrientationOfCells(self):
        r"""
        changeOrientationOfCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_changeOrientationOfCells(self)

    def orientCorrectly3DCells(self):
        r"""
        orientCorrectly3DCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_orientCorrectly3DCells(self)

    def computeCellCenterOfMassWithPrecision(self, eps):
        r"""
        computeCellCenterOfMassWithPrecision(MEDCouplingUMesh self, double eps) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeCellCenterOfMassWithPrecision(self, eps)

    def split2DCells(self, desc, descI, subNodesInSeg, subNodesInSegI, midOpt=None, midOptI=None):
        r"""
        split2DCells(MEDCouplingUMesh self, DataArrayInt64 desc, DataArrayInt64 descI, DataArrayInt64 subNodesInSeg, DataArrayInt64 subNodesInSegI, DataArrayInt64 midOpt=None, DataArrayInt64 midOptI=None) -> int
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_split2DCells(self, desc, descI, subNodesInSeg, subNodesInSegI, midOpt, midOptI)

    @staticmethod
    def Build0DMeshFromCoords(da):
        r"""
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_Build0DMeshFromCoords(da)

    @staticmethod
    def ComputeSpreadZoneGradually(arrIn, arrIndxIn):
        r"""
        ComputeSpreadZoneGradually(DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn, arrIndxIn)

    @staticmethod
    def ComputeRangesFromTypeDistribution(code):
        r"""
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingUMesh self) -> MEDCouplingUMesh
        __init__(MEDCouplingUMesh self, char const * meshName, int meshDim) -> MEDCouplingUMesh
        1
        """
        _MEDCoupling.MEDCouplingUMesh_swiginit(self, _MEDCoupling.new_MEDCouplingUMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingUMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingUMesh___repr__(self)

    def __iter__(self):
        r"""
        __iter__(MEDCouplingUMesh self) -> MEDCouplingUMeshCellIterator
        1
        """
        return _MEDCoupling.MEDCouplingUMesh___iter__(self)

    @staticmethod
    def Build1DMeshFromCoords(da):
        r"""
        Build1DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_Build1DMeshFromCoords(da)

    def convertToQuadraticBasedOnSeg3(self, seg3):
        r"""
        convertToQuadraticBasedOnSeg3(MEDCouplingUMesh self, MEDCoupling1SGTUMesh * seg3) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertToQuadraticBasedOnSeg3(self, seg3)

    def extrudeConnectivity(self, nbOfCellsToExtrude):
        r"""
        extrudeConnectivity(MEDCouplingUMesh self, mcIdType nbOfCellsToExtrude) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_extrudeConnectivity(self, nbOfCellsToExtrude)

    def getAllGeoTypesSorted(self):
        r"""
        getAllGeoTypesSorted(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getAllGeoTypesSorted(self)

    def setPartOfMySelf(self, li, otherOnSameCoordsThanThis):
        r"""
        setPartOfMySelf(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_setPartOfMySelf(self, li, otherOnSameCoordsThanThis)

    def __setitem__(self, li, otherOnSameCoordsThanThis):
        r"""
        __setitem__(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh___setitem__(self, li, otherOnSameCoordsThanThis)

    def insertNextCell(self, *args):
        r"""
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, mcIdType size, PyObject * li)
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_insertNextCell(self, *args)

    def getNodalConnectivity(self):
        r"""
        getNodalConnectivity(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getNodalConnectivity(self)

    def getNodalConnectivityIndex(self):
        r"""
        getNodalConnectivityIndex(MEDCouplingUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getNodalConnectivityIndex(self)

    @staticmethod
    def ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling=-1):
        r"""
        ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn, mcIdType nbOfDepthPeeling=-1) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling)

    @staticmethod
    def FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI):
        r"""
        FindCommonCellsAlg(int compType, mcIdType startCellId, DataArrayInt64 nodal, DataArrayInt64 nodalI, DataArrayInt64 revNodal, DataArrayInt64 revNodalI) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI)

    def distanceToPoint(self, point):
        r"""
        distanceToPoint(MEDCouplingUMesh self, PyObject * point) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_distanceToPoint(self, point)

    def distanceToPoints(self, pts):
        r"""
        distanceToPoints(MEDCouplingUMesh self, DataArrayDouble pts) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_distanceToPoints(self, pts)

    def tetrahedrize(self, policy):
        r"""
        tetrahedrize(MEDCouplingUMesh self, int policy) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_tetrahedrize(self, policy)

    def checkButterflyCells(self, eps=1e-12):
        r"""
        checkButterflyCells(MEDCouplingUMesh self, double eps=1e-12) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkButterflyCells(self, eps)

    def splitByType(self):
        r"""
        splitByType(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_splitByType(self)

    def partitionBySpreadZone(self):
        r"""
        partitionBySpreadZone(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_partitionBySpreadZone(self)

    @staticmethod
    def PartitionBySpreadZone(arrIn, arrIndxIn):
        r"""
        PartitionBySpreadZone(DataArrayInt64 arrIn, DataArrayInt64 arrIndxIn) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_PartitionBySpreadZone(arrIn, arrIndxIn)

    def keepSpecifiedCells(self, type, ids):
        r"""
        keepSpecifiedCells(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * ids) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_keepSpecifiedCells(self, type, ids)

    def checkConsecutiveCellTypesAndOrder(self, li):
        r"""
        checkConsecutiveCellTypesAndOrder(MEDCouplingUMesh self, PyObject * li) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, li)

    def getRenumArrForConsecutiveCellTypesSpec(self, li):
        r"""
        getRenumArrForConsecutiveCellTypesSpec(MEDCouplingUMesh self, PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, li)

    def findNodesToDuplicate(self, otherDimM1OnSameCoords):
        r"""
        findNodesToDuplicate(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findNodesToDuplicate(self, otherDimM1OnSameCoords)

    def findCellsToRenumber(self, otherDimM1OnSameCoords, dupNodes):
        r"""
        findCellsToRenumber(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords, DataArrayInt64 dupNodes) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findCellsToRenumber(self, otherDimM1OnSameCoords, dupNodes)

    def findCellIdsLyingOn(self, otherDimM1OnSameCoords):
        r"""
        findCellIdsLyingOn(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_findCellIdsLyingOn(self, otherDimM1OnSameCoords)

    def duplicateNodes(self, li):
        r"""
        duplicateNodes(MEDCouplingUMesh self, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_duplicateNodes(self, li)

    def duplicateNodesInConn(self, li, offset):
        r"""
        duplicateNodesInConn(MEDCouplingUMesh self, PyObject * li, mcIdType offset)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_duplicateNodesInConn(self, li, offset)

    def attractSeg3MidPtsAroundNodes(self, ratio, nodeIds):
        r"""
        attractSeg3MidPtsAroundNodes(MEDCouplingUMesh self, double ratio, PyObject * nodeIds)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_attractSeg3MidPtsAroundNodes(self, ratio, nodeIds)

    def getLevArrPerCellTypes(self, li):
        r"""
        getLevArrPerCellTypes(MEDCouplingUMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getLevArrPerCellTypes(self, li)

    def convertNodalConnectivityToDynamicGeoTypeMesh(self):
        r"""
        convertNodalConnectivityToDynamicGeoTypeMesh(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertNodalConnectivityToDynamicGeoTypeMesh(self)

    @staticmethod
    def AggregateSortedByTypeMeshesOnSameCoords(ms):
        r"""
        AggregateSortedByTypeMeshesOnSameCoords(PyObject * ms) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms)

    @staticmethod
    def MergeUMeshesOnSameCoords(*args):
        r"""
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject * ms) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    @staticmethod
    def FuseUMeshesOnSameCoords(ms, compType):
        r"""
        FuseUMeshesOnSameCoords(PyObject * ms, int compType) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms, compType)

    @staticmethod
    def PutUMeshesOnSameAggregatedCoords(ms):
        r"""
        PutUMeshesOnSameAggregatedCoords(PyObject * ms)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms)

    @staticmethod
    def MergeNodesOnUMeshesSharingSameCoords(ms, eps):
        r"""
        MergeNodesOnUMeshesSharingSameCoords(PyObject * ms, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms, eps)

    def are2DCellsNotCorrectlyOriented(self, vec, polyOnly):
        r"""
        are2DCellsNotCorrectlyOriented(MEDCouplingUMesh self, PyObject * vec, bool polyOnly) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, vec, polyOnly)

    def orientCorrectly2DCells(self, *args):
        r"""
        orientCorrectly2DCells(MEDCouplingUMesh self, MEDCouplingUMesh refFaces)
        orientCorrectly2DCells(MEDCouplingUMesh self, PyObject * vec, bool polyOnly)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_orientCorrectly2DCells(self, *args)

    def arePolyhedronsNotCorrectlyOriented(self):
        r"""
        arePolyhedronsNotCorrectlyOriented(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)

    def getFastAveragePlaneOfThis(self):
        r"""
        getFastAveragePlaneOfThis(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)

    @staticmethod
    def MergeUMeshes(*args):
        r"""
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject * li) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_MergeUMeshes(*args)

    def areCellsIncludedIn(self, other, compType):
        r"""
        areCellsIncludedIn(MEDCouplingUMesh self, MEDCouplingUMesh other, int compType) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_areCellsIncludedIn(self, other, compType)

    def areCellsIncludedInPolicy7(self, other):
        r"""
        areCellsIncludedInPolicy7(MEDCouplingUMesh self, MEDCouplingUMesh other) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_areCellsIncludedInPolicy7(self, other)

    def explode3DMeshTo1D(self, *args):
        r"""
        explode3DMeshTo1D(MEDCouplingUMesh self, DataArrayInt64 desc, DataArrayInt64 descIndx, DataArrayInt64 revDesc, DataArrayInt64 revDescIndx) -> MEDCouplingUMesh
        explode3DMeshTo1D(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_explode3DMeshTo1D(self, *args)

    def explodeMeshTo(self, targetDeltaLevel):
        r"""
        explodeMeshTo(MEDCouplingUMesh self, int targetDeltaLevel) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_explodeMeshTo(self, targetDeltaLevel)

    def explodeIntoEdges(self):
        r"""
        explodeIntoEdges(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_explodeIntoEdges(self)

    def explodeMeshIntoMicroEdges(self, *args):
        r"""
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self, DataArrayInt64 desc, DataArrayInt64 descIndx, DataArrayInt64 revDesc, DataArrayInt64 revDescIndx) -> MEDCouplingUMesh
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_explodeMeshIntoMicroEdges(self, *args)

    def buildDescendingConnectivity(self, *args):
        r"""
        buildDescendingConnectivity(MEDCouplingUMesh self, DataArrayInt64 desc, DataArrayInt64 descIndx, DataArrayInt64 revDesc, DataArrayInt64 revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)

    def buildDescendingConnectivity2(self, *args):
        r"""
        buildDescendingConnectivity2(MEDCouplingUMesh self, DataArrayInt64 desc, DataArrayInt64 descIndx, DataArrayInt64 revDesc, DataArrayInt64 revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)

    def computeNeighborsOfCells(self):
        r"""
        computeNeighborsOfCells(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeNeighborsOfCells(self)

    def computeNeighborsOfNodes(self):
        r"""
        computeNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeNeighborsOfNodes(self)

    def computeEnlargedNeighborsOfNodes(self):
        r"""
        computeEnlargedNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeEnlargedNeighborsOfNodes(self)

    def computeCellNeighborhoodFromNodesOne(self, nodeNeigh, nodeNeighI):
        r"""
        computeCellNeighborhoodFromNodesOne(MEDCouplingUMesh self, DataArrayInt64 nodeNeigh, DataArrayInt64 nodeNeighI) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_computeCellNeighborhoodFromNodesOne(self, nodeNeigh, nodeNeighI)

    @staticmethod
    def ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI):
        r"""
        ComputeNeighborsOfCellsAdv(DataArrayInt64 desc, DataArrayInt64 descI, DataArrayInt64 revDesc, DataArrayInt64 revDescI) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI)

    def emulateMEDMEMBDC(self, nM1LevMesh):
        r"""
        emulateMEDMEMBDC(MEDCouplingUMesh self, MEDCouplingUMesh nM1LevMesh) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_emulateMEDMEMBDC(self, nM1LevMesh)

    def getPartBarycenterAndOwner(self, da):
        r"""
        getPartBarycenterAndOwner(MEDCouplingUMesh self, DataArrayInt64 da) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getPartBarycenterAndOwner(self, da)

    def getPartMeasureField(self, isAbs, da):
        r"""
        getPartMeasureField(MEDCouplingUMesh self, bool isAbs, DataArrayInt64 da) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getPartMeasureField(self, isAbs, da)

    def buildPartOrthogonalField(self, da):
        r"""
        buildPartOrthogonalField(MEDCouplingUMesh self, DataArrayInt64 da) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildPartOrthogonalField(self, da)

    def getTypesOfPart(self, da):
        r"""
        getTypesOfPart(MEDCouplingUMesh self, DataArrayInt64 da) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getTypesOfPart(self, da)

    def keepCellIdsByType(self, type, da):
        r"""
        keepCellIdsByType(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, DataArrayInt64 da) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_keepCellIdsByType(self, type, da)

    @staticmethod
    def Intersect2DMeshes(m1, m2, eps):
        r"""
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_Intersect2DMeshes(m1, m2, eps)

    @staticmethod
    def Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps):
        r"""
        Intersect2DMeshWith1DLine(MEDCouplingUMesh mesh2D, MEDCouplingUMesh mesh1D, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps)

    def buildSlice3D(self, origin, vec, eps):
        r"""
        buildSlice3D(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildSlice3D(self, origin, vec, eps)

    def buildSlice3DSurf(self, origin, vec, eps):
        r"""
        buildSlice3DSurf(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildSlice3DSurf(self, origin, vec, eps)

    def clipSingle3DCellByPlane(self, origin, vec, eps):
        r"""
        clipSingle3DCellByPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_clipSingle3DCellByPlane(self, origin, vec, eps)

    def getCellIdsCrossingPlane(self, origin, vec, eps):
        r"""
        getCellIdsCrossingPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_getCellIdsCrossingPlane(self, origin, vec, eps)

    def convertToPolyTypes(self, li):
        r"""
        convertToPolyTypes(MEDCouplingUMesh self, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertToPolyTypes(self, li)

    def convertAllToPoly(self):
        r"""
        convertAllToPoly(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertAllToPoly(self)

    def convertExtrudedPolyhedra(self):
        r"""
        convertExtrudedPolyhedra(MEDCouplingUMesh self)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_convertExtrudedPolyhedra(self)

    def unPolyze(self):
        r"""
        unPolyze(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_unPolyze(self)

    def simplifyPolyhedra(self, eps):
        r"""
        simplifyPolyhedra(MEDCouplingUMesh self, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_simplifyPolyhedra(self, eps)

    def colinearizeEdges(self, eps):
        r"""
        colinearizeEdges(MEDCouplingUMesh self, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_colinearizeEdges(self, eps)

    def buildSpreadZonesWithPoly(self):
        r"""
        buildSpreadZonesWithPoly(MEDCouplingUMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)

    def buildExtrudedMesh(self, mesh1D, policy):
        r"""
        buildExtrudedMesh(MEDCouplingUMesh self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingUMesh_buildExtrudedMesh(self, mesh1D, policy)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingUMesh

# Register MEDCouplingUMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingUMesh_swigregister(MEDCouplingUMesh)
class MEDCouplingMappedExtrudedMesh(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
        New(MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_New(*args)

    def build3DUnstructuredMesh(self):
        r"""
        build3DUnstructuredMesh(MEDCouplingMappedExtrudedMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_build3DUnstructuredMesh(self)

    def get2DCellIdForExtrusion(self):
        r"""
        get2DCellIdForExtrusion(MEDCouplingMappedExtrudedMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_get2DCellIdForExtrusion(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingMappedExtrudedMesh self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, mcIdType cell2DId) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCouplingMappedExtrudedMesh self, MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCouplingMappedExtrudedMesh self) -> MEDCouplingMappedExtrudedMesh
        1
        """
        _MEDCoupling.MEDCouplingMappedExtrudedMesh_swiginit(self, _MEDCoupling.new_MEDCouplingMappedExtrudedMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingMappedExtrudedMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingMappedExtrudedMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh___repr__(self)

    def getMesh2D(self):
        r"""
        getMesh2D(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_getMesh2D(self)

    def getMesh1D(self):
        r"""
        getMesh1D(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_getMesh1D(self)

    def getMesh3DIds(self):
        r"""
        getMesh3DIds(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMappedExtrudedMesh_getMesh3DIds(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingMappedExtrudedMesh

# Register MEDCouplingMappedExtrudedMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingMappedExtrudedMesh_swigregister(MEDCouplingMappedExtrudedMesh)
class MEDCoupling1GTUMesh(MEDCouplingPointSet):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1GTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_New(*args)

    def getCellModelEnum(self):
        r"""
        getCellModelEnum(MEDCoupling1GTUMesh self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_getCellModelEnum(self)

    def getNodalConnectivityLength(self):
        r"""
        getNodalConnectivityLength(MEDCoupling1GTUMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_getNodalConnectivityLength(self)

    def allocateCells(self, nbOfCells=0):
        r"""
        allocateCells(MEDCoupling1GTUMesh self, int nbOfCells=0)
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_allocateCells(self, nbOfCells)

    def checkConsistencyOfConnectivity(self):
        r"""
        checkConsistencyOfConnectivity(MEDCoupling1GTUMesh self)
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_checkConsistencyOfConnectivity(self)

    def insertNextCell(self, li):
        r"""
        insertNextCell(MEDCoupling1GTUMesh self, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_insertNextCell(self, li)

    def getNodalConnectivity(self):
        r"""
        getNodalConnectivity(MEDCoupling1GTUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_getNodalConnectivity(self)

    @staticmethod
    def AggregateOnSameCoordsToUMesh(li):
        r"""
        AggregateOnSameCoordsToUMesh(PyObject * li) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li)
    __swig_destroy__ = _MEDCoupling.delete_MEDCoupling1GTUMesh

# Register MEDCoupling1GTUMesh in _MEDCoupling:
_MEDCoupling.MEDCoupling1GTUMesh_swigregister(MEDCoupling1GTUMesh)
class MEDCoupling1SGTUMesh(MEDCoupling1GTUMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_New(*args)

    def setNodalConnectivity(self, nodalConn):
        r"""
        setNodalConnectivity(MEDCoupling1SGTUMesh self, DataArrayInt64 nodalConn)
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_setNodalConnectivity(self, nodalConn)

    def getNumberOfNodesPerCell(self):
        r"""
        getNumberOfNodesPerCell(MEDCoupling1SGTUMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_getNumberOfNodesPerCell(self)

    def buildSetInstanceFromThis(self, spaceDim):
        r"""
        buildSetInstanceFromThis(MEDCoupling1SGTUMesh self, int spaceDim) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_buildSetInstanceFromThis(self, spaceDim)

    def computeDualMesh(self):
        r"""
        computeDualMesh(MEDCoupling1SGTUMesh self) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_computeDualMesh(self)

    def explodeEachHexa8To6Quad4(self):
        r"""
        explodeEachHexa8To6Quad4(MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_explodeEachHexa8To6Quad4(self)

    def sortHexa8EachOther(self):
        r"""
        sortHexa8EachOther(MEDCoupling1SGTUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_sortHexa8EachOther(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling1SGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling1SGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh
        1
        """
        _MEDCoupling.MEDCoupling1SGTUMesh_swiginit(self, _MEDCoupling.new_MEDCoupling1SGTUMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCoupling1SGTUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCoupling1SGTUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh___repr__(self)

    def structurizeMe(self, eps=1e-12):
        r"""
        structurizeMe(MEDCoupling1SGTUMesh self, double eps=1e-12) -> PyObject
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_structurizeMe(self, eps)

    def computeTriangleHeight(self):
        r"""
        computeTriangleHeight(MEDCoupling1SGTUMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_computeTriangleHeight(self)

    @staticmethod
    def Merge1SGTUMeshes(*args):
        r"""
        Merge1SGTUMeshes(MEDCoupling1SGTUMesh mesh1, MEDCoupling1SGTUMesh mesh2) -> MEDCoupling1SGTUMesh
        Merge1SGTUMeshes(PyObject * li) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args)

    @staticmethod
    def Merge1SGTUMeshesOnSameCoords(li):
        r"""
        Merge1SGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li)
    __swig_destroy__ = _MEDCoupling.delete_MEDCoupling1SGTUMesh

# Register MEDCoupling1SGTUMesh in _MEDCoupling:
_MEDCoupling.MEDCoupling1SGTUMesh_swigregister(MEDCoupling1SGTUMesh)
class MEDCoupling1DGTUMesh(MEDCoupling1GTUMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_New(*args)

    def setNodalConnectivity(self, nodalConn, nodalConnIndex):
        r"""
        setNodalConnectivity(MEDCoupling1DGTUMesh self, DataArrayInt64 nodalConn, DataArrayInt64 nodalConnIndex)
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_setNodalConnectivity(self, nodalConn, nodalConnIndex)

    def buildSetInstanceFromThis(self, spaceDim):
        r"""
        buildSetInstanceFromThis(MEDCoupling1DGTUMesh self, int spaceDim) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_buildSetInstanceFromThis(self, spaceDim)

    def isPacked(self):
        r"""
        isPacked(MEDCoupling1DGTUMesh self) -> bool
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_isPacked(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCoupling1DGTUMesh self) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling1DGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling1DGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh
        1
        """
        _MEDCoupling.MEDCoupling1DGTUMesh_swiginit(self, _MEDCoupling.new_MEDCoupling1DGTUMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCoupling1DGTUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCoupling1DGTUMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh___repr__(self)

    def getNodalConnectivityIndex(self):
        r"""
        getNodalConnectivityIndex(MEDCoupling1DGTUMesh self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_getNodalConnectivityIndex(self)

    def retrievePackedNodalConnectivity(self):
        r"""
        retrievePackedNodalConnectivity(MEDCoupling1DGTUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_retrievePackedNodalConnectivity(self)

    def copyWithNodalConnectivityPacked(self):
        r"""
        copyWithNodalConnectivityPacked(MEDCoupling1DGTUMesh self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_copyWithNodalConnectivityPacked(self)

    @staticmethod
    def Merge1DGTUMeshes(li):
        r"""
        Merge1DGTUMeshes(PyObject * li) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li)

    @staticmethod
    def Merge1DGTUMeshesOnSameCoords(li):
        r"""
        Merge1DGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li)

    @staticmethod
    def AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt):
        r"""
        AggregateNodalConnAndShiftNodeIds(PyObject * li, ivec offsetInNodeIdsPerElt) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt)
    __swig_destroy__ = _MEDCoupling.delete_MEDCoupling1DGTUMesh

# Register MEDCoupling1DGTUMesh in _MEDCoupling:
_MEDCoupling.MEDCoupling1DGTUMesh_swigregister(MEDCoupling1DGTUMesh)
class MEDCouplingStructuredMesh(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCellIdFromPos(self, i, j, k):
        r"""
        getCellIdFromPos(MEDCouplingStructuredMesh self, mcIdType i, mcIdType j, mcIdType k) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getCellIdFromPos(self, i, j, k)

    def getNodeIdFromPos(self, i, j, k):
        r"""
        getNodeIdFromPos(MEDCouplingStructuredMesh self, mcIdType i, mcIdType j, mcIdType k) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getNodeIdFromPos(self, i, j, k)

    def getNumberOfCellsOfSubLevelMesh(self):
        r"""
        getNumberOfCellsOfSubLevelMesh(MEDCouplingStructuredMesh self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getNumberOfCellsOfSubLevelMesh(self)

    def getSpaceDimensionOnNodeStruct(self):
        r"""
        getSpaceDimensionOnNodeStruct(MEDCouplingStructuredMesh self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getSpaceDimensionOnNodeStruct(self)

    def computeSquareness(self):
        r"""
        computeSquareness(MEDCouplingStructuredMesh self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_computeSquareness(self)

    def getNodeGridStructure(self):
        r"""
        getNodeGridStructure(MEDCouplingStructuredMesh self) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getNodeGridStructure(self)

    def getCellGridStructure(self):
        r"""
        getCellGridStructure(MEDCouplingStructuredMesh self) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getCellGridStructure(self)

    def build1SGTUnstructured(self):
        r"""
        build1SGTUnstructured(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_build1SGTUnstructured(self)

    def getLocationFromCellId(self, cellId):
        r"""
        getLocationFromCellId(MEDCouplingStructuredMesh self, mcIdType cellId) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getLocationFromCellId(self, cellId)

    def getLocationFromNodeId(self, cellId):
        r"""
        getLocationFromNodeId(MEDCouplingStructuredMesh self, mcIdType cellId) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_getLocationFromNodeId(self, cellId)

    @staticmethod
    def GetGeoTypeGivenMeshDimension(meshDim):
        r"""
        GetGeoTypeGivenMeshDimension(int meshDim) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim)

    def build1SGTSubLevelMesh(self):
        r"""
        build1SGTSubLevelMesh(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_build1SGTSubLevelMesh(self)

    @staticmethod
    def DeduceNumberOfGivenStructure(st):
        r"""
        DeduceNumberOfGivenStructure(ivec st) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st)

    @staticmethod
    def ComputeCornersGhost(st, ghostLev):
        r"""
        ComputeCornersGhost(ivec st, mcIdType ghostLev) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_ComputeCornersGhost(st, ghostLev)

    @staticmethod
    def GetSplitVectFromStruct(strct):
        r"""
        GetSplitVectFromStruct(ivec strct) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct)

    def buildStructuredSubPart(self, cellPart):
        r"""
        buildStructuredSubPart(MEDCouplingStructuredMesh self, PyObject * cellPart) -> MEDCouplingStructuredMesh
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_buildStructuredSubPart(self, cellPart)

    @staticmethod
    def BuildExplicitIdsFrom(st, part):
        r"""
        BuildExplicitIdsFrom(PyObject * st, PyObject * part) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st, part)

    @staticmethod
    def MultiplyPartOf(st, part, factor, da):
        r"""
        MultiplyPartOf(ivec st, PyObject * part, double factor, DataArrayDouble da)
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_MultiplyPartOf(st, part, factor, da)

    @staticmethod
    def MultiplyPartOfByGhost(st, part, ghostSize, factor, da):
        r"""
        MultiplyPartOfByGhost(ivec st, PyObject * part, mcIdType ghostSize, double factor, DataArrayDouble da)
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st, part, ghostSize, factor, da)

    @staticmethod
    def PutInGhostFormat(ghostSize, st, part):
        r"""
        PutInGhostFormat(mcIdType ghostSize, ivec st, PyObject * part) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize, st, part)

    @staticmethod
    def ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat):
        r"""
        ExtractFieldOfDoubleFrom(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat)

    @staticmethod
    def AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other):
        r"""
        AssignPartOfFieldOfDoubleUsing(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat, DataArrayDouble other)
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other)

    @staticmethod
    def DeduceNumberOfGivenRangeInCompactFrmt(part):
        r"""
        DeduceNumberOfGivenRangeInCompactFrmt(PyObject * part) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part)

    @staticmethod
    def Build1GTNodalConnectivity(li):
        r"""
        Build1GTNodalConnectivity(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li)

    @staticmethod
    def Build1GTNodalConnectivityOfSubLevelMesh(li):
        r"""
        Build1GTNodalConnectivityOfSubLevelMesh(PyObject * li) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li)

    @staticmethod
    def GetDimensionsFromCompactFrmt(partCompactFormat):
        r"""
        GetDimensionsFromCompactFrmt(PyObject * partCompactFormat) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat)

    @staticmethod
    def GetCompactFrmtFromDimensions(dims):
        r"""
        GetCompactFrmtFromDimensions(ivec dims) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims)

    @staticmethod
    def IntersectRanges(r1, r2):
        r"""
        IntersectRanges(PyObject * r1, PyObject * r2) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_IntersectRanges(r1, r2)

    @staticmethod
    def AreRangesIntersect(r1, r2):
        r"""
        AreRangesIntersect(PyObject * r1, PyObject * r2) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_AreRangesIntersect(r1, r2)

    @staticmethod
    def IsPartStructured(li, st):
        r"""
        IsPartStructured(PyObject * li, PyObject * st) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_IsPartStructured(li, st)

    @staticmethod
    def ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check=True):
        r"""
        ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs, bool check=True) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check)

    @staticmethod
    def TranslateCompactFrmt(part, translation):
        r"""
        TranslateCompactFrmt(PyObject * part, ivec translation) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_TranslateCompactFrmt(part, translation)

    @staticmethod
    def FindTranslationFrom(startingFrom, goingTo):
        r"""
        FindTranslationFrom(PyObject * startingFrom, PyObject * goingTo) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom, goingTo)

    @staticmethod
    def ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check=True):
        r"""
        ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig, bool check=True) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingStructuredMesh

# Register MEDCouplingStructuredMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingStructuredMesh_swigregister(MEDCouplingStructuredMesh)
class MEDCouplingCMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New() -> MEDCouplingCMesh
        New(std::string const & meshName) -> MEDCouplingCMesh
        1
        """
        return _MEDCoupling.MEDCouplingCMesh_New(*args)

    def setCoords(self, coordsX, coordsY=None, coordsZ=None):
        r"""
        setCoords(MEDCouplingCMesh self, DataArrayDouble coordsX, DataArrayDouble coordsY=None, DataArrayDouble coordsZ=None)
        1
        """
        return _MEDCoupling.MEDCouplingCMesh_setCoords(self, coordsX, coordsY, coordsZ)

    def setCoordsAt(self, i, arr):
        r"""
        setCoordsAt(MEDCouplingCMesh self, int i, DataArrayDouble arr)
        1
        """
        return _MEDCoupling.MEDCouplingCMesh_setCoordsAt(self, i, arr)

    def buildCurveLinear(self):
        r"""
        buildCurveLinear(MEDCouplingCMesh self) -> MEDCouplingCurveLinearMesh
        1
        """
        return _MEDCoupling.MEDCouplingCMesh_buildCurveLinear(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCMesh self) -> MEDCouplingCMesh
        __init__(MEDCouplingCMesh self, std::string const & meshName) -> MEDCouplingCMesh
        1
        """
        _MEDCoupling.MEDCouplingCMesh_swiginit(self, _MEDCoupling.new_MEDCouplingCMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingCMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingCMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingCMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingCMesh___repr__(self)

    def getCoordsAt(self, i):
        r"""
        getCoordsAt(MEDCouplingCMesh self, int i) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingCMesh_getCoordsAt(self, i)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCMesh

# Register MEDCouplingCMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingCMesh_swigregister(MEDCouplingCMesh)
class MEDCouplingCurveLinearMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New() -> MEDCouplingCurveLinearMesh
        New(std::string const & meshName) -> MEDCouplingCurveLinearMesh
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh_New(*args)

    def setCoords(self, coords):
        r"""
        setCoords(MEDCouplingCurveLinearMesh self, DataArrayDouble coords)
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh_setCoords(self, coords)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCurveLinearMesh self) -> MEDCouplingCurveLinearMesh
        __init__(MEDCouplingCurveLinearMesh self, std::string const & meshName) -> MEDCouplingCurveLinearMesh
        1
        """
        _MEDCoupling.MEDCouplingCurveLinearMesh_swiginit(self, _MEDCoupling.new_MEDCouplingCurveLinearMesh(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingCurveLinearMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingCurveLinearMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh___repr__(self)

    def getCoords(self):
        r"""
        getCoords(MEDCouplingCurveLinearMesh self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh_getCoords(self)

    def setNodeGridStructure(self, gridStruct):
        r"""
        setNodeGridStructure(MEDCouplingCurveLinearMesh self, PyObject * gridStruct)
        1
        """
        return _MEDCoupling.MEDCouplingCurveLinearMesh_setNodeGridStructure(self, gridStruct)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCurveLinearMesh

# Register MEDCouplingCurveLinearMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingCurveLinearMesh_swigregister(MEDCouplingCurveLinearMesh)
class MEDCouplingIMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def setSpaceDimension(self, spaceDim):
        r"""
        setSpaceDimension(MEDCouplingIMesh self, int spaceDim)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_setSpaceDimension(self, spaceDim)

    def getNodeStruct(self):
        r"""
        getNodeStruct(MEDCouplingIMesh self) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_getNodeStruct(self)

    def getOrigin(self):
        r"""
        getOrigin(MEDCouplingIMesh self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_getOrigin(self)

    def getDXYZ(self):
        r"""
        getDXYZ(MEDCouplingIMesh self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_getDXYZ(self)

    def setAxisUnit(self, unitName):
        r"""
        setAxisUnit(MEDCouplingIMesh self, std::string const & unitName)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_setAxisUnit(self, unitName)

    def getAxisUnit(self):
        r"""
        getAxisUnit(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_getAxisUnit(self)

    def getMeasureOfAnyCell(self):
        r"""
        getMeasureOfAnyCell(MEDCouplingIMesh self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_getMeasureOfAnyCell(self)

    def convertToCartesian(self):
        r"""
        convertToCartesian(MEDCouplingIMesh self) -> MEDCouplingCMesh
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_convertToCartesian(self)

    def refineWithFactor(self, factors):
        r"""
        refineWithFactor(MEDCouplingIMesh self, ivec factors)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_refineWithFactor(self, factors)

    def asSingleCell(self):
        r"""
        asSingleCell(MEDCouplingIMesh self) -> MEDCouplingIMesh
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_asSingleCell(self)

    def buildWithGhost(self, ghostLev):
        r"""
        buildWithGhost(MEDCouplingIMesh self, mcIdType ghostLev) -> MEDCouplingIMesh
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_buildWithGhost(self, ghostLev)

    @staticmethod
    def New(*args):
        r"""
        New() -> MEDCouplingIMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_New(*args)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingIMesh self) -> MEDCouplingIMesh
        __init__(MEDCouplingIMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh
        1
        """
        _MEDCoupling.MEDCouplingIMesh_swiginit(self, _MEDCoupling.new_MEDCouplingIMesh(*args))

    def setNodeStruct(self, nodeStrct):
        r"""
        setNodeStruct(MEDCouplingIMesh self, PyObject * nodeStrct)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_setNodeStruct(self, nodeStrct)

    def setOrigin(self, origin):
        r"""
        setOrigin(MEDCouplingIMesh self, PyObject * origin)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_setOrigin(self, origin)

    def setDXYZ(self, dxyz):
        r"""
        setDXYZ(MEDCouplingIMesh self, PyObject * dxyz)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_setDXYZ(self, dxyz)

    @staticmethod
    def CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA):
        r"""
        CondenseFineToCoarse(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA)

    @staticmethod
    def CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize):
        r"""
        CondenseFineToCoarseGhost(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA, mcIdType ghostSize)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize)

    @staticmethod
    def SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts):
        r"""
        SpreadCoarseToFine(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts)

    @staticmethod
    def SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize):
        r"""
        SpreadCoarseToFineGhost(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, mcIdType ghostSize)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    @staticmethod
    def SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize):
        r"""
        SpreadCoarseToFineGhostZone(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, mcIdType ghostSize)
        1
        """
        return _MEDCoupling.MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    def __str__(self):
        r"""
        __str__(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingIMesh___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingIMesh___repr__(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingIMesh

# Register MEDCouplingIMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingIMesh_swigregister(MEDCouplingIMesh)
class MEDCouplingField(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(MEDCouplingField self)
        1
        """
        return _MEDCoupling.MEDCouplingField_checkConsistencyLight(self)

    def areCompatibleForMerge(self, other):
        r"""
        areCompatibleForMerge(MEDCouplingField self, MEDCouplingField other) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingField_areCompatibleForMerge(self, other)

    def areStrictlyCompatible(self, other):
        r"""
        areStrictlyCompatible(MEDCouplingField self, MEDCouplingField other) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingField_areStrictlyCompatible(self, other)

    def areStrictlyCompatibleForMulDiv(self, other):
        r"""
        areStrictlyCompatibleForMulDiv(MEDCouplingField self, MEDCouplingField other) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingField_areStrictlyCompatibleForMulDiv(self, other)

    def copyTinyStringsFrom(self, other):
        r"""
        copyTinyStringsFrom(MEDCouplingField self, MEDCouplingField other)
        1
        """
        return _MEDCoupling.MEDCouplingField_copyTinyStringsFrom(self, other)

    def setMesh(self, mesh):
        r"""
        setMesh(MEDCouplingField self, MEDCouplingMesh mesh)
        1
        """
        return _MEDCoupling.MEDCouplingField_setMesh(self, mesh)

    def setName(self, name):
        r"""
        setName(MEDCouplingField self, char const * name)
        1
        """
        return _MEDCoupling.MEDCouplingField_setName(self, name)

    def getDescription(self):
        r"""
        getDescription(MEDCouplingField self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingField_getDescription(self)

    def setDescription(self, desc):
        r"""
        setDescription(MEDCouplingField self, char const * desc)
        1
        """
        return _MEDCoupling.MEDCouplingField_setDescription(self, desc)

    def getName(self):
        r"""
        getName(MEDCouplingField self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingField_getName(self)

    def getTypeOfField(self):
        r"""
        getTypeOfField(MEDCouplingField self) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCoupling.MEDCouplingField_getTypeOfField(self)

    def getNature(self):
        r"""
        getNature(MEDCouplingField self) -> MEDCoupling::NatureOfField
        1
        """
        return _MEDCoupling.MEDCouplingField_getNature(self)

    def setNature(self, nat):
        r"""
        setNature(MEDCouplingField self, MEDCoupling::NatureOfField nat)
        1
        """
        return _MEDCoupling.MEDCouplingField_setNature(self, nat)

    def getLocalizationOfDiscr(self):
        r"""
        getLocalizationOfDiscr(MEDCouplingField self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingField_getLocalizationOfDiscr(self)

    def buildMeasureField(self, isAbs):
        r"""
        buildMeasureField(MEDCouplingField self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingField_buildMeasureField(self, isAbs)

    def getNumberOfTuplesExpected(self):
        r"""
        getNumberOfTuplesExpected(MEDCouplingField self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getNumberOfTuplesExpected(self)

    def getNumberOfMeshPlacesExpected(self):
        r"""
        getNumberOfMeshPlacesExpected(MEDCouplingField self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getNumberOfMeshPlacesExpected(self)

    def setGaussLocalizationOnType(self, type, refCoo, gsCoo, wg):
        r"""
        setGaussLocalizationOnType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCoupling.MEDCouplingField_setGaussLocalizationOnType(self, type, refCoo, gsCoo, wg)

    def clearGaussLocalizations(self):
        r"""
        clearGaussLocalizations(MEDCouplingField self)
        1
        """
        return _MEDCoupling.MEDCouplingField_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self):
        r"""
        getNbOfGaussLocalization(MEDCouplingField self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, cellId):
        r"""
        getGaussLocalizationIdOfOneCell(MEDCouplingField self, mcIdType cellId) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, cellId)

    def getGaussLocalization(self, *args):
        r"""
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization
        1
        """
        return _MEDCoupling.MEDCouplingField_getGaussLocalization(self, *args)

    def getGaussLocalizationIdOfOneType(self, type):
        r"""
        getGaussLocalizationIdOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getGaussLocalizationIdOfOneType(self, type)

    def setDiscretization(self, newDisc):
        r"""
        setDiscretization(MEDCouplingField self, MEDCouplingFieldDiscretization newDisc)
        1
        """
        return _MEDCoupling.MEDCouplingField_setDiscretization(self, newDisc)

    def getMesh(self):
        r"""
        getMesh(MEDCouplingField self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_getMesh(self)

    def getDiscretization(self):
        r"""
        getDiscretization(MEDCouplingField self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_getDiscretization(self)

    def getGaussLocalizationIdsOfOneType(self, type):
        r"""
        getGaussLocalizationIdsOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, type)

    def buildSubMeshData(self, li):
        r"""
        buildSubMeshData(MEDCouplingField self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_buildSubMeshData(self, li)

    def buildSubMeshDataRange(self, begin, end, step):
        r"""
        buildSubMeshDataRange(MEDCouplingField self, mcIdType begin, mcIdType end, mcIdType step) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_buildSubMeshDataRange(self, begin, end, step)

    def computeTupleIdsToSelectFromCellIds(self, cellIds):
        r"""
        computeTupleIdsToSelectFromCellIds(MEDCouplingField self, PyObject * cellIds) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, cellIds)

    def setGaussLocalizationOnCells(self, li, refCoo, gsCoo, wg):
        r"""
        setGaussLocalizationOnCells(MEDCouplingField self, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCoupling.MEDCouplingField_setGaussLocalizationOnCells(self, li, refCoo, gsCoo, wg)

    def getCellIdsHavingGaussLocalization(self, locId):
        r"""
        getCellIdsHavingGaussLocalization(MEDCouplingField self, int locId) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingField_getCellIdsHavingGaussLocalization(self, locId)

    def getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType):
        r"""
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingField self, PyObject * code, PyObject * idsPerType) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingField_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingField

# Register MEDCouplingField in _MEDCoupling:
_MEDCoupling.MEDCouplingField_swigregister(MEDCouplingField)
class MEDCouplingFieldTemplate(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldInt32 const & f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldInt64 const & f) -> MEDCouplingFieldTemplate
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_New(*args)

    def simpleRepr(self):
        r"""
        simpleRepr(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_simpleRepr(self)

    def advancedRepr(self):
        r"""
        advancedRepr(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_advancedRepr(self)

    def isEqual(self, other, meshPrec):
        r"""
        isEqual(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_isEqual(self, other, meshPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_isEqualWithoutConsideringStr(self, other, meshPrec)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldInt32 const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldInt64 const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate
        1
        """
        _MEDCoupling.MEDCouplingFieldTemplate_swiginit(self, _MEDCoupling.new_MEDCouplingFieldTemplate(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate___repr__(self)

    def isEqualIfNotWhy(self, other, meshPrec):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldTemplate_isEqualIfNotWhy(self, other, meshPrec)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldTemplate

# Register MEDCouplingFieldTemplate in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)
class MEDCouplingFieldTdouble(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self):
        r"""
        getTimeDiscretization(MEDCouplingFieldTdouble self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldTdouble_getTimeDiscretization(self)

# Register MEDCouplingFieldTdouble in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldTdouble_swigregister(MEDCouplingFieldTdouble)
class MEDCouplingFieldTfloat(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self):
        r"""
        getTimeDiscretization(MEDCouplingFieldTfloat self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldTfloat_getTimeDiscretization(self)

# Register MEDCouplingFieldTfloat in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldTfloat_swigregister(MEDCouplingFieldTfloat)
class MEDCouplingFieldTint(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self):
        r"""
        getTimeDiscretization(MEDCouplingFieldTint self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCoupling.MEDCouplingFieldTint_getTimeDiscretization(self)

# Register MEDCouplingFieldTint in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldTint_swigregister(MEDCouplingFieldTint)
class MEDCouplingFieldDouble(MEDCouplingFieldTdouble):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_New(*args)

    def isEqual(self, other, meshPrec, valsPrec):
        r"""
        isEqual(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit):
        r"""
        setTimeUnit(MEDCouplingFieldDouble self, std::string const & unit)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setTimeUnit(self, unit)

    def getTimeUnit(self):
        r"""
        getTimeUnit(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getTimeUnit(self)

    def synchronizeTimeWithSupport(self):
        r"""
        synchronizeTimeWithSupport(MEDCouplingFieldDouble self)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_synchronizeTimeWithSupport(self)

    def copyTinyAttrFrom(self, other):
        r"""
        copyTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_copyTinyAttrFrom(self, other)

    def copyAllTinyAttrFrom(self, other):
        r"""
        copyAllTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_copyAllTinyAttrFrom(self, other)

    def simpleRepr(self):
        r"""
        simpleRepr(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_simpleRepr(self)

    def advancedRepr(self):
        r"""
        advancedRepr(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_advancedRepr(self)

    def writeVTK(self, fileName, isBinary=True):
        r"""
        writeVTK(MEDCouplingFieldDouble self, std::string const & fileName, bool isBinary=True) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_writeVTK(self, fileName, isBinary)

    def convertToIntField(self):
        r"""
        convertToIntField(MEDCouplingFieldDouble self) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_convertToIntField(self)

    def convertToFloatField(self):
        r"""
        convertToFloatField(MEDCouplingFieldDouble self) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_convertToFloatField(self)

    def clone(self, recDeepCpy):
        r"""
        clone(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy):
        r"""
        cloneWithMesh(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_cloneWithMesh(self, recDeepCpy)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_deepCopy(self)

    def buildNewTimeReprFromThis(self, td, deepCopy):
        r"""
        buildNewTimeReprFromThis(MEDCouplingFieldDouble self, MEDCoupling::TypeOfTimeDiscretization td, bool deepCopy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, td, deepCopy)

    def nodeToCellDiscretization(self):
        r"""
        nodeToCellDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_nodeToCellDiscretization(self)

    def cellToNodeDiscretization(self):
        r"""
        cellToNodeDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_cellToNodeDiscretization(self)

    def getIJ(self, tupleId, compoId):
        r"""
        getIJ(MEDCouplingFieldDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getIJ(self, tupleId, compoId)

    def getIJK(self, cellId, nodeIdInCell, compoId):
        r"""
        getIJK(MEDCouplingFieldDouble self, int cellId, int nodeIdInCell, int compoId) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getIJK(self, cellId, nodeIdInCell, compoId)

    def synchronizeTimeWithMesh(self):
        r"""
        synchronizeTimeWithMesh(MEDCouplingFieldDouble self)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_synchronizeTimeWithMesh(self)

    def setArray(self, array):
        r"""
        setArray(MEDCouplingFieldDouble self, DataArrayDouble array)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setArray(self, array)

    def setEndArray(self, array):
        r"""
        setEndArray(MEDCouplingFieldDouble self, DataArrayDouble array)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setEndArray(self, array)

    def setTime(self, val, iteration, order):
        r"""
        setTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setTime(self, val, iteration, order)

    def setStartTime(self, val, iteration, order):
        r"""
        setStartTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setStartTime(self, val, iteration, order)

    def setEndTime(self, val, iteration, order):
        r"""
        setEndTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setEndTime(self, val, iteration, order)

    def applyLin(self, *args):
        r"""
        applyLin(MEDCouplingFieldDouble self, double a, double b, int compoId)
        applyLin(MEDCouplingFieldDouble self, double a, double b)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyLin(self, *args)

    def getNumberOfComponents(self):
        r"""
        getNumberOfComponents(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getNumberOfComponents(self)

    def getNumberOfTuples(self):
        r"""
        getNumberOfTuples(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getNumberOfTuples(self)

    def getNumberOfValues(self):
        r"""
        getNumberOfValues(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getNumberOfValues(self)

    def setTimeTolerance(self, val):
        r"""
        setTimeTolerance(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setTimeTolerance(self, val)

    def getTimeTolerance(self):
        r"""
        getTimeTolerance(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getTimeTolerance(self)

    def setIteration(self, it):
        r"""
        setIteration(MEDCouplingFieldDouble self, int it)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setIteration(self, it)

    def setEndIteration(self, it):
        r"""
        setEndIteration(MEDCouplingFieldDouble self, int it)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setEndIteration(self, it)

    def setOrder(self, order):
        r"""
        setOrder(MEDCouplingFieldDouble self, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setOrder(self, order)

    def setEndOrder(self, order):
        r"""
        setEndOrder(MEDCouplingFieldDouble self, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setEndOrder(self, order)

    def setTimeValue(self, val):
        r"""
        setTimeValue(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setTimeValue(self, val)

    def setEndTimeValue(self, val):
        r"""
        setEndTimeValue(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setEndTimeValue(self, val)

    def changeUnderlyingMesh(self, other, levOfCheck, precOnMesh, eps=1e-15):
        r"""
        changeUnderlyingMesh(MEDCouplingFieldDouble self, MEDCouplingMesh other, int levOfCheck, double precOnMesh, double eps=1e-15)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_changeUnderlyingMesh(self, other, levOfCheck, precOnMesh, eps)

    def substractInPlaceDM(self, f, levOfCheck, precOnMesh, eps=1e-15):
        r"""
        substractInPlaceDM(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, int levOfCheck, double precOnMesh, double eps=1e-15)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_substractInPlaceDM(self, f, levOfCheck, precOnMesh, eps)

    def mergeNodes(self, eps, epsOnVals=1e-15):
        r"""
        mergeNodes(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_mergeNodes(self, eps, epsOnVals)

    def mergeNodesCenter(self, eps, epsOnVals=1e-15):
        r"""
        mergeNodesCenter(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_mergeNodesCenter(self, eps, epsOnVals)

    def zipCoords(self, epsOnVals=1e-15):
        r"""
        zipCoords(MEDCouplingFieldDouble self, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)

    def zipConnectivity(self, compType, epsOnVals=1e-15):
        r"""
        zipConnectivity(MEDCouplingFieldDouble self, int compType, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_zipConnectivity(self, compType, epsOnVals)

    def simplexize(self, policy):
        r"""
        simplexize(MEDCouplingFieldDouble self, int policy) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_simplexize(self, policy)

    def doublyContractedProduct(self):
        r"""
        doublyContractedProduct(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_doublyContractedProduct(self)

    def determinant(self):
        r"""
        determinant(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_determinant(self)

    def eigenValues(self):
        r"""
        eigenValues(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_eigenValues(self)

    def eigenVectors(self):
        r"""
        eigenVectors(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_eigenVectors(self)

    def inverse(self):
        r"""
        inverse(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_inverse(self)

    def trace(self):
        r"""
        trace(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_trace(self)

    def deviator(self):
        r"""
        deviator(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_deviator(self)

    def magnitude(self):
        r"""
        magnitude(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_magnitude(self)

    def maxPerTuple(self):
        r"""
        maxPerTuple(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_maxPerTuple(self)

    def changeNbOfComponents(self, newNbOfComp, dftValue=0.):
        r"""
        changeNbOfComponents(MEDCouplingFieldDouble self, std::size_t newNbOfComp, double dftValue=0.)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_changeNbOfComponents(self, newNbOfComp, dftValue)

    def sortPerTuple(self, asc):
        r"""
        sortPerTuple(MEDCouplingFieldDouble self, bool asc)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_sortPerTuple(self, asc)

    def assign(self, value):
        r"""
        assign(MEDCouplingFieldDouble self, double value) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_assign(self, value)

    def fillFromAnalytic(self, nbOfComp, func):
        r"""
        fillFromAnalytic(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_fillFromAnalytic(self, nbOfComp, func)

    def fillFromAnalyticCompo(self, nbOfComp, func):
        r"""
        fillFromAnalyticCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_fillFromAnalyticCompo(self, nbOfComp, func)

    def fillFromAnalyticNamedCompo(self, nbOfComp, varsOrder, func):
        r"""
        fillFromAnalyticNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_fillFromAnalyticNamedCompo(self, nbOfComp, varsOrder, func)

    def applyFuncCompo(self, nbOfComp, func):
        r"""
        applyFuncCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyFuncCompo(self, nbOfComp, func)

    def applyFuncNamedCompo(self, nbOfComp, varsOrder, func):
        r"""
        applyFuncNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func)

    def applyFunc(self, *args):
        r"""
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, double val)
        applyFunc(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyFunc(self, *args)

    def applyFuncFast32(self, func):
        r"""
        applyFuncFast32(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyFuncFast32(self, func)

    def applyFuncFast64(self, func):
        r"""
        applyFuncFast64(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_applyFuncFast64(self, func)

    def getMaxValue(self):
        r"""
        getMaxValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getMaxValue(self)

    def getMinValue(self):
        r"""
        getMinValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getMinValue(self)

    def getAverageValue(self):
        r"""
        getAverageValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getAverageValue(self)

    def norm2(self):
        r"""
        norm2(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_norm2(self)

    def findIdsInRange(self, vmin, vmax):
        r"""
        findIdsInRange(MEDCouplingFieldDouble self, double vmin, double vmax) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_findIdsInRange(self, vmin, vmax)

    def buildSubPartRange(self, begin, end, step):
        r"""
        buildSubPartRange(MEDCouplingFieldDouble self, int begin, int end, int step) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_buildSubPartRange(self, begin, end, step)

    @staticmethod
    def MeldFields(f1, f2):
        r"""
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_MeldFields(f1, f2)

    @staticmethod
    def DotFields(f1, f2):
        r"""
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_DotFields(f1, f2)

    def dot(self, other):
        r"""
        dot(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_dot(self, other)

    @staticmethod
    def CrossProductFields(f1, f2):
        r"""
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_CrossProductFields(f1, f2)

    def crossProduct(self, other):
        r"""
        crossProduct(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_crossProduct(self, other)

    @staticmethod
    def MaxFields(f1, f2):
        r"""
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_MaxFields(f1, f2)

    def max(self, other):
        r"""
        max(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_max(self, other)

    @staticmethod
    def MinFields(f1, f2):
        r"""
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_MinFields(f1, f2)

    @staticmethod
    def AddFields(f1, f2):
        r"""
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_AddFields(f1, f2)

    @staticmethod
    def SubstractFields(f1, f2):
        r"""
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_SubstractFields(f1, f2)

    @staticmethod
    def MultiplyFields(f1, f2):
        r"""
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_MultiplyFields(f1, f2)

    @staticmethod
    def DivideFields(f1, f2):
        r"""
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_DivideFields(f1, f2)

    def min(self, other):
        r"""
        min(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_min(self, other)

    def negate(self):
        r"""
        negate(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_negate(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldDouble self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        __init__(MEDCouplingFieldDouble self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        1
        """
        _MEDCoupling.MEDCouplingFieldDouble_swiginit(self, _MEDCoupling.new_MEDCouplingFieldDouble(*args))

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___repr__(self)

    def isEqualIfNotWhy(self, other, meshPrec, valsPrec):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def voronoize(self, eps):
        r"""
        voronoize(MEDCouplingFieldDouble self, double eps) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_voronoize(self, eps)

    def convertQuadraticCellsToLinear(self):
        r"""
        convertQuadraticCellsToLinear(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_convertQuadraticCellsToLinear(self)

    def computeVectorFieldCyl(self, center, vector):
        r"""
        computeVectorFieldCyl(MEDCouplingFieldDouble self, PyObject * center, PyObject * vector) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_computeVectorFieldCyl(self, center, vector)

    def getArray(self):
        r"""
        getArray(MEDCouplingFieldDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getArray(self)

    def getArrays(self):
        r"""
        getArrays(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getArrays(self)

    def setArrays(self, ls):
        r"""
        setArrays(MEDCouplingFieldDouble self, PyObject * ls)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setArrays(self, ls)

    def getEndArray(self):
        r"""
        getEndArray(MEDCouplingFieldDouble self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getEndArray(self)

    def getValueOnPos(self, i, j, k):
        r"""
        getValueOnPos(MEDCouplingFieldDouble self, mcIdType i, mcIdType j, mcIdType k) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getValueOnPos(self, i, j, k)

    def getValueOnMulti(self, locs):
        r"""
        getValueOnMulti(MEDCouplingFieldDouble self, PyObject * locs) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getValueOnMulti(self, locs)

    def getValueOn(self, *args):
        r"""
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl) -> PyObject
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl, double time) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getValueOn(self, *args)

    def setValues(self, li, nbOfTuples=None, nbOfComp=None):
        r"""
        setValues(MEDCouplingFieldDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setValues(self, li, nbOfTuples, nbOfComp)

    def getTime(self):
        r"""
        getTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getTime(self)

    def getStartTime(self):
        r"""
        getStartTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getStartTime(self)

    def getEndTime(self):
        r"""
        getEndTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getEndTime(self)

    def accumulate(self, *args):
        r"""
        accumulate(MEDCouplingFieldDouble self, int compId) -> double
        accumulate(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_accumulate(self, *args)

    def integral(self, *args):
        r"""
        integral(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        integral(MEDCouplingFieldDouble self, bool isWAbs) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_integral(self, *args)

    def getWeightedAverageValue(self, *args):
        r"""
        getWeightedAverageValue(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        getWeightedAverageValue(MEDCouplingFieldDouble self, bool isWAbs=True) -> PyObject
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getWeightedAverageValue(self, *args)

    def normL1(self, *args):
        r"""
        normL1(MEDCouplingFieldDouble self, int compId) -> double
        normL1(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_normL1(self, *args)

    def normL2(self, *args):
        r"""
        normL2(MEDCouplingFieldDouble self, int compId) -> double
        normL2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_normL2(self, *args)

    def normMax(self, *args):
        r"""
        normMax(MEDCouplingFieldDouble self, int compId) -> double
        normMax(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_normMax(self, *args)

    def renumberCells(self, li, check=True):
        r"""
        renumberCells(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_renumberCells(self, li, check)

    def renumberCellsWithoutMesh(self, li, check=True):
        r"""
        renumberCellsWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_renumberCellsWithoutMesh(self, li, check)

    def renumberNodes(self, li, eps=1e-15):
        r"""
        renumberNodes(MEDCouplingFieldDouble self, PyObject * li, double eps=1e-15)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_renumberNodes(self, li, eps)

    def renumberNodesWithoutMesh(self, li, newNbOfNodes, eps=1e-15):
        r"""
        renumberNodesWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, mcIdType newNbOfNodes, double eps=1e-15)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_renumberNodesWithoutMesh(self, li, newNbOfNodes, eps)

    def buildSubPart(self, li):
        r"""
        buildSubPart(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_buildSubPart(self, li)

    def __getitem__(self, li):
        r"""
        __getitem__(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___getitem__(self, li)

    def getMaxValue2(self):
        r"""
        getMaxValue2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getMaxValue2(self)

    def getMinValue2(self):
        r"""
        getMinValue2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getMinValue2(self)

    def keepSelectedComponents(self, li):
        r"""
        keepSelectedComponents(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_keepSelectedComponents(self, li)

    def setSelectedComponents(self, f, li):
        r"""
        setSelectedComponents(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, PyObject * li)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_setSelectedComponents(self, f, li)

    def extractSlice3D(self, origin, vec, eps):
        r"""
        extractSlice3D(MEDCouplingFieldDouble self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_extractSlice3D(self, origin, vec, eps)

    def __add__(self, obj):
        r"""
        __add__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___add__(self, obj)

    def __radd__(self, obj):
        r"""
        __radd__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___radd__(self, obj)

    def __sub__(self, obj):
        r"""
        __sub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___sub__(self, obj)

    def __rsub__(self, obj):
        r"""
        __rsub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___rsub__(self, obj)

    def __mul__(self, obj):
        r"""
        __mul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___mul__(self, obj)

    def __rmul__(self, obj):
        r"""
        __rmul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___rmul__(self, obj)

    def __div__(self, obj):
        r"""
        __div__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___div__(self, obj)

    def __rdiv__(self, obj):
        r"""
        __rdiv__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___rdiv__(self, obj)

    def __pow__(self, obj):
        r"""
        __pow__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___pow__(self, obj)

    def __neg__(self):
        r"""
        __neg__(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___neg__(self)

    def ___iadd___(self, trueSelf, obj):
        r"""
        ___iadd___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf, obj):
        r"""
        ___isub___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf, obj):
        r"""
        ___imul___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf, obj):
        r"""
        ___idiv___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble____idiv___(self, trueSelf, obj)

    def ___ipow___(self, trueSelf, obj):
        r"""
        ___ipow___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble____ipow___(self, trueSelf, obj)

    @staticmethod
    def MergeFields(*args):
        r"""
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_MergeFields(*args)

    @staticmethod
    def WriteVTK(fileName, li, isBinary=True):
        r"""
        WriteVTK(char const * fileName, PyObject * li, bool isBinary=True) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_WriteVTK(fileName, li, isBinary)

    def getTinySerializationInformation(self):
        r"""
        getTinySerializationInformation(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_getTinySerializationInformation(self)

    def serialize(self):
        r"""
        serialize(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble_serialize(self)

    def __getstate__(self):
        r"""
        __getstate__(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(MEDCouplingFieldDouble self, PyObject * inp)
        1
        """
        return _MEDCoupling.MEDCouplingFieldDouble___setstate__(self, inp)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldDouble

# Register MEDCouplingFieldDouble in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)
class MEDCouplingMultiFields(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getNumberOfFields(self):
        r"""
        getNumberOfFields(MEDCouplingMultiFields self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getNumberOfFields(self)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingMultiFields self) -> MEDCouplingMultiFields
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_deepCopy(self)

    def simpleRepr(self):
        r"""
        simpleRepr(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_simpleRepr(self)

    def advancedRepr(self):
        r"""
        advancedRepr(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_advancedRepr(self)

    def isEqual(self, other, meshPrec, valsPrec):
        r"""
        isEqual(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def checkConsistencyLight(self):
        r"""
        checkConsistencyLight(MEDCouplingMultiFields self)
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_checkConsistencyLight(self)

    def __str__(self):
        r"""
        __str__(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields___str__(self)

    @staticmethod
    def New(li):
        r"""
        New(PyObject * li) -> MEDCouplingMultiFields
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_New(li)

    def __init__(self, li):
        r"""
        __init__(MEDCouplingMultiFields self, PyObject * li) -> MEDCouplingMultiFields
        1
        """
        _MEDCoupling.MEDCouplingMultiFields_swiginit(self, _MEDCoupling.new_MEDCouplingMultiFields(li))

    def getFields(self):
        r"""
        getFields(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getFields(self)

    def getFieldAtPos(self, id):
        r"""
        getFieldAtPos(MEDCouplingMultiFields self, int id) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getFieldAtPos(self, id)

    def getMeshes(self):
        r"""
        getMeshes(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getMeshes(self)

    def getDifferentMeshes(self):
        r"""
        getDifferentMeshes(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getDifferentMeshes(self)

    def getArrays(self):
        r"""
        getArrays(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getArrays(self)

    def getDifferentArrays(self):
        r"""
        getDifferentArrays(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingMultiFields_getDifferentArrays(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingMultiFields

# Register MEDCouplingMultiFields in _MEDCoupling:
_MEDCoupling.MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)
class MEDCouplingFieldInt32(MEDCouplingFieldTint):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt32
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_New(*args)

    def isEqual(self, other, meshPrec, valsPrec):
        r"""
        isEqual(MEDCouplingFieldInt32 self, MEDCouplingFieldInt32 other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldInt32 self, MEDCouplingFieldInt32 other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit):
        r"""
        setTimeUnit(MEDCouplingFieldInt32 self, std::string const & unit)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_setTimeUnit(self, unit)

    def getTimeUnit(self):
        r"""
        getTimeUnit(MEDCouplingFieldInt32 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_getTimeUnit(self)

    def setTime(self, val, iteration, order):
        r"""
        setTime(MEDCouplingFieldInt32 self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_setTime(self, val, iteration, order)

    def setArray(self, array):
        r"""
        setArray(MEDCouplingFieldInt32 self, DataArrayInt32 array)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_setArray(self, array)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingFieldInt32 self) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_deepCopy(self)

    def clone(self, recDeepCpy):
        r"""
        clone(MEDCouplingFieldInt32 self, bool recDeepCpy) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy):
        r"""
        cloneWithMesh(MEDCouplingFieldInt32 self, bool recDeepCpy) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_cloneWithMesh(self, recDeepCpy)

    def convertToDblField(self):
        r"""
        convertToDblField(MEDCouplingFieldInt32 self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_convertToDblField(self)

    def buildSubPartRange(self, begin, end, step):
        r"""
        buildSubPartRange(MEDCouplingFieldInt32 self, int begin, int end, int step) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_buildSubPartRange(self, begin, end, step)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldInt32 self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt32
        __init__(MEDCouplingFieldInt32 self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt32
        1
        """
        _MEDCoupling.MEDCouplingFieldInt32_swiginit(self, _MEDCoupling.new_MEDCouplingFieldInt32(*args))

    def isEqualIfNotWhy(self, other, meshPrec, valsPrec):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldInt32 self, MEDCouplingFieldInt32 other, double meshPrec, int valsPrec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldInt32 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingFieldInt32 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32___repr__(self)

    def buildSubPart(self, li):
        r"""
        buildSubPart(MEDCouplingFieldInt32 self, PyObject * li) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_buildSubPart(self, li)

    def __getitem__(self, li):
        r"""
        __getitem__(MEDCouplingFieldInt32 self, PyObject * li) -> MEDCouplingFieldInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32___getitem__(self, li)

    def getArray(self):
        r"""
        getArray(MEDCouplingFieldInt32 self) -> DataArrayInt32
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_getArray(self)

    def getTime(self):
        r"""
        getTime(MEDCouplingFieldInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_getTime(self)

    def getTinySerializationInformation(self):
        r"""
        getTinySerializationInformation(MEDCouplingFieldInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_getTinySerializationInformation(self)

    def serialize(self):
        r"""
        serialize(MEDCouplingFieldInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32_serialize(self)

    def __getstate__(self):
        r"""
        __getstate__(MEDCouplingFieldInt32 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(MEDCouplingFieldInt32 self, PyObject * inp)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt32___setstate__(self, inp)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldInt32

# Register MEDCouplingFieldInt32 in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldInt32_swigregister(MEDCouplingFieldInt32)
class MEDCouplingFieldInt64(MEDCouplingFieldTint):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt64
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_New(*args)

    def isEqual(self, other, meshPrec, valsPrec):
        r"""
        isEqual(MEDCouplingFieldInt64 self, MEDCouplingFieldInt64 other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldInt64 self, MEDCouplingFieldInt64 other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit):
        r"""
        setTimeUnit(MEDCouplingFieldInt64 self, std::string const & unit)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_setTimeUnit(self, unit)

    def getTimeUnit(self):
        r"""
        getTimeUnit(MEDCouplingFieldInt64 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_getTimeUnit(self)

    def setTime(self, val, iteration, order):
        r"""
        setTime(MEDCouplingFieldInt64 self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_setTime(self, val, iteration, order)

    def setArray(self, array):
        r"""
        setArray(MEDCouplingFieldInt64 self, DataArrayInt64 array)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_setArray(self, array)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingFieldInt64 self) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_deepCopy(self)

    def clone(self, recDeepCpy):
        r"""
        clone(MEDCouplingFieldInt64 self, bool recDeepCpy) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy):
        r"""
        cloneWithMesh(MEDCouplingFieldInt64 self, bool recDeepCpy) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_cloneWithMesh(self, recDeepCpy)

    def convertToDblField(self):
        r"""
        convertToDblField(MEDCouplingFieldInt64 self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_convertToDblField(self)

    def buildSubPartRange(self, begin, end, step):
        r"""
        buildSubPartRange(MEDCouplingFieldInt64 self, int begin, int end, int step) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_buildSubPartRange(self, begin, end, step)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldInt64 self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt64
        __init__(MEDCouplingFieldInt64 self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt64
        1
        """
        _MEDCoupling.MEDCouplingFieldInt64_swiginit(self, _MEDCoupling.new_MEDCouplingFieldInt64(*args))

    def isEqualIfNotWhy(self, other, meshPrec, valsPrec):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldInt64 self, MEDCouplingFieldInt64 other, double meshPrec, int valsPrec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldInt64 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingFieldInt64 self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64___repr__(self)

    def buildSubPart(self, li):
        r"""
        buildSubPart(MEDCouplingFieldInt64 self, PyObject * li) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_buildSubPart(self, li)

    def __getitem__(self, li):
        r"""
        __getitem__(MEDCouplingFieldInt64 self, PyObject * li) -> MEDCouplingFieldInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64___getitem__(self, li)

    def getArray(self):
        r"""
        getArray(MEDCouplingFieldInt64 self) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_getArray(self)

    def getTime(self):
        r"""
        getTime(MEDCouplingFieldInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_getTime(self)

    def getTinySerializationInformation(self):
        r"""
        getTinySerializationInformation(MEDCouplingFieldInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_getTinySerializationInformation(self)

    def serialize(self):
        r"""
        serialize(MEDCouplingFieldInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64_serialize(self)

    def __getstate__(self):
        r"""
        __getstate__(MEDCouplingFieldInt64 self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(MEDCouplingFieldInt64 self, PyObject * inp)
        1
        """
        return _MEDCoupling.MEDCouplingFieldInt64___setstate__(self, inp)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldInt64

# Register MEDCouplingFieldInt64 in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldInt64_swigregister(MEDCouplingFieldInt64)
class MEDCouplingFieldFloat(MEDCouplingFieldTfloat):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def New(*args):
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_New(*args)

    def isEqual(self, other, meshPrec, valsPrec):
        r"""
        isEqual(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec):
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit):
        r"""
        setTimeUnit(MEDCouplingFieldFloat self, std::string const & unit)
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_setTimeUnit(self, unit)

    def getTimeUnit(self):
        r"""
        getTimeUnit(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_getTimeUnit(self)

    def setTime(self, val, iteration, order):
        r"""
        setTime(MEDCouplingFieldFloat self, double val, int iteration, int order)
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_setTime(self, val, iteration, order)

    def setArray(self, array):
        r"""
        setArray(MEDCouplingFieldFloat self, DataArrayFloat array)
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_setArray(self, array)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingFieldFloat self) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_deepCopy(self)

    def clone(self, recDeepCpy):
        r"""
        clone(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy):
        r"""
        cloneWithMesh(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_cloneWithMesh(self, recDeepCpy)

    def convertToDblField(self):
        r"""
        convertToDblField(MEDCouplingFieldFloat self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_convertToDblField(self)

    def buildSubPartRange(self, begin, end, step):
        r"""
        buildSubPartRange(MEDCouplingFieldFloat self, int begin, int end, int step) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_buildSubPartRange(self, begin, end, step)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldFloat self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        __init__(MEDCouplingFieldFloat self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        1
        """
        _MEDCoupling.MEDCouplingFieldFloat_swiginit(self, _MEDCoupling.new_MEDCouplingFieldFloat(*args))

    def isEqualIfNotWhy(self, other, meshPrec, valsPrec):
        r"""
        isEqualIfNotWhy(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat___str__(self)

    def __repr__(self):
        r"""
        __repr__(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat___repr__(self)

    def buildSubPart(self, li):
        r"""
        buildSubPart(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_buildSubPart(self, li)

    def __getitem__(self, li):
        r"""
        __getitem__(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat___getitem__(self, li)

    def getArray(self):
        r"""
        getArray(MEDCouplingFieldFloat self) -> DataArrayFloat
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_getArray(self)

    def getTime(self):
        r"""
        getTime(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_getTime(self)

    def getTinySerializationInformation(self):
        r"""
        getTinySerializationInformation(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_getTinySerializationInformation(self)

    def serialize(self):
        r"""
        serialize(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat_serialize(self)

    def __getstate__(self):
        r"""
        __getstate__(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat___getstate__(self)

    def __setstate__(self, inp):
        r"""
        __setstate__(MEDCouplingFieldFloat self, PyObject * inp)
        1
        """
        return _MEDCoupling.MEDCouplingFieldFloat___setstate__(self, inp)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldFloat

# Register MEDCouplingFieldFloat in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldFloat_swigregister(MEDCouplingFieldFloat)
class MEDCouplingDefinitionTime(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MEDCouplingDefinitionTime self) -> MEDCouplingDefinitionTime
        1
        """
        _MEDCoupling.MEDCouplingDefinitionTime_swiginit(self, _MEDCoupling.new_MEDCouplingDefinitionTime())

    def assign(self, other):
        r"""
        assign(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other)
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_assign(self, other)

    def isEqual(self, other):
        r"""
        isEqual(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_isEqual(self, other)

    def getTimeResolution(self):
        r"""
        getTimeResolution(MEDCouplingDefinitionTime self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_getTimeResolution(self)

    def getHotSpotsTime(self):
        r"""
        getHotSpotsTime(MEDCouplingDefinitionTime self) -> dvec
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_getHotSpotsTime(self)

    def __str__(self):
        r"""
        __str__(MEDCouplingDefinitionTime self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime___str__(self)

    def getIdsOnTimeRight(self, tm):
        r"""
        getIdsOnTimeRight(MEDCouplingDefinitionTime self, double tm) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, tm)

    def getIdsOnTimeLeft(self, tm):
        r"""
        getIdsOnTimeLeft(MEDCouplingDefinitionTime self, double tm) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, tm)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingDefinitionTime

# Register MEDCouplingDefinitionTime in _MEDCoupling:
_MEDCoupling.MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)
class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTimeTolerance(self):
        r"""
        getTimeTolerance(MEDCouplingFieldOverTime self) -> double
        1
        """
        return _MEDCoupling.MEDCouplingFieldOverTime_getTimeTolerance(self)

    def getDefinitionTimeZone(self):
        r"""
        getDefinitionTimeZone(MEDCouplingFieldOverTime self) -> MEDCouplingDefinitionTime
        1
        """
        return _MEDCoupling.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)

    def __init__(self, li):
        r"""
        __init__(MEDCouplingFieldOverTime self, PyObject * li) -> MEDCouplingFieldOverTime
        1
        """
        _MEDCoupling.MEDCouplingFieldOverTime_swiginit(self, _MEDCoupling.new_MEDCouplingFieldOverTime(li))

    def __str__(self):
        r"""
        __str__(MEDCouplingFieldOverTime self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingFieldOverTime___str__(self)

    @staticmethod
    def New(li):
        r"""
        New(PyObject * li) -> MEDCouplingFieldOverTime
        1
        """
        return _MEDCoupling.MEDCouplingFieldOverTime_New(li)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingFieldOverTime

# Register MEDCouplingFieldOverTime in _MEDCoupling:
_MEDCoupling.MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)
class MEDCouplingCartesianAMRPatchGen(RefCountObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCellsRecursiveWithOverlap(self):
        r"""
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithOverlap(self)

    def getNumberOfCellsRecursiveWithoutOverlap(self):
        r"""
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithoutOverlap(self)

    def getMaxNumberOfLevelsRelativeToThis(self):
        r"""
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatchGen_getMaxNumberOfLevelsRelativeToThis(self)

    def getMesh(self):
        r"""
        getMesh(MEDCouplingCartesianAMRPatchGen self) -> MEDCouplingCartesianAMRMeshGen *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatchGen_getMesh(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRPatchGen

# Register MEDCouplingCartesianAMRPatchGen in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRPatchGen_swigregister(MEDCouplingCartesianAMRPatchGen)
class MEDCouplingCartesianAMRPatch(MEDCouplingCartesianAMRPatchGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfOverlapedCellsForFather(self):
        r"""
        getNumberOfOverlapedCellsForFather(MEDCouplingCartesianAMRPatch self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_getNumberOfOverlapedCellsForFather(self)

    def isInMyNeighborhood(self, other, ghostLev):
        r"""
        isInMyNeighborhood(MEDCouplingCartesianAMRPatch self, MEDCouplingCartesianAMRPatch other, int ghostLev) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_isInMyNeighborhood(self, other, ghostLev)

    def computeCellGridSt(self):
        r"""
        computeCellGridSt(MEDCouplingCartesianAMRPatch self) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_computeCellGridSt(self)

    def getBLTRRange(self):
        r"""
        getBLTRRange(MEDCouplingCartesianAMRPatch self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_getBLTRRange(self)

    def getBLTRRangeRelativeToGF(self):
        r"""
        getBLTRRangeRelativeToGF(MEDCouplingCartesianAMRPatch self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_getBLTRRangeRelativeToGF(self)

    def addPatch(self, bottomLeftTopRight, factors):
        r"""
        addPatch(MEDCouplingCartesianAMRPatch self, PyObject * bottomLeftTopRight, ivec factors)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch_addPatch(self, bottomLeftTopRight, factors)

    def __getitem__(self, patchId):
        r"""
        __getitem__(MEDCouplingCartesianAMRPatch self, mcIdType patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch___getitem__(self, patchId)

    def __delitem__(self, patchId):
        r"""
        __delitem__(MEDCouplingCartesianAMRPatch self, mcIdType patchId)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch___delitem__(self, patchId)

    def __len__(self):
        r"""
        __len__(MEDCouplingCartesianAMRPatch self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRPatch___len__(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRPatch

# Register MEDCouplingCartesianAMRPatch in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRPatch_swigregister(MEDCouplingCartesianAMRPatch)
class MEDCouplingCartesianAMRPatchGF(MEDCouplingCartesianAMRPatchGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRPatchGF

# Register MEDCouplingCartesianAMRPatchGF in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRPatchGF_swigregister(MEDCouplingCartesianAMRPatchGF)
class MEDCouplingCartesianAMRMeshGen(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getAbsoluteLevel(self):
        r"""
        getAbsoluteLevel(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevel(self)

    def getAbsoluteLevelRelativeTo(self, ref):
        r"""
        getAbsoluteLevelRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevelRelativeTo(self, ref)

    def getPositionRelativeTo(self, ref):
        r"""
        getPositionRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPositionRelativeTo(self, ref)

    def getSpaceDimension(self):
        r"""
        getSpaceDimension(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getSpaceDimension(self)

    def getFactors(self):
        r"""
        getFactors(MEDCouplingCartesianAMRMeshGen self) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getFactors(self)

    def setFactors(self, newFactors):
        r"""
        setFactors(MEDCouplingCartesianAMRMeshGen self, ivec newFactors)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_setFactors(self, newFactors)

    def getMaxNumberOfLevelsRelativeToThis(self):
        r"""
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getMaxNumberOfLevelsRelativeToThis(self)

    def getNumberOfCellsAtCurrentLevel(self):
        r"""
        getNumberOfCellsAtCurrentLevel(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevel(self)

    def getNumberOfCellsAtCurrentLevelGhost(self, ghostLev):
        r"""
        getNumberOfCellsAtCurrentLevelGhost(MEDCouplingCartesianAMRMeshGen self, mcIdType ghostLev) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevelGhost(self, ghostLev)

    def getNumberOfCellsRecursiveWithOverlap(self):
        r"""
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithOverlap(self)

    def getNumberOfCellsRecursiveWithoutOverlap(self):
        r"""
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithoutOverlap(self)

    def isPatchInNeighborhoodOf(self, patchId1, patchId2, ghostLev):
        r"""
        isPatchInNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId1, mcIdType patchId2, mcIdType ghostLev) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_isPatchInNeighborhoodOf(self, patchId1, patchId2, ghostLev)

    def detachFromFather(self):
        r"""
        detachFromFather(MEDCouplingCartesianAMRMeshGen self)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_detachFromFather(self)

    def getNumberOfPatches(self):
        r"""
        getNumberOfPatches(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getNumberOfPatches(self)

    def getPatchIdFromChildMesh(self, mesh):
        r"""
        getPatchIdFromChildMesh(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen mesh) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPatchIdFromChildMesh(self, mesh)

    def buildUnstructured(self):
        r"""
        buildUnstructured(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingUMesh
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_buildUnstructured(self)

    def extractGhostFrom(self, ghostSz, arr):
        r"""
        extractGhostFrom(MEDCouplingCartesianAMRMeshGen self, mcIdType ghostSz, DataArrayDouble arr) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_extractGhostFrom(self, ghostSz, arr)

    def getPatchIdsInTheNeighborhoodOf(self, patchId, ghostLev):
        r"""
        getPatchIdsInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, mcIdType ghostLev) -> ivec
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPatchIdsInTheNeighborhoodOf(self, patchId, ghostLev)

    def buildMeshFromPatchEnvelop(self):
        r"""
        buildMeshFromPatchEnvelop(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_buildMeshFromPatchEnvelop(self)

    def buildMeshOfDirectChildrenOnly(self):
        r"""
        buildMeshOfDirectChildrenOnly(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_buildMeshOfDirectChildrenOnly(self)

    def removeAllPatches(self):
        r"""
        removeAllPatches(MEDCouplingCartesianAMRMeshGen self)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_removeAllPatches(self)

    def removePatch(self, patchId):
        r"""
        removePatch(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_removePatch(self, patchId)

    def createPatchesFromCriterion(self, *args):
        r"""
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayByte criterion, ivec factors)
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayDouble criterion, ivec factors, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_createPatchesFromCriterion(self, *args)

    def createCellFieldOnPatch(self, patchId, cellFieldOnThis):
        r"""
        createCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnThis) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_createCellFieldOnPatch(self, patchId, cellFieldOnThis)

    def fillCellFieldOnPatch(self, patchId, cellFieldOnThis, cellFieldOnPatch, isConservative=True):
        r"""
        fillCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, bool isConservative=True)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatch(self, patchId, cellFieldOnThis, cellFieldOnPatch, isConservative)

    def fillCellFieldOnPatchGhost(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev, isConservative=True):
        r"""
        fillCellFieldOnPatchGhost(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, mcIdType ghostLev, bool isConservative=True)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhost(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev, isConservative)

    def fillCellFieldOnPatchOnlyOnGhostZone(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev):
        r"""
        fillCellFieldOnPatchOnlyOnGhostZone(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, mcIdType ghostLev)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZone(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev)

    def fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev, patchToBeModified, neighborPatch, cellFieldOnPatch, cellFieldNeighbor):
        r"""
        fillCellFieldOnPatchOnlyOnGhostZoneWith(MEDCouplingCartesianAMRMeshGen self, mcIdType ghostLev, MEDCouplingCartesianAMRPatch patchToBeModified, MEDCouplingCartesianAMRPatch neighborPatch, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldNeighbor)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev, patchToBeModified, neighborPatch, cellFieldOnPatch, cellFieldNeighbor)

    def fillCellFieldComingFromPatch(self, patchId, cellFieldOnPatch, cellFieldOnThis, isConservative=True):
        r"""
        fillCellFieldComingFromPatch(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, bool isConservative=True)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatch(self, patchId, cellFieldOnPatch, cellFieldOnThis, isConservative)

    def fillCellFieldComingFromPatchGhost(self, patchId, cellFieldOnPatch, cellFieldOnThis, ghostLev, isConservative=True):
        r"""
        fillCellFieldComingFromPatchGhost(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, mcIdType ghostLev, bool isConservative=True)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatchGhost(self, patchId, cellFieldOnPatch, cellFieldOnThis, ghostLev, isConservative)

    def findPatchesInTheNeighborhoodOf(self, patchId, ghostLev):
        r"""
        findPatchesInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, mcIdType ghostLev) -> DataArrayInt64
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_findPatchesInTheNeighborhoodOf(self, patchId, ghostLev)

    def buildPythonDumpOfThis(self):
        r"""
        buildPythonDumpOfThis(MEDCouplingCartesianAMRMeshGen self) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_buildPythonDumpOfThis(self)

    def addPatch(self, bottomLeftTopRight, factors):
        r"""
        addPatch(MEDCouplingCartesianAMRMeshGen self, PyObject * bottomLeftTopRight, ivec factors)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_addPatch(self, bottomLeftTopRight, factors)

    def getPatches(self):
        r"""
        getPatches(MEDCouplingCartesianAMRMeshGen self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPatches(self)

    def deepCopy(self, father):
        r"""
        deepCopy(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen father) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_deepCopy(self, father)

    def getPatchAtPosition(self, pos):
        r"""
        getPatchAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPatchAtPosition(self, pos)

    def getMeshAtPosition(self, pos):
        r"""
        getMeshAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getMeshAtPosition(self, pos)

    def positionRelativeToGodFather(self):
        r"""
        positionRelativeToGodFather(MEDCouplingCartesianAMRMeshGen self) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_positionRelativeToGodFather(self)

    def retrieveGridsAt(self, absoluteLev):
        r"""
        retrieveGridsAt(MEDCouplingCartesianAMRMeshGen self, mcIdType absoluteLev) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_retrieveGridsAt(self, absoluteLev)

    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz, recurseArrs):
        r"""
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingCartesianAMRMeshGen self, mcIdType ghostSz, PyObject * recurseArrs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz, recurseArrs)

    def getFather(self):
        r"""
        getFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getFather(self)

    def getGodFather(self):
        r"""
        getGodFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getGodFather(self)

    def getPatch(self, patchId):
        r"""
        getPatch(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getPatch(self, patchId)

    def getImageMesh(self):
        r"""
        getImageMesh(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingIMesh
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_getImageMesh(self)

    def __getitem__(self, patchId):
        r"""
        __getitem__(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen___getitem__(self, patchId)

    def fillCellFieldOnPatchGhostAdv(self, patchId, cellFieldOnThis, ghostLev, arrsOnPatches, isConservative=True):
        r"""
        fillCellFieldOnPatchGhostAdv(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, DataArrayDouble cellFieldOnThis, mcIdType ghostLev, PyObject * arrsOnPatches, bool isConservative=True)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhostAdv(self, patchId, cellFieldOnThis, ghostLev, arrsOnPatches, isConservative)

    def fillCellFieldOnPatchOnlyGhostAdv(self, patchId, ghostLev, arrsOnPatches):
        r"""
        fillCellFieldOnPatchOnlyGhostAdv(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId, mcIdType ghostLev, PyObject * arrsOnPatches)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyGhostAdv(self, patchId, ghostLev, arrsOnPatches)

    def __delitem__(self, patchId):
        r"""
        __delitem__(MEDCouplingCartesianAMRMeshGen self, mcIdType patchId)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen___delitem__(self, patchId)

    def __len__(self):
        r"""
        __len__(MEDCouplingCartesianAMRMeshGen self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMeshGen___len__(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRMeshGen

# Register MEDCouplingCartesianAMRMeshGen in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRMeshGen_swigregister(MEDCouplingCartesianAMRMeshGen)
class MEDCouplingCartesianAMRMeshSub(MEDCouplingCartesianAMRMeshGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRMeshSub

# Register MEDCouplingCartesianAMRMeshSub in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRMeshSub_swigregister(MEDCouplingCartesianAMRMeshSub)
class MEDCouplingCartesianAMRMesh(MEDCouplingCartesianAMRMeshGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        r"""
        New(MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMesh_New(*args)

    def createPatchesFromCriterionML(self, bso, criterion, factors, eps):
        r"""
        createPatchesFromCriterionML(MEDCouplingCartesianAMRMesh self, PyObject * bso, DataArrayDouble criterion, PyObject * factors, double eps)
        1
        """
        return _MEDCoupling.MEDCouplingCartesianAMRMesh_createPatchesFromCriterionML(self, bso, criterion, factors, eps)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCartesianAMRMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
        __init__(MEDCouplingCartesianAMRMesh self, MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
        1
        """
        _MEDCoupling.MEDCouplingCartesianAMRMesh_swiginit(self, _MEDCoupling.new_MEDCouplingCartesianAMRMesh(*args))
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingCartesianAMRMesh

# Register MEDCouplingCartesianAMRMesh in _MEDCoupling:
_MEDCoupling.MEDCouplingCartesianAMRMesh_swigregister(MEDCouplingCartesianAMRMesh)
class MEDCouplingDataForGodFather(RefCountObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def synchronizeFineToCoarse(self):
        r"""
        synchronizeFineToCoarse(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeFineToCoarse(self)

    def synchronizeFineToCoarseBetween(self, fromLev, toLev):
        r"""
        synchronizeFineToCoarseBetween(MEDCouplingDataForGodFather self, mcIdType fromLev, mcIdType toLev)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeFineToCoarseBetween(self, fromLev, toLev)

    def synchronizeCoarseToFine(self):
        r"""
        synchronizeCoarseToFine(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeCoarseToFine(self)

    def synchronizeCoarseToFineBetween(self, fromLev, toLev):
        r"""
        synchronizeCoarseToFineBetween(MEDCouplingDataForGodFather self, mcIdType fromLev, mcIdType toLev)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeCoarseToFineBetween(self, fromLev, toLev)

    def synchronizeAllGhostZones(self):
        r"""
        synchronizeAllGhostZones(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeAllGhostZones(self)

    def synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh):
        r"""
        synchronizeAllGhostZonesOfDirectChidrenOf(MEDCouplingDataForGodFather self, MEDCouplingCartesianAMRMeshGen mesh)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh)

    def synchronizeAllGhostZonesAtASpecifiedLevel(self, level):
        r"""
        synchronizeAllGhostZonesAtASpecifiedLevel(MEDCouplingDataForGodFather self, mcIdType level)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevel(self, level)

    def synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level):
        r"""
        synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(MEDCouplingDataForGodFather self, mcIdType level)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level)

    def alloc(self):
        r"""
        alloc(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_alloc(self)

    def dealloc(self):
        r"""
        dealloc(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_dealloc(self)

    def getMyGodFather(self):
        r"""
        getMyGodFather(MEDCouplingDataForGodFather self) -> MEDCouplingCartesianAMRMesh
        1
        """
        return _MEDCoupling.MEDCouplingDataForGodFather_getMyGodFather(self)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingDataForGodFather

# Register MEDCouplingDataForGodFather in _MEDCoupling:
_MEDCoupling.MEDCouplingDataForGodFather_swigregister(MEDCouplingDataForGodFather)
class MEDCouplingAMRAttribute(MEDCouplingDataForGodFather, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getNumberOfLevels(self):
        r"""
        getNumberOfLevels(MEDCouplingAMRAttribute self) -> mcIdType
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_getNumberOfLevels(self)

    def deepCopy(self):
        r"""
        deepCopy(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_deepCopy(self)

    def deepCpyWithoutGodFather(self):
        r"""
        deepCpyWithoutGodFather(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_deepCpyWithoutGodFather(self)

    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh, fieldName):
        r"""
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh, fieldName)

    def buildCellFieldOnWithGhost(self, mesh, fieldName):
        r"""
        buildCellFieldOnWithGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_buildCellFieldOnWithGhost(self, mesh, fieldName)

    def buildCellFieldOnWithoutGhost(self, mesh, fieldName):
        r"""
        buildCellFieldOnWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_buildCellFieldOnWithoutGhost(self, mesh, fieldName)

    def changeGodFather(self, gf):
        r"""
        changeGodFather(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf) -> bool
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_changeGodFather(self, gf)

    def projectTo(self, targetGF):
        r"""
        projectTo(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh targetGF) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_projectTo(self, targetGF)

    def writeVTHB(self, fileName):
        r"""
        writeVTHB(MEDCouplingAMRAttribute self, std::string const & fileName) -> std::string
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_writeVTHB(self, fileName)

    @staticmethod
    def New(gf, fieldNames, ghostLev):
        r"""
        New(MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, mcIdType ghostLev) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_New(gf, fieldNames, ghostLev)

    def __init__(self, gf, fieldNames, ghostLev):
        r"""
        __init__(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, mcIdType ghostLev) -> MEDCouplingAMRAttribute
        1
        """
        _MEDCoupling.MEDCouplingAMRAttribute_swiginit(self, _MEDCoupling.new_MEDCouplingAMRAttribute(gf, fieldNames, ghostLev))

    def getFieldOn(self, mesh, fieldName):
        r"""
        getFieldOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> DataArrayDouble
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_getFieldOn(self, mesh, fieldName)

    def spillInfoOnComponents(self, compNames):
        r"""
        spillInfoOnComponents(MEDCouplingAMRAttribute self, PyObject * compNames)
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_spillInfoOnComponents(self, compNames)

    def spillNatures(self, nfs):
        r"""
        spillNatures(MEDCouplingAMRAttribute self, PyObject * nfs)
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_spillNatures(self, nfs)

    def retrieveFieldsOn(self, mesh):
        r"""
        retrieveFieldsOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh) -> PyObject *
        1
        """
        return _MEDCoupling.MEDCouplingAMRAttribute_retrieveFieldsOn(self, mesh)
    __swig_destroy__ = _MEDCoupling.delete_MEDCouplingAMRAttribute

# Register MEDCouplingAMRAttribute in _MEDCoupling:
_MEDCoupling.MEDCouplingAMRAttribute_swigregister(MEDCouplingAMRAttribute)
class DenseMatrix(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        r"""
        New(mcIdType nbRows, mcIdType nbCols) -> DenseMatrix
        New(DataArrayDouble array, mcIdType nbRows, mcIdType nbCols) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix_New(*args)

    def deepCopy(self):
        r"""
        deepCopy(DenseMatrix self) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix_deepCopy(self)

    def shallowCpy(self):
        r"""
        shallowCpy(DenseMatrix self) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix_shallowCpy(self)

    def getNumberOfRows(self):
        r"""
        getNumberOfRows(DenseMatrix self) -> mcIdType
        1
        """
        return _MEDCoupling.DenseMatrix_getNumberOfRows(self)

    def getNumberOfCols(self):
        r"""
        getNumberOfCols(DenseMatrix self) -> mcIdType
        1
        """
        return _MEDCoupling.DenseMatrix_getNumberOfCols(self)

    def getNbOfElems(self):
        r"""
        getNbOfElems(DenseMatrix self) -> mcIdType
        1
        """
        return _MEDCoupling.DenseMatrix_getNbOfElems(self)

    def reBuild(self, array, nbRows=-1, nbCols=-1):
        r"""
        reBuild(DenseMatrix self, DataArrayDouble array, mcIdType nbRows=-1, mcIdType nbCols=-1)
        1
        """
        return _MEDCoupling.DenseMatrix_reBuild(self, array, nbRows, nbCols)

    def reShape(self, nbRows, nbCols):
        r"""
        reShape(DenseMatrix self, mcIdType nbRows, mcIdType nbCols)
        1
        """
        return _MEDCoupling.DenseMatrix_reShape(self, nbRows, nbCols)

    def transpose(self):
        r"""
        transpose(DenseMatrix self)
        1
        """
        return _MEDCoupling.DenseMatrix_transpose(self)

    def isEqual(self, other, eps):
        r"""
        isEqual(DenseMatrix self, DenseMatrix other, double eps) -> bool
        1
        """
        return _MEDCoupling.DenseMatrix_isEqual(self, other, eps)

    def matVecMult(self, vec):
        r"""
        matVecMult(DenseMatrix self, DataArrayDouble vec) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DenseMatrix_matVecMult(self, vec)

    @staticmethod
    def MatVecMult(mat, vec):
        r"""
        MatVecMult(DenseMatrix mat, DataArrayDouble vec) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DenseMatrix_MatVecMult(mat, vec)

    def __init__(self, *args):
        r"""
        __init__(DenseMatrix self, mcIdType nbRows, mcIdType nbCols) -> DenseMatrix
        __init__(DenseMatrix self, DataArrayDouble array, mcIdType nbRows, mcIdType nbCols) -> DenseMatrix
        1
        """
        _MEDCoupling.DenseMatrix_swiginit(self, _MEDCoupling.new_DenseMatrix(*args))

    def isEqualIfNotWhy(self, other, eps):
        r"""
        isEqualIfNotWhy(DenseMatrix self, DenseMatrix other, double eps) -> PyObject *
        1
        """
        return _MEDCoupling.DenseMatrix_isEqualIfNotWhy(self, other, eps)

    def getData(self):
        r"""
        getData(DenseMatrix self) -> DataArrayDouble
        1
        """
        return _MEDCoupling.DenseMatrix_getData(self)

    def __add__(self, other):
        r"""
        __add__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix___add__(self, other)

    def __sub__(self, other):
        r"""
        __sub__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix___sub__(self, other)

    def __mul__(self, *args):
        r"""
        __mul__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        __mul__(DenseMatrix self, DataArrayDouble other) -> DenseMatrix
        1
        """
        return _MEDCoupling.DenseMatrix___mul__(self, *args)

    def ___iadd___(self, trueSelf, other):
        r"""
        ___iadd___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *
        1
        """
        return _MEDCoupling.DenseMatrix____iadd___(self, trueSelf, other)

    def ___isub___(self, trueSelf, other):
        r"""
        ___isub___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *
        1
        """
        return _MEDCoupling.DenseMatrix____isub___(self, trueSelf, other)

    def toNumPyMatrix(self):
        r"""
        toNumPyMatrix(DenseMatrix self) -> PyObject *
        1
        """
        return _MEDCoupling.DenseMatrix_toNumPyMatrix(self)
    __swig_destroy__ = _MEDCoupling.delete_DenseMatrix

# Register DenseMatrix in _MEDCoupling:
_MEDCoupling.DenseMatrix_swigregister(DenseMatrix)

def MEDCouplingUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingUMesh,((),(self.__getstate__()),))
def MEDCouplingCMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCMesh,((),(self.__getstate__()),))
def MEDCouplingIMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingIMesh,((),(self.__getstate__()),))
def MEDCouplingMappedExtrudedMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingMappedExtrudedMesh,((),(self.__getstate__()),))
def MEDCouplingCurveLinearMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCurveLinearMesh,((),(self.__getstate__()),))
def MEDCoupling1SGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1SGTUMesh,((),(self.__getstate__()),))
def MEDCoupling1DGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1DGTUMesh,((),(self.__getstate__()),))
def MEDCouplingFieldDoubleReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldDouble,(d,(self.__getstate__()),))
def MEDCouplingFieldInt32Reduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldInt32,(d,(self.__getstate__()),))
def MEDCouplingFieldInt64Reduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldInt64,(d,(self.__getstate__()),))
def MEDCouplingFieldFloatReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldFloat,(d,(self.__getstate__()),))
def MEDCouplingFTReduceFunct(cls,params):
    a,b=params
    ret=object.__new__(cls)
    ret.__init__(*a)
    return ret

def MEDCouplingFieldTemplateReduce(self):
    ret = MEDCouplingFieldDouble(self)
    nbTuples = self.getNumberOfTuplesExpected()
    arr = DataArrayDouble(nbTuples) ; arr[:] = 0.
    ret.setArray(arr)
    return MEDCouplingFTReduceFunct,(MEDCouplingFieldTemplate,((ret,),()))
#
# Forwarding DataArrayInt functions to MEDCouplingUMesh:
#
MEDCouplingUMesh.ExtractFromIndexedArrays           = DataArrayInt.ExtractFromIndexedArrays
MEDCouplingUMesh.ExtractFromIndexedArraysSlice      = DataArrayInt.ExtractFromIndexedArraysSlice
MEDCouplingUMesh.SetPartOfIndexedArrays             = DataArrayInt.SetPartOfIndexedArrays
MEDCouplingUMesh.SetPartOfIndexedArraysSameIdx      = DataArrayInt.SetPartOfIndexedArraysSameIdx
MEDCouplingUMesh.RemoveIdsFromIndexedArrays         = DataArrayInt.RemoveIdsFromIndexedArrays
MEDCouplingFieldInt = MEDCouplingFieldInt32

if MEDCouplingUse64BitIDs():
  MEDCouplingFieldID = MEDCouplingFieldInt64
else:
  MEDCouplingFieldID = MEDCouplingFieldInt32



import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
    with open(__filename) as __fp:
        exec(__fp.read())


def MEDCouplingDataArrayDoubleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____idiv___(self, self, *args)
def MEDCouplingDataArrayDoubleIpow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____ipow___(self, self, *args)
def MEDCouplingFieldDoubleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____iadd___(self, self, *args)
def MEDCouplingFieldDoubleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____isub___(self, self, *args)
def MEDCouplingFieldDoubleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____imul___(self, self, *args)
def MEDCouplingFieldDoubleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____idiv___(self, self, *args)
def MEDCouplingFieldDoubleIpow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____ipow___(self, self, *args)
def MEDCouplingDataArrayInt32Iadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____iadd___(self, self, *args)
def MEDCouplingDataArrayInt32Isub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____isub___(self, self, *args)
def MEDCouplingDataArrayInt32Imul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____imul___(self, self, *args)
def MEDCouplingDataArrayInt32Idiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____idiv___(self, self, *args)
def MEDCouplingDataArrayInt32Imod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____imod___(self, self, *args)
def MEDCouplingDataArrayInt32Ipow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32____ipow___(self, self, *args)
def MEDCouplingDataArrayInt64Iadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____iadd___(self, self, *args)
def MEDCouplingDataArrayInt64Isub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____isub___(self, self, *args)
def MEDCouplingDataArrayInt64Imul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____imul___(self, self, *args)
def MEDCouplingDataArrayInt64Idiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____idiv___(self, self, *args)
def MEDCouplingDataArrayInt64Imod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____imod___(self, self, *args)
def MEDCouplingDataArrayInt64Ipow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64____ipow___(self, self, *args)
def MEDCouplingDataArrayFloatIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____iadd___(self, self, *args)
def MEDCouplingDataArrayFloatIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____isub___(self, self, *args)
def MEDCouplingDataArrayFloatImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____imul___(self, self, *args)
def MEDCouplingDataArrayFloatIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____idiv___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____idiv___(self, self, *args)
def MEDCouplingDataArrayInt32TupleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32Tuple____iadd___(self, self, *args)
def MEDCouplingDataArrayInt32TupleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32Tuple____isub___(self, self, *args)
def MEDCouplingDataArrayInt32TupleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32Tuple____imul___(self, self, *args)
def MEDCouplingDataArrayInt32TupleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32Tuple____idiv___(self, self, *args)
def MEDCouplingDataArrayInt32TupleImod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt32Tuple____imod___(self, self, *args)
def MEDCouplingDataArrayInt64TupleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64Tuple____iadd___(self, self, *args)
def MEDCouplingDataArrayInt64TupleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64Tuple____isub___(self, self, *args)
def MEDCouplingDataArrayInt64TupleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64Tuple____imul___(self, self, *args)
def MEDCouplingDataArrayInt64TupleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64Tuple____idiv___(self, self, *args)
def MEDCouplingDataArrayInt64TupleImod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt64Tuple____imod___(self, self, *args)
def MEDCouplingDenseMatrixIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DenseMatrix____iadd___(self, self, *args)
def MEDCouplingDenseMatrixIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DenseMatrix____isub___(self, self, *args)


InterpKernelException.__reduce__=INTERPKERNELExceptionReduce

DataArrayDouble.__reduce__=MEDCouplingDataArrayDoubleReduce
DataArrayDouble.__iadd__=MEDCouplingDataArrayDoubleIadd
DataArrayDouble.__isub__=MEDCouplingDataArrayDoubleIsub
DataArrayDouble.__imul__=MEDCouplingDataArrayDoubleImul
DataArrayDouble.__idiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__ipow__=MEDCouplingDataArrayDoubleIpow
DataArrayDouble.__truediv__=DataArrayDouble.__div__
DataArrayDouble.__itruediv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rtruediv__=DataArrayDouble.__rdiv__
DataArrayDouble.__floordiv__=DataArrayDouble.__div__
DataArrayDouble.__ifloordiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rfloordiv__=DataArrayDouble.__rdiv__

DataArrayInt32.__reduce__=MEDCouplingDataArrayInt32Reduce
DataArrayInt32.__iadd__=MEDCouplingDataArrayInt32Iadd
DataArrayInt32.__isub__=MEDCouplingDataArrayInt32Isub
DataArrayInt32.__imul__=MEDCouplingDataArrayInt32Imul
DataArrayInt32.__idiv__=MEDCouplingDataArrayInt32Idiv
DataArrayInt32.__imod__=MEDCouplingDataArrayInt32Imod
DataArrayInt32.__ipow__=MEDCouplingDataArrayInt32Ipow
DataArrayInt32.__truediv__=DataArrayInt32.__div__
DataArrayInt32.__itruediv__=MEDCouplingDataArrayInt32Idiv
DataArrayInt32.__rtruediv__=DataArrayInt32.__rdiv__
DataArrayInt32.__floordiv__=DataArrayInt32.__div__
DataArrayInt32.__ifloordiv__=MEDCouplingDataArrayInt32Idiv
DataArrayInt32.__rfloordiv__=DataArrayInt32.__rdiv__

DataArrayInt64.__reduce__=MEDCouplingDataArrayInt64Reduce
DataArrayInt64.__iadd__=MEDCouplingDataArrayInt64Iadd
DataArrayInt64.__isub__=MEDCouplingDataArrayInt64Isub
DataArrayInt64.__imul__=MEDCouplingDataArrayInt64Imul
DataArrayInt64.__idiv__=MEDCouplingDataArrayInt64Idiv
DataArrayInt64.__imod__=MEDCouplingDataArrayInt64Imod
DataArrayInt64.__ipow__=MEDCouplingDataArrayInt64Ipow
DataArrayInt64.__truediv__=DataArrayInt64.__div__
DataArrayInt64.__itruediv__=MEDCouplingDataArrayInt64Idiv
DataArrayInt64.__rtruediv__=DataArrayInt64.__rdiv__
DataArrayInt64.__floordiv__=DataArrayInt64.__div__
DataArrayInt64.__ifloordiv__=MEDCouplingDataArrayInt64Idiv
DataArrayInt64.__rfloordiv__=DataArrayInt64.__rdiv__

DataArrayByte.__reduce__=MEDCouplingDataArrayByteReduce

DataArrayFloat.__reduce__=MEDCouplingDataArrayFloatReduce
DataArrayFloat.__iadd__=MEDCouplingDataArrayFloatIadd
DataArrayFloat.__isub__=MEDCouplingDataArrayFloatIsub
DataArrayFloat.__imul__=MEDCouplingDataArrayFloatImul
DataArrayFloat.__idiv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__itruediv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__ifloordiv__=MEDCouplingDataArrayFloatIdiv

MEDCouplingFieldDouble.__reduce__=MEDCouplingFieldDoubleReduce
MEDCouplingFieldDouble.__iadd__=MEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=MEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=MEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__ipow__=MEDCouplingFieldDoubleIpow
MEDCouplingFieldDouble.__truediv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rtruediv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__itruediv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__floordiv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rfloordiv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__ifloordiv__=MEDCouplingFieldDoubleIdiv

MEDCouplingFieldTemplate.__reduce__=MEDCouplingFieldTemplateReduce

MEDCouplingFieldInt32.__reduce__=MEDCouplingFieldInt32Reduce
MEDCouplingFieldInt64.__reduce__=MEDCouplingFieldInt64Reduce

MEDCouplingFieldFloat.__reduce__=MEDCouplingFieldFloatReduce

DataArrayDoubleTuple.__iadd__=MEDCouplingDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=MEDCouplingDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=MEDCouplingDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__itruediv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__ifloordiv__=MEDCouplingDataArrayDoubleTupleIdiv

DataArrayInt32Tuple.__iadd__=MEDCouplingDataArrayInt32TupleIadd
DataArrayInt32Tuple.__isub__=MEDCouplingDataArrayInt32TupleIsub
DataArrayInt32Tuple.__imul__=MEDCouplingDataArrayInt32TupleImul
DataArrayInt32Tuple.__idiv__=MEDCouplingDataArrayInt32TupleIdiv
DataArrayInt32Tuple.__itruediv__=MEDCouplingDataArrayInt32TupleIdiv
DataArrayInt32Tuple.__ifloordiv__=MEDCouplingDataArrayInt32TupleIdiv
DataArrayInt32Tuple.__imod__=MEDCouplingDataArrayInt32TupleImod

DataArrayInt64Tuple.__iadd__=MEDCouplingDataArrayInt64TupleIadd
DataArrayInt64Tuple.__isub__=MEDCouplingDataArrayInt64TupleIsub
DataArrayInt64Tuple.__imul__=MEDCouplingDataArrayInt64TupleImul
DataArrayInt64Tuple.__idiv__=MEDCouplingDataArrayInt64TupleIdiv
DataArrayInt64Tuple.__itruediv__=MEDCouplingDataArrayInt64TupleIdiv
DataArrayInt64Tuple.__ifloordiv__=MEDCouplingDataArrayInt64TupleIdiv
DataArrayInt64Tuple.__imod__=MEDCouplingDataArrayInt64TupleImod

DenseMatrix.__iadd__=MEDCouplingDenseMatrixIadd
DenseMatrix.__isub__=MEDCouplingDenseMatrixIsub

MEDCouplingUMesh.__reduce__=MEDCouplingUMeshReduce
MEDCoupling1DGTUMesh.__reduce__=MEDCoupling1DGTUMeshReduce
MEDCoupling1SGTUMesh.__reduce__=MEDCoupling1SGTUMeshReduce
MEDCouplingCurveLinearMesh.__reduce__=MEDCouplingCurveLinearMeshReduce
MEDCouplingCMesh.__reduce__=MEDCouplingCMeshReduce
MEDCouplingIMesh.__reduce__=MEDCouplingIMeshReduce
MEDCouplingMappedExtrudedMesh.__reduce__=MEDCouplingMappedExtrudedMeshReduce

DataArrayAsciiCharIterator.__next__ = DataArrayAsciiCharIterator.next
DataArrayInt32Iterator.__next__ = DataArrayInt32Iterator.next
DataArrayInt64Iterator.__next__ = DataArrayInt64Iterator.next
DataArrayDoubleIterator.__next__ = DataArrayDoubleIterator.next
MEDCouplingUMeshCellIterator.__next__ = MEDCouplingUMeshCellIterator.next
MEDCouplingUMeshCellByTypeIterator.__next__ = MEDCouplingUMeshCellByTypeIterator.next


del INTERPKERNELExceptionReduce
del MEDCoupling1SGTUMeshReduce
del MEDCouplingCMeshReduce
del MEDCouplingCurveLinearMeshReduce
del MEDCouplingDataArrayByteReduce
del MEDCouplingDataArrayDoubleIadd
del MEDCouplingDataArrayDoubleIdiv
del MEDCouplingDataArrayDoubleImul
del MEDCouplingDataArrayDoubleIpow
del MEDCouplingDataArrayDoubleIsub
del MEDCouplingDataArrayDoubleReduce
del MEDCouplingDataArrayDoubleTupleIadd
del MEDCouplingDataArrayDoubleTupleIdiv
del MEDCouplingDataArrayDoubleTupleImul
del MEDCouplingDataArrayDoubleTupleIsub
del MEDCouplingDataArrayFloatIadd
del MEDCouplingDataArrayFloatIdiv
del MEDCouplingDataArrayFloatImul
del MEDCouplingDataArrayFloatIsub
del MEDCouplingDataArrayFloatReduce
del MEDCouplingDataArrayInt32Iadd
del MEDCouplingDataArrayInt32Idiv
del MEDCouplingDataArrayInt32Imod
del MEDCouplingDataArrayInt32Imul
del MEDCouplingDataArrayInt32Ipow
del MEDCouplingDataArrayInt32Isub
del MEDCouplingDataArrayInt32Reduce
del MEDCouplingDataArrayInt32TupleIadd
del MEDCouplingDataArrayInt32TupleIdiv
del MEDCouplingDataArrayInt32TupleImod
del MEDCouplingDataArrayInt32TupleImul
del MEDCouplingDataArrayInt32TupleIsub
del MEDCouplingDataArrayInt64Iadd
del MEDCouplingDataArrayInt64Idiv
del MEDCouplingDataArrayInt64Imod
del MEDCouplingDataArrayInt64Imul
del MEDCouplingDataArrayInt64Ipow
del MEDCouplingDataArrayInt64Isub
del MEDCouplingDataArrayInt64Reduce
del MEDCouplingDataArrayInt64TupleIadd
del MEDCouplingDataArrayInt64TupleIdiv
del MEDCouplingDataArrayInt64TupleImod
del MEDCouplingDataArrayInt64TupleImul
del MEDCouplingDataArrayInt64TupleIsub
del MEDCouplingDenseMatrixIadd
del MEDCouplingDenseMatrixIsub
del MEDCouplingFieldDoubleIadd
del MEDCouplingFieldDoubleIdiv
del MEDCouplingFieldDoubleImul
del MEDCouplingFieldDoubleIpow
del MEDCouplingFieldDoubleIsub
del MEDCouplingFieldDoubleReduce
del MEDCouplingFieldFloatReduce
del MEDCouplingFieldInt32Reduce
del MEDCouplingFieldInt64Reduce
del MEDCouplingFieldTemplateReduce
del MEDCouplingIMeshReduce
del MEDCouplingMappedExtrudedMeshReduce
del MEDCouplingUMeshReduce


print("""**************************************************************************************************
"MEDCoupling" python module as been replaced by "medcoupling" for Salome9.

"MEDCoupling" python module is still here for backwards compatibility reason but it is deprecated.

Please replace "MEDCoupling" by "medcoupling" in you import line right now to remove this message.
**************************************************************************************************""")


