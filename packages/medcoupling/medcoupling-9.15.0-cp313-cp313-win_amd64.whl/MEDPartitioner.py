# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MEDPartitioner
else:
    import _MEDPartitioner

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Graph(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    METIS = _MEDPartitioner.Graph_METIS
    r"""1"""
    SCOTCH = _MEDPartitioner.Graph_SCOTCH
    r"""1"""
    PTSCOTCH = _MEDPartitioner.Graph_PTSCOTCH
    r"""1"""

    def partGraph(self, *args):
        r"""
        partGraph(Graph self, int ndomain, std::string const & options_string="", ParaDomainSelector * sel=None)
        1
        """
        return _MEDPartitioner.Graph_partGraph(self, *args)

    def getGraph(self):
        r"""
        getGraph(Graph self) -> MEDCoupling::MEDCouplingSkyLineArray *
        1
        """
        return _MEDPartitioner.Graph_getGraph(self)

    def getPartition(self):
        r"""
        getPartition(Graph self) -> MEDCoupling::MEDCouplingSkyLineArray const *
        1
        """
        return _MEDPartitioner.Graph_getPartition(self)

    def nbVertices(self):
        r"""
        nbVertices(Graph self) -> int
        1
        """
        return _MEDPartitioner.Graph_nbVertices(self)
    __swig_destroy__ = _MEDPartitioner.delete_Graph

# Register Graph in _MEDPartitioner:
_MEDPartitioner.Graph_swigregister(Graph)
class MEDPartitioner(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MEDPartitioner self, std::string const & filename, int ndomains=1, std::string const & library="metis", bool create_boundary_faces=False, bool create_joints=False, bool mesure_memory=False) -> MEDPartitioner
        __init__(MEDPartitioner self, MEDCoupling::MEDFileData const * fileData, int ndomains=1, std::string const & library="metis", bool create_boundary_faces=False, bool create_joints=False, bool mesure_memory=False) -> MEDPartitioner
        __init__(MEDPartitioner self, MEDCoupling::MEDFileData const * fileData, Graph graph, bool create_boundary_faces=False, bool create_joints=False, bool mesure_memory=False) -> MEDPartitioner
        1
        """
        _MEDPartitioner.MEDPartitioner_swiginit(self, _MEDPartitioner.new_MEDPartitioner(*args))

    @staticmethod
    def Graph(*args):
        r"""
        Graph(MEDCoupling::MEDCouplingSkyLineArray * graph, MEDPARTITIONER::Graph::splitter_type split=METIS, int * edgeweight=None, MEDCoupling::DataArrayIdType * vlbloctab=None) -> Graph
        1
        """
        return _MEDPartitioner.MEDPartitioner_Graph(*args)

    @staticmethod
    def AvailableAlgorithms():
        r"""
        AvailableAlgorithms() -> std::vector< std::string >
        1
        """
        return _MEDPartitioner.MEDPartitioner_AvailableAlgorithms()

    @staticmethod
    def AllAlgorithms():
        r"""
        AllAlgorithms() -> std::vector< std::string >
        1
        """
        return _MEDPartitioner.MEDPartitioner_AllAlgorithms()

    def getMEDFileData(self):
        r"""
        getMEDFileData(MEDPartitioner self) -> MEDCoupling::MEDFileData *
        1
        """
        return _MEDPartitioner.MEDPartitioner_getMEDFileData(self)

    def write(self, filename):
        r"""
        write(MEDPartitioner self, std::string const & filename)
        1
        """
        return _MEDPartitioner.MEDPartitioner_write(self, filename)
    __swig_destroy__ = _MEDPartitioner.delete_MEDPartitioner

# Register MEDPartitioner in _MEDPartitioner:
_MEDPartitioner.MEDPartitioner_swigregister(MEDPartitioner)

