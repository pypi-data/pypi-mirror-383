"""
Django settings for Duralux.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from decouple import config
from pathlib import Path
from django.utils.translation import gettext_lazy as _
import os
from dotenv import load_dotenv

from socket import gethostbyname
from socket import gethostname
from buzzerboy_saas_tenants.core import helpers as helpers
from . import platformConnectors
import logging

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = Path(__file__).parent.parent
# print('BASE_DIR',BASE_DIR)
CORE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print('CORE_DIR',CORE_DIR)
load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = platformConnectors.getDjangoSecretKey(default='') if os.getenv('DJANGO_SECRET_KEY') is None else os.getenv('DJANGO_SECRET_KEY')

DEBUG = config('DEBUG', default=True, cast=bool)
# DEBUG = True


SITE_URL = platformConnectors.getSiteUrl(default='http://localhost:8000') if os.getenv('SITE_URL') is None else os.getenv('SITE_URL')

EMAIL_BACKEND = platformConnectors.getEmailBackend(default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = platformConnectors.getEmailHost(default='')
EMAIL_PORT = platformConnectors.getEmailPort(default=587)
EMAIL_USE_TLS = platformConnectors.getEmailUseTLS(default=True)
EMAIL_HOST_USER = platformConnectors.getEmailUser(default="")
EMAIL_HOST_PASSWORD = platformConnectors.getEmailPassword(default="")
DEFAULT_FROM_EMAIL = platformConnectors.getEmailDefaultFromEmail(EMAIL_HOST_USER)

ACCOUNT_EMAIL_SUBJECT_PREFIX = platformConnectors.getAccountEmailSubjectPrefix(default='[Buzzerboy]')
ACCOUNT_EMAIL_TEMPLATES = {
    'email_confirmation': 'account/email/email_confirmation_message',
    'password_reset': 'account/email/password_reset_key_message',
    'email_confirmation_signup': 'account/email/email_confirmation_signup_message',
}




# Assets Management
ASSETS_ROOT = os.getenv('ASSETS_ROOT', '/static/assets') 


ALLOWED_HOSTS_CSV = os.getenv('ALLOWED_HOSTS_CSV', '*')
ALLOWED_HOSTS        = ['127.0.0.1']

CSRF_TRUSTED_ORIGINS = ['http://localhost:85', 'http://127.0.0.1']
ALLOWED_HOSTS.append(gethostbyname(gethostname()))
ALLOWED_HOSTS += [origin.strip() for origin in ALLOWED_HOSTS_CSV.split(',')]
CSRF_TRUSTED_ORIGINS = helpers.getCSRFHostsFromAllowedHosts(ALLOWED_HOSTS)



# Application definition
INSTALLED_APPS = [

     # 3rd party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'buzzerboy_saas_tenants.core',
    'buzzerboy_saas_tenants.saas_tenants',

    'django_seed',
    'ckeditor',
    'django_extensions',
    'ckeditor_uploader',
    "django_htmx",
     "translated_fields",

   
]

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_BASEPATH = os.getenv('CKEDITOR_BASEPATH', "/static/ckeditor/ckeditor/")

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'width': '100%',
        'toolbar_Custom': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline',
                'Strike', 'SpellChecker', 'Undo', 'Redo'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['Smiley', 'SpecialChar'], ['Source'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['NumberedList', 'BulletedList'],
            ['Indent', 'Outdent'],
            ['Maximize'],
        ],
        'autoParagraph': False,
        'enterMode': 2,
    }
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_htmx.middleware.HtmxMiddleware",

    # Saas Middlewares
    'buzzerboy_saas_tenants.core.middleware.HandleHTTPErrorsMiddleware',
    'buzzerboy_saas_tenants.core.middleware.ProfileCompletionMiddleware',
    'buzzerboy_saas_tenants.core.middleware.HandleHTTPErrorsMiddleware',
    'buzzerboy_saas_tenants.core.middleware.OTPVerificationMiddleware',
    'buzzerboy_saas_tenants.core.middleware.RedirectAuthenticatedUserMiddleware',

    # 3rd party middleware
     "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'buzzerboy_saas_tenants.core.urls'
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = "home"  # Route defined in home/urls.py
LOGOUT_REDIRECT_URL = "home"  # Route defined in home/urls.py

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(CORE_DIR, 'media')

# Ensure only one TEMPLATE_DIR definition
TEMPLATE_DIR = os.path.join(CORE_DIR, "html5_ui")  # ROOT dir for templates

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
  
               
            ],
        },
    },
]

WSGI_APPLICATION = 'buzzerboy_saas_tenants.core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


SQLLITE_DB = BASE_DIR / 'db.sqlite3'

DATABASE_NAME = platformConnectors.getDBName(default=SQLLITE_DB)
DATABASE_USER = platformConnectors.getDBUser()
DATABASE_PASSWORD = platformConnectors.getDBPassword()
DATABASE_HOST = platformConnectors.getDBHost()
DATABASE_PORT = platformConnectors.getDBPort()
DATABASE_BACKEND = platformConnectors.getDBEngine(default='django.db.backends.sqlite3')

DATABASES = {
    'default': {
        'ENGINE': DATABASE_BACKEND,
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST ,
        'PORT': DATABASE_PORT,
    }
}





# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



AUTHENTICATION_BACKENDS = [

    "django.contrib.auth.backends.AllowAllUsersModelBackend", 
    'allauth.account.auth_backends.AuthenticationBackend',
   
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': platformConnectors.getGoogleClientID(),
            'secret': platformConnectors.getGoogleClientSecret(),
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'microsoft': {
        'APP': {
            'client_id': '2632e096-9b04-4aa4-a476-b52652ac3be2',
            'secret': 'DHf8Q~O0sR5Bc5mt5.slAW92vg1ewEc6.Nis1bR.',
            'key': ''
        },
        'SCOPE': [
            'User.Read',
            'openid',
            'email',
            'profile',
        ],
        'AUTH_PARAMS': {
            'response_type': 'code',
        },
    },
}

SOCIALACCOUNT_LOGIN_ON_GET=True
SOCIALACCOUNT_ADAPTER = 'buzzerboy_saas_tenants.core.adapters.CustomSocialAccountAdapter'

ACCOUNT_AUTHENTICATION_METHOD = "email"  # Use email only for authentication
ACCOUNT_EMAIL_REQUIRED = True  # Require email field
ACCOUNT_EMAIL_VERIFICATION = "none"  # Require email verification
LOGIN_REDIRECT_URL = "/"  # Redirect to homepage after login
ACCOUNT_SIGNUP_REDIRECT_URL = "/"  # Redirect to homepage or error page for signup
ACCOUNT_LOGOUT_REDIRECT_URL = "/"  # Redirect after logout



S3_BUCKET = platformConnectors.getBucketName()
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key":  platformConnectors.getAWSAccessKey(),
            "secret_key": platformConnectors.getAWSSecretKey(),
            "bucket_name": S3_BUCKET,
            "region_name": platformConnectors.getRegionName(),
            "addressing_style": "virtual",
            "signature_version":  platformConnectors.getSignatureVersion(),
            "location": "media",
            "object_parameters": {
                "CacheControl": "max-age=86400",
            },
        },
    },
    # TODO: need to add back the staticfiles config since collectstatic was already run
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        }
        # TODO: Need to configure the UI to collect our static files from S3 bucket
        # "staticfiles": {
        #     "BACKEND": "storages.backends.s3.S3Storage",
        #     "OPTIONS": {
        #         "access_key": getAWSAccessKey(),
        #         "secret_key": getAWSSecretKey(),
        #         "bucket_name": getBucketName(),
        #         "region_name": getRegionName(),
        #         "addressing_style": "virtual",  # Add this line
        #         "signature_version": getSignatureVersion(),
        #         "location": "static",
        #         "object_parameters": {
        #             "CacheControl": "max-age=86400",
        #         },
        #     },
        # },
    }

if S3_BUCKET == "":
    logger.warning("S3 Bucket not found. Defaulting to file system storage")
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "LOCATION": os.path.join(BASE_DIR, "media"),
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        }
    }


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# print (f'STATIC_ROOT: {STATIC_ROOT}')
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Directory where static files are stored
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Set STATIC_ROOT to None to avoid using collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# print(f'STATICFILES_DIRS: {STATICFILES_DIRS}')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Language
LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
]

LOCALE_PATHS = [
    os.path.join(CORE_DIR, 'html5_ui/locale'),
]

LANGUAGE_CODE = 'en'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# =================================

# AWS Bedrock Settings
BEDROCK_MODEL_ID =  platformConnectors.getBedrockModelId(default='') if os.getenv('BEDROCK_MODEL_ID') is None else os.getenv('BEDROCK_MODEL_ID')
BEDROCK_MAX_TOKENS = platformConnectors.getBedrockMaxTokens(default='') if os.getenv('BEDROCK_MAX_TOKENS') is None else os.getenv('BEDROCK_MAX_TOKENS')
BEDROCK_TEMPERATURE = platformConnectors.getBedrockTemperature(default='') if os.getenv('BEDROCK_TEMPERATURE') is None else os.getenv('BEDROCK_TEMPERATURE')
BEDROCK_REGION_NAME = platformConnectors.getRegionName(default='us-east-1') if os.getenv('BEDROCK_REGION_NAME') is None else os.getenv('BEDROCK_REGION_NAME')
AWS_ACCESS_KEY = platformConnectors.getAWSAccessKey(default='') if os.getenv('AWS_ACCESS_KEY') is None else os.getenv('AWS_ACCESS_KEY')
AWS_SECRET_KEY = platformConnectors.getAWSSecretKey(default='') if os.getenv('AWS_SECRET_KEY') is None else os.getenv('AWS_SECRET_KEY')
AI_CHAT_PROFILE = platformConnectors.getAIChatProfile(default='default') if os.getenv('AI_CHAT_PROFILE') is None else os.getenv('AI_CHAT_PROFILE')