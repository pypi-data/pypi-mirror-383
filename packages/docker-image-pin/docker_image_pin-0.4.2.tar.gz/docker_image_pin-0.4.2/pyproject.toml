[build-system]
build-backend = "uv_build"
requires = [ "uv-build>=0.8.8,<0.9" ]

[project]
name = "docker-image-pin"
version = "0.4.2"
description = "Checks if Docker images are properly pinned in docker-compose.yml and Dockerfile files"
readme = "README.md"
license = "GPL-3.0-only"
authors = [
    { name = "GideonBear" },
]
requires-python = ">=3.13"
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
]
dependencies = [  ]

urls.bugs = "https://github.com/GideonBear/docker-image-pin/issues"
urls.homepage = "https://github.com/GideonBear/docker-image-pin"

scripts.docker-image-pin = "docker_image_pin:main"

[tool.ruff]
lint.select = [ "ALL" ]

lint.ignore = [
    "COM812",  # Conflict with formatter
    "CPY",     # No copyright statements
    "D1",      # Docstrings should not be enforced by default
    "D203",    # Choose D203 or D211
    "D212",    # Choose D212 or D213
    "PLW2901", # (project) Re-assignments are really convenient here
    "S404",    # Uses of subprocess are rejected, no need to reject the imports as well
    "T201",    # (project) Print is allowed
]

lint.per-file-ignores."tests/**/*.py" = [
    "E501",    # If the formatter doesn't fix the line length, it's good enough
    "FBT",     # We don't care about boolean parameters in tests
    "INP001",  # Tests are supposed to be an implicit namespace
    "PLR2004", # Magic values are allowed in tests
    "S101",    # Assert is allowed in tests
]

lint.flake8-tidy-imports.ban-relative-imports = "all" # For consistency

lint.isort.combine-as-imports = true
lint.isort.lines-after-imports = 2
lint.isort.required-imports = [ "from __future__ import annotations" ]

lint.preview = true

[tool.pyproject-fmt]
indent = 4

[tool.mypy]
exclude = '^tests/'
show_error_context = true
show_error_codes = true
pretty = true

warn_unused_configs = true

strict = true # All strict checks are already listed below, only here for future-proofing

# It already warns for the import, so we do not want to warn for each individual use.
# If the import is silenced, there's nothing else we can do so silence the uses as well.
# disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

extra_checks = true
implicit_reexport = false
strict_concatenate = true
strict_equality = true
strict_bytes = true

enable_error_code = [
    "redundant-self",
    "deprecated",
    "redundant-expr",
    "possibly-undefined",
    "truthy-bool",
    "truthy-iterable",
    "ignore-without-code",
    "unused-awaitable",
    "possibly-undefined",
    "mutable-override",
    "exhaustive-match",
]
