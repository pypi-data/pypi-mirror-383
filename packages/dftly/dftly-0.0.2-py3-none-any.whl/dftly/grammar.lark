%import common.WS
%ignore WS
STRING: /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"/

PLUS: "+"
MINUS: "-"
AT: "@"
GE: ">="
LE: "<="
GT: ">"
LT: "<"
AS: /as/i
IF: /if/i
ELSE: /else/i
AND_SYM: "&&"
OR_SYM: "||"
NOT_SYM: "!"
NOT_MATCH.2: /not\s+match/i
AND.2: "and"i
OR.2: "or"i
NOT.2: "not"i
NAME: /[A-Za-z_][A-Za-z0-9_]*/
IN: /in/i
NUMBER: /\d+(?:\.\d+)?/
REGEX_PAREN_TOKEN.2: /\([^\s]+\)/
REGEX_TOKEN: /[^\s()]+/
LPAR: "("
RPAR: ")"
EXTRACT.2: /extract/i
GROUP.2: /group/i
OF.2: /of/i
FROM.2: /from/i
MATCH.2: /match/i
AGAINST.2: /against/i

start: expr

?expr: conditional

conditional: bool_expr IF bool_expr ELSE expr   -> ifexpr
           | bool_expr

?bool_expr: bool_expr (OR|OR_SYM) bool_term   -> or_expr
          | bool_term

?bool_term: bool_term (AND|AND_SYM) bool_factor   -> and_expr
          | bool_factor

?bool_factor: (NOT|NOT_SYM) bool_factor       -> not_expr
            | membership

?membership: additive IN set_literal        -> value_in_set
           | additive IN range_literal      -> value_in_range
           | comparison

?comparison: additive (GE|LE|GT|LT) additive   -> compare_expr
           | additive

?additive: additive PLUS multiplicative
         | additive MINUS multiplicative
         | multiplicative

?multiplicative: multiplicative AT unary  -> resolve_ts
               | unary

?unary: primary

primary: call_expr
       | regex_extract
       | regex_match
       | NAME AS STRING  -> parse_as_format
       | NAME AS NAME   -> cast
       | NUMBER         -> number
       | STRING         -> string
       | NAME           -> name
       | group

group: "(" expr ")" -> paren_expr

call_expr: NAME "(" [args] ")"   -> func
args: expr ("," expr)*   -> arg_list

set_literal: "{" [args] "}"   -> literal_set

range_literal: "[" expr "," expr "]"   -> range_inc
             | "[" expr "," expr ")"   -> range_ie
             | "(" expr "," expr "]"   -> range_ei
             | "(" expr "," expr ")"   -> range_exc

regex_extract: EXTRACT (GROUP NUMBER OF)? regex FROM expr
regex_match: MATCH regex AGAINST expr -> regex_match
           | NOT_MATCH regex AGAINST expr -> regex_match
regex: REGEX_PAREN_TOKEN
     | REGEX_TOKEN
     | STRING
