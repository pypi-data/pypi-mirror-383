"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.required_sandbox_engine_template_resource import RequiredSandboxEngineTemplateResource
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_create_sandbox_engine_template_response import V1CreateSandboxEngineTemplateResponse
from h2o_engine_manager.gen.model.v1_get_sandbox_engine_template_response import V1GetSandboxEngineTemplateResponse
from h2o_engine_manager.gen.model.v1_list_sandbox_engine_templates_response import V1ListSandboxEngineTemplatesResponse
from h2o_engine_manager.gen.model.v1_sandbox_engine_template import V1SandboxEngineTemplate
from h2o_engine_manager.gen.model.v1_update_sandbox_engine_template_response import V1UpdateSandboxEngineTemplateResponse


class SandboxEngineTemplateServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.sandbox_engine_template_service_create_sandbox_engine_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateSandboxEngineTemplateResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/sandboxEngineTemplates',
                'operation_id': 'sandbox_engine_template_service_create_sandbox_engine_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'sandbox_engine_template',
                    'sandbox_engine_template_id',
                ],
                'required': [
                    'parent',
                    'sandbox_engine_template',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'sandbox_engine_template':
                        (V1SandboxEngineTemplate,),
                    'sandbox_engine_template_id':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'sandbox_engine_template_id': 'sandboxEngineTemplateId',
                },
                'location_map': {
                    'parent': 'path',
                    'sandbox_engine_template': 'body',
                    'sandbox_engine_template_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_engine_template_service_delete_sandbox_engine_template_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name_11}',
                'operation_id': 'sandbox_engine_template_service_delete_sandbox_engine_template',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_11',
                ],
                'required': [
                    'name_11',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_11',
                ]
            },
            root_map={
                'validations': {
                    ('name_11',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngineTemplates\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_11':
                        (str,),
                },
                'attribute_map': {
                    'name_11': 'name_11',
                },
                'location_map': {
                    'name_11': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_template_service_get_sandbox_engine_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetSandboxEngineTemplateResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_11}',
                'operation_id': 'sandbox_engine_template_service_get_sandbox_engine_template',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_11',
                ],
                'required': [
                    'name_11',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_11',
                ]
            },
            root_map={
                'validations': {
                    ('name_11',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngineTemplates\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_11':
                        (str,),
                },
                'attribute_map': {
                    'name_11': 'name_11',
                },
                'location_map': {
                    'name_11': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_template_service_list_sandbox_engine_templates_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListSandboxEngineTemplatesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/sandboxEngineTemplates',
                'operation_id': 'sandbox_engine_template_service_list_sandbox_engine_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_template_service_update_sandbox_engine_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateSandboxEngineTemplateResponse,),
                'auth': [],
                'endpoint_path': '/v1/{sandboxEngineTemplate.name}',
                'operation_id': 'sandbox_engine_template_service_update_sandbox_engine_template',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_engine_template_name',
                    'update_mask',
                    'sandbox_engine_template',
                ],
                'required': [
                    'sandbox_engine_template_name',
                    'update_mask',
                    'sandbox_engine_template',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'sandbox_engine_template_name',
                ]
            },
            root_map={
                'validations': {
                    ('sandbox_engine_template_name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngineTemplates\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_engine_template_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'sandbox_engine_template':
                        (RequiredSandboxEngineTemplateResource,),
                },
                'attribute_map': {
                    'sandbox_engine_template_name': 'sandboxEngineTemplate.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'sandbox_engine_template_name': 'path',
                    'update_mask': 'query',
                    'sandbox_engine_template': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def sandbox_engine_template_service_create_sandbox_engine_template(
        self,
        parent,
        sandbox_engine_template,
        **kwargs
    ):
        """Creates a new SandboxEngineTemplate.  # noqa: E501

        Authorization may require the following permission on the template's parent workspace: * actions/enginemanager/sandboxEngineTemplates/CREATE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_template_service_create_sandbox_engine_template(parent, sandbox_engine_template, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Required. The resource name of the workspace to associate with the SandboxEngineTemplate. Format is `workspaces/*`.
            sandbox_engine_template (V1SandboxEngineTemplate): Required. The SandboxEngineTemplate resource to create.

        Keyword Args:
            sandbox_engine_template_id (str): Optional. Specify the SandboxEngineTemplate ID, which will become a part of the SandboxEngineTemplate resource name. If not specified, the server will generate one.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateSandboxEngineTemplateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['sandbox_engine_template'] = \
            sandbox_engine_template
        return self.sandbox_engine_template_service_create_sandbox_engine_template_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_template_service_delete_sandbox_engine_template(
        self,
        name_11,
        **kwargs
    ):
        """Deletes a SandboxEngineTemplate.  # noqa: E501

        Authorization may require the following permission on the template's parent workspace: * actions/enginemanager/sandboxEngineTemplates/DELETE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_template_service_delete_sandbox_engine_template(name_11, async_req=True)
        >>> result = thread.get()

        Args:
            name_11 (str): Required. SandboxEngineTemplate resource name. Format is `workspaces/*/sandboxEngineTemplates/*`.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_11'] = \
            name_11
        return self.sandbox_engine_template_service_delete_sandbox_engine_template_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_template_service_get_sandbox_engine_template(
        self,
        name_11,
        **kwargs
    ):
        """Returns a specific SandboxEngineTemplate.  # noqa: E501

        Authorization may require the following permission on the template's parent workspace: * actions/enginemanager/sandboxEngineTemplates/GET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_template_service_get_sandbox_engine_template(name_11, async_req=True)
        >>> result = thread.get()

        Args:
            name_11 (str): Required. The name of the SandboxEngineTemplate to retrieve. Format is `workspaces/*/sandboxEngineTemplates/*`

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetSandboxEngineTemplateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_11'] = \
            name_11
        return self.sandbox_engine_template_service_get_sandbox_engine_template_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_template_service_list_sandbox_engine_templates(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of SandboxEngineTemplates.  # noqa: E501

        Authorization may require the following permission on the template's parent workspace: * actions/enginemanager/sandboxEngineTemplates/LIST  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_template_service_list_sandbox_engine_templates(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Required. The resource name of the workspace to associate with the SandboxEngineTemplate. Format is `workspaces/*`.

        Keyword Args:
            page_size (int): Optional. Maximum number of SandboxEngineTemplates to return in a response. If unspecified (or set to 0), at most 50 SandboxEngineTemplates will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Optional. Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListSandboxEngineTemplatesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListSandboxEngineTemplatesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.sandbox_engine_template_service_list_sandbox_engine_templates_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_template_service_update_sandbox_engine_template(
        self,
        sandbox_engine_template_name,
        update_mask,
        sandbox_engine_template,
        **kwargs
    ):
        """Updates a SandboxEngineTemplate.  # noqa: E501

        Authorization may require the following permission on the template's parent workspace: * actions/enginemanager/sandboxEngineTemplates/UPDATE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_template_service_update_sandbox_engine_template(sandbox_engine_template_name, update_mask, sandbox_engine_template, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_engine_template_name (str): Identifier. Resource name. Format is `workspaces/*/sandboxEngineTemplates/*`.
            update_mask (str): Required. The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: {\"display_name\", \"milli_cpu_request\", \"milli_cpu_limit\", \"gpu_resource\", \"gpu\", \"memory_bytes_request\", \"memory_bytes_limit\", \"storage_bytes\", \"storage_class_name\", \"environmental_variables\", \"yaml_pod_template_spec\", \"enabled\", \"max_idle_duration\"}. Paths are case sensitive (must match exactly).  To update all allowed fields, specify exactly one path with value \"*\".
            sandbox_engine_template (RequiredSandboxEngineTemplateResource): Required. SandboxEngineTemplate resource.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateSandboxEngineTemplateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_engine_template_name'] = \
            sandbox_engine_template_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['sandbox_engine_template'] = \
            sandbox_engine_template
        return self.sandbox_engine_template_service_update_sandbox_engine_template_endpoint.call_with_http_info(**kwargs)

