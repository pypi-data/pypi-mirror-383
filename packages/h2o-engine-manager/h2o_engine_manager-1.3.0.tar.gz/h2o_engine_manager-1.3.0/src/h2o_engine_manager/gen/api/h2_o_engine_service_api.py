"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_calculate_h2_o_engine_size_compressed_dataset_request import V1CalculateH2OEngineSizeCompressedDatasetRequest
from h2o_engine_manager.gen.model.v1_calculate_h2_o_engine_size_compressed_dataset_response import V1CalculateH2OEngineSizeCompressedDatasetResponse
from h2o_engine_manager.gen.model.v1_calculate_h2_o_engine_size_raw_dataset_request import V1CalculateH2OEngineSizeRawDatasetRequest
from h2o_engine_manager.gen.model.v1_calculate_h2_o_engine_size_raw_dataset_response import V1CalculateH2OEngineSizeRawDatasetResponse
from h2o_engine_manager.gen.model.v1_create_h2_o_engine_response import V1CreateH2OEngineResponse
from h2o_engine_manager.gen.model.v1_delete_h2_o_engine_response import V1DeleteH2OEngineResponse
from h2o_engine_manager.gen.model.v1_get_h2_o_engine_response import V1GetH2OEngineResponse
from h2o_engine_manager.gen.model.v1_h2_o_engine import V1H2OEngine
from h2o_engine_manager.gen.model.v1_h2_o_engine_service_download_logs_response import V1H2OEngineServiceDownloadLogsResponse
from h2o_engine_manager.gen.model.v1_list_h2_o_engines_response import V1ListH2OEnginesResponse
from h2o_engine_manager.gen.model.v1_terminate_h2_o_engine_response import V1TerminateH2OEngineResponse


class H2OEngineServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.h2_o_engine_service_calculate_h2_o_engine_size_compressed_dataset_endpoint = _Endpoint(
            settings={
                'response_type': (V1CalculateH2OEngineSizeCompressedDatasetResponse,),
                'auth': [],
                'endpoint_path': '/v1/h2oEngines:calculateH2OEngineSizeCompressedDataset',
                'operation_id': 'h2_o_engine_service_calculate_h2_o_engine_size_compressed_dataset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1CalculateH2OEngineSizeCompressedDatasetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_service_calculate_h2_o_engine_size_raw_dataset_endpoint = _Endpoint(
            settings={
                'response_type': (V1CalculateH2OEngineSizeRawDatasetResponse,),
                'auth': [],
                'endpoint_path': '/v1/h2oEngines:calculateH2OEngineSizeRawDataset',
                'operation_id': 'h2_o_engine_service_calculate_h2_o_engine_size_raw_dataset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1CalculateH2OEngineSizeRawDatasetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_service_create_h2_o_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateH2OEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/h2oEngines',
                'operation_id': 'h2_o_engine_service_create_h2_o_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'h2o_engine_id',
                    'h2o_engine',
                    'validate_only',
                ],
                'required': [
                    'parent',
                    'h2o_engine_id',
                    'h2o_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'h2o_engine_id':
                        (str,),
                    'h2o_engine':
                        (V1H2OEngine,),
                    'validate_only':
                        (bool,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'h2o_engine_id': 'h2oEngineId',
                    'validate_only': 'validateOnly',
                },
                'location_map': {
                    'parent': 'path',
                    'h2o_engine_id': 'query',
                    'h2o_engine': 'body',
                    'validate_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_service_delete_h2_o_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1DeleteH2OEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_4}',
                'operation_id': 'h2_o_engine_service_delete_h2_o_engine',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_4',
                    'allow_missing',
                    'validate_only',
                ],
                'required': [
                    'name_4',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_4',
                ]
            },
            root_map={
                'validations': {
                    ('name_4',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_4':
                        (str,),
                    'allow_missing':
                        (bool,),
                    'validate_only':
                        (bool,),
                },
                'attribute_map': {
                    'name_4': 'name_4',
                    'allow_missing': 'allowMissing',
                    'validate_only': 'validateOnly',
                },
                'location_map': {
                    'name_4': 'path',
                    'allow_missing': 'query',
                    'validate_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_service_download_logs_endpoint = _Endpoint(
            settings={
                'response_type': (V1H2OEngineServiceDownloadLogsResponse,),
                'auth': [],
                'endpoint_path': '/v1/{h2oEngine}:downloadLogs',
                'operation_id': 'h2_o_engine_service_download_logs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'h2o_engine',
                    'body',
                ],
                'required': [
                    'h2o_engine',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'h2o_engine',
                ]
            },
            root_map={
                'validations': {
                    ('h2o_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'h2o_engine':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'h2o_engine': 'h2oEngine',
                },
                'location_map': {
                    'h2o_engine': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_service_get_h2_o_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetH2OEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_4}',
                'operation_id': 'h2_o_engine_service_get_h2_o_engine',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_4',
                ],
                'required': [
                    'name_4',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_4',
                ]
            },
            root_map={
                'validations': {
                    ('name_4',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_4':
                        (str,),
                },
                'attribute_map': {
                    'name_4': 'name_4',
                },
                'location_map': {
                    'name_4': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_service_list_h2_o_engines_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListH2OEnginesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/h2oEngines',
                'operation_id': 'h2_o_engine_service_list_h2_o_engines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                    'order_by',
                    'filter',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'order_by':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'order_by': 'orderBy',
                    'filter': 'filter',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                    'order_by': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_service_terminate_h2_o_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1TerminateH2OEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:terminate',
                'operation_id': 'h2_o_engine_service_terminate_h2_o_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def h2_o_engine_service_calculate_h2_o_engine_size_compressed_dataset(
        self,
        body,
        **kwargs
    ):
        """Return recommended engine size based on the dimensions of the compressed dataset and given engine size limits. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: The linter is bugged. It requires incorrect suffix (\"H2o\" instead of \"H2O\")  --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_calculate_h2_o_engine_size_compressed_dataset(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1CalculateH2OEngineSizeCompressedDatasetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CalculateH2OEngineSizeCompressedDatasetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.h2_o_engine_service_calculate_h2_o_engine_size_compressed_dataset_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_calculate_h2_o_engine_size_raw_dataset(
        self,
        body,
        **kwargs
    ):
        """Return recommended engine size based on the raw size of the expected raw dataset size and given engine size limits. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: The linter is bugged. It requires incorrect suffix (\"H2o\" instead of \"H2O\")  --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_calculate_h2_o_engine_size_raw_dataset(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1CalculateH2OEngineSizeRawDatasetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CalculateH2OEngineSizeRawDatasetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.h2_o_engine_service_calculate_h2_o_engine_size_raw_dataset_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_create_h2_o_engine(
        self,
        parent,
        h2o_engine_id,
        h2o_engine,
        **kwargs
    ):
        """Creates and starts a new H2OEngine within a specified workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_create_h2_o_engine(parent, h2o_engine_id, h2o_engine, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/CREATE
            h2o_engine_id (str): Specify the H2OEngine ID, which will become a part of the H2OEngine resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            h2o_engine (V1H2OEngine): The H2OEngine resource to create. NON_EMPTY_DEFAULT fields that are not set in this request will be set to a default value. Default value is determined by the workspace in which the engine is created. Each workspace has a defined constraint set, which contains the default value for each field.

        Keyword Args:
            validate_only (bool): When set, request is only validated but no changes are made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateH2OEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['h2o_engine_id'] = \
            h2o_engine_id
        kwargs['h2o_engine'] = \
            h2o_engine
        return self.h2_o_engine_service_create_h2_o_engine_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_delete_h2_o_engine(
        self,
        name_4,
        **kwargs
    ):
        """Deletes a H2OEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_delete_h2_o_engine(name_4, async_req=True)
        >>> result = thread.get()

        Args:
            name_4 (str): H2OEngine resource name. Format: workspaces/{workspace}/h2oEngines/{h2o_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/DELETE

        Keyword Args:
            allow_missing (bool): When set and the H2OEngine is not found, the request will succeed but no changes are made.. [optional]
            validate_only (bool): When set, request is validated but no changes are made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DeleteH2OEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_4'] = \
            name_4
        return self.h2_o_engine_service_delete_h2_o_engine_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_download_logs(
        self,
        h2o_engine,
        body,
        **kwargs
    ):
        """Download H2OEngine logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_download_logs(h2o_engine, body, async_req=True)
        >>> result = thread.get()

        Args:
            h2o_engine (str): H2OEngine resource name. Format: workspaces/{workspace}/h2oEngines/{h2o_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/DOWNLOAD_LOGS
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1H2OEngineServiceDownloadLogsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['h2o_engine'] = \
            h2o_engine
        kwargs['body'] = \
            body
        return self.h2_o_engine_service_download_logs_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_get_h2_o_engine(
        self,
        name_4,
        **kwargs
    ):
        """Returns a specific H2OEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_get_h2_o_engine(name_4, async_req=True)
        >>> result = thread.get()

        Args:
            name_4 (str): H2OEngine resource name. Format: workspaces/{workspace}/h2oEngines/{h2o_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/GET

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetH2OEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_4'] = \
            name_4
        return self.h2_o_engine_service_get_h2_o_engine_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_list_h2_o_engines(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of H2OEngines within a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_list_h2_o_engines(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/LIST

        Keyword Args:
            page_size (int): Maximum number of H2OEngines to return in a response. If unspecified (or set to 0), at most 50 H2OEngines will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListH2OEnginesResponse.. [optional]
            order_by (str): Used to specify the sorting order.  When unset, H2OEngines are ordered by their time of creation in descending order. This is equivalent to \"create_time desc\".  When specified, the value must be a comma separated list of supported fields. The supported fields are:  - name  - cpu  - gpu  - memoryBytes  - creator  - create_time  - update_time  - delete_time  - display_name  - max_idle_duration  - max_running_duration  - uid  - node_count  The default sorting order is ascending. For example: \"name\" and \"name asc\" are equivalent values.  To specify descending order for a field, append a \" desc\" suffix. For example: \"name desc\".  Redundant space characters are insignificant. For example these values are all equal: - \"  name, cpu     desc\" - \"name, cpu desc\" - \"name   , cpu desc   \"  Undefined (empty) time is interpreted as a zero time (0s since epoch, i.e. 1970-01-01T00:00:00Z).  Undefined (empty) duration is interpreted as a zero duration (0 seconds).. [optional]
            filter (str): Used to filter H2OEngines. When unset, no filtering is applied.  Filtering implements specification https://google.aip.dev/160.  Supported filter fields: - name - h2o_engine_id - state - cpu - gpu - memory_bytes - creator - creator_display_name - create_time - update_time - delete_time - reconciling - uid - display_name - max_idle_duration - max_running_duration - current_idle_duration - current_running_duration - node_count  Examples: - `cpu > 5` - `gpu < 3` - `cpu >= 5 AND gpu <= 3` - `cpu != 5 OR gpu == 3` - `NOT (cpu > 5 OR gpu < 3)` - `-(cpu > 5 OR gpu < 3)` - `NOT (cpu > 5 OR (gpu < 3))` - `(cpu > 5 OR gpu < 3) AND memory_bytes != 1000` - `(cpu > 5 OR gpu < 3) AND (NOT ((((memory_bytes = 1000)))))` - `state = STATE_RUNNING AND create_time > \"2012-04-21T11:30:00-04:00\"` - `max_running_duration > \"1s\" AND max_running_duration != \"5s\"` - `reconciling = true OR reconciling = false` (supporting bool literals) - `h2o_engine_id = \"*e*\" OR display_name = \"*e*\"` (supporting prefix/suffix wildcard `*` for string fields equality comparison). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListH2OEnginesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.h2_o_engine_service_list_h2_o_engines_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_service_terminate_h2_o_engine(
        self,
        name,
        body,
        **kwargs
    ):
        """Terminate H2OEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_service_terminate_h2_o_engine(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): H2OEngine resource name.  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/h2oEngines/TERMINATE
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1TerminateH2OEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.h2_o_engine_service_terminate_h2_o_engine_endpoint.call_with_http_info(**kwargs)

