"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_create_sandbox_engine_response import V1CreateSandboxEngineResponse
from h2o_engine_manager.gen.model.v1_get_sandbox_engine_response import V1GetSandboxEngineResponse
from h2o_engine_manager.gen.model.v1_list_sandbox_engines_response import V1ListSandboxEnginesResponse
from h2o_engine_manager.gen.model.v1_sandbox_engine import V1SandboxEngine
from h2o_engine_manager.gen.model.v1_terminate_sandbox_engine_response import V1TerminateSandboxEngineResponse


class SandboxEngineServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.sandbox_engine_service_create_sandbox_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateSandboxEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/sandboxEngines',
                'operation_id': 'sandbox_engine_service_create_sandbox_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'sandbox_engine_id',
                    'sandbox_engine',
                ],
                'required': [
                    'parent',
                    'sandbox_engine_id',
                    'sandbox_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'sandbox_engine_id':
                        (str,),
                    'sandbox_engine':
                        (V1SandboxEngine,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'sandbox_engine_id': 'sandboxEngineId',
                },
                'location_map': {
                    'parent': 'path',
                    'sandbox_engine_id': 'query',
                    'sandbox_engine': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_engine_service_delete_sandbox_engine_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name_10}',
                'operation_id': 'sandbox_engine_service_delete_sandbox_engine',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_10',
                ],
                'required': [
                    'name_10',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_10',
                ]
            },
            root_map={
                'validations': {
                    ('name_10',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_10':
                        (str,),
                },
                'attribute_map': {
                    'name_10': 'name_10',
                },
                'location_map': {
                    'name_10': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_service_get_sandbox_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetSandboxEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_10}',
                'operation_id': 'sandbox_engine_service_get_sandbox_engine',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_10',
                ],
                'required': [
                    'name_10',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_10',
                ]
            },
            root_map={
                'validations': {
                    ('name_10',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_10':
                        (str,),
                },
                'attribute_map': {
                    'name_10': 'name_10',
                },
                'location_map': {
                    'name_10': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_service_list_sandbox_engines_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListSandboxEnginesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/sandboxEngines',
                'operation_id': 'sandbox_engine_service_list_sandbox_engines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sandbox_engine_service_terminate_sandbox_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1TerminateSandboxEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}:terminate',
                'operation_id': 'sandbox_engine_service_terminate_sandbox_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                    'body',
                ],
                'required': [
                    'name_1',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/sandboxEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                },
                'location_map': {
                    'name_1': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def sandbox_engine_service_create_sandbox_engine(
        self,
        parent,
        sandbox_engine_id,
        sandbox_engine,
        **kwargs
    ):
        """Creates and starts a new SandboxEngine within a specified workspace.  # noqa: E501

        Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/sandboxEngines/CREATE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_service_create_sandbox_engine(parent, sandbox_engine_id, sandbox_engine, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): workspace resource name. Format: workspaces/{workspace}
            sandbox_engine_id (str): Specify the SandboxEngine ID, which will become a part of the SandboxEngine resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            sandbox_engine (V1SandboxEngine): The SandboxEngine resource to create.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateSandboxEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['sandbox_engine_id'] = \
            sandbox_engine_id
        kwargs['sandbox_engine'] = \
            sandbox_engine
        return self.sandbox_engine_service_create_sandbox_engine_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_service_delete_sandbox_engine(
        self,
        name_10,
        **kwargs
    ):
        """Deletes a SandboxEngine.  # noqa: E501

        Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/sandboxEngines/DELETE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_service_delete_sandbox_engine(name_10, async_req=True)
        >>> result = thread.get()

        Args:
            name_10 (str): SandboxEngine resource name. Format: workspaces/{workspace}/sandboxEngines/{sandbox_engine}

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_10'] = \
            name_10
        return self.sandbox_engine_service_delete_sandbox_engine_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_service_get_sandbox_engine(
        self,
        name_10,
        **kwargs
    ):
        """Returns a specific SandboxEngine.  # noqa: E501

        Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/sandboxEngines/GET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_service_get_sandbox_engine(name_10, async_req=True)
        >>> result = thread.get()

        Args:
            name_10 (str): SandboxEngine resource name. Format: workspaces/{workspace}/sandboxEngines/{sandbox_engine}

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetSandboxEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_10'] = \
            name_10
        return self.sandbox_engine_service_get_sandbox_engine_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_service_list_sandbox_engines(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of SandboxEngines within a workspace.  # noqa: E501

        Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/sandboxEngines/LIST  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_service_list_sandbox_engines(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}

        Keyword Args:
            page_size (int): Maximum number of SandboxEngines to return in a response. If unspecified (or set to 0), at most 50 SandboxEngines will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListSandboxEnginesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListSandboxEnginesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.sandbox_engine_service_list_sandbox_engines_endpoint.call_with_http_info(**kwargs)

    def sandbox_engine_service_terminate_sandbox_engine(
        self,
        name_1,
        body,
        **kwargs
    ):
        """Terminate SandboxEngine.  # noqa: E501

        Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/sandboxEngines/TERMINATE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_engine_service_terminate_sandbox_engine(name_1, body, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): SandboxEngine resource name.
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1TerminateSandboxEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        kwargs['body'] = \
            body
        return self.sandbox_engine_service_terminate_sandbox_engine_endpoint.call_with_http_info(**kwargs)

