"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.h2_o_engine_profile_service_copy_h2_o_engine_profile_request import H2OEngineProfileServiceCopyH2OEngineProfileRequest
from h2o_engine_manager.gen.model.required_h2_o_engine_profile_resource import RequiredH2OEngineProfileResource
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_copy_h2_o_engine_profile_response import V1CopyH2OEngineProfileResponse
from h2o_engine_manager.gen.model.v1_create_h2_o_engine_profile_response import V1CreateH2OEngineProfileResponse
from h2o_engine_manager.gen.model.v1_get_h2_o_engine_profile_response import V1GetH2OEngineProfileResponse
from h2o_engine_manager.gen.model.v1_h2_o_engine_profile import V1H2OEngineProfile
from h2o_engine_manager.gen.model.v1_list_assigned_h2_o_engine_profiles_response import V1ListAssignedH2OEngineProfilesResponse
from h2o_engine_manager.gen.model.v1_list_h2_o_engine_profiles_response import V1ListH2OEngineProfilesResponse
from h2o_engine_manager.gen.model.v1_update_h2_o_engine_profile_response import V1UpdateH2OEngineProfileResponse


class H2OEngineProfileServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.h2_o_engine_profile_service_copy_h2_o_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1CopyH2OEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}:copy',
                'operation_id': 'h2_o_engine_profile_service_copy_h2_o_engine_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                    'body',
                ],
                'required': [
                    'name_1',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                    'body':
                        (H2OEngineProfileServiceCopyH2OEngineProfileRequest,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                },
                'location_map': {
                    'name_1': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_create_h2_o_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateH2OEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/h2oEngineProfiles',
                'operation_id': 'h2_o_engine_profile_service_create_h2_o_engine_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'h2o_engine_profile_id',
                    'h2o_engine_profile',
                ],
                'required': [
                    'parent',
                    'h2o_engine_profile_id',
                    'h2o_engine_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'h2o_engine_profile_id':
                        (str,),
                    'h2o_engine_profile':
                        (V1H2OEngineProfile,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'h2o_engine_profile_id': 'h2oEngineProfileId',
                },
                'location_map': {
                    'parent': 'path',
                    'h2o_engine_profile_id': 'query',
                    'h2o_engine_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_delete_h2_o_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name_3}',
                'operation_id': 'h2_o_engine_profile_service_delete_h2_o_engine_profile',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_3',
                ],
                'required': [
                    'name_3',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_3',
                ]
            },
            root_map={
                'validations': {
                    ('name_3',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_3':
                        (str,),
                },
                'attribute_map': {
                    'name_3': 'name_3',
                },
                'location_map': {
                    'name_3': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_get_h2_o_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetH2OEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_3}',
                'operation_id': 'h2_o_engine_profile_service_get_h2_o_engine_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_3',
                ],
                'required': [
                    'name_3',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_3',
                ]
            },
            root_map={
                'validations': {
                    ('name_3',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_3':
                        (str,),
                },
                'attribute_map': {
                    'name_3': 'name_3',
                },
                'location_map': {
                    'name_3': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_list_assigned_h2_o_engine_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListAssignedH2OEngineProfilesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/h2oEngineProfiles:listAssigned',
                'operation_id': 'h2_o_engine_profile_service_list_assigned_h2_o_engine_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_list_h2_o_engine_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListH2OEngineProfilesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/h2oEngineProfiles',
                'operation_id': 'h2_o_engine_profile_service_list_h2_o_engine_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.h2_o_engine_profile_service_update_h2_o_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateH2OEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{h2oEngineProfile.name}',
                'operation_id': 'h2_o_engine_profile_service_update_h2_o_engine_profile',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'h2o_engine_profile_name',
                    'update_mask',
                    'h2o_engine_profile',
                ],
                'required': [
                    'h2o_engine_profile_name',
                    'update_mask',
                    'h2o_engine_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'h2o_engine_profile_name',
                ]
            },
            root_map={
                'validations': {
                    ('h2o_engine_profile_name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/h2oEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'h2o_engine_profile_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'h2o_engine_profile':
                        (RequiredH2OEngineProfileResource,),
                },
                'attribute_map': {
                    'h2o_engine_profile_name': 'h2oEngineProfile.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'h2o_engine_profile_name': 'path',
                    'update_mask': 'query',
                    'h2o_engine_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def h2_o_engine_profile_service_copy_h2_o_engine_profile(
        self,
        name_1,
        body,
        **kwargs
    ):
        """Copies an existing H2OEngineProfile to a new H2OEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_copy_h2_o_engine_profile(name_1, body, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): Required. Source H2OEngineProfile resource name. Format: workspaces/{workspace}/h2oEngineProfiles/{h2o_engine_profile}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/GET
            body (H2OEngineProfileServiceCopyH2OEngineProfileRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CopyH2OEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        kwargs['body'] = \
            body
        return self.h2_o_engine_profile_service_copy_h2_o_engine_profile_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_create_h2_o_engine_profile(
        self,
        parent,
        h2o_engine_profile_id,
        h2o_engine_profile,
        **kwargs
    ):
        """Creates a new H2OEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_create_h2_o_engine_profile(parent, h2o_engine_profile_id, h2o_engine_profile, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/CREATE
            h2o_engine_profile_id (str): Specify the H2OEngineProfile ID, which will become a part of the H2OEngineProfile resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            h2o_engine_profile (V1H2OEngineProfile): The H2OEngineProfile resource to create.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateH2OEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['h2o_engine_profile_id'] = \
            h2o_engine_profile_id
        kwargs['h2o_engine_profile'] = \
            h2o_engine_profile
        return self.h2_o_engine_profile_service_create_h2_o_engine_profile_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_delete_h2_o_engine_profile(
        self,
        name_3,
        **kwargs
    ):
        """Deletes a H2OEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_delete_h2_o_engine_profile(name_3, async_req=True)
        >>> result = thread.get()

        Args:
            name_3 (str): H2OEngine resource name. Format: workspaces/{workspace}/h2oEngineProfiles/{h2o_engine_profile}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/DELETE

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_3'] = \
            name_3
        return self.h2_o_engine_profile_service_delete_h2_o_engine_profile_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_get_h2_o_engine_profile(
        self,
        name_3,
        **kwargs
    ):
        """Get H2OEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_get_h2_o_engine_profile(name_3, async_req=True)
        >>> result = thread.get()

        Args:
            name_3 (str): H2OEngineProfile resource name. Format: workspaces/{workspace}/h2oEngineProfiles/{h2o_engine_profile}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/GET

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetH2OEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_3'] = \
            name_3
        return self.h2_o_engine_profile_service_get_h2_o_engine_profile_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_list_assigned_h2_o_engine_profiles(
        self,
        parent,
        **kwargs
    ):
        """Returns assigned H2OEngineProfiles that match OIDC roles of the caller. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: Not a standard List method. --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_list_assigned_h2_o_engine_profiles(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/LIST_ASSIGNED

        Keyword Args:
            page_size (int): Maximum number of H2OEngineProfiles to return in a response. If unspecified (or set to 0), at most 50 H2OEngineProfiles will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListH2OEngineProfilesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListAssignedH2OEngineProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.h2_o_engine_profile_service_list_assigned_h2_o_engine_profiles_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_list_h2_o_engine_profiles(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of H2OEngineProfiles.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_list_h2_o_engine_profiles(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/LIST

        Keyword Args:
            page_size (int): Maximum number of H2OEngineProfiles to return in a response. If unspecified (or set to 0), at most 50 H2OEngineProfiles will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListH2OEngineProfilesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListH2OEngineProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.h2_o_engine_profile_service_list_h2_o_engine_profiles_endpoint.call_with_http_info(**kwargs)

    def h2_o_engine_profile_service_update_h2_o_engine_profile(
        self,
        h2o_engine_profile_name,
        update_mask,
        h2o_engine_profile,
        **kwargs
    ):
        """Updates a H2OEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.h2_o_engine_profile_service_update_h2_o_engine_profile(h2o_engine_profile_name, update_mask, h2o_engine_profile, async_req=True)
        >>> result = thread.get()

        Args:
            h2o_engine_profile_name (str): Output only. Resource name. Format: workspaces/*/h2oEngineProfiles/*
            update_mask (str): Required. The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: - display_name - priority - disabled - assigned_oidc_roles - max_running_engines - node_count_constraint - cpu_constraint - gpu_constraint - memory_bytes_constraint - max_idle_duration_constraint - max_running_duration_constraint - yaml_pod_template_spec - yaml_gpu_tolerations - gpu_resource_name - java_classpath - java_options - h2o_options  Paths are case sensitive (must match exactly).  To update all allowed fields, specify exactly one path with value \"*\".
            h2o_engine_profile (RequiredH2OEngineProfileResource): Required. H2OEngineProfile resource.  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/h2oEngineProfiles/UPDATE

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateH2OEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['h2o_engine_profile_name'] = \
            h2o_engine_profile_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['h2o_engine_profile'] = \
            h2o_engine_profile
        return self.h2_o_engine_profile_service_update_h2_o_engine_profile_endpoint.call_with_http_info(**kwargs)

