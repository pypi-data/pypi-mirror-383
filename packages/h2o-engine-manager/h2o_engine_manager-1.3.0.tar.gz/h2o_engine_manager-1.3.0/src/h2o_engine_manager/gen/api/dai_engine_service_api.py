"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.dai_engine_resource import DAIEngineResource
from h2o_engine_manager.gen.model.dai_engine_service_migrate_creator_request import DAIEngineServiceMigrateCreatorRequest
from h2o_engine_manager.gen.model.dai_engine_service_pause_dai_engine_request import DAIEngineServicePauseDAIEngineRequest
from h2o_engine_manager.gen.model.dai_engine_service_resize_storage_request import DAIEngineServiceResizeStorageRequest
from h2o_engine_manager.gen.model.dai_engine_service_resume_dai_engine_request import DAIEngineServiceResumeDAIEngineRequest
from h2o_engine_manager.gen.model.dai_engine_service_upgrade_dai_engine_version_request import DAIEngineServiceUpgradeDAIEngineVersionRequest
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_create_dai_engine_response import V1CreateDAIEngineResponse
from h2o_engine_manager.gen.model.v1_dai_engine import V1DAIEngine
from h2o_engine_manager.gen.model.v1_dai_engine_service_download_logs_response import V1DAIEngineServiceDownloadLogsResponse
from h2o_engine_manager.gen.model.v1_dai_engine_service_migrate_creator_response import V1DAIEngineServiceMigrateCreatorResponse
from h2o_engine_manager.gen.model.v1_dai_engine_service_resize_storage_response import V1DAIEngineServiceResizeStorageResponse
from h2o_engine_manager.gen.model.v1_dai_engine_service_upgrade_dai_engine_version_response import V1DAIEngineServiceUpgradeDAIEngineVersionResponse
from h2o_engine_manager.gen.model.v1_delete_dai_engine_response import V1DeleteDAIEngineResponse
from h2o_engine_manager.gen.model.v1_get_dai_engine_response import V1GetDAIEngineResponse
from h2o_engine_manager.gen.model.v1_list_dai_engines_response import V1ListDAIEnginesResponse
from h2o_engine_manager.gen.model.v1_pause_dai_engine_response import V1PauseDAIEngineResponse
from h2o_engine_manager.gen.model.v1_resume_dai_engine_response import V1ResumeDAIEngineResponse
from h2o_engine_manager.gen.model.v1_update_dai_engine_response import V1UpdateDAIEngineResponse


class DAIEngineServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.d_ai_engine_service_create_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/daiEngines',
                'operation_id': 'd_ai_engine_service_create_dai_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'dai_engine_id',
                    'dai_engine',
                    'validate_only',
                ],
                'required': [
                    'parent',
                    'dai_engine_id',
                    'dai_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'dai_engine_id':
                        (str,),
                    'dai_engine':
                        (V1DAIEngine,),
                    'validate_only':
                        (bool,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'dai_engine_id': 'daiEngineId',
                    'validate_only': 'validateOnly',
                },
                'location_map': {
                    'parent': 'path',
                    'dai_engine_id': 'query',
                    'dai_engine': 'body',
                    'validate_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_delete_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1DeleteDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}',
                'operation_id': 'd_ai_engine_service_delete_dai_engine',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                    'allow_missing',
                    'validate_only',
                ],
                'required': [
                    'name_1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                    'allow_missing':
                        (bool,),
                    'validate_only':
                        (bool,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                    'allow_missing': 'allowMissing',
                    'validate_only': 'validateOnly',
                },
                'location_map': {
                    'name_1': 'path',
                    'allow_missing': 'query',
                    'validate_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_service_download_logs_endpoint = _Endpoint(
            settings={
                'response_type': (V1DAIEngineServiceDownloadLogsResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngine}:downloadLogs',
                'operation_id': 'd_ai_engine_service_download_logs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine',
                    'body',
                ],
                'required': [
                    'dai_engine',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'dai_engine': 'daiEngine',
                },
                'location_map': {
                    'dai_engine': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_get_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}',
                'operation_id': 'd_ai_engine_service_get_dai_engine',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                ],
                'required': [
                    'name_1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                },
                'location_map': {
                    'name_1': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_service_list_dai_engines_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListDAIEnginesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/daiEngines',
                'operation_id': 'd_ai_engine_service_list_dai_engines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                    'order_by',
                    'filter',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'order_by':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'order_by': 'orderBy',
                    'filter': 'filter',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                    'order_by': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_service_migrate_creator_endpoint = _Endpoint(
            settings={
                'response_type': (V1DAIEngineServiceMigrateCreatorResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngine}:migrateCreator',
                'operation_id': 'd_ai_engine_service_migrate_creator',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine',
                    'body',
                ],
                'required': [
                    'dai_engine',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine':
                        (str,),
                    'body':
                        (DAIEngineServiceMigrateCreatorRequest,),
                },
                'attribute_map': {
                    'dai_engine': 'daiEngine',
                },
                'location_map': {
                    'dai_engine': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_pause_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1PauseDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:pause',
                'operation_id': 'd_ai_engine_service_pause_dai_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (DAIEngineServicePauseDAIEngineRequest,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_resize_storage_endpoint = _Endpoint(
            settings={
                'response_type': (V1DAIEngineServiceResizeStorageResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngine}:resizeStorage',
                'operation_id': 'd_ai_engine_service_resize_storage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine',
                    'body',
                ],
                'required': [
                    'dai_engine',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine':
                        (str,),
                    'body':
                        (DAIEngineServiceResizeStorageRequest,),
                },
                'attribute_map': {
                    'dai_engine': 'daiEngine',
                },
                'location_map': {
                    'dai_engine': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_resume_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResumeDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:resume',
                'operation_id': 'd_ai_engine_service_resume_dai_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (DAIEngineServiceResumeDAIEngineRequest,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_update_dai_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateDAIEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngine.name}',
                'operation_id': 'd_ai_engine_service_update_dai_engine',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine_name',
                    'update_mask',
                    'dai_engine',
                    'allow_missing',
                    'validate_only',
                ],
                'required': [
                    'dai_engine_name',
                    'update_mask',
                    'dai_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine_name',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine_name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'dai_engine':
                        (DAIEngineResource,),
                    'allow_missing':
                        (bool,),
                    'validate_only':
                        (bool,),
                },
                'attribute_map': {
                    'dai_engine_name': 'daiEngine.name',
                    'update_mask': 'updateMask',
                    'allow_missing': 'allowMissing',
                    'validate_only': 'validateOnly',
                },
                'location_map': {
                    'dai_engine_name': 'path',
                    'update_mask': 'query',
                    'dai_engine': 'body',
                    'allow_missing': 'query',
                    'validate_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_service_upgrade_dai_engine_version_endpoint = _Endpoint(
            settings={
                'response_type': (V1DAIEngineServiceUpgradeDAIEngineVersionResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngine}:upgradeDAIEngineVersion',
                'operation_id': 'd_ai_engine_service_upgrade_dai_engine_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine',
                    'body',
                ],
                'required': [
                    'dai_engine',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine':
                        (str,),
                    'body':
                        (DAIEngineServiceUpgradeDAIEngineVersionRequest,),
                },
                'attribute_map': {
                    'dai_engine': 'daiEngine',
                },
                'location_map': {
                    'dai_engine': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def d_ai_engine_service_create_dai_engine(
        self,
        parent,
        dai_engine_id,
        dai_engine,
        **kwargs
    ):
        """Creates a new DAIEngine within a specified workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_create_dai_engine(parent, dai_engine_id, dai_engine, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/CREATE
            dai_engine_id (str): Specify the DAIEngine ID, which will become a part of the DAIEngine resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            dai_engine (V1DAIEngine): The DAIEngine resource to create. NON_EMPTY_DEFAULT fields that are not set in this request will be set to a default value. Default value is determined by the workspace in which the engine is created. Each workspace has a defined constraint set, which contains the default value for each field.

        Keyword Args:
            validate_only (bool): When set, request is only validated but no changes are made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['dai_engine_id'] = \
            dai_engine_id
        kwargs['dai_engine'] = \
            dai_engine
        return self.d_ai_engine_service_create_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_delete_dai_engine(
        self,
        name_1,
        **kwargs
    ):
        """Deletes a DAIEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_delete_dai_engine(name_1, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/DELETE

        Keyword Args:
            allow_missing (bool): When set and the DAIEngine is not found, the request will succeed but no changes are made.. [optional]
            validate_only (bool): When set, request is validated but no changes are made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DeleteDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        return self.d_ai_engine_service_delete_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_download_logs(
        self,
        dai_engine,
        body,
        **kwargs
    ):
        """Download DAIEngine logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_download_logs(dai_engine, body, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/DOWNLOAD_LOGS
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DAIEngineServiceDownloadLogsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine'] = \
            dai_engine
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_download_logs_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_get_dai_engine(
        self,
        name_1,
        **kwargs
    ):
        """Returns a specific DAIEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_get_dai_engine(name_1, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/GET

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        return self.d_ai_engine_service_get_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_list_dai_engines(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of DAIEngines within a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_list_dai_engines(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/LIST

        Keyword Args:
            page_size (int): Maximum number of DAIEngines to return in a response. If unspecified (or set to 0), at most 50 DAIEngines will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListDAIEnginesResponse.. [optional]
            order_by (str): Used to specify the sorting order.  When unset, DAIEngines are ordered by their time of creation in descending order. This is equivalent to \"create_time desc\".  When specified, the value must be a comma separated list of supported fields. The supported fields are: - name - cpu - gpu - memory_bytes - storage_bytes - creator - create_time - update_time - delete_time - resume_time - display_name - max_idle_duration - max_running_duration - uid  The default sorting order is ascending. For example: \"name\" and \"name asc\" are equivalent values.  To specify descending order for a field, append a \" desc\" suffix. For example: \"name desc\".  Redundant space characters are insignificant. For example these values are all equal: - \"  name, cpu     desc\" - \"name, cpu desc\" - \"name   , cpu desc   \"  Undefined (empty) time is interpreted as a zero time (0s since epoch, i.e. 1970-01-01T00:00:00Z).  Undefined (empty) duration is interpreted as a zero duration (0 seconds).. [optional]
            filter (str): Used to filter DAIEngines. When unset, no filtering is applied.  Filtering implements specification https://google.aip.dev/160.  Supported filter fields: - name - dai_engine_id - state - cpu - gpu - memory_bytes - storage_bytes - creator - creator_display_name - create_time - update_time - delete_time - resume_time - reconciling - uid - display_name - max_idle_duration - max_running_duration - current_idle_duration - current_running_duration  Examples: - `cpu > 5` - `gpu < 3` - `cpu >= 5 AND gpu <= 3` - `cpu != 5 OR gpu == 3` - `NOT (cpu > 5 OR gpu < 3)` - `-(cpu > 5 OR gpu < 3)` - `NOT (cpu > 5 OR (gpu < 3))` - `(cpu > 5 OR gpu < 3) AND memory_bytes != 1000` - `(cpu > 5 OR gpu < 3) AND (NOT ((((memory_bytes = 1000)))))` - `state = STATE_RUNNING AND create_time > \"2012-04-21T11:30:00-04:00\"` - `max_running_duration > \"1s\" AND max_running_duration != \"5s\"` - `reconciling = true OR reconciling = false` (supporting bool literals) - `dai_engine_id = \"*e*\" OR display_name = \"*e*\"` (supporting prefix/suffix wildcard `*` for string fields equality comparison). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListDAIEnginesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.d_ai_engine_service_list_dai_engines_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_migrate_creator(
        self,
        dai_engine,
        body,
        **kwargs
    ):
        """Migrate DAIEngine creator. Admin only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_migrate_creator(dai_engine, body, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/MIGRATE_CREATOR
            body (DAIEngineServiceMigrateCreatorRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DAIEngineServiceMigrateCreatorResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine'] = \
            dai_engine
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_migrate_creator_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_pause_dai_engine(
        self,
        name,
        body,
        **kwargs
    ):
        """Pauses a DAIEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_pause_dai_engine(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/PAUSE
            body (DAIEngineServicePauseDAIEngineRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1PauseDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_pause_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_resize_storage(
        self,
        dai_engine,
        body,
        **kwargs
    ):
        """Resize DAIEngine storage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_resize_storage(dai_engine, body, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/RESIZE_STORAGE
            body (DAIEngineServiceResizeStorageRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DAIEngineServiceResizeStorageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine'] = \
            dai_engine
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_resize_storage_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_resume_dai_engine(
        self,
        name,
        body,
        **kwargs
    ):
        """Resumes an existing DAIEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_resume_dai_engine(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/RESUME
            body (DAIEngineServiceResumeDAIEngineRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ResumeDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_resume_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_update_dai_engine(
        self,
        dai_engine_name,
        update_mask,
        dai_engine,
        **kwargs
    ):
        """Updates a DAIEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_update_dai_engine(dai_engine_name, update_mask, dai_engine, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine_name (str): DAIEngine resource name.
            update_mask (str): The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: {\"profile\", \"cpu\", \"gpu\", \"memory_bytes\", \"config\", \"annotations\", \"display_name\", \"max_idle_duration\", \"max_running_duration\"}. Paths are case sensitive (must match exactly).  To update all allowed fields, specify exactly one path with value \"*\".
            dai_engine (DAIEngineResource): DAIEngine resource.

        Keyword Args:
            allow_missing (bool): When set and the DAIEngine is not found, a new one is created. In this situation, `update_mask` is ignored, i.e. all fields are applied regardless of any provided update mask; but the update mask must be still present.. [optional]
            validate_only (bool): When set, request is validated but no changes are made.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateDAIEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine_name'] = \
            dai_engine_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['dai_engine'] = \
            dai_engine
        return self.d_ai_engine_service_update_dai_engine_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_service_upgrade_dai_engine_version(
        self,
        dai_engine,
        body,
        **kwargs
    ):
        """Upgrade DAIEngine's dai_engine_version.  # noqa: E501

        (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: Google linter incorrectly requires URI suffix \":upgradeDaiEngineVersion\" --)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_service_upgrade_dai_engine_version(dai_engine, body, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine (str): DAIEngine resource name. Format: workspaces/{workspace}/daiEngines/{dai_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/daiEngines/UPGRADE_DAI_ENGINE_VERSION
            body (DAIEngineServiceUpgradeDAIEngineVersionRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DAIEngineServiceUpgradeDAIEngineVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine'] = \
            dai_engine
        kwargs['body'] = \
            body
        return self.d_ai_engine_service_upgrade_dai_engine_version_endpoint.call_with_http_info(**kwargs)

