"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from h2o_engine_manager.gen.exceptions import ApiAttributeError


def lazy_import():
    from h2o_engine_manager.gen.model.v1_profile_constraint_duration import V1ProfileConstraintDuration
    from h2o_engine_manager.gen.model.v1_profile_constraint_numeric import V1ProfileConstraintNumeric
    globals()['V1ProfileConstraintDuration'] = V1ProfileConstraintDuration
    globals()['V1ProfileConstraintNumeric'] = V1ProfileConstraintNumeric


class RequiredNotebookEngineProfileResource(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'display_name': (str,),  # noqa: E501
            'priority': (int,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'assigned_oidc_roles_enabled': (bool,),  # noqa: E501
            'assigned_oidc_roles': ([str],),  # noqa: E501
            'max_running_engines': (int, none_type,),  # noqa: E501
            'cpu_constraint': (V1ProfileConstraintNumeric,),  # noqa: E501
            'gpu_constraint': (V1ProfileConstraintNumeric,),  # noqa: E501
            'memory_bytes_constraint': (V1ProfileConstraintNumeric,),  # noqa: E501
            'storage_bytes_constraint': (V1ProfileConstraintNumeric,),  # noqa: E501
            'max_idle_duration_constraint': (V1ProfileConstraintDuration,),  # noqa: E501
            'max_running_duration_constraint': (V1ProfileConstraintDuration,),  # noqa: E501
            'yaml_pod_template_spec': (str,),  # noqa: E501
            'yaml_gpu_tolerations': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'update_time': (datetime, none_type,),  # noqa: E501
            'creator': (str,),  # noqa: E501
            'updater': (str,),  # noqa: E501
            'creator_display_name': (str,),  # noqa: E501
            'updater_display_name': (str,),  # noqa: E501
            'storage_class_name': (str,),  # noqa: E501
            'gpu_resource_name': (str,),  # noqa: E501
            'sync_git_repository_enabled': (bool,),  # noqa: E501
            'git_repository': (str,),  # noqa: E501
            'git_ref': (str,),  # noqa: E501
            'git_directory_name': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'display_name': 'displayName',  # noqa: E501
        'priority': 'priority',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'assigned_oidc_roles_enabled': 'assignedOidcRolesEnabled',  # noqa: E501
        'assigned_oidc_roles': 'assignedOidcRoles',  # noqa: E501
        'max_running_engines': 'maxRunningEngines',  # noqa: E501
        'cpu_constraint': 'cpuConstraint',  # noqa: E501
        'gpu_constraint': 'gpuConstraint',  # noqa: E501
        'memory_bytes_constraint': 'memoryBytesConstraint',  # noqa: E501
        'storage_bytes_constraint': 'storageBytesConstraint',  # noqa: E501
        'max_idle_duration_constraint': 'maxIdleDurationConstraint',  # noqa: E501
        'max_running_duration_constraint': 'maxRunningDurationConstraint',  # noqa: E501
        'yaml_pod_template_spec': 'yamlPodTemplateSpec',  # noqa: E501
        'yaml_gpu_tolerations': 'yamlGpuTolerations',  # noqa: E501
        'create_time': 'createTime',  # noqa: E501
        'update_time': 'updateTime',  # noqa: E501
        'creator': 'creator',  # noqa: E501
        'updater': 'updater',  # noqa: E501
        'creator_display_name': 'creatorDisplayName',  # noqa: E501
        'updater_display_name': 'updaterDisplayName',  # noqa: E501
        'storage_class_name': 'storageClassName',  # noqa: E501
        'gpu_resource_name': 'gpuResourceName',  # noqa: E501
        'sync_git_repository_enabled': 'syncGitRepositoryEnabled',  # noqa: E501
        'git_repository': 'gitRepository',  # noqa: E501
        'git_ref': 'gitRef',  # noqa: E501
        'git_directory_name': 'gitDirectoryName',  # noqa: E501
    }

    read_only_vars = {
        'create_time',  # noqa: E501
        'update_time',  # noqa: E501
        'creator',  # noqa: E501
        'updater',  # noqa: E501
        'creator_display_name',  # noqa: E501
        'updater_display_name',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """RequiredNotebookEngineProfileResource - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            display_name (str): Optional. Human-readable name.. [optional]  # noqa: E501
            priority (int): Optional. Priority of the NotebookEngineProfile. Lower value means higher priority. Priority is NOT a unique value (any two NotebookEngineProfiles can have the same priority value).. [optional]  # noqa: E501
            enabled (bool): Optional. When set to true, the NotebookEngineProfile is enabled and can be used in NotebookEngine. When set to false, the NotebookEngineProfile is disabled and cannot be used in any NotebookEngine.. [optional]  # noqa: E501
            assigned_oidc_roles_enabled (bool): Optional. When set to true, the assigned_oidc_roles field is verified when a user uses this profile.. [optional]  # noqa: E501
            assigned_oidc_roles ([str]): Optional. List of OIDC roles assigned to this NotebookEngineProfile.  When profile has assigned some OIDC roles and verification of this list is enabled (assigned_oidc_roles_enabled=true), then this profile can be used only by users who have assigned at least one role from this list.  Example 1: assigned_oidc_roles = [\"role1\", \"role2\"]. This profile can be used only by users who have assigned either role1 or role2.  Example 2 (special case): assigned_oidc_roles = []. Empty list means that the profile has not assigned any OIDC role, therefore this profile cannot be used by any user.. [optional]  # noqa: E501
            max_running_engines (int, none_type): Optional. Maximum number of NotebookEngines per user that can be running when using this NotebookEngineProfile.. [optional]  # noqa: E501
            cpu_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            gpu_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            memory_bytes_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            storage_bytes_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            max_idle_duration_constraint (V1ProfileConstraintDuration): [optional]  # noqa: E501
            max_running_duration_constraint (V1ProfileConstraintDuration): [optional]  # noqa: E501
            yaml_pod_template_spec (str): When specified, then it is applied for each NotebookEngine that uses this profile. PodTemplateSpec describes what will be applied on top of a regular Notebook pod before it is created. This template is merged into Notebook default pod using StrategicMergePatch method (it overrides the default pod). More info about StrategicMergePatch: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/  Example YAML value (custom annotation applied for each Notebook pod): metadata:  annotations:    custom-key: custom-value. [optional]  # noqa: E501
            yaml_gpu_tolerations (str): When specified, then it is applied for each NotebookEngine that uses this profile. GPUTolerations sets Notebook's pod.spec.tolerations in case NotebookEngine has GPU > 0. This will override any tolerations defined in yaml_pod_template_spec.PodSpec.Tolerations field.  Example YAML value (two GPU tolerations applied for each Notebook pod):  - key: \"dedicated\"    operator: \"Equal\"    value: \"gpu\"    effect: \"NoSchedule\"  - key: \"key2\"    operator: \"Equal\"    value: \"value2\"    effect: \"NoSchedule\". [optional]  # noqa: E501
            create_time (datetime): Output only. Time when the NotebookEngineProfile was created.. [optional]  # noqa: E501
            update_time (datetime, none_type): Output only. Time when the NotebookEngineProfile was last updated.. [optional]  # noqa: E501
            creator (str): Output only. Name of entity that created the NotebookEngineProfile.. [optional]  # noqa: E501
            updater (str): Output only. Name of entity that last updated the NotebookEngineProfile.. [optional]  # noqa: E501
            creator_display_name (str): Output only. Human-readable name of entity that created the NotebookEngineProfile.. [optional]  # noqa: E501
            updater_display_name (str): Output only. Human-readable name of entity that last updated the NotebookEngineProfile.. [optional]  # noqa: E501
            storage_class_name (str): Optional. Name of the storage class used by NotebookEngine when using this profile. When unset, the default storage class of the k8s cluster will be used.. [optional]  # noqa: E501
            gpu_resource_name (str): Non-empty default. K8s GPU resource name. For example: `nvidia.com/gpu` or `amd.com/gpu`. When unset, server will choose a default value.. [optional]  # noqa: E501
            sync_git_repository_enabled (bool): Optional. Enables syncing of the git repository when NotebookEngine is created.. [optional]  # noqa: E501
            git_repository (str): Optional. The git repository to sync.. [optional]  # noqa: E501
            git_ref (str): Optional. The git revision (branch, tag, or hash) to check out. If not specified, this defaults to \"HEAD\" (of the upstream repo's default branch).. [optional]  # noqa: E501
            git_directory_name (str): Optional. The name of the directory in the user's home folder, where the Git repo is synced into. Defaults to \"Example\".. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """RequiredNotebookEngineProfileResource - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            display_name (str): Optional. Human-readable name.. [optional]  # noqa: E501
            priority (int): Optional. Priority of the NotebookEngineProfile. Lower value means higher priority. Priority is NOT a unique value (any two NotebookEngineProfiles can have the same priority value).. [optional]  # noqa: E501
            enabled (bool): Optional. When set to true, the NotebookEngineProfile is enabled and can be used in NotebookEngine. When set to false, the NotebookEngineProfile is disabled and cannot be used in any NotebookEngine.. [optional]  # noqa: E501
            assigned_oidc_roles_enabled (bool): Optional. When set to true, the assigned_oidc_roles field is verified when a user uses this profile.. [optional]  # noqa: E501
            assigned_oidc_roles ([str]): Optional. List of OIDC roles assigned to this NotebookEngineProfile.  When profile has assigned some OIDC roles and verification of this list is enabled (assigned_oidc_roles_enabled=true), then this profile can be used only by users who have assigned at least one role from this list.  Example 1: assigned_oidc_roles = [\"role1\", \"role2\"]. This profile can be used only by users who have assigned either role1 or role2.  Example 2 (special case): assigned_oidc_roles = []. Empty list means that the profile has not assigned any OIDC role, therefore this profile cannot be used by any user.. [optional]  # noqa: E501
            max_running_engines (int, none_type): Optional. Maximum number of NotebookEngines per user that can be running when using this NotebookEngineProfile.. [optional]  # noqa: E501
            cpu_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            gpu_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            memory_bytes_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            storage_bytes_constraint (V1ProfileConstraintNumeric): [optional]  # noqa: E501
            max_idle_duration_constraint (V1ProfileConstraintDuration): [optional]  # noqa: E501
            max_running_duration_constraint (V1ProfileConstraintDuration): [optional]  # noqa: E501
            yaml_pod_template_spec (str): When specified, then it is applied for each NotebookEngine that uses this profile. PodTemplateSpec describes what will be applied on top of a regular Notebook pod before it is created. This template is merged into Notebook default pod using StrategicMergePatch method (it overrides the default pod). More info about StrategicMergePatch: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/  Example YAML value (custom annotation applied for each Notebook pod): metadata:  annotations:    custom-key: custom-value. [optional]  # noqa: E501
            yaml_gpu_tolerations (str): When specified, then it is applied for each NotebookEngine that uses this profile. GPUTolerations sets Notebook's pod.spec.tolerations in case NotebookEngine has GPU > 0. This will override any tolerations defined in yaml_pod_template_spec.PodSpec.Tolerations field.  Example YAML value (two GPU tolerations applied for each Notebook pod):  - key: \"dedicated\"    operator: \"Equal\"    value: \"gpu\"    effect: \"NoSchedule\"  - key: \"key2\"    operator: \"Equal\"    value: \"value2\"    effect: \"NoSchedule\". [optional]  # noqa: E501
            create_time (datetime): Output only. Time when the NotebookEngineProfile was created.. [optional]  # noqa: E501
            update_time (datetime, none_type): Output only. Time when the NotebookEngineProfile was last updated.. [optional]  # noqa: E501
            creator (str): Output only. Name of entity that created the NotebookEngineProfile.. [optional]  # noqa: E501
            updater (str): Output only. Name of entity that last updated the NotebookEngineProfile.. [optional]  # noqa: E501
            creator_display_name (str): Output only. Human-readable name of entity that created the NotebookEngineProfile.. [optional]  # noqa: E501
            updater_display_name (str): Output only. Human-readable name of entity that last updated the NotebookEngineProfile.. [optional]  # noqa: E501
            storage_class_name (str): Optional. Name of the storage class used by NotebookEngine when using this profile. When unset, the default storage class of the k8s cluster will be used.. [optional]  # noqa: E501
            gpu_resource_name (str): Non-empty default. K8s GPU resource name. For example: `nvidia.com/gpu` or `amd.com/gpu`. When unset, server will choose a default value.. [optional]  # noqa: E501
            sync_git_repository_enabled (bool): Optional. Enables syncing of the git repository when NotebookEngine is created.. [optional]  # noqa: E501
            git_repository (str): Optional. The git repository to sync.. [optional]  # noqa: E501
            git_ref (str): Optional. The git revision (branch, tag, or hash) to check out. If not specified, this defaults to \"HEAD\" (of the upstream repo's default branch).. [optional]  # noqa: E501
            git_directory_name (str): Optional. The name of the directory in the user's home folder, where the Git repo is synced into. Defaults to \"Example\".. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
