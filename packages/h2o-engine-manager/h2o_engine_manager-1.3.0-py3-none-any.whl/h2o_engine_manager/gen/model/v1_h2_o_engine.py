"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from h2o_engine_manager.gen.exceptions import ApiAttributeError


def lazy_import():
    from h2o_engine_manager.gen.model.v1_h2_o_engine_profile_info import V1H2OEngineProfileInfo
    from h2o_engine_manager.gen.model.v1_h2_o_engine_state import V1H2OEngineState
    from h2o_engine_manager.gen.model.v1_h2_o_engine_version_info import V1H2OEngineVersionInfo
    globals()['V1H2OEngineProfileInfo'] = V1H2OEngineProfileInfo
    globals()['V1H2OEngineState'] = V1H2OEngineState
    globals()['V1H2OEngineVersionInfo'] = V1H2OEngineVersionInfo


class V1H2OEngine(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'profile': (str,),  # noqa: E501
            'h2o_engine_version': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'uid': (str,),  # noqa: E501
            'creator': (str,),  # noqa: E501
            'creator_display_name': (str,),  # noqa: E501
            'profile_info': (V1H2OEngineProfileInfo,),  # noqa: E501
            'state': (V1H2OEngineState,),  # noqa: E501
            'reconciling': (bool,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'delete_time': (datetime, none_type,),  # noqa: E501
            'update_time': (datetime, none_type,),  # noqa: E501
            'api_url': (str,),  # noqa: E501
            'login_url': (str,),  # noqa: E501
            'annotations': ({str: (str,)},),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'cpu': (int, none_type,),  # noqa: E501
            'gpu': (int, none_type,),  # noqa: E501
            'memory_bytes': (str, none_type,),  # noqa: E501
            'max_idle_duration': (str, none_type,),  # noqa: E501
            'max_running_duration': (str, none_type,),  # noqa: E501
            'current_idle_duration': (str, none_type,),  # noqa: E501
            'current_running_duration': (str, none_type,),  # noqa: E501
            'node_count': (int, none_type,),  # noqa: E501
            'h2o_engine_version_info': (V1H2OEngineVersionInfo,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'profile': 'profile',  # noqa: E501
        'h2o_engine_version': 'h2oEngineVersion',  # noqa: E501
        'name': 'name',  # noqa: E501
        'uid': 'uid',  # noqa: E501
        'creator': 'creator',  # noqa: E501
        'creator_display_name': 'creatorDisplayName',  # noqa: E501
        'profile_info': 'profileInfo',  # noqa: E501
        'state': 'state',  # noqa: E501
        'reconciling': 'reconciling',  # noqa: E501
        'create_time': 'createTime',  # noqa: E501
        'delete_time': 'deleteTime',  # noqa: E501
        'update_time': 'updateTime',  # noqa: E501
        'api_url': 'apiUrl',  # noqa: E501
        'login_url': 'loginUrl',  # noqa: E501
        'annotations': 'annotations',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'cpu': 'cpu',  # noqa: E501
        'gpu': 'gpu',  # noqa: E501
        'memory_bytes': 'memoryBytes',  # noqa: E501
        'max_idle_duration': 'maxIdleDuration',  # noqa: E501
        'max_running_duration': 'maxRunningDuration',  # noqa: E501
        'current_idle_duration': 'currentIdleDuration',  # noqa: E501
        'current_running_duration': 'currentRunningDuration',  # noqa: E501
        'node_count': 'nodeCount',  # noqa: E501
        'h2o_engine_version_info': 'h2oEngineVersionInfo',  # noqa: E501
    }

    read_only_vars = {
        'name',  # noqa: E501
        'uid',  # noqa: E501
        'creator',  # noqa: E501
        'creator_display_name',  # noqa: E501
        'reconciling',  # noqa: E501
        'create_time',  # noqa: E501
        'delete_time',  # noqa: E501
        'update_time',  # noqa: E501
        'api_url',  # noqa: E501
        'login_url',  # noqa: E501
        'current_idle_duration',  # noqa: E501
        'current_running_duration',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, profile, h2o_engine_version, *args, **kwargs):  # noqa: E501
        """V1H2OEngine - a model defined in OpenAPI

        Args:
            profile (str): Required. The resource name of the H2OEngineProfile that is used by this H2OEngine. Format is `workspaces/*/h2oEngineProfiles/*`.
            h2o_engine_version (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): H2OEngine resource name.. [optional]  # noqa: E501
            uid (str): Globally unique identifier of the resource.. [optional]  # noqa: E501
            creator (str): Name of na entity that created the H2OEngine.. [optional]  # noqa: E501
            creator_display_name (str): Human-readable name of creator.. [optional]  # noqa: E501
            profile_info (V1H2OEngineProfileInfo): [optional]  # noqa: E501
            state (V1H2OEngineState): [optional]  # noqa: E501
            reconciling (bool): Indicates whether changes to the resource are in progress. If true, current state of the H2OEngine does not match the intended state.. [optional]  # noqa: E501
            create_time (datetime): Time when the H2OEngine creation was requested.. [optional]  # noqa: E501
            delete_time (datetime, none_type): Time when the H2OEngine was deleted.. [optional]  # noqa: E501
            update_time (datetime, none_type): Time when the H2OEngine was last updated.. [optional]  # noqa: E501
            api_url (str): The URL address to access the engine API.. [optional]  # noqa: E501
            login_url (str): The URL address to initiate login flow.. [optional]  # noqa: E501
            annotations ({str: (str,)}): Additional arbitrary metadata associated with the H2OEngine.  Annotations are key/value pairs. The key must: - be 63 characters or less - begin and end with an alphanumeric character ([a-z0-9A-Z]) - with dashes (-), underscores (_), dots (.), and alphanumerics between - regex used for validation is: ^[A-Za-z0-9]([-A-Za-z0-9_.]{0,61}[A-Za-z0-9])?$. [optional]  # noqa: E501
            display_name (str): Human-readable name of the H2OEngine. Must contain at most 63 characters. Does not have to be unique.. [optional]  # noqa: E501
            cpu (int, none_type): The amount of CPU units per node requested by this H2OEngine.. [optional]  # noqa: E501
            gpu (int, none_type): The amount of GPU units per node requested by this H2OEngine.. [optional]  # noqa: E501
            memory_bytes (str, none_type): The amount of memory in bytes per node requested by this H2OEngine.. [optional]  # noqa: E501
            max_idle_duration (str, none_type): Maximum time an H2OEngine can be idle. When exceeded, the H2OEngine will terminate.. [optional]  # noqa: E501
            max_running_duration (str, none_type): Maximum time an H2OEngine can be running. When exceeded, the H2OEngine will terminate.. [optional]  # noqa: E501
            current_idle_duration (str, none_type): Current time the H2OEngine is idle.. [optional]  # noqa: E501
            current_running_duration (str, none_type): Current time the H2OEngine is running.. [optional]  # noqa: E501
            node_count (int, none_type): The number of nodes requested by this H2OEngine.. [optional]  # noqa: E501
            h2o_engine_version_info (V1H2OEngineVersionInfo): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.profile = profile
        self.h2o_engine_version = h2o_engine_version
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, profile, h2o_engine_version, *args, **kwargs):  # noqa: E501
        """V1H2OEngine - a model defined in OpenAPI

        Args:
            profile (str): Required. The resource name of the H2OEngineProfile that is used by this H2OEngine. Format is `workspaces/*/h2oEngineProfiles/*`.
            h2o_engine_version (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): H2OEngine resource name.. [optional]  # noqa: E501
            uid (str): Globally unique identifier of the resource.. [optional]  # noqa: E501
            creator (str): Name of na entity that created the H2OEngine.. [optional]  # noqa: E501
            creator_display_name (str): Human-readable name of creator.. [optional]  # noqa: E501
            profile_info (V1H2OEngineProfileInfo): [optional]  # noqa: E501
            state (V1H2OEngineState): [optional]  # noqa: E501
            reconciling (bool): Indicates whether changes to the resource are in progress. If true, current state of the H2OEngine does not match the intended state.. [optional]  # noqa: E501
            create_time (datetime): Time when the H2OEngine creation was requested.. [optional]  # noqa: E501
            delete_time (datetime, none_type): Time when the H2OEngine was deleted.. [optional]  # noqa: E501
            update_time (datetime, none_type): Time when the H2OEngine was last updated.. [optional]  # noqa: E501
            api_url (str): The URL address to access the engine API.. [optional]  # noqa: E501
            login_url (str): The URL address to initiate login flow.. [optional]  # noqa: E501
            annotations ({str: (str,)}): Additional arbitrary metadata associated with the H2OEngine.  Annotations are key/value pairs. The key must: - be 63 characters or less - begin and end with an alphanumeric character ([a-z0-9A-Z]) - with dashes (-), underscores (_), dots (.), and alphanumerics between - regex used for validation is: ^[A-Za-z0-9]([-A-Za-z0-9_.]{0,61}[A-Za-z0-9])?$. [optional]  # noqa: E501
            display_name (str): Human-readable name of the H2OEngine. Must contain at most 63 characters. Does not have to be unique.. [optional]  # noqa: E501
            cpu (int, none_type): The amount of CPU units per node requested by this H2OEngine.. [optional]  # noqa: E501
            gpu (int, none_type): The amount of GPU units per node requested by this H2OEngine.. [optional]  # noqa: E501
            memory_bytes (str, none_type): The amount of memory in bytes per node requested by this H2OEngine.. [optional]  # noqa: E501
            max_idle_duration (str, none_type): Maximum time an H2OEngine can be idle. When exceeded, the H2OEngine will terminate.. [optional]  # noqa: E501
            max_running_duration (str, none_type): Maximum time an H2OEngine can be running. When exceeded, the H2OEngine will terminate.. [optional]  # noqa: E501
            current_idle_duration (str, none_type): Current time the H2OEngine is idle.. [optional]  # noqa: E501
            current_running_duration (str, none_type): Current time the H2OEngine is running.. [optional]  # noqa: E501
            node_count (int, none_type): The number of nodes requested by this H2OEngine.. [optional]  # noqa: E501
            h2o_engine_version_info (V1H2OEngineVersionInfo): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.profile = profile
        self.h2o_engine_version = h2o_engine_version
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
