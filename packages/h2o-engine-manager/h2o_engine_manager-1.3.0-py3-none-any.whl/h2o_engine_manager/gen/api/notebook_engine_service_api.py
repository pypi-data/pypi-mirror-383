"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.notebook_engine_resource import NotebookEngineResource
from h2o_engine_manager.gen.model.notebook_engine_service_resize_notebook_engine_storage_request import NotebookEngineServiceResizeNotebookEngineStorageRequest
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_access_notebook_engine_response import V1AccessNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_create_notebook_engine_response import V1CreateNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_delete_notebook_engine_response import V1DeleteNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_get_notebook_engine_response import V1GetNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_list_notebook_engines_response import V1ListNotebookEnginesResponse
from h2o_engine_manager.gen.model.v1_notebook_engine import V1NotebookEngine
from h2o_engine_manager.gen.model.v1_pause_notebook_engine_response import V1PauseNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_resize_notebook_engine_storage_response import V1ResizeNotebookEngineStorageResponse
from h2o_engine_manager.gen.model.v1_resume_notebook_engine_response import V1ResumeNotebookEngineResponse
from h2o_engine_manager.gen.model.v1_update_notebook_engine_response import V1UpdateNotebookEngineResponse


class NotebookEngineServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.notebook_engine_service_access_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1AccessNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{notebookEngine}:access',
                'operation_id': 'notebook_engine_service_access_notebook_engine',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'notebook_engine',
                ],
                'required': [
                    'notebook_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'notebook_engine',
                ]
            },
            root_map={
                'validations': {
                    ('notebook_engine',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'notebook_engine':
                        (str,),
                },
                'attribute_map': {
                    'notebook_engine': 'notebookEngine',
                },
                'location_map': {
                    'notebook_engine': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notebook_engine_service_create_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/notebookEngines',
                'operation_id': 'notebook_engine_service_create_notebook_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'notebook_engine_id',
                    'notebook_engine',
                ],
                'required': [
                    'parent',
                    'notebook_engine_id',
                    'notebook_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'notebook_engine_id':
                        (str,),
                    'notebook_engine':
                        (V1NotebookEngine,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'notebook_engine_id': 'notebookEngineId',
                },
                'location_map': {
                    'parent': 'path',
                    'notebook_engine_id': 'query',
                    'notebook_engine': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.notebook_engine_service_delete_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1DeleteNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_8}',
                'operation_id': 'notebook_engine_service_delete_notebook_engine',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_8',
                ],
                'required': [
                    'name_8',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_8',
                ]
            },
            root_map={
                'validations': {
                    ('name_8',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_8':
                        (str,),
                },
                'attribute_map': {
                    'name_8': 'name_8',
                },
                'location_map': {
                    'name_8': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notebook_engine_service_get_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_8}',
                'operation_id': 'notebook_engine_service_get_notebook_engine',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_8',
                ],
                'required': [
                    'name_8',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_8',
                ]
            },
            root_map={
                'validations': {
                    ('name_8',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_8':
                        (str,),
                },
                'attribute_map': {
                    'name_8': 'name_8',
                },
                'location_map': {
                    'name_8': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notebook_engine_service_list_notebook_engines_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListNotebookEnginesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/notebookEngines',
                'operation_id': 'notebook_engine_service_list_notebook_engines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.notebook_engine_service_pause_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1PauseNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}:pause',
                'operation_id': 'notebook_engine_service_pause_notebook_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                    'body',
                ],
                'required': [
                    'name_1',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                },
                'location_map': {
                    'name_1': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.notebook_engine_service_resize_notebook_engine_storage_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResizeNotebookEngineStorageResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:resizeStorage',
                'operation_id': 'notebook_engine_service_resize_notebook_engine_storage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (NotebookEngineServiceResizeNotebookEngineStorageRequest,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.notebook_engine_service_resume_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResumeNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name_1}:resume',
                'operation_id': 'notebook_engine_service_resume_notebook_engine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name_1',
                    'body',
                ],
                'required': [
                    'name_1',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name_1',
                ]
            },
            root_map={
                'validations': {
                    ('name_1',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name_1':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'name_1': 'name_1',
                },
                'location_map': {
                    'name_1': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.notebook_engine_service_update_notebook_engine_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateNotebookEngineResponse,),
                'auth': [],
                'endpoint_path': '/v1/{notebookEngine.name}',
                'operation_id': 'notebook_engine_service_update_notebook_engine',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'notebook_engine_name',
                    'update_mask',
                    'notebook_engine',
                ],
                'required': [
                    'notebook_engine_name',
                    'update_mask',
                    'notebook_engine',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'notebook_engine_name',
                ]
            },
            root_map={
                'validations': {
                    ('notebook_engine_name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/notebookEngines\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'notebook_engine_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'notebook_engine':
                        (NotebookEngineResource,),
                },
                'attribute_map': {
                    'notebook_engine_name': 'notebookEngine.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'notebook_engine_name': 'path',
                    'update_mask': 'query',
                    'notebook_engine': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def notebook_engine_service_access_notebook_engine(
        self,
        notebook_engine,
        **kwargs
    ):
        """Access NotebookEngine. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: False positive. --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_access_notebook_engine(notebook_engine, async_req=True)
        >>> result = thread.get()

        Args:
            notebook_engine (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/ACCESS

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1AccessNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['notebook_engine'] = \
            notebook_engine
        return self.notebook_engine_service_access_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_create_notebook_engine(
        self,
        parent,
        notebook_engine_id,
        notebook_engine,
        **kwargs
    ):
        """Creates a new NotebookEngine within a specified workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_create_notebook_engine(parent, notebook_engine_id, notebook_engine, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/CREATE
            notebook_engine_id (str): Specify the NotebookEngine ID, which will become a part of the NotebookEngine resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            notebook_engine (V1NotebookEngine): The NotebookEngine resource to create. NON_EMPTY_DEFAULT fields that are not set in this request will be set to a value based on the selected profile.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['notebook_engine_id'] = \
            notebook_engine_id
        kwargs['notebook_engine'] = \
            notebook_engine
        return self.notebook_engine_service_create_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_delete_notebook_engine(
        self,
        name_8,
        **kwargs
    ):
        """Deletes a NotebookEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_delete_notebook_engine(name_8, async_req=True)
        >>> result = thread.get()

        Args:
            name_8 (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/DELETE

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1DeleteNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_8'] = \
            name_8
        return self.notebook_engine_service_delete_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_get_notebook_engine(
        self,
        name_8,
        **kwargs
    ):
        """Returns a specific NotebookEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_get_notebook_engine(name_8, async_req=True)
        >>> result = thread.get()

        Args:
            name_8 (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/GET

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_8'] = \
            name_8
        return self.notebook_engine_service_get_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_list_notebook_engines(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of NotebookEngines within a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_list_notebook_engines(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/LIST

        Keyword Args:
            page_size (int): Maximum number of NotebookEngines to return in a response. If unspecified (or set to 0), at most 50 NotebookEngines will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListNotebookEnginesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListNotebookEnginesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.notebook_engine_service_list_notebook_engines_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_pause_notebook_engine(
        self,
        name_1,
        body,
        **kwargs
    ):
        """Pauses a NotebookEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_pause_notebook_engine(name_1, body, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/PAUSE
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1PauseNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        kwargs['body'] = \
            body
        return self.notebook_engine_service_pause_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_resize_notebook_engine_storage(
        self,
        name,
        body,
        **kwargs
    ):
        """Resize NotebookEngine storage. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: False positive. --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_resize_notebook_engine_storage(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/RESIZE_STORAGE
            body (NotebookEngineServiceResizeNotebookEngineStorageRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ResizeNotebookEngineStorageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.notebook_engine_service_resize_notebook_engine_storage_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_resume_notebook_engine(
        self,
        name_1,
        body,
        **kwargs
    ):
        """Resumes an existing NotebookEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_resume_notebook_engine(name_1, body, async_req=True)
        >>> result = thread.get()

        Args:
            name_1 (str): NotebookEngine resource name. Format: workspaces/{workspace}/notebookEngines/{notebook_engine}  Authorization may require the following permission on the engine's parent workspace: * actions/enginemanager/notebookEngines/RESUME
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ResumeNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name_1'] = \
            name_1
        kwargs['body'] = \
            body
        return self.notebook_engine_service_resume_notebook_engine_endpoint.call_with_http_info(**kwargs)

    def notebook_engine_service_update_notebook_engine(
        self,
        notebook_engine_name,
        update_mask,
        notebook_engine,
        **kwargs
    ):
        """Updates a NotebookEngine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.notebook_engine_service_update_notebook_engine(notebook_engine_name, update_mask, notebook_engine, async_req=True)
        >>> result = thread.get()

        Args:
            notebook_engine_name (str): Output only. The resource name of the NotebookEngine. Format: `workspaces/*/notebookEngines/*`.
            update_mask (str): The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: {\"profile\", \"notebook_image\", \"cpu\", \"gpu\", \"memory_bytes\", \"display_name\", \"max_idle_duration\", \"max_running_duration\"}. Paths are case sensitive (must match exactly).  To update all allowed fields, specify exactly one path with value \"*\".
            notebook_engine (NotebookEngineResource): NotebookEngine resource.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateNotebookEngineResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['notebook_engine_name'] = \
            notebook_engine_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['notebook_engine'] = \
            notebook_engine
        return self.notebook_engine_service_update_notebook_engine_endpoint.call_with_http_info(**kwargs)

