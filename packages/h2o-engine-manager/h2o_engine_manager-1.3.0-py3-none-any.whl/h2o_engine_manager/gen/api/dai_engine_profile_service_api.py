"""
    ai/h2o/engine/v1/base_types.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_engine_manager.gen.api_client import ApiClient, Endpoint as _Endpoint
from h2o_engine_manager.gen.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from h2o_engine_manager.gen.model.dai_engine_profile_service_copy_dai_engine_profile_request import DAIEngineProfileServiceCopyDAIEngineProfileRequest
from h2o_engine_manager.gen.model.required_dai_engine_profile_resource import RequiredDAIEngineProfileResource
from h2o_engine_manager.gen.model.rpc_status import RpcStatus
from h2o_engine_manager.gen.model.v1_copy_dai_engine_profile_response import V1CopyDAIEngineProfileResponse
from h2o_engine_manager.gen.model.v1_create_dai_engine_profile_response import V1CreateDAIEngineProfileResponse
from h2o_engine_manager.gen.model.v1_dai_engine_profile import V1DAIEngineProfile
from h2o_engine_manager.gen.model.v1_get_dai_engine_profile_response import V1GetDAIEngineProfileResponse
from h2o_engine_manager.gen.model.v1_list_assigned_dai_engine_profiles_response import V1ListAssignedDAIEngineProfilesResponse
from h2o_engine_manager.gen.model.v1_list_dai_engine_profiles_response import V1ListDAIEngineProfilesResponse
from h2o_engine_manager.gen.model.v1_update_dai_engine_profile_response import V1UpdateDAIEngineProfileResponse


class DAIEngineProfileServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.d_ai_engine_profile_service_copy_dai_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1CopyDAIEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}:copy',
                'operation_id': 'd_ai_engine_profile_service_copy_dai_engine_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (DAIEngineProfileServiceCopyDAIEngineProfileRequest,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_create_dai_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1CreateDAIEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/daiEngineProfiles',
                'operation_id': 'd_ai_engine_profile_service_create_dai_engine_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'dai_engine_profile_id',
                    'dai_engine_profile',
                ],
                'required': [
                    'parent',
                    'dai_engine_profile_id',
                    'dai_engine_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'dai_engine_profile_id':
                        (str,),
                    'dai_engine_profile':
                        (V1DAIEngineProfile,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'dai_engine_profile_id': 'daiEngineProfileId',
                },
                'location_map': {
                    'parent': 'path',
                    'dai_engine_profile_id': 'query',
                    'dai_engine_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_delete_dai_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/v1/{name}',
                'operation_id': 'd_ai_engine_profile_service_delete_dai_engine_profile',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_get_dai_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1GetDAIEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{name}',
                'operation_id': 'd_ai_engine_profile_service_get_dai_engine_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_list_assigned_dai_engine_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListAssignedDAIEngineProfilesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/daiEngineProfiles:listAssigned',
                'operation_id': 'd_ai_engine_profile_service_list_assigned_dai_engine_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_list_dai_engine_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (V1ListDAIEngineProfilesResponse,),
                'auth': [],
                'endpoint_path': '/v1/{parent}/daiEngineProfiles',
                'operation_id': 'd_ai_engine_profile_service_list_dai_engine_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'parent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'parent',
                ]
            },
            root_map={
                'validations': {
                    ('parent',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'parent': 'parent',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'parent': 'path',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.d_ai_engine_profile_service_update_dai_engine_profile_endpoint = _Endpoint(
            settings={
                'response_type': (V1UpdateDAIEngineProfileResponse,),
                'auth': [],
                'endpoint_path': '/v1/{daiEngineProfile.name}',
                'operation_id': 'd_ai_engine_profile_service_update_dai_engine_profile',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'dai_engine_profile_name',
                    'update_mask',
                    'dai_engine_profile',
                ],
                'required': [
                    'dai_engine_profile_name',
                    'update_mask',
                    'dai_engine_profile',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dai_engine_profile_name',
                ]
            },
            root_map={
                'validations': {
                    ('dai_engine_profile_name',): {

                        'regex': {
                            'pattern': r'workspaces\/[^\/]+\/daiEngineProfiles\/[^\/]+',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dai_engine_profile_name':
                        (str,),
                    'update_mask':
                        (str,),
                    'dai_engine_profile':
                        (RequiredDAIEngineProfileResource,),
                },
                'attribute_map': {
                    'dai_engine_profile_name': 'daiEngineProfile.name',
                    'update_mask': 'updateMask',
                },
                'location_map': {
                    'dai_engine_profile_name': 'path',
                    'update_mask': 'query',
                    'dai_engine_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def d_ai_engine_profile_service_copy_dai_engine_profile(
        self,
        name,
        body,
        **kwargs
    ):
        """Copies an existing DAIEngineProfile to a new DAIEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_copy_dai_engine_profile(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): Required. Source DAIEngineProfile resource name. Format: workspaces/{workspace}/daiEngineProfiles/{dai_engine_profile}  Authorization may require the following permission on the source profile's parent workspace: * actions/enginemanager/daiEngineProfiles/GET
            body (DAIEngineProfileServiceCopyDAIEngineProfileRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CopyDAIEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.d_ai_engine_profile_service_copy_dai_engine_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_create_dai_engine_profile(
        self,
        parent,
        dai_engine_profile_id,
        dai_engine_profile,
        **kwargs
    ):
        """Creates a new DAIEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_create_dai_engine_profile(parent, dai_engine_profile_id, dai_engine_profile, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/CREATE
            dai_engine_profile_id (str): Specify the DAIEngineProfile ID, which will become a part of the DAIEngineProfile resource name.  It must: - contain 1-63 characters - contain only lowercase alphanumeric characters or hyphen ('-') - start with an alphabetic character - end with an alphanumeric character  This matches a regular expression: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$
            dai_engine_profile (V1DAIEngineProfile): The DAIEngineProfile resource to create.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1CreateDAIEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        kwargs['dai_engine_profile_id'] = \
            dai_engine_profile_id
        kwargs['dai_engine_profile'] = \
            dai_engine_profile
        return self.d_ai_engine_profile_service_create_dai_engine_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_delete_dai_engine_profile(
        self,
        name,
        **kwargs
    ):
        """Deletes a DAIEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_delete_dai_engine_profile(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): DAIEngineProfile resource name. Format: workspaces/{workspace}/daiEngineProfiles/{dai_engine_profile}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/DELETE

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        return self.d_ai_engine_profile_service_delete_dai_engine_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_get_dai_engine_profile(
        self,
        name,
        **kwargs
    ):
        """Get DAIEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_get_dai_engine_profile(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): DAIEngineProfile resource name. Format: workspaces/{workspace}/daiEngineProfiles/{dai_engine_profile}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/GET

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1GetDAIEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['name'] = \
            name
        return self.d_ai_engine_profile_service_get_dai_engine_profile_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_list_assigned_dai_engine_profiles(
        self,
        parent,
        **kwargs
    ):
        """Returns assigned DAIEngineProfiles that match OIDC roles of the caller. (-- api-linter: core::0136::http-uri-suffix=disabled     aip.dev/not-precedent: Not a standard List method. --)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_list_assigned_dai_engine_profiles(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/LIST_ASSIGNED

        Keyword Args:
            page_size (int): Maximum number of DAIEngineProfiles to return in a response. If unspecified (or set to 0), at most 50 DAIEngineProfiles will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListDAIEngineProfilesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListAssignedDAIEngineProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.d_ai_engine_profile_service_list_assigned_dai_engine_profiles_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_list_dai_engine_profiles(
        self,
        parent,
        **kwargs
    ):
        """Returns a collection of DAIEngineProfiles.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_list_dai_engine_profiles(parent, async_req=True)
        >>> result = thread.get()

        Args:
            parent (str): Workspace resource name. Format: workspaces/{workspace}  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/LIST

        Keyword Args:
            page_size (int): Maximum number of DAIEngineProfiles to return in a response. If unspecified (or set to 0), at most 50 DAIEngineProfiles will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.. [optional]
            page_token (str): Leave unset to receive the initial page. To list any subsequent pages use the value of 'next_page_token' returned from the ListDAIEngineProfilesResponse.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1ListDAIEngineProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['parent'] = \
            parent
        return self.d_ai_engine_profile_service_list_dai_engine_profiles_endpoint.call_with_http_info(**kwargs)

    def d_ai_engine_profile_service_update_dai_engine_profile(
        self,
        dai_engine_profile_name,
        update_mask,
        dai_engine_profile,
        **kwargs
    ):
        """Updates a DAIEngineProfile.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.d_ai_engine_profile_service_update_dai_engine_profile(dai_engine_profile_name, update_mask, dai_engine_profile, async_req=True)
        >>> result = thread.get()

        Args:
            dai_engine_profile_name (str): Output only. Resource name. Format: workspaces/*/daiEngineProfiles/*
            update_mask (str): Required. The list of paths referencing which fields to update. Update mask must be non-empty.  Allowed field paths are: - display_name - priority - enabled - assigned_oidc_roles_enabled - assigned_oidc_roles - max_running_engines - cpu_constraint - gpu_constraint - memory_bytes_constraint - storage_bytes_constraint - max_idle_duration_constraint - max_running_duration_constraint - max_non_interaction_duration - max_unused_duration - configuration_override - base_configuration - config_editability - yaml_pod_template_spec - yaml_gpu_tolerations - triton_enabled - gpu_resource_name - data_directory_storage_class  Paths are case sensitive (must match exactly).  To update all allowed fields, specify exactly one path with value \"*\".
            dai_engine_profile (RequiredDAIEngineProfileResource): Required. DAIEngineProfile resource.  Authorization may require the following permission on the profile's parent workspace: * actions/enginemanager/daiEngineProfiles/UPDATE

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V1UpdateDAIEngineProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dai_engine_profile_name'] = \
            dai_engine_profile_name
        kwargs['update_mask'] = \
            update_mask
        kwargs['dai_engine_profile'] = \
            dai_engine_profile
        return self.d_ai_engine_profile_service_update_dai_engine_profile_endpoint.call_with_http_info(**kwargs)

