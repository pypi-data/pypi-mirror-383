Metadata-Version: 2.4
Name: bioql
Version: 5.5.8
Summary: Enterprise Quantum Computing v5.5.8 - CHARGED MOLECULE FIX: Auto-neutralization for N+/O- atoms, robust 3D embedding, CRISPR IN-SILICO + DYNAMIC PDB/SMILES: GLP1R obesity drug design, pharmaceutical scoring (Lipinski, QED, SA Score, PAINS) - IBM Torino 133q validated
Home-page: https://github.com/yourusername/bioql
Author: BioQL Development Team - SpectrixRD
Author-email: BioQL Team - SpectrixRD <bioql@spectrixrd.com>
License: MIT
Project-URL: Homepage, https://bioql.com
Project-URL: Documentation, https://docs.bioql.com
Project-URL: Repository, https://github.com/bioql/bioql
Project-URL: Bug Reports, https://github.com/bioql/bioql/issues
Project-URL: Changelog, https://github.com/bioql/bioql/blob/main/CHANGELOG.md
Project-URL: Funding, https://bioql.com/pricing
Keywords: quantum computing,bioinformatics,drug discovery,natural language,qiskit,profiling,optimization,circuit library,ADME prediction,molecular docking,quantum algorithms,computational biology,quantum machine learning,genomics,proteomics,natural language processing,intermediate representation,sequence alignment,circuit optimization,cost optimization,batch processing,quantum error correction,QEC,error mitigation,OpenFermion,Qualtran,quantum chemistry,RSA factorization,surface codes,zero noise extrapolation,CRISPR,gene editing,gRNA design,guide RNA,off-target prediction
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Healthcare Industry
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: Topic :: Scientific/Engineering :: Medical Science Apps.
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: qiskit>=0.45.0
Requires-Dist: qiskit-aer
Requires-Dist: qiskit-ibm-runtime
Requires-Dist: qiskit-ionq
Requires-Dist: numpy>=1.21.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: biopython>=1.79
Requires-Dist: requests>=2.28.0
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: loguru>=0.7.0
Requires-Dist: uuid6>=2023.5.2
Requires-Dist: httpx>=0.24.0
Requires-Dist: jsonschema>=4.0.0
Requires-Dist: networkx>=3.0
Requires-Dist: plotly>=5.14.0
Requires-Dist: openfermion>=1.5.0
Requires-Dist: sympy>=1.12
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=0.991; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: pre-commit>=2.20.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.19.0; extra == "docs"
Provides-Extra: cloud
Requires-Dist: boto3>=1.26.0; extra == "cloud"
Requires-Dist: azure-quantum>=1.0.0; extra == "cloud"
Requires-Dist: cirq-ionq>=1.0.0; extra == "cloud"
Provides-Extra: visualization
Requires-Dist: plotly>=5.0.0; extra == "visualization"
Requires-Dist: seaborn>=0.11.0; extra == "visualization"
Requires-Dist: pandas>=1.4.0; extra == "visualization"
Provides-Extra: vina
Requires-Dist: meeko>=0.4.0; extra == "vina"
Requires-Dist: rdkit>=2022.9.1; extra == "vina"
Requires-Dist: openbabel-wheel>=3.1.1; extra == "vina"
Provides-Extra: viz
Requires-Dist: py3Dmol>=2.0.0; extra == "viz"
Requires-Dist: pillow>=9.0.0; extra == "viz"
Provides-Extra: openmm
Requires-Dist: openmm>=8.0.0; extra == "openmm"
Provides-Extra: qec
Requires-Dist: openfermion>=1.5.0; extra == "qec"
Requires-Dist: sympy>=1.12; extra == "qec"
Requires-Dist: qualtran>=0.6.0; extra == "qec"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: platform
Dynamic: requires-python

# 🧬 BioQL - Quantum Computing for Bioinformatics

Natural Language Quantum Computing Platform for Drug Discovery

**Version:** 3.0.2  
**Status:** Production Ready ✅

---

## 🚀 Quick Start

### Installation
```bash
pip install bioql
```

### Demo with API Key
```python
from bioql import quantum

API_KEY = "bioql_test_8a3f9d2c1e5b4f7a9c2d6e1f8b3a5c7d"

result = quantum(
    "create a bell state with two qubits and measure both",
    backend='simulator',
    api_key=API_KEY,
    shots=1000
)

print(result.counts)
```

---

## 📚 Documentation

### 🎯 Getting Started
- **[Demo Quick Start](docs/demo/START_HERE.md)** - Start here for demos
- **[API Key Guide](docs/demo/API_KEY_ONLY.txt)** - Demo credentials
- **[Complete Demo Guide](docs/demo/DEMO_CREDENTIALS.md)** - All examples

### ⚛️ IonQ Integration
- **[IonQ Quick Start](docs/ionq/IONQ_QUICK_START.txt)** - IonQ setup
- **[IonQ Working Guide](docs/ionq/IONQ_WORKING_GUIDE.md)** - Verified examples
- **[IonQ Simulators](docs/ionq/IONQ_SIMULATORS_GUIDE.md)** - All simulators

### 🔍 Service Monitoring
- **[Monitor Quick Start](docs/monitor/INICIAR_MONITOR.txt)** - Start monitoring
- **[Monitor Guide](docs/monitor/SERVICE_MONITOR_GUIDE.md)** - Complete guide
- **[Monitor Summary](docs/monitor/MONITOR_SYSTEM_SUMMARY.md)** - Overview

### 📖 Technical Docs
- **[Project Structure](docs/PROJECT_STRUCTURE.md)** - Architecture
- **[Technical Reference](docs/technical/)** - API docs
- **[Examples](examples/)** - Code examples

---

## 🛠️ Management Scripts

All management scripts are in the root directory:

```bash
# Service Management
./start_services.sh       # Start all services
./stop_services.sh        # Stop all services
./check_services.sh       # Check status

# Monitoring
./monitor_services.sh     # 24h health monitor
./test_monitor.sh         # Test monitoring

# Development
./start_server.sh         # Start dev server
```

---

## 📁 Project Structure

```
bioql/
├── bioql/                    # Main package
├── docs/                     # Documentation
│   ├── demo/                 # Demo guides
│   ├── ionq/                 # IonQ guides
│   └── monitor/              # Monitor guides
├── examples/                 # Example scripts
├── scripts/                  # Utility scripts
├── tests/                    # Test suite
└── *.sh                      # Management scripts
```

---

## 🔑 Demo API Key

```
bioql_test_8a3f9d2c1e5b4f7a9c2d6e1f8b3a5c7d
```

- **Access:** Unlimited simulator access
- **Cost:** FREE
- **Backends:** simulator, ionq_simulator (with qiskit-ionq)

---

## 💻 Features

- ✅ 100% Natural Language - No quantum gates needed
- ✅ Drug Discovery - Molecular simulations
- ✅ Multiple Backends - Local, IonQ, IBM Quantum
- ✅ Auto-Monitoring - 24/7 health checks
- ✅ Production Ready - Enterprise-grade code

---

## 📞 Support

- **Docs:** docs/demo/START_HERE.md
- **Examples:** examples/
- **Email:** support@bioql.com

---

## 📄 License

MIT License - See [LICENSE](LICENSE)

---

**Ready to start?** Read [docs/demo/START_HERE.md](docs/demo/START_HERE.md)
