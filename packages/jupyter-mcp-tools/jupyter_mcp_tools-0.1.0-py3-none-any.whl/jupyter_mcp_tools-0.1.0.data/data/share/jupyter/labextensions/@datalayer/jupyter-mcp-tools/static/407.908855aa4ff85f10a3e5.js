"use strict";(self.webpackChunk_datalayer_jupyter_mcp_tools=self.webpackChunk_datalayer_jupyter_mcp_tools||[]).push([[407],{407:(e,t,o)=>{o.r(t),o.d(t,{default:()=>C});var s=o(316),a=o(23),l=o(296),c=o(219),n=o(794),r=o(222),i=o(345),m=o.n(i);const p=({tool:e,onExecuteLocal:t,onExecuteRemote:o})=>{const[s,a]=(0,i.useState)(!1),[l,c]=(0,i.useState)("{}"),[n,r]=(0,i.useState)(null),p=c=>{if(e.parameters&&e.parameters.properties&&Object.keys(e.parameters.properties).length>0&&!s)a(!0);else try{const s=JSON.parse(l);"local"===c?t(e.id,s):o(e.id,s),a(!1),r(null)}catch(e){r("Invalid JSON format")}},d=()=>{a(!1),r(null),c("{}")};return m().createElement("div",{className:"mcp-tool-item"},m().createElement("div",{className:"mcp-tool-header"},m().createElement("div",{className:"mcp-tool-info"},m().createElement("div",{className:"mcp-tool-label",title:e.caption},e.label||e.id),m().createElement("div",{className:"mcp-tool-id"},e.id)),!s&&m().createElement("div",{className:"mcp-tool-buttons"},m().createElement("button",{className:"mcp-tool-button mcp-button-local jp-Button jp-mod-small",onClick:()=>p("local"),disabled:!e.isEnabled,title:"Execute command locally"},"Local"),m().createElement("button",{className:"mcp-tool-button mcp-button-remote jp-Button jp-mod-small jp-mod-styled",onClick:()=>p("remote"),disabled:!e.isEnabled,title:"Execute command via WebSocket"},"Remote"))),s&&m().createElement("div",{className:"mcp-tool-form"},m().createElement("div",{className:"mcp-form-header"},m().createElement("span",{className:"mcp-form-title"},"Parameters"),m().createElement("button",{className:"mcp-form-close",onClick:d,title:"Cancel"},"×")),m().createElement("textarea",{className:"mcp-form-input",value:l,onChange:e=>c(e.target.value),placeholder:'{"key": "value"}',rows:4}),n&&m().createElement("div",{className:"mcp-form-error"},n),m().createElement("div",{className:"mcp-form-actions"},m().createElement("button",{className:"jp-Button jp-mod-small jp-mod-reject",onClick:d},"Cancel"),m().createElement("button",{className:"jp-Button jp-mod-small",onClick:()=>p("local"),title:"Execute locally"},"Local"),m().createElement("button",{className:"jp-Button jp-mod-small jp-mod-accept",onClick:()=>p("remote"),title:"Execute via WebSocket"},"Remote"))))},d=({message:e})=>{const[t,o]=(0,i.useState)(!1);return m().createElement("div",{className:`mcp-message-item mcp-message-${e.direction}`},m().createElement("div",{className:"mcp-message-header",onClick:()=>o(!t)},m().createElement("div",{className:"mcp-message-info"},m().createElement("span",{className:`mcp-message-direction mcp-${e.direction}`},"sent"===e.direction?"→":"←"),m().createElement("span",{className:"mcp-message-type"},e.type),m().createElement("span",{className:"mcp-message-time"},e.timestamp.toLocaleTimeString())),m().createElement("span",{className:"mcp-message-expand"},t?"▼":"▶")),t&&m().createElement("div",{className:"mcp-message-body"},m().createElement("pre",null,JSON.stringify(e.data,null,2))))},h=({tools:e,messages:t,onExecuteToolLocal:o,onExecuteToolRemote:s})=>{const[a,l]=(0,i.useState)("tools"),[c,n]=(0,i.useState)("");console.log(`MCPToolsPanel render: ${e.length} tools, ${t.length} messages`);const r=e.filter(e=>e.id.toLowerCase().includes(c.toLowerCase())||e.label&&e.label.toLowerCase().includes(c.toLowerCase()));return console.log(`MCPToolsPanel: Filtered to ${r.length} tools (search: "${c}")`),m().createElement("div",{className:"mcp-tools-panel"},m().createElement("div",{className:"mcp-panel-header"},m().createElement("div",{className:"mcp-panel-stats"},m().createElement("span",{title:"Total tools"},m().createElement("strong",null,e.length)," tools"),m().createElement("span",{className:"mcp-stats-separator"},"•"),m().createElement("span",{title:"Total messages"},m().createElement("strong",null,t.length)," messages"))),m().createElement("div",{className:"mcp-panel-tabs"},m().createElement("button",{className:"mcp-tab "+("tools"===a?"mcp-tab-active":""),onClick:()=>l("tools")},"Commands (",r.length,")"),m().createElement("button",{className:"mcp-tab "+("messages"===a?"mcp-tab-active":""),onClick:()=>l("messages")},"Messages (",t.length,")")),"tools"===a&&m().createElement("div",{className:"mcp-panel-content"},m().createElement("div",{className:"mcp-search-box"},m().createElement("input",{type:"text",className:"mcp-search-input jp-mod-styled",placeholder:"Search commands...",value:c,onChange:e=>n(e.target.value)})),m().createElement("div",{className:"mcp-tools-list"},0===r.length?m().createElement("div",{className:"mcp-empty-state"},c?"No commands found":"Loading commands..."):r.map(e=>m().createElement(p,{key:e.id,tool:e,onExecuteLocal:o,onExecuteRemote:s})))),"messages"===a&&m().createElement("div",{className:"mcp-panel-content"},m().createElement("div",{className:"mcp-messages-list"},0===t.length?m().createElement("div",{className:"mcp-empty-state"},"No messages yet"):t.slice().reverse().map(e=>m().createElement(d,{key:e.id,message:e})))))},u=new r.LabIcon({name:"@datalayer/jupyter-mcp-tools:icon",svgstr:'\n    <svg fill="currentColor" fill-rule="evenodd" height="1em" style="flex:none;line-height:1" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg"><title>ModelContextProtocol</title><path d="M15.688 2.343a2.588 2.588 0 00-3.61 0l-9.626 9.44a.863.863 0 01-1.203 0 .823.823 0 010-1.18l9.626-9.44a4.313 4.313 0 016.016 0 4.116 4.116 0 011.204 3.54 4.3 4.3 0 013.609 1.18l.05.05a4.115 4.115 0 010 5.9l-8.706 8.537a.274.274 0 000 .393l1.788 1.754a.823.823 0 010 1.18.863.863 0 01-1.203 0l-1.788-1.753a1.92 1.92 0 010-2.754l8.706-8.538a2.47 2.47 0 000-3.54l-.05-.049a2.588 2.588 0 00-3.607-.003l-7.172 7.034-.002.002-.098.097a.863.863 0 01-1.204 0 .823.823 0 010-1.18l7.273-7.133a2.47 2.47 0 00-.003-3.537z"></path><path d="M14.485 4.703a.823.823 0 000-1.18.863.863 0 00-1.204 0l-7.119 6.982a4.115 4.115 0 000 5.9 4.314 4.314 0 006.016 0l7.12-6.982a.823.823 0 000-1.18.863.863 0 00-1.204 0l-7.119 6.982a2.588 2.588 0 01-3.61 0 2.47 2.47 0 010-3.54l7.12-6.982z"></path></svg>'});class g extends n.ReactWidget{constructor(){super(),this._tools=[],this._messages=[],this._executeCallbackLocal=null,this._executeCallbackRemote=null,this.handleExecuteToolLocal=(e,t)=>{this._executeCallbackLocal&&this._executeCallbackLocal(e,t)},this.handleExecuteToolRemote=(e,t)=>{this._executeCallbackRemote&&this._executeCallbackRemote(e,t)},this.addClass("jp-MCPToolsWidget"),this.id="mcp-tools-widget",this.title.label="",this.title.caption="Model Context Protocol Tools",this.title.icon=u,this.title.closable=!0}setTools(e){console.log(`MCPToolsWidget.setTools() called with ${e.length} tools`),this._tools=e,this.update(),console.log(`MCPToolsWidget._tools now has ${this._tools.length} tools`)}getTools(){return this._tools}addMessage(e,t,o){const s={id:`${Date.now()}-${Math.random()}`,timestamp:new Date,direction:e,type:t,data:o};this._messages.push(s),this._messages.length>100&&(this._messages=this._messages.slice(-100)),this.update()}clearMessages(){this._messages=[],this.update()}setExecuteCallbackLocal(e){this._executeCallbackLocal=e}setExecuteCallbackRemote(e){this._executeCallbackRemote=e}render(){return console.log(`MCPToolsWidget.render() called with ${this._tools.length} tools and ${this._messages.length} messages`),m().createElement(h,{tools:this._tools,messages:this._messages,onExecuteToolLocal:this.handleExecuteToolLocal,onExecuteToolRemote:this.handleExecuteToolRemote})}}function y(e,t=3,o=0,s=new WeakSet){if(null==e)return e;if("boolean"==typeof e||"number"==typeof e||"string"==typeof e)return e;if(o>t)return"<max depth reached>";if(Array.isArray(e))return e.slice(0,100).map(e=>y(e,t,o+1,s));if("object"==typeof e){if(s.has(e))return"<circular reference>";s.add(e);const a={},l=Object.keys(e).slice(0,100);for(const c of l)try{a[c]=y(e[c],t,o+1,s)}catch(e){a[c]="<serialization error>"}return a}try{return String(e)}catch(e){return"<unserializable>"}}class E{constructor(e,t){this.ws=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=2e3,this.app=e,this.widget=t,this.widget.setExecuteCallbackLocal((e,t)=>{this.applyToolLocal(e,t)}),this.widget.setExecuteCallbackRemote((e,t)=>{this.applyToolRemote(e,t)})}connect(){const e=l.ServerConnection.makeSettings(),t=a.URLExt.join(e.wsUrl,"jupyter-mcp-tools","echo");console.log("Connecting to WebSocket:",t),this.ws=new WebSocket(t),this.ws.onopen=()=>{console.log("WebSocket connected"),this.reconnectAttempts=0,requestAnimationFrame(()=>{this.registerTools()})},this.ws.onmessage=e=>{this.handleMessage(e.data)},this.ws.onerror=e=>{console.error("WebSocket error:",e)},this.ws.onclose=()=>{console.log("WebSocket closed"),this.attemptReconnect()}}attemptReconnect(){this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`),setTimeout(()=>this.connect(),this.reconnectDelay)):console.error("Max reconnection attempts reached")}registerTools(){const e=this.app.commands,t=e.listCommands();console.log(`Total JupyterLab commands available: ${t.length}`);const o=[];t.forEach(t=>{try{const s=e.isEnabled(t),a=e.label(t),l={id:t,label:a||t,caption:e.caption(t)||"",usage:e.usage(t)||"",isEnabled:s,parameters:this.getCommandParameters(t)};o.push(l)}catch(e){console.warn(`Error processing command ${t}:`,e)}}),console.log(`Successfully processed ${o.length} tools`),this.widget.setTools(o);const s={type:"register_tools",tools:o};this.sendMessage(s),console.log(`Registered ${o.length} tools with backend`)}getCommandParameters(e){try{return{type:"object",properties:{},description:"Command arguments (if any)"}}catch(e){return{}}}handleMessage(e){try{const t=JSON.parse(e);console.log("Received message:",t),this.widget.addMessage("received",t.type||"unknown",t),"apply_tool"===t.type&&this.applyToolFromServer(t.tool_id,t.parameters||{})}catch(e){console.error("Error handling message:",e)}}async applyToolLocal(e,t){try{if(console.log(`Executing tool LOCALLY: ${e}`,t),this.app.commands.hasCommand(e)){const o=await this.app.commands.execute(e,t);console.log(`Tool ${e} executed successfully`);const s=y(o,2);this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,result:s,success:!0})}else console.error(`Command not found: ${e}`),this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,error:`Command not found: ${e}`,success:!1})}catch(o){console.error(`Error executing tool locally ${e}:`,o),this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,error:String(o),success:!1})}}async applyToolRemote(e,t){try{console.log(`Sending tool execution request via WebSocket: ${e}`,t);const o={type:"apply_tool",tool_id:e,parameters:t};this.sendMessage(o),console.log(`Sent apply_tool message for ${e} to server`)}catch(o){console.error(`Error sending tool execution request ${e}:`,o),this.widget.addMessage("sent","apply_tool_error",{tool_id:e,parameters:t,error:String(o)})}}async applyToolFromServer(e,t){try{if(console.log(`Applying tool from server: ${e}`,t),this.app.commands.hasCommand(e)){const o=await this.app.commands.execute(e,t);console.log(`Tool ${e} executed successfully`);const s={type:"tool_result",tool_id:e,success:!0,result:y(o,2)};this.sendMessage(s)}else{console.error(`Command not found: ${e}`);const t={type:"tool_result",tool_id:e,success:!1,error:`Command not found: ${e}`};this.sendMessage(t)}}catch(t){console.error(`Error applying tool ${e}:`,t);const o={type:"tool_result",tool_id:e,success:!1,error:String(t)};this.sendMessage(o)}}sendMessage(e){this.ws&&this.ws.readyState===WebSocket.OPEN?(this.ws.send(JSON.stringify(e)),this.widget.addMessage("sent",e.type||"unknown",e)):console.error("WebSocket is not connected")}close(){this.ws&&(this.ws.close(),this.ws=null)}}const b={id:"@datalayer/jupyter-mcp-tools:plugin",description:"Jupyter MCP Tools.",autoStart:!0,optional:[s.ISettingRegistry],requires:[c.ILabShell],activate:(e,t,o)=>{console.log("JupyterLab extension @datalayer/jupyter-mcp-tools is activated!"),o&&o.load(b.id).then(e=>{console.log("@datalayer/jupyter-mcp-tools settings loaded:",e.composite)}).catch(e=>{console.error("Failed to load settings for @datalayer/jupyter-mcp-tools.",e)});const s=new g;t.add(s,"left",{rank:500}),e.restored.then(()=>{console.log("JupyterLab fully restored, initializing MCP Tools...");const t=new E(e,s);console.log("Connecting WebSocket..."),t.connect()}),async function(e="",t={}){const o=l.ServerConnection.makeSettings(),s=a.URLExt.join(o.baseUrl,"jupyter-mcp-tools",e);let c;try{c=await l.ServerConnection.makeRequest(s,t,o)}catch(e){throw new l.ServerConnection.NetworkError(e)}let n=await c.text();if(n.length>0)try{n=JSON.parse(n)}catch(e){console.log("Not a JSON response body.",c)}if(!c.ok)throw new l.ServerConnection.ResponseError(c,n.message||n);return n}("get-example").then(e=>{console.log(e)}).catch(e=>{console.error(`The jupyter_mcp_tools server extension appears to be missing.\n${e}`)})}},C=b}}]);