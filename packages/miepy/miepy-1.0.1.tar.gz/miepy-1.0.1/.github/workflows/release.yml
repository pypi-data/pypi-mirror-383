name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Build sdist
        run: uv build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz
          retention-days: 7

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15, macos-15-intel, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc cmake unzip libomp

      - name: Set up compiler paths (macOS ARM)
        if: matrix.os == 'macos-15'
        run: |
          LIBOMP_PREFIX=$(brew --prefix libomp)
          GCC_PREFIX=$(brew --prefix gcc)
          GCC_VERSION=$(ls ${GCC_PREFIX}/bin/gcc-* | grep -oE '[0-9]+$' | head -n1)

          echo "CC=${GCC_PREFIX}/bin/gcc-${GCC_VERSION}" >> $GITHUB_ENV
          echo "CXX=${GCC_PREFIX}/bin/g++-${GCC_VERSION}" >> $GITHUB_ENV
          echo "FC=${GCC_PREFIX}/bin/gfortran-${GCC_VERSION}" >> $GITHUB_ENV
          echo "LIBOMP_PREFIX=${LIBOMP_PREFIX}" >> $GITHUB_ENV
          echo "VCPKG_TRIPLET=arm64-osx" >> $GITHUB_ENV

      - name: Set up compiler paths (macOS Intel)
        if: matrix.os == 'macos-15-intel'
        run: |
          LIBOMP_PREFIX=$(brew --prefix libomp)
          GCC_PREFIX=$(brew --prefix gcc)
          GCC_VERSION=$(ls ${GCC_PREFIX}/bin/gcc-* | grep -oE '[0-9]+$' | head -n1)

          echo "CC=${GCC_PREFIX}/bin/gcc-${GCC_VERSION}" >> $GITHUB_ENV
          echo "CXX=${GCC_PREFIX}/bin/g++-${GCC_VERSION}" >> $GITHUB_ENV
          echo "FC=${GCC_PREFIX}/bin/gfortran-${GCC_VERSION}" >> $GITHUB_ENV
          echo "LIBOMP_PREFIX=${LIBOMP_PREFIX}" >> $GITHUB_ENV
          echo "VCPKG_TRIPLET=x64-osx" >> $GITHUB_ENV

      - name: Set up MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-cmake
            make
            unzip

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2
        env:
          CIBW_BUILD: cp311-* cp312-* cp313-*
          CIBW_SKIP: "*-musllinux_* *-win32"
          # Linux: Use manylinux_2_28 (AlmaLinux 8, modern toolchain)
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          # Before build: install system dependencies in the container
          CIBW_BEFORE_BUILD_LINUX: |
            dnf install -y cmake gcc-c++ gcc-gfortran curl tar unzip zip ninja-build
            cd {project}/vcpkg && ./bootstrap-vcpkg.sh
          # macOS: Bootstrap vcpkg
          CIBW_BEFORE_BUILD_MACOS: cd {project}/vcpkg && ./bootstrap-vcpkg.sh
          # macOS: Set environment variables for build
          CIBW_ENVIRONMENT_MACOS: >
            CC=${{ env.CC }}
            CXX=${{ env.CXX }}
            FC=${{ env.FC }}
            OpenMP_ROOT=${{ env.LIBOMP_PREFIX }}
            VCPKG_OVERLAY_TRIPLETS={project}/vcpkg/triplets
            MACOSX_DEPLOYMENT_TARGET=15.0
            CMAKE_ARGS="-DCMAKE_C_COMPILER=${{ env.CC }} -DCMAKE_CXX_COMPILER=${{ env.CXX }} -DCMAKE_Fortran_COMPILER=${{ env.FC }} -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }}"
          # Windows: Install delvewheel and bootstrap vcpkg
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel && cd {project}/vcpkg && bash bootstrap-vcpkg.sh
          # Windows: Set environment variables for build
          CIBW_ENVIRONMENT_WINDOWS: >
            PATH="C:\\msys64\\mingw64\\bin;$PATH"
            VCPKG_OVERLAY_TRIPLETS={project}/vcpkg/triplets
            VCPKG_INSTALLED_DIR={project}/vcpkg_installed
            CMAKE_ARGS="-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_Fortran_COMPILER=gfortran -DVCPKG_TARGET_TRIPLET=x64-windows -DVCPKG_INSTALLED_DIR={project}/vcpkg_installed -G 'MinGW Makefiles'"
          # Windows: Bundle DLL dependencies using delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path {project}\\vcpkg_installed\\x64-windows\\bin -w {dest_dir} {wheel}"
          # Test the wheels
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: ./wheelhouse/*.whl
          retention-days: 7

  publish:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist-all
          merge-multiple: true

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: uv publish --check-url https://pypi.org/simple/ dist-all/*

  release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist-all

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          draft: false
          prerelease: false
          files: dist-all/**/*
