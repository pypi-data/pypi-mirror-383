[project]
name = "asciinema_scene"
version = "1.2.2"
description = "Toolbox to edit asciinema screencasts (sciine)"
authors = [{ name = "Jerome Dumonteil", email = "jerome.dumonteil@gmail.com" }]
readme = "README.md"
license = "MIT"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
requires-python = ">=3.10,<4.0"
dependencies = ["click>=8.3.0,<9"]

[project.urls]
Repository = "https://github.com/jdum/asciinema-scene"
Documentation = "https://jdum.github.io/asciinema-scene/"
Changelog = "https://github.com/jdum/asciinema-scene/blob/master/CHANGES.md"

[project.scripts]
sciine = "asciinema_scene.sciine:cli"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=6.2.1",
    "coverage>=7.10.7",
    "deptry>=0.23.0",
    "mypy>=1.18.2",
    "mypy-extensions>=1.1.0",
    "typing-extensions>=4.15.0",
    "tox>=4.31.0",
    "tox-gh-actions>=3.4.0",
    "ruff>=0.14.0",
    "isort>=6.1.0",
]

[build-system]
requires = ["uv_build>=0.9.0,<0.10.0"]
build-backend = "uv_build"

[tool.mypy]
files = ["src/asciinema_scene"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.ruff]
target-version = "py313"
exclude = [".venv"]
line-length = 88
indent-width = 4
fix = false
lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    #Use specific rule codes when ignoring type issues
    "PGH003",
    #check for execution of untrusted input
    "S603",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["asciinema_scene"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]

[tool.docformatter]
in-place = true
recursive = true
wrap-summaries = 79
wrap-descriptions = 79
blank = false
close-quotes-on-newline = true
non-strict = true
